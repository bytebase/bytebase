# Generated with protoc-gen-openapi
# https://github.com/google/gnostic/tree/master/cmd/protoc-gen-openapi

openapi: 3.0.3
info:
    title: ""
    version: 0.0.1
paths:
    /v1/*/{*}/iamPolicies:batchGet:
        get:
            tags:
                - ProjectService
            description: Deprecated.
            operationId: ProjectService_BatchGetIamPolicy
            parameters:
                - name: '*'
                  in: path
                  description: The * id.
                  required: true
                  schema:
                    type: string
                - name: names
                  in: query
                  schema:
                    type: array
                    items:
                        type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BatchGetIamPolicyResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/actuator/cache:
        delete:
            tags:
                - ActuatorService
            operationId: ActuatorService_DeleteCache
            responses:
                "200":
                    description: OK
                    content: {}
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/actuator/info:
        get:
            tags:
                - ActuatorService
            operationId: ActuatorService_GetActuatorInfo
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ActuatorInfo'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        patch:
            tags:
                - ActuatorService
            operationId: ActuatorService_UpdateActuatorInfo
            parameters:
                - name: updateMask
                  in: query
                  description: The list of fields to update.
                  schema:
                    type: string
                    format: field-mask
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ActuatorInfo'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ActuatorInfo'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/actuator/resources:
        get:
            tags:
                - ActuatorService
            operationId: ActuatorService_GetResourcePackage
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ResourcePackage'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/auditLogs:export:
        post:
            tags:
                - AuditLogService
            operationId: AuditLogService_ExportAuditLogs
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ExportAuditLogsRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ExportAuditLogsResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/auditLogs:search:
        post:
            tags:
                - AuditLogService
            operationId: AuditLogService_SearchAuditLogs
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SearchAuditLogsRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SearchAuditLogsResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/auth/login:
        post:
            tags:
                - AuthService
            operationId: AuthService_Login
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/LoginRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LoginResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/auth/logout:
        post:
            tags:
                - AuthService
            operationId: AuthService_Logout
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/LogoutRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content: {}
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/cel/batchDeparse:
        post:
            tags:
                - CelService
            operationId: CelService_BatchDeparse
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/BatchDeparseRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BatchDeparseResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/cel/batchParse:
        post:
            tags:
                - CelService
            operationId: CelService_BatchParse
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/BatchParseRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BatchParseResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/environments:
        get:
            tags:
                - EnvironmentService
            operationId: EnvironmentService_ListEnvironments
            parameters:
                - name: pageSize
                  in: query
                  description: |-
                    Not used.
                     The maximum number of environments to return. The service may return fewer than
                     this value.
                     If unspecified, at most 10 environments will be returned.
                     The maximum value is 1000; values above 1000 will be coerced to 1000.
                  schema:
                    type: integer
                    format: int32
                - name: pageToken
                  in: query
                  description: |-
                    Not used.
                     A page token, received from a previous `ListEnvironments` call.
                     Provide this to retrieve the subsequent page.

                     When paginating, all other parameters provided to `ListEnvironments` must match
                     the call that provided the page token.
                  schema:
                    type: string
                - name: showDeleted
                  in: query
                  description: Show deleted environments if specified.
                  schema:
                    type: boolean
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListEnvironmentsResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        post:
            tags:
                - EnvironmentService
            operationId: EnvironmentService_CreateEnvironment
            parameters:
                - name: environmentId
                  in: query
                  description: |-
                    The ID to use for the environment, which will become the final component of
                     the environment's resource name.

                     This value should be 4-63 characters, and valid characters
                     are /[a-z][0-9]-/.
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Environment'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Environment'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/environments/{environment}:
        get:
            tags:
                - EnvironmentService
            operationId: EnvironmentService_GetEnvironment
            parameters:
                - name: environment
                  in: path
                  description: The environment id.
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Environment'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        delete:
            tags:
                - EnvironmentService
            operationId: EnvironmentService_DeleteEnvironment
            parameters:
                - name: environment
                  in: path
                  description: The environment id.
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content: {}
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        patch:
            tags:
                - EnvironmentService
            operationId: EnvironmentService_UpdateEnvironment
            parameters:
                - name: environment
                  in: path
                  description: The environment id.
                  required: true
                  schema:
                    type: string
                - name: updateMask
                  in: query
                  description: The list of fields to update.
                  schema:
                    type: string
                    format: field-mask
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Environment'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Environment'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/environments/{environment}/policies:
        get:
            tags:
                - OrgPolicyService
            operationId: OrgPolicyService_ListPolicies
            parameters:
                - name: environment
                  in: path
                  description: The environment id.
                  required: true
                  schema:
                    type: string
                - name: policyType
                  in: query
                  schema:
                    enum:
                        - POLICY_TYPE_UNSPECIFIED
                        - ROLLOUT_POLICY
                        - SLOW_QUERY
                        - DISABLE_COPY_DATA
                        - MASKING_RULE
                        - MASKING_EXCEPTION
                        - RESTRICT_ISSUE_CREATION_FOR_SQL_REVIEW
                        - TAG
                        - DATA_SOURCE_QUERY
                        - DATA_EXPORT
                    type: string
                    format: enum
                - name: pageSize
                  in: query
                  description: |-
                    Not used.
                     The maximum number of policies to return. The service may return fewer than
                     this value.
                     If unspecified, at most 10 policies will be returned.
                     The maximum value is 1000; values above 1000 will be coerced to 1000.
                  schema:
                    type: integer
                    format: int32
                - name: pageToken
                  in: query
                  description: |-
                    Not used.
                     A page token, received from a previous `ListPolicies` call.
                     Provide this to retrieve the subsequent page.

                     When paginating, all other parameters provided to `ListPolicies` must match
                     the call that provided the page token.
                  schema:
                    type: string
                - name: showDeleted
                  in: query
                  description: Show deleted policies if specified.
                  schema:
                    type: boolean
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListPoliciesResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        post:
            tags:
                - OrgPolicyService
            operationId: OrgPolicyService_CreatePolicy
            parameters:
                - name: environment
                  in: path
                  description: The environment id.
                  required: true
                  schema:
                    type: string
                - name: type
                  in: query
                  schema:
                    enum:
                        - POLICY_TYPE_UNSPECIFIED
                        - ROLLOUT_POLICY
                        - SLOW_QUERY
                        - DISABLE_COPY_DATA
                        - MASKING_RULE
                        - MASKING_EXCEPTION
                        - RESTRICT_ISSUE_CREATION_FOR_SQL_REVIEW
                        - TAG
                        - DATA_SOURCE_QUERY
                        - DATA_EXPORT
                    type: string
                    format: enum
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Policy'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Policy'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/environments/{environment}/policies/{policy}:
        get:
            tags:
                - OrgPolicyService
            operationId: OrgPolicyService_GetPolicy
            parameters:
                - name: environment
                  in: path
                  description: The environment id.
                  required: true
                  schema:
                    type: string
                - name: policy
                  in: path
                  description: The policy id.
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Policy'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        delete:
            tags:
                - OrgPolicyService
            operationId: OrgPolicyService_DeletePolicy
            parameters:
                - name: environment
                  in: path
                  description: The environment id.
                  required: true
                  schema:
                    type: string
                - name: policy
                  in: path
                  description: The policy id.
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content: {}
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        patch:
            tags:
                - OrgPolicyService
            operationId: OrgPolicyService_UpdatePolicy
            parameters:
                - name: environment
                  in: path
                  description: The environment id.
                  required: true
                  schema:
                    type: string
                - name: policy
                  in: path
                  description: The policy id.
                  required: true
                  schema:
                    type: string
                - name: updateMask
                  in: query
                  description: The list of fields to update.
                  schema:
                    type: string
                    format: field-mask
                - name: allowMissing
                  in: query
                  description: |-
                    If set to true, and the policy is not found, a new policy will be created.
                     In this situation, `update_mask` is ignored.
                  schema:
                    type: boolean
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Policy'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Policy'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/environments/{environment}:undelete:
        post:
            tags:
                - EnvironmentService
            operationId: EnvironmentService_UndeleteEnvironment
            parameters:
                - name: environment
                  in: path
                  description: The environment id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UndeleteEnvironmentRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Environment'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/feature:
        get:
            tags:
                - SubscriptionService
            operationId: SubscriptionService_GetFeatureMatrix
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/FeatureMatrix'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/groups:
        get:
            tags:
                - GroupService
            operationId: GroupService_ListGroups
            parameters:
                - name: pageSize
                  in: query
                  description: |-
                    Not used.
                     The maximum number of groups to return. The service may return fewer than
                     this value.
                     If unspecified, at most 10 groups will be returned.
                     The maximum value is 1000; values above 1000 will be coerced to 1000.
                  schema:
                    type: integer
                    format: int32
                - name: pageToken
                  in: query
                  description: |-
                    Not used.
                     A page token, received from a previous `ListGroups` call.
                     Provide this to retrieve the subsequent page.

                     When paginating, all other parameters provided to `ListGroups` must match
                     the call that provided the page token.
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListGroupsResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        post:
            tags:
                - GroupService
            operationId: GroupService_CreateGroup
            parameters:
                - name: groupEmail
                  in: query
                  description: |-
                    The email to use for the group, which will become the final component
                     of the group's resource name.
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Group'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Group'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/groups/{group}:
        get:
            tags:
                - GroupService
            operationId: GroupService_GetGroup
            parameters:
                - name: group
                  in: path
                  description: The group id.
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Group'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        delete:
            tags:
                - GroupService
            operationId: GroupService_DeleteGroup
            parameters:
                - name: group
                  in: path
                  description: The group id.
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content: {}
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        patch:
            tags:
                - GroupService
            description: |-
                UpdateGroup updates the group.
                 Users with "bb.groups.update" permission on the workspace or the group owner can access this method.
            operationId: GroupService_UpdateGroup
            parameters:
                - name: group
                  in: path
                  description: The group id.
                  required: true
                  schema:
                    type: string
                - name: updateMask
                  in: query
                  description: The list of fields to update.
                  schema:
                    type: string
                    format: field-mask
                - name: allowMissing
                  in: query
                  description: |-
                    If set to true, and the group is not found, a new group will be created.
                     In this situation, `update_mask` is ignored.
                  schema:
                    type: boolean
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Group'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Group'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/idps:
        get:
            tags:
                - IdentityProviderService
            operationId: IdentityProviderService_ListIdentityProviders
            parameters:
                - name: pageSize
                  in: query
                  description: |-
                    Not used.
                     The maximum number of identity providers to return. The service may return fewer than
                     this value.
                     If unspecified, at most 10 will be returned.
                     The maximum value is 1000; values above 1000 will be coerced to 1000.
                  schema:
                    type: integer
                    format: int32
                - name: pageToken
                  in: query
                  description: |-
                    Not used.
                     A page token, received from a previous `ListIdentityProviders` call.
                     Provide this to retrieve the subsequent page.

                     When paginating, all other parameters provided to `ListIdentityProviders` must match
                     the call that provided the page token.
                  schema:
                    type: string
                - name: showDeleted
                  in: query
                  description: Show deleted identity providers if specified.
                  schema:
                    type: boolean
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListIdentityProvidersResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        post:
            tags:
                - IdentityProviderService
            operationId: IdentityProviderService_CreateIdentityProvider
            parameters:
                - name: identityProviderId
                  in: query
                  description: |-
                    The ID to use for the identity provider, which will become the final component of
                     the identity provider's resource name.

                     This value should be 4-63 characters, and valid characters
                     are /[a-z][0-9]-/.
                  schema:
                    type: string
                - name: validateOnly
                  in: query
                  description: If set to true, the request will be validated without actually creating the identity provider.
                  schema:
                    type: boolean
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/IdentityProvider'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/IdentityProvider'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/idps/*:test:
        post:
            tags:
                - IdentityProviderService
            operationId: IdentityProviderService_TestIdentityProvider
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/TestIdentityProviderRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/TestIdentityProviderResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/idps/{idp}:
        get:
            tags:
                - IdentityProviderService
            operationId: IdentityProviderService_GetIdentityProvider
            parameters:
                - name: idp
                  in: path
                  description: The idp id.
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/IdentityProvider'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        delete:
            tags:
                - IdentityProviderService
            operationId: IdentityProviderService_DeleteIdentityProvider
            parameters:
                - name: idp
                  in: path
                  description: The idp id.
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content: {}
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        patch:
            tags:
                - IdentityProviderService
            operationId: IdentityProviderService_UpdateIdentityProvider
            parameters:
                - name: idp
                  in: path
                  description: The idp id.
                  required: true
                  schema:
                    type: string
                - name: updateMask
                  in: query
                  description: The list of fields to update.
                  schema:
                    type: string
                    format: field-mask
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/IdentityProvider'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/IdentityProvider'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/idps/{idp}:undelete:
        post:
            tags:
                - IdentityProviderService
            operationId: IdentityProviderService_UndeleteIdentityProvider
            parameters:
                - name: idp
                  in: path
                  description: The idp id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UndeleteIdentityProviderRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/IdentityProvider'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/instances:
        get:
            tags:
                - InstanceService
            operationId: InstanceService_ListInstances
            parameters:
                - name: pageSize
                  in: query
                  description: |-
                    Not used.
                     The maximum number of instances to return. The service may return fewer than
                     this value.
                     If unspecified, at most 10 instances will be returned.
                     The maximum value is 1000; values above 1000 will be coerced to 1000.
                  schema:
                    type: integer
                    format: int32
                - name: pageToken
                  in: query
                  description: |-
                    Not used.
                     A page token, received from a previous `ListInstances` call.
                     Provide this to retrieve the subsequent page.

                     When paginating, all other parameters provided to `ListInstances` must match
                     the call that provided the page token.
                  schema:
                    type: string
                - name: showDeleted
                  in: query
                  description: Show deleted instances if specified.
                  schema:
                    type: boolean
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListInstancesResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        post:
            tags:
                - InstanceService
            operationId: InstanceService_CreateInstance
            parameters:
                - name: instanceId
                  in: query
                  description: |-
                    The ID to use for the instance, which will become the final component of
                     the instance's resource name.

                     This value should be 4-63 characters, and valid characters
                     are /[a-z][0-9]-/.
                  schema:
                    type: string
                - name: validateOnly
                  in: query
                  description: Validate only also tests the data source connection.
                  schema:
                    type: boolean
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Instance'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Instance'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/instances/{instance}:
        get:
            tags:
                - InstanceService
            operationId: InstanceService_GetInstance
            parameters:
                - name: instance
                  in: path
                  description: The instance id.
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Instance'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        delete:
            tags:
                - InstanceService
            operationId: InstanceService_DeleteInstance
            parameters:
                - name: instance
                  in: path
                  description: The instance id.
                  required: true
                  schema:
                    type: string
                - name: force
                  in: query
                  description: If set to true, any databases and sheets from this project will also be moved to default project, and all open issues will be closed.
                  schema:
                    type: boolean
            responses:
                "200":
                    description: OK
                    content: {}
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        patch:
            tags:
                - InstanceService
            operationId: InstanceService_UpdateInstance
            parameters:
                - name: instance
                  in: path
                  description: The instance id.
                  required: true
                  schema:
                    type: string
                - name: updateMask
                  in: query
                  description: The list of fields to update.
                  schema:
                    type: string
                    format: field-mask
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Instance'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Instance'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/instances/{instance}/databases:
        get:
            tags:
                - DatabaseService
            operationId: DatabaseService_ListInstanceDatabases
            parameters:
                - name: instance
                  in: path
                  description: The instance id.
                  required: true
                  schema:
                    type: string
                - name: pageSize
                  in: query
                  description: |-
                    The maximum number of databases to return. The service may return fewer
                     than this value. If unspecified, at most 10 databases will be returned.
                  schema:
                    type: integer
                    format: int32
                - name: pageToken
                  in: query
                  description: |-
                    A page token, received from a previous `ListInstanceDatabases` call.
                     Provide this to retrieve the subsequent page.

                     When paginating, all other parameters provided to `ListInstanceDatabases`
                     must match the call that provided the page token.
                  schema:
                    type: string
                - name: filter
                  in: query
                  description: |-
                    Deprecated.
                     Filter is used to filter databases returned in the list.
                     For example, `project == "projects/{project}"` can be used to list
                     databases in a project. Note: the project filter will be moved to parent.
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListInstanceDatabasesResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/instances/{instance}/databases/{database}:
        get:
            tags:
                - DatabaseService
            operationId: DatabaseService_GetDatabase
            parameters:
                - name: instance
                  in: path
                  description: The instance id.
                  required: true
                  schema:
                    type: string
                - name: database
                  in: path
                  description: The database id.
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Database'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        patch:
            tags:
                - DatabaseService
            operationId: DatabaseService_UpdateDatabase
            parameters:
                - name: instance
                  in: path
                  description: The instance id.
                  required: true
                  schema:
                    type: string
                - name: database
                  in: path
                  description: The database id.
                  required: true
                  schema:
                    type: string
                - name: updateMask
                  in: query
                  description: The list of fields to update.
                  schema:
                    type: string
                    format: field-mask
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Database'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Database'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/instances/{instance}/databases/{database}/catalog:
        get:
            tags:
                - DatabaseCatalogService
            operationId: DatabaseCatalogService_GetDatabaseCatalog
            parameters:
                - name: instance
                  in: path
                  description: The instance id.
                  required: true
                  schema:
                    type: string
                - name: database
                  in: path
                  description: The database id.
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DatabaseCatalog'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        patch:
            tags:
                - DatabaseCatalogService
            operationId: DatabaseCatalogService_UpdateDatabaseCatalog
            parameters:
                - name: instance
                  in: path
                  description: The instance id.
                  required: true
                  schema:
                    type: string
                - name: database
                  in: path
                  description: The database id.
                  required: true
                  schema:
                    type: string
                - name: updateMask
                  in: query
                  description: The list of fields to update.
                  schema:
                    type: string
                    format: field-mask
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/DatabaseCatalog'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DatabaseCatalog'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/instances/{instance}/databases/{database}/changelogs:
        get:
            tags:
                - DatabaseService
            operationId: DatabaseService_ListChangelogs
            parameters:
                - name: instance
                  in: path
                  description: The instance id.
                  required: true
                  schema:
                    type: string
                - name: database
                  in: path
                  description: The database id.
                  required: true
                  schema:
                    type: string
                - name: pageSize
                  in: query
                  description: |-
                    The maximum number of changelogs to return. The service may return fewer
                     than this value. If unspecified, at most 10 changelogs will be returned.
                     The maximum value is 1000; values above 1000 will be coerced to 1000.
                  schema:
                    type: integer
                    format: int32
                - name: pageToken
                  in: query
                  description: |-
                    A page token, received from the previous call.
                     Provide this to retrieve the subsequent page.

                     When paginating, all other parameters provided must match
                     the call that provided the page token.
                  schema:
                    type: string
                - name: view
                  in: query
                  schema:
                    enum:
                        - CHANGELOG_VIEW_UNSPECIFIED
                        - CHANGELOG_VIEW_BASIC
                        - CHANGELOG_VIEW_FULL
                    type: string
                    format: enum
                - name: filter
                  in: query
                  description: |-
                    The filter of the changelogs.
                     follow the
                     [ebnf](https://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_form)
                     syntax. Support filter by type, source or table. For example: table =
                     "tableExists('{database}', '{schema}', '{table}')" table =
                     "tableExists('db', 'public', 'table1') || tableExists('db', 'public',
                     'table2')" type = "MIGRATE | DATA" source = "UI" source = "VCS"

                     The table filter follow the CEL syntax.
                     currently, we have one function for CEL:
                     - tableExists(database, schema, table): return true if the table exists in
                     changed resources.

                     examples:
                     Use
                       tableExists("db", "public", "table1")
                     to filter the changelogs which have the table "table1" in the schema
                     "public" of the database "db". For MySQL, the schema is always "", such as
                     tableExists("db", "", "table1").

                     Combine multiple functions with "&&" and "||", we MUST use the Disjunctive
                     Normal Form(DNF). In other words, the CEL expression consists of several
                     parts connected by OR operators. For example, the following expression is
                     valid:
                     (
                      tableExists("db", "public", "table1") &&
                      tableExists("db", "public", "table2")
                     ) || (
                      tableExists("db", "public", "table3")
                     )
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListChangelogsResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/instances/{instance}/databases/{database}/changelogs/{changelog}:
        get:
            tags:
                - DatabaseService
            operationId: DatabaseService_GetChangelog
            parameters:
                - name: instance
                  in: path
                  description: The instance id.
                  required: true
                  schema:
                    type: string
                - name: database
                  in: path
                  description: The database id.
                  required: true
                  schema:
                    type: string
                - name: changelog
                  in: path
                  description: The changelog id.
                  required: true
                  schema:
                    type: string
                - name: view
                  in: query
                  schema:
                    enum:
                        - CHANGELOG_VIEW_UNSPECIFIED
                        - CHANGELOG_VIEW_BASIC
                        - CHANGELOG_VIEW_FULL
                    type: string
                    format: enum
                - name: sdlFormat
                  in: query
                  description: Format the schema dump into SDL format.
                  schema:
                    type: boolean
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Changelog'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/instances/{instance}/databases/{database}/changelogs/{changelog}:diffSchema:
        post:
            tags:
                - DatabaseService
            operationId: DatabaseService_DiffSchema
            parameters:
                - name: instance
                  in: path
                  description: The instance id.
                  required: true
                  schema:
                    type: string
                - name: database
                  in: path
                  description: The database id.
                  required: true
                  schema:
                    type: string
                - name: changelog
                  in: path
                  description: The changelog id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/DiffSchemaRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DiffSchemaResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/instances/{instance}/databases/{database}/metadata:
        get:
            tags:
                - DatabaseService
            operationId: DatabaseService_GetDatabaseMetadata
            parameters:
                - name: instance
                  in: path
                  description: The instance id.
                  required: true
                  schema:
                    type: string
                - name: database
                  in: path
                  description: The database id.
                  required: true
                  schema:
                    type: string
                - name: view
                  in: query
                  description: The view to return. Defaults to DATABASE_METADATA_VIEW_BASIC.
                  schema:
                    enum:
                        - DATABASE_METADATA_VIEW_UNSPECIFIED
                        - DATABASE_METADATA_VIEW_BASIC
                        - DATABASE_METADATA_VIEW_FULL
                    type: string
                    format: enum
                - name: filter
                  in: query
                  description: |-
                    The filter used for a specific schema object such as
                     "schemas/schema-a/tables/table-a".
                     The column masking level will only be returned when a table filter is used.
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DatabaseMetadata'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/instances/{instance}/databases/{database}/policies:
        get:
            tags:
                - OrgPolicyService
            operationId: OrgPolicyService_ListPolicies
            parameters:
                - name: instance
                  in: path
                  description: The instance id.
                  required: true
                  schema:
                    type: string
                - name: database
                  in: path
                  description: The database id.
                  required: true
                  schema:
                    type: string
                - name: policyType
                  in: query
                  schema:
                    enum:
                        - POLICY_TYPE_UNSPECIFIED
                        - ROLLOUT_POLICY
                        - SLOW_QUERY
                        - DISABLE_COPY_DATA
                        - MASKING_RULE
                        - MASKING_EXCEPTION
                        - RESTRICT_ISSUE_CREATION_FOR_SQL_REVIEW
                        - TAG
                        - DATA_SOURCE_QUERY
                        - DATA_EXPORT
                    type: string
                    format: enum
                - name: pageSize
                  in: query
                  description: |-
                    Not used.
                     The maximum number of policies to return. The service may return fewer than
                     this value.
                     If unspecified, at most 10 policies will be returned.
                     The maximum value is 1000; values above 1000 will be coerced to 1000.
                  schema:
                    type: integer
                    format: int32
                - name: pageToken
                  in: query
                  description: |-
                    Not used.
                     A page token, received from a previous `ListPolicies` call.
                     Provide this to retrieve the subsequent page.

                     When paginating, all other parameters provided to `ListPolicies` must match
                     the call that provided the page token.
                  schema:
                    type: string
                - name: showDeleted
                  in: query
                  description: Show deleted policies if specified.
                  schema:
                    type: boolean
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListPoliciesResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        post:
            tags:
                - OrgPolicyService
            operationId: OrgPolicyService_CreatePolicy
            parameters:
                - name: instance
                  in: path
                  description: The instance id.
                  required: true
                  schema:
                    type: string
                - name: database
                  in: path
                  description: The database id.
                  required: true
                  schema:
                    type: string
                - name: type
                  in: query
                  schema:
                    enum:
                        - POLICY_TYPE_UNSPECIFIED
                        - ROLLOUT_POLICY
                        - SLOW_QUERY
                        - DISABLE_COPY_DATA
                        - MASKING_RULE
                        - MASKING_EXCEPTION
                        - RESTRICT_ISSUE_CREATION_FOR_SQL_REVIEW
                        - TAG
                        - DATA_SOURCE_QUERY
                        - DATA_EXPORT
                    type: string
                    format: enum
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Policy'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Policy'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/instances/{instance}/databases/{database}/policies/{policy}:
        get:
            tags:
                - OrgPolicyService
            operationId: OrgPolicyService_GetPolicy
            parameters:
                - name: instance
                  in: path
                  description: The instance id.
                  required: true
                  schema:
                    type: string
                - name: database
                  in: path
                  description: The database id.
                  required: true
                  schema:
                    type: string
                - name: policy
                  in: path
                  description: The policy id.
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Policy'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        delete:
            tags:
                - OrgPolicyService
            operationId: OrgPolicyService_DeletePolicy
            parameters:
                - name: instance
                  in: path
                  description: The instance id.
                  required: true
                  schema:
                    type: string
                - name: database
                  in: path
                  description: The database id.
                  required: true
                  schema:
                    type: string
                - name: policy
                  in: path
                  description: The policy id.
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content: {}
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        patch:
            tags:
                - OrgPolicyService
            operationId: OrgPolicyService_UpdatePolicy
            parameters:
                - name: instance
                  in: path
                  description: The instance id.
                  required: true
                  schema:
                    type: string
                - name: database
                  in: path
                  description: The database id.
                  required: true
                  schema:
                    type: string
                - name: policy
                  in: path
                  description: The policy id.
                  required: true
                  schema:
                    type: string
                - name: updateMask
                  in: query
                  description: The list of fields to update.
                  schema:
                    type: string
                    format: field-mask
                - name: allowMissing
                  in: query
                  description: |-
                    If set to true, and the policy is not found, a new policy will be created.
                     In this situation, `update_mask` is ignored.
                  schema:
                    type: boolean
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Policy'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Policy'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/instances/{instance}/databases/{database}/revisions:
        get:
            tags:
                - DatabaseService
            operationId: DatabaseService_ListRevisions
            parameters:
                - name: instance
                  in: path
                  description: The instance id.
                  required: true
                  schema:
                    type: string
                - name: database
                  in: path
                  description: The database id.
                  required: true
                  schema:
                    type: string
                - name: pageSize
                  in: query
                  description: |-
                    The maximum number of revisions to return. The service may return fewer
                     than this value. If unspecified, at most 10 revisions will be returned. The
                     maximum value is 1000; values above 1000 will be coerced to 1000.
                  schema:
                    type: integer
                    format: int32
                - name: pageToken
                  in: query
                  description: |-
                    A page token, received from a previous `ListRevisions` call.
                     Provide this to retrieve the subsequent page.

                     When paginating, all other parameters provided to `ListRevisions` must
                     match the call that provided the page token.
                  schema:
                    type: string
                - name: showDeleted
                  in: query
                  schema:
                    type: boolean
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListRevisionsResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        post:
            tags:
                - DatabaseService
            operationId: DatabaseService_CreateRevision
            parameters:
                - name: instance
                  in: path
                  description: The instance id.
                  required: true
                  schema:
                    type: string
                - name: database
                  in: path
                  description: The database id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Revision'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Revision'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/instances/{instance}/databases/{database}/revisions/{revision}:
        get:
            tags:
                - DatabaseService
            operationId: DatabaseService_GetRevision
            parameters:
                - name: instance
                  in: path
                  description: The instance id.
                  required: true
                  schema:
                    type: string
                - name: database
                  in: path
                  description: The database id.
                  required: true
                  schema:
                    type: string
                - name: revision
                  in: path
                  description: The revision id.
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Revision'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        delete:
            tags:
                - DatabaseService
            operationId: DatabaseService_DeleteRevision
            parameters:
                - name: instance
                  in: path
                  description: The instance id.
                  required: true
                  schema:
                    type: string
                - name: database
                  in: path
                  description: The database id.
                  required: true
                  schema:
                    type: string
                - name: revision
                  in: path
                  description: The revision id.
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content: {}
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/instances/{instance}/databases/{database}/schema:
        get:
            tags:
                - DatabaseService
            operationId: DatabaseService_GetDatabaseSchema
            parameters:
                - name: instance
                  in: path
                  description: The instance id.
                  required: true
                  schema:
                    type: string
                - name: database
                  in: path
                  description: The database id.
                  required: true
                  schema:
                    type: string
                - name: sdlFormat
                  in: query
                  description: Format the schema dump into SDL format.
                  schema:
                    type: boolean
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DatabaseSchema'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/instances/{instance}/databases/{database}/secrets:
        get:
            tags:
                - DatabaseService
            operationId: DatabaseService_ListSecrets
            parameters:
                - name: instance
                  in: path
                  description: The instance id.
                  required: true
                  schema:
                    type: string
                - name: database
                  in: path
                  description: The database id.
                  required: true
                  schema:
                    type: string
                - name: pageSize
                  in: query
                  description: |-
                    Not used.
                     The maximum number of secrets to return. The service may return fewer than
                     this value.
                     If unspecified, at most 10 secrets will be returned.
                     The maximum value is 1000; values above 1000 will be coerced to 1000.
                  schema:
                    type: integer
                    format: int32
                - name: pageToken
                  in: query
                  description: |-
                    Not used.
                     A page token, received from a previous `ListSecrets` call.
                     Provide this to retrieve the subsequent page.

                     When paginating, all other parameters provided to `ListSecrets` must match
                     the call that provided the page token.
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListSecretsResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/instances/{instance}/databases/{database}/secrets/{secret}:
        delete:
            tags:
                - DatabaseService
            operationId: DatabaseService_DeleteSecret
            parameters:
                - name: instance
                  in: path
                  description: The instance id.
                  required: true
                  schema:
                    type: string
                - name: database
                  in: path
                  description: The database id.
                  required: true
                  schema:
                    type: string
                - name: secret
                  in: path
                  description: The secret id.
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content: {}
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        patch:
            tags:
                - DatabaseService
            operationId: DatabaseService_UpdateSecret
            parameters:
                - name: instance
                  in: path
                  description: The instance id.
                  required: true
                  schema:
                    type: string
                - name: database
                  in: path
                  description: The database id.
                  required: true
                  schema:
                    type: string
                - name: secret
                  in: path
                  description: The secret id.
                  required: true
                  schema:
                    type: string
                - name: updateMask
                  in: query
                  description: The mask of the fields to be updated.
                  schema:
                    type: string
                    format: field-mask
                - name: allowMissing
                  in: query
                  description: If true, the secret will be created if it does not exist.
                  schema:
                    type: boolean
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Secret'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Secret'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/instances/{instance}/databases/{database}:adviseIndex:
        post:
            tags:
                - DatabaseService
            operationId: DatabaseService_AdviseIndex
            parameters:
                - name: instance
                  in: path
                  description: The instance id.
                  required: true
                  schema:
                    type: string
                - name: database
                  in: path
                  description: The database id.
                  required: true
                  schema:
                    type: string
                - name: statement
                  in: query
                  description: The statement to be advised.
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/AdviseIndexResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/instances/{instance}/databases/{database}:diffSchema:
        post:
            tags:
                - DatabaseService
            operationId: DatabaseService_DiffSchema
            parameters:
                - name: instance
                  in: path
                  description: The instance id.
                  required: true
                  schema:
                    type: string
                - name: database
                  in: path
                  description: The database id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/DiffSchemaRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DiffSchemaResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/instances/{instance}/databases/{database}:export:
        post:
            tags:
                - SQLService
            operationId: SQLService_Export
            parameters:
                - name: instance
                  in: path
                  description: The instance id.
                  required: true
                  schema:
                    type: string
                - name: database
                  in: path
                  description: The database id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ExportRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ExportResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/instances/{instance}/databases/{database}:query:
        post:
            tags:
                - SQLService
            operationId: SQLService_Query
            parameters:
                - name: instance
                  in: path
                  description: The instance id.
                  required: true
                  schema:
                    type: string
                - name: database
                  in: path
                  description: The database id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/QueryRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/QueryResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/instances/{instance}/databases/{database}:sync:
        post:
            tags:
                - DatabaseService
            operationId: DatabaseService_SyncDatabase
            parameters:
                - name: instance
                  in: path
                  description: The instance id.
                  required: true
                  schema:
                    type: string
                - name: database
                  in: path
                  description: The database id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SyncDatabaseRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SyncDatabaseResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/instances/{instance}/databases:batchUpdate:
        post:
            tags:
                - DatabaseService
            operationId: DatabaseService_BatchUpdateDatabases
            parameters:
                - name: instance
                  in: path
                  description: The instance id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/BatchUpdateDatabasesRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BatchUpdateDatabasesResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/instances/{instance}/policies:
        get:
            tags:
                - OrgPolicyService
            operationId: OrgPolicyService_ListPolicies
            parameters:
                - name: instance
                  in: path
                  description: The instance id.
                  required: true
                  schema:
                    type: string
                - name: policyType
                  in: query
                  schema:
                    enum:
                        - POLICY_TYPE_UNSPECIFIED
                        - ROLLOUT_POLICY
                        - SLOW_QUERY
                        - DISABLE_COPY_DATA
                        - MASKING_RULE
                        - MASKING_EXCEPTION
                        - RESTRICT_ISSUE_CREATION_FOR_SQL_REVIEW
                        - TAG
                        - DATA_SOURCE_QUERY
                        - DATA_EXPORT
                    type: string
                    format: enum
                - name: pageSize
                  in: query
                  description: |-
                    Not used.
                     The maximum number of policies to return. The service may return fewer than
                     this value.
                     If unspecified, at most 10 policies will be returned.
                     The maximum value is 1000; values above 1000 will be coerced to 1000.
                  schema:
                    type: integer
                    format: int32
                - name: pageToken
                  in: query
                  description: |-
                    Not used.
                     A page token, received from a previous `ListPolicies` call.
                     Provide this to retrieve the subsequent page.

                     When paginating, all other parameters provided to `ListPolicies` must match
                     the call that provided the page token.
                  schema:
                    type: string
                - name: showDeleted
                  in: query
                  description: Show deleted policies if specified.
                  schema:
                    type: boolean
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListPoliciesResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        post:
            tags:
                - OrgPolicyService
            operationId: OrgPolicyService_CreatePolicy
            parameters:
                - name: instance
                  in: path
                  description: The instance id.
                  required: true
                  schema:
                    type: string
                - name: type
                  in: query
                  schema:
                    enum:
                        - POLICY_TYPE_UNSPECIFIED
                        - ROLLOUT_POLICY
                        - SLOW_QUERY
                        - DISABLE_COPY_DATA
                        - MASKING_RULE
                        - MASKING_EXCEPTION
                        - RESTRICT_ISSUE_CREATION_FOR_SQL_REVIEW
                        - TAG
                        - DATA_SOURCE_QUERY
                        - DATA_EXPORT
                    type: string
                    format: enum
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Policy'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Policy'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/instances/{instance}/policies/{policy}:
        get:
            tags:
                - OrgPolicyService
            operationId: OrgPolicyService_GetPolicy
            parameters:
                - name: instance
                  in: path
                  description: The instance id.
                  required: true
                  schema:
                    type: string
                - name: policy
                  in: path
                  description: The policy id.
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Policy'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        delete:
            tags:
                - OrgPolicyService
            operationId: OrgPolicyService_DeletePolicy
            parameters:
                - name: instance
                  in: path
                  description: The instance id.
                  required: true
                  schema:
                    type: string
                - name: policy
                  in: path
                  description: The policy id.
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content: {}
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        patch:
            tags:
                - OrgPolicyService
            operationId: OrgPolicyService_UpdatePolicy
            parameters:
                - name: instance
                  in: path
                  description: The instance id.
                  required: true
                  schema:
                    type: string
                - name: policy
                  in: path
                  description: The policy id.
                  required: true
                  schema:
                    type: string
                - name: updateMask
                  in: query
                  description: The list of fields to update.
                  schema:
                    type: string
                    format: field-mask
                - name: allowMissing
                  in: query
                  description: |-
                    If set to true, and the policy is not found, a new policy will be created.
                     In this situation, `update_mask` is ignored.
                  schema:
                    type: boolean
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Policy'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Policy'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/instances/{instance}/roles:
        get:
            tags:
                - InstanceRoleService
            operationId: InstanceRoleService_ListInstanceRoles
            parameters:
                - name: instance
                  in: path
                  description: The instance id.
                  required: true
                  schema:
                    type: string
                - name: pageSize
                  in: query
                  description: |-
                    Not used.
                     The maximum number of roles to return. The service may return fewer than
                     this value.
                     If unspecified, at most 10 roles will be returned.
                     The maximum value is 1000; values above 1000 will be coerced to 1000.
                  schema:
                    type: integer
                    format: int32
                - name: pageToken
                  in: query
                  description: |-
                    Not used.
                     A page token, received from a previous `ListInstanceRoles` call.
                     Provide this to retrieve the subsequent page.

                     When paginating, all other parameters provided to `ListInstanceRoles` must match
                     the call that provided the page token.
                  schema:
                    type: string
                - name: refresh
                  in: query
                  description: Refresh will refresh and return the latest data.
                  schema:
                    type: boolean
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListInstanceRolesResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/instances/{instance}/roles/{role}:
        get:
            tags:
                - InstanceRoleService
            operationId: InstanceRoleService_GetInstanceRole
            parameters:
                - name: instance
                  in: path
                  description: The instance id.
                  required: true
                  schema:
                    type: string
                - name: role
                  in: path
                  description: The role id.
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/InstanceRole'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/instances/{instance}:addDataSource:
        post:
            tags:
                - InstanceService
            operationId: InstanceService_AddDataSource
            parameters:
                - name: instance
                  in: path
                  description: The instance id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/AddDataSourceRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Instance'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/instances/{instance}:databases:
        post:
            tags:
                - InstanceService
            operationId: InstanceService_ListInstanceDatabase
            parameters:
                - name: instance
                  in: path
                  description: The instance id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ListInstanceDatabaseRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListInstanceDatabaseResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/instances/{instance}:export:
        post:
            tags:
                - SQLService
            operationId: SQLService_Export
            parameters:
                - name: instance
                  in: path
                  description: The instance id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ExportRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ExportResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/instances/{instance}:query:
        post:
            tags:
                - SQLService
            operationId: SQLService_Query
            parameters:
                - name: instance
                  in: path
                  description: The instance id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/QueryRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/QueryResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/instances/{instance}:removeDataSource:
        post:
            tags:
                - InstanceService
            operationId: InstanceService_RemoveDataSource
            parameters:
                - name: instance
                  in: path
                  description: The instance id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RemoveDataSourceRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Instance'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/instances/{instance}:sync:
        post:
            tags:
                - InstanceService
            operationId: InstanceService_SyncInstance
            parameters:
                - name: instance
                  in: path
                  description: The instance id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SyncInstanceRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SyncInstanceResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/instances/{instance}:syncSlowQueries:
        post:
            tags:
                - InstanceService
            operationId: InstanceService_SyncSlowQueries
            parameters:
                - name: instance
                  in: path
                  description: The instance id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SyncSlowQueriesRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content: {}
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/instances/{instance}:undelete:
        post:
            tags:
                - InstanceService
            operationId: InstanceService_UndeleteInstance
            parameters:
                - name: instance
                  in: path
                  description: The instance id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UndeleteInstanceRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Instance'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/instances/{instance}:updateDataSource:
        patch:
            tags:
                - InstanceService
            operationId: InstanceService_UpdateDataSource
            parameters:
                - name: instance
                  in: path
                  description: The instance id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpdateDataSourceRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Instance'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/instances:batchSync:
        post:
            tags:
                - InstanceService
            operationId: InstanceService_BatchSyncInstances
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/BatchSyncInstancesRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BatchSyncInstancesResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/policies:
        get:
            tags:
                - OrgPolicyService
            operationId: OrgPolicyService_ListPolicies
            parameters:
                - name: parent
                  in: query
                  description: |-
                    The parent, which owns this collection of policies.
                     Format: {resource type}/{resource id}
                  schema:
                    type: string
                - name: policyType
                  in: query
                  schema:
                    enum:
                        - POLICY_TYPE_UNSPECIFIED
                        - ROLLOUT_POLICY
                        - SLOW_QUERY
                        - DISABLE_COPY_DATA
                        - MASKING_RULE
                        - MASKING_EXCEPTION
                        - RESTRICT_ISSUE_CREATION_FOR_SQL_REVIEW
                        - TAG
                        - DATA_SOURCE_QUERY
                        - DATA_EXPORT
                    type: string
                    format: enum
                - name: pageSize
                  in: query
                  description: |-
                    Not used.
                     The maximum number of policies to return. The service may return fewer than
                     this value.
                     If unspecified, at most 10 policies will be returned.
                     The maximum value is 1000; values above 1000 will be coerced to 1000.
                  schema:
                    type: integer
                    format: int32
                - name: pageToken
                  in: query
                  description: |-
                    Not used.
                     A page token, received from a previous `ListPolicies` call.
                     Provide this to retrieve the subsequent page.

                     When paginating, all other parameters provided to `ListPolicies` must match
                     the call that provided the page token.
                  schema:
                    type: string
                - name: showDeleted
                  in: query
                  description: Show deleted policies if specified.
                  schema:
                    type: boolean
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListPoliciesResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        post:
            tags:
                - OrgPolicyService
            operationId: OrgPolicyService_CreatePolicy
            parameters:
                - name: parent
                  in: query
                  description: |-
                    The parent resource where this instance will be created.
                     Workspace resource name: "".
                     Environment resource name: environments/environment-id.
                     Instance resource name: instances/instance-id.
                     Database resource name: instances/instance-id/databases/database-name.
                  schema:
                    type: string
                - name: type
                  in: query
                  schema:
                    enum:
                        - POLICY_TYPE_UNSPECIFIED
                        - ROLLOUT_POLICY
                        - SLOW_QUERY
                        - DISABLE_COPY_DATA
                        - MASKING_RULE
                        - MASKING_EXCEPTION
                        - RESTRICT_ISSUE_CREATION_FOR_SQL_REVIEW
                        - TAG
                        - DATA_SOURCE_QUERY
                        - DATA_EXPORT
                    type: string
                    format: enum
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Policy'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Policy'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/policies/{policy}:
        get:
            tags:
                - OrgPolicyService
            operationId: OrgPolicyService_GetPolicy
            parameters:
                - name: policy
                  in: path
                  description: The policy id.
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Policy'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        delete:
            tags:
                - OrgPolicyService
            operationId: OrgPolicyService_DeletePolicy
            parameters:
                - name: policy
                  in: path
                  description: The policy id.
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content: {}
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        patch:
            tags:
                - OrgPolicyService
            operationId: OrgPolicyService_UpdatePolicy
            parameters:
                - name: policy
                  in: path
                  description: The policy id.
                  required: true
                  schema:
                    type: string
                - name: updateMask
                  in: query
                  description: The list of fields to update.
                  schema:
                    type: string
                    format: field-mask
                - name: allowMissing
                  in: query
                  description: |-
                    If set to true, and the policy is not found, a new policy will be created.
                     In this situation, `update_mask` is ignored.
                  schema:
                    type: boolean
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Policy'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Policy'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects:
        get:
            tags:
                - ProjectService
            operationId: ProjectService_ListProjects
            parameters:
                - name: pageSize
                  in: query
                  description: |-
                    Not used.
                     The maximum number of projects to return. The service may return fewer than
                     this value.
                     If unspecified, at most 10 projects will be returned.
                     The maximum value is 1000; values above 1000 will be coerced to 1000.
                  schema:
                    type: integer
                    format: int32
                - name: pageToken
                  in: query
                  description: |-
                    Not used.
                     A page token, received from a previous `ListProjects` call.
                     Provide this to retrieve the subsequent page.

                     When paginating, all other parameters provided to `ListProjects` must match
                     the call that provided the page token.
                  schema:
                    type: string
                - name: showDeleted
                  in: query
                  description: Show deleted projects if specified.
                  schema:
                    type: boolean
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListProjectsResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        post:
            tags:
                - ProjectService
            operationId: ProjectService_CreateProject
            parameters:
                - name: projectId
                  in: query
                  description: |-
                    The ID to use for the project, which will become the final component of
                     the project's resource name.

                     This value should be 4-63 characters, and valid characters
                     are /[a-z][0-9]-/.
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Project'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Project'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}:
        get:
            tags:
                - ProjectService
            operationId: ProjectService_GetProject
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Project'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        delete:
            tags:
                - ProjectService
            operationId: ProjectService_DeleteProject
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: force
                  in: query
                  description: If set to true, any databases and sheets from this project will also be moved to default project, and all open issues will be closed.
                  schema:
                    type: boolean
            responses:
                "200":
                    description: OK
                    content: {}
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        patch:
            tags:
                - ProjectService
            operationId: ProjectService_UpdateProject
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: updateMask
                  in: query
                  description: The list of fields to update.
                  schema:
                    type: string
                    format: field-mask
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Project'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Project'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/anomalies:search:
        post:
            tags:
                - AnomalyService
            operationId: AnomalyService_SearchAnomalies
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SearchAnomaliesRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SearchAnomaliesResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/auditLogs:export:
        post:
            tags:
                - AuditLogService
            operationId: AuditLogService_ExportAuditLogs
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ExportAuditLogsRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ExportAuditLogsResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/auditLogs:search:
        post:
            tags:
                - AuditLogService
            operationId: AuditLogService_SearchAuditLogs
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SearchAuditLogsRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SearchAuditLogsResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/changelists:
        get:
            tags:
                - ChangelistService
            operationId: ChangelistService_ListChangelists
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: pageSize
                  in: query
                  description: |-
                    Not used.
                     The maximum number of databases to return. The service may return fewer than
                     this value.
                     If unspecified, at most 50 databases will be returned.
                     The maximum value is 1000; values above 1000 will be coerced to 1000.
                  schema:
                    type: integer
                    format: int32
                - name: pageToken
                  in: query
                  description: |-
                    Not used.
                     A page token, received from a previous `ListDatabases` call.
                     Provide this to retrieve the subsequent page.

                     When paginating, all other parameters provided to `ListDatabases` must match
                     the call that provided the page token.
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListChangelistsResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        post:
            tags:
                - ChangelistService
            operationId: ChangelistService_CreateChangelist
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: changelistId
                  in: query
                  description: |-
                    The ID to use for the changelist, which will become the final component of
                     the changelist's resource name.

                     This value should be 4-63 characters, and valid characters
                     are /[a-z][0-9]-/.
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Changelist'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Changelist'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/changelists/{changelist}:
        get:
            tags:
                - ChangelistService
            operationId: ChangelistService_GetChangelist
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: changelist
                  in: path
                  description: The changelist id.
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Changelist'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        delete:
            tags:
                - ChangelistService
            operationId: ChangelistService_DeleteChangelist
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: changelist
                  in: path
                  description: The changelist id.
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content: {}
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        patch:
            tags:
                - ChangelistService
            operationId: ChangelistService_UpdateChangelist
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: changelist
                  in: path
                  description: The changelist id.
                  required: true
                  schema:
                    type: string
                - name: updateMask
                  in: query
                  description: The list of fields to be updated.
                  schema:
                    type: string
                    format: field-mask
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Changelist'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Changelist'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/databaseGroups:
        get:
            tags:
                - DatabaseGroupService
            operationId: DatabaseGroupService_ListDatabaseGroups
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: pageSize
                  in: query
                  description: |-
                    Not used.
                     The maximum number of database groups to return. The service may return fewer than
                     this value.
                     If unspecified, at most 50 database groups will be returned.
                     The maximum value is 1000; values above 1000 will be coerced to 1000.
                  schema:
                    type: integer
                    format: int32
                - name: pageToken
                  in: query
                  description: |-
                    Not used.
                     A page token, received from a previous `ListDatabaseGroups` call.
                     Provide this to retrieve the subsequent page.

                     When paginating, all other parameters provided to `ListDatabaseGroups` must match
                     the call that provided the page token.
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListDatabaseGroupsResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        post:
            tags:
                - DatabaseGroupService
            operationId: DatabaseGroupService_CreateDatabaseGroup
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: databaseGroupId
                  in: query
                  description: |-
                    The ID to use for the database group, which will become the final component of
                     the database group's resource name.

                     This value should be 4-63 characters, and valid characters
                     are /[a-z][0-9]-/.
                  schema:
                    type: string
                - name: validateOnly
                  in: query
                  description: If set, validate the create request and preview the full database group response, but do not actually create it.
                  schema:
                    type: boolean
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/DatabaseGroup'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DatabaseGroup'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/databaseGroups/{databaseGroup}:
        get:
            tags:
                - DatabaseGroupService
            operationId: DatabaseGroupService_GetDatabaseGroup
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: databaseGroup
                  in: path
                  description: The databaseGroup id.
                  required: true
                  schema:
                    type: string
                - name: view
                  in: query
                  description: The view to return. Defaults to DATABASE_GROUP_VIEW_BASIC.
                  schema:
                    enum:
                        - DATABASE_GROUP_VIEW_UNSPECIFIED
                        - DATABASE_GROUP_VIEW_BASIC
                        - DATABASE_GROUP_VIEW_FULL
                    type: string
                    format: enum
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DatabaseGroup'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        delete:
            tags:
                - DatabaseGroupService
            operationId: DatabaseGroupService_DeleteDatabaseGroup
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: databaseGroup
                  in: path
                  description: The databaseGroup id.
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content: {}
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        patch:
            tags:
                - DatabaseGroupService
            operationId: DatabaseGroupService_UpdateDatabaseGroup
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: databaseGroup
                  in: path
                  description: The databaseGroup id.
                  required: true
                  schema:
                    type: string
                - name: updateMask
                  in: query
                  description: The list of fields to update.
                  schema:
                    type: string
                    format: field-mask
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/DatabaseGroup'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DatabaseGroup'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/databases:
        get:
            tags:
                - DatabaseService
            operationId: DatabaseService_ListDatabases
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: pageSize
                  in: query
                  description: |-
                    The maximum number of databases to return. The service may return fewer
                     than this value. If unspecified, at most 10 databases will be returned.
                  schema:
                    type: integer
                    format: int32
                - name: pageToken
                  in: query
                  description: |-
                    A page token, received from a previous `ListDatabases` call.
                     Provide this to retrieve the subsequent page.

                     When paginating, all other parameters provided to `ListDatabases` must
                     match the call that provided the page token.
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListDatabasesResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/deploymentConfigs/{deploymentConfig}:
        get:
            tags:
                - ProjectService
            operationId: ProjectService_GetDeploymentConfig
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: deploymentConfig
                  in: path
                  description: The deploymentConfig id.
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DeploymentConfig'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        patch:
            tags:
                - ProjectService
            operationId: ProjectService_UpdateDeploymentConfig
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: deploymentConfig
                  in: path
                  description: The deploymentConfig id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/DeploymentConfig'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DeploymentConfig'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/issues:
        get:
            tags:
                - IssueService
            operationId: IssueService_ListIssues
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: pageSize
                  in: query
                  description: |-
                    The maximum number of issues to return. The service may return fewer than
                     this value.
                     If unspecified, at most 10 issues will be returned.
                     The maximum value is 1000; values above 1000 will be coerced to 1000.
                  schema:
                    type: integer
                    format: int32
                - name: pageToken
                  in: query
                  description: |-
                    A page token, received from a previous `ListIssues` call.
                     Provide this to retrieve the subsequent page.

                     When paginating, all other parameters provided to `ListIssues` must match
                     the call that provided the page token.
                  schema:
                    type: string
                - name: filter
                  in: query
                  description: Filter is used to filter issues returned in the list.
                  schema:
                    type: string
                - name: query
                  in: query
                  description: Query is the query statement.
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListIssuesResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        post:
            tags:
                - IssueService
            operationId: IssueService_CreateIssue
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Issue'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Issue'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/issues/{issue}:
        get:
            tags:
                - IssueService
            operationId: IssueService_GetIssue
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: issue
                  in: path
                  description: The issue id.
                  required: true
                  schema:
                    type: string
                - name: force
                  in: query
                  schema:
                    type: boolean
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Issue'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        patch:
            tags:
                - IssueService
            operationId: IssueService_UpdateIssue
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: issue
                  in: path
                  description: The issue id.
                  required: true
                  schema:
                    type: string
                - name: updateMask
                  in: query
                  description: The list of fields to update.
                  schema:
                    type: string
                    format: field-mask
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Issue'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Issue'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/issues/{issue}/issueComments:
        get:
            tags:
                - IssueService
            operationId: IssueService_ListIssueComments
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: issue
                  in: path
                  description: The issue id.
                  required: true
                  schema:
                    type: string
                - name: pageSize
                  in: query
                  description: |-
                    The maximum number of issue comments to return. The service may return fewer than
                     this value.
                     If unspecified, at most 10 issue comments will be returned.
                     The maximum value is 1000; values above 1000 will be coerced to 1000.
                  schema:
                    type: integer
                    format: int32
                - name: pageToken
                  in: query
                  description: |-
                    A page token, received from a previous `ListIssueComments` call.
                     Provide this to retrieve the subsequent page.

                     When paginating, all other parameters provided to `ListIssueComments` must match
                     the call that provided the page token.
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListIssueCommentsResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/issues/{issue}:approve:
        post:
            tags:
                - IssueService
            description: |-
                ApproveIssue approves the issue.
                 The access is based on approval flow.
            operationId: IssueService_ApproveIssue
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: issue
                  in: path
                  description: The issue id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ApproveIssueRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Issue'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/issues/{issue}:comment:
        post:
            tags:
                - IssueService
            operationId: IssueService_CreateIssueComment
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: issue
                  in: path
                  description: The issue id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/IssueComment'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/IssueComment'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        patch:
            tags:
                - IssueService
            operationId: IssueService_UpdateIssueComment
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: issue
                  in: path
                  description: The issue id.
                  required: true
                  schema:
                    type: string
                - name: updateMask
                  in: query
                  description: The list of fields to update.
                  schema:
                    type: string
                    format: field-mask
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/IssueComment'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/IssueComment'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/issues/{issue}:export:
        post:
            tags:
                - SQLService
            operationId: SQLService_Export
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: issue
                  in: path
                  description: The issue id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ExportRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ExportResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/issues/{issue}:reject:
        post:
            tags:
                - IssueService
            description: |-
                RejectIssue rejects the issue.
                 The access is based on approval flow.
            operationId: IssueService_RejectIssue
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: issue
                  in: path
                  description: The issue id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RejectIssueRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Issue'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/issues/{issue}:request:
        post:
            tags:
                - IssueService
            description: |-
                RequestIssue requests the issue.
                 The access is based on approval flow.
            operationId: IssueService_RequestIssue
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: issue
                  in: path
                  description: The issue id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RequestIssueRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Issue'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/issues:batchUpdateStatus:
        post:
            tags:
                - IssueService
            operationId: IssueService_BatchUpdateIssuesStatus
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/BatchUpdateIssuesStatusRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BatchUpdateIssuesStatusResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/issues:search:
        post:
            tags:
                - IssueService
            description: Search for issues that the caller has the bb.issues.get permission on and also satisfy the specified filter & query.
            operationId: IssueService_SearchIssues
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SearchIssuesRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SearchIssuesResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/plans:
        get:
            tags:
                - PlanService
            operationId: PlanService_ListPlans
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: pageSize
                  in: query
                  description: |-
                    The maximum number of plans to return. The service may return fewer than
                     this value.
                     If unspecified, at most 10 plans will be returned.
                     The maximum value is 1000; values above 1000 will be coerced to 1000.
                  schema:
                    type: integer
                    format: int32
                - name: pageToken
                  in: query
                  description: |-
                    A page token, received from a previous `ListPlans` call.
                     Provide this to retrieve the subsequent page.

                     When paginating, all other parameters provided to `ListPlans` must match
                     the call that provided the page token.
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListPlansResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        post:
            tags:
                - PlanService
            operationId: PlanService_CreatePlan
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Plan'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Plan'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/plans/{plan}:
        get:
            tags:
                - PlanService
            operationId: PlanService_GetPlan
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: plan
                  in: path
                  description: The plan id.
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Plan'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        patch:
            tags:
                - PlanService
            description: |-
                UpdatePlan updates the plan.
                 The plan creator and the user with bb.plans.update permission on the project can update the plan.
            operationId: PlanService_UpdatePlan
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: plan
                  in: path
                  description: The plan id.
                  required: true
                  schema:
                    type: string
                - name: updateMask
                  in: query
                  description: The list of fields to update.
                  schema:
                    type: string
                    format: field-mask
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Plan'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Plan'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/plans/{plan}/planCheckRuns:
        get:
            tags:
                - PlanService
            operationId: PlanService_ListPlanCheckRuns
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: plan
                  in: path
                  description: The plan id.
                  required: true
                  schema:
                    type: string
                - name: pageSize
                  in: query
                  description: |-
                    Not used.
                     The maximum number of plan check runs to return. The service may return fewer than
                     this value.
                     If unspecified, at most 10 plan check runs will be returned.
                     The maximum value is 1000; values above 1000 will be coerced to 1000.
                  schema:
                    type: integer
                    format: int32
                - name: pageToken
                  in: query
                  description: |-
                    Not used.
                     A page token, received from a previous `ListPlanCheckRuns` call.
                     Provide this to retrieve the subsequent page.

                     When paginating, all other parameters provided to `ListPlanCheckRuns` must match
                     the call that provided the page token.
                  schema:
                    type: string
                - name: latestOnly
                  in: query
                  description: If set to true, only the latest plan check run will be returned.
                  schema:
                    type: boolean
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListPlanCheckRunsResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/plans/{plan}/planCheckRuns:batchCancel:
        post:
            tags:
                - PlanService
            operationId: PlanService_BatchCancelPlanCheckRuns
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: plan
                  in: path
                  description: The plan id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/BatchCancelPlanCheckRunsRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BatchCancelPlanCheckRunsResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/plans/{plan}:runPlanChecks:
        post:
            tags:
                - PlanService
            operationId: PlanService_RunPlanChecks
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: plan
                  in: path
                  description: The plan id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RunPlanChecksRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/RunPlanChecksResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/plans:search:
        post:
            tags:
                - PlanService
            description: Search for plans that the caller has the bb.plans.get permission on and also satisfy the specified filter & query.
            operationId: PlanService_SearchPlans
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SearchPlansRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SearchPlansResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/policies:
        get:
            tags:
                - OrgPolicyService
            operationId: OrgPolicyService_ListPolicies
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: policyType
                  in: query
                  schema:
                    enum:
                        - POLICY_TYPE_UNSPECIFIED
                        - ROLLOUT_POLICY
                        - SLOW_QUERY
                        - DISABLE_COPY_DATA
                        - MASKING_RULE
                        - MASKING_EXCEPTION
                        - RESTRICT_ISSUE_CREATION_FOR_SQL_REVIEW
                        - TAG
                        - DATA_SOURCE_QUERY
                        - DATA_EXPORT
                    type: string
                    format: enum
                - name: pageSize
                  in: query
                  description: |-
                    Not used.
                     The maximum number of policies to return. The service may return fewer than
                     this value.
                     If unspecified, at most 10 policies will be returned.
                     The maximum value is 1000; values above 1000 will be coerced to 1000.
                  schema:
                    type: integer
                    format: int32
                - name: pageToken
                  in: query
                  description: |-
                    Not used.
                     A page token, received from a previous `ListPolicies` call.
                     Provide this to retrieve the subsequent page.

                     When paginating, all other parameters provided to `ListPolicies` must match
                     the call that provided the page token.
                  schema:
                    type: string
                - name: showDeleted
                  in: query
                  description: Show deleted policies if specified.
                  schema:
                    type: boolean
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListPoliciesResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        post:
            tags:
                - OrgPolicyService
            operationId: OrgPolicyService_CreatePolicy
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: type
                  in: query
                  schema:
                    enum:
                        - POLICY_TYPE_UNSPECIFIED
                        - ROLLOUT_POLICY
                        - SLOW_QUERY
                        - DISABLE_COPY_DATA
                        - MASKING_RULE
                        - MASKING_EXCEPTION
                        - RESTRICT_ISSUE_CREATION_FOR_SQL_REVIEW
                        - TAG
                        - DATA_SOURCE_QUERY
                        - DATA_EXPORT
                    type: string
                    format: enum
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Policy'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Policy'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/policies/{policy}:
        get:
            tags:
                - OrgPolicyService
            operationId: OrgPolicyService_GetPolicy
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: policy
                  in: path
                  description: The policy id.
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Policy'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        delete:
            tags:
                - OrgPolicyService
            operationId: OrgPolicyService_DeletePolicy
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: policy
                  in: path
                  description: The policy id.
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content: {}
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        patch:
            tags:
                - OrgPolicyService
            operationId: OrgPolicyService_UpdatePolicy
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: policy
                  in: path
                  description: The policy id.
                  required: true
                  schema:
                    type: string
                - name: updateMask
                  in: query
                  description: The list of fields to update.
                  schema:
                    type: string
                    format: field-mask
                - name: allowMissing
                  in: query
                  description: |-
                    If set to true, and the policy is not found, a new policy will be created.
                     In this situation, `update_mask` is ignored.
                  schema:
                    type: boolean
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Policy'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Policy'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/releases:
        get:
            tags:
                - ReleaseService
            operationId: ReleaseService_ListReleases
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: pageSize
                  in: query
                  description: |-
                    The maximum number of releases to return. The service may return fewer than this value.
                     If unspecified, at most 10 releases will be returned.
                     The maximum value is 1000; values above 1000 will be coerced to 1000.
                  schema:
                    type: integer
                    format: int32
                - name: pageToken
                  in: query
                  description: |-
                    Not used.
                     A page token, received from a previous `ListReleases` call.
                     Provide this to retrieve the subsequent page.

                     When paginating, all other parameters provided to `ListReleases` must match
                     the call that provided the page token.
                  schema:
                    type: string
                - name: showDeleted
                  in: query
                  description: Show deleted releases if specified.
                  schema:
                    type: boolean
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListReleasesResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        post:
            tags:
                - ReleaseService
            operationId: ReleaseService_CreateRelease
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Release'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Release'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/releases/{release}:
        get:
            tags:
                - ReleaseService
            operationId: ReleaseService_GetRelease
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: release
                  in: path
                  description: The release id.
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Release'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        delete:
            tags:
                - ReleaseService
            operationId: ReleaseService_DeleteRelease
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: release
                  in: path
                  description: The release id.
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content: {}
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        patch:
            tags:
                - ReleaseService
            operationId: ReleaseService_UpdateRelease
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: release
                  in: path
                  description: The release id.
                  required: true
                  schema:
                    type: string
                - name: updateMask
                  in: query
                  description: The list of fields to be updated.
                  schema:
                    type: string
                    format: field-mask
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Release'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Release'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/releases/{release}:undelete:
        post:
            tags:
                - ReleaseService
            operationId: ReleaseService_UndeleteRelease
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: release
                  in: path
                  description: The release id.
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Release'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/releases:check:
        post:
            tags:
                - ReleaseService
            operationId: ReleaseService_CheckRelease
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CheckReleaseRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CheckReleaseResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/rollouts:
        get:
            tags:
                - RolloutService
            operationId: RolloutService_ListRollouts
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: pageSize
                  in: query
                  description: |-
                    The maximum number of rollouts to return. The service may return fewer than
                     this value.
                     If unspecified, at most 10 rollouts will be returned.
                     The maximum value is 1000; values above 1000 will be coerced to 1000.
                  schema:
                    type: integer
                    format: int32
                - name: pageToken
                  in: query
                  description: |-
                    A page token, received from a previous `ListRollouts` call.
                     Provide this to retrieve the subsequent page.

                     When paginating, all other parameters provided to `ListRollouts` must match
                     the call that provided the page token.
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListRolloutsResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        post:
            tags:
                - RolloutService
            description: CreateRollout can be called multiple times with the same rollout.plan but different stage_id to promote rollout stages.
            operationId: RolloutService_CreateRollout
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: stageId
                  in: query
                  description: |-
                    stage_id is the id in the plan deployment_config_snapshot.
                     The rollout is created according to the plan and the
                     stages are created up to the stage_id.
                     If unspecified, all stages are created.
                     If set to "", no stages are created.
                  schema:
                    type: string
                - name: validateOnly
                  in: query
                  description: |-
                    If set, validate the request and preview the rollout, but
                     do not actually create it.
                  schema:
                    type: boolean
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Rollout'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Rollout'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/rollouts/{rollout}:
        get:
            tags:
                - RolloutService
            operationId: RolloutService_GetRollout
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: rollout
                  in: path
                  description: The rollout id.
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Rollout'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/rollouts/{rollout}/stages/{stage}/tasks/{task}/taskRuns:
        get:
            tags:
                - RolloutService
            operationId: RolloutService_ListTaskRuns
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: rollout
                  in: path
                  description: The rollout id.
                  required: true
                  schema:
                    type: string
                - name: stage
                  in: path
                  description: The stage id.
                  required: true
                  schema:
                    type: string
                - name: task
                  in: path
                  description: The task id.
                  required: true
                  schema:
                    type: string
                - name: pageSize
                  in: query
                  description: |-
                    Not used.
                     The maximum number of taskRuns to return. The service may return fewer than
                     this value.
                     If unspecified, at most 10 taskRuns will be returned.
                     The maximum value is 1000; values above 1000 will be coerced to 1000.
                  schema:
                    type: integer
                    format: int32
                - name: pageToken
                  in: query
                  description: |-
                    Not used.
                     A page token, received from a previous `ListTaskRuns` call.
                     Provide this to retrieve the subsequent page.

                     When paginating, all other parameters provided to `ListTaskRuns` must match
                     the call that provided the page token.
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListTaskRunsResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/rollouts/{rollout}/stages/{stage}/tasks/{task}/taskRuns/{taskRun}:
        get:
            tags:
                - RolloutService
            operationId: RolloutService_GetTaskRun
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: rollout
                  in: path
                  description: The rollout id.
                  required: true
                  schema:
                    type: string
                - name: stage
                  in: path
                  description: The stage id.
                  required: true
                  schema:
                    type: string
                - name: task
                  in: path
                  description: The task id.
                  required: true
                  schema:
                    type: string
                - name: taskRun
                  in: path
                  description: The taskRun id.
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/TaskRun'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/rollouts/{rollout}/stages/{stage}/tasks/{task}/taskRuns/{taskRun}/log:
        get:
            tags:
                - RolloutService
            operationId: RolloutService_GetTaskRunLog
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: rollout
                  in: path
                  description: The rollout id.
                  required: true
                  schema:
                    type: string
                - name: stage
                  in: path
                  description: The stage id.
                  required: true
                  schema:
                    type: string
                - name: task
                  in: path
                  description: The task id.
                  required: true
                  schema:
                    type: string
                - name: taskRun
                  in: path
                  description: The taskRun id.
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/TaskRunLog'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/rollouts/{rollout}/stages/{stage}/tasks/{task}/taskRuns/{taskRun}/session:
        get:
            tags:
                - RolloutService
            operationId: RolloutService_GetTaskRunSession
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: rollout
                  in: path
                  description: The rollout id.
                  required: true
                  schema:
                    type: string
                - name: stage
                  in: path
                  description: The stage id.
                  required: true
                  schema:
                    type: string
                - name: task
                  in: path
                  description: The task id.
                  required: true
                  schema:
                    type: string
                - name: taskRun
                  in: path
                  description: The taskRun id.
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/TaskRunSession'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/rollouts/{rollout}/stages/{stage}/tasks/{task}/taskRuns/{taskRun}:previewRollback:
        post:
            tags:
                - RolloutService
            operationId: RolloutService_PreviewTaskRunRollback
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: rollout
                  in: path
                  description: The rollout id.
                  required: true
                  schema:
                    type: string
                - name: stage
                  in: path
                  description: The stage id.
                  required: true
                  schema:
                    type: string
                - name: task
                  in: path
                  description: The task id.
                  required: true
                  schema:
                    type: string
                - name: taskRun
                  in: path
                  description: The taskRun id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/PreviewTaskRunRollbackRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PreviewTaskRunRollbackResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/rollouts/{rollout}/stages/{stage}/tasks/{task}/taskRuns:batchCancel:
        post:
            tags:
                - RolloutService
            description: |-
                BatchSkipTasks cancels the specified task runs in batch.
                 The access is the same as BatchRunTasks().
            operationId: RolloutService_BatchCancelTaskRuns
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: rollout
                  in: path
                  description: The rollout id.
                  required: true
                  schema:
                    type: string
                - name: stage
                  in: path
                  description: The stage id.
                  required: true
                  schema:
                    type: string
                - name: task
                  in: path
                  description: The task id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/BatchCancelTaskRunsRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BatchCancelTaskRunsResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/rollouts/{rollout}/stages/{stage}/tasks:batchRun:
        post:
            tags:
                - RolloutService
            description: |-
                BatchRunTasks creates task runs for the specified tasks.
                 DataExport issue only allows the creator to run the task.
                 Users with "bb.taskRuns.create" permission can run the task, e.g. Workspace Admin and DBA.
                 Follow role-based rollout policy for the environment.
            operationId: RolloutService_BatchRunTasks
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: rollout
                  in: path
                  description: The rollout id.
                  required: true
                  schema:
                    type: string
                - name: stage
                  in: path
                  description: The stage id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/BatchRunTasksRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BatchRunTasksResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/rollouts/{rollout}/stages/{stage}/tasks:batchSkip:
        post:
            tags:
                - RolloutService
            description: |-
                BatchSkipTasks skips the specified tasks.
                 The access is the same as BatchRunTasks().
            operationId: RolloutService_BatchSkipTasks
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: rollout
                  in: path
                  description: The rollout id.
                  required: true
                  schema:
                    type: string
                - name: stage
                  in: path
                  description: The stage id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/BatchSkipTasksRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BatchSkipTasksResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/sheets:
        post:
            tags:
                - SheetService
            operationId: SheetService_CreateSheet
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Sheet'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Sheet'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/sheets/{sheet}:
        get:
            tags:
                - SheetService
            operationId: SheetService_GetSheet
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: sheet
                  in: path
                  description: The sheet id.
                  required: true
                  schema:
                    type: string
                - name: raw
                  in: query
                  description: By default, the content of the sheet is cut off, set the `raw` to true to retrieve the full content.
                  schema:
                    type: boolean
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Sheet'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        patch:
            tags:
                - SheetService
            operationId: SheetService_UpdateSheet
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: sheet
                  in: path
                  description: The sheet id.
                  required: true
                  schema:
                    type: string
                - name: updateMask
                  in: query
                  description: |-
                    The list of fields to be updated.
                     Fields are specified relative to the sheet.
                     (e.g. `title`, `statement`; *not* `sheet.title` or `sheet.statement`)
                     Only support update the following fields for now:
                     - `title`
                     - `statement`
                  schema:
                    type: string
                    format: field-mask
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Sheet'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Sheet'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/sheets:batchCreate:
        post:
            tags:
                - SheetService
            operationId: SheetService_BatchCreateSheet
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/BatchCreateSheetRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/BatchCreateSheetResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/slowQueries:
        get:
            tags:
                - DatabaseService
            operationId: DatabaseService_ListSlowQueries
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: filter
                  in: query
                  description: |-
                    The filter of the slow query log.
                     follow the
                     [ebnf](https://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_form)
                     syntax. Support filter by database and start_time in SlowQueryDetails for
                     now. For example: Search the slow query log of the specific database:
                       - the specific database: database =
                       "instances/{instance}/databases/{database}"
                     Search the slow query log that start_time after 2022-01-01T12:00:00.000Z:
                       - start_time > "2022-01-01T12:00:00.000Z"
                       - Should use [RFC-3339 format](https://www.rfc-editor.org/rfc/rfc3339).
                       - Currently we only support filtering down to date granularity.
                  schema:
                    type: string
                - name: orderBy
                  in: query
                  description: |-
                    The order by of the slow query log.
                     Support order by count, latest_log_time, average_query_time,
                     maximum_query_time, average_rows_sent, maximum_rows_sent,
                     average_rows_examined, maximum_rows_examined for now. For example:
                      - order by count: order_by = "count"
                      - order by latest_log_time desc: order_by = "latest_log_time desc"
                     Default: order by average_query_time desc.
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListSlowQueriesResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/vcsConnectors:
        get:
            tags:
                - VCSConnectorService
            operationId: VCSConnectorService_ListVCSConnectors
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: pageSize
                  in: query
                  description: |-
                    Not used.
                     The maximum number of vcs connectors to return. The service may return fewer than
                     this value.
                     If unspecified, at most 10 vcs connectors will be returned.
                     The maximum value is 1000; values above 1000 will be coerced to 1000.
                  schema:
                    type: integer
                    format: int32
                - name: pageToken
                  in: query
                  description: |-
                    Not used.
                     A page token, received from a previous `ListVCSConnectors` call.
                     Provide this to retrieve the subsequent page.

                     When paginating, all other parameters provided to `ListVCSConnectors` must match
                     the call that provided the page token.
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListVCSConnectorsResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        post:
            tags:
                - VCSConnectorService
            operationId: VCSConnectorService_CreateVCSConnector
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: vcsConnectorId
                  in: query
                  description: |-
                    The ID to use for the vcsConnector, which will become the final component of
                     the vcsConnector's resource name.

                     This value should be 4-63 characters, and valid characters
                     are /[a-z][0-9]-/.
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/VCSConnector'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/VCSConnector'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/vcsConnectors/{vcsConnector}:
        get:
            tags:
                - VCSConnectorService
            operationId: VCSConnectorService_GetVCSConnector
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: vcsConnector
                  in: path
                  description: The vcsConnector id.
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/VCSConnector'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        delete:
            tags:
                - VCSConnectorService
            operationId: VCSConnectorService_DeleteVCSConnector
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: vcsConnector
                  in: path
                  description: The vcsConnector id.
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content: {}
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        patch:
            tags:
                - VCSConnectorService
            operationId: VCSConnectorService_UpdateVCSConnector
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: vcsConnector
                  in: path
                  description: The vcsConnector id.
                  required: true
                  schema:
                    type: string
                - name: updateMask
                  in: query
                  description: The list of fields to be updated.
                  schema:
                    type: string
                    format: field-mask
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/VCSConnector'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/VCSConnector'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/webhooks/{webhook}:removeWebhook:
        post:
            tags:
                - ProjectService
            operationId: ProjectService_RemoveWebhook
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: webhook
                  in: path
                  description: The webhook id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/RemoveWebhookRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Project'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}/webhooks/{webhook}:updateWebhook:
        post:
            tags:
                - ProjectService
            operationId: ProjectService_UpdateWebhook
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
                - name: webhook
                  in: path
                  description: The webhook id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UpdateWebhookRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Project'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}:addWebhook:
        post:
            tags:
                - ProjectService
            operationId: ProjectService_AddWebhook
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/AddWebhookRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Project'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}:getIamPolicy:
        get:
            tags:
                - ProjectService
            operationId: ProjectService_GetIamPolicy
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/IamPolicy'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}:previewPlan:
        post:
            tags:
                - PlanService
            operationId: PlanService_PreviewPlan
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/PreviewPlanRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PreviewPlanResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}:previewRollout:
        post:
            tags:
                - RolloutService
            operationId: RolloutService_PreviewRollout
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/PreviewRolloutRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Rollout'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}:setIamPolicy:
        post:
            tags:
                - ProjectService
            operationId: ProjectService_SetIamPolicy
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SetIamPolicyRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/IamPolicy'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}:syncSlowQueries:
        post:
            tags:
                - InstanceService
            operationId: InstanceService_SyncSlowQueries
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SyncSlowQueriesRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content: {}
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}:testWebhook:
        post:
            tags:
                - ProjectService
            operationId: ProjectService_TestWebhook
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/TestWebhookRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/TestWebhookResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects/{project}:undelete:
        post:
            tags:
                - ProjectService
            operationId: ProjectService_UndeleteProject
            parameters:
                - name: project
                  in: path
                  description: The project id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UndeleteProjectRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Project'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/projects:search:
        post:
            tags:
                - ProjectService
            operationId: ProjectService_SearchProjects
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SearchProjectsRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SearchProjectsResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/queryHistories:search:
        post:
            tags:
                - SQLService
            description: SearchQueryHistories searches query histories for the caller.
            operationId: SQLService_SearchQueryHistories
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SearchQueryHistoriesRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SearchQueryHistoriesResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/reviewConfigs:
        get:
            tags:
                - ReviewConfigService
            operationId: ReviewConfigService_ListReviewConfigs
            parameters:
                - name: pageSize
                  in: query
                  description: |-
                    Not used.
                     The maximum number of sql review to return. The service may return fewer than
                     this value.
                     If unspecified, at most 10 sql review will be returned.
                     The maximum value is 1000; values above 1000 will be coerced to 1000.
                  schema:
                    type: integer
                    format: int32
                - name: pageToken
                  in: query
                  description: |-
                    Not used.
                     A page token, provide this to retrieve the subsequent page.

                     When paginating, all other parameters provided to `ListReviewConfigs` must match
                     the call that provided the page token.
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListReviewConfigsResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        post:
            tags:
                - ReviewConfigService
            operationId: ReviewConfigService_CreateReviewConfig
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ReviewConfig'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ReviewConfig'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/reviewConfigs/{reviewConfig}:
        get:
            tags:
                - ReviewConfigService
            operationId: ReviewConfigService_GetReviewConfig
            parameters:
                - name: reviewConfig
                  in: path
                  description: The reviewConfig id.
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ReviewConfig'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        delete:
            tags:
                - ReviewConfigService
            operationId: ReviewConfigService_DeleteReviewConfig
            parameters:
                - name: reviewConfig
                  in: path
                  description: The reviewConfig id.
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content: {}
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        patch:
            tags:
                - ReviewConfigService
            operationId: ReviewConfigService_UpdateReviewConfig
            parameters:
                - name: reviewConfig
                  in: path
                  description: The reviewConfig id.
                  required: true
                  schema:
                    type: string
                - name: updateMask
                  in: query
                  description: The list of fields to update.
                  schema:
                    type: string
                    format: field-mask
                - name: allowMissing
                  in: query
                  description: |-
                    If set to true, and the config is not found, a new config will be created.
                     In this situation, `update_mask` is ignored.
                  schema:
                    type: boolean
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ReviewConfig'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ReviewConfig'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/risks:
        get:
            tags:
                - RiskService
            operationId: RiskService_ListRisks
            parameters:
                - name: pageSize
                  in: query
                  description: |-
                    Not used.
                     The maximum number of risks to return. The service may return fewer than
                     this value.
                     If unspecified, at most 10 risks will be returned.
                     The maximum value is 1000; values above 1000 will be coerced to 1000.
                  schema:
                    type: integer
                    format: int32
                - name: pageToken
                  in: query
                  description: |-
                    Not used.
                     A page token, received from a previous `ListRisks` call.
                     Provide this to retrieve the subsequent page.

                     When paginating, all other parameters provided to `LiskRisks` must match
                     the call that provided the page token.
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListRisksResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        post:
            tags:
                - RiskService
            operationId: RiskService_CreateRisk
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Risk'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Risk'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/risks/{risk}:
        delete:
            tags:
                - RiskService
            operationId: RiskService_DeleteRisk
            parameters:
                - name: risk
                  in: path
                  description: The risk id.
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content: {}
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        patch:
            tags:
                - RiskService
            operationId: RiskService_UpdateRisk
            parameters:
                - name: risk
                  in: path
                  description: The risk id.
                  required: true
                  schema:
                    type: string
                - name: updateMask
                  in: query
                  description: The list of fields to update.
                  schema:
                    type: string
                    format: field-mask
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Risk'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Risk'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/roles:
        get:
            tags:
                - RoleService
            operationId: RoleService_ListRoles
            parameters:
                - name: pageSize
                  in: query
                  description: |-
                    Not used.
                     The maximum number of roles to return. The service may return fewer than
                     this value.
                     If unspecified, at most 10 reviews will be returned.
                     The maximum value is 1000; values above 1000 will be coerced to 1000.
                  schema:
                    type: integer
                    format: int32
                - name: pageToken
                  in: query
                  description: |-
                    Not used.
                     A page token, received from a previous `ListRoles` call.
                     Provide this to retrieve the subsequent page.

                     When paginating, all other parameters provided to `ListRoles` must match
                     the call that provided the page token.
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListRolesResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        post:
            tags:
                - RoleService
            operationId: RoleService_CreateRole
            parameters:
                - name: roleId
                  in: query
                  description: |-
                    The ID to use for the role, which will become the final component
                     of the role's resource name.

                     This value should be 4-63 characters, and valid characters
                     are /[a-z][A-Z][0-9]/.
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Role'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Role'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/roles/{role}:
        get:
            tags:
                - RoleService
            operationId: RoleService_GetRole
            parameters:
                - name: role
                  in: path
                  description: The role id.
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Role'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        delete:
            tags:
                - RoleService
            operationId: RoleService_DeleteRole
            parameters:
                - name: role
                  in: path
                  description: The role id.
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content: {}
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        patch:
            tags:
                - RoleService
            operationId: RoleService_UpdateRole
            parameters:
                - name: role
                  in: path
                  description: The role id.
                  required: true
                  schema:
                    type: string
                - name: updateMask
                  in: query
                  schema:
                    type: string
                    format: field-mask
                - name: allowMissing
                  in: query
                  description: If set to true, and the role is not found, a new role will be created.
                  schema:
                    type: boolean
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Role'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Role'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/schemaDesign:diffMetadata:
        post:
            tags:
                - SQLService
            operationId: SQLService_DiffMetadata
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/DiffMetadataRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/DiffMetadataResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/schemaDesign:stringifyMetadata:
        post:
            tags:
                - SQLService
            operationId: SQLService_StringifyMetadata
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/StringifyMetadataRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/StringifyMetadataResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/settings:
        get:
            tags:
                - SettingService
            operationId: SettingService_ListSettings
            parameters:
                - name: pageSize
                  in: query
                  description: |-
                    Not used.
                     The maximum number of settings to return. The service may return fewer than
                     this value.
                     If unspecified, at most 10 settings will be returned.
                     The maximum value is 1000; values above 1000 will be coerced to 1000.
                  schema:
                    type: integer
                    format: int32
                - name: pageToken
                  in: query
                  description: |-
                    Not used.
                     A page token, received from a previous `ListSettings` call.
                     Provide this to retrieve the subsequent page.

                     When paginating, all other parameters provided to `ListSettings` must match
                     the call that provided the page token.
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListSettingsResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/settings/{setting}:
        get:
            tags:
                - SettingService
            operationId: SettingService_GetSetting
            parameters:
                - name: setting
                  in: path
                  description: The setting id.
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Setting'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        patch:
            tags:
                - SettingService
            operationId: SettingService_UpdateSetting
            parameters:
                - name: setting
                  in: path
                  description: The setting id.
                  required: true
                  schema:
                    type: string
                - name: validateOnly
                  in: query
                  description: |-
                    validate_only is a flag to indicate whether to validate the setting value,
                     server would not persist the setting value if it is true.
                  schema:
                    type: boolean
                - name: allowMissing
                  in: query
                  schema:
                    type: boolean
                - name: updateMask
                  in: query
                  schema:
                    type: string
                    format: field-mask
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Setting'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Setting'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/sql/check:
        post:
            tags:
                - SQLService
            operationId: SQLService_Check
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CheckRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/CheckResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/sql/parseMyBatisMapper:
        post:
            tags:
                - SQLService
            operationId: SQLService_ParseMyBatisMapper
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/ParseMyBatisMapperRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ParseMyBatisMapperResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/sql/pretty:
        post:
            tags:
                - SQLService
            operationId: SQLService_Pretty
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/PrettyRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/PrettyResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/subscription:
        get:
            tags:
                - SubscriptionService
            operationId: SubscriptionService_GetSubscription
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Subscription'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        patch:
            tags:
                - SubscriptionService
            operationId: SubscriptionService_UpdateSubscription
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/PatchSubscription'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Subscription'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/users:
        get:
            tags:
                - AuthService
            description: |-
                List all users.
                 Any authenticated user can list users.
            operationId: AuthService_ListUsers
            parameters:
                - name: pageSize
                  in: query
                  description: |-
                    Not used.
                     The maximum number of users to return. The service may return fewer than
                     this value.
                     If unspecified, at most 50 users will be returned.
                     The maximum value is 1000; values above 1000 will be coerced to 1000.
                  schema:
                    type: integer
                    format: int32
                - name: pageToken
                  in: query
                  description: |-
                    Not used.
                     A page token, received from a previous `ListUsers` call.
                     Provide this to retrieve the subsequent page.

                     When paginating, all other parameters provided to `ListUsers` must match
                     the call that provided the page token.
                  schema:
                    type: string
                - name: showDeleted
                  in: query
                  description: Show deleted users if specified.
                  schema:
                    type: boolean
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListUsersResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        post:
            tags:
                - AuthService
            description: |-
                Create a user.
                 When Disallow Signup is enabled, only the caller with bb.users.create on the workspace can create a user.
                 Otherwise, any unauthenticated user can create a user.
            operationId: AuthService_CreateUser
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/User'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/users/{user}:
        get:
            tags:
                - AuthService
            description: |-
                Get the user.
                 Any authenticated user can get the user.
            operationId: AuthService_GetUser
            parameters:
                - name: user
                  in: path
                  description: The user id.
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        delete:
            tags:
                - AuthService
            description: |-
                Only the user with bb.users.delete permission on the workspace can delete the user.
                 The last remaining workspace admin cannot be deleted.
            operationId: AuthService_DeleteUser
            parameters:
                - name: user
                  in: path
                  description: The user id.
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content: {}
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        patch:
            tags:
                - AuthService
            description: Only the user itself and the user with bb.users.update permission on the workspace can update the user.
            operationId: AuthService_UpdateUser
            parameters:
                - name: user
                  in: path
                  description: The user id.
                  required: true
                  schema:
                    type: string
                - name: updateMask
                  in: query
                  description: The list of fields to update.
                  schema:
                    type: string
                    format: field-mask
                - name: otpCode
                  in: query
                  description: The otp_code is used to verify the user's identity by MFA.
                  schema:
                    type: string
                - name: regenerateTempMfaSecret
                  in: query
                  description: |-
                    The regenerate_temp_mfa_secret flag means to regenerate temporary MFA secret for user.
                     This is used for MFA setup. The temporary MFA secret and recovery codes will be returned in the response.
                  schema:
                    type: boolean
                - name: regenerateRecoveryCodes
                  in: query
                  description: The regenerate_recovery_codes flag means to regenerate recovery codes for user.
                  schema:
                    type: boolean
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/User'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/users/{user}:undelete:
        post:
            tags:
                - AuthService
            description: Only the user with bb.users.undelete permission on the workspace can undelete the user.
            operationId: AuthService_UndeleteUser
            parameters:
                - name: user
                  in: path
                  description: The user id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/UndeleteUserRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/vcsProviders:
        get:
            tags:
                - VCSProviderService
            operationId: VCSProviderService_ListVCSProviders
            parameters:
                - name: pageSize
                  in: query
                  description: |-
                    Not used.
                     The maximum number of vcs provider to return. The service may return fewer than this value.
                     If unspecified, at most 10 vcs provider will be returned.
                     The maximum value is 1000; values above 1000 will be coerced to 1000.
                  schema:
                    type: integer
                    format: int32
                - name: pageToken
                  in: query
                  description: |-
                    Not used.
                     A page token, received from a previous `ListVCSProviders` call.
                     Provide this to retrieve the subsequent page.
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListVCSProvidersResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        post:
            tags:
                - VCSProviderService
            operationId: VCSProviderService_CreateVCSProvider
            parameters:
                - name: vcsProviderId
                  in: query
                  description: |-
                    The ID to use for the VCS provider, which will become the final component of
                     the VCS provider's name.

                     This value should be 4-63 characters, and valid characters
                     are /[a-z][0-9]-/.
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/VCSProvider'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/VCSProvider'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/vcsProviders/{vcsProvider}:
        get:
            tags:
                - VCSProviderService
            operationId: VCSProviderService_GetVCSProvider
            parameters:
                - name: vcsProvider
                  in: path
                  description: The vcsProvider id.
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/VCSProvider'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        delete:
            tags:
                - VCSProviderService
            operationId: VCSProviderService_DeleteVCSProvider
            parameters:
                - name: vcsProvider
                  in: path
                  description: The vcsProvider id.
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content: {}
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        patch:
            tags:
                - VCSProviderService
            operationId: VCSProviderService_UpdateVCSProvider
            parameters:
                - name: vcsProvider
                  in: path
                  description: The vcsProvider id.
                  required: true
                  schema:
                    type: string
                - name: updateMask
                  in: query
                  description: The list of fields to be updated.
                  schema:
                    type: string
                    format: field-mask
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/VCSProvider'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/VCSProvider'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/vcsProviders/{vcsProvider}/vcsConnectors:
        get:
            tags:
                - VCSProviderService
            operationId: VCSProviderService_ListVCSConnectorsInProvider
            parameters:
                - name: vcsProvider
                  in: path
                  description: The vcsProvider id.
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListVCSConnectorsInProviderResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/vcsProviders/{vcsProvider}:searchRepositories:
        post:
            tags:
                - VCSProviderService
            operationId: VCSProviderService_SearchVCSProviderRepositories
            parameters:
                - name: vcsProvider
                  in: path
                  description: The vcsProvider id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SearchVCSProviderRepositoriesRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SearchVCSProviderRepositoriesResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/worksheets:
        post:
            tags:
                - WorksheetService
            description: Create a personal worksheet used in SQL Editor.
            operationId: WorksheetService_CreateWorksheet
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Worksheet'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Worksheet'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/worksheets/{worksheet}:
        get:
            tags:
                - WorksheetService
            description: |-
                Get a worksheet by name.
                 The users can access this method if,
                 - they are the creator of the worksheet;
                 - they have bb.worksheets.get permission on the workspace;
                 - the sheet is shared with them with PROJECT_READ and PROJECT_WRITE visibility, and they have bb.projects.get permission on the project.
            operationId: WorksheetService_GetWorksheet
            parameters:
                - name: worksheet
                  in: path
                  description: The worksheet id.
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Worksheet'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        delete:
            tags:
                - WorksheetService
            description: |-
                Delete a worksheet.
                 The access is the same as UpdateWorksheet method.
            operationId: WorksheetService_DeleteWorksheet
            parameters:
                - name: worksheet
                  in: path
                  description: The worksheet id.
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content: {}
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
        patch:
            tags:
                - WorksheetService
            description: |-
                Update a worksheet.
                 The users can access this method if,
                 - they are the creator of the worksheet;
                 - they have bb.worksheets.manage permission on the workspace;
                 - the sheet is shared with them with PROJECT_WRITE visibility, and they have bb.projects.get permission on the project.
            operationId: WorksheetService_UpdateWorksheet
            parameters:
                - name: worksheet
                  in: path
                  description: The worksheet id.
                  required: true
                  schema:
                    type: string
                - name: updateMask
                  in: query
                  description: |-
                    The list of fields to be updated.
                     Fields are specified relative to the worksheet.
                     (e.g. `title`, `statement`; *not* `worksheet.title` or `worksheet.statement`)
                     Only support update the following fields for now:
                     - `title`
                     - `statement`
                     - `starred`
                     - `visibility`
                  schema:
                    type: string
                    format: field-mask
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Worksheet'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Worksheet'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/worksheets/{worksheet}/organizer:
        patch:
            tags:
                - WorksheetService
            description: |-
                Update the organizer of a worksheet.
                 The access is the same as UpdateWorksheet method.
            operationId: WorksheetService_UpdateWorksheetOrganizer
            parameters:
                - name: worksheet
                  in: path
                  description: The worksheet id.
                  required: true
                  schema:
                    type: string
                - name: updateMask
                  in: query
                  description: |-
                    The list of fields to be updated.
                     Fields are specified relative to the worksheet organizer.
                     Only support update the following fields for now:
                     - `starred`
                  schema:
                    type: string
                    format: field-mask
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/WorksheetOrganizer'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/WorksheetOrganizer'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/worksheets:search:
        post:
            tags:
                - WorksheetService
            description: |-
                Search for worksheets.
                 This is used for finding my worksheets or worksheets shared by other people.
                 The sheet accessibility is the same as GetWorksheet().
            operationId: WorksheetService_SearchWorksheets
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SearchWorksheetsRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/SearchWorksheetsResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/workspaces/{workspace}/databases:
        get:
            tags:
                - DatabaseService
            operationId: DatabaseService_ListDatabases
            parameters:
                - name: workspace
                  in: path
                  description: The workspace id.
                  required: true
                  schema:
                    type: string
                - name: pageSize
                  in: query
                  description: |-
                    The maximum number of databases to return. The service may return fewer
                     than this value. If unspecified, at most 10 databases will be returned.
                  schema:
                    type: integer
                    format: int32
                - name: pageToken
                  in: query
                  description: |-
                    A page token, received from a previous `ListDatabases` call.
                     Provide this to retrieve the subsequent page.

                     When paginating, all other parameters provided to `ListDatabases` must
                     match the call that provided the page token.
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/ListDatabasesResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/workspaces/{workspace}:getIamPolicy:
        get:
            tags:
                - WorkspaceService
            operationId: WorkspaceService_GetIamPolicy
            parameters:
                - name: workspace
                  in: path
                  description: The workspace id.
                  required: true
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/IamPolicy'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1/workspaces/{workspace}:setIamPolicy:
        post:
            tags:
                - WorkspaceService
            operationId: WorkspaceService_SetIamPolicy
            parameters:
                - name: workspace
                  in: path
                  description: The workspace id.
                  required: true
                  schema:
                    type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/SetIamPolicyRequest'
                required: true
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/IamPolicy'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
    /v1:adminExecute:
        get:
            tags:
                - SQLService
            operationId: SQLService_AdminExecute
            parameters:
                - name: name
                  in: query
                  description: |-
                    The name is the instance name to execute the query against.
                     Format: instances/{instance}/databases/{databaseName}
                  schema:
                    type: string
                - name: statement
                  in: query
                  description: The SQL statement to execute.
                  schema:
                    type: string
                - name: limit
                  in: query
                  description: The maximum number of rows to return.
                  schema:
                    type: integer
                    format: int32
                - name: timeout
                  in: query
                  description: The timeout for the request.
                  schema:
                    pattern: ^-?(?:0|[1-9][0-9]{0,11})(?:\.[0-9]{1,9})?s$
                    type: string
                    description: Represents a a duration between -315,576,000,000s and 315,576,000,000s (around 10000 years). Precision is in nanoseconds. 1 nanosecond is represented as 0.000000001s
                - name: schema
                  in: query
                  description: |-
                    The default schema to execute the statement. Equals to the current schema
                     in Oracle and search path in Postgres.
                  schema:
                    type: string
                - name: container
                  in: query
                  description: |-
                    Container is the container name to execute the query against, used for
                     CosmosDB only.
                  schema:
                    type: string
            responses:
                "200":
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/AdminExecuteResponse'
                default:
                    description: Default error response
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Status'
components:
    schemas:
        ActuatorInfo:
            type: object
            properties:
                version:
                    readOnly: true
                    type: string
                    description: version is the bytebase's server version
                gitCommit:
                    readOnly: true
                    type: string
                    description: git_commit is the git commit hash of the build
                readonly:
                    readOnly: true
                    type: boolean
                    description: readonly flag means if the Bytebase is running in readonly mode.
                saas:
                    readOnly: true
                    type: boolean
                    description: saas flag means if the Bytebase is running in SaaS mode, some features are not allowed to edit by users.
                demoName:
                    readOnly: true
                    type: string
                    description: demo_name specifies the demo name, empty string means no demo.
                host:
                    readOnly: true
                    type: string
                    description: host is the Bytebase instance host.
                port:
                    readOnly: true
                    type: string
                    description: port is the Bytebase instance port.
                externalUrl:
                    readOnly: true
                    type: string
                    description: external_url is the URL where user or webhook callback visits Bytebase.
                needAdminSetup:
                    readOnly: true
                    type: boolean
                    description: need_admin_setup flag means the Bytebase instance doesn't have any end users.
                disallowSignup:
                    readOnly: true
                    type: boolean
                    description: disallow_signup is the flag to disable self-service signup.
                lastActiveTime:
                    readOnly: true
                    type: string
                    description: last_active_time is the service last active time in UTC Time Format, any API calls will refresh this value.
                    format: date-time
                require2fa:
                    readOnly: true
                    type: boolean
                    description: require_2fa is the flag to require 2FA for all users.
                workspaceId:
                    readOnly: true
                    type: string
                    description: workspace_id is the identifier for the workspace.
                gitopsWebhookUrl:
                    readOnly: true
                    type: string
                    description: gitops_webhook_url is the webhook URL for GitOps.
                debug:
                    type: boolean
                    description: debug flag means if the debug mode is enabled.
                lsp:
                    type: boolean
                    description: lsp is the enablement of lsp in SQL Editor.
                preUpdateBackup:
                    type: boolean
                    description: pre_update_backup is the enablement of data backup prior to data update.
                iamGuard:
                    type: boolean
                    description: iam_guard is the enablement of IAM checks.
                unlicensedFeatures:
                    type: array
                    items:
                        type: string
                disallowPasswordSignin:
                    type: boolean
                    description: disallow_password_signin is the flag to disallow user signin with email&password. (except workspace admins)
                passwordRestriction:
                    $ref: '#/components/schemas/PasswordRestrictionSetting'
                docker:
                    type: boolean
                    description: docker flag means if the Bytebase instance is running in docker.
            description: |-
                ServerInfo is the API message for server info.
                 Actuator concept is similar to the Spring Boot Actuator.
        AddDataSourceRequest:
            required:
                - name
                - dataSource
            type: object
            properties:
                name:
                    type: string
                    description: |-
                        The name of the instance to add a data source to.
                         Format: instances/{instance}
                dataSource:
                    allOf:
                        - $ref: '#/components/schemas/DataSource'
                    description: |-
                        Identified by data source ID.
                         Only READ_ONLY data source can be added.
                validateOnly:
                    type: boolean
                    description: Validate only also tests the data source connection.
        AddWebhookRequest:
            required:
                - project
                - webhook
            type: object
            properties:
                project:
                    type: string
                    description: |-
                        The name of the project to add the webhook to.
                         Format: projects/{project}
                webhook:
                    allOf:
                        - $ref: '#/components/schemas/Webhook'
                    description: The webhook to add.
        AdminExecuteResponse:
            type: object
            properties:
                results:
                    type: array
                    items:
                        $ref: '#/components/schemas/QueryResult'
                    description: The query results.
        Advice:
            type: object
            properties:
                status:
                    enum:
                        - STATUS_UNSPECIFIED
                        - SUCCESS
                        - WARNING
                        - ERROR
                    type: string
                    description: The advice status.
                    format: enum
                code:
                    type: integer
                    description: The advice code.
                    format: int32
                title:
                    type: string
                    description: The advice title.
                content:
                    type: string
                    description: The advice content.
                startPosition:
                    allOf:
                        - $ref: '#/components/schemas/Position'
                    description: 1-based positions of the sql statment.
                endPosition:
                    $ref: '#/components/schemas/Position'
        AdviseIndexResponse:
            type: object
            properties:
                currentIndex:
                    type: string
                    description: The current index of the statement used.
                suggestion:
                    type: string
                    description: The suggested index of the statement.
                createIndexStatement:
                    type: string
                    description: The create index statement of the suggested index.
            description: AdviseIndexResponse is the response of advising index.
        AgentPluginSetting:
            type: object
            properties:
                url:
                    type: string
                    description: The URL for the agent API.
                token:
                    type: string
                    description: The token for the agent.
        Algorithm:
            type: object
            properties:
                fullMask:
                    $ref: '#/components/schemas/Algorithm_FullMask'
                rangeMask:
                    $ref: '#/components/schemas/Algorithm_RangeMask'
                md5Mask:
                    $ref: '#/components/schemas/Algorithm_MD5Mask'
                innerOuterMask:
                    $ref: '#/components/schemas/Algorithm_InnerOuterMask'
        Algorithm_FullMask:
            type: object
            properties:
                substitution:
                    type: string
                    description: |-
                        substitution is the string used to replace the original value, the
                         max length of the string is 16 bytes.
        Algorithm_InnerOuterMask:
            type: object
            properties:
                prefixLen:
                    type: integer
                    format: int32
                suffixLen:
                    type: integer
                    format: int32
                type:
                    enum:
                        - MASK_TYPE_UNSPECIFIED
                        - INNER
                        - OUTER
                    type: string
                    format: enum
                substitution:
                    type: string
        Algorithm_MD5Mask:
            type: object
            properties:
                salt:
                    type: string
                    description: salt is the salt value to generate a different hash that with the word alone.
        Algorithm_RangeMask:
            type: object
            properties:
                slices:
                    type: array
                    items:
                        $ref: '#/components/schemas/RangeMask_Slice'
                    description: |-
                        We store it as a repeated field to face the fact that the original value may have multiple parts should be masked.
                         But frontend can be started with a single rule easily.
        Announcement:
            type: object
            properties:
                level:
                    enum:
                        - ALERT_LEVEL_UNSPECIFIED
                        - ALERT_LEVEL_INFO
                        - ALERT_LEVEL_WARNING
                        - ALERT_LEVEL_CRITICAL
                    type: string
                    description: The alert level of announcemnt
                    format: enum
                text:
                    type: string
                    description: The text of announcemnt
                link:
                    type: string
                    description: The optional link, user can follow the link to check extra details
        Anomaly:
            required:
                - resource
            type: object
            properties:
                resource:
                    type: string
                    description: |-
                        The resource that is the target of the operation.
                         Format:
                         - Database: instances/{instance}/databases/{database}
                type:
                    enum:
                        - ANOMALY_TYPE_UNSPECIFIED
                        - DATABASE_CONNECTION
                        - DATABASE_SCHEMA_DRIFT
                    type: string
                    description: type is the type of the anomaly.
                    format: enum
                severity:
                    enum:
                        - ANOMALY_SEVERITY_UNSPECIFIED
                        - MEDIUM
                        - HIGH
                        - CRITICAL
                    type: string
                    description: severity is the severity of the anomaly.
                    format: enum
                createTime:
                    readOnly: true
                    type: string
                    format: date-time
                updateTime:
                    readOnly: true
                    type: string
                    format: date-time
        AppIMSetting:
            type: object
            properties:
                slack:
                    $ref: '#/components/schemas/AppIMSetting_Slack'
                feishu:
                    $ref: '#/components/schemas/AppIMSetting_Feishu'
                wecom:
                    $ref: '#/components/schemas/AppIMSetting_Wecom'
                lark:
                    $ref: '#/components/schemas/AppIMSetting_Lark'
        AppIMSetting_Feishu:
            type: object
            properties:
                enabled:
                    type: boolean
                appId:
                    type: string
                appSecret:
                    type: string
        AppIMSetting_Lark:
            type: object
            properties:
                enabled:
                    type: boolean
                appId:
                    type: string
                appSecret:
                    type: string
        AppIMSetting_Slack:
            type: object
            properties:
                enabled:
                    type: boolean
                token:
                    type: string
        AppIMSetting_Wecom:
            type: object
            properties:
                enabled:
                    type: boolean
                corpId:
                    type: string
                agentId:
                    type: string
                secret:
                    type: string
        ApprovalFlow:
            type: object
            properties:
                steps:
                    type: array
                    items:
                        $ref: '#/components/schemas/ApprovalStep'
        ApprovalNode:
            type: object
            properties:
                type:
                    enum:
                        - TYPE_UNSPECIFIED
                        - ANY_IN_GROUP
                    type: string
                    format: enum
                groupValue:
                    enum:
                        - GROUP_VALUE_UNSPECIFILED
                        - WORKSPACE_OWNER
                        - WORKSPACE_DBA
                        - PROJECT_OWNER
                        - PROJECT_MEMBER
                    type: string
                    format: enum
                role:
                    type: string
                    description: 'Format: roles/{role}'
                externalNodeId:
                    type: string
        ApprovalStep:
            type: object
            properties:
                type:
                    enum:
                        - TYPE_UNSPECIFIED
                        - ALL
                        - ANY
                    type: string
                    format: enum
                nodes:
                    type: array
                    items:
                        $ref: '#/components/schemas/ApprovalNode'
        ApprovalTemplate:
            type: object
            properties:
                flow:
                    $ref: '#/components/schemas/ApprovalFlow'
                title:
                    type: string
                description:
                    type: string
                creator:
                    type: string
                    description: |-
                        The name of the creator in users/{email} format.
                         TODO: we should mark it as OUTPUT_ONLY, but currently the frontend will post the approval setting with creator.
        ApproveIssueRequest:
            required:
                - name
            type: object
            properties:
                name:
                    type: string
                    description: |-
                        The name of the issue to add an approver.
                         Format: projects/{project}/issues/{issue}
                comment:
                    type: string
        AuditLog:
            type: object
            properties:
                name:
                    readOnly: true
                    type: string
                    description: |-
                        The name of the log.
                         Formats:
                         - projects/{project}/auditLogs/{uid}
                         - workspaces/{workspace}/auditLogs/{uid}
                createTime:
                    readOnly: true
                    type: string
                    format: date-time
                user:
                    type: string
                    description: 'Format: users/d@d.com'
                method:
                    type: string
                    description: e.g. `/bytebase.v1.SQLService/Query`, `bb.project.repository.push`
                severity:
                    enum:
                        - DEFAULT
                        - DEBUG
                        - INFO
                        - NOTICE
                        - WARNING
                        - ERROR
                        - CRITICAL
                        - ALERT
                        - EMERGENCY
                    type: string
                    format: enum
                resource:
                    type: string
                    description: The associated resource.
                request:
                    type: string
                    description: JSON-encoded request.
                response:
                    type: string
                    description: |-
                        JSON-encoded response.
                         Some fields are omitted because they are too large or contain sensitive information.
                status:
                    $ref: '#/components/schemas/Status'
                serviceData:
                    allOf:
                        - $ref: '#/components/schemas/GoogleProtobufAny'
                    description: service-specific data about the request, response, and other activities.
                requestMetadata:
                    allOf:
                        - $ref: '#/components/schemas/RequestMetadata'
                    description: Metadata about the operation.
        BatchCancelPlanCheckRunsRequest:
            required:
                - parent
            type: object
            properties:
                parent:
                    type: string
                    description: |-
                        The name of the parent of the planChecks.
                         Format: projects/{project}/plans/{plan}
                planCheckRuns:
                    type: array
                    items:
                        type: string
                    description: |-
                        TODO(d): update this API.
                         The planCheckRuns to cancel.
                         Format: projects/{project}/plans/{plan}/planCheckRuns/{planCheckRun}
        BatchCancelPlanCheckRunsResponse:
            type: object
            properties: {}
        BatchCancelTaskRunsRequest:
            type: object
            properties:
                parent:
                    type: string
                    description: |-
                        The name of the parent of the taskRuns.
                         Format: projects/{project}/rollouts/{rollout}/stages/{stage}/tasks/{task}
                         Use `projects/{project}/rollouts/{rollout}/stages/{stage}/tasks/-` to cancel task runs under the same stage.
                taskRuns:
                    type: array
                    items:
                        type: string
                    description: |-
                        The taskRuns to cancel.
                         Format: projects/{project}/rollouts/{rollout}/stages/{stage}/tasks/{task}/taskRuns/{taskRun}
                reason:
                    type: string
        BatchCancelTaskRunsResponse:
            type: object
            properties: {}
        BatchCreateSheetRequest:
            required:
                - parent
                - requests
            type: object
            properties:
                parent:
                    type: string
                    description: |-
                        The parent resource where all sheets will be created.
                         Format: projects/{project}
                requests:
                    type: array
                    items:
                        $ref: '#/components/schemas/CreateSheetRequest'
        BatchCreateSheetResponse:
            type: object
            properties:
                sheets:
                    type: array
                    items:
                        $ref: '#/components/schemas/Sheet'
        BatchDeparseRequest:
            type: object
            properties:
                expressions:
                    type: array
                    items:
                        $ref: '#/components/schemas/Expr'
        BatchDeparseResponse:
            type: object
            properties:
                expressions:
                    type: array
                    items:
                        type: string
        BatchGetIamPolicyResponse:
            type: object
            properties:
                policyResults:
                    type: array
                    items:
                        $ref: '#/components/schemas/BatchGetIamPolicyResponse_PolicyResult'
        BatchGetIamPolicyResponse_PolicyResult:
            type: object
            properties:
                project:
                    type: string
                policy:
                    $ref: '#/components/schemas/IamPolicy'
        BatchParseRequest:
            type: object
            properties:
                expressions:
                    type: array
                    items:
                        type: string
        BatchParseResponse:
            type: object
            properties:
                expressions:
                    type: array
                    items:
                        $ref: '#/components/schemas/Expr'
        BatchRunTasksRequest:
            type: object
            properties:
                parent:
                    type: string
                    description: |-
                        The name of the parent of the tasks.
                         Format: projects/{project}/rollouts/{rollout}/stages/{stage}
                tasks:
                    type: array
                    items:
                        type: string
                    description: |-
                        The tasks to run.
                         Format: projects/{project}/rollouts/{rollout}/stages/{stage}/tasks/{task}
                reason:
                    type: string
        BatchRunTasksResponse:
            type: object
            properties: {}
        BatchSkipTasksRequest:
            type: object
            properties:
                parent:
                    type: string
                    description: |-
                        The name of the parent of the tasks.
                         Format: projects/{project}/rollouts/{rollout}/stages/{stage}
                tasks:
                    type: array
                    items:
                        type: string
                    description: |-
                        The tasks to skip.
                         Format: projects/{project}/rollouts/{rollout}/stages/{stage}/tasks/{task}
                reason:
                    type: string
        BatchSkipTasksResponse:
            type: object
            properties: {}
        BatchSyncInstancesRequest:
            required:
                - requests
            type: object
            properties:
                requests:
                    type: array
                    items:
                        $ref: '#/components/schemas/SyncInstanceRequest'
                    description: |-
                        The request message specifying the instances to sync.
                         A maximum of 1000 instances can be synced in a batch.
        BatchSyncInstancesResponse:
            type: object
            properties: {}
        BatchUpdateDatabasesRequest:
            required:
                - requests
            type: object
            properties:
                parent:
                    type: string
                    description: |-
                        The parent resource shared by all databases being updated.
                         Format: instances/{instance}
                         If the operation spans parents, a dash (-) may be accepted as a wildcard.
                         We only support updating the project of databases for now.
                requests:
                    type: array
                    items:
                        $ref: '#/components/schemas/UpdateDatabaseRequest'
                    description: |-
                        The request message specifying the resources to update.
                         A maximum of 1000 databases can be modified in a batch.
        BatchUpdateDatabasesResponse:
            type: object
            properties:
                databases:
                    type: array
                    items:
                        $ref: '#/components/schemas/Database'
                    description: Databases updated.
        BatchUpdateIssuesStatusRequest:
            required:
                - parent
            type: object
            properties:
                parent:
                    type: string
                    description: |-
                        The parent resource shared by all issues being updated.
                         Format: projects/{project}
                         If the operation spans parents, a dash (-) may be accepted as a wildcard.
                         We only support updating the status of databases for now.
                issues:
                    type: array
                    items:
                        type: string
                    description: |-
                        The list of issues to update.
                         Format: projects/{project}/issues/{issue}
                status:
                    enum:
                        - ISSUE_STATUS_UNSPECIFIED
                        - OPEN
                        - DONE
                        - CANCELED
                    type: string
                    description: The new status.
                    format: enum
                reason:
                    type: string
        BatchUpdateIssuesStatusResponse:
            type: object
            properties: {}
        Binding:
            type: object
            properties:
                role:
                    type: string
                    description: |-
                        The role that is assigned to the members.
                         Format: roles/{role}
                members:
                    type: array
                    items:
                        type: string
                    description: |-
                        Specifies the principals requesting access for a Bytebase resource.
                         For users, the member should be: user:{email}
                         For groups, the member should be: group:{email}
                condition:
                    allOf:
                        - $ref: '#/components/schemas/Expr'
                    description: |-
                        The condition that is associated with this binding.
                         If the condition evaluates to true, then this binding applies to the current request.
                         If the condition evaluates to false, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding.
                parsedExpr:
                    readOnly: true
                    allOf:
                        - $ref: '#/components/schemas/Expr'
                    description: The parsed expression of the condition.
        ChangeDatabaseConfig_PreUpdateBackupDetail:
            type: object
            properties:
                database:
                    type: string
                    description: |-
                        The database for keeping the backup data.
                         Format: instances/{instance}/databases/{database}
        ChangedResourceDatabase:
            type: object
            properties:
                name:
                    type: string
                schemas:
                    type: array
                    items:
                        $ref: '#/components/schemas/ChangedResourceSchema'
        ChangedResourceFunction:
            type: object
            properties:
                name:
                    type: string
                ranges:
                    type: array
                    items:
                        $ref: '#/components/schemas/Range'
                    description: The ranges of sub-strings correspond to the statements on the sheet.
        ChangedResourceProcedure:
            type: object
            properties:
                name:
                    type: string
                ranges:
                    type: array
                    items:
                        $ref: '#/components/schemas/Range'
                    description: The ranges of sub-strings correspond to the statements on the sheet.
        ChangedResourceSchema:
            type: object
            properties:
                name:
                    type: string
                tables:
                    type: array
                    items:
                        $ref: '#/components/schemas/ChangedResourceTable'
                views:
                    type: array
                    items:
                        $ref: '#/components/schemas/ChangedResourceView'
                functions:
                    type: array
                    items:
                        $ref: '#/components/schemas/ChangedResourceFunction'
                procedures:
                    type: array
                    items:
                        $ref: '#/components/schemas/ChangedResourceProcedure'
        ChangedResourceTable:
            type: object
            properties:
                name:
                    type: string
                tableRows:
                    type: string
                    description: estimated row count of the table
                ranges:
                    type: array
                    items:
                        $ref: '#/components/schemas/Range'
                    description: The ranges of sub-strings correspond to the statements on the sheet.
        ChangedResourceView:
            type: object
            properties:
                name:
                    type: string
                ranges:
                    type: array
                    items:
                        $ref: '#/components/schemas/Range'
                    description: The ranges of sub-strings correspond to the statements on the sheet.
        ChangedResources:
            type: object
            properties:
                databases:
                    type: array
                    items:
                        $ref: '#/components/schemas/ChangedResourceDatabase'
        Changelist:
            type: object
            properties:
                description:
                    type: string
                changes:
                    type: array
                    items:
                        $ref: '#/components/schemas/Changelist_Change'
        Changelist_Change:
            type: object
            properties:
                sheet:
                    type: string
                    description: The name of a sheet.
                source:
                    type: string
                    description: |-
                        The source of origin.
                         1) changelog: instances/{instance}/databases/{database}/changelogs/{changelog}.
                         2) raw SQL if empty.
                version:
                    type: string
                    description: The migration version for a change.
        Changelog:
            type: object
            properties:
                name:
                    type: string
                    description: 'Format: instances/{instance}/databases/{database}/changelogs/{changelog}'
                creator:
                    type: string
                    description: 'Format: users/hello@world.com'
                createTime:
                    type: string
                    format: date-time
                status:
                    enum:
                        - STATUS_UNSPECIFIED
                        - PENDING
                        - DONE
                        - FAILED
                    type: string
                    format: enum
                statement:
                    type: string
                    description: The statement is used for preview purpose.
                statementSize:
                    type: string
                statementSheet:
                    type: string
                    description: |-
                        The name of the sheet resource.
                         Format: projects/{project}/sheets/{sheet}
                schema:
                    type: string
                schemaSize:
                    type: string
                prevSchema:
                    type: string
                prevSchemaSize:
                    type: string
                issue:
                    type: string
                    description: 'Format: projects/{project}/issues/{issue}'
                taskRun:
                    type: string
                    description: 'Format: projects/{projects}/rollouts/{rollout}/stages/{stage}/tasks/{task}/taskRuns/{taskRun}'
                version:
                    type: string
                    description: Could be empty
                revision:
                    type: string
                    description: |-
                        Could be empty
                         Or present but not found if deleted
                changedResources:
                    $ref: '#/components/schemas/ChangedResources'
                type:
                    enum:
                        - TYPE_UNSPECIFIED
                        - BASELINE
                        - MIGRATE
                        - MIGRATE_SDL
                        - MIGRATE_GHOST
                        - DATA
                    type: string
                    format: enum
        CheckConstraintMetadata:
            type: object
            properties:
                name:
                    type: string
                    description: The name is the name of a check constraint.
                expression:
                    type: string
                    description: The expression is the expression of a check constraint.
            description: CheckConstraintMetadata is the metadata for check constraints.
        CheckReleaseRequest:
            required:
                - parent
                - release
            type: object
            properties:
                parent:
                    type: string
                    description: 'Format: projects/{project}'
                release:
                    allOf:
                        - $ref: '#/components/schemas/Release'
                    description: The release to check.
                targets:
                    type: array
                    items:
                        type: string
                    description: |-
                        The targets to dry-run the release.
                         Can be database or databaseGroup.
                         Format:
                         projects/{project}/databaseGroups/{databaseGroup}
                         instances/{instance}/databases/{database}
        CheckReleaseResponse:
            type: object
            properties:
                results:
                    type: array
                    items:
                        $ref: '#/components/schemas/CheckReleaseResponse_CheckResult'
        CheckReleaseResponse_CheckResult:
            type: object
            properties:
                file:
                    type: string
                    description: The file path that is being checked.
                advices:
                    type: array
                    items:
                        $ref: '#/components/schemas/Advice'
        CheckRequest:
            required:
                - name
            type: object
            properties:
                name:
                    type: string
                    description: |-
                        The database name to check against.
                         Format: instances/{instance}/databases/{database}
                statement:
                    type: string
                metadata:
                    allOf:
                        - $ref: '#/components/schemas/DatabaseMetadata'
                    description: |-
                        The database metadata to check against. It can be used to check against an
                         uncommitted metadata. If not provided, the database metadata will be
                         fetched from the database.
                changeType:
                    enum:
                        - CHANGE_TYPE_UNSPECIFIED
                        - DDL
                        - DDL_GHOST
                        - DML
                        - SQL_EDITOR
                    type: string
                    format: enum
        CheckResponse:
            type: object
            properties:
                advices:
                    type: array
                    items:
                        $ref: '#/components/schemas/Advice'
        ColumnCatalog:
            type: object
            properties:
                name:
                    type: string
                semanticType:
                    type: string
                labels:
                    type: object
                    additionalProperties:
                        type: string
                    description: The user labels for a column.
                classification:
                    type: string
                objectSchema:
                    $ref: '#/components/schemas/ObjectSchema'
        ColumnMetadata:
            type: object
            properties:
                name:
                    type: string
                    description: The name is the name of a column.
                position:
                    type: integer
                    description: The position is the position in columns.
                    format: int32
                hasDefault:
                    type: boolean
                defaultNull:
                    type: boolean
                defaultString:
                    type: string
                defaultExpression:
                    type: string
                onUpdate:
                    type: string
                    description: |-
                        The on_update is the on update action of a column.
                         For MySQL like databases, it's only supported for TIMESTAMP columns with
                         CURRENT_TIMESTAMP as on update value.
                nullable:
                    type: boolean
                    description: The nullable is the nullable of a column.
                type:
                    type: string
                    description: The type is the type of a column.
                characterSet:
                    type: string
                    description: The character_set is the character_set of a column.
                collation:
                    type: string
                    description: The collation is the collation of a column.
                comment:
                    type: string
                    description: |-
                        The comment is the comment of a column.
                         classification and user_comment is parsed from the comment.
                userComment:
                    type: string
                    description: The user_comment is the user comment of a column parsed from the comment.
                generation:
                    allOf:
                        - $ref: '#/components/schemas/GenerationMetadata'
                    description: The generation is the generation of a column.
            description: ColumnMetadata is the metadata for columns.
        CreateSheetRequest:
            required:
                - parent
                - sheet
            type: object
            properties:
                parent:
                    type: string
                    description: |-
                        The parent resource where this sheet will be created.
                         Format: projects/{project}
                sheet:
                    allOf:
                        - $ref: '#/components/schemas/Sheet'
                    description: The sheet to create.
        DataClassificationConfig_DataClassification:
            type: object
            properties:
                id:
                    type: string
                    description: id is the classification id in [0-9]+-[0-9]+-[0-9]+ format.
                title:
                    type: string
                description:
                    type: string
                levelId:
                    type: string
        DataClassificationConfig_Level:
            type: object
            properties:
                id:
                    type: string
                title:
                    type: string
                description:
                    type: string
        DataClassificationSetting:
            type: object
            properties:
                configs:
                    type: array
                    items:
                        $ref: '#/components/schemas/DataClassificationSetting_DataClassificationConfig'
        DataClassificationSetting_DataClassificationConfig:
            type: object
            properties:
                id:
                    type: string
                    description: |-
                        id is the uuid for classification. Each project can chose one
                         classification config.
                title:
                    type: string
                levels:
                    type: array
                    items:
                        $ref: '#/components/schemas/DataClassificationConfig_Level'
                    description: |-
                        levels is user defined level list for classification.
                         The order for the level decides its priority.
                classification:
                    type: object
                    additionalProperties:
                        $ref: '#/components/schemas/DataClassificationConfig_DataClassification'
                    description: |-
                        classification is the id - DataClassification map.
                         The id should in [0-9]+-[0-9]+-[0-9]+ format.
                classificationFromConfig:
                    type: boolean
                    description: |-
                        If true, we will only store the classification in the config.
                         Otherwise we will get the classification from table/column comment,
                         and write back to the schema metadata.
        DataSource:
            type: object
            properties:
                id:
                    type: string
                type:
                    enum:
                        - DATA_SOURCE_UNSPECIFIED
                        - ADMIN
                        - READ_ONLY
                    type: string
                    format: enum
                username:
                    type: string
                password:
                    writeOnly: true
                    type: string
                useSsl:
                    type: boolean
                    description: Use SSL to connect to the data source. By default, we use system default SSL configuration.
                sslCa:
                    writeOnly: true
                    type: string
                sslCert:
                    writeOnly: true
                    type: string
                sslKey:
                    writeOnly: true
                    type: string
                host:
                    type: string
                port:
                    type: string
                database:
                    type: string
                srv:
                    type: boolean
                    description: srv, authentication_database and replica_set are used for MongoDB.
                authenticationDatabase:
                    type: string
                sid:
                    type: string
                    description: sid and service_name are used for Oracle.
                serviceName:
                    type: string
                sshHost:
                    type: string
                    description: |-
                        Connection over SSH.
                         The hostname of the SSH server agent.
                         Required.
                sshPort:
                    type: string
                    description: |-
                        The port of the SSH server agent. It's 22 typically.
                         Required.
                sshUser:
                    type: string
                    description: |-
                        The user to login the server.
                         Required.
                sshPassword:
                    writeOnly: true
                    type: string
                    description: The password to login the server. If it's empty string, no password is required.
                sshPrivateKey:
                    writeOnly: true
                    type: string
                    description: The private key to login the server. If it's empty string, we will use the system default private key from os.Getenv("SSH_AUTH_SOCK").
                authenticationPrivateKey:
                    writeOnly: true
                    type: string
                    description: |-
                        PKCS#8 private key in PEM format. If it's empty string, no private key is required.
                         Used for authentication when connecting to the data source.
                externalSecret:
                    $ref: '#/components/schemas/DataSourceExternalSecret'
                authenticationType:
                    enum:
                        - AUTHENTICATION_UNSPECIFIED
                        - PASSWORD
                        - GOOGLE_CLOUD_SQL_IAM
                        - AWS_RDS_IAM
                    type: string
                    format: enum
                saslConfig:
                    $ref: '#/components/schemas/SASLConfig'
                additionalAddresses:
                    type: array
                    items:
                        $ref: '#/components/schemas/DataSource_Address'
                    description: additional_addresses is used for MongoDB replica set.
                replicaSet:
                    type: string
                    description: replica_set is used for MongoDB replica set.
                directConnection:
                    type: boolean
                    description: direct_connection is used for MongoDB to dispatch all the operations to the node specified in the connection string.
                region:
                    type: string
                    description: region is the location of where the DB is, works for AWS RDS. For example, us-east-1.
                warehouseId:
                    type: string
                    description: warehouse_id is used by Databricks.
                masterName:
                    type: string
                    description: master_name is the master name used by connecting redis-master via redis sentinel.
                masterUsername:
                    type: string
                    description: master_username and master_password are master credentials used by redis sentinel mode.
                masterPassword:
                    type: string
                redisType:
                    enum:
                        - REDIS_TYPE_UNSPECIFIED
                        - STANDALONE
                        - SENTINEL
                        - CLUSTER
                    type: string
                    format: enum
                cluster:
                    type: string
                    description: Cluster is the cluster name for the data source. Used by CockroachDB.
        DataSourceExternalSecret:
            type: object
            properties:
                secretType:
                    enum:
                        - SAECRET_TYPE_UNSPECIFIED
                        - VAULT_KV_V2
                        - AWS_SECRETS_MANAGER
                        - GCP_SECRET_MANAGER
                    type: string
                    format: enum
                url:
                    type: string
                authType:
                    enum:
                        - AUTH_TYPE_UNSPECIFIED
                        - TOKEN
                        - VAULT_APP_ROLE
                    type: string
                    format: enum
                appRole:
                    $ref: '#/components/schemas/DataSourceExternalSecret_AppRoleAuthOption'
                token:
                    type: string
                engineName:
                    type: string
                    description: engine name is the name for secret engine.
                secretName:
                    type: string
                    description: the secret name in the engine to store the password.
                passwordKeyName:
                    type: string
                    description: the key name for the password.
        DataSourceExternalSecret_AppRoleAuthOption:
            type: object
            properties:
                roleId:
                    writeOnly: true
                    type: string
                secretId:
                    writeOnly: true
                    type: string
                    description: the secret id for the role without ttl.
                type:
                    enum:
                        - SECRET_TYPE_UNSPECIFIED
                        - PLAIN
                        - ENVIRONMENT
                    type: string
                    format: enum
                mountPath:
                    type: string
                    description: The path where the approle auth method is mounted.
        DataSourceQueryPolicy:
            type: object
            properties:
                adminDataSourceRestriction:
                    enum:
                        - RESTRICTION_UNSPECIFIED
                        - FALLBACK
                        - DISALLOW
                    type: string
                    format: enum
                disallowDdl:
                    type: boolean
                    description: Disallow running DDL statements in the SQL editor.
                disallowDml:
                    type: boolean
                    description: Disallow running DML statements in the SQL editor.
            description: DataSourceQueryPolicy is the policy configuration for running statements in the SQL editor.
        DataSource_Address:
            type: object
            properties:
                host:
                    type: string
                port:
                    type: string
        Database:
            type: object
            properties:
                name:
                    type: string
                    description: |-
                        The name of the database.
                         Format: instances/{instance}/databases/{database}
                         {database} is the database name in the instance.
                syncState:
                    readOnly: true
                    enum:
                        - STATE_UNSPECIFIED
                        - ACTIVE
                        - DELETED
                    type: string
                    description: The existence of a database on latest sync.
                    format: enum
                successfulSyncTime:
                    readOnly: true
                    type: string
                    description: The latest synchronization time.
                    format: date-time
                project:
                    type: string
                    description: |-
                        The project for a database.
                         Format: projects/{project}
                schemaVersion:
                    readOnly: true
                    type: string
                    description: The version of database schema.
                environment:
                    type: string
                    description: |-
                        The environment resource.
                         Format: environments/prod where prod is the environment resource ID.
                effectiveEnvironment:
                    readOnly: true
                    type: string
                    description: |-
                        The effective environment based on environment tag above and environment
                         tag on the instance. Inheritance follows
                         https://cloud.google.com/resource-manager/docs/tags/tags-overview.
                labels:
                    type: object
                    additionalProperties:
                        type: string
                    description: Labels will be used for deployment and policy control.
                instanceResource:
                    readOnly: true
                    allOf:
                        - $ref: '#/components/schemas/InstanceResource'
                    description: The instance resource.
                backupAvailable:
                    readOnly: true
                    type: boolean
                    description: The database is available for DML prior backup.
        DatabaseCatalog:
            type: object
            properties:
                name:
                    type: string
                    description: |-
                        The name of the database catalog.
                         Format: instances/{instance}/databases/{database}/catalog
                schemas:
                    type: array
                    items:
                        $ref: '#/components/schemas/SchemaCatalog'
        DatabaseGroup:
            type: object
            properties:
                name:
                    type: string
                    description: |-
                        The name of the database group.
                         Format: projects/{project}/databaseGroups/{databaseGroup}
                databasePlaceholder:
                    type: string
                    description: |-
                        The short name used in actual databases specified by users.
                         For example, the placeholder for db1_2010, db1_2021, db1_2023 will be "db1".
                databaseExpr:
                    allOf:
                        - $ref: '#/components/schemas/Expr'
                    description: The condition that is associated with this database group.
                matchedDatabases:
                    readOnly: true
                    type: array
                    items:
                        $ref: '#/components/schemas/DatabaseGroup_Database'
                    description: The list of databases that match the database group condition.
                unmatchedDatabases:
                    readOnly: true
                    type: array
                    items:
                        $ref: '#/components/schemas/DatabaseGroup_Database'
                    description: The list of databases that match the database group condition.
                multitenancy:
                    type: boolean
        DatabaseGroup_Database:
            type: object
            properties:
                name:
                    type: string
                    description: |-
                        The resource name of the database.
                         Format: instances/{instance}/databases/{database}
        DatabaseMetadata:
            type: object
            properties:
                labels:
                    type: object
                    additionalProperties:
                        type: string
                lastSyncTime:
                    type: string
                    format: date-time
                backupAvailable:
                    type: boolean
            description: DatabaseMetadata is the metadata for databases.
        DatabaseSchema:
            type: object
            properties:
                schema:
                    type: string
                    description: The schema dump from database.
            description: DatabaseSchema is the metadata for databases.
        DeploymentConfig:
            type: object
            properties:
                schedule:
                    $ref: '#/components/schemas/Schedule'
        DeploymentSpec:
            type: object
            properties:
                selector:
                    $ref: '#/components/schemas/LabelSelector'
        DiffMetadataRequest:
            required:
                - sourceMetadata
                - targetMetadata
            type: object
            properties:
                sourceMetadata:
                    allOf:
                        - $ref: '#/components/schemas/DatabaseMetadata'
                    description: The metadata of the source schema.
                targetMetadata:
                    allOf:
                        - $ref: '#/components/schemas/DatabaseMetadata'
                    description: The metadata of the target schema.
                sourceCatalog:
                    $ref: '#/components/schemas/DatabaseCatalog'
                targetCatalog:
                    $ref: '#/components/schemas/DatabaseCatalog'
                engine:
                    enum:
                        - ENGINE_UNSPECIFIED
                        - CLICKHOUSE
                        - MYSQL
                        - POSTGRES
                        - SNOWFLAKE
                        - SQLITE
                        - TIDB
                        - MONGODB
                        - REDIS
                        - ORACLE
                        - SPANNER
                        - MSSQL
                        - REDSHIFT
                        - MARIADB
                        - OCEANBASE
                        - DM
                        - RISINGWAVE
                        - OCEANBASE_ORACLE
                        - STARROCKS
                        - DORIS
                        - HIVE
                        - ELASTICSEARCH
                        - BIGQUERY
                        - DYNAMODB
                        - DATABRICKS
                        - COCKROACHDB
                        - COSMOSDB
                    type: string
                    description: The database engine of the schema.
                    format: enum
                classificationFromConfig:
                    type: boolean
                    description: If false, we will build the raw common by classification in database config.
        DiffMetadataResponse:
            type: object
            properties:
                diff:
                    type: string
                    description: The diff of the metadata.
        DiffSchemaRequest:
            required:
                - name
            type: object
            properties:
                name:
                    type: string
                    description: |-
                        The name of the database or changelog.
                         Format:
                         database: instances/{instance}/databases/{database}
                         changelog: instances/{instance}/databases/{database}/changelogs/{changelog}
                schema:
                    type: string
                    description: The target schema.
                changelog:
                    type: string
                    description: |-
                        The resource name of the changelog
                         Format:
                         instances/{instance}/databases/{database}/changelogs/{changelog}
                sdlFormat:
                    type: boolean
                    description: Format the schema dump into SDL format.
        DiffSchemaResponse:
            type: object
            properties:
                diff:
                    type: string
        DisableCopyDataPolicy:
            type: object
            properties:
                active:
                    type: boolean
        Environment:
            type: object
            properties:
                name:
                    type: string
                    description: |-
                        The name of the environment.
                         Format: environments/{environment}
                state:
                    enum:
                        - STATE_UNSPECIFIED
                        - ACTIVE
                        - DELETED
                    type: string
                    format: enum
                title:
                    type: string
                order:
                    type: integer
                    format: int32
                tier:
                    enum:
                        - ENVIRONMENT_TIER_UNSPECIFIED
                        - PROTECTED
                        - UNPROTECTED
                    type: string
                    format: enum
                color:
                    type: string
        ExportAuditLogsRequest:
            required:
                - parent
            type: object
            properties:
                parent:
                    type: string
                filter:
                    type: string
                    description: |-
                        The filter of the log. It should be a valid CEL expression.
                         For example:
                          - filter = "method == '/bytebase.v1.SQLService/Query'"
                          - filter = "method == '/bytebase.v1.SQLService/Query' && severity == 'ERROR'"
                          - filter = "method == '/bytebase.v1.SQLService/Query' && severity == 'ERROR' && user == 'users/bb@bytebase.com'"
                          - filter = "method == '/bytebase.v1.SQLService/Query' && severity == 'ERROR' && create_time <= '2021-01-01T00:00:00Z' && create_time >= '2020-01-01T00:00:00Z'"
                orderBy:
                    type: string
                    description: |-
                        The order by of the log.
                         Only support order by create_time.
                         For example:
                          - order_by = "create_time asc"
                          - order_by = "create_time desc"
                format:
                    enum:
                        - FORMAT_UNSPECIFIED
                        - CSV
                        - JSON
                        - SQL
                        - XLSX
                    type: string
                    description: The export format.
                    format: enum
                pageSize:
                    type: integer
                    description: |-
                        The maximum number of logs to return.
                         The service may return fewer than this value.
                         If unspecified, at most 10 log entries will be returned.
                         The maximum value is 5000; values above 5000 will be coerced to 5000.
                    format: int32
                pageToken:
                    type: string
                    description: |-
                        A page token, received from a previous `ExportAuditLogs` call.
                         Provide this to retrieve the subsequent page.
        ExportAuditLogsResponse:
            type: object
            properties:
                content:
                    type: string
                    format: bytes
                nextPageToken:
                    type: string
                    description: |-
                        A token to retrieve next page of log entities.
                         Pass this value in the page_token field in the subsequent call
                         to retrieve the next page of log entities.
        ExportDataPolicy:
            type: object
            properties:
                disable:
                    type: boolean
        ExportRequest:
            required:
                - name
            type: object
            properties:
                name:
                    type: string
                    description: |-
                        The name is the instance name to execute the query against.
                         Format: instances/{instance}/databases/{databaseName}
                         Format: projects/{project}/issues/{issue} for data export issue.
                statement:
                    type: string
                    description: The SQL statement to execute.
                limit:
                    type: integer
                    description: The maximum number of rows to return.
                    format: int32
                format:
                    enum:
                        - FORMAT_UNSPECIFIED
                        - CSV
                        - JSON
                        - SQL
                        - XLSX
                    type: string
                    description: The export format.
                    format: enum
                admin:
                    type: boolean
                    description: |-
                        The admin is used for workspace owner and DBA for exporting data from SQL
                         Editor Admin mode. The exported data is not masked.
                password:
                    type: string
                    description: The zip password provide by users.
                dataSourceId:
                    type: string
                    description: |-
                        The id of data source.
                         It is used for querying admin data source even if the instance has
                         read-only data sources. Or it can be used to query a specific read-only
                         data source.
        ExportResponse:
            type: object
            properties:
                content:
                    type: string
                    description: The export file content.
                    format: bytes
        Expr:
            type: object
            properties:
                expression:
                    type: string
                    description: |-
                        Textual representation of an expression in Common Expression Language
                         syntax.
                title:
                    type: string
                    description: |-
                        Optional. Title for the expression, i.e. a short string describing
                         its purpose. This can be used e.g. in UIs which allow to enter the
                         expression.
                description:
                    type: string
                    description: |-
                        Optional. Description of the expression. This is a longer text which
                         describes the expression, e.g. when hovered over it in a UI.
                location:
                    type: string
                    description: |-
                        Optional. String indicating the location of the expression for error
                         reporting, e.g. a file name and a position in the file.
            description: |-
                Represents a textual expression in the Common Expression Language (CEL)
                 syntax. CEL is a C-like expression language. The syntax and semantics of CEL
                 are documented at https://github.com/google/cel-spec.

                 Example (Comparison):

                     title: "Summary size limit"
                     description: "Determines if a summary is less than 100 chars"
                     expression: "document.summary.size() < 100"

                 Example (Equality):

                     title: "Requestor is owner"
                     description: "Determines if requestor is the document owner"
                     expression: "document.owner == request.auth.claims.email"

                 Example (Logic):

                     title: "Public documents"
                     description: "Determine whether the document should be publicly visible"
                     expression: "document.type != 'private' && document.type != 'internal'"

                 Example (Data Manipulation):

                     title: "Notification string"
                     description: "Create a notification string with a timestamp."
                     expression: "'New message received at ' + string(document.create_time)"

                 The exact variables and functions that may be referenced within an expression
                 are determined by the service that evaluates it. See the service
                 documentation for additional information.
        ExternalApprovalSetting:
            type: object
            properties:
                nodes:
                    type: array
                    items:
                        $ref: '#/components/schemas/ExternalApprovalSetting_Node'
        ExternalApprovalSetting_Node:
            type: object
            properties:
                id:
                    type: string
                    description: |-
                        A unique identifier for a node in UUID format.
                         We will also include the id in the message sending to the external relay
                         service to identify the node.
                title:
                    type: string
                    description: The title of the node.
                endpoint:
                    type: string
                    description: The external endpoint for the relay service, e.g. "http://hello:1234".
        Feature:
            type: object
            properties:
                name:
                    type: string
                    description: Name is the feature name.
                matrix:
                    type: object
                    additionalProperties:
                        type: boolean
                    description: Matrix is the feature matrix for different plan. The key is the plan enum in string value.
        FeatureMatrix:
            type: object
            properties:
                features:
                    type: array
                    items:
                        $ref: '#/components/schemas/Feature'
        FieldMapping:
            type: object
            properties:
                identifier:
                    type: string
                    description: Identifier is the field name of the unique identifier in 3rd-party idp user info. Required.
                displayName:
                    type: string
                    description: DisplayName is the field name of display name in 3rd-party idp user info.
                email:
                    type: string
                    description: Email is the field name of primary email in 3rd-party idp user info.
                phone:
                    type: string
                    description: Phone is the field name of primary phone in 3rd-party idp user info.
            description: |-
                FieldMapping saves the field names from user info API of identity provider.
                 As we save all raw json string of user info response data into `principal.idp_user_info`,
                 we can extract the relevant data based with `FieldMapping`.

                 e.g. For GitHub authenticated user API, it will return `login`, `name` and `email` in response.
                 Then the identifier of FieldMapping will be `login`, display_name will be `name`,
                 and email will be `email`.
                 reference: https://docs.github.com/en/rest/users/users?apiVersion=2022-11-28#get-the-authenticated-user
        ForeignKeyMetadata:
            type: object
            properties:
                name:
                    type: string
                    description: The name is the name of a foreign key.
                columns:
                    type: array
                    items:
                        type: string
                    description: The columns are the ordered referencing columns of a foreign key.
                referencedSchema:
                    type: string
                    description: |-
                        The referenced_schema is the referenced schema name of a foreign key.
                         It is an empty string for databases without such concept such as MySQL.
                referencedTable:
                    type: string
                    description: The referenced_table is the referenced table name of a foreign key.
                referencedColumns:
                    type: array
                    items:
                        type: string
                    description: The referenced_columns are the ordered referenced columns of a foreign key.
                onDelete:
                    type: string
                    description: The on_delete is the on delete action of a foreign key.
                onUpdate:
                    type: string
                    description: The on_update is the on update action of a foreign key.
                matchType:
                    type: string
                    description: |-
                        The match_type is the match type of a foreign key.
                         The match_type is the PostgreSQL specific field.
                         It's empty string for other databases.
            description: ForeignKeyMetadata is the metadata for foreign keys.
        GenerationMetadata:
            type: object
            properties:
                type:
                    enum:
                        - TYPE_UNSPECIFIED
                        - TYPE_VIRTUAL
                        - TYPE_STORED
                    type: string
                    format: enum
                expression:
                    type: string
        GoogleProtobufAny:
            type: object
            properties:
                '@type':
                    type: string
                    description: The type of the serialized message.
            additionalProperties: true
            description: Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
        GoogleProtobufValue:
            description: Represents a dynamically typed value which can be either null, a number, a string, a boolean, a recursive struct value, or a list of values.
        GrantRequest:
            type: object
            properties:
                role:
                    type: string
                    description: |-
                        The requested role.
                         Format: roles/EXPORTER.
                user:
                    type: string
                    description: |-
                        The user to be granted.
                         Format: users/{email}.
                condition:
                    $ref: '#/components/schemas/Expr'
                expiration:
                    pattern: ^-?(?:0|[1-9][0-9]{0,11})(?:\.[0-9]{1,9})?s$
                    type: string
        Group:
            type: object
            properties:
                name:
                    readOnly: true
                    type: string
                    description: |-
                        The name of the group to retrieve.
                         Format: groups/{group}, group is an email.
                title:
                    type: string
                description:
                    type: string
                creator:
                    readOnly: true
                    type: string
                    description: |-
                        The name for the creator.
                         Format: users/hello@world.com
                members:
                    type: array
                    items:
                        $ref: '#/components/schemas/GroupMember'
                createTime:
                    readOnly: true
                    type: string
                    description: The timestamp when the group was created.
                    format: date-time
                source:
                    type: string
                    description: source means where the group comes from. For now we support Entra ID SCIM sync, so the source could be Entra ID.
        GroupMember:
            type: object
            properties:
                member:
                    type: string
                    description: |-
                        Member is the principal who belong to this group.

                         Format: users/{userUID}.
                role:
                    enum:
                        - ROLE_UNSPECIFIED
                        - OWNER
                        - MEMBER
                    type: string
                    format: enum
        IamPolicy:
            type: object
            properties:
                bindings:
                    type: array
                    items:
                        $ref: '#/components/schemas/Binding'
                    description: |-
                        Collection of binding.
                         A binding binds one or more members or groups to a single role.
        IdentityProvider:
            type: object
            properties:
                name:
                    type: string
                    description: |-
                        The name of the identity provider.
                         Format: idps/{idp}
                state:
                    enum:
                        - STATE_UNSPECIFIED
                        - ACTIVE
                        - DELETED
                    type: string
                    format: enum
                title:
                    type: string
                domain:
                    type: string
                type:
                    enum:
                        - IDENTITY_PROVIDER_TYPE_UNSPECIFIED
                        - OAUTH2
                        - OIDC
                        - LDAP
                    type: string
                    format: enum
                config:
                    $ref: '#/components/schemas/IdentityProviderConfig'
        IdentityProviderConfig:
            type: object
            properties:
                oauth2Config:
                    $ref: '#/components/schemas/OAuth2IdentityProviderConfig'
                oidcConfig:
                    $ref: '#/components/schemas/OIDCIdentityProviderConfig'
                ldapConfig:
                    $ref: '#/components/schemas/LDAPIdentityProviderConfig'
        IdentityProviderContext:
            type: object
            properties:
                oauth2Context:
                    $ref: '#/components/schemas/OAuth2IdentityProviderContext'
                oidcContext:
                    $ref: '#/components/schemas/OIDCIdentityProviderContext'
        IndexMetadata:
            type: object
            properties:
                name:
                    type: string
                    description: The name is the name of an index.
                expressions:
                    type: array
                    items:
                        type: string
                    description: |-
                        The expressions are the ordered columns or expressions of an index.
                         This could refer to a column or an expression.
                keyLength:
                    type: array
                    items:
                        type: string
                    description: |-
                        The key_lengths are the ordered key lengths of an index.
                         If the key length is not specified, it's -1.
                descending:
                    type: array
                    items:
                        type: boolean
                    description: The descending is the ordered descending of an index.
                type:
                    type: string
                    description: The type is the type of an index.
                unique:
                    type: boolean
                    description: The unique is whether the index is unique.
                primary:
                    type: boolean
                    description: The primary is whether the index is a primary key index.
                visible:
                    type: boolean
                    description: The visible is whether the index is visible.
                comment:
                    type: string
                    description: The comment is the comment of an index.
                definition:
                    type: string
                    description: The definition of an index.
                parentIndexSchema:
                    type: string
                    description: The schema name of the parent index.
                parentIndexName:
                    type: string
                    description: The index name of the parent index.
                granularity:
                    type: string
                    description: The number of granules in the block. It's a ClickHouse specific field.
                isConstraint:
                    type: boolean
                    description: |-
                        It's a PostgreSQL specific field.
                         The unique constraint and unique index are not the same thing in PostgreSQL.
            description: IndexMetadata is the metadata for indexes.
        Instance:
            type: object
            properties:
                name:
                    type: string
                    description: |-
                        The name of the instance.
                         Format: instances/{instance}
                state:
                    enum:
                        - STATE_UNSPECIFIED
                        - ACTIVE
                        - DELETED
                    type: string
                    format: enum
                title:
                    type: string
                engine:
                    enum:
                        - ENGINE_UNSPECIFIED
                        - CLICKHOUSE
                        - MYSQL
                        - POSTGRES
                        - SNOWFLAKE
                        - SQLITE
                        - TIDB
                        - MONGODB
                        - REDIS
                        - ORACLE
                        - SPANNER
                        - MSSQL
                        - REDSHIFT
                        - MARIADB
                        - OCEANBASE
                        - DM
                        - RISINGWAVE
                        - OCEANBASE_ORACLE
                        - STARROCKS
                        - DORIS
                        - HIVE
                        - ELASTICSEARCH
                        - BIGQUERY
                        - DYNAMODB
                        - DATABRICKS
                        - COCKROACHDB
                        - COSMOSDB
                    type: string
                    format: enum
                engineVersion:
                    readOnly: true
                    type: string
                externalLink:
                    type: string
                dataSources:
                    type: array
                    items:
                        $ref: '#/components/schemas/DataSource'
                environment:
                    type: string
                    description: |-
                        The environment resource.
                         Format: environments/prod where prod is the environment resource ID.
                activation:
                    type: boolean
                options:
                    $ref: '#/components/schemas/InstanceOptions'
                roles:
                    readOnly: true
                    type: array
                    items:
                        $ref: '#/components/schemas/InstanceRole'
        InstanceOptions:
            type: object
            properties:
                syncInterval:
                    pattern: ^-?(?:0|[1-9][0-9]{0,11})(?:\.[0-9]{1,9})?s$
                    type: string
                    description: How often the instance is synced.
                maximumConnections:
                    type: integer
                    description: |-
                        The maximum number of connections.
                         The default is 10 if the value is unset or zero.
                    format: int32
                syncDatabases:
                    type: array
                    items:
                        type: string
                    description: |-
                        Enable sync for following databases.
                         Default empty, means sync all schemas & databases.
            description: InstanceOptions is the option for instances.
        InstanceResource:
            type: object
            properties:
                title:
                    type: string
                engine:
                    enum:
                        - ENGINE_UNSPECIFIED
                        - CLICKHOUSE
                        - MYSQL
                        - POSTGRES
                        - SNOWFLAKE
                        - SQLITE
                        - TIDB
                        - MONGODB
                        - REDIS
                        - ORACLE
                        - SPANNER
                        - MSSQL
                        - REDSHIFT
                        - MARIADB
                        - OCEANBASE
                        - DM
                        - RISINGWAVE
                        - OCEANBASE_ORACLE
                        - STARROCKS
                        - DORIS
                        - HIVE
                        - ELASTICSEARCH
                        - BIGQUERY
                        - DYNAMODB
                        - DATABRICKS
                        - COCKROACHDB
                        - COSMOSDB
                    type: string
                    format: enum
                engineVersion:
                    readOnly: true
                    type: string
                dataSources:
                    type: array
                    items:
                        $ref: '#/components/schemas/DataSource'
                activation:
                    type: boolean
                name:
                    type: string
                    description: |-
                        The name of the instance.
                         Format: instances/{instance}
                environment:
                    type: string
                    description: |-
                        The environment resource.
                         Format: environments/prod where prod is the environment resource ID.
        InstanceRole:
            type: object
            properties:
                name:
                    type: string
                    description: The role name.
                connectionLimit:
                    type: integer
                    description: The connection count limit for this role.
                    format: int32
                validUntil:
                    type: string
                    description: The expiration for the role's password.
                attribute:
                    type: string
                    description: |-
                        The role attribute.
                         For PostgreSQL, it containt super_user, no_inherit, create_role, create_db, can_login, replication and bypass_rls. Docs: https://www.postgresql.org/docs/current/role-attributes.html
                         For MySQL, it's the global privileges as GRANT statements, which means it only contains "GRANT ... ON *.* TO ...". Docs: https://dev.mysql.com/doc/refman/8.0/en/grant.html
            description: InstanceRole is the API message for instance role.
        Issue:
            type: object
            properties:
                name:
                    type: string
                    description: |-
                        The name of the issue.
                         Format: projects/{project}/issues/{issue}
                title:
                    type: string
                description:
                    type: string
                type:
                    enum:
                        - TYPE_UNSPECIFIED
                        - DATABASE_CHANGE
                        - GRANT_REQUEST
                        - DATABASE_DATA_EXPORT
                    type: string
                    format: enum
                status:
                    enum:
                        - ISSUE_STATUS_UNSPECIFIED
                        - OPEN
                        - DONE
                        - CANCELED
                    type: string
                    format: enum
                approvers:
                    type: array
                    items:
                        $ref: '#/components/schemas/Issue_Approver'
                approvalTemplates:
                    type: array
                    items:
                        $ref: '#/components/schemas/ApprovalTemplate'
                approvalFindingDone:
                    type: boolean
                    description: |-
                        If the value is `false`, it means that the backend is still finding matching approval templates.
                         If `true`, approval_templates & approvers & approval_finding_error are available.
                approvalFindingError:
                    type: string
                subscribers:
                    type: array
                    items:
                        type: string
                    description: |-
                        The subscribers.
                         Format: users/hello@world.com
                creator:
                    readOnly: true
                    type: string
                    description: 'Format: users/hello@world.com'
                createTime:
                    readOnly: true
                    type: string
                    format: date-time
                updateTime:
                    readOnly: true
                    type: string
                    format: date-time
                plan:
                    type: string
                    description: |-
                        The plan associated with the issue.
                         Can be empty.
                         Format: projects/{project}/plans/{plan}
                rollout:
                    type: string
                    description: |-
                        The rollout associated with the issue.
                         Can be empty.
                         Format: projects/{project}/rollouts/{rollout}
                grantRequest:
                    allOf:
                        - $ref: '#/components/schemas/GrantRequest'
                    description: Used if the issue type is GRANT_REQUEST.
                releasers:
                    type: array
                    items:
                        type: string
                    description: |-
                        The releasers of the pending stage of the issue rollout, judging
                         from the rollout policy.
                         If the policy is auto rollout, the releasers are the project owners and the issue creator.
                         Format:
                         - roles/workspaceOwner
                         - roles/workspaceDBA
                         - roles/projectOwner
                         - roles/projectReleaser
                         - users/{email}
                riskLevel:
                    enum:
                        - RISK_LEVEL_UNSPECIFIED
                        - LOW
                        - MODERATE
                        - HIGH
                    type: string
                    format: enum
                taskStatusCount:
                    type: object
                    additionalProperties:
                        type: integer
                        format: int32
                    description: |-
                        The status count of the issue.
                         Keys are the following:
                         - NOT_STARTED
                         - SKIPPED
                         - PENDING
                         - RUNNING
                         - DONE
                         - FAILED
                         - CANCELED
                labels:
                    type: array
                    items:
                        type: string
        IssueComment:
            type: object
            properties:
                name:
                    type: string
                    description: 'Format: projects/{project}/issues/{issue}/issueComments/{issueComment-uid}'
                comment:
                    type: string
                payload:
                    type: string
                    description: 'TODO: use struct message instead.'
                createTime:
                    readOnly: true
                    type: string
                    format: date-time
                updateTime:
                    readOnly: true
                    type: string
                    format: date-time
                creator:
                    type: string
                    description: 'Format: users/{email}'
                approval:
                    $ref: '#/components/schemas/IssueComment_Approval'
                issueUpdate:
                    $ref: '#/components/schemas/IssueComment_IssueUpdate'
                stageEnd:
                    $ref: '#/components/schemas/IssueComment_StageEnd'
                taskUpdate:
                    $ref: '#/components/schemas/IssueComment_TaskUpdate'
                taskPriorBackup:
                    $ref: '#/components/schemas/IssueComment_TaskPriorBackup'
        IssueComment_Approval:
            type: object
            properties:
                status:
                    enum:
                        - STATUS_UNSPECIFIED
                        - PENDING
                        - APPROVED
                        - REJECTED
                    type: string
                    format: enum
        IssueComment_IssueUpdate:
            type: object
            properties:
                fromTitle:
                    type: string
                toTitle:
                    type: string
                fromDescription:
                    type: string
                toDescription:
                    type: string
                fromStatus:
                    enum:
                        - ISSUE_STATUS_UNSPECIFIED
                        - OPEN
                        - DONE
                        - CANCELED
                    type: string
                    format: enum
                toStatus:
                    enum:
                        - ISSUE_STATUS_UNSPECIFIED
                        - OPEN
                        - DONE
                        - CANCELED
                    type: string
                    format: enum
                fromLabels:
                    type: array
                    items:
                        type: string
                toLabels:
                    type: array
                    items:
                        type: string
        IssueComment_StageEnd:
            type: object
            properties:
                stage:
                    type: string
        IssueComment_TaskPriorBackup:
            type: object
            properties:
                task:
                    type: string
                tables:
                    type: array
                    items:
                        $ref: '#/components/schemas/TaskPriorBackup_Table'
                originalLine:
                    type: integer
                    format: int32
                database:
                    type: string
                error:
                    type: string
        IssueComment_TaskUpdate:
            type: object
            properties:
                tasks:
                    type: array
                    items:
                        type: string
                fromSheet:
                    type: string
                    description: 'Format: projects/{project}/sheets/{sheet}'
                toSheet:
                    type: string
                    description: 'Format: projects/{project}/sheets/{sheet}'
                fromEarliestAllowedTime:
                    type: string
                    format: date-time
                toEarliestAllowedTime:
                    type: string
                    format: date-time
                toStatus:
                    enum:
                        - STATUS_UNSPECIFIED
                        - PENDING
                        - RUNNING
                        - DONE
                        - FAILED
                        - SKIPPED
                        - CANCELED
                    type: string
                    format: enum
        Issue_Approver:
            type: object
            properties:
                status:
                    enum:
                        - STATUS_UNSPECIFIED
                        - PENDING
                        - APPROVED
                        - REJECTED
                    type: string
                    description: The new status.
                    format: enum
                principal:
                    type: string
                    description: 'Format: users/hello@world.com'
        Item_Table:
            type: object
            properties:
                database:
                    type: string
                    description: |-
                        The database information.
                         Format: instances/{instance}/databases/{database}
                schema:
                    type: string
                table:
                    type: string
        KerberosConfig:
            type: object
            properties:
                primary:
                    type: string
                instance:
                    type: string
                realm:
                    type: string
                keytab:
                    type: string
                    format: bytes
                kdcHost:
                    type: string
                kdcPort:
                    type: string
                kdcTransportProtocol:
                    type: string
        LDAPIdentityProviderConfig:
            type: object
            properties:
                host:
                    type: string
                    description: |-
                        Host is the hostname or IP address of the LDAP server, e.g.
                         "ldap.example.com".
                port:
                    type: integer
                    description: |-
                        Port is the port number of the LDAP server, e.g. 389. When not set, the
                         default port of the corresponding security protocol will be used, i.e. 389
                         for StartTLS and 636 for LDAPS.
                    format: int32
                skipTlsVerify:
                    type: boolean
                    description: SkipTLSVerify controls whether to skip TLS certificate verification.
                bindDn:
                    type: string
                    description: |-
                        BindDN is the DN of the user to bind as a service account to perform
                         search requests.
                bindPassword:
                    type: string
                    description: BindPassword is the password of the user to bind as a service account.
                baseDn:
                    type: string
                    description: BaseDN is the base DN to search for users, e.g. "ou=users,dc=example,dc=com".
                userFilter:
                    type: string
                    description: UserFilter is the filter to search for users, e.g. "(uid=%s)".
                securityProtocol:
                    type: string
                    description: |-
                        SecurityProtocol is the security protocol to be used for establishing
                         connections with the LDAP server. It should be either StartTLS or LDAPS, and
                         cannot be empty.
                fieldMapping:
                    allOf:
                        - $ref: '#/components/schemas/FieldMapping'
                    description: |-
                        FieldMapping is the mapping of the user attributes returned by the LDAP
                         server.
            description: LDAPIdentityProviderConfig is the structure for LDAP identity provider config.
        Label:
            type: object
            properties:
                value:
                    type: string
                color:
                    type: string
                group:
                    type: string
        LabelSelector:
            type: object
            properties:
                matchExpressions:
                    type: array
                    items:
                        $ref: '#/components/schemas/LabelSelectorRequirement'
                    description: match_expressions is a list of label selector requirements. The requirements are ANDed.
        LabelSelectorRequirement:
            type: object
            properties:
                key:
                    type: string
                operator:
                    enum:
                        - OPERATOR_TYPE_UNSPECIFIED
                        - IN
                        - EXISTS
                        - NOT_IN
                    type: string
                    format: enum
                values:
                    type: array
                    items:
                        type: string
                    description: Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        ListChangelistsResponse:
            type: object
            properties:
                changelists:
                    type: array
                    items:
                        $ref: '#/components/schemas/Changelist'
                    description: The changelists from the specified request.
                nextPageToken:
                    type: string
                    description: |-
                        A token, which can be sent as `page_token` to retrieve the next page.
                         If this field is omitted, there are no subsequent pages.
        ListChangelogsResponse:
            type: object
            properties:
                changelogs:
                    type: array
                    items:
                        $ref: '#/components/schemas/Changelog'
                    description: The list of changelogs.
                nextPageToken:
                    type: string
                    description: |-
                        A token, which can be sent as `page_token` to retrieve the next page.
                         If this field is omitted, there are no subsequent pages.
        ListDatabaseGroupsResponse:
            type: object
            properties:
                databaseGroups:
                    type: array
                    items:
                        $ref: '#/components/schemas/DatabaseGroup'
                    description: database_groups is the list of database groups.
                nextPageToken:
                    type: string
                    description: |-
                        Not used. A token, which can be sent as `page_token` to retrieve the next page.
                         If this field is omitted, there are no subsequent pages.
        ListDatabasesResponse:
            type: object
            properties:
                databases:
                    type: array
                    items:
                        $ref: '#/components/schemas/Database'
                    description: The databases from the specified request.
                nextPageToken:
                    type: string
                    description: |-
                        A token, which can be sent as `page_token` to retrieve the next page.
                         If this field is omitted, there are no subsequent pages.
        ListEnvironmentsResponse:
            type: object
            properties:
                environments:
                    type: array
                    items:
                        $ref: '#/components/schemas/Environment'
                    description: The environments from the specified request.
                nextPageToken:
                    type: string
                    description: |-
                        A token, which can be sent as `page_token` to retrieve the next page.
                         If this field is omitted, there are no subsequent pages.
        ListGroupsResponse:
            type: object
            properties:
                groups:
                    type: array
                    items:
                        $ref: '#/components/schemas/Group'
                    description: The groups from the specified request.
                nextPageToken:
                    type: string
                    description: |-
                        A token, which can be sent as `page_token` to retrieve the next page.
                         If this field is omitted, there are no subsequent pages.
        ListIdentityProvidersResponse:
            type: object
            properties:
                identityProviders:
                    type: array
                    items:
                        $ref: '#/components/schemas/IdentityProvider'
                    description: The identity providers from the specified request.
                nextPageToken:
                    type: string
                    description: |-
                        A token, which can be sent as `page_token` to retrieve the next page.
                         If this field is omitted, there are no subsequent pages.
        ListInstanceDatabaseRequest:
            required:
                - name
                - instance
            type: object
            properties:
                name:
                    type: string
                    description: |-
                        The name of the instance.
                         Format: instances/{instance}
                instance:
                    allOf:
                        - $ref: '#/components/schemas/Instance'
                    description: The target instance. We need to set this field if the target instance is not created yet.
        ListInstanceDatabaseResponse:
            type: object
            properties:
                databases:
                    type: array
                    items:
                        type: string
                    description: All database name list in the instance.
        ListInstanceDatabasesResponse:
            type: object
            properties:
                databases:
                    type: array
                    items:
                        $ref: '#/components/schemas/Database'
                    description: The databases from the specified request.
                nextPageToken:
                    type: string
                    description: |-
                        A token, which can be sent as `page_token` to retrieve the next page.
                         If this field is omitted, there are no subsequent pages.
        ListInstanceRolesResponse:
            type: object
            properties:
                roles:
                    type: array
                    items:
                        $ref: '#/components/schemas/InstanceRole'
                    description: The roles from the specified request.
                nextPageToken:
                    type: string
                    description: |-
                        A token, which can be sent as `page_token` to retrieve the next page.
                         If this field is omitted, there are no subsequent pages.
        ListInstancesResponse:
            type: object
            properties:
                instances:
                    type: array
                    items:
                        $ref: '#/components/schemas/Instance'
                    description: The instances from the specified request.
                nextPageToken:
                    type: string
                    description: |-
                        A token, which can be sent as `page_token` to retrieve the next page.
                         If this field is omitted, there are no subsequent pages.
        ListIssueCommentsResponse:
            type: object
            properties:
                issueComments:
                    type: array
                    items:
                        $ref: '#/components/schemas/IssueComment'
                nextPageToken:
                    type: string
                    description: |-
                        A token, which can be sent as `page_token` to retrieve the next page.
                         If this field is omitted, there are no subsequent pages.
        ListIssuesResponse:
            type: object
            properties:
                issues:
                    type: array
                    items:
                        $ref: '#/components/schemas/Issue'
                    description: The issues from the specified request.
                nextPageToken:
                    type: string
                    description: |-
                        A token, which can be sent as `page_token` to retrieve the next page.
                         If this field is omitted, there are no subsequent pages.
        ListPlanCheckRunsResponse:
            type: object
            properties:
                planCheckRuns:
                    type: array
                    items:
                        $ref: '#/components/schemas/PlanCheckRun'
                    description: The plan check runs from the specified request.
                nextPageToken:
                    type: string
                    description: |-
                        A token, which can be sent as `page_token` to retrieve the next page.
                         If this field is omitted, there are no subsequent pages.
        ListPlansResponse:
            type: object
            properties:
                plans:
                    type: array
                    items:
                        $ref: '#/components/schemas/Plan'
                    description: The plans from the specified request.
                nextPageToken:
                    type: string
                    description: |-
                        A token, which can be sent as `page_token` to retrieve the next page.
                         If this field is omitted, there are no subsequent pages.
        ListPoliciesResponse:
            type: object
            properties:
                policies:
                    type: array
                    items:
                        $ref: '#/components/schemas/Policy'
                    description: The policies from the specified request.
                nextPageToken:
                    type: string
                    description: |-
                        A token, which can be sent as `page_token` to retrieve the next page.
                         If this field is omitted, there are no subsequent pages.
        ListProjectsResponse:
            type: object
            properties:
                projects:
                    type: array
                    items:
                        $ref: '#/components/schemas/Project'
                    description: The projects from the specified request.
                nextPageToken:
                    type: string
                    description: |-
                        A token, which can be sent as `page_token` to retrieve the next page.
                         If this field is omitted, there are no subsequent pages.
        ListReleasesResponse:
            type: object
            properties:
                releases:
                    type: array
                    items:
                        $ref: '#/components/schemas/Release'
                nextPageToken:
                    type: string
                    description: |-
                        A token, which can be sent as `page_token` to retrieve the next page.
                         If this field is omitted, there are no subsequent pages.
        ListReviewConfigsResponse:
            type: object
            properties:
                reviewConfigs:
                    type: array
                    items:
                        $ref: '#/components/schemas/ReviewConfig'
                    description: The sql review from the specified request.
                nextPageToken:
                    type: string
                    description: |-
                        A token, which can be sent as `page_token` to retrieve the next page.
                         If this field is omitted, there are no subsequent pages.
        ListRevisionsResponse:
            type: object
            properties:
                revisions:
                    type: array
                    items:
                        $ref: '#/components/schemas/Revision'
                nextPageToken:
                    type: string
                    description: |-
                        A token, which can be sent as `page_token` to retrieve the next page.
                         If this field is omitted, there are no subsequent pages.
        ListRisksResponse:
            type: object
            properties:
                risks:
                    type: array
                    items:
                        $ref: '#/components/schemas/Risk'
                nextPageToken:
                    type: string
                    description: |-
                        A token, which can be sent as `page_token` to retrieve the next page.
                         If this field is omitted, there are no subsequent pages.
        ListRolesResponse:
            type: object
            properties:
                roles:
                    type: array
                    items:
                        $ref: '#/components/schemas/Role'
                nextPageToken:
                    type: string
                    description: |-
                        A token, which can be sent as `page_token` to retrieve the next page.
                         If this field is omitted, there are no subsequent pages.
        ListRolloutsResponse:
            type: object
            properties:
                rollouts:
                    type: array
                    items:
                        $ref: '#/components/schemas/Rollout'
                    description: The rollouts from the specified request.
                nextPageToken:
                    type: string
                    description: |-
                        A token, which can be sent as `page_token` to retrieve the next page.
                         If this field is omitted, there are no subsequent pages.
        ListSecretsResponse:
            type: object
            properties:
                secrets:
                    type: array
                    items:
                        $ref: '#/components/schemas/Secret'
                    description: The list of secrets.
                nextPageToken:
                    type: string
                    description: |-
                        Not used. A token, which can be sent as `page_token` to retrieve the next
                         page. If this field is omitted, there are no subsequent pages.
        ListSettingsResponse:
            type: object
            properties:
                settings:
                    type: array
                    items:
                        $ref: '#/components/schemas/Setting'
                    description: The settings from the specified request.
                nextPageToken:
                    type: string
                    description: |-
                        A token, which can be sent as `page_token` to retrieve the next page.
                         If this field is omitted, there are no subsequent pages.
        ListSlowQueriesResponse:
            type: object
            properties:
                slowQueryLogs:
                    type: array
                    items:
                        $ref: '#/components/schemas/SlowQueryLog'
                    description: The slow query logs.
            description: ListSlowQueriesResponse is the response of listing slow query.
        ListTaskRunsResponse:
            type: object
            properties:
                taskRuns:
                    type: array
                    items:
                        $ref: '#/components/schemas/TaskRun'
                    description: The taskRuns from the specified request.
                nextPageToken:
                    type: string
                    description: |-
                        A token, which can be sent as `page_token` to retrieve the next page.
                         If this field is omitted, there are no subsequent pages.
        ListUsersResponse:
            type: object
            properties:
                users:
                    type: array
                    items:
                        $ref: '#/components/schemas/User'
                    description: The users from the specified request.
                nextPageToken:
                    type: string
                    description: |-
                        A token, which can be sent as `page_token` to retrieve the next page.
                         If this field is omitted, there are no subsequent pages.
        ListVCSConnectorsInProviderResponse:
            type: object
            properties:
                vcsConnectors:
                    type: array
                    items:
                        $ref: '#/components/schemas/VCSConnector'
                    description: The vcsConnectors from the specified request.
        ListVCSConnectorsResponse:
            type: object
            properties:
                vcsConnectors:
                    type: array
                    items:
                        $ref: '#/components/schemas/VCSConnector'
                    description: The vcsConnectors from the specified request.
                nextPageToken:
                    type: string
                    description: |-
                        A token, which can be sent as `page_token` to retrieve the next page.
                         If this field is omitted, there are no subsequent pages.
        ListVCSProvidersResponse:
            type: object
            properties:
                vcsProviders:
                    type: array
                    items:
                        $ref: '#/components/schemas/VCSProvider'
                    description: The list of vcs providers.
                nextPageToken:
                    type: string
                    description: |-
                        Not used. A token, which can be sent as `page_token` to retrieve the next page.
                         If this field is omitted, there are no subsequent pages.
        LoginRequest:
            type: object
            properties:
                email:
                    type: string
                password:
                    type: string
                web:
                    type: boolean
                    description: If web is set, we will set access token, refresh token, and user to the cookie.
                idpName:
                    type: string
                    description: |-
                        The name of the identity provider.
                         Format: idps/{idp}
                idpContext:
                    allOf:
                        - $ref: '#/components/schemas/IdentityProviderContext'
                    description: The idp_context is using to get the user information from identity provider.
                otpCode:
                    type: string
                    description: The otp_code is used to verify the user's identity by MFA.
                recoveryCode:
                    type: string
                    description: The recovery_code is used to recovery the user's identity with MFA.
                mfaTempToken:
                    type: string
                    description: The mfa_temp_token is used to verify the user's identity by MFA.
        LoginResponse:
            type: object
            properties:
                token:
                    type: string
                mfaTempToken:
                    type: string
                requireResetPassword:
                    type: boolean
                user:
                    allOf:
                        - $ref: '#/components/schemas/User'
                    description: The user of successful login.
        LogoutRequest:
            type: object
            properties: {}
        MaskingExceptionPolicy:
            type: object
            properties:
                maskingExceptions:
                    type: array
                    items:
                        $ref: '#/components/schemas/MaskingExceptionPolicy_MaskingException'
            description: MaskingExceptionPolicy is the allowlist of users who can access sensitive data.
        MaskingExceptionPolicy_MaskingException:
            type: object
            properties:
                action:
                    enum:
                        - ACTION_UNSPECIFIED
                        - QUERY
                        - EXPORT
                    type: string
                    description: action is the action that the user can access sensitive data.
                    format: enum
                member:
                    type: string
                    description: |-
                        Member is the principal who bind to this exception policy instance.

                         Format: users/{userUID} or groups/{group email}
                condition:
                    allOf:
                        - $ref: '#/components/schemas/Expr'
                    description: The condition that is associated with this exception policy instance.
        MaskingRulePolicy:
            type: object
            properties:
                rules:
                    type: array
                    items:
                        $ref: '#/components/schemas/MaskingRulePolicy_MaskingRule'
        MaskingRulePolicy_MaskingRule:
            type: object
            properties:
                id:
                    type: string
                    description: A unique identifier for a node in UUID format.
                condition:
                    $ref: '#/components/schemas/Expr'
                semanticType:
                    type: string
        MaximumSQLResultSizeSetting:
            type: object
            properties:
                limit:
                    type: string
                    description: |-
                        The limit is in bytes.
                         The default value is 100MB, we will use the default value if the setting not exists, or the limit <= 0.
        OAuth2IdentityProviderConfig:
            type: object
            properties:
                authUrl:
                    type: string
                tokenUrl:
                    type: string
                userInfoUrl:
                    type: string
                clientId:
                    type: string
                clientSecret:
                    type: string
                scopes:
                    type: array
                    items:
                        type: string
                fieldMapping:
                    $ref: '#/components/schemas/FieldMapping'
                skipTlsVerify:
                    type: boolean
                authStyle:
                    enum:
                        - OAUTH2_AUTH_STYLE_UNSPECIFIED
                        - IN_PARAMS
                        - IN_HEADER
                    type: string
                    format: enum
            description: OAuth2IdentityProviderConfig is the structure for OAuth2 identity provider config.
        OAuth2IdentityProviderContext:
            type: object
            properties:
                code:
                    type: string
        OAuth2IdentityProviderTestRequestContext:
            type: object
            properties:
                code:
                    type: string
                    description: Authorize code from website.
        OIDCIdentityProviderConfig:
            type: object
            properties:
                issuer:
                    type: string
                clientId:
                    type: string
                clientSecret:
                    type: string
                fieldMapping:
                    $ref: '#/components/schemas/FieldMapping'
                skipTlsVerify:
                    type: boolean
                authStyle:
                    enum:
                        - OAUTH2_AUTH_STYLE_UNSPECIFIED
                        - IN_PARAMS
                        - IN_HEADER
                    type: string
                    format: enum
                scopes:
                    readOnly: true
                    type: array
                    items:
                        type: string
                    description: |-
                        The scopes that the OIDC provider supports.
                         Should be fetched from the well-known configuration file of the OIDC provider.
                authEndpoint:
                    readOnly: true
                    type: string
                    description: |-
                        The authorization endpoint of the OIDC provider.
                         Should be fetched from the well-known configuration file of the OIDC provider.
            description: OIDCIdentityProviderConfig is the structure for OIDC identity provider config.
        OIDCIdentityProviderContext:
            type: object
            properties: {}
        ObjectSchema:
            type: object
            properties:
                type:
                    enum:
                        - TYPE_UNSPECIFIED
                        - STRING
                        - NUMBER
                        - BOOLEAN
                        - OBJECT
                        - ARRAY
                    type: string
                    format: enum
                structKind:
                    $ref: '#/components/schemas/ObjectSchema_StructKind'
                arrayKind:
                    $ref: '#/components/schemas/ObjectSchema_ArrayKind'
                semanticType:
                    type: string
        ObjectSchema_ArrayKind:
            type: object
            properties:
                kind:
                    $ref: '#/components/schemas/ObjectSchema'
        ObjectSchema_StructKind:
            type: object
            properties:
                properties:
                    type: object
                    additionalProperties:
                        $ref: '#/components/schemas/ObjectSchema'
        ParseMyBatisMapperRequest:
            type: object
            properties:
                content:
                    type: string
                    format: bytes
        ParseMyBatisMapperResponse:
            type: object
            properties:
                statements:
                    type: array
                    items:
                        type: string
        PasswordRestrictionSetting:
            type: object
            properties:
                minLength:
                    type: integer
                    description: min_length is the minimum length for password, should no less than 8.
                    format: int32
                requireNumber:
                    type: boolean
                    description: require_number requires the password must contains at least one number.
                requireLetter:
                    type: boolean
                    description: require_letter requires the password must contains at least one letter, regardless of upper case or lower case
                requireUppercaseLetter:
                    type: boolean
                    description: require_uppercase_letter requires the password must contains at least one upper case letter.
                requireSpecialCharacter:
                    type: boolean
                    description: require_uppercase_letter requires the password must contains at least one special character.
                requireResetPasswordForFirstLogin:
                    type: boolean
                    description: require_reset_password_for_first_login requires users to reset their password after the 1st login.
                passwordRotation:
                    pattern: ^-?(?:0|[1-9][0-9]{0,11})(?:\.[0-9]{1,9})?s$
                    type: string
                    description: password_rotation requires users to reset their password after the duration.
        PatchSubscription:
            type: object
            properties:
                license:
                    type: string
        Plan:
            type: object
            properties:
                name:
                    type: string
                    description: |-
                        The name of the plan.
                         `plan` is a system generated ID.
                         Format: projects/{project}/plans/{plan}
                issue:
                    type: string
                    description: |-
                        The resource name of the issue associated with this plan.
                         Format: projects/{project}/issues/{issue}
                title:
                    type: string
                description:
                    type: string
                steps:
                    type: array
                    items:
                        $ref: '#/components/schemas/Plan_Step'
                vcsSource:
                    $ref: '#/components/schemas/Plan_VCSSource'
                creator:
                    readOnly: true
                    type: string
                    description: 'Format: users/hello@world.com'
                createTime:
                    readOnly: true
                    type: string
                    format: date-time
                updateTime:
                    readOnly: true
                    type: string
                    format: date-time
                planCheckRunStatusCount:
                    readOnly: true
                    type: object
                    additionalProperties:
                        type: integer
                        format: int32
                    description: |-
                        The status count of the latest plan check runs.
                         Keys are:
                         - SUCCESS
                         - WARNING
                         - ERROR
                releaseSource:
                    $ref: '#/components/schemas/Plan_ReleaseSource'
                deploymentConfigSnapshot:
                    readOnly: true
                    allOf:
                        - $ref: '#/components/schemas/DeploymentConfig'
                    description: |-
                        The deployment config snapshot taken at the time of plan creation.
                         This is to ensure that we get consistent rollout for the plan.
        PlanCheckRun:
            type: object
            properties:
                name:
                    type: string
                    description: 'Format: projects/{project}/plans/{plan}/planCheckRuns/{planCheckRun}'
                type:
                    enum:
                        - TYPE_UNSPECIFIED
                        - DATABASE_STATEMENT_FAKE_ADVISE
                        - DATABASE_STATEMENT_ADVISE
                        - DATABASE_STATEMENT_SUMMARY_REPORT
                        - DATABASE_CONNECT
                        - DATABASE_GHOST_SYNC
                    type: string
                    format: enum
                status:
                    enum:
                        - STATUS_UNSPECIFIED
                        - RUNNING
                        - DONE
                        - FAILED
                        - CANCELED
                    type: string
                    format: enum
                target:
                    type: string
                    description: 'Format: instances/{instance}/databases/{database}'
                sheet:
                    type: string
                    description: 'Format: project/{project}/sheets/{sheet}'
                results:
                    type: array
                    items:
                        $ref: '#/components/schemas/PlanCheckRun_Result'
                error:
                    type: string
                    description: error is set if the Status is FAILED.
                createTime:
                    readOnly: true
                    type: string
                    format: date-time
        PlanCheckRun_Result:
            type: object
            properties:
                status:
                    enum:
                        - STATUS_UNSPECIFIED
                        - ERROR
                        - WARNING
                        - SUCCESS
                    type: string
                    format: enum
                title:
                    type: string
                content:
                    type: string
                code:
                    type: integer
                    format: int32
                sqlSummaryReport:
                    $ref: '#/components/schemas/Result_SqlSummaryReport'
                sqlReviewReport:
                    $ref: '#/components/schemas/Result_SqlReviewReport'
        Plan_ChangeDatabaseConfig:
            type: object
            properties:
                target:
                    type: string
                    description: |-
                        The resource name of the target.
                         Format: instances/{instance-id}/databases/{database-name}.
                         Format: projects/{project}/databaseGroups/{databaseGroup}.
                sheet:
                    type: string
                    description: |-
                        The resource name of the sheet.
                         Format: projects/{project}/sheets/{sheet}
                type:
                    enum:
                        - TYPE_UNSPECIFIED
                        - BASELINE
                        - MIGRATE
                        - MIGRATE_SDL
                        - MIGRATE_GHOST
                        - DATA
                    type: string
                    format: enum
                schemaVersion:
                    type: string
                    description: |-
                        schema_version is parsed from VCS file name.
                         It is automatically generated in the UI workflow.
                ghostFlags:
                    type: object
                    additionalProperties:
                        type: string
                preUpdateBackupDetail:
                    allOf:
                        - $ref: '#/components/schemas/ChangeDatabaseConfig_PreUpdateBackupDetail'
                    description: If set, a backup of the modified data will be created automatically before any changes are applied.
        Plan_CreateDatabaseConfig:
            required:
                - target
                - database
            type: object
            properties:
                target:
                    type: string
                    description: |-
                        The resource name of the instance on which the database is created.
                         Format: instances/{instance}
                database:
                    type: string
                    description: The name of the database to create.
                table:
                    type: string
                    description: |-
                        table is the name of the table, if it is not empty, Bytebase should create a table after creating the database.
                         For example, in MongoDB, it only creates the database when we first store data in that database.
                characterSet:
                    type: string
                    description: character_set is the character set of the database.
                collation:
                    type: string
                    description: collation is the collation of the database.
                cluster:
                    type: string
                    description: cluster is the cluster of the database. This is only applicable to ClickHouse for "ON CLUSTER <<cluster>>".
                owner:
                    type: string
                    description: owner is the owner of the database. This is only applicable to Postgres for "WITH OWNER <<owner>>".
                environment:
                    type: string
                    description: |-
                        The environment resource.
                         Format: environments/prod where prod is the environment resource ID.
                labels:
                    type: object
                    additionalProperties:
                        type: string
                    description: labels of the database.
        Plan_ExportDataConfig:
            type: object
            properties:
                target:
                    type: string
                    description: |-
                        The resource name of the target.
                         Format: instances/{instance-id}/databases/{database-name}
                sheet:
                    type: string
                    description: |-
                        The resource name of the sheet.
                         Format: projects/{project}/sheets/{sheet}
                format:
                    enum:
                        - FORMAT_UNSPECIFIED
                        - CSV
                        - JSON
                        - SQL
                        - XLSX
                    type: string
                    description: The format of the exported file.
                    format: enum
                password:
                    type: string
                    description: |-
                        The zip password provide by users.
                         Leave it empty if no needs to encrypt the zip file.
        Plan_ReleaseSource:
            type: object
            properties:
                release:
                    type: string
                    description: |-
                        The release.
                         Format: projects/{project}/releases/{release}
        Plan_Spec:
            type: object
            properties:
                earliestAllowedTime:
                    type: string
                    description: earliest_allowed_time the earliest execution time of the change.
                    format: date-time
                id:
                    type: string
                    description: A UUID4 string that uniquely identifies the Spec.
                dependsOnSpecs:
                    type: array
                    items:
                        type: string
                    description: |-
                        IDs of the specs that this spec depends on.
                         Must be a subset of the specs in the same step.
                specReleaseSource:
                    $ref: '#/components/schemas/Plan_SpecReleaseSource'
                createDatabaseConfig:
                    $ref: '#/components/schemas/Plan_CreateDatabaseConfig'
                changeDatabaseConfig:
                    $ref: '#/components/schemas/Plan_ChangeDatabaseConfig'
                exportDataConfig:
                    $ref: '#/components/schemas/Plan_ExportDataConfig'
        Plan_SpecReleaseSource:
            type: object
            properties:
                file:
                    type: string
                    description: |-
                        Format: projects/{project}/releases/{release}/files/{file}
                         {file} is URL path escaped.
        Plan_Step:
            type: object
            properties:
                title:
                    type: string
                specs:
                    type: array
                    items:
                        $ref: '#/components/schemas/Plan_Spec'
        Plan_VCSSource:
            type: object
            properties:
                vcsType:
                    enum:
                        - VCS_TYPE_UNSPECIFIED
                        - GITHUB
                        - GITLAB
                        - BITBUCKET
                        - AZURE_DEVOPS
                    type: string
                    format: enum
                vcsConnector:
                    type: string
                    description: |-
                        Optional.
                         If present, we will update the pull request for rollout status.
                         Format: projects/{project-ID}/vcsConnectors/{vcs-connector}
                pullRequestUrl:
                    type: string
        Policy:
            type: object
            properties:
                name:
                    type: string
                    description: |-
                        The name of the policy.
                         Format: {resource name}/policies/{policy type}
                         Workspace resource name: "".
                         Environment resource name: environments/environment-id.
                         Instance resource name: instances/instance-id.
                         Database resource name: instances/instance-id/databases/database-name.
                inheritFromParent:
                    type: boolean
                type:
                    enum:
                        - POLICY_TYPE_UNSPECIFIED
                        - ROLLOUT_POLICY
                        - SLOW_QUERY
                        - DISABLE_COPY_DATA
                        - MASKING_RULE
                        - MASKING_EXCEPTION
                        - RESTRICT_ISSUE_CREATION_FOR_SQL_REVIEW
                        - TAG
                        - DATA_SOURCE_QUERY
                        - DATA_EXPORT
                    type: string
                    format: enum
                rolloutPolicy:
                    $ref: '#/components/schemas/RolloutPolicy'
                slowQueryPolicy:
                    $ref: '#/components/schemas/SlowQueryPolicy'
                disableCopyDataPolicy:
                    $ref: '#/components/schemas/DisableCopyDataPolicy'
                maskingRulePolicy:
                    $ref: '#/components/schemas/MaskingRulePolicy'
                maskingExceptionPolicy:
                    $ref: '#/components/schemas/MaskingExceptionPolicy'
                restrictIssueCreationForSqlReviewPolicy:
                    $ref: '#/components/schemas/RestrictIssueCreationForSQLReviewPolicy'
                tagPolicy:
                    $ref: '#/components/schemas/TagPolicy'
                dataSourceQueryPolicy:
                    $ref: '#/components/schemas/DataSourceQueryPolicy'
                exportDataPolicy:
                    $ref: '#/components/schemas/ExportDataPolicy'
                enforce:
                    type: boolean
                resourceType:
                    readOnly: true
                    enum:
                        - RESOURCE_TYPE_UNSPECIFIED
                        - WORKSPACE
                        - ENVIRONMENT
                        - PROJECT
                        - INSTANCE
                        - DATABASE
                    type: string
                    description: The resource type for the policy.
                    format: enum
        Position:
            type: object
            properties:
                line:
                    type: integer
                    format: int32
                column:
                    type: integer
                    format: int32
        Postgres_Session:
            type: object
            properties:
                pid:
                    type: string
                blockedByPids:
                    type: array
                    items:
                        type: string
                query:
                    type: string
                state:
                    type: string
                waitEventType:
                    type: string
                waitEvent:
                    type: string
                datname:
                    type: string
                usename:
                    type: string
                applicationName:
                    type: string
                clientAddr:
                    type: string
                clientPort:
                    type: string
                backendStart:
                    type: string
                    format: date-time
                xactStart:
                    type: string
                    format: date-time
                queryStart:
                    type: string
                    format: date-time
            description: Read from `pg_stat_activity`
        PrettyRequest:
            type: object
            properties:
                engine:
                    enum:
                        - ENGINE_UNSPECIFIED
                        - CLICKHOUSE
                        - MYSQL
                        - POSTGRES
                        - SNOWFLAKE
                        - SQLITE
                        - TIDB
                        - MONGODB
                        - REDIS
                        - ORACLE
                        - SPANNER
                        - MSSQL
                        - REDSHIFT
                        - MARIADB
                        - OCEANBASE
                        - DM
                        - RISINGWAVE
                        - OCEANBASE_ORACLE
                        - STARROCKS
                        - DORIS
                        - HIVE
                        - ELASTICSEARCH
                        - BIGQUERY
                        - DYNAMODB
                        - DATABRICKS
                        - COCKROACHDB
                        - COSMOSDB
                    type: string
                    format: enum
                currentSchema:
                    type: string
                    description: |-
                        The SDL format SQL schema information that was dumped from a database
                         engine. This information will be sorted to match the order of statements in
                         the userSchema.
                expectedSchema:
                    type: string
                    description: |-
                        The expected SDL schema. This schema will be checked for correctness and
                         normalized.
        PrettyResponse:
            type: object
            properties:
                currentSchema:
                    type: string
                    description: The pretty-formatted version of current schema.
                expectedSchema:
                    type: string
                    description: The expected SDL schema after normalizing.
        PreviewPlanRequest:
            required:
                - project
                - release
                - targets
            type: object
            properties:
                project:
                    type: string
                    description: |-
                        The name of the project.
                         Format: projects/{project}
                release:
                    type: string
                    description: The release used for preview.
                targets:
                    type: array
                    items:
                        type: string
                    description: |-
                        The targets to deploy.
                         Can be database or databaseGroup.
                         Format:
                         projects/{project}/databaseGroups/{databaseGroup}
                         instances/{instance}/databases/{database}
                allowOutOfOrder:
                    type: boolean
        PreviewPlanResponse:
            type: object
            properties:
                plan:
                    $ref: '#/components/schemas/Plan'
                outOfOrderFiles:
                    type: array
                    items:
                        $ref: '#/components/schemas/PreviewPlanResponse_DatabaseFiles'
                    description: The out of order files of each database.
                appliedButModifiedFiles:
                    type: array
                    items:
                        $ref: '#/components/schemas/PreviewPlanResponse_DatabaseFiles'
                    description: The applied but modified files of each database.
        PreviewPlanResponse_DatabaseFiles:
            type: object
            properties:
                database:
                    type: string
                files:
                    type: array
                    items:
                        type: string
                    description: 'Format: projects/{project}/releases/{release}/files/{file_id}'
        PreviewRolloutRequest:
            required:
                - project
            type: object
            properties:
                project:
                    type: string
                    description: |-
                        The name of the project.
                         Format: projects/{project}
                plan:
                    allOf:
                        - $ref: '#/components/schemas/Plan'
                    description: The plan used to preview rollout.
        PreviewTaskRunRollbackRequest:
            required:
                - name
            type: object
            properties:
                name:
                    type: string
                    description: 'Format: projects/{project}/rollouts/{rollout}/stages/{stage}/tasks/{task}/taskRuns/{taskRun}'
        PreviewTaskRunRollbackResponse:
            type: object
            properties:
                statement:
                    type: string
        PriorBackupDetail:
            type: object
            properties:
                items:
                    type: array
                    items:
                        $ref: '#/components/schemas/PriorBackupDetail_Item'
        PriorBackupDetail_Item:
            type: object
            properties:
                sourceTable:
                    allOf:
                        - $ref: '#/components/schemas/Item_Table'
                    description: The original table information.
                targetTable:
                    allOf:
                        - $ref: '#/components/schemas/Item_Table'
                    description: The target backup table information.
                startPosition:
                    $ref: '#/components/schemas/Position'
                endPosition:
                    $ref: '#/components/schemas/Position'
        Project:
            type: object
            properties:
                issueLabels:
                    type: array
                    items:
                        $ref: '#/components/schemas/Label'
                forceIssueLabels:
                    type: boolean
                    description: Force issue labels to be used when creating an issue.
                allowModifyStatement:
                    type: boolean
                    description: Allow modifying statement after issue is created.
                autoResolveIssue:
                    type: boolean
                    description: Enable auto resolve issue.
                enforceIssueTitle:
                    type: boolean
                    description: Enforce issue title created by user instead of generated by Bytebase.
                autoEnableBackup:
                    type: boolean
                    description: Whether to automatically enable backup.
                skipBackupErrors:
                    type: boolean
                    description: Whether to skip backup errors and continue the data migration.
                postgresDatabaseTenantMode:
                    type: boolean
                    description: |-
                        Whether to enable the database tenant mode for PostgreSQL.
                         If enabled, the issue will be created with the pre-appended "set role <db_owner>" statement.
                allowSelfApproval:
                    type: boolean
                    description: Whether to allow the issue creator to self-approve the issue.
        QueryHistory:
            type: object
            properties:
                name:
                    readOnly: true
                    type: string
                    description: |-
                        The name for the query history.
                         Format: queryHistories/{uid}
                database:
                    readOnly: true
                    type: string
                    description: |-
                        The database name to execute the query.
                         Format: instances/{instance}/databases/{databaseName}
                creator:
                    readOnly: true
                    type: string
                createTime:
                    readOnly: true
                    type: string
                    format: date-time
                statement:
                    readOnly: true
                    type: string
                error:
                    readOnly: true
                    type: string
                duration:
                    readOnly: true
                    pattern: ^-?(?:0|[1-9][0-9]{0,11})(?:\.[0-9]{1,9})?s$
                    type: string
                type:
                    enum:
                        - TYPE_UNSPECIFIED
                        - QUERY
                        - EXPORT
                    type: string
                    format: enum
        QueryOption:
            type: object
            properties:
                redisRunCommandsOn:
                    enum:
                        - REDIS_RUN_COMMANDS_ON_UNSPECIFIED
                        - SINGLE_NODE
                        - ALL_NODES
                    type: string
                    format: enum
        QueryRequest:
            required:
                - name
            type: object
            properties:
                name:
                    type: string
                    description: |-
                        The name is the instance name to execute the query against.
                         Format: instances/{instance}/databases/{databaseName}
                statement:
                    type: string
                    description: The SQL statement to execute.
                limit:
                    type: integer
                    description: The maximum number of rows to return.
                    format: int32
                timeout:
                    pattern: ^-?(?:0|[1-9][0-9]{0,11})(?:\.[0-9]{1,9})?s$
                    type: string
                    description: The timeout for the request.
                dataSourceId:
                    type: string
                    description: |-
                        The id of data source.
                         It is used for querying admin data source even if the instance has
                         read-only data sources. Or it can be used to query a specific read-only
                         data source.
                explain:
                    type: boolean
                    description: Explain the statement.
                schema:
                    type: string
                    description: |-
                        The default schema to search objects. Equals to the current schema in
                         Oracle and search path in Postgres.
                queryOption:
                    $ref: '#/components/schemas/QueryOption'
                container:
                    type: string
                    description: |-
                        Container is the container name to execute the query against, used for
                         CosmosDB only.
        QueryResponse:
            type: object
            properties:
                results:
                    type: array
                    items:
                        $ref: '#/components/schemas/QueryResult'
                    description: The query results.
                allowExport:
                    type: boolean
                    description: The query is allowed to be exported or not.
        QueryResult:
            type: object
            properties:
                columnNames:
                    type: array
                    items:
                        type: string
                    description: Column names of the query result.
                columnTypeNames:
                    type: array
                    items:
                        type: string
                    description: |-
                        Column types of the query result.
                         The types come from the Golang SQL driver.
                rows:
                    type: array
                    items:
                        $ref: '#/components/schemas/QueryRow'
                    description: Rows of the query result.
                rowsCount:
                    type: string
                masked:
                    type: array
                    items:
                        type: boolean
                    description: Columns are masked or not.
                sensitive:
                    type: array
                    items:
                        type: boolean
                    description: Columns are sensitive or not.
                error:
                    type: string
                    description: The error message if the query failed.
                latency:
                    pattern: ^-?(?:0|[1-9][0-9]{0,11})(?:\.[0-9]{1,9})?s$
                    type: string
                    description: The time it takes to execute the query.
                statement:
                    type: string
                    description: The query statement for the result.
                postgresError:
                    $ref: '#/components/schemas/QueryResult_PostgresError'
        QueryResult_PostgresError:
            type: object
            properties:
                severity:
                    type: string
                code:
                    type: string
                message:
                    type: string
                detail:
                    type: string
                hint:
                    type: string
                position:
                    type: integer
                    format: int32
                internalPosition:
                    type: integer
                    format: int32
                internalQuery:
                    type: string
                where:
                    type: string
                schemaName:
                    type: string
                tableName:
                    type: string
                columnName:
                    type: string
                dataTypeName:
                    type: string
                constraintName:
                    type: string
                file:
                    type: string
                line:
                    type: integer
                    format: int32
                routine:
                    type: string
            description: |-
                refer https://www.postgresql.org/docs/11/protocol-error-fields.html
                 for field description.
        QueryRow:
            type: object
            properties:
                values:
                    type: array
                    items:
                        $ref: '#/components/schemas/RowValue'
                    description: Row values of the query result.
        Range:
            type: object
            properties:
                start:
                    type: integer
                    format: int32
                end:
                    type: integer
                    format: int32
        RangeMask_Slice:
            type: object
            properties:
                start:
                    type: integer
                    description: start is the start index of the original value, start from 0 and should be less than stop.
                    format: int32
                end:
                    type: integer
                    description: stop is the stop index of the original value, should be less than the length of the original value.
                    format: int32
                substitution:
                    type: string
                    description: OriginalValue[start:end) would be replaced with replace_with.
        RejectIssueRequest:
            required:
                - name
            type: object
            properties:
                name:
                    type: string
                    description: |-
                        The name of the issue to add an rejection.
                         Format: projects/{project}/issues/{issue}
                comment:
                    type: string
        Release:
            type: object
            properties:
                name:
                    readOnly: true
                    type: string
                    description: 'Format: projects/{project}/releases/{release}'
                title:
                    type: string
                files:
                    type: array
                    items:
                        $ref: '#/components/schemas/Release_File'
                vcsSource:
                    $ref: '#/components/schemas/Release_VCSSource'
                creator:
                    readOnly: true
                    type: string
                    description: 'Format: users/hello@world.com'
                createTime:
                    readOnly: true
                    type: string
                    format: date-time
                state:
                    readOnly: true
                    enum:
                        - STATE_UNSPECIFIED
                        - ACTIVE
                        - DELETED
                    type: string
                    format: enum
        Release_File:
            type: object
            properties:
                id:
                    type: string
                    description: The unique identifier for the file.
                path:
                    type: string
                    description: The path of the file. e.g. `2.2/V0001_create_table.sql`.
                sheet:
                    type: string
                    description: |-
                        The sheet that holds the content.
                         Format: projects/{project}/sheets/{sheet}
                sheetSha256:
                    readOnly: true
                    type: string
                    description: The SHA256 hash value of the sheet.
                type:
                    enum:
                        - TYPE_UNSPECIFIED
                        - VERSIONED
                    type: string
                    format: enum
                version:
                    type: string
                changeType:
                    enum:
                        - CHANGE_TYPE_UNSPECIFIED
                        - DDL
                        - DDL_GHOST
                        - DML
                    type: string
                    format: enum
                statement:
                    type: string
                    description: The statement is used for preview or check purpose.
                statementSize:
                    readOnly: true
                    type: string
        Release_VCSSource:
            type: object
            properties:
                vcsType:
                    enum:
                        - VCS_TYPE_UNSPECIFIED
                        - GITHUB
                        - GITLAB
                        - BITBUCKET
                        - AZURE_DEVOPS
                    type: string
                    format: enum
                url:
                    type: string
                    description: The url link to the e.g. GitHub commit or pull request.
        RemoveDataSourceRequest:
            required:
                - name
                - dataSource
            type: object
            properties:
                name:
                    type: string
                    description: |-
                        The name of the instance to remove a data source from.
                         Format: instances/{instance}
                dataSource:
                    allOf:
                        - $ref: '#/components/schemas/DataSource'
                    description: |-
                        Identified by data source ID.
                         Only READ_ONLY data source can be removed.
        RemoveWebhookRequest:
            required:
                - webhook
            type: object
            properties:
                webhook:
                    allOf:
                        - $ref: '#/components/schemas/Webhook'
                    description: The webhook to remove. Identified by its url.
        RequestIssueRequest:
            required:
                - name
            type: object
            properties:
                name:
                    type: string
                    description: |-
                        The name of the issue to request a issue.
                         Format: projects/{project}/issues/{issue}
                comment:
                    type: string
        RequestMetadata:
            type: object
            properties:
                callerIp:
                    type: string
                    description: The IP address of the caller.
                callerSuppliedUserAgent:
                    type: string
                    description: |-
                        The user agent of the caller.
                         This information is not authenticated and should be treated accordingly.
            description: Metadata about the request.
        ResourcePackage:
            type: object
            properties:
                logo:
                    type: string
                    description: The branding logo.
                    format: bytes
            description: The theme resources.
        RestrictIssueCreationForSQLReviewPolicy:
            type: object
            properties:
                disallow:
                    type: boolean
        Result_SqlReviewReport:
            type: object
            properties:
                line:
                    type: integer
                    format: int32
                column:
                    type: integer
                    format: int32
                startPosition:
                    allOf:
                        - $ref: '#/components/schemas/Position'
                    description: |-
                        1-based Position of the SQL statement.
                         To supersede `line` and `column` above.
                endPosition:
                    $ref: '#/components/schemas/Position'
        Result_SqlSummaryReport:
            type: object
            properties:
                statementTypes:
                    type: array
                    items:
                        type: string
                    description: statement_types are the types of statements that are found in the sql.
                affectedRows:
                    type: integer
                    format: int32
                changedResources:
                    $ref: '#/components/schemas/ChangedResources'
        ReviewConfig:
            type: object
            properties:
                name:
                    readOnly: true
                    type: string
                    description: |-
                        The name of the sql review to retrieve.
                         Format: reviewConfigs/{reviewConfig}
                title:
                    type: string
                enabled:
                    type: boolean
                creator:
                    readOnly: true
                    type: string
                    description: 'Format: users/hello@world.com'
                createTime:
                    readOnly: true
                    type: string
                    format: date-time
                updateTime:
                    readOnly: true
                    type: string
                    format: date-time
                rules:
                    type: array
                    items:
                        $ref: '#/components/schemas/SQLReviewRule'
                resources:
                    type: array
                    items:
                        type: string
                    description: |-
                        resources using the config.
                         Format: {resurce}/{resource id}, for example, environments/test.
        Revision:
            type: object
            properties:
                name:
                    type: string
                    description: 'Format: instances/{instance}/databases/{database}/revisions/{revision}'
                release:
                    type: string
                    description: |-
                        Format: projects/{project}/releases/{release}
                         Can be empty.
                creator:
                    readOnly: true
                    type: string
                    description: 'Format: users/hello@world.com'
                createTime:
                    readOnly: true
                    type: string
                    format: date-time
                deleter:
                    type: string
                    description: |-
                        Format: users/hello@world.com
                         Can be empty.
                deleteTime:
                    readOnly: true
                    type: string
                    description: Can be empty.
                    format: date-time
                file:
                    type: string
                    description: |-
                        Format: projects/{project}/releases/{release}/files/{id}
                         Can be empty.
                version:
                    type: string
                sheet:
                    type: string
                    description: |-
                        The sheet that holds the content.
                         Format: projects/{project}/sheets/{sheet}
                sheetSha256:
                    readOnly: true
                    type: string
                    description: The SHA256 hash value of the sheet.
                statement:
                    readOnly: true
                    type: string
                    description: The statement is used for preview purpose.
                statementSize:
                    readOnly: true
                    type: string
                issue:
                    type: string
                    description: |-
                        The issue associated with the revision.
                         Can be empty.
                         Format: projects/{project}/issues/{issue}
                taskRun:
                    type: string
                    description: |-
                        The task run associated with the revision.
                         Can be empty.
                         Format:
                         projects/{project}/rollouts/{rollout}/stages/{stage}/tasks/{task}/taskRuns/{taskRun}
        Risk:
            type: object
            properties:
                name:
                    type: string
                    description: 'Format: risks/{risk}'
                source:
                    enum:
                        - SOURCE_UNSPECIFIED
                        - DDL
                        - DML
                        - CREATE_DATABASE
                        - REQUEST_QUERY
                        - REQUEST_EXPORT
                        - DATA_EXPORT
                    type: string
                    format: enum
                title:
                    type: string
                level:
                    type: integer
                    format: int32
                active:
                    type: boolean
                condition:
                    $ref: '#/components/schemas/Expr'
        Role:
            type: object
            properties:
                name:
                    type: string
                    description: 'Format: roles/{role}'
                title:
                    type: string
                description:
                    type: string
                permissions:
                    type: array
                    items:
                        type: string
                type:
                    enum:
                        - TYPE_UNSPECIFIED
                        - BUILT_IN
                        - CUSTOM
                    type: string
                    format: enum
        Rollout:
            required:
                - plan
            type: object
            properties:
                name:
                    type: string
                    description: |-
                        The resource name of the rollout.
                         Format: projects/{project}/rollouts/{rollout}
                plan:
                    type: string
                    description: |-
                        The plan that this rollout is based on.
                         Format: projects/{project}/plans/{plan}
                title:
                    type: string
                stages:
                    type: array
                    items:
                        $ref: '#/components/schemas/Stage'
                    description: stages and thus tasks of the rollout.
                creator:
                    readOnly: true
                    type: string
                    description: 'Format: users/hello@world.com'
                createTime:
                    readOnly: true
                    type: string
                    format: date-time
                updateTime:
                    readOnly: true
                    type: string
                    format: date-time
                issue:
                    readOnly: true
                    type: string
                    description: |-
                        The issue associated with the rollout. Could be empty.
                         Format: projects/{project}/issues/{issue}
        RolloutPolicy:
            type: object
            properties:
                automatic:
                    type: boolean
                workspaceRoles:
                    type: array
                    items:
                        type: string
                projectRoles:
                    type: array
                    items:
                        type: string
                issueRoles:
                    type: array
                    items:
                        type: string
                    description: |-
                        roles/LAST_APPROVER
                         roles/CREATOR
        RowValue:
            type: object
            properties:
                nullValue:
                    enum:
                        - NULL_VALUE
                    type: string
                    format: enum
                boolValue:
                    type: boolean
                bytesValue:
                    type: string
                    format: bytes
                doubleValue:
                    type: number
                    format: double
                floatValue:
                    type: number
                    format: float
                int32Value:
                    type: integer
                    format: int32
                int64Value:
                    type: string
                stringValue:
                    type: string
                uint32Value:
                    type: integer
                    format: uint32
                uint64Value:
                    type: string
                valueValue:
                    allOf:
                        - $ref: '#/components/schemas/GoogleProtobufValue'
                    description: value_value is used for Spanner and TUPLE ARRAY MAP in Clickhouse only.
                timestampValue:
                    type: string
                    description: |-
                        timestamp_value is used for the timestamp without time zone data type,
                         meaning it only includes the timestamp without any time zone or location
                         info. Although it may be expressed as a UTC value, it should be seen as a
                         timestamp missing location context.
                    format: date-time
                timestampTzValue:
                    allOf:
                        - $ref: '#/components/schemas/RowValue_TimestampTZ'
                    description: |-
                        timestamp_tz_value is used for the timestamptz data type, which
                         accurately represents the timestamp with location information.
        RowValue_TimestampTZ:
            type: object
            properties:
                timestamp:
                    type: string
                    format: date-time
                zone:
                    type: string
                    description: |-
                        Zone is the time zone abbreviations in timezone database such as "PDT",
                         "PST". https://en.wikipedia.org/wiki/List_of_tz_database_time_zones We
                         retrieve the time zone information from the timestamptz field in the
                         database. A timestamp is in UTC or epoch time, and with zone info, we can
                         convert it to a local time string. Zone and offset are returned by
                         time.Time.Zone()
                offset:
                    type: integer
                    description: The offset is in seconds east of UTC
                    format: int32
        RunPlanChecksRequest:
            required:
                - name
            type: object
            properties:
                name:
                    type: string
                    description: |-
                        The plan to run plan checks.
                         Format: projects/{project}/plans/{plan}
        RunPlanChecksResponse:
            type: object
            properties: {}
        SASLConfig:
            type: object
            properties:
                krbConfig:
                    $ref: '#/components/schemas/KerberosConfig'
        SCIMSetting:
            type: object
            properties:
                token:
                    type: string
        SMTPMailDeliverySettingValue:
            type: object
            properties:
                server:
                    type: string
                    description: The SMTP server address.
                port:
                    type: integer
                    description: The SMTP server port.
                    format: int32
                encryption:
                    enum:
                        - ENCRYPTION_UNSPECIFIED
                        - ENCRYPTION_NONE
                        - ENCRYPTION_STARTTLS
                        - ENCRYPTION_SSL_TLS
                    type: string
                    description: The SMTP server encryption.
                    format: enum
                ca:
                    type: string
                    description: |-
                        The CA, KEY, and CERT for the SMTP server.
                         Not used.
                key:
                    type: string
                cert:
                    type: string
                authentication:
                    enum:
                        - AUTHENTICATION_UNSPECIFIED
                        - AUTHENTICATION_NONE
                        - AUTHENTICATION_PLAIN
                        - AUTHENTICATION_LOGIN
                        - AUTHENTICATION_CRAM_MD5
                    type: string
                    format: enum
                username:
                    type: string
                password:
                    type: string
                    description: If not specified, server will use the existed password.
                from:
                    type: string
                    description: The sender email address.
                to:
                    type: string
                    description: The recipient email address, used with validate_only to send test email.
        SQLReviewRule:
            type: object
            properties:
                type:
                    type: string
                level:
                    enum:
                        - LEVEL_UNSPECIFIED
                        - ERROR
                        - WARNING
                        - DISABLED
                    type: string
                    format: enum
                payload:
                    type: string
                engine:
                    enum:
                        - ENGINE_UNSPECIFIED
                        - CLICKHOUSE
                        - MYSQL
                        - POSTGRES
                        - SNOWFLAKE
                        - SQLITE
                        - TIDB
                        - MONGODB
                        - REDIS
                        - ORACLE
                        - SPANNER
                        - MSSQL
                        - REDSHIFT
                        - MARIADB
                        - OCEANBASE
                        - DM
                        - RISINGWAVE
                        - OCEANBASE_ORACLE
                        - STARROCKS
                        - DORIS
                        - HIVE
                        - ELASTICSEARCH
                        - BIGQUERY
                        - DYNAMODB
                        - DATABRICKS
                        - COCKROACHDB
                        - COSMOSDB
                    type: string
                    format: enum
                comment:
                    type: string
        Schedule:
            type: object
            properties:
                deployments:
                    type: array
                    items:
                        $ref: '#/components/schemas/ScheduleDeployment'
            description: Schedule is the message for deployment schedule.
        ScheduleDeployment:
            type: object
            properties:
                title:
                    type: string
                    description: The title of the deployment (stage) in a schedule.
                id:
                    type: string
                spec:
                    $ref: '#/components/schemas/DeploymentSpec'
        SchedulerInfo_WaitingCause:
            type: object
            properties:
                connectionLimit:
                    type: boolean
                taskUid:
                    type: integer
                    format: int32
        SchemaCatalog:
            type: object
            properties:
                name:
                    type: string
                tables:
                    type: array
                    items:
                        $ref: '#/components/schemas/TableCatalog'
        SchemaTemplateSetting:
            type: object
            properties:
                fieldTemplates:
                    type: array
                    items:
                        $ref: '#/components/schemas/SchemaTemplateSetting_FieldTemplate'
                columnTypes:
                    type: array
                    items:
                        $ref: '#/components/schemas/SchemaTemplateSetting_ColumnType'
                tableTemplates:
                    type: array
                    items:
                        $ref: '#/components/schemas/SchemaTemplateSetting_TableTemplate'
        SchemaTemplateSetting_ColumnType:
            type: object
            properties:
                engine:
                    enum:
                        - ENGINE_UNSPECIFIED
                        - CLICKHOUSE
                        - MYSQL
                        - POSTGRES
                        - SNOWFLAKE
                        - SQLITE
                        - TIDB
                        - MONGODB
                        - REDIS
                        - ORACLE
                        - SPANNER
                        - MSSQL
                        - REDSHIFT
                        - MARIADB
                        - OCEANBASE
                        - DM
                        - RISINGWAVE
                        - OCEANBASE_ORACLE
                        - STARROCKS
                        - DORIS
                        - HIVE
                        - ELASTICSEARCH
                        - BIGQUERY
                        - DYNAMODB
                        - DATABRICKS
                        - COCKROACHDB
                        - COSMOSDB
                    type: string
                    format: enum
                enabled:
                    type: boolean
                types:
                    type: array
                    items:
                        type: string
        SchemaTemplateSetting_FieldTemplate:
            type: object
            properties:
                id:
                    type: string
                engine:
                    enum:
                        - ENGINE_UNSPECIFIED
                        - CLICKHOUSE
                        - MYSQL
                        - POSTGRES
                        - SNOWFLAKE
                        - SQLITE
                        - TIDB
                        - MONGODB
                        - REDIS
                        - ORACLE
                        - SPANNER
                        - MSSQL
                        - REDSHIFT
                        - MARIADB
                        - OCEANBASE
                        - DM
                        - RISINGWAVE
                        - OCEANBASE_ORACLE
                        - STARROCKS
                        - DORIS
                        - HIVE
                        - ELASTICSEARCH
                        - BIGQUERY
                        - DYNAMODB
                        - DATABRICKS
                        - COCKROACHDB
                        - COSMOSDB
                    type: string
                    format: enum
                category:
                    type: string
                column:
                    $ref: '#/components/schemas/ColumnMetadata'
                catalog:
                    $ref: '#/components/schemas/ColumnCatalog'
        SchemaTemplateSetting_TableTemplate:
            type: object
            properties:
                id:
                    type: string
                engine:
                    enum:
                        - ENGINE_UNSPECIFIED
                        - CLICKHOUSE
                        - MYSQL
                        - POSTGRES
                        - SNOWFLAKE
                        - SQLITE
                        - TIDB
                        - MONGODB
                        - REDIS
                        - ORACLE
                        - SPANNER
                        - MSSQL
                        - REDSHIFT
                        - MARIADB
                        - OCEANBASE
                        - DM
                        - RISINGWAVE
                        - OCEANBASE_ORACLE
                        - STARROCKS
                        - DORIS
                        - HIVE
                        - ELASTICSEARCH
                        - BIGQUERY
                        - DYNAMODB
                        - DATABRICKS
                        - COCKROACHDB
                        - COSMOSDB
                    type: string
                    format: enum
                category:
                    type: string
                table:
                    $ref: '#/components/schemas/TableMetadata'
                catalog:
                    $ref: '#/components/schemas/TableCatalog'
        SearchAnomaliesRequest:
            required:
                - parent
            type: object
            properties:
                parent:
                    type: string
                    description: |-
                        The parent resource whose anomalies are to be listed.
                         Format: projects/{project}
                filter:
                    type: string
                    description: |-
                        filter is the filter to apply on the search anomaly request,
                         follow the [ebnf](https://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_form) syntax.
                         Only support filter by resource and type for now.
                         For example:
                         Search the anomalies of a specific resource: 'resource="instances/{instance}/databases/{database}".'
                         Search the specified types of anomalies: 'type="MIGRATION_SCHEMA".'
                pageSize:
                    type: integer
                    description: |-
                        Not used.
                         The maximum number of anomalies to return. The service may return fewer than
                         this value.
                         If unspecified, at most 10 anomalies will be returned.
                         The maximum value is 1000; values above 1000 will be coerced to 1000.
                    format: int32
                pageToken:
                    type: string
                    description: |-
                        Not used.
                         A page token, received from a previous `SearchAnomalies` call.
                         Provide this to retrieve the subsequent page.

                         When paginating, all other parameters provided to `SearchAnomalies` must match
                         the call that provided the page token.
        SearchAnomaliesResponse:
            type: object
            properties:
                anomalies:
                    type: array
                    items:
                        $ref: '#/components/schemas/Anomaly'
                    description: anomalies is the list of anomalies.
                nextPageToken:
                    type: string
                    description: |-
                        Not used. A token, which can be sent as `page_token` to retrieve the next page.
                         If this field is omitted, there are no subsequent pages.
        SearchAuditLogsRequest:
            required:
                - parent
            type: object
            properties:
                parent:
                    type: string
                filter:
                    type: string
                    description: |-
                        The filter of the log. It should be a valid CEL expression.
                         For example:
                          - filter = "method == '/bytebase.v1.SQLService/Query'"
                          - filter = "method == '/bytebase.v1.SQLService/Query' && severity == 'ERROR'"
                          - filter = "method == '/bytebase.v1.SQLService/Query' && severity == 'ERROR' && user == 'users/bb@bytebase.com'"
                          - filter = "method == '/bytebase.v1.SQLService/Query' && severity == 'ERROR' && create_time <= '2021-01-01T00:00:00Z' && create_time >= '2020-01-01T00:00:00Z'"
                orderBy:
                    type: string
                    description: |-
                        The order by of the log.
                         Only support order by create_time.
                         For example:
                          - order_by = "create_time asc"
                          - order_by = "create_time desc"
                pageSize:
                    type: integer
                    description: |-
                        The maximum number of logs to return.
                         The service may return fewer than this value.
                         If unspecified, at most 10 log entries will be returned.
                         The maximum value is 5000; values above 5000 will be coerced to 5000.
                    format: int32
                pageToken:
                    type: string
                    description: |-
                        A page token, received from a previous `SearchLogs` call.
                         Provide this to retrieve the subsequent page.
        SearchAuditLogsResponse:
            type: object
            properties:
                auditLogs:
                    type: array
                    items:
                        $ref: '#/components/schemas/AuditLog'
                nextPageToken:
                    type: string
                    description: |-
                        A token to retrieve next page of log entities.
                         Pass this value in the page_token field in the subsequent call
                         to retrieve the next page of log entities.
        SearchIssuesRequest:
            required:
                - parent
            type: object
            properties:
                parent:
                    type: string
                    description: |-
                        The parent, which owns this collection of issues.
                         Format: projects/{project}
                         Use "projects/-" to list all issues from all projects.
                pageSize:
                    type: integer
                    description: |-
                        The maximum number of issues to return. The service may return fewer than
                         this value.
                         If unspecified, at most 10 issues will be returned.
                         The maximum value is 1000; values above 1000 will be coerced to 1000.
                    format: int32
                pageToken:
                    type: string
                    description: |-
                        A page token, received from a previous `SearchIssues` call.
                         Provide this to retrieve the subsequent page.

                         When paginating, all other parameters provided to `SearchIssues` must match
                         the call that provided the page token.
                filter:
                    type: string
                    description: Filter is used to filter issues returned in the list.
                query:
                    type: string
                    description: Query is the query statement.
        SearchIssuesResponse:
            type: object
            properties:
                issues:
                    type: array
                    items:
                        $ref: '#/components/schemas/Issue'
                    description: The issues from the specified request.
                nextPageToken:
                    type: string
                    description: |-
                        A token, which can be sent as `page_token` to retrieve the next page.
                         If this field is omitted, there are no subsequent pages.
        SearchPlansRequest:
            required:
                - parent
            type: object
            properties:
                parent:
                    type: string
                    description: |-
                        The parent, which owns this collection of plans.
                         Format: projects/{project}
                         Use "projects/-" to list all plans from all projects.
                pageSize:
                    type: integer
                    description: |-
                        The maximum number of plans to return. The service may return fewer than
                         this value.
                         If unspecified, at most 10 plans will be returned.
                         The maximum value is 1000; values above 1000 will be coerced to 1000.
                    format: int32
                pageToken:
                    type: string
                    description: |-
                        A page token, received from a previous `SearchPlans` call.
                         Provide this to retrieve the subsequent page.

                         When paginating, all other parameters provided to `SearchPlans` must match
                         the call that provided the page token.
                filter:
                    type: string
                    description: Filter is used to filter plans returned in the list.
        SearchPlansResponse:
            type: object
            properties:
                plans:
                    type: array
                    items:
                        $ref: '#/components/schemas/Plan'
                    description: The plans from the specified request.
                nextPageToken:
                    type: string
                    description: |-
                        A token, which can be sent as `page_token` to retrieve the next page.
                         If this field is omitted, there are no subsequent pages.
        SearchProjectsRequest:
            type: object
            properties:
                showDeleted:
                    type: boolean
                    description: Show deleted projects if specified.
        SearchProjectsResponse:
            type: object
            properties:
                projects:
                    type: array
                    items:
                        $ref: '#/components/schemas/Project'
                    description: The projects from the specified request.
        SearchQueryHistoriesRequest:
            type: object
            properties:
                pageSize:
                    type: integer
                    description: |-
                        The maximum number of histories to return.
                         The service may return fewer than this value.
                         If unspecified, at most 10 history entries will be returned.
                         The maximum value is 1000; values above 1000 will be coerced to 1000.
                    format: int32
                pageToken:
                    type: string
                    description: |-
                        A page token, received from a previous `ListQueryHistory` call.
                         Provide this to retrieve the subsequent page.
                filter:
                    type: string
                    description: |-
                        filter is the filter to apply on the search query history,
                         follow the
                         [ebnf](https://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_form)
                         syntax. Support filter by:
                         - database, for example:
                            database = "instances/{instance}/databases/{database}"
                         - instance, for example:
                            instance = "instance/{instance}"
                         - type, for example:
                            type = "QUERY"
        SearchQueryHistoriesResponse:
            type: object
            properties:
                queryHistories:
                    readOnly: true
                    type: array
                    items:
                        $ref: '#/components/schemas/QueryHistory'
                    description: The list of history.
                nextPageToken:
                    type: string
                    description: |-
                        A token to retrieve next page of history.
                         Pass this value in the page_token field in the subsequent call to
                         `ListQueryHistory` method to retrieve the next page of history.
        SearchVCSProviderRepositoriesRequest:
            required:
                - name
            type: object
            properties:
                name:
                    type: string
                    description: |-
                        The name of the vcs provider to retrieve the vcs provider repositories.
                         Format: vcsProviders/{vcsProvider}
        SearchVCSProviderRepositoriesResponse:
            type: object
            properties:
                repositories:
                    type: array
                    items:
                        $ref: '#/components/schemas/VCSRepository'
                    description: The list of repositories in vcs provider.
        SearchWorksheetsRequest:
            type: object
            properties:
                filter:
                    type: string
                    description: |-
                        To filter the search result.
                         Format: only support the following spec for now:
                         - `creator = users/{email}`, `creator != users/{email}`
                         - `starred = true`, `starred = false`.
                         - `visibility = "VISIBILITY_PRIVATE"`, `visibility = "VISIBILITY_PROJECT_READ | VISIBILITY_PROJECT_WRITE"`, etc.
                         Not support empty filter for now.
                pageSize:
                    type: integer
                    description: |-
                        Not used.
                         The maximum number of worksheets to return. The service may return fewer than
                         this value.
                         If unspecified, at most 10 worksheets will be returned.
                         The maximum value is 1000; values above 1000 will be coerced to 1000.
                    format: int32
                pageToken:
                    type: string
                    description: |-
                        Not used.
                         A page token, received from a previous `SearchWorksheets` call.
                         Provide this to retrieve the subsequent page.

                         When paginating, all other parameters provided to `SearchWorksheets` must match
                         the call that provided the page token.
        SearchWorksheetsResponse:
            type: object
            properties:
                worksheets:
                    type: array
                    items:
                        $ref: '#/components/schemas/Worksheet'
                    description: The worksheets that matched the search criteria.
                nextPageToken:
                    type: string
                    description: |-
                        Not used. A token, which can be sent as `page_token` to retrieve the next page.
                         If this field is omitted, there are no subsequent pages.
        Secret:
            required:
                - name
            type: object
            properties:
                name:
                    type: string
                    description: |-
                        name is the unique name of the secret, which is specified by the client.
                         Format:
                         instances/{instance}/databases/{database}/secrets/{secret}
                createdTime:
                    readOnly: true
                    type: string
                    description: Not used. The timestamp when the secret resource was created initially.
                    format: date-time
                updatedTime:
                    readOnly: true
                    type: string
                    description: Not used. The timestamp when the secret resource was updated.
                    format: date-time
                value:
                    writeOnly: true
                    type: string
                    description: The value of the secret.
                description:
                    type: string
                    description: The description of the secret.
            description: Secret is the secret of the database now.
        SemanticTypeSetting:
            type: object
            properties:
                types:
                    type: array
                    items:
                        $ref: '#/components/schemas/SemanticTypeSetting_SemanticType'
        SemanticTypeSetting_SemanticType:
            type: object
            properties:
                id:
                    type: string
                    description: id is the uuid for semantic type.
                title:
                    type: string
                    description: the title of the semantic type, it should not be empty.
                description:
                    type: string
                    description: the description of the semantic type, it can be empty.
                algorithm:
                    $ref: '#/components/schemas/Algorithm'
        SetIamPolicyRequest:
            required:
                - resource
                - policy
            type: object
            properties:
                resource:
                    type: string
                    description: |-
                        The name of the resource to set the IAM policy.
                         Format: projects/{project}
                         Format: workspaces/{workspace}
                policy:
                    $ref: '#/components/schemas/IamPolicy'
                etag:
                    type: string
                    description: The current etag of the policy.
        Setting:
            type: object
            properties:
                name:
                    type: string
                    description: |-
                        The resource name of the setting. Must be one of the following forms:

                         - `setting/{setting}`
                         For example, "settings/bb.branding.logo"
                value:
                    allOf:
                        - $ref: '#/components/schemas/Value'
                    description: The value of the setting.
            description: The schema of setting.
        Sheet:
            required:
                - name
                - title
                - content
                - engine
            type: object
            properties:
                name:
                    type: string
                    description: |-
                        The name of the sheet resource, generated by the server.
                         Canonical parent is project.
                         Format: projects/{project}/sheets/{sheet}
                title:
                    type: string
                    description: The title of the sheet.
                creator:
                    readOnly: true
                    type: string
                    description: |-
                        The creator of the Sheet.
                         Format: users/{email}
                createTime:
                    readOnly: true
                    type: string
                    description: The create time of the sheet.
                    format: date-time
                updateTime:
                    readOnly: true
                    type: string
                    description: The last update time of the sheet.
                    format: date-time
                content:
                    type: string
                    description: |-
                        The content of the sheet.
                         By default, it will be cut off, if it doesn't match the `content_size`, you can
                         set the `raw` to true in GetSheet request to retrieve the full content.
                    format: bytes
                contentSize:
                    readOnly: true
                    type: string
                    description: content_size is the full size of the content, may not match the size of the `content` field.
                payload:
                    $ref: '#/components/schemas/SheetPayload'
                engine:
                    enum:
                        - ENGINE_UNSPECIFIED
                        - CLICKHOUSE
                        - MYSQL
                        - POSTGRES
                        - SNOWFLAKE
                        - SQLITE
                        - TIDB
                        - MONGODB
                        - REDIS
                        - ORACLE
                        - SPANNER
                        - MSSQL
                        - REDSHIFT
                        - MARIADB
                        - OCEANBASE
                        - DM
                        - RISINGWAVE
                        - OCEANBASE_ORACLE
                        - STARROCKS
                        - DORIS
                        - HIVE
                        - ELASTICSEARCH
                        - BIGQUERY
                        - DYNAMODB
                        - DATABRICKS
                        - COCKROACHDB
                        - COSMOSDB
                    type: string
                    description: The SQL dialect.
                    format: enum
        SheetCommand:
            type: object
            properties:
                start:
                    type: integer
                    format: int32
                end:
                    type: integer
                    format: int32
        SheetPayload:
            type: object
            properties:
                type:
                    enum:
                        - TYPE_UNSPECIFIED
                        - SCHEMA_DESIGN
                    type: string
                    format: enum
                commands:
                    type: array
                    items:
                        $ref: '#/components/schemas/SheetCommand'
                    description: The start and end position of each command in the sheet statement.
        SlowQueryDetails:
            type: object
            properties:
                startTime:
                    type: string
                    description: The start time of the slow query log.
                    format: date-time
                queryTime:
                    pattern: ^-?(?:0|[1-9][0-9]{0,11})(?:\.[0-9]{1,9})?s$
                    type: string
                    description: The query time of the slow query log.
                lockTime:
                    pattern: ^-?(?:0|[1-9][0-9]{0,11})(?:\.[0-9]{1,9})?s$
                    type: string
                    description: The lock time of the slow query log.
                rowsSent:
                    type: string
                    description: The rows sent of the slow query log.
                rowsExamined:
                    type: string
                    description: The rows examined of the slow query log.
                sqlText:
                    type: string
                    description: The sql text of the slow query log.
            description: SlowQueryDetails is the details of the slow query log.
        SlowQueryLog:
            required:
                - resource
            type: object
            properties:
                resource:
                    type: string
                    description: |-
                        The resource of the slow query log.
                         The format is "instances/{instance}/databases/{database}".
                project:
                    type: string
                    description: |-
                        The project of the slow query log.
                         The format is "projects/{project}".
                statistics:
                    allOf:
                        - $ref: '#/components/schemas/SlowQueryStatistics'
                    description: The statistics of the slow query log.
            description: SlowQueryLog is the slow query log.
        SlowQueryPolicy:
            type: object
            properties:
                active:
                    type: boolean
        SlowQueryStatistics:
            type: object
            properties:
                sqlFingerprint:
                    type: string
                    description: The fingerprint of the slow query log.
                count:
                    type: string
                    description: The count of the slow query log.
                latestLogTime:
                    type: string
                    description: The latest log time of the slow query log.
                    format: date-time
                averageQueryTime:
                    pattern: ^-?(?:0|[1-9][0-9]{0,11})(?:\.[0-9]{1,9})?s$
                    type: string
                    description: The average query time of the slow query log.
                maximumQueryTime:
                    pattern: ^-?(?:0|[1-9][0-9]{0,11})(?:\.[0-9]{1,9})?s$
                    type: string
                    description: The maximum query time of the slow query log.
                averageRowsSent:
                    type: string
                    description: The average rows sent of the slow query log.
                maximumRowsSent:
                    type: string
                    description: The maximum rows sent of the slow query log.
                averageRowsExamined:
                    type: string
                    description: The average rows examined of the slow query log.
                maximumRowsExamined:
                    type: string
                    description: The maximum rows examined of the slow query log.
                queryTimePercent:
                    type: number
                    description: The percentage of the query time.
                    format: double
                countPercent:
                    type: number
                    description: The percentage of the count.
                    format: double
                samples:
                    type: array
                    items:
                        $ref: '#/components/schemas/SlowQueryDetails'
                    description: |-
                        Samples are details of the sample slow query logs with the same
                         fingerprint.
            description: SlowQueryStatistics is the statistics of the slow query log.
        Stage:
            type: object
            properties:
                name:
                    type: string
                    description: 'Format: projects/{project}/rollouts/{rollout}/stages/{stage}'
                id:
                    readOnly: true
                    type: string
                    description: |-
                        The id comes from the deployment config.
                         Format: UUID
                         Empty for legacy stages.
                title:
                    type: string
                tasks:
                    type: array
                    items:
                        $ref: '#/components/schemas/Task'
        Status:
            type: object
            properties:
                code:
                    type: integer
                    description: The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].
                    format: int32
                message:
                    type: string
                    description: A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client.
                details:
                    type: array
                    items:
                        $ref: '#/components/schemas/GoogleProtobufAny'
                    description: A list of messages that carry the error details.  There is a common set of message types for APIs to use.
            description: 'The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).'
        StringifyMetadataRequest:
            required:
                - metadata
            type: object
            properties:
                metadata:
                    $ref: '#/components/schemas/DatabaseMetadata'
                engine:
                    enum:
                        - ENGINE_UNSPECIFIED
                        - CLICKHOUSE
                        - MYSQL
                        - POSTGRES
                        - SNOWFLAKE
                        - SQLITE
                        - TIDB
                        - MONGODB
                        - REDIS
                        - ORACLE
                        - SPANNER
                        - MSSQL
                        - REDSHIFT
                        - MARIADB
                        - OCEANBASE
                        - DM
                        - RISINGWAVE
                        - OCEANBASE_ORACLE
                        - STARROCKS
                        - DORIS
                        - HIVE
                        - ELASTICSEARCH
                        - BIGQUERY
                        - DYNAMODB
                        - DATABRICKS
                        - COCKROACHDB
                        - COSMOSDB
                    type: string
                    description: The database engine of the schema string.
                    format: enum
                classificationFromConfig:
                    type: boolean
                    description: If false, we will build the raw common by classification in database catalog.
                catalog:
                    allOf:
                        - $ref: '#/components/schemas/DatabaseCatalog'
                    description: Database catlog is required if classification_from_config is false.
        StringifyMetadataResponse:
            type: object
            properties:
                schema:
                    readOnly: true
                    type: string
        Subscription:
            type: object
            properties:
                seatCount:
                    readOnly: true
                    type: integer
                    format: int32
                instanceCount:
                    readOnly: true
                    type: integer
                    format: int32
                expiresTime:
                    readOnly: true
                    type: string
                    format: date-time
                startedTime:
                    readOnly: true
                    type: string
                    format: date-time
                plan:
                    readOnly: true
                    enum:
                        - PLAN_TYPE_UNSPECIFIED
                        - FREE
                        - TEAM
                        - ENTERPRISE
                    type: string
                    format: enum
                trialing:
                    readOnly: true
                    type: boolean
                orgId:
                    readOnly: true
                    type: string
                orgName:
                    readOnly: true
                    type: string
        SyncDatabaseRequest:
            required:
                - name
            type: object
            properties:
                name:
                    type: string
                    description: |-
                        The name of the database to sync.
                         Format: instances/{instance}/databases/{database}
        SyncDatabaseResponse:
            type: object
            properties: {}
        SyncInstanceRequest:
            required:
                - name
            type: object
            properties:
                name:
                    type: string
                    description: |-
                        The name of instance.
                         Format: instances/{instance}
                enableFullSync:
                    type: boolean
                    description: |-
                        When full sync is enabled, all databases in the instance will be synchronized. Otherwise, only
                         the instance metadata (such as the database list) and any newly discovered instances will be synced.
        SyncInstanceResponse:
            type: object
            properties:
                databases:
                    type: array
                    items:
                        type: string
                    description: All database name list in the instance.
        SyncSlowQueriesRequest:
            required:
                - parent
            type: object
            properties:
                parent:
                    type: string
                    description: |-
                        The name of the instance to sync slow queries.
                         Format: instances/{instance} for one instance
                              or projects/{project} for one project.
        TableCatalog:
            type: object
            properties:
                name:
                    type: string
                columns:
                    $ref: '#/components/schemas/TableCatalog_Columns'
                objectSchema:
                    $ref: '#/components/schemas/ObjectSchema'
                classification:
                    type: string
        TableCatalog_Columns:
            type: object
            properties:
                columns:
                    type: array
                    items:
                        $ref: '#/components/schemas/ColumnCatalog'
        TableMetadata:
            type: object
            properties:
                name:
                    type: string
                    description: The name is the name of a table.
                columns:
                    type: array
                    items:
                        $ref: '#/components/schemas/ColumnMetadata'
                    description: The columns is the ordered list of columns in a table.
                indexes:
                    type: array
                    items:
                        $ref: '#/components/schemas/IndexMetadata'
                    description: The indexes is the list of indexes in a table.
                engine:
                    type: string
                    description: The engine is the engine of a table.
                collation:
                    type: string
                    description: The collation is the collation of a table.
                charset:
                    type: string
                    description: The character set of table.
                rowCount:
                    type: string
                    description: The row_count is the estimated number of rows of a table.
                dataSize:
                    type: string
                    description: The data_size is the estimated data size of a table.
                indexSize:
                    type: string
                    description: The index_size is the estimated index size of a table.
                dataFree:
                    type: string
                    description: The data_free is the estimated free data size of a table.
                createOptions:
                    type: string
                    description: The create_options is the create option of a table.
                comment:
                    type: string
                    description: |-
                        The comment is the comment of a table.
                         classification and user_comment is parsed from the comment.
                userComment:
                    type: string
                    description: The user_comment is the user comment of a table parsed from the comment.
                foreignKeys:
                    type: array
                    items:
                        $ref: '#/components/schemas/ForeignKeyMetadata'
                    description: The foreign_keys is the list of foreign keys in a table.
                partitions:
                    type: array
                    items:
                        $ref: '#/components/schemas/TablePartitionMetadata'
                    description: The partitions is the list of partitions in a table.
                checkConstraints:
                    type: array
                    items:
                        $ref: '#/components/schemas/CheckConstraintMetadata'
                    description: The check_constraints is the list of check constraints in a table.
                owner:
                    type: string
                sortingKeys:
                    type: array
                    items:
                        type: string
                    description: |-
                        The sorting_keys is a tuple of column names or arbitrary expressions. ClickHouse specific field.
                         Reference: https://clickhouse.com/docs/en/engines/table-engines/mergetree-family/mergetree#order_by
                triggers:
                    type: array
                    items:
                        $ref: '#/components/schemas/TriggerMetadata'
            description: TableMetadata is the metadata for tables.
        TablePartitionMetadata:
            type: object
            properties:
                name:
                    type: string
                    description: The name is the name of a table partition.
                type:
                    enum:
                        - TYPE_UNSPECIFIED
                        - RANGE
                        - RANGE_COLUMNS
                        - LIST
                        - LIST_COLUMNS
                        - HASH
                        - LINEAR_HASH
                        - KEY
                        - LINEAR_KEY
                    type: string
                    description: The type of a table partition.
                    format: enum
                expression:
                    type: string
                    description: |-
                        The expression is the expression of a table partition.
                         For PostgreSQL, the expression is the text of {FOR VALUES
                         partition_bound_spec}, see
                         https://www.postgresql.org/docs/current/sql-createtable.html. For MySQL,
                         the expression is the `expr` or `column_list` of the following syntax.
                         PARTITION BY
                            { [LINEAR] HASH(expr)
                            | [LINEAR] KEY [ALGORITHM={1 | 2}] (column_list)
                            | RANGE{(expr) | COLUMNS(column_list)}
                            | LIST{(expr) | COLUMNS(column_list)} }.
                value:
                    type: string
                    description: |-
                        The value is the value of a table partition.
                         For MySQL, the value is for RANGE and LIST partition types,
                         - For a RANGE partition, it contains the value set in the partition's
                         VALUES LESS THAN clause, which can be either an integer or MAXVALUE.
                         - For a LIST partition, this column contains the values defined in the
                         partition's VALUES IN clause, which is a list of comma-separated integer
                         values.
                         - For others, it's an empty string.
                useDefault:
                    type: string
                    description: |-
                        The use_default is whether the users use the default partition, it stores
                         the different value for different database engines. For MySQL, it's [INT]
                         type, 0 means not use default partition, otherwise, it's equals to number
                         in syntax [SUB]PARTITION {number}.
                subpartitions:
                    type: array
                    items:
                        $ref: '#/components/schemas/TablePartitionMetadata'
                    description: The subpartitions is the list of subpartitions in a table partition.
                indexes:
                    type: array
                    items:
                        $ref: '#/components/schemas/IndexMetadata'
            description: TablePartitionMetadata is the metadata for table partitions.
        TagPolicy:
            type: object
            properties:
                tags:
                    type: object
                    additionalProperties:
                        type: string
                    description: |-
                        tags is the key - value map for resources.
                         for example, the environment resource can have the sql review config tag, like "bb.tag.review_config": "reviewConfigs/{review config resource id}"
        Task:
            type: object
            properties:
                name:
                    type: string
                    description: 'Format: projects/{project}/rollouts/{rollout}/stages/{stage}/tasks/{task}'
                title:
                    type: string
                specId:
                    type: string
                    description: |-
                        A UUID4 string that uniquely identifies the Spec.
                         Could be empty if the rollout of the task does not have an associating plan.
                status:
                    enum:
                        - STATUS_UNSPECIFIED
                        - NOT_STARTED
                        - PENDING
                        - RUNNING
                        - DONE
                        - FAILED
                        - CANCELED
                        - SKIPPED
                    type: string
                    description: Status is the status of the task.
                    format: enum
                skippedReason:
                    type: string
                type:
                    enum:
                        - TYPE_UNSPECIFIED
                        - GENERAL
                        - DATABASE_CREATE
                        - DATABASE_SCHEMA_BASELINE
                        - DATABASE_SCHEMA_UPDATE
                        - DATABASE_SCHEMA_UPDATE_SDL
                        - DATABASE_SCHEMA_UPDATE_GHOST_SYNC
                        - DATABASE_SCHEMA_UPDATE_GHOST_CUTOVER
                        - DATABASE_DATA_UPDATE
                        - DATABASE_DATA_EXPORT
                    type: string
                    format: enum
                dependsOnTasks:
                    type: array
                    items:
                        type: string
                    description: 'Format: projects/{project}/rollouts/{rollout}/stages/{stage}/tasks/{task}'
                target:
                    type: string
                    description: |-
                        Format: instances/{instance} if the task is DatabaseCreate.
                         Format: instances/{instance}/databases/{database}
                databaseCreate:
                    $ref: '#/components/schemas/Task_DatabaseCreate'
                databaseSchemaBaseline:
                    $ref: '#/components/schemas/Task_DatabaseSchemaBaseline'
                databaseSchemaUpdate:
                    $ref: '#/components/schemas/Task_DatabaseSchemaUpdate'
                databaseDataUpdate:
                    $ref: '#/components/schemas/Task_DatabaseDataUpdate'
                databaseDataExport:
                    $ref: '#/components/schemas/Task_DatabaseDataExport'
        TaskPriorBackup_Table:
            type: object
            properties:
                schema:
                    type: string
                table:
                    type: string
        TaskRun:
            type: object
            properties:
                name:
                    type: string
                    description: 'Format: projects/{project}/rollouts/{rollout}/stages/{stage}/tasks/{task}/taskRuns/{taskRun}'
                creator:
                    type: string
                    description: 'Format: user/hello@world.com'
                updater:
                    type: string
                    description: 'Format: user/hello@world.com'
                createTime:
                    readOnly: true
                    type: string
                    format: date-time
                updateTime:
                    readOnly: true
                    type: string
                    format: date-time
                title:
                    type: string
                status:
                    enum:
                        - STATUS_UNSPECIFIED
                        - PENDING
                        - RUNNING
                        - DONE
                        - FAILED
                        - CANCELED
                    type: string
                    format: enum
                detail:
                    type: string
                    description: Below are the results of a task run.
                changelog:
                    readOnly: true
                    type: string
                    description: |-
                        The resource name of the changelog.
                         Format: instances/{instance}/databases/{database}/changelogs/{changelog}
                schemaVersion:
                    type: string
                startTime:
                    readOnly: true
                    type: string
                    format: date-time
                exportArchiveStatus:
                    enum:
                        - EXPORT_ARCHIVE_STATUS_UNSPECIFIED
                        - READY
                        - EXPORTED
                    type: string
                    format: enum
                priorBackupDetail:
                    allOf:
                        - $ref: '#/components/schemas/TaskRun_PriorBackupDetail'
                    description: The prior backup detail that will be used to rollback the task run.
                schedulerInfo:
                    readOnly: true
                    allOf:
                        - $ref: '#/components/schemas/TaskRun_SchedulerInfo'
                sheet:
                    readOnly: true
                    type: string
                    description: 'Format: projects/{project}/sheets/{sheet}'
        TaskRunLog:
            type: object
            properties:
                type:
                    enum:
                        - TYPE_UNSPECIFIED
                        - SCHEMA_DUMP_START
                        - SCHEMA_DUMP_END
                        - COMMAND_EXECUTE
                        - COMMAND_RESPONSE
                        - DATABASE_SYNC_START
                        - DATABASE_SYNC_END
                        - TASK_RUN_STATUS_UPDATE
                        - TRANSACTION_CONTROL
                        - PRIOR_BACKUP_START
                        - PRIOR_BACKUP_END
                    type: string
                    format: enum
                deployId:
                    type: string
                schemaDumpStart:
                    $ref: '#/components/schemas/TaskRunLog_SchemaDumpStart'
                schemaDumpEnd:
                    $ref: '#/components/schemas/TaskRunLog_SchemaDumpEnd'
                commandExecute:
                    $ref: '#/components/schemas/TaskRunLog_CommandExecute'
                commandResponse:
                    $ref: '#/components/schemas/TaskRunLog_CommandResponse'
                databaseSyncStart:
                    $ref: '#/components/schemas/TaskRunLog_DatabaseSyncStart'
                databaseSyncEnd:
                    $ref: '#/components/schemas/TaskRunLog_DatabaseSyncEnd'
                taskRunStatusUpdate:
                    $ref: '#/components/schemas/TaskRunLog_TaskRunStatusUpdate'
                transactionControl:
                    $ref: '#/components/schemas/TaskRunLog_TransactionControl'
                priorBackupStart:
                    $ref: '#/components/schemas/TaskRunLog_PriorBackupStart'
                priorBackupEnd:
                    $ref: '#/components/schemas/TaskRunLog_PriorBackupEnd'
        TaskRunLog_CommandExecute:
            type: object
            properties:
                commandIndexes:
                    type: array
                    items:
                        type: integer
                        format: int32
                    description: The indexes of the executed commands.
        TaskRunLog_CommandResponse:
            type: object
            properties:
                commandIndexes:
                    type: array
                    items:
                        type: integer
                        format: int32
                    description: The indexes of the executed commands.
                error:
                    type: string
                affectedRows:
                    type: integer
                    format: int32
                allAffectedRows:
                    type: array
                    items:
                        type: integer
                        format: int32
                    description: |-
                        `all_affected_rows` is the affected rows of each command.
                         `all_affected_rows` may be unavailable if the database driver doesn't support it. Caller should fallback to `affected_rows` in that case.
        TaskRunLog_DatabaseSyncEnd:
            type: object
            properties:
                error:
                    type: string
        TaskRunLog_DatabaseSyncStart:
            type: object
            properties: {}
        TaskRunLog_PriorBackupEnd:
            type: object
            properties:
                priorBackupDetail:
                    $ref: '#/components/schemas/PriorBackupDetail'
                error:
                    type: string
        TaskRunLog_PriorBackupStart:
            type: object
            properties: {}
        TaskRunLog_SchemaDumpEnd:
            type: object
            properties:
                error:
                    type: string
        TaskRunLog_SchemaDumpStart:
            type: object
            properties: {}
        TaskRunLog_TaskRunStatusUpdate:
            type: object
            properties:
                status:
                    enum:
                        - STATUS_UNSPECIFIED
                        - RUNNING_WAITING
                        - RUNNING_RUNNING
                    type: string
                    format: enum
        TaskRunLog_TransactionControl:
            type: object
            properties:
                type:
                    enum:
                        - TYPE_UNSPECIFIED
                        - BEGIN
                        - COMMIT
                        - ROLLBACK
                    type: string
                    format: enum
                error:
                    type: string
        TaskRunSession:
            type: object
            properties:
                name:
                    type: string
                    description: 'Format: projects/{project}/rollouts/{rollout}/stages/{stage}/tasks/{task}/taskRuns/{taskRun}/session'
                postgres:
                    $ref: '#/components/schemas/TaskRunSession_Postgres'
        TaskRunSession_Postgres:
            type: object
            properties:
                session:
                    allOf:
                        - $ref: '#/components/schemas/Postgres_Session'
                    description: '`session` is the session of the task run executing commands.'
                blockingSessions:
                    type: array
                    items:
                        $ref: '#/components/schemas/Postgres_Session'
                    description: '`blocking_sessions` block `session`.'
                blockedSessions:
                    type: array
                    items:
                        $ref: '#/components/schemas/Postgres_Session'
                    description: '`blocked_sessions` are blocked by `session`.'
        TaskRun_PriorBackupDetail:
            type: object
            properties:
                items:
                    type: array
                    items:
                        $ref: '#/components/schemas/PriorBackupDetail_Item'
        TaskRun_SchedulerInfo:
            type: object
            properties:
                reportTime:
                    type: string
                    format: date-time
                waitingCause:
                    $ref: '#/components/schemas/SchedulerInfo_WaitingCause'
        Task_DatabaseCreate:
            type: object
            properties:
                project:
                    type: string
                    description: |-
                        The project owning the database.
                         Format: projects/{project}
                database:
                    type: string
                    description: database name
                table:
                    type: string
                    description: table name
                sheet:
                    type: string
                    description: 'Format: projects/{project}/sheets/{sheet}'
                characterSet:
                    type: string
                collation:
                    type: string
                environment:
                    type: string
                labels:
                    type: object
                    additionalProperties:
                        type: string
        Task_DatabaseDataExport:
            type: object
            properties:
                target:
                    type: string
                    description: |-
                        The resource name of the target.
                         Format: instances/{instance-id}/databases/{database-name}
                sheet:
                    type: string
                    description: |-
                        The resource name of the sheet.
                         Format: projects/{project}/sheets/{sheet}
                format:
                    enum:
                        - FORMAT_UNSPECIFIED
                        - CSV
                        - JSON
                        - SQL
                        - XLSX
                    type: string
                    description: The format of the exported file.
                    format: enum
                password:
                    type: string
                    description: |-
                        The zip password provide by users.
                         Leave it empty if no needs to encrypt the zip file.
        Task_DatabaseDataUpdate:
            type: object
            properties:
                sheet:
                    type: string
                    description: 'Format: projects/{project}/sheets/{sheet}'
                schemaVersion:
                    type: string
        Task_DatabaseSchemaBaseline:
            type: object
            properties:
                schemaVersion:
                    type: string
        Task_DatabaseSchemaUpdate:
            type: object
            properties:
                sheet:
                    type: string
                    description: 'Format: projects/{project}/sheets/{sheet}'
                schemaVersion:
                    type: string
        TestIdentityProviderRequest:
            type: object
            properties:
                identityProvider:
                    allOf:
                        - $ref: '#/components/schemas/IdentityProvider'
                    description: The identity provider to test connection including uncreated.
                oauth2Context:
                    $ref: '#/components/schemas/OAuth2IdentityProviderTestRequestContext'
        TestIdentityProviderResponse:
            type: object
            properties: {}
        TestWebhookRequest:
            required:
                - project
                - webhook
            type: object
            properties:
                project:
                    type: string
                    description: |-
                        The name of the project which owns the webhook to test.
                         Format: projects/{project}
                webhook:
                    allOf:
                        - $ref: '#/components/schemas/Webhook'
                    description: The webhook to test. Identified by its url.
        TestWebhookResponse:
            type: object
            properties:
                error:
                    type: string
                    description: The result of the test, empty if the test is successful.
        TriggerMetadata:
            type: object
            properties:
                name:
                    type: string
                    description: The name is the name of the trigger.
                event:
                    type: string
                    description: |-
                        The event is the event of the trigger, such as INSERT, UPDATE, DELETE,
                         TRUNCATE.
                timing:
                    type: string
                    description: The timing is the timing of the trigger, such as BEFORE, AFTER.
                body:
                    type: string
                    description: The body is the body of the trigger.
                sqlMode:
                    type: string
                characterSetClient:
                    type: string
                collationConnection:
                    type: string
                comment:
                    type: string
        UndeleteEnvironmentRequest:
            required:
                - name
            type: object
            properties:
                name:
                    type: string
                    description: |-
                        The name of the deleted environment.
                         Format: environments/{environment}
        UndeleteIdentityProviderRequest:
            required:
                - name
            type: object
            properties:
                name:
                    type: string
                    description: |-
                        The name of the deleted identity provider.
                         Format: idps/{identity_provider}
        UndeleteInstanceRequest:
            required:
                - name
            type: object
            properties:
                name:
                    type: string
                    description: |-
                        The name of the deleted instance.
                         Format: instances/{instance}
        UndeleteProjectRequest:
            required:
                - name
            type: object
            properties:
                name:
                    type: string
                    description: |-
                        The name of the deleted project.
                         Format: projects/{project}
        UndeleteUserRequest:
            required:
                - name
            type: object
            properties:
                name:
                    type: string
                    description: |-
                        The name of the deleted user.
                         Format: users/{user}
        UpdateDataSourceRequest:
            required:
                - name
                - dataSource
            type: object
            properties:
                name:
                    type: string
                    description: |-
                        The name of the instance to update a data source.
                         Format: instances/{instance}
                dataSource:
                    allOf:
                        - $ref: '#/components/schemas/DataSource'
                    description: Identified by data source ID.
                updateMask:
                    type: string
                    description: The list of fields to update.
                    format: field-mask
                validateOnly:
                    type: boolean
                    description: Validate only also tests the data source connection.
        UpdateDatabaseRequest:
            required:
                - database
            type: object
            properties:
                database:
                    allOf:
                        - $ref: '#/components/schemas/Database'
                    description: |-
                        The database to update.

                         The database's `name` field is used to identify the database to update.
                         Format: instances/{instance}/databases/{database}
                updateMask:
                    type: string
                    description: The list of fields to update.
                    format: field-mask
        UpdateWebhookRequest:
            required:
                - webhook
            type: object
            properties:
                webhook:
                    allOf:
                        - $ref: '#/components/schemas/Webhook'
                    description: The webhook to modify.
                updateMask:
                    type: string
                    description: The list of fields to update.
                    format: field-mask
        User:
            type: object
            properties:
                name:
                    readOnly: true
                    type: string
                    description: |-
                        The name of the user.
                         Format: users/{user}. {user} is a system-generated unique ID.
                state:
                    enum:
                        - STATE_UNSPECIFIED
                        - ACTIVE
                        - DELETED
                    type: string
                    format: enum
                email:
                    type: string
                title:
                    type: string
                userType:
                    enum:
                        - USER_TYPE_UNSPECIFIED
                        - USER
                        - SYSTEM_BOT
                        - SERVICE_ACCOUNT
                    type: string
                    format: enum
                password:
                    writeOnly: true
                    type: string
                serviceKey:
                    writeOnly: true
                    type: string
                mfaEnabled:
                    type: boolean
                    description: The mfa_enabled flag means if the user has enabled MFA.
                mfaSecret:
                    type: string
                    description: The mfa_secret is the temporary secret using in two phase verification.
                recoveryCodes:
                    type: array
                    items:
                        type: string
                    description: The recovery_codes is the temporary recovery codes using in two phase verification.
                phone:
                    type: string
                    description: |-
                        Should be a valid E.164 compliant phone number.
                         Could be empty.
                profile:
                    $ref: '#/components/schemas/User_Profile'
        User_Profile:
            type: object
            properties:
                lastLoginTime:
                    type: string
                    format: date-time
                lastChangePasswordTime:
                    type: string
                    format: date-time
                source:
                    type: string
                    description: source means where the user comes from. For now we support Entra ID SCIM sync, so the source could be Entra ID.
        VCSConnector:
            type: object
            properties:
                title:
                    type: string
                    description: The title or display name of the VCS connector.
                fullPath:
                    type: string
                    description: |-
                        Full path from the corresponding VCS provider.
                         For GitLab, this is the project full path. e.g. group1/project-1
                webUrl:
                    type: string
                    description: |-
                        Web url from the corresponding VCS provider.
                         For GitLab, this is the project web url. e.g. https://gitlab.example.com/group1/project-1
                branch:
                    type: string
                    description: Branch to listen to.
                baseDirectory:
                    type: string
                    description: Base working directory we are interested.
                externalId:
                    type: string
                    description: |-
                        Repository id from the corresponding VCS provider.
                         For GitLab, this is the project id. e.g. 123
                externalWebhookId:
                    type: string
                    description: |-
                        Push webhook id from the corresponding VCS provider.
                         For GitLab, this is the project webhook id. e.g. 123
                webhookSecretToken:
                    type: string
                    description: For GitLab, webhook request contains this in the 'X-Gitlab-Token" header and we compare it with the one stored in db to validate it sends to the expected endpoint.
                databaseGroup:
                    type: string
                    description: |-
                        Apply changes to the database group. Optional, if not set, will apply changes to all databases in the project.
                         Format: projects/{project}/databaseGroups/{databaseGroup}
        VCSProvider:
            required:
                - title
                - type
                - url
            type: object
            properties:
                name:
                    readOnly: true
                    type: string
                    description: |-
                        The name of the vcs provider.
                         Format: vcsProviders/{vcsProvider}
                title:
                    type: string
                    description: The title of the vcs provider. It is used to display in the UI. Specified by the client.
                type:
                    enum:
                        - VCS_TYPE_UNSPECIFIED
                        - GITHUB
                        - GITLAB
                        - BITBUCKET
                        - AZURE_DEVOPS
                    type: string
                    format: enum
                url:
                    type: string
                    description: |-
                        The url of the vcs provider. Specified by the client.
                         For example: github.com, gitlab.com, gitlab.bytebase.com.
                accessToken:
                    writeOnly: true
                    type: string
                    description: The access token of the vcs provider.
        VCSRepository:
            type: object
            properties:
                id:
                    type: string
                    description: |-
                        The id of the repository in vcs provider.
                         e.g. In GitLab, this is the corresponding project id. e.g. 123
                title:
                    type: string
                    description: |-
                        The title of the repository in vcs provider.
                         e.g. sample-project
                fullPath:
                    type: string
                    description: |-
                        The full_path of the repository in vcs provider.
                         e.g. bytebase/sample-project
                webUrl:
                    type: string
                    description: |-
                        Web url of the repository in vcs provider.
                         e.g. http://gitlab.bytebase.com/bytebase/sample-project
        Value:
            type: object
            properties:
                stringValue:
                    type: string
                    description: Defines this value as being a string value.
                smtpMailDeliverySettingValue:
                    $ref: '#/components/schemas/SMTPMailDeliverySettingValue'
                appImSettingValue:
                    $ref: '#/components/schemas/AppIMSetting'
                agentPluginSettingValue:
                    $ref: '#/components/schemas/AgentPluginSetting'
                workspaceProfileSettingValue:
                    $ref: '#/components/schemas/WorkspaceProfileSetting'
                workspaceApprovalSettingValue:
                    $ref: '#/components/schemas/WorkspaceApprovalSetting'
                workspaceTrialSettingValue:
                    $ref: '#/components/schemas/WorkspaceTrialSetting'
                externalApprovalSettingValue:
                    $ref: '#/components/schemas/ExternalApprovalSetting'
                schemaTemplateSettingValue:
                    $ref: '#/components/schemas/SchemaTemplateSetting'
                dataClassificationSettingValue:
                    $ref: '#/components/schemas/DataClassificationSetting'
                semanticTypeSettingValue:
                    $ref: '#/components/schemas/SemanticTypeSetting'
                maximumSqlResultSizeSetting:
                    $ref: '#/components/schemas/MaximumSQLResultSizeSetting'
                scimSetting:
                    $ref: '#/components/schemas/SCIMSetting'
                passwordRestrictionSetting:
                    $ref: '#/components/schemas/PasswordRestrictionSetting'
            description: The data in setting value.
        Webhook:
            required:
                - type
                - title
                - url
            type: object
            properties:
                name:
                    type: string
                    description: |-
                        name is the name of the webhook, generated by the server.
                         format: projects/{project}/webhooks/{webhook}
                type:
                    enum:
                        - TYPE_UNSPECIFIED
                        - TYPE_SLACK
                        - TYPE_DISCORD
                        - TYPE_TEAMS
                        - TYPE_DINGTALK
                        - TYPE_FEISHU
                        - TYPE_WECOM
                        - TYPE_CUSTOM
                        - TYPE_LARK
                    type: string
                    description: type is the type of the webhook.
                    format: enum
                title:
                    type: string
                    description: title is the title of the webhook.
                url:
                    type: string
                    description: url is the url of the webhook, should be unique within the project.
                directMessage:
                    type: boolean
                    description: |-
                        if direct_message is set, the notification is sent directly
                         to the persons and url will be ignored.
                         IM integration setting should be set for this function to work.
                notificationTypes:
                    type: array
                    items:
                        enum:
                            - TYPE_UNSPECIFIED
                            - TYPE_NOTIFY_ISSUE_APPROVED
                            - TYPE_NOTIFY_PIPELINE_ROLLOUT
                            - TYPE_ISSUE_CREATE
                            - TYPE_ISSUE_COMMENT_CREATE
                            - TYPE_ISSUE_FIELD_UPDATE
                            - TYPE_ISSUE_STATUS_UPDATE
                            - TYPE_ISSUE_APPROVAL_NOTIFY
                            - TYPE_ISSUE_PIPELINE_STAGE_STATUS_UPDATE
                            - TYPE_ISSUE_PIPELINE_TASK_STATUS_UPDATE
                            - TYPE_ISSUE_PIPELINE_TASK_RUN_STATUS_UPDATE
                            - TYPE_ISSUE_PIPELINE_TASK_STATEMENT_UPDATE
                            - TYPE_ISSUE_PIPELINE_TASK_EARLIEST_ALLOWED_TIME_UPDATE
                            - TYPE_MEMBER_CREATE
                            - TYPE_MEMBER_ROLE_UPDATE
                            - TYPE_MEMBER_ACTIVATE
                            - TYPE_MEMBER_DEACTIVATE
                            - TYPE_PROJECT_REPOSITORY_PUSH
                            - TYPE_PROJECT_DATABASE_TRANSFER
                            - TYPE_PROJECT_MEMBER_CREATE
                            - TYPE_PROJECT_MEMBER_DELETE
                            - TYPE_SQL_EDITOR_QUERY
                        type: string
                        format: enum
                    description: |-
                        notification_types is the list of activities types that the webhook is interested in.
                         Bytebase will only send notifications to the webhook if the activity type is in the list.
                         It should not be empty, and should be a subset of the following:
                         - TYPE_ISSUE_CREATED
                         - TYPE_ISSUE_STATUS_UPDATE
                         - TYPE_ISSUE_PIPELINE_STAGE_UPDATE
                         - TYPE_ISSUE_PIPELINE_TASK_STATUS_UPDATE
                         - TYPE_ISSUE_FIELD_UPDATE
                         - TYPE_ISSUE_COMMENT_CREATE
        Worksheet:
            required:
                - name
                - project
                - title
                - content
                - visibility
            type: object
            properties:
                name:
                    type: string
                    description: |-
                        The name of the worksheet resource, generated by the server.
                         Canonical parent is project.
                         Format: worksheets/{worksheet}
                project:
                    type: string
                    description: |-
                        The project resource name.
                         Format: projects/{project}
                database:
                    type: string
                    description: |-
                        The database resource name.
                         Format: instances/{instance}/databases/{database}
                         If the database parent doesn't exist, the database field is empty.
                title:
                    type: string
                    description: The title of the worksheet.
                creator:
                    readOnly: true
                    type: string
                    description: |-
                        The creator of the Worksheet.
                         Format: users/{email}
                createTime:
                    readOnly: true
                    type: string
                    description: The create time of the worksheet.
                    format: date-time
                updateTime:
                    readOnly: true
                    type: string
                    description: The last update time of the worksheet.
                    format: date-time
                content:
                    type: string
                    description: |-
                        The content of the worksheet.
                         By default, it will be cut off in SearchWorksheet() method. If it doesn't match the `content_size`, you can
                         use GetWorksheet() request to retrieve the full content.
                    format: bytes
                contentSize:
                    readOnly: true
                    type: string
                    description: content_size is the full size of the content, may not match the size of the `content` field.
                visibility:
                    enum:
                        - VISIBILITY_UNSPECIFIED
                        - VISIBILITY_PROJECT_READ
                        - VISIBILITY_PROJECT_WRITE
                        - VISIBILITY_PRIVATE
                    type: string
                    format: enum
                starred:
                    readOnly: true
                    type: boolean
                    description: starred indicates whether the worksheet is starred by the current authenticated user.
        WorksheetOrganizer:
            required:
                - worksheet
            type: object
            properties:
                worksheet:
                    type: string
                    description: |-
                        The name of the worksheet.
                         Format: worksheets/{worksheet}
                starred:
                    type: boolean
                    description: starred means if the worksheet is starred.
        WorkspaceApprovalSetting:
            type: object
            properties:
                rules:
                    type: array
                    items:
                        $ref: '#/components/schemas/WorkspaceApprovalSetting_Rule'
        WorkspaceApprovalSetting_Rule:
            type: object
            properties:
                expression:
                    $ref: '#/components/schemas/Expr'
                template:
                    $ref: '#/components/schemas/ApprovalTemplate'
                condition:
                    $ref: '#/components/schemas/Expr'
        WorkspaceProfileSetting:
            type: object
            properties:
                externalUrl:
                    type: string
                    description: |-
                        The URL user visits Bytebase.

                         The external URL is used for:
                         1. Constructing the correct callback URL when configuring the VCS provider. The callback URL points to the frontend.
                         2. Creating the correct webhook endpoint when configuring the project GitOps workflow. The webhook endpoint points to the backend.
                disallowSignup:
                    type: boolean
                    description: Disallow self-service signup, users can only be invited by the owner.
                require2fa:
                    type: boolean
                    description: Require 2FA for all users.
                outboundIpList:
                    type: array
                    items:
                        type: string
                    description: outbound_ip_list is the outbound IP for Bytebase instance in SaaS mode.
                gitopsWebhookUrl:
                    type: string
                    description: The webhook URL for the GitOps workflow.
                tokenDuration:
                    pattern: ^-?(?:0|[1-9][0-9]{0,11})(?:\.[0-9]{1,9})?s$
                    type: string
                    description: The duration for token.
                announcement:
                    allOf:
                        - $ref: '#/components/schemas/Announcement'
                    description: The setting of custom announcement
                maximumRoleExpiration:
                    pattern: ^-?(?:0|[1-9][0-9]{0,11})(?:\.[0-9]{1,9})?s$
                    type: string
                    description: The max duration for role expired.
                domains:
                    type: array
                    items:
                        type: string
                    description: The workspace domain, e.g. bytebase.com.
                enforceIdentityDomain:
                    type: boolean
                    description: Only user and group from the domains can be created and login.
                databaseChangeMode:
                    enum:
                        - DATABASE_CHANGE_MODE_UNSPECIFIED
                        - PIPELINE
                        - EDITOR
                    type: string
                    description: The workspace database change mode.
                    format: enum
                disallowPasswordSignin:
                    type: boolean
                    description: Whether to disallow password signin. (Except workspace admins)
        WorkspaceTrialSetting:
            type: object
            properties:
                instanceCount:
                    type: integer
                    format: int32
                expireTime:
                    type: string
                    format: date-time
                issuedTime:
                    type: string
                    format: date-time
                subject:
                    type: string
                orgName:
                    type: string
                plan:
                    enum:
                        - PLAN_TYPE_UNSPECIFIED
                        - FREE
                        - TEAM
                        - ENTERPRISE
                    type: string
                    format: enum
tags:
    - name: ActuatorService
    - name: AnomalyService
    - name: AuditLogService
    - name: AuthService
    - name: CelService
    - name: ChangelistService
    - name: DatabaseCatalogService
    - name: DatabaseGroupService
    - name: DatabaseService
    - name: EnvironmentService
    - name: GroupService
    - name: IdentityProviderService
    - name: InstanceRoleService
    - name: InstanceService
    - name: IssueService
    - name: OrgPolicyService
    - name: PlanService
    - name: ProjectService
    - name: ReleaseService
    - name: ReviewConfigService
    - name: RiskService
    - name: RoleService
    - name: RolloutService
    - name: SQLService
    - name: SettingService
    - name: SheetService
    - name: SubscriptionService
    - name: VCSConnectorService
    - name: VCSProviderService
    - name: WorksheetService
    - name: WorkspaceService
