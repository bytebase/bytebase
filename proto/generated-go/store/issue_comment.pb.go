// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        (unknown)
// source: store/issue_comment.proto

package store

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type IssueCommentPayload_Approval_Status int32

const (
	IssueCommentPayload_Approval_STATUS_UNSPECIFIED IssueCommentPayload_Approval_Status = 0
	IssueCommentPayload_Approval_PENDING            IssueCommentPayload_Approval_Status = 1
	IssueCommentPayload_Approval_APPROVED           IssueCommentPayload_Approval_Status = 2
	IssueCommentPayload_Approval_REJECTED           IssueCommentPayload_Approval_Status = 3
)

// Enum value maps for IssueCommentPayload_Approval_Status.
var (
	IssueCommentPayload_Approval_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "PENDING",
		2: "APPROVED",
		3: "REJECTED",
	}
	IssueCommentPayload_Approval_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"PENDING":            1,
		"APPROVED":           2,
		"REJECTED":           3,
	}
)

func (x IssueCommentPayload_Approval_Status) Enum() *IssueCommentPayload_Approval_Status {
	p := new(IssueCommentPayload_Approval_Status)
	*p = x
	return p
}

func (x IssueCommentPayload_Approval_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IssueCommentPayload_Approval_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_store_issue_comment_proto_enumTypes[0].Descriptor()
}

func (IssueCommentPayload_Approval_Status) Type() protoreflect.EnumType {
	return &file_store_issue_comment_proto_enumTypes[0]
}

func (x IssueCommentPayload_Approval_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IssueCommentPayload_Approval_Status.Descriptor instead.
func (IssueCommentPayload_Approval_Status) EnumDescriptor() ([]byte, []int) {
	return file_store_issue_comment_proto_rawDescGZIP(), []int{0, 0, 0}
}

type IssueCommentPayload_IssueUpdate_IssueStatus int32

const (
	IssueCommentPayload_IssueUpdate_ISSUE_STATUS_UNSPECIFIED IssueCommentPayload_IssueUpdate_IssueStatus = 0
	IssueCommentPayload_IssueUpdate_OPEN                     IssueCommentPayload_IssueUpdate_IssueStatus = 1
	IssueCommentPayload_IssueUpdate_DONE                     IssueCommentPayload_IssueUpdate_IssueStatus = 2
	IssueCommentPayload_IssueUpdate_CANCELED                 IssueCommentPayload_IssueUpdate_IssueStatus = 3
)

// Enum value maps for IssueCommentPayload_IssueUpdate_IssueStatus.
var (
	IssueCommentPayload_IssueUpdate_IssueStatus_name = map[int32]string{
		0: "ISSUE_STATUS_UNSPECIFIED",
		1: "OPEN",
		2: "DONE",
		3: "CANCELED",
	}
	IssueCommentPayload_IssueUpdate_IssueStatus_value = map[string]int32{
		"ISSUE_STATUS_UNSPECIFIED": 0,
		"OPEN":                     1,
		"DONE":                     2,
		"CANCELED":                 3,
	}
)

func (x IssueCommentPayload_IssueUpdate_IssueStatus) Enum() *IssueCommentPayload_IssueUpdate_IssueStatus {
	p := new(IssueCommentPayload_IssueUpdate_IssueStatus)
	*p = x
	return p
}

func (x IssueCommentPayload_IssueUpdate_IssueStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IssueCommentPayload_IssueUpdate_IssueStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_store_issue_comment_proto_enumTypes[1].Descriptor()
}

func (IssueCommentPayload_IssueUpdate_IssueStatus) Type() protoreflect.EnumType {
	return &file_store_issue_comment_proto_enumTypes[1]
}

func (x IssueCommentPayload_IssueUpdate_IssueStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IssueCommentPayload_IssueUpdate_IssueStatus.Descriptor instead.
func (IssueCommentPayload_IssueUpdate_IssueStatus) EnumDescriptor() ([]byte, []int) {
	return file_store_issue_comment_proto_rawDescGZIP(), []int{0, 1, 0}
}

type IssueCommentPayload_TaskUpdate_Status int32

const (
	IssueCommentPayload_TaskUpdate_STATUS_UNSPECIFIED IssueCommentPayload_TaskUpdate_Status = 0
	IssueCommentPayload_TaskUpdate_PENDING            IssueCommentPayload_TaskUpdate_Status = 1
	IssueCommentPayload_TaskUpdate_RUNNING            IssueCommentPayload_TaskUpdate_Status = 2
	IssueCommentPayload_TaskUpdate_DONE               IssueCommentPayload_TaskUpdate_Status = 3
	IssueCommentPayload_TaskUpdate_FAILED             IssueCommentPayload_TaskUpdate_Status = 4
	IssueCommentPayload_TaskUpdate_SKIPPED            IssueCommentPayload_TaskUpdate_Status = 5
	IssueCommentPayload_TaskUpdate_CANCELED           IssueCommentPayload_TaskUpdate_Status = 6
)

// Enum value maps for IssueCommentPayload_TaskUpdate_Status.
var (
	IssueCommentPayload_TaskUpdate_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "PENDING",
		2: "RUNNING",
		3: "DONE",
		4: "FAILED",
		5: "SKIPPED",
		6: "CANCELED",
	}
	IssueCommentPayload_TaskUpdate_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"PENDING":            1,
		"RUNNING":            2,
		"DONE":               3,
		"FAILED":             4,
		"SKIPPED":            5,
		"CANCELED":           6,
	}
)

func (x IssueCommentPayload_TaskUpdate_Status) Enum() *IssueCommentPayload_TaskUpdate_Status {
	p := new(IssueCommentPayload_TaskUpdate_Status)
	*p = x
	return p
}

func (x IssueCommentPayload_TaskUpdate_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IssueCommentPayload_TaskUpdate_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_store_issue_comment_proto_enumTypes[2].Descriptor()
}

func (IssueCommentPayload_TaskUpdate_Status) Type() protoreflect.EnumType {
	return &file_store_issue_comment_proto_enumTypes[2]
}

func (x IssueCommentPayload_TaskUpdate_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IssueCommentPayload_TaskUpdate_Status.Descriptor instead.
func (IssueCommentPayload_TaskUpdate_Status) EnumDescriptor() ([]byte, []int) {
	return file_store_issue_comment_proto_rawDescGZIP(), []int{0, 3, 0}
}

type IssueCommentPayload struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Comment string                 `protobuf:"bytes,1,opt,name=comment,proto3" json:"comment,omitempty"`
	// Types that are valid to be assigned to Event:
	//
	//	*IssueCommentPayload_Approval_
	//	*IssueCommentPayload_IssueUpdate_
	//	*IssueCommentPayload_StageEnd_
	//	*IssueCommentPayload_TaskUpdate_
	//	*IssueCommentPayload_TaskPriorBackup_
	Event         isIssueCommentPayload_Event `protobuf_oneof:"event"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IssueCommentPayload) Reset() {
	*x = IssueCommentPayload{}
	mi := &file_store_issue_comment_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IssueCommentPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCommentPayload) ProtoMessage() {}

func (x *IssueCommentPayload) ProtoReflect() protoreflect.Message {
	mi := &file_store_issue_comment_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCommentPayload.ProtoReflect.Descriptor instead.
func (*IssueCommentPayload) Descriptor() ([]byte, []int) {
	return file_store_issue_comment_proto_rawDescGZIP(), []int{0}
}

func (x *IssueCommentPayload) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *IssueCommentPayload) GetEvent() isIssueCommentPayload_Event {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *IssueCommentPayload) GetApproval() *IssueCommentPayload_Approval {
	if x != nil {
		if x, ok := x.Event.(*IssueCommentPayload_Approval_); ok {
			return x.Approval
		}
	}
	return nil
}

func (x *IssueCommentPayload) GetIssueUpdate() *IssueCommentPayload_IssueUpdate {
	if x != nil {
		if x, ok := x.Event.(*IssueCommentPayload_IssueUpdate_); ok {
			return x.IssueUpdate
		}
	}
	return nil
}

func (x *IssueCommentPayload) GetStageEnd() *IssueCommentPayload_StageEnd {
	if x != nil {
		if x, ok := x.Event.(*IssueCommentPayload_StageEnd_); ok {
			return x.StageEnd
		}
	}
	return nil
}

func (x *IssueCommentPayload) GetTaskUpdate() *IssueCommentPayload_TaskUpdate {
	if x != nil {
		if x, ok := x.Event.(*IssueCommentPayload_TaskUpdate_); ok {
			return x.TaskUpdate
		}
	}
	return nil
}

func (x *IssueCommentPayload) GetTaskPriorBackup() *IssueCommentPayload_TaskPriorBackup {
	if x != nil {
		if x, ok := x.Event.(*IssueCommentPayload_TaskPriorBackup_); ok {
			return x.TaskPriorBackup
		}
	}
	return nil
}

type isIssueCommentPayload_Event interface {
	isIssueCommentPayload_Event()
}

type IssueCommentPayload_Approval_ struct {
	Approval *IssueCommentPayload_Approval `protobuf:"bytes,2,opt,name=approval,proto3,oneof"`
}

type IssueCommentPayload_IssueUpdate_ struct {
	IssueUpdate *IssueCommentPayload_IssueUpdate `protobuf:"bytes,3,opt,name=issue_update,json=issueUpdate,proto3,oneof"`
}

type IssueCommentPayload_StageEnd_ struct {
	StageEnd *IssueCommentPayload_StageEnd `protobuf:"bytes,4,opt,name=stage_end,json=stageEnd,proto3,oneof"`
}

type IssueCommentPayload_TaskUpdate_ struct {
	TaskUpdate *IssueCommentPayload_TaskUpdate `protobuf:"bytes,5,opt,name=task_update,json=taskUpdate,proto3,oneof"`
}

type IssueCommentPayload_TaskPriorBackup_ struct {
	TaskPriorBackup *IssueCommentPayload_TaskPriorBackup `protobuf:"bytes,6,opt,name=task_prior_backup,json=taskPriorBackup,proto3,oneof"`
}

func (*IssueCommentPayload_Approval_) isIssueCommentPayload_Event() {}

func (*IssueCommentPayload_IssueUpdate_) isIssueCommentPayload_Event() {}

func (*IssueCommentPayload_StageEnd_) isIssueCommentPayload_Event() {}

func (*IssueCommentPayload_TaskUpdate_) isIssueCommentPayload_Event() {}

func (*IssueCommentPayload_TaskPriorBackup_) isIssueCommentPayload_Event() {}

type IssueCommentPayload_Approval struct {
	state         protoimpl.MessageState              `protogen:"open.v1"`
	Status        IssueCommentPayload_Approval_Status `protobuf:"varint,1,opt,name=status,proto3,enum=bytebase.store.IssueCommentPayload_Approval_Status" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IssueCommentPayload_Approval) Reset() {
	*x = IssueCommentPayload_Approval{}
	mi := &file_store_issue_comment_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IssueCommentPayload_Approval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCommentPayload_Approval) ProtoMessage() {}

func (x *IssueCommentPayload_Approval) ProtoReflect() protoreflect.Message {
	mi := &file_store_issue_comment_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCommentPayload_Approval.ProtoReflect.Descriptor instead.
func (*IssueCommentPayload_Approval) Descriptor() ([]byte, []int) {
	return file_store_issue_comment_proto_rawDescGZIP(), []int{0, 0}
}

func (x *IssueCommentPayload_Approval) GetStatus() IssueCommentPayload_Approval_Status {
	if x != nil {
		return x.Status
	}
	return IssueCommentPayload_Approval_STATUS_UNSPECIFIED
}

type IssueCommentPayload_IssueUpdate struct {
	state           protoimpl.MessageState                       `protogen:"open.v1"`
	FromTitle       *string                                      `protobuf:"bytes,1,opt,name=from_title,json=fromTitle,proto3,oneof" json:"from_title,omitempty"`
	ToTitle         *string                                      `protobuf:"bytes,2,opt,name=to_title,json=toTitle,proto3,oneof" json:"to_title,omitempty"`
	FromDescription *string                                      `protobuf:"bytes,3,opt,name=from_description,json=fromDescription,proto3,oneof" json:"from_description,omitempty"`
	ToDescription   *string                                      `protobuf:"bytes,4,opt,name=to_description,json=toDescription,proto3,oneof" json:"to_description,omitempty"`
	FromStatus      *IssueCommentPayload_IssueUpdate_IssueStatus `protobuf:"varint,5,opt,name=from_status,json=fromStatus,proto3,enum=bytebase.store.IssueCommentPayload_IssueUpdate_IssueStatus,oneof" json:"from_status,omitempty"`
	ToStatus        *IssueCommentPayload_IssueUpdate_IssueStatus `protobuf:"varint,6,opt,name=to_status,json=toStatus,proto3,enum=bytebase.store.IssueCommentPayload_IssueUpdate_IssueStatus,oneof" json:"to_status,omitempty"`
	FromLabels      []string                                     `protobuf:"bytes,7,rep,name=from_labels,json=fromLabels,proto3" json:"from_labels,omitempty"`
	ToLabels        []string                                     `protobuf:"bytes,8,rep,name=to_labels,json=toLabels,proto3" json:"to_labels,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *IssueCommentPayload_IssueUpdate) Reset() {
	*x = IssueCommentPayload_IssueUpdate{}
	mi := &file_store_issue_comment_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IssueCommentPayload_IssueUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCommentPayload_IssueUpdate) ProtoMessage() {}

func (x *IssueCommentPayload_IssueUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_store_issue_comment_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCommentPayload_IssueUpdate.ProtoReflect.Descriptor instead.
func (*IssueCommentPayload_IssueUpdate) Descriptor() ([]byte, []int) {
	return file_store_issue_comment_proto_rawDescGZIP(), []int{0, 1}
}

func (x *IssueCommentPayload_IssueUpdate) GetFromTitle() string {
	if x != nil && x.FromTitle != nil {
		return *x.FromTitle
	}
	return ""
}

func (x *IssueCommentPayload_IssueUpdate) GetToTitle() string {
	if x != nil && x.ToTitle != nil {
		return *x.ToTitle
	}
	return ""
}

func (x *IssueCommentPayload_IssueUpdate) GetFromDescription() string {
	if x != nil && x.FromDescription != nil {
		return *x.FromDescription
	}
	return ""
}

func (x *IssueCommentPayload_IssueUpdate) GetToDescription() string {
	if x != nil && x.ToDescription != nil {
		return *x.ToDescription
	}
	return ""
}

func (x *IssueCommentPayload_IssueUpdate) GetFromStatus() IssueCommentPayload_IssueUpdate_IssueStatus {
	if x != nil && x.FromStatus != nil {
		return *x.FromStatus
	}
	return IssueCommentPayload_IssueUpdate_ISSUE_STATUS_UNSPECIFIED
}

func (x *IssueCommentPayload_IssueUpdate) GetToStatus() IssueCommentPayload_IssueUpdate_IssueStatus {
	if x != nil && x.ToStatus != nil {
		return *x.ToStatus
	}
	return IssueCommentPayload_IssueUpdate_ISSUE_STATUS_UNSPECIFIED
}

func (x *IssueCommentPayload_IssueUpdate) GetFromLabels() []string {
	if x != nil {
		return x.FromLabels
	}
	return nil
}

func (x *IssueCommentPayload_IssueUpdate) GetToLabels() []string {
	if x != nil {
		return x.ToLabels
	}
	return nil
}

type IssueCommentPayload_StageEnd struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Stage         string                 `protobuf:"bytes,1,opt,name=stage,proto3" json:"stage,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IssueCommentPayload_StageEnd) Reset() {
	*x = IssueCommentPayload_StageEnd{}
	mi := &file_store_issue_comment_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IssueCommentPayload_StageEnd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCommentPayload_StageEnd) ProtoMessage() {}

func (x *IssueCommentPayload_StageEnd) ProtoReflect() protoreflect.Message {
	mi := &file_store_issue_comment_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCommentPayload_StageEnd.ProtoReflect.Descriptor instead.
func (*IssueCommentPayload_StageEnd) Descriptor() ([]byte, []int) {
	return file_store_issue_comment_proto_rawDescGZIP(), []int{0, 2}
}

func (x *IssueCommentPayload_StageEnd) GetStage() string {
	if x != nil {
		return x.Stage
	}
	return ""
}

type IssueCommentPayload_TaskUpdate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Tasks []string               `protobuf:"bytes,1,rep,name=tasks,proto3" json:"tasks,omitempty"`
	// Format: projects/{project}/sheets/{sheet}
	FromSheet *string `protobuf:"bytes,2,opt,name=from_sheet,json=fromSheet,proto3,oneof" json:"from_sheet,omitempty"`
	// Format: projects/{project}/sheets/{sheet}
	ToSheet                 *string                                `protobuf:"bytes,3,opt,name=to_sheet,json=toSheet,proto3,oneof" json:"to_sheet,omitempty"`
	FromEarliestAllowedTime *timestamppb.Timestamp                 `protobuf:"bytes,4,opt,name=from_earliest_allowed_time,json=fromEarliestAllowedTime,proto3,oneof" json:"from_earliest_allowed_time,omitempty"`
	ToEarliestAllowedTime   *timestamppb.Timestamp                 `protobuf:"bytes,5,opt,name=to_earliest_allowed_time,json=toEarliestAllowedTime,proto3,oneof" json:"to_earliest_allowed_time,omitempty"`
	ToStatus                *IssueCommentPayload_TaskUpdate_Status `protobuf:"varint,6,opt,name=to_status,json=toStatus,proto3,enum=bytebase.store.IssueCommentPayload_TaskUpdate_Status,oneof" json:"to_status,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *IssueCommentPayload_TaskUpdate) Reset() {
	*x = IssueCommentPayload_TaskUpdate{}
	mi := &file_store_issue_comment_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IssueCommentPayload_TaskUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCommentPayload_TaskUpdate) ProtoMessage() {}

func (x *IssueCommentPayload_TaskUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_store_issue_comment_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCommentPayload_TaskUpdate.ProtoReflect.Descriptor instead.
func (*IssueCommentPayload_TaskUpdate) Descriptor() ([]byte, []int) {
	return file_store_issue_comment_proto_rawDescGZIP(), []int{0, 3}
}

func (x *IssueCommentPayload_TaskUpdate) GetTasks() []string {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *IssueCommentPayload_TaskUpdate) GetFromSheet() string {
	if x != nil && x.FromSheet != nil {
		return *x.FromSheet
	}
	return ""
}

func (x *IssueCommentPayload_TaskUpdate) GetToSheet() string {
	if x != nil && x.ToSheet != nil {
		return *x.ToSheet
	}
	return ""
}

func (x *IssueCommentPayload_TaskUpdate) GetFromEarliestAllowedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.FromEarliestAllowedTime
	}
	return nil
}

func (x *IssueCommentPayload_TaskUpdate) GetToEarliestAllowedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ToEarliestAllowedTime
	}
	return nil
}

func (x *IssueCommentPayload_TaskUpdate) GetToStatus() IssueCommentPayload_TaskUpdate_Status {
	if x != nil && x.ToStatus != nil {
		return *x.ToStatus
	}
	return IssueCommentPayload_TaskUpdate_STATUS_UNSPECIFIED
}

type IssueCommentPayload_TaskPriorBackup struct {
	state         protoimpl.MessageState                       `protogen:"open.v1"`
	Task          string                                       `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	Tables        []*IssueCommentPayload_TaskPriorBackup_Table `protobuf:"bytes,2,rep,name=tables,proto3" json:"tables,omitempty"`
	OriginalLine  *int32                                       `protobuf:"varint,3,opt,name=original_line,json=originalLine,proto3,oneof" json:"original_line,omitempty"`
	Database      string                                       `protobuf:"bytes,4,opt,name=database,proto3" json:"database,omitempty"`
	Error         string                                       `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IssueCommentPayload_TaskPriorBackup) Reset() {
	*x = IssueCommentPayload_TaskPriorBackup{}
	mi := &file_store_issue_comment_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IssueCommentPayload_TaskPriorBackup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCommentPayload_TaskPriorBackup) ProtoMessage() {}

func (x *IssueCommentPayload_TaskPriorBackup) ProtoReflect() protoreflect.Message {
	mi := &file_store_issue_comment_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCommentPayload_TaskPriorBackup.ProtoReflect.Descriptor instead.
func (*IssueCommentPayload_TaskPriorBackup) Descriptor() ([]byte, []int) {
	return file_store_issue_comment_proto_rawDescGZIP(), []int{0, 4}
}

func (x *IssueCommentPayload_TaskPriorBackup) GetTask() string {
	if x != nil {
		return x.Task
	}
	return ""
}

func (x *IssueCommentPayload_TaskPriorBackup) GetTables() []*IssueCommentPayload_TaskPriorBackup_Table {
	if x != nil {
		return x.Tables
	}
	return nil
}

func (x *IssueCommentPayload_TaskPriorBackup) GetOriginalLine() int32 {
	if x != nil && x.OriginalLine != nil {
		return *x.OriginalLine
	}
	return 0
}

func (x *IssueCommentPayload_TaskPriorBackup) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *IssueCommentPayload_TaskPriorBackup) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type IssueCommentPayload_TaskPriorBackup_Table struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Schema        string                 `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
	Table         string                 `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IssueCommentPayload_TaskPriorBackup_Table) Reset() {
	*x = IssueCommentPayload_TaskPriorBackup_Table{}
	mi := &file_store_issue_comment_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IssueCommentPayload_TaskPriorBackup_Table) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssueCommentPayload_TaskPriorBackup_Table) ProtoMessage() {}

func (x *IssueCommentPayload_TaskPriorBackup_Table) ProtoReflect() protoreflect.Message {
	mi := &file_store_issue_comment_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssueCommentPayload_TaskPriorBackup_Table.ProtoReflect.Descriptor instead.
func (*IssueCommentPayload_TaskPriorBackup_Table) Descriptor() ([]byte, []int) {
	return file_store_issue_comment_proto_rawDescGZIP(), []int{0, 4, 0}
}

func (x *IssueCommentPayload_TaskPriorBackup_Table) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *IssueCommentPayload_TaskPriorBackup_Table) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

var File_store_issue_comment_proto protoreflect.FileDescriptor

var file_store_issue_comment_proto_rawDesc = string([]byte{
	0x0a, 0x19, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x62, 0x79, 0x74,
	0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf2, 0x10, 0x0a,
	0x13, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4a,
	0x0a, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x48, 0x00,
	0x52, 0x08, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x54, 0x0a, 0x0c, 0x69, 0x73,
	0x73, 0x75, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x0b, 0x69, 0x73, 0x73, 0x75, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x4b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x45, 0x6e,
	0x64, 0x48, 0x00, 0x52, 0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x51, 0x0a,
	0x0b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x61, 0x0a, 0x11, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x5f, 0x62,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x62, 0x79,
	0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x48, 0x00, 0x52, 0x0f, 0x74, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x42, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x1a, 0xa2, 0x01, 0x0a, 0x08, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
	0x12, 0x4b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x33, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x49, 0x0a,
	0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08,
	0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45,
	0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10, 0x03, 0x1a, 0xde, 0x04, 0x0a, 0x0b, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09,
	0x66, 0x72, 0x6f, 0x6d, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08,
	0x74, 0x6f, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x07, 0x74, 0x6f, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e,
	0x74, 0x6f, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x0d, 0x74, 0x6f, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x61, 0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e,
	0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x49,
	0x73, 0x73, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x04, 0x52, 0x0a, 0x66, 0x72,
	0x6f, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x5d, 0x0a, 0x09, 0x74,
	0x6f, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b,
	0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x49, 0x73, 0x73, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x05, 0x52, 0x08, 0x74,
	0x6f, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72,
	0x6f, 0x6d, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x74,
	0x6f, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x74, 0x6f, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22, 0x4d, 0x0a, 0x0b, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x18, 0x49, 0x53, 0x53, 0x55, 0x45,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x01, 0x12,
	0x08, 0x0a, 0x04, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x41, 0x4e,
	0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x74, 0x6f, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x74, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x20, 0x0a, 0x08, 0x53, 0x74, 0x61,
	0x67, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x1a, 0xca, 0x04, 0x0a, 0x0a,
	0x54, 0x61, 0x73, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61,
	0x73, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73,
	0x12, 0x22, 0x0a, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x68, 0x65, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x68, 0x65, 0x65,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x74, 0x6f, 0x5f, 0x73, 0x68, 0x65, 0x65, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x07, 0x74, 0x6f, 0x53, 0x68, 0x65, 0x65,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x5c, 0x0a, 0x1a, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x65, 0x61, 0x72,
	0x6c, 0x69, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x48, 0x02, 0x52, 0x17, 0x66, 0x72, 0x6f, 0x6d, 0x45, 0x61, 0x72, 0x6c,
	0x69, 0x65, 0x73, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x58, 0x0a, 0x18, 0x74, 0x6f, 0x5f, 0x65, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x73,
	0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x48, 0x03, 0x52, 0x15, 0x74, 0x6f, 0x45, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x57, 0x0a, 0x09,
	0x74, 0x6f, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x35, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x04, 0x52, 0x08, 0x74, 0x6f, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x88, 0x01, 0x01, 0x22, 0x6b, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10,
	0x02, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x4b, 0x49, 0x50, 0x50,
	0x45, 0x44, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44,
	0x10, 0x06, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x68, 0x65, 0x65,
	0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x74, 0x6f, 0x5f, 0x73, 0x68, 0x65, 0x65, 0x74, 0x42, 0x1d,
	0x0a, 0x1b, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x65, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x73, 0x74,
	0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x1b, 0x0a,
	0x19, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74,
	0x6f, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0x9d, 0x02, 0x0a, 0x0f, 0x54, 0x61, 0x73,
	0x6b, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b,
	0x12, 0x51, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x39, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x42,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x06, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a,
	0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a,
	0x35, 0x0a, 0x05, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x42, 0x14, 0x5a, 0x12, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x67,
	0x6f, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_store_issue_comment_proto_rawDescOnce sync.Once
	file_store_issue_comment_proto_rawDescData []byte
)

func file_store_issue_comment_proto_rawDescGZIP() []byte {
	file_store_issue_comment_proto_rawDescOnce.Do(func() {
		file_store_issue_comment_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_store_issue_comment_proto_rawDesc), len(file_store_issue_comment_proto_rawDesc)))
	})
	return file_store_issue_comment_proto_rawDescData
}

var file_store_issue_comment_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_store_issue_comment_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_store_issue_comment_proto_goTypes = []any{
	(IssueCommentPayload_Approval_Status)(0),          // 0: bytebase.store.IssueCommentPayload.Approval.Status
	(IssueCommentPayload_IssueUpdate_IssueStatus)(0),  // 1: bytebase.store.IssueCommentPayload.IssueUpdate.IssueStatus
	(IssueCommentPayload_TaskUpdate_Status)(0),        // 2: bytebase.store.IssueCommentPayload.TaskUpdate.Status
	(*IssueCommentPayload)(nil),                       // 3: bytebase.store.IssueCommentPayload
	(*IssueCommentPayload_Approval)(nil),              // 4: bytebase.store.IssueCommentPayload.Approval
	(*IssueCommentPayload_IssueUpdate)(nil),           // 5: bytebase.store.IssueCommentPayload.IssueUpdate
	(*IssueCommentPayload_StageEnd)(nil),              // 6: bytebase.store.IssueCommentPayload.StageEnd
	(*IssueCommentPayload_TaskUpdate)(nil),            // 7: bytebase.store.IssueCommentPayload.TaskUpdate
	(*IssueCommentPayload_TaskPriorBackup)(nil),       // 8: bytebase.store.IssueCommentPayload.TaskPriorBackup
	(*IssueCommentPayload_TaskPriorBackup_Table)(nil), // 9: bytebase.store.IssueCommentPayload.TaskPriorBackup.Table
	(*timestamppb.Timestamp)(nil),                     // 10: google.protobuf.Timestamp
}
var file_store_issue_comment_proto_depIdxs = []int32{
	4,  // 0: bytebase.store.IssueCommentPayload.approval:type_name -> bytebase.store.IssueCommentPayload.Approval
	5,  // 1: bytebase.store.IssueCommentPayload.issue_update:type_name -> bytebase.store.IssueCommentPayload.IssueUpdate
	6,  // 2: bytebase.store.IssueCommentPayload.stage_end:type_name -> bytebase.store.IssueCommentPayload.StageEnd
	7,  // 3: bytebase.store.IssueCommentPayload.task_update:type_name -> bytebase.store.IssueCommentPayload.TaskUpdate
	8,  // 4: bytebase.store.IssueCommentPayload.task_prior_backup:type_name -> bytebase.store.IssueCommentPayload.TaskPriorBackup
	0,  // 5: bytebase.store.IssueCommentPayload.Approval.status:type_name -> bytebase.store.IssueCommentPayload.Approval.Status
	1,  // 6: bytebase.store.IssueCommentPayload.IssueUpdate.from_status:type_name -> bytebase.store.IssueCommentPayload.IssueUpdate.IssueStatus
	1,  // 7: bytebase.store.IssueCommentPayload.IssueUpdate.to_status:type_name -> bytebase.store.IssueCommentPayload.IssueUpdate.IssueStatus
	10, // 8: bytebase.store.IssueCommentPayload.TaskUpdate.from_earliest_allowed_time:type_name -> google.protobuf.Timestamp
	10, // 9: bytebase.store.IssueCommentPayload.TaskUpdate.to_earliest_allowed_time:type_name -> google.protobuf.Timestamp
	2,  // 10: bytebase.store.IssueCommentPayload.TaskUpdate.to_status:type_name -> bytebase.store.IssueCommentPayload.TaskUpdate.Status
	9,  // 11: bytebase.store.IssueCommentPayload.TaskPriorBackup.tables:type_name -> bytebase.store.IssueCommentPayload.TaskPriorBackup.Table
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_store_issue_comment_proto_init() }
func file_store_issue_comment_proto_init() {
	if File_store_issue_comment_proto != nil {
		return
	}
	file_store_issue_comment_proto_msgTypes[0].OneofWrappers = []any{
		(*IssueCommentPayload_Approval_)(nil),
		(*IssueCommentPayload_IssueUpdate_)(nil),
		(*IssueCommentPayload_StageEnd_)(nil),
		(*IssueCommentPayload_TaskUpdate_)(nil),
		(*IssueCommentPayload_TaskPriorBackup_)(nil),
	}
	file_store_issue_comment_proto_msgTypes[2].OneofWrappers = []any{}
	file_store_issue_comment_proto_msgTypes[4].OneofWrappers = []any{}
	file_store_issue_comment_proto_msgTypes[5].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_store_issue_comment_proto_rawDesc), len(file_store_issue_comment_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_store_issue_comment_proto_goTypes,
		DependencyIndexes: file_store_issue_comment_proto_depIdxs,
		EnumInfos:         file_store_issue_comment_proto_enumTypes,
		MessageInfos:      file_store_issue_comment_proto_msgTypes,
	}.Build()
	File_store_issue_comment_proto = out.File
	file_store_issue_comment_proto_goTypes = nil
	file_store_issue_comment_proto_depIdxs = nil
}
