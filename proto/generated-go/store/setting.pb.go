// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        (unknown)
// source: store/setting.proto

package store

import (
	v1alpha1 "google.golang.org/genproto/googleapis/api/expr/v1alpha1"
	expr "google.golang.org/genproto/googleapis/type/expr"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DatabaseChangeMode int32

const (
	DatabaseChangeMode_DATABASE_CHANGE_MODE_UNSPECIFIED DatabaseChangeMode = 0
	// A more advanced database change process, including custom approval workflows and other advanced features.
	// Default to this mode.
	DatabaseChangeMode_PIPELINE DatabaseChangeMode = 1
	// A simple database change process in SQL editor. Users can execute SQL directly.
	DatabaseChangeMode_EDITOR DatabaseChangeMode = 2
)

// Enum value maps for DatabaseChangeMode.
var (
	DatabaseChangeMode_name = map[int32]string{
		0: "DATABASE_CHANGE_MODE_UNSPECIFIED",
		1: "PIPELINE",
		2: "EDITOR",
	}
	DatabaseChangeMode_value = map[string]int32{
		"DATABASE_CHANGE_MODE_UNSPECIFIED": 0,
		"PIPELINE":                         1,
		"EDITOR":                           2,
	}
)

func (x DatabaseChangeMode) Enum() *DatabaseChangeMode {
	p := new(DatabaseChangeMode)
	*p = x
	return p
}

func (x DatabaseChangeMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DatabaseChangeMode) Descriptor() protoreflect.EnumDescriptor {
	return file_store_setting_proto_enumTypes[0].Descriptor()
}

func (DatabaseChangeMode) Type() protoreflect.EnumType {
	return &file_store_setting_proto_enumTypes[0]
}

func (x DatabaseChangeMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DatabaseChangeMode.Descriptor instead.
func (DatabaseChangeMode) EnumDescriptor() ([]byte, []int) {
	return file_store_setting_proto_rawDescGZIP(), []int{0}
}

// We support three levels of AlertLevel: INFO, WARNING, and ERROR.
type Announcement_AlertLevel int32

const (
	Announcement_ALERT_LEVEL_UNSPECIFIED Announcement_AlertLevel = 0
	Announcement_ALERT_LEVEL_INFO        Announcement_AlertLevel = 1
	Announcement_ALERT_LEVEL_WARNING     Announcement_AlertLevel = 2
	Announcement_ALERT_LEVEL_CRITICAL    Announcement_AlertLevel = 3
)

// Enum value maps for Announcement_AlertLevel.
var (
	Announcement_AlertLevel_name = map[int32]string{
		0: "ALERT_LEVEL_UNSPECIFIED",
		1: "ALERT_LEVEL_INFO",
		2: "ALERT_LEVEL_WARNING",
		3: "ALERT_LEVEL_CRITICAL",
	}
	Announcement_AlertLevel_value = map[string]int32{
		"ALERT_LEVEL_UNSPECIFIED": 0,
		"ALERT_LEVEL_INFO":        1,
		"ALERT_LEVEL_WARNING":     2,
		"ALERT_LEVEL_CRITICAL":    3,
	}
)

func (x Announcement_AlertLevel) Enum() *Announcement_AlertLevel {
	p := new(Announcement_AlertLevel)
	*p = x
	return p
}

func (x Announcement_AlertLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Announcement_AlertLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_store_setting_proto_enumTypes[1].Descriptor()
}

func (Announcement_AlertLevel) Type() protoreflect.EnumType {
	return &file_store_setting_proto_enumTypes[1]
}

func (x Announcement_AlertLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Announcement_AlertLevel.Descriptor instead.
func (Announcement_AlertLevel) EnumDescriptor() ([]byte, []int) {
	return file_store_setting_proto_rawDescGZIP(), []int{1, 0}
}

// We support three types of SMTP encryption: NONE, STARTTLS, and SSL/TLS.
type SMTPMailDeliverySetting_Encryption int32

const (
	SMTPMailDeliverySetting_ENCRYPTION_UNSPECIFIED SMTPMailDeliverySetting_Encryption = 0
	SMTPMailDeliverySetting_ENCRYPTION_NONE        SMTPMailDeliverySetting_Encryption = 1
	SMTPMailDeliverySetting_ENCRYPTION_STARTTLS    SMTPMailDeliverySetting_Encryption = 2
	SMTPMailDeliverySetting_ENCRYPTION_SSL_TLS     SMTPMailDeliverySetting_Encryption = 3
)

// Enum value maps for SMTPMailDeliverySetting_Encryption.
var (
	SMTPMailDeliverySetting_Encryption_name = map[int32]string{
		0: "ENCRYPTION_UNSPECIFIED",
		1: "ENCRYPTION_NONE",
		2: "ENCRYPTION_STARTTLS",
		3: "ENCRYPTION_SSL_TLS",
	}
	SMTPMailDeliverySetting_Encryption_value = map[string]int32{
		"ENCRYPTION_UNSPECIFIED": 0,
		"ENCRYPTION_NONE":        1,
		"ENCRYPTION_STARTTLS":    2,
		"ENCRYPTION_SSL_TLS":     3,
	}
)

func (x SMTPMailDeliverySetting_Encryption) Enum() *SMTPMailDeliverySetting_Encryption {
	p := new(SMTPMailDeliverySetting_Encryption)
	*p = x
	return p
}

func (x SMTPMailDeliverySetting_Encryption) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SMTPMailDeliverySetting_Encryption) Descriptor() protoreflect.EnumDescriptor {
	return file_store_setting_proto_enumTypes[2].Descriptor()
}

func (SMTPMailDeliverySetting_Encryption) Type() protoreflect.EnumType {
	return &file_store_setting_proto_enumTypes[2]
}

func (x SMTPMailDeliverySetting_Encryption) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SMTPMailDeliverySetting_Encryption.Descriptor instead.
func (SMTPMailDeliverySetting_Encryption) EnumDescriptor() ([]byte, []int) {
	return file_store_setting_proto_rawDescGZIP(), []int{6, 0}
}

// We support four types of SMTP authentication: NONE, PLAIN, LOGIN, and
// CRAM-MD5.
type SMTPMailDeliverySetting_Authentication int32

const (
	SMTPMailDeliverySetting_AUTHENTICATION_UNSPECIFIED SMTPMailDeliverySetting_Authentication = 0
	SMTPMailDeliverySetting_AUTHENTICATION_NONE        SMTPMailDeliverySetting_Authentication = 1
	SMTPMailDeliverySetting_AUTHENTICATION_PLAIN       SMTPMailDeliverySetting_Authentication = 2
	SMTPMailDeliverySetting_AUTHENTICATION_LOGIN       SMTPMailDeliverySetting_Authentication = 3
	SMTPMailDeliverySetting_AUTHENTICATION_CRAM_MD5    SMTPMailDeliverySetting_Authentication = 4
)

// Enum value maps for SMTPMailDeliverySetting_Authentication.
var (
	SMTPMailDeliverySetting_Authentication_name = map[int32]string{
		0: "AUTHENTICATION_UNSPECIFIED",
		1: "AUTHENTICATION_NONE",
		2: "AUTHENTICATION_PLAIN",
		3: "AUTHENTICATION_LOGIN",
		4: "AUTHENTICATION_CRAM_MD5",
	}
	SMTPMailDeliverySetting_Authentication_value = map[string]int32{
		"AUTHENTICATION_UNSPECIFIED": 0,
		"AUTHENTICATION_NONE":        1,
		"AUTHENTICATION_PLAIN":       2,
		"AUTHENTICATION_LOGIN":       3,
		"AUTHENTICATION_CRAM_MD5":    4,
	}
)

func (x SMTPMailDeliverySetting_Authentication) Enum() *SMTPMailDeliverySetting_Authentication {
	p := new(SMTPMailDeliverySetting_Authentication)
	*p = x
	return p
}

func (x SMTPMailDeliverySetting_Authentication) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SMTPMailDeliverySetting_Authentication) Descriptor() protoreflect.EnumDescriptor {
	return file_store_setting_proto_enumTypes[3].Descriptor()
}

func (SMTPMailDeliverySetting_Authentication) Type() protoreflect.EnumType {
	return &file_store_setting_proto_enumTypes[3]
}

func (x SMTPMailDeliverySetting_Authentication) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SMTPMailDeliverySetting_Authentication.Descriptor instead.
func (SMTPMailDeliverySetting_Authentication) EnumDescriptor() ([]byte, []int) {
	return file_store_setting_proto_rawDescGZIP(), []int{6, 1}
}

type Algorithm_InnerOuterMask_MaskType int32

const (
	Algorithm_InnerOuterMask_MASK_TYPE_UNSPECIFIED Algorithm_InnerOuterMask_MaskType = 0
	Algorithm_InnerOuterMask_INNER                 Algorithm_InnerOuterMask_MaskType = 1
	Algorithm_InnerOuterMask_OUTER                 Algorithm_InnerOuterMask_MaskType = 2
)

// Enum value maps for Algorithm_InnerOuterMask_MaskType.
var (
	Algorithm_InnerOuterMask_MaskType_name = map[int32]string{
		0: "MASK_TYPE_UNSPECIFIED",
		1: "INNER",
		2: "OUTER",
	}
	Algorithm_InnerOuterMask_MaskType_value = map[string]int32{
		"MASK_TYPE_UNSPECIFIED": 0,
		"INNER":                 1,
		"OUTER":                 2,
	}
)

func (x Algorithm_InnerOuterMask_MaskType) Enum() *Algorithm_InnerOuterMask_MaskType {
	p := new(Algorithm_InnerOuterMask_MaskType)
	*p = x
	return p
}

func (x Algorithm_InnerOuterMask_MaskType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Algorithm_InnerOuterMask_MaskType) Descriptor() protoreflect.EnumDescriptor {
	return file_store_setting_proto_enumTypes[4].Descriptor()
}

func (Algorithm_InnerOuterMask_MaskType) Type() protoreflect.EnumType {
	return &file_store_setting_proto_enumTypes[4]
}

func (x Algorithm_InnerOuterMask_MaskType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Algorithm_InnerOuterMask_MaskType.Descriptor instead.
func (Algorithm_InnerOuterMask_MaskType) EnumDescriptor() ([]byte, []int) {
	return file_store_setting_proto_rawDescGZIP(), []int{10, 3, 0}
}

type WorkspaceProfileSetting struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The URL user visits Bytebase.
	//
	// The external URL is used for:
	// 1. Constructing the correct callback URL when configuring the VCS provider.
	// The callback URL points to the frontend.
	// 2. Creating the correct webhook endpoint when configuring the project
	// GitOps workflow. The webhook endpoint points to the backend.
	ExternalUrl string `protobuf:"bytes,1,opt,name=external_url,json=externalUrl,proto3" json:"external_url,omitempty"`
	// Disallow self-service signup, users can only be invited by the owner.
	DisallowSignup bool `protobuf:"varint,2,opt,name=disallow_signup,json=disallowSignup,proto3" json:"disallow_signup,omitempty"`
	// Require 2FA for all users.
	Require_2Fa bool `protobuf:"varint,3,opt,name=require_2fa,json=require2fa,proto3" json:"require_2fa,omitempty"`
	// outbound_ip_list is the outbound IP for Bytebase instance in SaaS mode.
	OutboundIpList []string `protobuf:"bytes,4,rep,name=outbound_ip_list,json=outboundIpList,proto3" json:"outbound_ip_list,omitempty"`
	// The webhook URL for the GitOps workflow.
	GitopsWebhookUrl string `protobuf:"bytes,5,opt,name=gitops_webhook_url,json=gitopsWebhookUrl,proto3" json:"gitops_webhook_url,omitempty"`
	// The duration for token.
	TokenDuration *durationpb.Duration `protobuf:"bytes,6,opt,name=token_duration,json=tokenDuration,proto3" json:"token_duration,omitempty"`
	// The setting of custom announcement
	Announcement *Announcement `protobuf:"bytes,7,opt,name=announcement,proto3" json:"announcement,omitempty"`
	// The max duration for role expired.
	MaximumRoleExpiration *durationpb.Duration `protobuf:"bytes,8,opt,name=maximum_role_expiration,json=maximumRoleExpiration,proto3" json:"maximum_role_expiration,omitempty"`
	// The workspace domain, e.g. bytebase.com.
	Domains []string `protobuf:"bytes,9,rep,name=domains,proto3" json:"domains,omitempty"`
	// Only user and group from the domains can be created and login.
	EnforceIdentityDomain bool `protobuf:"varint,10,opt,name=enforce_identity_domain,json=enforceIdentityDomain,proto3" json:"enforce_identity_domain,omitempty"`
	// The workspace database change mode.
	DatabaseChangeMode DatabaseChangeMode `protobuf:"varint,11,opt,name=database_change_mode,json=databaseChangeMode,proto3,enum=bytebase.store.DatabaseChangeMode" json:"database_change_mode,omitempty"`
	// Whether to disallow password signin. (Except workspace admins)
	DisallowPasswordSignin bool `protobuf:"varint,12,opt,name=disallow_password_signin,json=disallowPasswordSignin,proto3" json:"disallow_password_signin,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *WorkspaceProfileSetting) Reset() {
	*x = WorkspaceProfileSetting{}
	mi := &file_store_setting_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkspaceProfileSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkspaceProfileSetting) ProtoMessage() {}

func (x *WorkspaceProfileSetting) ProtoReflect() protoreflect.Message {
	mi := &file_store_setting_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkspaceProfileSetting.ProtoReflect.Descriptor instead.
func (*WorkspaceProfileSetting) Descriptor() ([]byte, []int) {
	return file_store_setting_proto_rawDescGZIP(), []int{0}
}

func (x *WorkspaceProfileSetting) GetExternalUrl() string {
	if x != nil {
		return x.ExternalUrl
	}
	return ""
}

func (x *WorkspaceProfileSetting) GetDisallowSignup() bool {
	if x != nil {
		return x.DisallowSignup
	}
	return false
}

func (x *WorkspaceProfileSetting) GetRequire_2Fa() bool {
	if x != nil {
		return x.Require_2Fa
	}
	return false
}

func (x *WorkspaceProfileSetting) GetOutboundIpList() []string {
	if x != nil {
		return x.OutboundIpList
	}
	return nil
}

func (x *WorkspaceProfileSetting) GetGitopsWebhookUrl() string {
	if x != nil {
		return x.GitopsWebhookUrl
	}
	return ""
}

func (x *WorkspaceProfileSetting) GetTokenDuration() *durationpb.Duration {
	if x != nil {
		return x.TokenDuration
	}
	return nil
}

func (x *WorkspaceProfileSetting) GetAnnouncement() *Announcement {
	if x != nil {
		return x.Announcement
	}
	return nil
}

func (x *WorkspaceProfileSetting) GetMaximumRoleExpiration() *durationpb.Duration {
	if x != nil {
		return x.MaximumRoleExpiration
	}
	return nil
}

func (x *WorkspaceProfileSetting) GetDomains() []string {
	if x != nil {
		return x.Domains
	}
	return nil
}

func (x *WorkspaceProfileSetting) GetEnforceIdentityDomain() bool {
	if x != nil {
		return x.EnforceIdentityDomain
	}
	return false
}

func (x *WorkspaceProfileSetting) GetDatabaseChangeMode() DatabaseChangeMode {
	if x != nil {
		return x.DatabaseChangeMode
	}
	return DatabaseChangeMode_DATABASE_CHANGE_MODE_UNSPECIFIED
}

func (x *WorkspaceProfileSetting) GetDisallowPasswordSignin() bool {
	if x != nil {
		return x.DisallowPasswordSignin
	}
	return false
}

type Announcement struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The alert level of announcemnt
	Level Announcement_AlertLevel `protobuf:"varint,1,opt,name=level,proto3,enum=bytebase.store.Announcement_AlertLevel" json:"level,omitempty"`
	// The text of announcemnt
	Text string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	// The optional link, user can follow the link to check extra details
	Link          string `protobuf:"bytes,3,opt,name=link,proto3" json:"link,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Announcement) Reset() {
	*x = Announcement{}
	mi := &file_store_setting_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Announcement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Announcement) ProtoMessage() {}

func (x *Announcement) ProtoReflect() protoreflect.Message {
	mi := &file_store_setting_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Announcement.ProtoReflect.Descriptor instead.
func (*Announcement) Descriptor() ([]byte, []int) {
	return file_store_setting_proto_rawDescGZIP(), []int{1}
}

func (x *Announcement) GetLevel() Announcement_AlertLevel {
	if x != nil {
		return x.Level
	}
	return Announcement_ALERT_LEVEL_UNSPECIFIED
}

func (x *Announcement) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *Announcement) GetLink() string {
	if x != nil {
		return x.Link
	}
	return ""
}

type AgentPluginSetting struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The URL for the agent API.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// The token for the agent.
	Token         string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AgentPluginSetting) Reset() {
	*x = AgentPluginSetting{}
	mi := &file_store_setting_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AgentPluginSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentPluginSetting) ProtoMessage() {}

func (x *AgentPluginSetting) ProtoReflect() protoreflect.Message {
	mi := &file_store_setting_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentPluginSetting.ProtoReflect.Descriptor instead.
func (*AgentPluginSetting) Descriptor() ([]byte, []int) {
	return file_store_setting_proto_rawDescGZIP(), []int{2}
}

func (x *AgentPluginSetting) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *AgentPluginSetting) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type WorkspaceApprovalSetting struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	Rules         []*WorkspaceApprovalSetting_Rule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkspaceApprovalSetting) Reset() {
	*x = WorkspaceApprovalSetting{}
	mi := &file_store_setting_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkspaceApprovalSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkspaceApprovalSetting) ProtoMessage() {}

func (x *WorkspaceApprovalSetting) ProtoReflect() protoreflect.Message {
	mi := &file_store_setting_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkspaceApprovalSetting.ProtoReflect.Descriptor instead.
func (*WorkspaceApprovalSetting) Descriptor() ([]byte, []int) {
	return file_store_setting_proto_rawDescGZIP(), []int{3}
}

func (x *WorkspaceApprovalSetting) GetRules() []*WorkspaceApprovalSetting_Rule {
	if x != nil {
		return x.Rules
	}
	return nil
}

type ExternalApprovalSetting struct {
	state         protoimpl.MessageState          `protogen:"open.v1"`
	Nodes         []*ExternalApprovalSetting_Node `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExternalApprovalSetting) Reset() {
	*x = ExternalApprovalSetting{}
	mi := &file_store_setting_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExternalApprovalSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalApprovalSetting) ProtoMessage() {}

func (x *ExternalApprovalSetting) ProtoReflect() protoreflect.Message {
	mi := &file_store_setting_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalApprovalSetting.ProtoReflect.Descriptor instead.
func (*ExternalApprovalSetting) Descriptor() ([]byte, []int) {
	return file_store_setting_proto_rawDescGZIP(), []int{4}
}

func (x *ExternalApprovalSetting) GetNodes() []*ExternalApprovalSetting_Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type ExternalApprovalPayload struct {
	state                  protoimpl.MessageState `protogen:"open.v1"`
	ExternalApprovalNodeId string                 `protobuf:"bytes,1,opt,name=external_approval_node_id,json=externalApprovalNodeId,proto3" json:"external_approval_node_id,omitempty"`
	Id                     string                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields          protoimpl.UnknownFields
	sizeCache              protoimpl.SizeCache
}

func (x *ExternalApprovalPayload) Reset() {
	*x = ExternalApprovalPayload{}
	mi := &file_store_setting_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExternalApprovalPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalApprovalPayload) ProtoMessage() {}

func (x *ExternalApprovalPayload) ProtoReflect() protoreflect.Message {
	mi := &file_store_setting_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalApprovalPayload.ProtoReflect.Descriptor instead.
func (*ExternalApprovalPayload) Descriptor() ([]byte, []int) {
	return file_store_setting_proto_rawDescGZIP(), []int{5}
}

func (x *ExternalApprovalPayload) GetExternalApprovalNodeId() string {
	if x != nil {
		return x.ExternalApprovalNodeId
	}
	return ""
}

func (x *ExternalApprovalPayload) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type SMTPMailDeliverySetting struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The SMTP server address.
	Server string `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
	// The SMTP server port.
	Port int32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// The SMTP server encryption.
	Encryption SMTPMailDeliverySetting_Encryption `protobuf:"varint,3,opt,name=encryption,proto3,enum=bytebase.store.SMTPMailDeliverySetting_Encryption" json:"encryption,omitempty"`
	// The CA, KEY, and CERT for the SMTP server.
	Ca             string                                 `protobuf:"bytes,4,opt,name=ca,proto3" json:"ca,omitempty"`
	Key            string                                 `protobuf:"bytes,5,opt,name=key,proto3" json:"key,omitempty"`
	Cert           string                                 `protobuf:"bytes,6,opt,name=cert,proto3" json:"cert,omitempty"`
	Authentication SMTPMailDeliverySetting_Authentication `protobuf:"varint,7,opt,name=authentication,proto3,enum=bytebase.store.SMTPMailDeliverySetting_Authentication" json:"authentication,omitempty"`
	Username       string                                 `protobuf:"bytes,8,opt,name=username,proto3" json:"username,omitempty"`
	Password       string                                 `protobuf:"bytes,9,opt,name=password,proto3" json:"password,omitempty"`
	// The sender email address.
	From          string `protobuf:"bytes,10,opt,name=from,proto3" json:"from,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SMTPMailDeliverySetting) Reset() {
	*x = SMTPMailDeliverySetting{}
	mi := &file_store_setting_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SMTPMailDeliverySetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SMTPMailDeliverySetting) ProtoMessage() {}

func (x *SMTPMailDeliverySetting) ProtoReflect() protoreflect.Message {
	mi := &file_store_setting_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SMTPMailDeliverySetting.ProtoReflect.Descriptor instead.
func (*SMTPMailDeliverySetting) Descriptor() ([]byte, []int) {
	return file_store_setting_proto_rawDescGZIP(), []int{6}
}

func (x *SMTPMailDeliverySetting) GetServer() string {
	if x != nil {
		return x.Server
	}
	return ""
}

func (x *SMTPMailDeliverySetting) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *SMTPMailDeliverySetting) GetEncryption() SMTPMailDeliverySetting_Encryption {
	if x != nil {
		return x.Encryption
	}
	return SMTPMailDeliverySetting_ENCRYPTION_UNSPECIFIED
}

func (x *SMTPMailDeliverySetting) GetCa() string {
	if x != nil {
		return x.Ca
	}
	return ""
}

func (x *SMTPMailDeliverySetting) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SMTPMailDeliverySetting) GetCert() string {
	if x != nil {
		return x.Cert
	}
	return ""
}

func (x *SMTPMailDeliverySetting) GetAuthentication() SMTPMailDeliverySetting_Authentication {
	if x != nil {
		return x.Authentication
	}
	return SMTPMailDeliverySetting_AUTHENTICATION_UNSPECIFIED
}

func (x *SMTPMailDeliverySetting) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *SMTPMailDeliverySetting) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *SMTPMailDeliverySetting) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

type SchemaTemplateSetting struct {
	state          protoimpl.MessageState                 `protogen:"open.v1"`
	FieldTemplates []*SchemaTemplateSetting_FieldTemplate `protobuf:"bytes,1,rep,name=field_templates,json=fieldTemplates,proto3" json:"field_templates,omitempty"`
	ColumnTypes    []*SchemaTemplateSetting_ColumnType    `protobuf:"bytes,2,rep,name=column_types,json=columnTypes,proto3" json:"column_types,omitempty"`
	TableTemplates []*SchemaTemplateSetting_TableTemplate `protobuf:"bytes,3,rep,name=table_templates,json=tableTemplates,proto3" json:"table_templates,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SchemaTemplateSetting) Reset() {
	*x = SchemaTemplateSetting{}
	mi := &file_store_setting_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchemaTemplateSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaTemplateSetting) ProtoMessage() {}

func (x *SchemaTemplateSetting) ProtoReflect() protoreflect.Message {
	mi := &file_store_setting_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaTemplateSetting.ProtoReflect.Descriptor instead.
func (*SchemaTemplateSetting) Descriptor() ([]byte, []int) {
	return file_store_setting_proto_rawDescGZIP(), []int{7}
}

func (x *SchemaTemplateSetting) GetFieldTemplates() []*SchemaTemplateSetting_FieldTemplate {
	if x != nil {
		return x.FieldTemplates
	}
	return nil
}

func (x *SchemaTemplateSetting) GetColumnTypes() []*SchemaTemplateSetting_ColumnType {
	if x != nil {
		return x.ColumnTypes
	}
	return nil
}

func (x *SchemaTemplateSetting) GetTableTemplates() []*SchemaTemplateSetting_TableTemplate {
	if x != nil {
		return x.TableTemplates
	}
	return nil
}

type DataClassificationSetting struct {
	state         protoimpl.MessageState                                `protogen:"open.v1"`
	Configs       []*DataClassificationSetting_DataClassificationConfig `protobuf:"bytes,1,rep,name=configs,proto3" json:"configs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DataClassificationSetting) Reset() {
	*x = DataClassificationSetting{}
	mi := &file_store_setting_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataClassificationSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataClassificationSetting) ProtoMessage() {}

func (x *DataClassificationSetting) ProtoReflect() protoreflect.Message {
	mi := &file_store_setting_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataClassificationSetting.ProtoReflect.Descriptor instead.
func (*DataClassificationSetting) Descriptor() ([]byte, []int) {
	return file_store_setting_proto_rawDescGZIP(), []int{8}
}

func (x *DataClassificationSetting) GetConfigs() []*DataClassificationSetting_DataClassificationConfig {
	if x != nil {
		return x.Configs
	}
	return nil
}

type SemanticTypeSetting struct {
	state         protoimpl.MessageState              `protogen:"open.v1"`
	Types         []*SemanticTypeSetting_SemanticType `protobuf:"bytes,1,rep,name=types,proto3" json:"types,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SemanticTypeSetting) Reset() {
	*x = SemanticTypeSetting{}
	mi := &file_store_setting_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SemanticTypeSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SemanticTypeSetting) ProtoMessage() {}

func (x *SemanticTypeSetting) ProtoReflect() protoreflect.Message {
	mi := &file_store_setting_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SemanticTypeSetting.ProtoReflect.Descriptor instead.
func (*SemanticTypeSetting) Descriptor() ([]byte, []int) {
	return file_store_setting_proto_rawDescGZIP(), []int{9}
}

func (x *SemanticTypeSetting) GetTypes() []*SemanticTypeSetting_SemanticType {
	if x != nil {
		return x.Types
	}
	return nil
}

type Algorithm struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Mask:
	//
	//	*Algorithm_FullMask_
	//	*Algorithm_RangeMask_
	//	*Algorithm_Md5Mask
	//	*Algorithm_InnerOuterMask_
	Mask          isAlgorithm_Mask `protobuf_oneof:"mask"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Algorithm) Reset() {
	*x = Algorithm{}
	mi := &file_store_setting_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Algorithm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Algorithm) ProtoMessage() {}

func (x *Algorithm) ProtoReflect() protoreflect.Message {
	mi := &file_store_setting_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Algorithm.ProtoReflect.Descriptor instead.
func (*Algorithm) Descriptor() ([]byte, []int) {
	return file_store_setting_proto_rawDescGZIP(), []int{10}
}

func (x *Algorithm) GetMask() isAlgorithm_Mask {
	if x != nil {
		return x.Mask
	}
	return nil
}

func (x *Algorithm) GetFullMask() *Algorithm_FullMask {
	if x != nil {
		if x, ok := x.Mask.(*Algorithm_FullMask_); ok {
			return x.FullMask
		}
	}
	return nil
}

func (x *Algorithm) GetRangeMask() *Algorithm_RangeMask {
	if x != nil {
		if x, ok := x.Mask.(*Algorithm_RangeMask_); ok {
			return x.RangeMask
		}
	}
	return nil
}

func (x *Algorithm) GetMd5Mask() *Algorithm_MD5Mask {
	if x != nil {
		if x, ok := x.Mask.(*Algorithm_Md5Mask); ok {
			return x.Md5Mask
		}
	}
	return nil
}

func (x *Algorithm) GetInnerOuterMask() *Algorithm_InnerOuterMask {
	if x != nil {
		if x, ok := x.Mask.(*Algorithm_InnerOuterMask_); ok {
			return x.InnerOuterMask
		}
	}
	return nil
}

type isAlgorithm_Mask interface {
	isAlgorithm_Mask()
}

type Algorithm_FullMask_ struct {
	FullMask *Algorithm_FullMask `protobuf:"bytes,5,opt,name=full_mask,json=fullMask,proto3,oneof"`
}

type Algorithm_RangeMask_ struct {
	RangeMask *Algorithm_RangeMask `protobuf:"bytes,6,opt,name=range_mask,json=rangeMask,proto3,oneof"`
}

type Algorithm_Md5Mask struct {
	Md5Mask *Algorithm_MD5Mask `protobuf:"bytes,7,opt,name=md5_mask,json=md5Mask,proto3,oneof"`
}

type Algorithm_InnerOuterMask_ struct {
	InnerOuterMask *Algorithm_InnerOuterMask `protobuf:"bytes,8,opt,name=inner_outer_mask,json=innerOuterMask,proto3,oneof"`
}

func (*Algorithm_FullMask_) isAlgorithm_Mask() {}

func (*Algorithm_RangeMask_) isAlgorithm_Mask() {}

func (*Algorithm_Md5Mask) isAlgorithm_Mask() {}

func (*Algorithm_InnerOuterMask_) isAlgorithm_Mask() {}

type AppIMSetting struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Slack         *AppIMSetting_Slack    `protobuf:"bytes,1,opt,name=slack,proto3" json:"slack,omitempty"`
	Feishu        *AppIMSetting_Feishu   `protobuf:"bytes,2,opt,name=feishu,proto3" json:"feishu,omitempty"`
	Wecom         *AppIMSetting_Wecom    `protobuf:"bytes,3,opt,name=wecom,proto3" json:"wecom,omitempty"`
	Lark          *AppIMSetting_Lark     `protobuf:"bytes,4,opt,name=lark,proto3" json:"lark,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AppIMSetting) Reset() {
	*x = AppIMSetting{}
	mi := &file_store_setting_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppIMSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppIMSetting) ProtoMessage() {}

func (x *AppIMSetting) ProtoReflect() protoreflect.Message {
	mi := &file_store_setting_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppIMSetting.ProtoReflect.Descriptor instead.
func (*AppIMSetting) Descriptor() ([]byte, []int) {
	return file_store_setting_proto_rawDescGZIP(), []int{11}
}

func (x *AppIMSetting) GetSlack() *AppIMSetting_Slack {
	if x != nil {
		return x.Slack
	}
	return nil
}

func (x *AppIMSetting) GetFeishu() *AppIMSetting_Feishu {
	if x != nil {
		return x.Feishu
	}
	return nil
}

func (x *AppIMSetting) GetWecom() *AppIMSetting_Wecom {
	if x != nil {
		return x.Wecom
	}
	return nil
}

func (x *AppIMSetting) GetLark() *AppIMSetting_Lark {
	if x != nil {
		return x.Lark
	}
	return nil
}

type MaximumSQLResultSizeSetting struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The limit is in bytes.
	// The default value is 100MB, we will use the default value if the setting not exists, or the limit <= 0.
	Limit         int64 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MaximumSQLResultSizeSetting) Reset() {
	*x = MaximumSQLResultSizeSetting{}
	mi := &file_store_setting_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MaximumSQLResultSizeSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaximumSQLResultSizeSetting) ProtoMessage() {}

func (x *MaximumSQLResultSizeSetting) ProtoReflect() protoreflect.Message {
	mi := &file_store_setting_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaximumSQLResultSizeSetting.ProtoReflect.Descriptor instead.
func (*MaximumSQLResultSizeSetting) Descriptor() ([]byte, []int) {
	return file_store_setting_proto_rawDescGZIP(), []int{12}
}

func (x *MaximumSQLResultSizeSetting) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type SCIMSetting struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Token         string                 `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SCIMSetting) Reset() {
	*x = SCIMSetting{}
	mi := &file_store_setting_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SCIMSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SCIMSetting) ProtoMessage() {}

func (x *SCIMSetting) ProtoReflect() protoreflect.Message {
	mi := &file_store_setting_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SCIMSetting.ProtoReflect.Descriptor instead.
func (*SCIMSetting) Descriptor() ([]byte, []int) {
	return file_store_setting_proto_rawDescGZIP(), []int{13}
}

func (x *SCIMSetting) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type PasswordRestrictionSetting struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// min_length is the minimum length for password, should no less than 8.
	MinLength int32 `protobuf:"varint,1,opt,name=min_length,json=minLength,proto3" json:"min_length,omitempty"`
	// require_number requires the password must contains at least one number.
	RequireNumber bool `protobuf:"varint,2,opt,name=require_number,json=requireNumber,proto3" json:"require_number,omitempty"`
	// require_letter requires the password must contains at least one letter, regardless of upper case or lower case
	RequireLetter bool `protobuf:"varint,3,opt,name=require_letter,json=requireLetter,proto3" json:"require_letter,omitempty"`
	// require_uppercase_letter requires the password must contains at least one upper case letter.
	RequireUppercaseLetter bool `protobuf:"varint,4,opt,name=require_uppercase_letter,json=requireUppercaseLetter,proto3" json:"require_uppercase_letter,omitempty"`
	// require_uppercase_letter requires the password must contains at least one special character.
	RequireSpecialCharacter bool `protobuf:"varint,5,opt,name=require_special_character,json=requireSpecialCharacter,proto3" json:"require_special_character,omitempty"`
	// require_reset_password_for_first_login requires users to reset their password after the 1st login.
	RequireResetPasswordForFirstLogin bool `protobuf:"varint,6,opt,name=require_reset_password_for_first_login,json=requireResetPasswordForFirstLogin,proto3" json:"require_reset_password_for_first_login,omitempty"`
	// password_rotation requires users to reset their password after the duration.
	PasswordRotation *durationpb.Duration `protobuf:"bytes,7,opt,name=password_rotation,json=passwordRotation,proto3" json:"password_rotation,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *PasswordRestrictionSetting) Reset() {
	*x = PasswordRestrictionSetting{}
	mi := &file_store_setting_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PasswordRestrictionSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PasswordRestrictionSetting) ProtoMessage() {}

func (x *PasswordRestrictionSetting) ProtoReflect() protoreflect.Message {
	mi := &file_store_setting_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PasswordRestrictionSetting.ProtoReflect.Descriptor instead.
func (*PasswordRestrictionSetting) Descriptor() ([]byte, []int) {
	return file_store_setting_proto_rawDescGZIP(), []int{14}
}

func (x *PasswordRestrictionSetting) GetMinLength() int32 {
	if x != nil {
		return x.MinLength
	}
	return 0
}

func (x *PasswordRestrictionSetting) GetRequireNumber() bool {
	if x != nil {
		return x.RequireNumber
	}
	return false
}

func (x *PasswordRestrictionSetting) GetRequireLetter() bool {
	if x != nil {
		return x.RequireLetter
	}
	return false
}

func (x *PasswordRestrictionSetting) GetRequireUppercaseLetter() bool {
	if x != nil {
		return x.RequireUppercaseLetter
	}
	return false
}

func (x *PasswordRestrictionSetting) GetRequireSpecialCharacter() bool {
	if x != nil {
		return x.RequireSpecialCharacter
	}
	return false
}

func (x *PasswordRestrictionSetting) GetRequireResetPasswordForFirstLogin() bool {
	if x != nil {
		return x.RequireResetPasswordForFirstLogin
	}
	return false
}

func (x *PasswordRestrictionSetting) GetPasswordRotation() *durationpb.Duration {
	if x != nil {
		return x.PasswordRotation
	}
	return nil
}

type WorkspaceApprovalSetting_Rule struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Expression    *v1alpha1.Expr         `protobuf:"bytes,1,opt,name=expression,proto3" json:"expression,omitempty"`
	Template      *ApprovalTemplate      `protobuf:"bytes,2,opt,name=template,proto3" json:"template,omitempty"`
	Condition     *expr.Expr             `protobuf:"bytes,3,opt,name=condition,proto3" json:"condition,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkspaceApprovalSetting_Rule) Reset() {
	*x = WorkspaceApprovalSetting_Rule{}
	mi := &file_store_setting_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkspaceApprovalSetting_Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkspaceApprovalSetting_Rule) ProtoMessage() {}

func (x *WorkspaceApprovalSetting_Rule) ProtoReflect() protoreflect.Message {
	mi := &file_store_setting_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkspaceApprovalSetting_Rule.ProtoReflect.Descriptor instead.
func (*WorkspaceApprovalSetting_Rule) Descriptor() ([]byte, []int) {
	return file_store_setting_proto_rawDescGZIP(), []int{3, 0}
}

func (x *WorkspaceApprovalSetting_Rule) GetExpression() *v1alpha1.Expr {
	if x != nil {
		return x.Expression
	}
	return nil
}

func (x *WorkspaceApprovalSetting_Rule) GetTemplate() *ApprovalTemplate {
	if x != nil {
		return x.Template
	}
	return nil
}

func (x *WorkspaceApprovalSetting_Rule) GetCondition() *expr.Expr {
	if x != nil {
		return x.Condition
	}
	return nil
}

type ExternalApprovalSetting_Node struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A unique identifier for a node in UUID format.
	// We will also include the id in the message sending to the external relay
	// service to identify the node.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The title of the node.
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// The external endpoint for the relay service, e.g. "http://hello:1234".
	Endpoint      string `protobuf:"bytes,3,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExternalApprovalSetting_Node) Reset() {
	*x = ExternalApprovalSetting_Node{}
	mi := &file_store_setting_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExternalApprovalSetting_Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalApprovalSetting_Node) ProtoMessage() {}

func (x *ExternalApprovalSetting_Node) ProtoReflect() protoreflect.Message {
	mi := &file_store_setting_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalApprovalSetting_Node.ProtoReflect.Descriptor instead.
func (*ExternalApprovalSetting_Node) Descriptor() ([]byte, []int) {
	return file_store_setting_proto_rawDescGZIP(), []int{4, 0}
}

func (x *ExternalApprovalSetting_Node) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ExternalApprovalSetting_Node) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ExternalApprovalSetting_Node) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

type SchemaTemplateSetting_FieldTemplate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Engine        Engine                 `protobuf:"varint,2,opt,name=engine,proto3,enum=bytebase.store.Engine" json:"engine,omitempty"`
	Category      string                 `protobuf:"bytes,3,opt,name=category,proto3" json:"category,omitempty"`
	Column        *ColumnMetadata        `protobuf:"bytes,4,opt,name=column,proto3" json:"column,omitempty"`
	Catalog       *ColumnCatalog         `protobuf:"bytes,5,opt,name=catalog,proto3" json:"catalog,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SchemaTemplateSetting_FieldTemplate) Reset() {
	*x = SchemaTemplateSetting_FieldTemplate{}
	mi := &file_store_setting_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchemaTemplateSetting_FieldTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaTemplateSetting_FieldTemplate) ProtoMessage() {}

func (x *SchemaTemplateSetting_FieldTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_store_setting_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaTemplateSetting_FieldTemplate.ProtoReflect.Descriptor instead.
func (*SchemaTemplateSetting_FieldTemplate) Descriptor() ([]byte, []int) {
	return file_store_setting_proto_rawDescGZIP(), []int{7, 0}
}

func (x *SchemaTemplateSetting_FieldTemplate) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SchemaTemplateSetting_FieldTemplate) GetEngine() Engine {
	if x != nil {
		return x.Engine
	}
	return Engine_ENGINE_UNSPECIFIED
}

func (x *SchemaTemplateSetting_FieldTemplate) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *SchemaTemplateSetting_FieldTemplate) GetColumn() *ColumnMetadata {
	if x != nil {
		return x.Column
	}
	return nil
}

func (x *SchemaTemplateSetting_FieldTemplate) GetCatalog() *ColumnCatalog {
	if x != nil {
		return x.Catalog
	}
	return nil
}

type SchemaTemplateSetting_ColumnType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Engine        Engine                 `protobuf:"varint,1,opt,name=engine,proto3,enum=bytebase.store.Engine" json:"engine,omitempty"`
	Enabled       bool                   `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Types         []string               `protobuf:"bytes,3,rep,name=types,proto3" json:"types,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SchemaTemplateSetting_ColumnType) Reset() {
	*x = SchemaTemplateSetting_ColumnType{}
	mi := &file_store_setting_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchemaTemplateSetting_ColumnType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaTemplateSetting_ColumnType) ProtoMessage() {}

func (x *SchemaTemplateSetting_ColumnType) ProtoReflect() protoreflect.Message {
	mi := &file_store_setting_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaTemplateSetting_ColumnType.ProtoReflect.Descriptor instead.
func (*SchemaTemplateSetting_ColumnType) Descriptor() ([]byte, []int) {
	return file_store_setting_proto_rawDescGZIP(), []int{7, 1}
}

func (x *SchemaTemplateSetting_ColumnType) GetEngine() Engine {
	if x != nil {
		return x.Engine
	}
	return Engine_ENGINE_UNSPECIFIED
}

func (x *SchemaTemplateSetting_ColumnType) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *SchemaTemplateSetting_ColumnType) GetTypes() []string {
	if x != nil {
		return x.Types
	}
	return nil
}

type SchemaTemplateSetting_TableTemplate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Engine        Engine                 `protobuf:"varint,2,opt,name=engine,proto3,enum=bytebase.store.Engine" json:"engine,omitempty"`
	Category      string                 `protobuf:"bytes,3,opt,name=category,proto3" json:"category,omitempty"`
	Table         *TableMetadata         `protobuf:"bytes,4,opt,name=table,proto3" json:"table,omitempty"`
	Catalog       *TableCatalog          `protobuf:"bytes,5,opt,name=catalog,proto3" json:"catalog,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SchemaTemplateSetting_TableTemplate) Reset() {
	*x = SchemaTemplateSetting_TableTemplate{}
	mi := &file_store_setting_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchemaTemplateSetting_TableTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaTemplateSetting_TableTemplate) ProtoMessage() {}

func (x *SchemaTemplateSetting_TableTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_store_setting_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaTemplateSetting_TableTemplate.ProtoReflect.Descriptor instead.
func (*SchemaTemplateSetting_TableTemplate) Descriptor() ([]byte, []int) {
	return file_store_setting_proto_rawDescGZIP(), []int{7, 2}
}

func (x *SchemaTemplateSetting_TableTemplate) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SchemaTemplateSetting_TableTemplate) GetEngine() Engine {
	if x != nil {
		return x.Engine
	}
	return Engine_ENGINE_UNSPECIFIED
}

func (x *SchemaTemplateSetting_TableTemplate) GetCategory() string {
	if x != nil {
		return x.Category
	}
	return ""
}

func (x *SchemaTemplateSetting_TableTemplate) GetTable() *TableMetadata {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *SchemaTemplateSetting_TableTemplate) GetCatalog() *TableCatalog {
	if x != nil {
		return x.Catalog
	}
	return nil
}

type DataClassificationSetting_DataClassificationConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// id is the uuid for classification. Each project can chose one
	// classification config.
	Id    string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// levels is user defined level list for classification.
	// The order for the level decides its priority.
	Levels []*DataClassificationSetting_DataClassificationConfig_Level `protobuf:"bytes,3,rep,name=levels,proto3" json:"levels,omitempty"`
	// classification is the id - DataClassification map.
	// The id should in [0-9]+-[0-9]+-[0-9]+ format.
	Classification map[string]*DataClassificationSetting_DataClassificationConfig_DataClassification `protobuf:"bytes,4,rep,name=classification,proto3" json:"classification,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// If true, we will only store the classification in the config.
	// Otherwise we will get the classification from table/column comment,
	// and write back to the schema metadata.
	ClassificationFromConfig bool `protobuf:"varint,5,opt,name=classification_from_config,json=classificationFromConfig,proto3" json:"classification_from_config,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *DataClassificationSetting_DataClassificationConfig) Reset() {
	*x = DataClassificationSetting_DataClassificationConfig{}
	mi := &file_store_setting_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataClassificationSetting_DataClassificationConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataClassificationSetting_DataClassificationConfig) ProtoMessage() {}

func (x *DataClassificationSetting_DataClassificationConfig) ProtoReflect() protoreflect.Message {
	mi := &file_store_setting_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataClassificationSetting_DataClassificationConfig.ProtoReflect.Descriptor instead.
func (*DataClassificationSetting_DataClassificationConfig) Descriptor() ([]byte, []int) {
	return file_store_setting_proto_rawDescGZIP(), []int{8, 0}
}

func (x *DataClassificationSetting_DataClassificationConfig) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DataClassificationSetting_DataClassificationConfig) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *DataClassificationSetting_DataClassificationConfig) GetLevels() []*DataClassificationSetting_DataClassificationConfig_Level {
	if x != nil {
		return x.Levels
	}
	return nil
}

func (x *DataClassificationSetting_DataClassificationConfig) GetClassification() map[string]*DataClassificationSetting_DataClassificationConfig_DataClassification {
	if x != nil {
		return x.Classification
	}
	return nil
}

func (x *DataClassificationSetting_DataClassificationConfig) GetClassificationFromConfig() bool {
	if x != nil {
		return x.ClassificationFromConfig
	}
	return false
}

type DataClassificationSetting_DataClassificationConfig_Level struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title         string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description   string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DataClassificationSetting_DataClassificationConfig_Level) Reset() {
	*x = DataClassificationSetting_DataClassificationConfig_Level{}
	mi := &file_store_setting_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataClassificationSetting_DataClassificationConfig_Level) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataClassificationSetting_DataClassificationConfig_Level) ProtoMessage() {}

func (x *DataClassificationSetting_DataClassificationConfig_Level) ProtoReflect() protoreflect.Message {
	mi := &file_store_setting_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataClassificationSetting_DataClassificationConfig_Level.ProtoReflect.Descriptor instead.
func (*DataClassificationSetting_DataClassificationConfig_Level) Descriptor() ([]byte, []int) {
	return file_store_setting_proto_rawDescGZIP(), []int{8, 0, 0}
}

func (x *DataClassificationSetting_DataClassificationConfig_Level) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DataClassificationSetting_DataClassificationConfig_Level) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *DataClassificationSetting_DataClassificationConfig_Level) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type DataClassificationSetting_DataClassificationConfig_DataClassification struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// id is the classification id in [0-9]+-[0-9]+-[0-9]+ format.
	Id            string  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Title         string  `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description   string  `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	LevelId       *string `protobuf:"bytes,4,opt,name=level_id,json=levelId,proto3,oneof" json:"level_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DataClassificationSetting_DataClassificationConfig_DataClassification) Reset() {
	*x = DataClassificationSetting_DataClassificationConfig_DataClassification{}
	mi := &file_store_setting_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataClassificationSetting_DataClassificationConfig_DataClassification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataClassificationSetting_DataClassificationConfig_DataClassification) ProtoMessage() {}

func (x *DataClassificationSetting_DataClassificationConfig_DataClassification) ProtoReflect() protoreflect.Message {
	mi := &file_store_setting_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataClassificationSetting_DataClassificationConfig_DataClassification.ProtoReflect.Descriptor instead.
func (*DataClassificationSetting_DataClassificationConfig_DataClassification) Descriptor() ([]byte, []int) {
	return file_store_setting_proto_rawDescGZIP(), []int{8, 0, 1}
}

func (x *DataClassificationSetting_DataClassificationConfig_DataClassification) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *DataClassificationSetting_DataClassificationConfig_DataClassification) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *DataClassificationSetting_DataClassificationConfig_DataClassification) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DataClassificationSetting_DataClassificationConfig_DataClassification) GetLevelId() string {
	if x != nil && x.LevelId != nil {
		return *x.LevelId
	}
	return ""
}

type SemanticTypeSetting_SemanticType struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// id is the uuid for semantic type.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// the title of the semantic type, it should not be empty.
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// the description of the semantic type, it can be empty.
	Description   string     `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Algorithm     *Algorithm `protobuf:"bytes,6,opt,name=algorithm,proto3" json:"algorithm,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SemanticTypeSetting_SemanticType) Reset() {
	*x = SemanticTypeSetting_SemanticType{}
	mi := &file_store_setting_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SemanticTypeSetting_SemanticType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SemanticTypeSetting_SemanticType) ProtoMessage() {}

func (x *SemanticTypeSetting_SemanticType) ProtoReflect() protoreflect.Message {
	mi := &file_store_setting_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SemanticTypeSetting_SemanticType.ProtoReflect.Descriptor instead.
func (*SemanticTypeSetting_SemanticType) Descriptor() ([]byte, []int) {
	return file_store_setting_proto_rawDescGZIP(), []int{9, 0}
}

func (x *SemanticTypeSetting_SemanticType) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SemanticTypeSetting_SemanticType) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SemanticTypeSetting_SemanticType) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *SemanticTypeSetting_SemanticType) GetAlgorithm() *Algorithm {
	if x != nil {
		return x.Algorithm
	}
	return nil
}

type Algorithm_FullMask struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// substitution is the string used to replace the original value, the
	// max length of the string is 16 bytes.
	Substitution  string `protobuf:"bytes,1,opt,name=substitution,proto3" json:"substitution,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Algorithm_FullMask) Reset() {
	*x = Algorithm_FullMask{}
	mi := &file_store_setting_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Algorithm_FullMask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Algorithm_FullMask) ProtoMessage() {}

func (x *Algorithm_FullMask) ProtoReflect() protoreflect.Message {
	mi := &file_store_setting_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Algorithm_FullMask.ProtoReflect.Descriptor instead.
func (*Algorithm_FullMask) Descriptor() ([]byte, []int) {
	return file_store_setting_proto_rawDescGZIP(), []int{10, 0}
}

func (x *Algorithm_FullMask) GetSubstitution() string {
	if x != nil {
		return x.Substitution
	}
	return ""
}

type Algorithm_RangeMask struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// We store it as a repeated field to face the fact that the original value may have multiple parts should be masked.
	// But frontend can be started with a single rule easily.
	Slices        []*Algorithm_RangeMask_Slice `protobuf:"bytes,1,rep,name=slices,proto3" json:"slices,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Algorithm_RangeMask) Reset() {
	*x = Algorithm_RangeMask{}
	mi := &file_store_setting_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Algorithm_RangeMask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Algorithm_RangeMask) ProtoMessage() {}

func (x *Algorithm_RangeMask) ProtoReflect() protoreflect.Message {
	mi := &file_store_setting_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Algorithm_RangeMask.ProtoReflect.Descriptor instead.
func (*Algorithm_RangeMask) Descriptor() ([]byte, []int) {
	return file_store_setting_proto_rawDescGZIP(), []int{10, 1}
}

func (x *Algorithm_RangeMask) GetSlices() []*Algorithm_RangeMask_Slice {
	if x != nil {
		return x.Slices
	}
	return nil
}

type Algorithm_MD5Mask struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// salt is the salt value to generate a different hash that with the word alone.
	Salt          string `protobuf:"bytes,1,opt,name=salt,proto3" json:"salt,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Algorithm_MD5Mask) Reset() {
	*x = Algorithm_MD5Mask{}
	mi := &file_store_setting_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Algorithm_MD5Mask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Algorithm_MD5Mask) ProtoMessage() {}

func (x *Algorithm_MD5Mask) ProtoReflect() protoreflect.Message {
	mi := &file_store_setting_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Algorithm_MD5Mask.ProtoReflect.Descriptor instead.
func (*Algorithm_MD5Mask) Descriptor() ([]byte, []int) {
	return file_store_setting_proto_rawDescGZIP(), []int{10, 2}
}

func (x *Algorithm_MD5Mask) GetSalt() string {
	if x != nil {
		return x.Salt
	}
	return ""
}

type Algorithm_InnerOuterMask struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	PrefixLen     int32                             `protobuf:"varint,1,opt,name=prefix_len,json=prefixLen,proto3" json:"prefix_len,omitempty"`
	SuffixLen     int32                             `protobuf:"varint,2,opt,name=suffix_len,json=suffixLen,proto3" json:"suffix_len,omitempty"`
	Substitution  string                            `protobuf:"bytes,3,opt,name=substitution,proto3" json:"substitution,omitempty"`
	Type          Algorithm_InnerOuterMask_MaskType `protobuf:"varint,4,opt,name=type,proto3,enum=bytebase.store.Algorithm_InnerOuterMask_MaskType" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Algorithm_InnerOuterMask) Reset() {
	*x = Algorithm_InnerOuterMask{}
	mi := &file_store_setting_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Algorithm_InnerOuterMask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Algorithm_InnerOuterMask) ProtoMessage() {}

func (x *Algorithm_InnerOuterMask) ProtoReflect() protoreflect.Message {
	mi := &file_store_setting_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Algorithm_InnerOuterMask.ProtoReflect.Descriptor instead.
func (*Algorithm_InnerOuterMask) Descriptor() ([]byte, []int) {
	return file_store_setting_proto_rawDescGZIP(), []int{10, 3}
}

func (x *Algorithm_InnerOuterMask) GetPrefixLen() int32 {
	if x != nil {
		return x.PrefixLen
	}
	return 0
}

func (x *Algorithm_InnerOuterMask) GetSuffixLen() int32 {
	if x != nil {
		return x.SuffixLen
	}
	return 0
}

func (x *Algorithm_InnerOuterMask) GetSubstitution() string {
	if x != nil {
		return x.Substitution
	}
	return ""
}

func (x *Algorithm_InnerOuterMask) GetType() Algorithm_InnerOuterMask_MaskType {
	if x != nil {
		return x.Type
	}
	return Algorithm_InnerOuterMask_MASK_TYPE_UNSPECIFIED
}

type Algorithm_RangeMask_Slice struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// start is the start index of the original value, start from 0 and should be less than stop.
	Start int32 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	// stop is the stop index of the original value, should be less than the length of the original value.
	End int32 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
	// OriginalValue[start:end) would be replaced with replace_with.
	Substitution  string `protobuf:"bytes,3,opt,name=substitution,proto3" json:"substitution,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Algorithm_RangeMask_Slice) Reset() {
	*x = Algorithm_RangeMask_Slice{}
	mi := &file_store_setting_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Algorithm_RangeMask_Slice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Algorithm_RangeMask_Slice) ProtoMessage() {}

func (x *Algorithm_RangeMask_Slice) ProtoReflect() protoreflect.Message {
	mi := &file_store_setting_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Algorithm_RangeMask_Slice.ProtoReflect.Descriptor instead.
func (*Algorithm_RangeMask_Slice) Descriptor() ([]byte, []int) {
	return file_store_setting_proto_rawDescGZIP(), []int{10, 1, 0}
}

func (x *Algorithm_RangeMask_Slice) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *Algorithm_RangeMask_Slice) GetEnd() int32 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *Algorithm_RangeMask_Slice) GetSubstitution() string {
	if x != nil {
		return x.Substitution
	}
	return ""
}

type AppIMSetting_Slack struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Enabled       bool                   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Token         string                 `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AppIMSetting_Slack) Reset() {
	*x = AppIMSetting_Slack{}
	mi := &file_store_setting_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppIMSetting_Slack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppIMSetting_Slack) ProtoMessage() {}

func (x *AppIMSetting_Slack) ProtoReflect() protoreflect.Message {
	mi := &file_store_setting_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppIMSetting_Slack.ProtoReflect.Descriptor instead.
func (*AppIMSetting_Slack) Descriptor() ([]byte, []int) {
	return file_store_setting_proto_rawDescGZIP(), []int{11, 0}
}

func (x *AppIMSetting_Slack) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *AppIMSetting_Slack) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type AppIMSetting_Feishu struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Enabled       bool                   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	AppId         string                 `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	AppSecret     string                 `protobuf:"bytes,3,opt,name=app_secret,json=appSecret,proto3" json:"app_secret,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AppIMSetting_Feishu) Reset() {
	*x = AppIMSetting_Feishu{}
	mi := &file_store_setting_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppIMSetting_Feishu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppIMSetting_Feishu) ProtoMessage() {}

func (x *AppIMSetting_Feishu) ProtoReflect() protoreflect.Message {
	mi := &file_store_setting_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppIMSetting_Feishu.ProtoReflect.Descriptor instead.
func (*AppIMSetting_Feishu) Descriptor() ([]byte, []int) {
	return file_store_setting_proto_rawDescGZIP(), []int{11, 1}
}

func (x *AppIMSetting_Feishu) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *AppIMSetting_Feishu) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *AppIMSetting_Feishu) GetAppSecret() string {
	if x != nil {
		return x.AppSecret
	}
	return ""
}

type AppIMSetting_Wecom struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Enabled       bool                   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	CorpId        string                 `protobuf:"bytes,2,opt,name=corp_id,json=corpId,proto3" json:"corp_id,omitempty"`
	AgentId       string                 `protobuf:"bytes,3,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	Secret        string                 `protobuf:"bytes,4,opt,name=secret,proto3" json:"secret,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AppIMSetting_Wecom) Reset() {
	*x = AppIMSetting_Wecom{}
	mi := &file_store_setting_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppIMSetting_Wecom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppIMSetting_Wecom) ProtoMessage() {}

func (x *AppIMSetting_Wecom) ProtoReflect() protoreflect.Message {
	mi := &file_store_setting_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppIMSetting_Wecom.ProtoReflect.Descriptor instead.
func (*AppIMSetting_Wecom) Descriptor() ([]byte, []int) {
	return file_store_setting_proto_rawDescGZIP(), []int{11, 2}
}

func (x *AppIMSetting_Wecom) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *AppIMSetting_Wecom) GetCorpId() string {
	if x != nil {
		return x.CorpId
	}
	return ""
}

func (x *AppIMSetting_Wecom) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *AppIMSetting_Wecom) GetSecret() string {
	if x != nil {
		return x.Secret
	}
	return ""
}

type AppIMSetting_Lark struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Enabled       bool                   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	AppId         string                 `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	AppSecret     string                 `protobuf:"bytes,3,opt,name=app_secret,json=appSecret,proto3" json:"app_secret,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AppIMSetting_Lark) Reset() {
	*x = AppIMSetting_Lark{}
	mi := &file_store_setting_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AppIMSetting_Lark) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppIMSetting_Lark) ProtoMessage() {}

func (x *AppIMSetting_Lark) ProtoReflect() protoreflect.Message {
	mi := &file_store_setting_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppIMSetting_Lark.ProtoReflect.Descriptor instead.
func (*AppIMSetting_Lark) Descriptor() ([]byte, []int) {
	return file_store_setting_proto_rawDescGZIP(), []int{11, 3}
}

func (x *AppIMSetting_Lark) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *AppIMSetting_Lark) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *AppIMSetting_Lark) GetAppSecret() string {
	if x != nil {
		return x.AppSecret
	}
	return ""
}

var File_store_setting_proto protoreflect.FileDescriptor

var file_store_setting_proto_rawDesc = string([]byte{
	0x0a, 0x13, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x1a, 0x25, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x65, 0x78, 0x70, 0x72, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x65, 0x78, 0x70, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x61, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x97, 0x05, 0x0a, 0x17, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x55, 0x72, 0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f,
	0x73, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x64, 0x69,
	0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x12, 0x1f, 0x0a, 0x0b,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x32, 0x66, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x32, 0x66, 0x61, 0x12, 0x28, 0x0a,
	0x10, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x70, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e,
	0x64, 0x49, 0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x67, 0x69, 0x74, 0x6f, 0x70,
	0x73, 0x5f, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x73, 0x57, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x55, 0x72, 0x6c, 0x12, 0x40, 0x0a, 0x0e, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0c, 0x61, 0x6e, 0x6e, 0x6f, 0x75,
	0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x41,
	0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0c, 0x61, 0x6e, 0x6e,
	0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x51, 0x0a, 0x17, 0x6d, 0x61, 0x78,
	0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x52, 0x6f,
	0x6c, 0x65, 0x45, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x64, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x54,
	0x0a, 0x14, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x62,
	0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x12, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x18, 0x64, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x64, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x22, 0xe9,
	0x01, 0x0a, 0x0c, 0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x3d, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27,
	0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x41, 0x6e, 0x6e, 0x6f, 0x75, 0x6e, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x6c, 0x65,
	0x72, 0x74, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x22, 0x72, 0x0a, 0x0a, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f, 0x4c, 0x45,
	0x56, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x4c, 0x45, 0x52, 0x54,
	0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02,
	0x12, 0x18, 0x0a, 0x14, 0x41, 0x4c, 0x45, 0x52, 0x54, 0x5f, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f,
	0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x03, 0x22, 0x3c, 0x0a, 0x12, 0x41, 0x67,
	0x65, 0x6e, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x97, 0x02, 0x0a, 0x18, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x43, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52,
	0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x1a, 0xb5, 0x01, 0x0a, 0x04, 0x52,
	0x75, 0x6c, 0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x78, 0x70, 0x72, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x12, 0x2f, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xa7, 0x01, 0x0a, 0x17, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x42,
	0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x1a, 0x48, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x64, 0x0a, 0x17,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x4e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x88, 0x05, 0x0a, 0x17, 0x53, 0x4d, 0x54, 0x50, 0x4d, 0x61, 0x69, 0x6c, 0x44,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x52, 0x0a, 0x0a, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x32,
	0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x4d, 0x54, 0x50, 0x4d, 0x61, 0x69, 0x6c, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x63, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x63, 0x61, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x65, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x65, 0x72, 0x74, 0x12, 0x5e, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x62,
	0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x4d,
	0x54, 0x50, 0x4d, 0x61, 0x69, 0x6c, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x66, 0x72, 0x6f, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d,
	0x22, 0x6e, 0x0a, 0x0a, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x16, 0x45, 0x4e, 0x43, 0x52, 0x59, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4e,
	0x43, 0x52, 0x59, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12,
	0x17, 0x0a, 0x13, 0x45, 0x4e, 0x43, 0x52, 0x59, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54,
	0x41, 0x52, 0x54, 0x54, 0x4c, 0x53, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x4e, 0x43, 0x52,
	0x59, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x53, 0x4c, 0x5f, 0x54, 0x4c, 0x53, 0x10, 0x03,
	0x22, 0x9a, 0x01, 0x0a, 0x0e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14,
	0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50,
	0x4c, 0x41, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e,
	0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0x03,
	0x12, 0x1b, 0x0a, 0x17, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x43, 0x52, 0x41, 0x4d, 0x5f, 0x4d, 0x44, 0x35, 0x10, 0x04, 0x22, 0xd0, 0x06,
	0x0a, 0x15, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x5c, 0x0a, 0x0f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x12, 0x53, 0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x62, 0x79,
	0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x63,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x0f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x1a, 0xdc, 0x01, 0x0a, 0x0d, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x06, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x62, 0x79, 0x74,
	0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x52, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x36, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x37,
	0x0a, 0x07, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x07,
	0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x1a, 0x6c, 0x0a, 0x0a, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x06, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x1a, 0xd8, 0x01, 0x0a, 0x0d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52,
	0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x33, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x79, 0x74, 0x65,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x52, 0x07, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67,
	0x22, 0xd4, 0x06, 0x0a, 0x19, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x5c,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x42, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x1a, 0xd8, 0x05, 0x0a,
	0x18, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x60, 0x0a, 0x06, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x48, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x06, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x73, 0x12, 0x7e, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x56, 0x2e, 0x62, 0x79, 0x74, 0x65,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3c, 0x0a, 0x1a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a,
	0x4f, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x89, 0x01, 0x0a, 0x12, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1e, 0x0a, 0x08, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x07, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x1a, 0x98, 0x01, 0x0a,
	0x13, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x6b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x55, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xef, 0x01, 0x0a, 0x13, 0x53, 0x65, 0x6d, 0x61,
	0x6e, 0x74, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12,
	0x46, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x53, 0x65, 0x6d, 0x61, 0x6e, 0x74, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x1a, 0x8f, 0x01, 0x0a, 0x0c, 0x53, 0x65, 0x6d, 0x61,
	0x6e, 0x74, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x37, 0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x09,
	0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x22, 0xa0, 0x06, 0x0a, 0x09, 0x41, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x41, 0x0a, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x79, 0x74,
	0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x2e, 0x46, 0x75, 0x6c, 0x6c, 0x4d, 0x61, 0x73, 0x6b, 0x48, 0x00,
	0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x44, 0x0a, 0x0a, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x4d,
	0x61, 0x73, 0x6b, 0x48, 0x00, 0x52, 0x09, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x73, 0x6b,
	0x12, 0x3e, 0x0a, 0x08, 0x6d, 0x64, 0x35, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x2e, 0x4d, 0x44,
	0x35, 0x4d, 0x61, 0x73, 0x6b, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x64, 0x35, 0x4d, 0x61, 0x73, 0x6b,
	0x12, 0x54, 0x0a, 0x10, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x79, 0x74,
	0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x2e, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x65, 0x72,
	0x4d, 0x61, 0x73, 0x6b, 0x48, 0x00, 0x52, 0x0e, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x4f, 0x75, 0x74,
	0x65, 0x72, 0x4d, 0x61, 0x73, 0x6b, 0x1a, 0x2e, 0x0a, 0x08, 0x46, 0x75, 0x6c, 0x6c, 0x4d, 0x61,
	0x73, 0x6b, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69,
	0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xa3, 0x01, 0x0a, 0x09, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x4d, 0x61, 0x73, 0x6b, 0x12, 0x41, 0x0a, 0x06, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x2e,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x2e, 0x53, 0x6c, 0x69, 0x63, 0x65, 0x52,
	0x06, 0x73, 0x6c, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x53, 0x0a, 0x05, 0x53, 0x6c, 0x69, 0x63, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x73,
	0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1d, 0x0a, 0x07,
	0x4d, 0x44, 0x35, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x61, 0x6c, 0x74, 0x1a, 0xf6, 0x01, 0x0a, 0x0e,
	0x49, 0x6e, 0x6e, 0x65, 0x72, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x4c, 0x65, 0x6e, 0x12, 0x22, 0x0a, 0x0c,
	0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x45, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31,
	0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x2e, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x4f,
	0x75, 0x74, 0x65, 0x72, 0x4d, 0x61, 0x73, 0x6b, 0x2e, 0x4d, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3b, 0x0a, 0x08, 0x4d, 0x61, 0x73, 0x6b, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x4d, 0x41, 0x53, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x49, 0x4e, 0x4e, 0x45, 0x52, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x55, 0x54,
	0x45, 0x52, 0x10, 0x02, 0x42, 0x06, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x22, 0xd0, 0x04, 0x0a,
	0x0c, 0x41, 0x70, 0x70, 0x49, 0x4d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a,
	0x05, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62,
	0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x70,
	0x70, 0x49, 0x4d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x6c, 0x61, 0x63, 0x6b,
	0x52, 0x05, 0x73, 0x6c, 0x61, 0x63, 0x6b, 0x12, 0x3b, 0x0a, 0x06, 0x66, 0x65, 0x69, 0x73, 0x68,
	0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x49, 0x4d, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x65, 0x69, 0x73, 0x68, 0x75, 0x52, 0x06, 0x66, 0x65,
	0x69, 0x73, 0x68, 0x75, 0x12, 0x38, 0x0a, 0x05, 0x77, 0x65, 0x63, 0x6f, 0x6d, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x70, 0x70, 0x49, 0x4d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x57, 0x65, 0x63, 0x6f, 0x6d, 0x52, 0x05, 0x77, 0x65, 0x63, 0x6f, 0x6d, 0x12, 0x35,
	0x0a, 0x04, 0x6c, 0x61, 0x72, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62,
	0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x41, 0x70,
	0x70, 0x49, 0x4d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x61, 0x72, 0x6b, 0x52,
	0x04, 0x6c, 0x61, 0x72, 0x6b, 0x1a, 0x37, 0x0a, 0x05, 0x53, 0x6c, 0x61, 0x63, 0x6b, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x58,
	0x0a, 0x06, 0x46, 0x65, 0x69, 0x73, 0x68, 0x75, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x70, 0x70,
	0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x70, 0x70, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x1a, 0x6d, 0x0a, 0x05, 0x57, 0x65, 0x63, 0x6f,
	0x6d, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63,
	0x6f, 0x72, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f,
	0x72, 0x70, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x1a, 0x56, 0x0a, 0x04, 0x4c, 0x61, 0x72, 0x6b, 0x12,
	0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x70, 0x70, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22,
	0x33, 0x0a, 0x1b, 0x4d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x53, 0x51, 0x4c, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x22, 0x23, 0x0a, 0x0b, 0x53, 0x43, 0x49, 0x4d, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x9a, 0x03, 0x0a, 0x1a, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x5f,
	0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x69,
	0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x25,
	0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x4c,
	0x65, 0x74, 0x74, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x18, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x63, 0x61, 0x73, 0x65, 0x5f, 0x6c, 0x65, 0x74, 0x74, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x16, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x55, 0x70, 0x70, 0x65, 0x72, 0x63, 0x61, 0x73, 0x65, 0x4c, 0x65, 0x74, 0x74, 0x65, 0x72, 0x12,
	0x3a, 0x0a, 0x19, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x69,
	0x61, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x17, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x61, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x12, 0x51, 0x0a, 0x26, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x21, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x46, 0x6f, 0x72, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x46,
	0x0a, 0x11, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x5f, 0x72, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2a, 0x54, 0x0a, 0x12, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x20,
	0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x5f,
	0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x50, 0x49, 0x50, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x45, 0x44, 0x49, 0x54, 0x4f, 0x52, 0x10, 0x02, 0x42, 0x14, 0x5a, 0x12,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x67, 0x6f, 0x2f, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_store_setting_proto_rawDescOnce sync.Once
	file_store_setting_proto_rawDescData []byte
)

func file_store_setting_proto_rawDescGZIP() []byte {
	file_store_setting_proto_rawDescOnce.Do(func() {
		file_store_setting_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_store_setting_proto_rawDesc), len(file_store_setting_proto_rawDesc)))
	})
	return file_store_setting_proto_rawDescData
}

var file_store_setting_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_store_setting_proto_msgTypes = make([]protoimpl.MessageInfo, 34)
var file_store_setting_proto_goTypes = []any{
	(DatabaseChangeMode)(0),                                                       // 0: bytebase.store.DatabaseChangeMode
	(Announcement_AlertLevel)(0),                                                  // 1: bytebase.store.Announcement.AlertLevel
	(SMTPMailDeliverySetting_Encryption)(0),                                       // 2: bytebase.store.SMTPMailDeliverySetting.Encryption
	(SMTPMailDeliverySetting_Authentication)(0),                                   // 3: bytebase.store.SMTPMailDeliverySetting.Authentication
	(Algorithm_InnerOuterMask_MaskType)(0),                                        // 4: bytebase.store.Algorithm.InnerOuterMask.MaskType
	(*WorkspaceProfileSetting)(nil),                                               // 5: bytebase.store.WorkspaceProfileSetting
	(*Announcement)(nil),                                                          // 6: bytebase.store.Announcement
	(*AgentPluginSetting)(nil),                                                    // 7: bytebase.store.AgentPluginSetting
	(*WorkspaceApprovalSetting)(nil),                                              // 8: bytebase.store.WorkspaceApprovalSetting
	(*ExternalApprovalSetting)(nil),                                               // 9: bytebase.store.ExternalApprovalSetting
	(*ExternalApprovalPayload)(nil),                                               // 10: bytebase.store.ExternalApprovalPayload
	(*SMTPMailDeliverySetting)(nil),                                               // 11: bytebase.store.SMTPMailDeliverySetting
	(*SchemaTemplateSetting)(nil),                                                 // 12: bytebase.store.SchemaTemplateSetting
	(*DataClassificationSetting)(nil),                                             // 13: bytebase.store.DataClassificationSetting
	(*SemanticTypeSetting)(nil),                                                   // 14: bytebase.store.SemanticTypeSetting
	(*Algorithm)(nil),                                                             // 15: bytebase.store.Algorithm
	(*AppIMSetting)(nil),                                                          // 16: bytebase.store.AppIMSetting
	(*MaximumSQLResultSizeSetting)(nil),                                           // 17: bytebase.store.MaximumSQLResultSizeSetting
	(*SCIMSetting)(nil),                                                           // 18: bytebase.store.SCIMSetting
	(*PasswordRestrictionSetting)(nil),                                            // 19: bytebase.store.PasswordRestrictionSetting
	(*WorkspaceApprovalSetting_Rule)(nil),                                         // 20: bytebase.store.WorkspaceApprovalSetting.Rule
	(*ExternalApprovalSetting_Node)(nil),                                          // 21: bytebase.store.ExternalApprovalSetting.Node
	(*SchemaTemplateSetting_FieldTemplate)(nil),                                   // 22: bytebase.store.SchemaTemplateSetting.FieldTemplate
	(*SchemaTemplateSetting_ColumnType)(nil),                                      // 23: bytebase.store.SchemaTemplateSetting.ColumnType
	(*SchemaTemplateSetting_TableTemplate)(nil),                                   // 24: bytebase.store.SchemaTemplateSetting.TableTemplate
	(*DataClassificationSetting_DataClassificationConfig)(nil),                    // 25: bytebase.store.DataClassificationSetting.DataClassificationConfig
	(*DataClassificationSetting_DataClassificationConfig_Level)(nil),              // 26: bytebase.store.DataClassificationSetting.DataClassificationConfig.Level
	(*DataClassificationSetting_DataClassificationConfig_DataClassification)(nil), // 27: bytebase.store.DataClassificationSetting.DataClassificationConfig.DataClassification
	nil,                                      // 28: bytebase.store.DataClassificationSetting.DataClassificationConfig.ClassificationEntry
	(*SemanticTypeSetting_SemanticType)(nil), // 29: bytebase.store.SemanticTypeSetting.SemanticType
	(*Algorithm_FullMask)(nil),               // 30: bytebase.store.Algorithm.FullMask
	(*Algorithm_RangeMask)(nil),              // 31: bytebase.store.Algorithm.RangeMask
	(*Algorithm_MD5Mask)(nil),                // 32: bytebase.store.Algorithm.MD5Mask
	(*Algorithm_InnerOuterMask)(nil),         // 33: bytebase.store.Algorithm.InnerOuterMask
	(*Algorithm_RangeMask_Slice)(nil),        // 34: bytebase.store.Algorithm.RangeMask.Slice
	(*AppIMSetting_Slack)(nil),               // 35: bytebase.store.AppIMSetting.Slack
	(*AppIMSetting_Feishu)(nil),              // 36: bytebase.store.AppIMSetting.Feishu
	(*AppIMSetting_Wecom)(nil),               // 37: bytebase.store.AppIMSetting.Wecom
	(*AppIMSetting_Lark)(nil),                // 38: bytebase.store.AppIMSetting.Lark
	(*durationpb.Duration)(nil),              // 39: google.protobuf.Duration
	(*v1alpha1.Expr)(nil),                    // 40: google.api.expr.v1alpha1.Expr
	(*ApprovalTemplate)(nil),                 // 41: bytebase.store.ApprovalTemplate
	(*expr.Expr)(nil),                        // 42: google.type.Expr
	(Engine)(0),                              // 43: bytebase.store.Engine
	(*ColumnMetadata)(nil),                   // 44: bytebase.store.ColumnMetadata
	(*ColumnCatalog)(nil),                    // 45: bytebase.store.ColumnCatalog
	(*TableMetadata)(nil),                    // 46: bytebase.store.TableMetadata
	(*TableCatalog)(nil),                     // 47: bytebase.store.TableCatalog
}
var file_store_setting_proto_depIdxs = []int32{
	39, // 0: bytebase.store.WorkspaceProfileSetting.token_duration:type_name -> google.protobuf.Duration
	6,  // 1: bytebase.store.WorkspaceProfileSetting.announcement:type_name -> bytebase.store.Announcement
	39, // 2: bytebase.store.WorkspaceProfileSetting.maximum_role_expiration:type_name -> google.protobuf.Duration
	0,  // 3: bytebase.store.WorkspaceProfileSetting.database_change_mode:type_name -> bytebase.store.DatabaseChangeMode
	1,  // 4: bytebase.store.Announcement.level:type_name -> bytebase.store.Announcement.AlertLevel
	20, // 5: bytebase.store.WorkspaceApprovalSetting.rules:type_name -> bytebase.store.WorkspaceApprovalSetting.Rule
	21, // 6: bytebase.store.ExternalApprovalSetting.nodes:type_name -> bytebase.store.ExternalApprovalSetting.Node
	2,  // 7: bytebase.store.SMTPMailDeliverySetting.encryption:type_name -> bytebase.store.SMTPMailDeliverySetting.Encryption
	3,  // 8: bytebase.store.SMTPMailDeliverySetting.authentication:type_name -> bytebase.store.SMTPMailDeliverySetting.Authentication
	22, // 9: bytebase.store.SchemaTemplateSetting.field_templates:type_name -> bytebase.store.SchemaTemplateSetting.FieldTemplate
	23, // 10: bytebase.store.SchemaTemplateSetting.column_types:type_name -> bytebase.store.SchemaTemplateSetting.ColumnType
	24, // 11: bytebase.store.SchemaTemplateSetting.table_templates:type_name -> bytebase.store.SchemaTemplateSetting.TableTemplate
	25, // 12: bytebase.store.DataClassificationSetting.configs:type_name -> bytebase.store.DataClassificationSetting.DataClassificationConfig
	29, // 13: bytebase.store.SemanticTypeSetting.types:type_name -> bytebase.store.SemanticTypeSetting.SemanticType
	30, // 14: bytebase.store.Algorithm.full_mask:type_name -> bytebase.store.Algorithm.FullMask
	31, // 15: bytebase.store.Algorithm.range_mask:type_name -> bytebase.store.Algorithm.RangeMask
	32, // 16: bytebase.store.Algorithm.md5_mask:type_name -> bytebase.store.Algorithm.MD5Mask
	33, // 17: bytebase.store.Algorithm.inner_outer_mask:type_name -> bytebase.store.Algorithm.InnerOuterMask
	35, // 18: bytebase.store.AppIMSetting.slack:type_name -> bytebase.store.AppIMSetting.Slack
	36, // 19: bytebase.store.AppIMSetting.feishu:type_name -> bytebase.store.AppIMSetting.Feishu
	37, // 20: bytebase.store.AppIMSetting.wecom:type_name -> bytebase.store.AppIMSetting.Wecom
	38, // 21: bytebase.store.AppIMSetting.lark:type_name -> bytebase.store.AppIMSetting.Lark
	39, // 22: bytebase.store.PasswordRestrictionSetting.password_rotation:type_name -> google.protobuf.Duration
	40, // 23: bytebase.store.WorkspaceApprovalSetting.Rule.expression:type_name -> google.api.expr.v1alpha1.Expr
	41, // 24: bytebase.store.WorkspaceApprovalSetting.Rule.template:type_name -> bytebase.store.ApprovalTemplate
	42, // 25: bytebase.store.WorkspaceApprovalSetting.Rule.condition:type_name -> google.type.Expr
	43, // 26: bytebase.store.SchemaTemplateSetting.FieldTemplate.engine:type_name -> bytebase.store.Engine
	44, // 27: bytebase.store.SchemaTemplateSetting.FieldTemplate.column:type_name -> bytebase.store.ColumnMetadata
	45, // 28: bytebase.store.SchemaTemplateSetting.FieldTemplate.catalog:type_name -> bytebase.store.ColumnCatalog
	43, // 29: bytebase.store.SchemaTemplateSetting.ColumnType.engine:type_name -> bytebase.store.Engine
	43, // 30: bytebase.store.SchemaTemplateSetting.TableTemplate.engine:type_name -> bytebase.store.Engine
	46, // 31: bytebase.store.SchemaTemplateSetting.TableTemplate.table:type_name -> bytebase.store.TableMetadata
	47, // 32: bytebase.store.SchemaTemplateSetting.TableTemplate.catalog:type_name -> bytebase.store.TableCatalog
	26, // 33: bytebase.store.DataClassificationSetting.DataClassificationConfig.levels:type_name -> bytebase.store.DataClassificationSetting.DataClassificationConfig.Level
	28, // 34: bytebase.store.DataClassificationSetting.DataClassificationConfig.classification:type_name -> bytebase.store.DataClassificationSetting.DataClassificationConfig.ClassificationEntry
	27, // 35: bytebase.store.DataClassificationSetting.DataClassificationConfig.ClassificationEntry.value:type_name -> bytebase.store.DataClassificationSetting.DataClassificationConfig.DataClassification
	15, // 36: bytebase.store.SemanticTypeSetting.SemanticType.algorithm:type_name -> bytebase.store.Algorithm
	34, // 37: bytebase.store.Algorithm.RangeMask.slices:type_name -> bytebase.store.Algorithm.RangeMask.Slice
	4,  // 38: bytebase.store.Algorithm.InnerOuterMask.type:type_name -> bytebase.store.Algorithm.InnerOuterMask.MaskType
	39, // [39:39] is the sub-list for method output_type
	39, // [39:39] is the sub-list for method input_type
	39, // [39:39] is the sub-list for extension type_name
	39, // [39:39] is the sub-list for extension extendee
	0,  // [0:39] is the sub-list for field type_name
}

func init() { file_store_setting_proto_init() }
func file_store_setting_proto_init() {
	if File_store_setting_proto != nil {
		return
	}
	file_store_approval_proto_init()
	file_store_common_proto_init()
	file_store_database_proto_init()
	file_store_setting_proto_msgTypes[10].OneofWrappers = []any{
		(*Algorithm_FullMask_)(nil),
		(*Algorithm_RangeMask_)(nil),
		(*Algorithm_Md5Mask)(nil),
		(*Algorithm_InnerOuterMask_)(nil),
	}
	file_store_setting_proto_msgTypes[22].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_store_setting_proto_rawDesc), len(file_store_setting_proto_rawDesc)),
			NumEnums:      5,
			NumMessages:   34,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_store_setting_proto_goTypes,
		DependencyIndexes: file_store_setting_proto_depIdxs,
		EnumInfos:         file_store_setting_proto_enumTypes,
		MessageInfos:      file_store_setting_proto_msgTypes,
	}.Build()
	File_store_setting_proto = out.File
	file_store_setting_proto_goTypes = nil
	file_store_setting_proto_depIdxs = nil
}
