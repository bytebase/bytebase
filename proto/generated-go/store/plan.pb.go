// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        (unknown)
// source: store/plan.proto

package store

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Type is the database change type.
type PlanConfig_ChangeDatabaseConfig_Type int32

const (
	PlanConfig_ChangeDatabaseConfig_TYPE_UNSPECIFIED PlanConfig_ChangeDatabaseConfig_Type = 0
	// Used for establishing schema baseline, this is used when
	// 1. Onboard the database into Bytebase since Bytebase needs to know the current database schema.
	// 2. Had schema drift and need to re-establish the baseline.
	PlanConfig_ChangeDatabaseConfig_BASELINE PlanConfig_ChangeDatabaseConfig_Type = 1
	// Used for DDL changes including CREATE DATABASE.
	PlanConfig_ChangeDatabaseConfig_MIGRATE PlanConfig_ChangeDatabaseConfig_Type = 2
	// Used for schema changes via state-based schema migration including CREATE DATABASE.
	PlanConfig_ChangeDatabaseConfig_MIGRATE_SDL PlanConfig_ChangeDatabaseConfig_Type = 3
	// Used for DDL changes using gh-ost.
	PlanConfig_ChangeDatabaseConfig_MIGRATE_GHOST PlanConfig_ChangeDatabaseConfig_Type = 4
	// Used for DML change.
	PlanConfig_ChangeDatabaseConfig_DATA PlanConfig_ChangeDatabaseConfig_Type = 6
)

// Enum value maps for PlanConfig_ChangeDatabaseConfig_Type.
var (
	PlanConfig_ChangeDatabaseConfig_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "BASELINE",
		2: "MIGRATE",
		3: "MIGRATE_SDL",
		4: "MIGRATE_GHOST",
		6: "DATA",
	}
	PlanConfig_ChangeDatabaseConfig_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"BASELINE":         1,
		"MIGRATE":          2,
		"MIGRATE_SDL":      3,
		"MIGRATE_GHOST":    4,
		"DATA":             6,
	}
)

func (x PlanConfig_ChangeDatabaseConfig_Type) Enum() *PlanConfig_ChangeDatabaseConfig_Type {
	p := new(PlanConfig_ChangeDatabaseConfig_Type)
	*p = x
	return p
}

func (x PlanConfig_ChangeDatabaseConfig_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlanConfig_ChangeDatabaseConfig_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_store_plan_proto_enumTypes[0].Descriptor()
}

func (PlanConfig_ChangeDatabaseConfig_Type) Type() protoreflect.EnumType {
	return &file_store_plan_proto_enumTypes[0]
}

func (x PlanConfig_ChangeDatabaseConfig_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlanConfig_ChangeDatabaseConfig_Type.Descriptor instead.
func (PlanConfig_ChangeDatabaseConfig_Type) EnumDescriptor() ([]byte, []int) {
	return file_store_plan_proto_rawDescGZIP(), []int{0, 3, 0}
}

type PlanConfig struct {
	state              protoimpl.MessageState         `protogen:"open.v1"`
	Steps              []*PlanConfig_Step             `protobuf:"bytes,1,rep,name=steps,proto3" json:"steps,omitempty"`
	VcsSource          *PlanConfig_VCSSource          `protobuf:"bytes,2,opt,name=vcs_source,json=vcsSource,proto3" json:"vcs_source,omitempty"`
	ReleaseSource      *PlanConfig_ReleaseSource      `protobuf:"bytes,3,opt,name=release_source,json=releaseSource,proto3" json:"release_source,omitempty"`
	DeploymentSnapshot *PlanConfig_DeploymentSnapshot `protobuf:"bytes,4,opt,name=deployment_snapshot,json=deploymentSnapshot,proto3" json:"deployment_snapshot,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *PlanConfig) Reset() {
	*x = PlanConfig{}
	mi := &file_store_plan_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlanConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanConfig) ProtoMessage() {}

func (x *PlanConfig) ProtoReflect() protoreflect.Message {
	mi := &file_store_plan_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanConfig.ProtoReflect.Descriptor instead.
func (*PlanConfig) Descriptor() ([]byte, []int) {
	return file_store_plan_proto_rawDescGZIP(), []int{0}
}

func (x *PlanConfig) GetSteps() []*PlanConfig_Step {
	if x != nil {
		return x.Steps
	}
	return nil
}

func (x *PlanConfig) GetVcsSource() *PlanConfig_VCSSource {
	if x != nil {
		return x.VcsSource
	}
	return nil
}

func (x *PlanConfig) GetReleaseSource() *PlanConfig_ReleaseSource {
	if x != nil {
		return x.ReleaseSource
	}
	return nil
}

func (x *PlanConfig) GetDeploymentSnapshot() *PlanConfig_DeploymentSnapshot {
	if x != nil {
		return x.DeploymentSnapshot
	}
	return nil
}

type PlanConfig_Step struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Use the title if set.
	// Use a generated title if empty.
	Title         string             `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Specs         []*PlanConfig_Spec `protobuf:"bytes,1,rep,name=specs,proto3" json:"specs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlanConfig_Step) Reset() {
	*x = PlanConfig_Step{}
	mi := &file_store_plan_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlanConfig_Step) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanConfig_Step) ProtoMessage() {}

func (x *PlanConfig_Step) ProtoReflect() protoreflect.Message {
	mi := &file_store_plan_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanConfig_Step.ProtoReflect.Descriptor instead.
func (*PlanConfig_Step) Descriptor() ([]byte, []int) {
	return file_store_plan_proto_rawDescGZIP(), []int{0, 0}
}

func (x *PlanConfig_Step) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PlanConfig_Step) GetSpecs() []*PlanConfig_Spec {
	if x != nil {
		return x.Specs
	}
	return nil
}

type PlanConfig_Spec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// earliest_allowed_time the earliest execution time of the change.
	EarliestAllowedTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=earliest_allowed_time,json=earliestAllowedTime,proto3" json:"earliest_allowed_time,omitempty"`
	// A UUID4 string that uniquely identifies the Spec.
	Id string `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
	// IDs of the specs that this spec depends on.
	// Must be a subset of the specs in the same step.
	DependsOnSpecs    []string                      `protobuf:"bytes,6,rep,name=depends_on_specs,json=dependsOnSpecs,proto3" json:"depends_on_specs,omitempty"`
	SpecReleaseSource *PlanConfig_SpecReleaseSource `protobuf:"bytes,8,opt,name=spec_release_source,json=specReleaseSource,proto3" json:"spec_release_source,omitempty"`
	// Types that are valid to be assigned to Config:
	//
	//	*PlanConfig_Spec_CreateDatabaseConfig
	//	*PlanConfig_Spec_ChangeDatabaseConfig
	//	*PlanConfig_Spec_ExportDataConfig
	Config        isPlanConfig_Spec_Config `protobuf_oneof:"config"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlanConfig_Spec) Reset() {
	*x = PlanConfig_Spec{}
	mi := &file_store_plan_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlanConfig_Spec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanConfig_Spec) ProtoMessage() {}

func (x *PlanConfig_Spec) ProtoReflect() protoreflect.Message {
	mi := &file_store_plan_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanConfig_Spec.ProtoReflect.Descriptor instead.
func (*PlanConfig_Spec) Descriptor() ([]byte, []int) {
	return file_store_plan_proto_rawDescGZIP(), []int{0, 1}
}

func (x *PlanConfig_Spec) GetEarliestAllowedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EarliestAllowedTime
	}
	return nil
}

func (x *PlanConfig_Spec) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PlanConfig_Spec) GetDependsOnSpecs() []string {
	if x != nil {
		return x.DependsOnSpecs
	}
	return nil
}

func (x *PlanConfig_Spec) GetSpecReleaseSource() *PlanConfig_SpecReleaseSource {
	if x != nil {
		return x.SpecReleaseSource
	}
	return nil
}

func (x *PlanConfig_Spec) GetConfig() isPlanConfig_Spec_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *PlanConfig_Spec) GetCreateDatabaseConfig() *PlanConfig_CreateDatabaseConfig {
	if x != nil {
		if x, ok := x.Config.(*PlanConfig_Spec_CreateDatabaseConfig); ok {
			return x.CreateDatabaseConfig
		}
	}
	return nil
}

func (x *PlanConfig_Spec) GetChangeDatabaseConfig() *PlanConfig_ChangeDatabaseConfig {
	if x != nil {
		if x, ok := x.Config.(*PlanConfig_Spec_ChangeDatabaseConfig); ok {
			return x.ChangeDatabaseConfig
		}
	}
	return nil
}

func (x *PlanConfig_Spec) GetExportDataConfig() *PlanConfig_ExportDataConfig {
	if x != nil {
		if x, ok := x.Config.(*PlanConfig_Spec_ExportDataConfig); ok {
			return x.ExportDataConfig
		}
	}
	return nil
}

type isPlanConfig_Spec_Config interface {
	isPlanConfig_Spec_Config()
}

type PlanConfig_Spec_CreateDatabaseConfig struct {
	CreateDatabaseConfig *PlanConfig_CreateDatabaseConfig `protobuf:"bytes,1,opt,name=create_database_config,json=createDatabaseConfig,proto3,oneof"`
}

type PlanConfig_Spec_ChangeDatabaseConfig struct {
	ChangeDatabaseConfig *PlanConfig_ChangeDatabaseConfig `protobuf:"bytes,2,opt,name=change_database_config,json=changeDatabaseConfig,proto3,oneof"`
}

type PlanConfig_Spec_ExportDataConfig struct {
	ExportDataConfig *PlanConfig_ExportDataConfig `protobuf:"bytes,7,opt,name=export_data_config,json=exportDataConfig,proto3,oneof"`
}

func (*PlanConfig_Spec_CreateDatabaseConfig) isPlanConfig_Spec_Config() {}

func (*PlanConfig_Spec_ChangeDatabaseConfig) isPlanConfig_Spec_Config() {}

func (*PlanConfig_Spec_ExportDataConfig) isPlanConfig_Spec_Config() {}

type PlanConfig_CreateDatabaseConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The resource name of the instance on which the database is created.
	// Format: instances/{instance}
	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	// The name of the database to create.
	Database string `protobuf:"bytes,2,opt,name=database,proto3" json:"database,omitempty"`
	// table is the name of the table, if it is not empty, Bytebase should create a table after creating the database.
	// For example, in MongoDB, it only creates the database when we first store data in that database.
	Table string `protobuf:"bytes,3,opt,name=table,proto3" json:"table,omitempty"`
	// character_set is the character set of the database.
	CharacterSet string `protobuf:"bytes,4,opt,name=character_set,json=characterSet,proto3" json:"character_set,omitempty"`
	// collation is the collation of the database.
	Collation string `protobuf:"bytes,5,opt,name=collation,proto3" json:"collation,omitempty"`
	// cluster is the cluster of the database. This is only applicable to ClickHouse for "ON CLUSTER <<cluster>>".
	Cluster string `protobuf:"bytes,6,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// owner is the owner of the database. This is only applicable to Postgres for "WITH OWNER <<owner>>".
	Owner string `protobuf:"bytes,7,opt,name=owner,proto3" json:"owner,omitempty"`
	// backup is the resource name of the backup.
	// Format: instances/{instance}/databases/{database}/backups/{backup-name}
	Backup string `protobuf:"bytes,8,opt,name=backup,proto3" json:"backup,omitempty"`
	// The environment resource.
	// Format: environments/prod where prod is the environment resource ID.
	Environment string `protobuf:"bytes,9,opt,name=environment,proto3" json:"environment,omitempty"`
	// labels of the database.
	Labels        map[string]string `protobuf:"bytes,10,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlanConfig_CreateDatabaseConfig) Reset() {
	*x = PlanConfig_CreateDatabaseConfig{}
	mi := &file_store_plan_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlanConfig_CreateDatabaseConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanConfig_CreateDatabaseConfig) ProtoMessage() {}

func (x *PlanConfig_CreateDatabaseConfig) ProtoReflect() protoreflect.Message {
	mi := &file_store_plan_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanConfig_CreateDatabaseConfig.ProtoReflect.Descriptor instead.
func (*PlanConfig_CreateDatabaseConfig) Descriptor() ([]byte, []int) {
	return file_store_plan_proto_rawDescGZIP(), []int{0, 2}
}

func (x *PlanConfig_CreateDatabaseConfig) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *PlanConfig_CreateDatabaseConfig) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *PlanConfig_CreateDatabaseConfig) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *PlanConfig_CreateDatabaseConfig) GetCharacterSet() string {
	if x != nil {
		return x.CharacterSet
	}
	return ""
}

func (x *PlanConfig_CreateDatabaseConfig) GetCollation() string {
	if x != nil {
		return x.Collation
	}
	return ""
}

func (x *PlanConfig_CreateDatabaseConfig) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *PlanConfig_CreateDatabaseConfig) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *PlanConfig_CreateDatabaseConfig) GetBackup() string {
	if x != nil {
		return x.Backup
	}
	return ""
}

func (x *PlanConfig_CreateDatabaseConfig) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *PlanConfig_CreateDatabaseConfig) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type PlanConfig_ChangeDatabaseConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The resource name of the target.
	// Format: instances/{instance-id}/databases/{database-name}.
	// Format: projects/{project}/databaseGroups/{databaseGroup}.
	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	// The resource name of the sheet.
	// Format: projects/{project}/sheets/{sheet}
	Sheet string                               `protobuf:"bytes,2,opt,name=sheet,proto3" json:"sheet,omitempty"`
	Type  PlanConfig_ChangeDatabaseConfig_Type `protobuf:"varint,3,opt,name=type,proto3,enum=bytebase.store.PlanConfig_ChangeDatabaseConfig_Type" json:"type,omitempty"`
	// schema_version is parsed from VCS file name.
	// It is automatically generated in the UI workflow.
	SchemaVersion string            `protobuf:"bytes,4,opt,name=schema_version,json=schemaVersion,proto3" json:"schema_version,omitempty"`
	GhostFlags    map[string]string `protobuf:"bytes,7,rep,name=ghost_flags,json=ghostFlags,proto3" json:"ghost_flags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// If set, a backup of the modified data will be created automatically before any changes are applied.
	PreUpdateBackupDetail *PreUpdateBackupDetail `protobuf:"bytes,8,opt,name=pre_update_backup_detail,json=preUpdateBackupDetail,proto3,oneof" json:"pre_update_backup_detail,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *PlanConfig_ChangeDatabaseConfig) Reset() {
	*x = PlanConfig_ChangeDatabaseConfig{}
	mi := &file_store_plan_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlanConfig_ChangeDatabaseConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanConfig_ChangeDatabaseConfig) ProtoMessage() {}

func (x *PlanConfig_ChangeDatabaseConfig) ProtoReflect() protoreflect.Message {
	mi := &file_store_plan_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanConfig_ChangeDatabaseConfig.ProtoReflect.Descriptor instead.
func (*PlanConfig_ChangeDatabaseConfig) Descriptor() ([]byte, []int) {
	return file_store_plan_proto_rawDescGZIP(), []int{0, 3}
}

func (x *PlanConfig_ChangeDatabaseConfig) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *PlanConfig_ChangeDatabaseConfig) GetSheet() string {
	if x != nil {
		return x.Sheet
	}
	return ""
}

func (x *PlanConfig_ChangeDatabaseConfig) GetType() PlanConfig_ChangeDatabaseConfig_Type {
	if x != nil {
		return x.Type
	}
	return PlanConfig_ChangeDatabaseConfig_TYPE_UNSPECIFIED
}

func (x *PlanConfig_ChangeDatabaseConfig) GetSchemaVersion() string {
	if x != nil {
		return x.SchemaVersion
	}
	return ""
}

func (x *PlanConfig_ChangeDatabaseConfig) GetGhostFlags() map[string]string {
	if x != nil {
		return x.GhostFlags
	}
	return nil
}

func (x *PlanConfig_ChangeDatabaseConfig) GetPreUpdateBackupDetail() *PreUpdateBackupDetail {
	if x != nil {
		return x.PreUpdateBackupDetail
	}
	return nil
}

type PlanConfig_ExportDataConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The resource name of the target.
	// Format: instances/{instance-id}/databases/{database-name}
	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	// The resource name of the sheet.
	// Format: projects/{project}/sheets/{sheet}
	Sheet string `protobuf:"bytes,2,opt,name=sheet,proto3" json:"sheet,omitempty"`
	// The format of the exported file.
	Format ExportFormat `protobuf:"varint,3,opt,name=format,proto3,enum=bytebase.store.ExportFormat" json:"format,omitempty"`
	// The zip password provide by users.
	// Leave it empty if no needs to encrypt the zip file.
	Password      *string `protobuf:"bytes,4,opt,name=password,proto3,oneof" json:"password,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlanConfig_ExportDataConfig) Reset() {
	*x = PlanConfig_ExportDataConfig{}
	mi := &file_store_plan_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlanConfig_ExportDataConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanConfig_ExportDataConfig) ProtoMessage() {}

func (x *PlanConfig_ExportDataConfig) ProtoReflect() protoreflect.Message {
	mi := &file_store_plan_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanConfig_ExportDataConfig.ProtoReflect.Descriptor instead.
func (*PlanConfig_ExportDataConfig) Descriptor() ([]byte, []int) {
	return file_store_plan_proto_rawDescGZIP(), []int{0, 4}
}

func (x *PlanConfig_ExportDataConfig) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *PlanConfig_ExportDataConfig) GetSheet() string {
	if x != nil {
		return x.Sheet
	}
	return ""
}

func (x *PlanConfig_ExportDataConfig) GetFormat() ExportFormat {
	if x != nil {
		return x.Format
	}
	return ExportFormat_FORMAT_UNSPECIFIED
}

func (x *PlanConfig_ExportDataConfig) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

type PlanConfig_VCSSource struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	VcsType VCSType                `protobuf:"varint,1,opt,name=vcs_type,json=vcsType,proto3,enum=bytebase.store.VCSType" json:"vcs_type,omitempty"`
	// Optional.
	// If present, we will update the pull request for rollout status.
	// Format: projects/{project-ID}/vcsConnectors/{vcs-connector}
	VcsConnector   string `protobuf:"bytes,2,opt,name=vcs_connector,json=vcsConnector,proto3" json:"vcs_connector,omitempty"`
	PullRequestUrl string `protobuf:"bytes,3,opt,name=pull_request_url,json=pullRequestUrl,proto3" json:"pull_request_url,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PlanConfig_VCSSource) Reset() {
	*x = PlanConfig_VCSSource{}
	mi := &file_store_plan_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlanConfig_VCSSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanConfig_VCSSource) ProtoMessage() {}

func (x *PlanConfig_VCSSource) ProtoReflect() protoreflect.Message {
	mi := &file_store_plan_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanConfig_VCSSource.ProtoReflect.Descriptor instead.
func (*PlanConfig_VCSSource) Descriptor() ([]byte, []int) {
	return file_store_plan_proto_rawDescGZIP(), []int{0, 5}
}

func (x *PlanConfig_VCSSource) GetVcsType() VCSType {
	if x != nil {
		return x.VcsType
	}
	return VCSType_VCS_TYPE_UNSPECIFIED
}

func (x *PlanConfig_VCSSource) GetVcsConnector() string {
	if x != nil {
		return x.VcsConnector
	}
	return ""
}

func (x *PlanConfig_VCSSource) GetPullRequestUrl() string {
	if x != nil {
		return x.PullRequestUrl
	}
	return ""
}

type PlanConfig_ReleaseSource struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The release.
	// Format: projects/{project}/releases/{release}
	Release       string `protobuf:"bytes,1,opt,name=release,proto3" json:"release,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlanConfig_ReleaseSource) Reset() {
	*x = PlanConfig_ReleaseSource{}
	mi := &file_store_plan_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlanConfig_ReleaseSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanConfig_ReleaseSource) ProtoMessage() {}

func (x *PlanConfig_ReleaseSource) ProtoReflect() protoreflect.Message {
	mi := &file_store_plan_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanConfig_ReleaseSource.ProtoReflect.Descriptor instead.
func (*PlanConfig_ReleaseSource) Descriptor() ([]byte, []int) {
	return file_store_plan_proto_rawDescGZIP(), []int{0, 6}
}

func (x *PlanConfig_ReleaseSource) GetRelease() string {
	if x != nil {
		return x.Release
	}
	return ""
}

type PlanConfig_SpecReleaseSource struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Format: projects/{project}/releases/{release}/files/{id}
	File          string `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlanConfig_SpecReleaseSource) Reset() {
	*x = PlanConfig_SpecReleaseSource{}
	mi := &file_store_plan_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlanConfig_SpecReleaseSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanConfig_SpecReleaseSource) ProtoMessage() {}

func (x *PlanConfig_SpecReleaseSource) ProtoReflect() protoreflect.Message {
	mi := &file_store_plan_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanConfig_SpecReleaseSource.ProtoReflect.Descriptor instead.
func (*PlanConfig_SpecReleaseSource) Descriptor() ([]byte, []int) {
	return file_store_plan_proto_rawDescGZIP(), []int{0, 7}
}

func (x *PlanConfig_SpecReleaseSource) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

type PlanConfig_DeploymentSnapshot struct {
	state                    protoimpl.MessageState                                  `protogen:"open.v1"`
	DeploymentConfigSnapshot *PlanConfig_DeploymentSnapshot_DeploymentConfigSnapshot `protobuf:"bytes,1,opt,name=deployment_config_snapshot,json=deploymentConfigSnapshot,proto3" json:"deployment_config_snapshot,omitempty"`
	DatabaseGroupSnapshots   []*PlanConfig_DeploymentSnapshot_DatabaseGroupSnapshot  `protobuf:"bytes,2,rep,name=database_group_snapshots,json=databaseGroupSnapshots,proto3" json:"database_group_snapshots,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *PlanConfig_DeploymentSnapshot) Reset() {
	*x = PlanConfig_DeploymentSnapshot{}
	mi := &file_store_plan_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlanConfig_DeploymentSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanConfig_DeploymentSnapshot) ProtoMessage() {}

func (x *PlanConfig_DeploymentSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_store_plan_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanConfig_DeploymentSnapshot.ProtoReflect.Descriptor instead.
func (*PlanConfig_DeploymentSnapshot) Descriptor() ([]byte, []int) {
	return file_store_plan_proto_rawDescGZIP(), []int{0, 8}
}

func (x *PlanConfig_DeploymentSnapshot) GetDeploymentConfigSnapshot() *PlanConfig_DeploymentSnapshot_DeploymentConfigSnapshot {
	if x != nil {
		return x.DeploymentConfigSnapshot
	}
	return nil
}

func (x *PlanConfig_DeploymentSnapshot) GetDatabaseGroupSnapshots() []*PlanConfig_DeploymentSnapshot_DatabaseGroupSnapshot {
	if x != nil {
		return x.DatabaseGroupSnapshots
	}
	return nil
}

// The snapshot of the project deployment config at the time of creation.
type PlanConfig_DeploymentSnapshot_DeploymentConfigSnapshot struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Name             string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Title            string                 `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	DeploymentConfig *DeploymentConfig      `protobuf:"bytes,3,opt,name=deployment_config,json=deploymentConfig,proto3" json:"deployment_config,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *PlanConfig_DeploymentSnapshot_DeploymentConfigSnapshot) Reset() {
	*x = PlanConfig_DeploymentSnapshot_DeploymentConfigSnapshot{}
	mi := &file_store_plan_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlanConfig_DeploymentSnapshot_DeploymentConfigSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanConfig_DeploymentSnapshot_DeploymentConfigSnapshot) ProtoMessage() {}

func (x *PlanConfig_DeploymentSnapshot_DeploymentConfigSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_store_plan_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanConfig_DeploymentSnapshot_DeploymentConfigSnapshot.ProtoReflect.Descriptor instead.
func (*PlanConfig_DeploymentSnapshot_DeploymentConfigSnapshot) Descriptor() ([]byte, []int) {
	return file_store_plan_proto_rawDescGZIP(), []int{0, 8, 0}
}

func (x *PlanConfig_DeploymentSnapshot_DeploymentConfigSnapshot) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PlanConfig_DeploymentSnapshot_DeploymentConfigSnapshot) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PlanConfig_DeploymentSnapshot_DeploymentConfigSnapshot) GetDeploymentConfig() *DeploymentConfig {
	if x != nil {
		return x.DeploymentConfig
	}
	return nil
}

// The snapshot of the database group at the time of creation.
type PlanConfig_DeploymentSnapshot_DatabaseGroupSnapshot struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Format: projects/{project}/databaseGroups/{databaseGroup}.
	DatabaseGroup string `protobuf:"bytes,1,opt,name=database_group,json=databaseGroup,proto3" json:"database_group,omitempty"`
	// Format: instances/{instance-id}/databases/{database-name}.
	Databases     []string `protobuf:"bytes,2,rep,name=databases,proto3" json:"databases,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlanConfig_DeploymentSnapshot_DatabaseGroupSnapshot) Reset() {
	*x = PlanConfig_DeploymentSnapshot_DatabaseGroupSnapshot{}
	mi := &file_store_plan_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlanConfig_DeploymentSnapshot_DatabaseGroupSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanConfig_DeploymentSnapshot_DatabaseGroupSnapshot) ProtoMessage() {}

func (x *PlanConfig_DeploymentSnapshot_DatabaseGroupSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_store_plan_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanConfig_DeploymentSnapshot_DatabaseGroupSnapshot.ProtoReflect.Descriptor instead.
func (*PlanConfig_DeploymentSnapshot_DatabaseGroupSnapshot) Descriptor() ([]byte, []int) {
	return file_store_plan_proto_rawDescGZIP(), []int{0, 8, 1}
}

func (x *PlanConfig_DeploymentSnapshot_DatabaseGroupSnapshot) GetDatabaseGroup() string {
	if x != nil {
		return x.DatabaseGroup
	}
	return ""
}

func (x *PlanConfig_DeploymentSnapshot_DatabaseGroupSnapshot) GetDatabases() []string {
	if x != nil {
		return x.Databases
	}
	return nil
}

var File_store_plan_proto protoreflect.FileDescriptor

var file_store_plan_proto_rawDesc = string([]byte{
	0x0a, 0x10, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x12, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1a, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x5f, 0x72, 0x75, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9a,
	0x17, 0x0a, 0x0a, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x35, 0x0a,
	0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62,
	0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6c,
	0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x74, 0x65, 0x70, 0x52, 0x05, 0x73,
	0x74, 0x65, 0x70, 0x73, 0x12, 0x43, 0x0a, 0x0a, 0x76, 0x63, 0x73, 0x5f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x56, 0x43, 0x53, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09,
	0x76, 0x63, 0x73, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x4f, 0x0a, 0x0e, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x5e, 0x0a, 0x13, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x12, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x1a, 0x53, 0x0a, 0x04, 0x53, 0x74,
	0x65, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x73, 0x70, 0x65, 0x63,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x05, 0x73, 0x70, 0x65, 0x63, 0x73, 0x1a,
	0xa7, 0x04, 0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x12, 0x4e, 0x0a, 0x15, 0x65, 0x61, 0x72, 0x6c,
	0x69, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x13, 0x65, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x73, 0x5f, 0x6f, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x4f, 0x6e, 0x53, 0x70, 0x65,
	0x63, 0x73, 0x12, 0x5c, 0x0a, 0x13, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x11, 0x73,
	0x70, 0x65, 0x63, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x67, 0x0a, 0x16, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x48, 0x00, 0x52, 0x14, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x67, 0x0a, 0x16, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x62, 0x79, 0x74, 0x65,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x14, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x5b, 0x0a, 0x12, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x50, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x10, 0x65,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42,
	0x08, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0xd9, 0x03, 0x0a, 0x14, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x1c, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x12, 0x20, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x12, 0x1a, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x01, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x29,
	0x0a, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x01, 0x52, 0x0c, 0x63, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12, 0x22, 0x0a, 0x09, 0x63, 0x6f, 0x6c,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41,
	0x01, 0x01, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a,
	0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04,
	0xe2, 0x41, 0x01, 0x01, 0x52, 0x07, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x1a, 0x0a,
	0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41,
	0x01, 0x01, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x06, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x01, 0x52,
	0x06, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x26, 0x0a, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41,
	0x01, 0x01, 0x52, 0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x59, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3b, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x04, 0xe2, 0x41,
	0x01, 0x01, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xcb, 0x04, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16,
	0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x65, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x68, 0x65, 0x65, 0x74, 0x12, 0x48, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x62, 0x79, 0x74,
	0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x60, 0x0a,
	0x0b, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x47, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0a, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12,
	0x63, 0x0a, 0x18, 0x70, 0x72, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x50, 0x72, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x48, 0x00, 0x52, 0x15, 0x70, 0x72, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x88, 0x01, 0x01, 0x1a, 0x3d, 0x0a, 0x0f, 0x47, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x6c, 0x61,
	0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x65, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x41, 0x53, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x01, 0x12,
	0x0b, 0x0a, 0x07, 0x4d, 0x49, 0x47, 0x52, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b,
	0x4d, 0x49, 0x47, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x44, 0x4c, 0x10, 0x03, 0x12, 0x11, 0x0a,
	0x0d, 0x4d, 0x49, 0x47, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x47, 0x48, 0x4f, 0x53, 0x54, 0x10, 0x04,
	0x12, 0x08, 0x0a, 0x04, 0x44, 0x41, 0x54, 0x41, 0x10, 0x06, 0x42, 0x1b, 0x0a, 0x19, 0x5f, 0x70,
	0x72, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x4a, 0x04, 0x08,
	0x06, 0x10, 0x07, 0x1a, 0xa4, 0x01, 0x0a, 0x10, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x65, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x73, 0x68, 0x65, 0x65, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1f, 0x0a, 0x08,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x1a, 0x8e, 0x01, 0x0a, 0x09, 0x56,
	0x43, 0x53, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x76, 0x63, 0x73, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x62, 0x79, 0x74,
	0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x56, 0x43, 0x53, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x07, 0x76, 0x63, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x76, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x76, 0x63, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x75, 0x6c, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x75, 0x6c,
	0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x55, 0x72, 0x6c, 0x1a, 0x44, 0x0a, 0x0d, 0x52,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x07,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xfa,
	0x41, 0x16, 0x0a, 0x14, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x07, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x1a, 0x27, 0x0a, 0x11, 0x53, 0x70, 0x65, 0x63, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x1a, 0x8e, 0x04, 0x0a, 0x12, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x12, 0x84, 0x01, 0x0a, 0x1a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x46, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52, 0x18,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x7d, 0x0a, 0x18, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x62, 0x79, 0x74,
	0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x6c, 0x61, 0x6e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x52,
	0x16, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x1a, 0x93, 0x01, 0x0a, 0x18, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x4d,
	0x0a, 0x11, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x79, 0x74, 0x65,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x10, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0x5c, 0x0a,
	0x15, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x6e,
	0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1c, 0x0a,
	0x09, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x42, 0x14, 0x5a, 0x12, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x67, 0x6f, 0x2f, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_store_plan_proto_rawDescOnce sync.Once
	file_store_plan_proto_rawDescData []byte
)

func file_store_plan_proto_rawDescGZIP() []byte {
	file_store_plan_proto_rawDescOnce.Do(func() {
		file_store_plan_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_store_plan_proto_rawDesc), len(file_store_plan_proto_rawDesc)))
	})
	return file_store_plan_proto_rawDescData
}

var file_store_plan_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_store_plan_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_store_plan_proto_goTypes = []any{
	(PlanConfig_ChangeDatabaseConfig_Type)(0), // 0: bytebase.store.PlanConfig.ChangeDatabaseConfig.Type
	(*PlanConfig)(nil),                        // 1: bytebase.store.PlanConfig
	(*PlanConfig_Step)(nil),                   // 2: bytebase.store.PlanConfig.Step
	(*PlanConfig_Spec)(nil),                   // 3: bytebase.store.PlanConfig.Spec
	(*PlanConfig_CreateDatabaseConfig)(nil),   // 4: bytebase.store.PlanConfig.CreateDatabaseConfig
	(*PlanConfig_ChangeDatabaseConfig)(nil),   // 5: bytebase.store.PlanConfig.ChangeDatabaseConfig
	(*PlanConfig_ExportDataConfig)(nil),       // 6: bytebase.store.PlanConfig.ExportDataConfig
	(*PlanConfig_VCSSource)(nil),              // 7: bytebase.store.PlanConfig.VCSSource
	(*PlanConfig_ReleaseSource)(nil),          // 8: bytebase.store.PlanConfig.ReleaseSource
	(*PlanConfig_SpecReleaseSource)(nil),      // 9: bytebase.store.PlanConfig.SpecReleaseSource
	(*PlanConfig_DeploymentSnapshot)(nil),     // 10: bytebase.store.PlanConfig.DeploymentSnapshot
	nil,                                       // 11: bytebase.store.PlanConfig.CreateDatabaseConfig.LabelsEntry
	nil,                                       // 12: bytebase.store.PlanConfig.ChangeDatabaseConfig.GhostFlagsEntry
	(*PlanConfig_DeploymentSnapshot_DeploymentConfigSnapshot)(nil), // 13: bytebase.store.PlanConfig.DeploymentSnapshot.DeploymentConfigSnapshot
	(*PlanConfig_DeploymentSnapshot_DatabaseGroupSnapshot)(nil),    // 14: bytebase.store.PlanConfig.DeploymentSnapshot.DatabaseGroupSnapshot
	(*timestamppb.Timestamp)(nil),                                  // 15: google.protobuf.Timestamp
	(*PreUpdateBackupDetail)(nil),                                  // 16: bytebase.store.PreUpdateBackupDetail
	(ExportFormat)(0),                                              // 17: bytebase.store.ExportFormat
	(VCSType)(0),                                                   // 18: bytebase.store.VCSType
	(*DeploymentConfig)(nil),                                       // 19: bytebase.store.DeploymentConfig
}
var file_store_plan_proto_depIdxs = []int32{
	2,  // 0: bytebase.store.PlanConfig.steps:type_name -> bytebase.store.PlanConfig.Step
	7,  // 1: bytebase.store.PlanConfig.vcs_source:type_name -> bytebase.store.PlanConfig.VCSSource
	8,  // 2: bytebase.store.PlanConfig.release_source:type_name -> bytebase.store.PlanConfig.ReleaseSource
	10, // 3: bytebase.store.PlanConfig.deployment_snapshot:type_name -> bytebase.store.PlanConfig.DeploymentSnapshot
	3,  // 4: bytebase.store.PlanConfig.Step.specs:type_name -> bytebase.store.PlanConfig.Spec
	15, // 5: bytebase.store.PlanConfig.Spec.earliest_allowed_time:type_name -> google.protobuf.Timestamp
	9,  // 6: bytebase.store.PlanConfig.Spec.spec_release_source:type_name -> bytebase.store.PlanConfig.SpecReleaseSource
	4,  // 7: bytebase.store.PlanConfig.Spec.create_database_config:type_name -> bytebase.store.PlanConfig.CreateDatabaseConfig
	5,  // 8: bytebase.store.PlanConfig.Spec.change_database_config:type_name -> bytebase.store.PlanConfig.ChangeDatabaseConfig
	6,  // 9: bytebase.store.PlanConfig.Spec.export_data_config:type_name -> bytebase.store.PlanConfig.ExportDataConfig
	11, // 10: bytebase.store.PlanConfig.CreateDatabaseConfig.labels:type_name -> bytebase.store.PlanConfig.CreateDatabaseConfig.LabelsEntry
	0,  // 11: bytebase.store.PlanConfig.ChangeDatabaseConfig.type:type_name -> bytebase.store.PlanConfig.ChangeDatabaseConfig.Type
	12, // 12: bytebase.store.PlanConfig.ChangeDatabaseConfig.ghost_flags:type_name -> bytebase.store.PlanConfig.ChangeDatabaseConfig.GhostFlagsEntry
	16, // 13: bytebase.store.PlanConfig.ChangeDatabaseConfig.pre_update_backup_detail:type_name -> bytebase.store.PreUpdateBackupDetail
	17, // 14: bytebase.store.PlanConfig.ExportDataConfig.format:type_name -> bytebase.store.ExportFormat
	18, // 15: bytebase.store.PlanConfig.VCSSource.vcs_type:type_name -> bytebase.store.VCSType
	13, // 16: bytebase.store.PlanConfig.DeploymentSnapshot.deployment_config_snapshot:type_name -> bytebase.store.PlanConfig.DeploymentSnapshot.DeploymentConfigSnapshot
	14, // 17: bytebase.store.PlanConfig.DeploymentSnapshot.database_group_snapshots:type_name -> bytebase.store.PlanConfig.DeploymentSnapshot.DatabaseGroupSnapshot
	19, // 18: bytebase.store.PlanConfig.DeploymentSnapshot.DeploymentConfigSnapshot.deployment_config:type_name -> bytebase.store.DeploymentConfig
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_store_plan_proto_init() }
func file_store_plan_proto_init() {
	if File_store_plan_proto != nil {
		return
	}
	file_store_common_proto_init()
	file_store_deployment_config_proto_init()
	file_store_plan_check_run_proto_init()
	file_store_plan_proto_msgTypes[2].OneofWrappers = []any{
		(*PlanConfig_Spec_CreateDatabaseConfig)(nil),
		(*PlanConfig_Spec_ChangeDatabaseConfig)(nil),
		(*PlanConfig_Spec_ExportDataConfig)(nil),
	}
	file_store_plan_proto_msgTypes[4].OneofWrappers = []any{}
	file_store_plan_proto_msgTypes[5].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_store_plan_proto_rawDesc), len(file_store_plan_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_store_plan_proto_goTypes,
		DependencyIndexes: file_store_plan_proto_depIdxs,
		EnumInfos:         file_store_plan_proto_enumTypes,
		MessageInfos:      file_store_plan_proto_msgTypes,
	}.Build()
	File_store_plan_proto = out.File
	file_store_plan_proto_goTypes = nil
	file_store_plan_proto_depIdxs = nil
}
