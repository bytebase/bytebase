// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: store/task.proto

package store

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TaskPayload struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// common fields
	Skipped       bool   `protobuf:"varint,1,opt,name=skipped,proto3" json:"skipped,omitempty"`
	SkippedReason string `protobuf:"bytes,2,opt,name=skipped_reason,json=skippedReason,proto3" json:"skipped_reason,omitempty"`
	SpecId        string `protobuf:"bytes,3,opt,name=spec_id,json=specId,proto3" json:"spec_id,omitempty"`
	SheetId       int32  `protobuf:"varint,4,opt,name=sheet_id,json=sheetId,proto3" json:"sheet_id,omitempty"`
	// Create database fields.
	EnvironmentId string `protobuf:"bytes,5,opt,name=environment_id,json=environmentId,proto3" json:"environment_id,omitempty"`
	DatabaseName  string `protobuf:"bytes,6,opt,name=database_name,json=databaseName,proto3" json:"database_name,omitempty"`
	TableName     string `protobuf:"bytes,7,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	CharacterSet  string `protobuf:"bytes,8,opt,name=character_set,json=characterSet,proto3" json:"character_set,omitempty"`
	Collation     string `protobuf:"bytes,9,opt,name=collation,proto3" json:"collation,omitempty"`
	// Update database fields.
	SchemaVersion         string                 `protobuf:"bytes,10,opt,name=schema_version,json=schemaVersion,proto3" json:"schema_version,omitempty"`
	PreUpdateBackupDetail *PreUpdateBackupDetail `protobuf:"bytes,11,opt,name=pre_update_backup_detail,json=preUpdateBackupDetail,proto3" json:"pre_update_backup_detail,omitempty"`
	// ghost flags.
	Flags             map[string]string  `protobuf:"bytes,12,rep,name=flags,proto3" json:"flags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	TaskReleaseSource *TaskReleaseSource `protobuf:"bytes,13,opt,name=task_release_source,json=taskReleaseSource,proto3" json:"task_release_source,omitempty"`
	// Export data fields.
	Password      string       `protobuf:"bytes,14,opt,name=password,proto3" json:"password,omitempty"`
	Format        ExportFormat `protobuf:"varint,15,opt,name=format,proto3,enum=bytebase.store.ExportFormat" json:"format,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskPayload) Reset() {
	*x = TaskPayload{}
	mi := &file_store_task_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskPayload) ProtoMessage() {}

func (x *TaskPayload) ProtoReflect() protoreflect.Message {
	mi := &file_store_task_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskPayload.ProtoReflect.Descriptor instead.
func (*TaskPayload) Descriptor() ([]byte, []int) {
	return file_store_task_proto_rawDescGZIP(), []int{0}
}

func (x *TaskPayload) GetSkipped() bool {
	if x != nil {
		return x.Skipped
	}
	return false
}

func (x *TaskPayload) GetSkippedReason() string {
	if x != nil {
		return x.SkippedReason
	}
	return ""
}

func (x *TaskPayload) GetSpecId() string {
	if x != nil {
		return x.SpecId
	}
	return ""
}

func (x *TaskPayload) GetSheetId() int32 {
	if x != nil {
		return x.SheetId
	}
	return 0
}

func (x *TaskPayload) GetEnvironmentId() string {
	if x != nil {
		return x.EnvironmentId
	}
	return ""
}

func (x *TaskPayload) GetDatabaseName() string {
	if x != nil {
		return x.DatabaseName
	}
	return ""
}

func (x *TaskPayload) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *TaskPayload) GetCharacterSet() string {
	if x != nil {
		return x.CharacterSet
	}
	return ""
}

func (x *TaskPayload) GetCollation() string {
	if x != nil {
		return x.Collation
	}
	return ""
}

func (x *TaskPayload) GetSchemaVersion() string {
	if x != nil {
		return x.SchemaVersion
	}
	return ""
}

func (x *TaskPayload) GetPreUpdateBackupDetail() *PreUpdateBackupDetail {
	if x != nil {
		return x.PreUpdateBackupDetail
	}
	return nil
}

func (x *TaskPayload) GetFlags() map[string]string {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *TaskPayload) GetTaskReleaseSource() *TaskReleaseSource {
	if x != nil {
		return x.TaskReleaseSource
	}
	return nil
}

func (x *TaskPayload) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *TaskPayload) GetFormat() ExportFormat {
	if x != nil {
		return x.Format
	}
	return ExportFormat_FORMAT_UNSPECIFIED
}

type TaskReleaseSource struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Format: projects/{project}/releases/{release}/files/{id}
	File          string `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskReleaseSource) Reset() {
	*x = TaskReleaseSource{}
	mi := &file_store_task_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskReleaseSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskReleaseSource) ProtoMessage() {}

func (x *TaskReleaseSource) ProtoReflect() protoreflect.Message {
	mi := &file_store_task_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskReleaseSource.ProtoReflect.Descriptor instead.
func (*TaskReleaseSource) Descriptor() ([]byte, []int) {
	return file_store_task_proto_rawDescGZIP(), []int{1}
}

func (x *TaskReleaseSource) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

var File_store_task_proto protoreflect.FileDescriptor

const file_store_task_proto_rawDesc = "" +
	"\n" +
	"\x10store/task.proto\x12\x0ebytebase.store\x1a\x12store/common.proto\x1a\x1astore/plan_check_run.proto\"\xd4\x05\n" +
	"\vTaskPayload\x12\x18\n" +
	"\askipped\x18\x01 \x01(\bR\askipped\x12%\n" +
	"\x0eskipped_reason\x18\x02 \x01(\tR\rskippedReason\x12\x17\n" +
	"\aspec_id\x18\x03 \x01(\tR\x06specId\x12\x19\n" +
	"\bsheet_id\x18\x04 \x01(\x05R\asheetId\x12%\n" +
	"\x0eenvironment_id\x18\x05 \x01(\tR\renvironmentId\x12#\n" +
	"\rdatabase_name\x18\x06 \x01(\tR\fdatabaseName\x12\x1d\n" +
	"\n" +
	"table_name\x18\a \x01(\tR\ttableName\x12#\n" +
	"\rcharacter_set\x18\b \x01(\tR\fcharacterSet\x12\x1c\n" +
	"\tcollation\x18\t \x01(\tR\tcollation\x12%\n" +
	"\x0eschema_version\x18\n" +
	" \x01(\tR\rschemaVersion\x12^\n" +
	"\x18pre_update_backup_detail\x18\v \x01(\v2%.bytebase.store.PreUpdateBackupDetailR\x15preUpdateBackupDetail\x12<\n" +
	"\x05flags\x18\f \x03(\v2&.bytebase.store.TaskPayload.FlagsEntryR\x05flags\x12Q\n" +
	"\x13task_release_source\x18\r \x01(\v2!.bytebase.store.TaskReleaseSourceR\x11taskReleaseSource\x12\x1a\n" +
	"\bpassword\x18\x0e \x01(\tR\bpassword\x124\n" +
	"\x06format\x18\x0f \x01(\x0e2\x1c.bytebase.store.ExportFormatR\x06format\x1a8\n" +
	"\n" +
	"FlagsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"'\n" +
	"\x11TaskReleaseSource\x12\x12\n" +
	"\x04file\x18\x01 \x01(\tR\x04fileB\x14Z\x12generated-go/storeb\x06proto3"

var (
	file_store_task_proto_rawDescOnce sync.Once
	file_store_task_proto_rawDescData []byte
)

func file_store_task_proto_rawDescGZIP() []byte {
	file_store_task_proto_rawDescOnce.Do(func() {
		file_store_task_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_store_task_proto_rawDesc), len(file_store_task_proto_rawDesc)))
	})
	return file_store_task_proto_rawDescData
}

var file_store_task_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_store_task_proto_goTypes = []any{
	(*TaskPayload)(nil),           // 0: bytebase.store.TaskPayload
	(*TaskReleaseSource)(nil),     // 1: bytebase.store.TaskReleaseSource
	nil,                           // 2: bytebase.store.TaskPayload.FlagsEntry
	(*PreUpdateBackupDetail)(nil), // 3: bytebase.store.PreUpdateBackupDetail
	(ExportFormat)(0),             // 4: bytebase.store.ExportFormat
}
var file_store_task_proto_depIdxs = []int32{
	3, // 0: bytebase.store.TaskPayload.pre_update_backup_detail:type_name -> bytebase.store.PreUpdateBackupDetail
	2, // 1: bytebase.store.TaskPayload.flags:type_name -> bytebase.store.TaskPayload.FlagsEntry
	1, // 2: bytebase.store.TaskPayload.task_release_source:type_name -> bytebase.store.TaskReleaseSource
	4, // 3: bytebase.store.TaskPayload.format:type_name -> bytebase.store.ExportFormat
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_store_task_proto_init() }
func file_store_task_proto_init() {
	if File_store_task_proto != nil {
		return
	}
	file_store_common_proto_init()
	file_store_plan_check_run_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_store_task_proto_rawDesc), len(file_store_task_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_store_task_proto_goTypes,
		DependencyIndexes: file_store_task_proto_depIdxs,
		MessageInfos:      file_store_task_proto_msgTypes,
	}.Build()
	File_store_task_proto = out.File
	file_store_task_proto_goTypes = nil
	file_store_task_proto_depIdxs = nil
}
