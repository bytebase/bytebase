// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: v1/issue_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	IssueService_GetReview_FullMethodName           = "/bytebase.v1.IssueService/GetReview"
	IssueService_CreateReview_FullMethodName        = "/bytebase.v1.IssueService/CreateReview"
	IssueService_ListReviews_FullMethodName         = "/bytebase.v1.IssueService/ListReviews"
	IssueService_UpdateReview_FullMethodName        = "/bytebase.v1.IssueService/UpdateReview"
	IssueService_CreateReviewComment_FullMethodName = "/bytebase.v1.IssueService/CreateReviewComment"
	IssueService_UpdateReviewComment_FullMethodName = "/bytebase.v1.IssueService/UpdateReviewComment"
	IssueService_BatchUpdateReviews_FullMethodName  = "/bytebase.v1.IssueService/BatchUpdateReviews"
	IssueService_ApproveReview_FullMethodName       = "/bytebase.v1.IssueService/ApproveReview"
	IssueService_RejectReview_FullMethodName        = "/bytebase.v1.IssueService/RejectReview"
	IssueService_RequestReview_FullMethodName       = "/bytebase.v1.IssueService/RequestReview"
)

// IssueServiceClient is the client API for IssueService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IssueServiceClient interface {
	GetReview(ctx context.Context, in *GetReviewRequest, opts ...grpc.CallOption) (*Review, error)
	CreateReview(ctx context.Context, in *CreateReviewRequest, opts ...grpc.CallOption) (*Review, error)
	ListReviews(ctx context.Context, in *ListReviewsRequest, opts ...grpc.CallOption) (*ListReviewsResponse, error)
	UpdateReview(ctx context.Context, in *UpdateReviewRequest, opts ...grpc.CallOption) (*Review, error)
	CreateReviewComment(ctx context.Context, in *CreateReviewCommentRequest, opts ...grpc.CallOption) (*ReviewComment, error)
	UpdateReviewComment(ctx context.Context, in *UpdateReviewCommentRequest, opts ...grpc.CallOption) (*ReviewComment, error)
	BatchUpdateReviews(ctx context.Context, in *BatchUpdateReviewsRequest, opts ...grpc.CallOption) (*BatchUpdateReviewsResponse, error)
	ApproveReview(ctx context.Context, in *ApproveReviewRequest, opts ...grpc.CallOption) (*Review, error)
	RejectReview(ctx context.Context, in *RejectReviewRequest, opts ...grpc.CallOption) (*Review, error)
	RequestReview(ctx context.Context, in *RequestReviewRequest, opts ...grpc.CallOption) (*Review, error)
}

type issueServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIssueServiceClient(cc grpc.ClientConnInterface) IssueServiceClient {
	return &issueServiceClient{cc}
}

func (c *issueServiceClient) GetReview(ctx context.Context, in *GetReviewRequest, opts ...grpc.CallOption) (*Review, error) {
	out := new(Review)
	err := c.cc.Invoke(ctx, IssueService_GetReview_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueServiceClient) CreateReview(ctx context.Context, in *CreateReviewRequest, opts ...grpc.CallOption) (*Review, error) {
	out := new(Review)
	err := c.cc.Invoke(ctx, IssueService_CreateReview_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueServiceClient) ListReviews(ctx context.Context, in *ListReviewsRequest, opts ...grpc.CallOption) (*ListReviewsResponse, error) {
	out := new(ListReviewsResponse)
	err := c.cc.Invoke(ctx, IssueService_ListReviews_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueServiceClient) UpdateReview(ctx context.Context, in *UpdateReviewRequest, opts ...grpc.CallOption) (*Review, error) {
	out := new(Review)
	err := c.cc.Invoke(ctx, IssueService_UpdateReview_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueServiceClient) CreateReviewComment(ctx context.Context, in *CreateReviewCommentRequest, opts ...grpc.CallOption) (*ReviewComment, error) {
	out := new(ReviewComment)
	err := c.cc.Invoke(ctx, IssueService_CreateReviewComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueServiceClient) UpdateReviewComment(ctx context.Context, in *UpdateReviewCommentRequest, opts ...grpc.CallOption) (*ReviewComment, error) {
	out := new(ReviewComment)
	err := c.cc.Invoke(ctx, IssueService_UpdateReviewComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueServiceClient) BatchUpdateReviews(ctx context.Context, in *BatchUpdateReviewsRequest, opts ...grpc.CallOption) (*BatchUpdateReviewsResponse, error) {
	out := new(BatchUpdateReviewsResponse)
	err := c.cc.Invoke(ctx, IssueService_BatchUpdateReviews_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueServiceClient) ApproveReview(ctx context.Context, in *ApproveReviewRequest, opts ...grpc.CallOption) (*Review, error) {
	out := new(Review)
	err := c.cc.Invoke(ctx, IssueService_ApproveReview_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueServiceClient) RejectReview(ctx context.Context, in *RejectReviewRequest, opts ...grpc.CallOption) (*Review, error) {
	out := new(Review)
	err := c.cc.Invoke(ctx, IssueService_RejectReview_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueServiceClient) RequestReview(ctx context.Context, in *RequestReviewRequest, opts ...grpc.CallOption) (*Review, error) {
	out := new(Review)
	err := c.cc.Invoke(ctx, IssueService_RequestReview_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IssueServiceServer is the server API for IssueService service.
// All implementations must embed UnimplementedIssueServiceServer
// for forward compatibility
type IssueServiceServer interface {
	GetReview(context.Context, *GetReviewRequest) (*Review, error)
	CreateReview(context.Context, *CreateReviewRequest) (*Review, error)
	ListReviews(context.Context, *ListReviewsRequest) (*ListReviewsResponse, error)
	UpdateReview(context.Context, *UpdateReviewRequest) (*Review, error)
	CreateReviewComment(context.Context, *CreateReviewCommentRequest) (*ReviewComment, error)
	UpdateReviewComment(context.Context, *UpdateReviewCommentRequest) (*ReviewComment, error)
	BatchUpdateReviews(context.Context, *BatchUpdateReviewsRequest) (*BatchUpdateReviewsResponse, error)
	ApproveReview(context.Context, *ApproveReviewRequest) (*Review, error)
	RejectReview(context.Context, *RejectReviewRequest) (*Review, error)
	RequestReview(context.Context, *RequestReviewRequest) (*Review, error)
	mustEmbedUnimplementedIssueServiceServer()
}

// UnimplementedIssueServiceServer must be embedded to have forward compatible implementations.
type UnimplementedIssueServiceServer struct {
}

func (UnimplementedIssueServiceServer) GetReview(context.Context, *GetReviewRequest) (*Review, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReview not implemented")
}
func (UnimplementedIssueServiceServer) CreateReview(context.Context, *CreateReviewRequest) (*Review, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReview not implemented")
}
func (UnimplementedIssueServiceServer) ListReviews(context.Context, *ListReviewsRequest) (*ListReviewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListReviews not implemented")
}
func (UnimplementedIssueServiceServer) UpdateReview(context.Context, *UpdateReviewRequest) (*Review, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReview not implemented")
}
func (UnimplementedIssueServiceServer) CreateReviewComment(context.Context, *CreateReviewCommentRequest) (*ReviewComment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReviewComment not implemented")
}
func (UnimplementedIssueServiceServer) UpdateReviewComment(context.Context, *UpdateReviewCommentRequest) (*ReviewComment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReviewComment not implemented")
}
func (UnimplementedIssueServiceServer) BatchUpdateReviews(context.Context, *BatchUpdateReviewsRequest) (*BatchUpdateReviewsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchUpdateReviews not implemented")
}
func (UnimplementedIssueServiceServer) ApproveReview(context.Context, *ApproveReviewRequest) (*Review, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveReview not implemented")
}
func (UnimplementedIssueServiceServer) RejectReview(context.Context, *RejectReviewRequest) (*Review, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectReview not implemented")
}
func (UnimplementedIssueServiceServer) RequestReview(context.Context, *RequestReviewRequest) (*Review, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestReview not implemented")
}
func (UnimplementedIssueServiceServer) mustEmbedUnimplementedIssueServiceServer() {}

// UnsafeIssueServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IssueServiceServer will
// result in compilation errors.
type UnsafeIssueServiceServer interface {
	mustEmbedUnimplementedIssueServiceServer()
}

func RegisterIssueServiceServer(s grpc.ServiceRegistrar, srv IssueServiceServer) {
	s.RegisterService(&IssueService_ServiceDesc, srv)
}

func _IssueService_GetReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueServiceServer).GetReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IssueService_GetReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueServiceServer).GetReview(ctx, req.(*GetReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssueService_CreateReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueServiceServer).CreateReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IssueService_CreateReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueServiceServer).CreateReview(ctx, req.(*CreateReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssueService_ListReviews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReviewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueServiceServer).ListReviews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IssueService_ListReviews_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueServiceServer).ListReviews(ctx, req.(*ListReviewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssueService_UpdateReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueServiceServer).UpdateReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IssueService_UpdateReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueServiceServer).UpdateReview(ctx, req.(*UpdateReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssueService_CreateReviewComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReviewCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueServiceServer).CreateReviewComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IssueService_CreateReviewComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueServiceServer).CreateReviewComment(ctx, req.(*CreateReviewCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssueService_UpdateReviewComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReviewCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueServiceServer).UpdateReviewComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IssueService_UpdateReviewComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueServiceServer).UpdateReviewComment(ctx, req.(*UpdateReviewCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssueService_BatchUpdateReviews_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchUpdateReviewsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueServiceServer).BatchUpdateReviews(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IssueService_BatchUpdateReviews_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueServiceServer).BatchUpdateReviews(ctx, req.(*BatchUpdateReviewsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssueService_ApproveReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueServiceServer).ApproveReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IssueService_ApproveReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueServiceServer).ApproveReview(ctx, req.(*ApproveReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssueService_RejectReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueServiceServer).RejectReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IssueService_RejectReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueServiceServer).RejectReview(ctx, req.(*RejectReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssueService_RequestReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueServiceServer).RequestReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IssueService_RequestReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueServiceServer).RequestReview(ctx, req.(*RequestReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IssueService_ServiceDesc is the grpc.ServiceDesc for IssueService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IssueService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bytebase.v1.IssueService",
	HandlerType: (*IssueServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetReview",
			Handler:    _IssueService_GetReview_Handler,
		},
		{
			MethodName: "CreateReview",
			Handler:    _IssueService_CreateReview_Handler,
		},
		{
			MethodName: "ListReviews",
			Handler:    _IssueService_ListReviews_Handler,
		},
		{
			MethodName: "UpdateReview",
			Handler:    _IssueService_UpdateReview_Handler,
		},
		{
			MethodName: "CreateReviewComment",
			Handler:    _IssueService_CreateReviewComment_Handler,
		},
		{
			MethodName: "UpdateReviewComment",
			Handler:    _IssueService_UpdateReviewComment_Handler,
		},
		{
			MethodName: "BatchUpdateReviews",
			Handler:    _IssueService_BatchUpdateReviews_Handler,
		},
		{
			MethodName: "ApproveReview",
			Handler:    _IssueService_ApproveReview_Handler,
		},
		{
			MethodName: "RejectReview",
			Handler:    _IssueService_RejectReview_Handler,
		},
		{
			MethodName: "RequestReview",
			Handler:    _IssueService_RequestReview_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/issue_service.proto",
}
