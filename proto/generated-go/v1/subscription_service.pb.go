// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: v1/subscription_service.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PlanType int32

const (
	PlanType_PLAN_TYPE_UNSPECIFIED PlanType = 0
	PlanType_FREE                  PlanType = 1
	PlanType_TEAM                  PlanType = 2
	PlanType_ENTERPRISE            PlanType = 3
)

// Enum value maps for PlanType.
var (
	PlanType_name = map[int32]string{
		0: "PLAN_TYPE_UNSPECIFIED",
		1: "FREE",
		2: "TEAM",
		3: "ENTERPRISE",
	}
	PlanType_value = map[string]int32{
		"PLAN_TYPE_UNSPECIFIED": 0,
		"FREE":                  1,
		"TEAM":                  2,
		"ENTERPRISE":            3,
	}
)

func (x PlanType) Enum() *PlanType {
	p := new(PlanType)
	*p = x
	return p
}

func (x PlanType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlanType) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_subscription_service_proto_enumTypes[0].Descriptor()
}

func (PlanType) Type() protoreflect.EnumType {
	return &file_v1_subscription_service_proto_enumTypes[0]
}

func (x PlanType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlanType.Descriptor instead.
func (PlanType) EnumDescriptor() ([]byte, []int) {
	return file_v1_subscription_service_proto_rawDescGZIP(), []int{0}
}

// PlanFeature represents the available features in Bytebase
type PlanFeature int32

const (
	PlanFeature_FEATURE_UNSPECIFIED PlanFeature = 0
	// Database Change Management
	PlanFeature_FEATURE_DATABASE_CHANGE                      PlanFeature = 1
	PlanFeature_FEATURE_GIT_BASED_SCHEMA_VERSION_CONTROL     PlanFeature = 2
	PlanFeature_FEATURE_DECLARATIVE_SCHEMA_MIGRATION         PlanFeature = 3
	PlanFeature_FEATURE_COMPARE_AND_SYNC_SCHEMA              PlanFeature = 4
	PlanFeature_FEATURE_ONLINE_SCHEMA_CHANGE                 PlanFeature = 5
	PlanFeature_FEATURE_PRE_DEPLOYMENT_SQL_REVIEW            PlanFeature = 6
	PlanFeature_FEATURE_AUTOMATIC_BACKUP_BEFORE_DATA_CHANGES PlanFeature = 7
	PlanFeature_FEATURE_ONE_CLICK_DATA_ROLLBACK              PlanFeature = 8
	PlanFeature_FEATURE_MULTI_DATABASE_BATCH_CHANGES         PlanFeature = 9
	PlanFeature_FEATURE_PROGRESSIVE_ENVIRONMENT_DEPLOYMENT   PlanFeature = 10
	PlanFeature_FEATURE_SCHEDULED_ROLLOUT_TIME               PlanFeature = 11
	PlanFeature_FEATURE_DATABASE_CHANGELOG                   PlanFeature = 12
	PlanFeature_FEATURE_SCHEMA_DRIFT_DETECTION               PlanFeature = 13
	PlanFeature_FEATURE_CHANGELIST                           PlanFeature = 14
	PlanFeature_FEATURE_SCHEMA_TEMPLATE                      PlanFeature = 15
	PlanFeature_FEATURE_ROLLOUT_POLICY                       PlanFeature = 16
	// SQL Editor & Development
	PlanFeature_FEATURE_WEB_BASED_SQL_EDITOR           PlanFeature = 17
	PlanFeature_FEATURE_SQL_EDITOR_ADMIN_MODE          PlanFeature = 18
	PlanFeature_FEATURE_NATURAL_LANGUAGE_TO_SQL        PlanFeature = 19
	PlanFeature_FEATURE_AI_QUERY_EXPLANATION           PlanFeature = 20
	PlanFeature_FEATURE_AI_QUERY_SUGGESTIONS           PlanFeature = 21
	PlanFeature_FEATURE_AUTO_COMPLETE                  PlanFeature = 22
	PlanFeature_FEATURE_SCHEMA_DIAGRAM                 PlanFeature = 23
	PlanFeature_FEATURE_SCHEMA_EDITOR                  PlanFeature = 24
	PlanFeature_FEATURE_DATA_EXPORT                    PlanFeature = 25
	PlanFeature_FEATURE_QUERY_HISTORY                  PlanFeature = 26
	PlanFeature_FEATURE_SAVED_AND_SHARED_SQL_SCRIPTS   PlanFeature = 27
	PlanFeature_FEATURE_SQL_EDITOR_DDL_DML_RESTRICTION PlanFeature = 28
	PlanFeature_FEATURE_BATCH_QUERY                    PlanFeature = 29
	PlanFeature_FEATURE_INSTANCE_READ_ONLY_CONNECTION  PlanFeature = 30
	PlanFeature_FEATURE_RESTRICT_COPYING_DATA          PlanFeature = 31
	// Security & Compliance
	PlanFeature_FEATURE_IAM                                    PlanFeature = 32
	PlanFeature_FEATURE_INSTANCE_SSL_CONNECTION                PlanFeature = 33
	PlanFeature_FEATURE_INSTANCE_CONNECTION_OVER_SSH_TUNNEL    PlanFeature = 34
	PlanFeature_FEATURE_INSTANCE_CONNECTION_IAM_AUTHENTICATION PlanFeature = 35
	PlanFeature_FEATURE_GOOGLE_AND_GITHUB_SSO                  PlanFeature = 36
	PlanFeature_FEATURE_USER_GROUPS                            PlanFeature = 37
	PlanFeature_FEATURE_DISALLOW_SELF_SERVICE_SIGNUP           PlanFeature = 38
	PlanFeature_FEATURE_DATABASE_SECRET_VARIABLES              PlanFeature = 39
	PlanFeature_FEATURE_QUERY_DATASOURCE_RESTRICTION           PlanFeature = 40
	PlanFeature_FEATURE_CUSTOM_INSTANCE_SYNC_TIME              PlanFeature = 41
	PlanFeature_FEATURE_CUSTOM_INSTANCE_CONNECTION_LIMIT       PlanFeature = 42
	PlanFeature_FEATURE_RISK_ASSESSMENT                        PlanFeature = 43
	PlanFeature_FEATURE_APPROVAL_WORKFLOW                      PlanFeature = 44
	PlanFeature_FEATURE_AUDIT_LOG                              PlanFeature = 45
	PlanFeature_FEATURE_ENTERPRISE_SSO                         PlanFeature = 46
	PlanFeature_FEATURE_TWO_FA                                 PlanFeature = 47
	PlanFeature_FEATURE_PASSWORD_RESTRICTIONS                  PlanFeature = 48
	PlanFeature_FEATURE_DISALLOW_PASSWORD_SIGNIN               PlanFeature = 49
	PlanFeature_FEATURE_CUSTOM_ROLES                           PlanFeature = 50
	PlanFeature_FEATURE_REQUEST_ROLE_WORKFLOW                  PlanFeature = 51
	PlanFeature_FEATURE_DATA_MASKING                           PlanFeature = 52
	PlanFeature_FEATURE_DATA_CLASSIFICATION                    PlanFeature = 53
	PlanFeature_FEATURE_SCIM                                   PlanFeature = 54
	PlanFeature_FEATURE_DIRECTORY_SYNC                         PlanFeature = 55
	PlanFeature_FEATURE_SIGN_IN_FREQUENCY_CONTROL              PlanFeature = 56
	PlanFeature_FEATURE_EXTERNAL_SECRET_MANAGER                PlanFeature = 57
	PlanFeature_FEATURE_USER_EMAIL_DOMAIN_RESTRICTION          PlanFeature = 58
	// Administration & Support
	PlanFeature_FEATURE_ENVIRONMENT_MANAGEMENT     PlanFeature = 59
	PlanFeature_FEATURE_IM_NOTIFICATIONS           PlanFeature = 60
	PlanFeature_FEATURE_TERRAFORM_PROVIDER         PlanFeature = 61
	PlanFeature_FEATURE_DATABASE_GROUPS            PlanFeature = 62
	PlanFeature_FEATURE_ENVIRONMENT_TIERS          PlanFeature = 63
	PlanFeature_FEATURE_DASHBOARD_ANNOUNCEMENT     PlanFeature = 64
	PlanFeature_FEATURE_API_INTEGRATION_GUIDANCE   PlanFeature = 65
	PlanFeature_FEATURE_CUSTOM_LOGO                PlanFeature = 66
	PlanFeature_FEATURE_WATERMARK                  PlanFeature = 67
	PlanFeature_FEATURE_ROADMAP_PRIORITIZATION     PlanFeature = 68
	PlanFeature_FEATURE_CUSTOM_MSA                 PlanFeature = 69
	PlanFeature_FEATURE_COMMUNITY_SUPPORT          PlanFeature = 70
	PlanFeature_FEATURE_EMAIL_SUPPORT              PlanFeature = 71
	PlanFeature_FEATURE_DEDICATED_SUPPORT_WITH_SLA PlanFeature = 72
)

// Enum value maps for PlanFeature.
var (
	PlanFeature_name = map[int32]string{
		0:  "FEATURE_UNSPECIFIED",
		1:  "FEATURE_DATABASE_CHANGE",
		2:  "FEATURE_GIT_BASED_SCHEMA_VERSION_CONTROL",
		3:  "FEATURE_DECLARATIVE_SCHEMA_MIGRATION",
		4:  "FEATURE_COMPARE_AND_SYNC_SCHEMA",
		5:  "FEATURE_ONLINE_SCHEMA_CHANGE",
		6:  "FEATURE_PRE_DEPLOYMENT_SQL_REVIEW",
		7:  "FEATURE_AUTOMATIC_BACKUP_BEFORE_DATA_CHANGES",
		8:  "FEATURE_ONE_CLICK_DATA_ROLLBACK",
		9:  "FEATURE_MULTI_DATABASE_BATCH_CHANGES",
		10: "FEATURE_PROGRESSIVE_ENVIRONMENT_DEPLOYMENT",
		11: "FEATURE_SCHEDULED_ROLLOUT_TIME",
		12: "FEATURE_DATABASE_CHANGELOG",
		13: "FEATURE_SCHEMA_DRIFT_DETECTION",
		14: "FEATURE_CHANGELIST",
		15: "FEATURE_SCHEMA_TEMPLATE",
		16: "FEATURE_ROLLOUT_POLICY",
		17: "FEATURE_WEB_BASED_SQL_EDITOR",
		18: "FEATURE_SQL_EDITOR_ADMIN_MODE",
		19: "FEATURE_NATURAL_LANGUAGE_TO_SQL",
		20: "FEATURE_AI_QUERY_EXPLANATION",
		21: "FEATURE_AI_QUERY_SUGGESTIONS",
		22: "FEATURE_AUTO_COMPLETE",
		23: "FEATURE_SCHEMA_DIAGRAM",
		24: "FEATURE_SCHEMA_EDITOR",
		25: "FEATURE_DATA_EXPORT",
		26: "FEATURE_QUERY_HISTORY",
		27: "FEATURE_SAVED_AND_SHARED_SQL_SCRIPTS",
		28: "FEATURE_SQL_EDITOR_DDL_DML_RESTRICTION",
		29: "FEATURE_BATCH_QUERY",
		30: "FEATURE_INSTANCE_READ_ONLY_CONNECTION",
		31: "FEATURE_RESTRICT_COPYING_DATA",
		32: "FEATURE_IAM",
		33: "FEATURE_INSTANCE_SSL_CONNECTION",
		34: "FEATURE_INSTANCE_CONNECTION_OVER_SSH_TUNNEL",
		35: "FEATURE_INSTANCE_CONNECTION_IAM_AUTHENTICATION",
		36: "FEATURE_GOOGLE_AND_GITHUB_SSO",
		37: "FEATURE_USER_GROUPS",
		38: "FEATURE_DISALLOW_SELF_SERVICE_SIGNUP",
		39: "FEATURE_DATABASE_SECRET_VARIABLES",
		40: "FEATURE_QUERY_DATASOURCE_RESTRICTION",
		41: "FEATURE_CUSTOM_INSTANCE_SYNC_TIME",
		42: "FEATURE_CUSTOM_INSTANCE_CONNECTION_LIMIT",
		43: "FEATURE_RISK_ASSESSMENT",
		44: "FEATURE_APPROVAL_WORKFLOW",
		45: "FEATURE_AUDIT_LOG",
		46: "FEATURE_ENTERPRISE_SSO",
		47: "FEATURE_TWO_FA",
		48: "FEATURE_PASSWORD_RESTRICTIONS",
		49: "FEATURE_DISALLOW_PASSWORD_SIGNIN",
		50: "FEATURE_CUSTOM_ROLES",
		51: "FEATURE_REQUEST_ROLE_WORKFLOW",
		52: "FEATURE_DATA_MASKING",
		53: "FEATURE_DATA_CLASSIFICATION",
		54: "FEATURE_SCIM",
		55: "FEATURE_DIRECTORY_SYNC",
		56: "FEATURE_SIGN_IN_FREQUENCY_CONTROL",
		57: "FEATURE_EXTERNAL_SECRET_MANAGER",
		58: "FEATURE_USER_EMAIL_DOMAIN_RESTRICTION",
		59: "FEATURE_ENVIRONMENT_MANAGEMENT",
		60: "FEATURE_IM_NOTIFICATIONS",
		61: "FEATURE_TERRAFORM_PROVIDER",
		62: "FEATURE_DATABASE_GROUPS",
		63: "FEATURE_ENVIRONMENT_TIERS",
		64: "FEATURE_DASHBOARD_ANNOUNCEMENT",
		65: "FEATURE_API_INTEGRATION_GUIDANCE",
		66: "FEATURE_CUSTOM_LOGO",
		67: "FEATURE_WATERMARK",
		68: "FEATURE_ROADMAP_PRIORITIZATION",
		69: "FEATURE_CUSTOM_MSA",
		70: "FEATURE_COMMUNITY_SUPPORT",
		71: "FEATURE_EMAIL_SUPPORT",
		72: "FEATURE_DEDICATED_SUPPORT_WITH_SLA",
	}
	PlanFeature_value = map[string]int32{
		"FEATURE_UNSPECIFIED":                            0,
		"FEATURE_DATABASE_CHANGE":                        1,
		"FEATURE_GIT_BASED_SCHEMA_VERSION_CONTROL":       2,
		"FEATURE_DECLARATIVE_SCHEMA_MIGRATION":           3,
		"FEATURE_COMPARE_AND_SYNC_SCHEMA":                4,
		"FEATURE_ONLINE_SCHEMA_CHANGE":                   5,
		"FEATURE_PRE_DEPLOYMENT_SQL_REVIEW":              6,
		"FEATURE_AUTOMATIC_BACKUP_BEFORE_DATA_CHANGES":   7,
		"FEATURE_ONE_CLICK_DATA_ROLLBACK":                8,
		"FEATURE_MULTI_DATABASE_BATCH_CHANGES":           9,
		"FEATURE_PROGRESSIVE_ENVIRONMENT_DEPLOYMENT":     10,
		"FEATURE_SCHEDULED_ROLLOUT_TIME":                 11,
		"FEATURE_DATABASE_CHANGELOG":                     12,
		"FEATURE_SCHEMA_DRIFT_DETECTION":                 13,
		"FEATURE_CHANGELIST":                             14,
		"FEATURE_SCHEMA_TEMPLATE":                        15,
		"FEATURE_ROLLOUT_POLICY":                         16,
		"FEATURE_WEB_BASED_SQL_EDITOR":                   17,
		"FEATURE_SQL_EDITOR_ADMIN_MODE":                  18,
		"FEATURE_NATURAL_LANGUAGE_TO_SQL":                19,
		"FEATURE_AI_QUERY_EXPLANATION":                   20,
		"FEATURE_AI_QUERY_SUGGESTIONS":                   21,
		"FEATURE_AUTO_COMPLETE":                          22,
		"FEATURE_SCHEMA_DIAGRAM":                         23,
		"FEATURE_SCHEMA_EDITOR":                          24,
		"FEATURE_DATA_EXPORT":                            25,
		"FEATURE_QUERY_HISTORY":                          26,
		"FEATURE_SAVED_AND_SHARED_SQL_SCRIPTS":           27,
		"FEATURE_SQL_EDITOR_DDL_DML_RESTRICTION":         28,
		"FEATURE_BATCH_QUERY":                            29,
		"FEATURE_INSTANCE_READ_ONLY_CONNECTION":          30,
		"FEATURE_RESTRICT_COPYING_DATA":                  31,
		"FEATURE_IAM":                                    32,
		"FEATURE_INSTANCE_SSL_CONNECTION":                33,
		"FEATURE_INSTANCE_CONNECTION_OVER_SSH_TUNNEL":    34,
		"FEATURE_INSTANCE_CONNECTION_IAM_AUTHENTICATION": 35,
		"FEATURE_GOOGLE_AND_GITHUB_SSO":                  36,
		"FEATURE_USER_GROUPS":                            37,
		"FEATURE_DISALLOW_SELF_SERVICE_SIGNUP":           38,
		"FEATURE_DATABASE_SECRET_VARIABLES":              39,
		"FEATURE_QUERY_DATASOURCE_RESTRICTION":           40,
		"FEATURE_CUSTOM_INSTANCE_SYNC_TIME":              41,
		"FEATURE_CUSTOM_INSTANCE_CONNECTION_LIMIT":       42,
		"FEATURE_RISK_ASSESSMENT":                        43,
		"FEATURE_APPROVAL_WORKFLOW":                      44,
		"FEATURE_AUDIT_LOG":                              45,
		"FEATURE_ENTERPRISE_SSO":                         46,
		"FEATURE_TWO_FA":                                 47,
		"FEATURE_PASSWORD_RESTRICTIONS":                  48,
		"FEATURE_DISALLOW_PASSWORD_SIGNIN":               49,
		"FEATURE_CUSTOM_ROLES":                           50,
		"FEATURE_REQUEST_ROLE_WORKFLOW":                  51,
		"FEATURE_DATA_MASKING":                           52,
		"FEATURE_DATA_CLASSIFICATION":                    53,
		"FEATURE_SCIM":                                   54,
		"FEATURE_DIRECTORY_SYNC":                         55,
		"FEATURE_SIGN_IN_FREQUENCY_CONTROL":              56,
		"FEATURE_EXTERNAL_SECRET_MANAGER":                57,
		"FEATURE_USER_EMAIL_DOMAIN_RESTRICTION":          58,
		"FEATURE_ENVIRONMENT_MANAGEMENT":                 59,
		"FEATURE_IM_NOTIFICATIONS":                       60,
		"FEATURE_TERRAFORM_PROVIDER":                     61,
		"FEATURE_DATABASE_GROUPS":                        62,
		"FEATURE_ENVIRONMENT_TIERS":                      63,
		"FEATURE_DASHBOARD_ANNOUNCEMENT":                 64,
		"FEATURE_API_INTEGRATION_GUIDANCE":               65,
		"FEATURE_CUSTOM_LOGO":                            66,
		"FEATURE_WATERMARK":                              67,
		"FEATURE_ROADMAP_PRIORITIZATION":                 68,
		"FEATURE_CUSTOM_MSA":                             69,
		"FEATURE_COMMUNITY_SUPPORT":                      70,
		"FEATURE_EMAIL_SUPPORT":                          71,
		"FEATURE_DEDICATED_SUPPORT_WITH_SLA":             72,
	}
)

func (x PlanFeature) Enum() *PlanFeature {
	p := new(PlanFeature)
	*p = x
	return p
}

func (x PlanFeature) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlanFeature) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_subscription_service_proto_enumTypes[1].Descriptor()
}

func (PlanFeature) Type() protoreflect.EnumType {
	return &file_v1_subscription_service_proto_enumTypes[1]
}

func (x PlanFeature) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlanFeature.Descriptor instead.
func (PlanFeature) EnumDescriptor() ([]byte, []int) {
	return file_v1_subscription_service_proto_rawDescGZIP(), []int{1}
}

type GetSubscriptionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetSubscriptionRequest) Reset() {
	*x = GetSubscriptionRequest{}
	mi := &file_v1_subscription_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSubscriptionRequest) ProtoMessage() {}

func (x *GetSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_subscription_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*GetSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_v1_subscription_service_proto_rawDescGZIP(), []int{0}
}

type GetFeatureMatrixRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFeatureMatrixRequest) Reset() {
	*x = GetFeatureMatrixRequest{}
	mi := &file_v1_subscription_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFeatureMatrixRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFeatureMatrixRequest) ProtoMessage() {}

func (x *GetFeatureMatrixRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_subscription_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFeatureMatrixRequest.ProtoReflect.Descriptor instead.
func (*GetFeatureMatrixRequest) Descriptor() ([]byte, []int) {
	return file_v1_subscription_service_proto_rawDescGZIP(), []int{1}
}

type UpdateSubscriptionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Patch         *PatchSubscription     `protobuf:"bytes,1,opt,name=patch,proto3" json:"patch,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateSubscriptionRequest) Reset() {
	*x = UpdateSubscriptionRequest{}
	mi := &file_v1_subscription_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSubscriptionRequest) ProtoMessage() {}

func (x *UpdateSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_subscription_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*UpdateSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_v1_subscription_service_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateSubscriptionRequest) GetPatch() *PatchSubscription {
	if x != nil {
		return x.Patch
	}
	return nil
}

type PatchSubscription struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	License       string                 `protobuf:"bytes,1,opt,name=license,proto3" json:"license,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PatchSubscription) Reset() {
	*x = PatchSubscription{}
	mi := &file_v1_subscription_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PatchSubscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchSubscription) ProtoMessage() {}

func (x *PatchSubscription) ProtoReflect() protoreflect.Message {
	mi := &file_v1_subscription_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchSubscription.ProtoReflect.Descriptor instead.
func (*PatchSubscription) Descriptor() ([]byte, []int) {
	return file_v1_subscription_service_proto_rawDescGZIP(), []int{3}
}

func (x *PatchSubscription) GetLicense() string {
	if x != nil {
		return x.License
	}
	return ""
}

type Subscription struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SeatCount     int32                  `protobuf:"varint,1,opt,name=seat_count,json=seatCount,proto3" json:"seat_count,omitempty"`
	InstanceCount int32                  `protobuf:"varint,2,opt,name=instance_count,json=instanceCount,proto3" json:"instance_count,omitempty"`
	ExpiresTime   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=expires_time,json=expiresTime,proto3" json:"expires_time,omitempty"`
	StartedTime   *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=started_time,json=startedTime,proto3" json:"started_time,omitempty"`
	Plan          PlanType               `protobuf:"varint,5,opt,name=plan,proto3,enum=bytebase.v1.PlanType" json:"plan,omitempty"`
	Trialing      bool                   `protobuf:"varint,6,opt,name=trialing,proto3" json:"trialing,omitempty"`
	OrgId         string                 `protobuf:"bytes,7,opt,name=org_id,json=orgId,proto3" json:"org_id,omitempty"`
	OrgName       string                 `protobuf:"bytes,8,opt,name=org_name,json=orgName,proto3" json:"org_name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Subscription) Reset() {
	*x = Subscription{}
	mi := &file_v1_subscription_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Subscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subscription) ProtoMessage() {}

func (x *Subscription) ProtoReflect() protoreflect.Message {
	mi := &file_v1_subscription_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subscription.ProtoReflect.Descriptor instead.
func (*Subscription) Descriptor() ([]byte, []int) {
	return file_v1_subscription_service_proto_rawDescGZIP(), []int{4}
}

func (x *Subscription) GetSeatCount() int32 {
	if x != nil {
		return x.SeatCount
	}
	return 0
}

func (x *Subscription) GetInstanceCount() int32 {
	if x != nil {
		return x.InstanceCount
	}
	return 0
}

func (x *Subscription) GetExpiresTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpiresTime
	}
	return nil
}

func (x *Subscription) GetStartedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedTime
	}
	return nil
}

func (x *Subscription) GetPlan() PlanType {
	if x != nil {
		return x.Plan
	}
	return PlanType_PLAN_TYPE_UNSPECIFIED
}

func (x *Subscription) GetTrialing() bool {
	if x != nil {
		return x.Trialing
	}
	return false
}

func (x *Subscription) GetOrgId() string {
	if x != nil {
		return x.OrgId
	}
	return ""
}

func (x *Subscription) GetOrgName() string {
	if x != nil {
		return x.OrgName
	}
	return ""
}

type FeatureMatrix struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Features      []*Feature             `protobuf:"bytes,1,rep,name=features,proto3" json:"features,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FeatureMatrix) Reset() {
	*x = FeatureMatrix{}
	mi := &file_v1_subscription_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FeatureMatrix) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureMatrix) ProtoMessage() {}

func (x *FeatureMatrix) ProtoReflect() protoreflect.Message {
	mi := &file_v1_subscription_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureMatrix.ProtoReflect.Descriptor instead.
func (*FeatureMatrix) Descriptor() ([]byte, []int) {
	return file_v1_subscription_service_proto_rawDescGZIP(), []int{5}
}

func (x *FeatureMatrix) GetFeatures() []*Feature {
	if x != nil {
		return x.Features
	}
	return nil
}

type Feature struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name is the feature name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Matrix is the feature matrix for different plan. The key is the plan enum in string value.
	Matrix        map[string]bool `protobuf:"bytes,2,rep,name=matrix,proto3" json:"matrix,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Feature) Reset() {
	*x = Feature{}
	mi := &file_v1_subscription_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Feature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Feature) ProtoMessage() {}

func (x *Feature) ProtoReflect() protoreflect.Message {
	mi := &file_v1_subscription_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Feature.ProtoReflect.Descriptor instead.
func (*Feature) Descriptor() ([]byte, []int) {
	return file_v1_subscription_service_proto_rawDescGZIP(), []int{6}
}

func (x *Feature) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Feature) GetMatrix() map[string]bool {
	if x != nil {
		return x.Matrix
	}
	return nil
}

// PlanConfig represents the configuration for all plans loaded from plan.yaml
type PlanConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Plans         []*PlanLimitConfig     `protobuf:"bytes,1,rep,name=plans,proto3" json:"plans,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlanConfig) Reset() {
	*x = PlanConfig{}
	mi := &file_v1_subscription_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlanConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanConfig) ProtoMessage() {}

func (x *PlanConfig) ProtoReflect() protoreflect.Message {
	mi := &file_v1_subscription_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanConfig.ProtoReflect.Descriptor instead.
func (*PlanConfig) Descriptor() ([]byte, []int) {
	return file_v1_subscription_service_proto_rawDescGZIP(), []int{7}
}

func (x *PlanConfig) GetPlans() []*PlanLimitConfig {
	if x != nil {
		return x.Plans
	}
	return nil
}

// PlanLimitConfig represents a single plan's configuration
type PlanLimitConfig struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	Type                 PlanType               `protobuf:"varint,1,opt,name=type,proto3,enum=bytebase.v1.PlanType" json:"type,omitempty"`
	MaximumInstanceCount int32                  `protobuf:"varint,2,opt,name=maximum_instance_count,json=maximumInstanceCount,proto3" json:"maximum_instance_count,omitempty"`
	MaximumSeatCount     int32                  `protobuf:"varint,3,opt,name=maximum_seat_count,json=maximumSeatCount,proto3" json:"maximum_seat_count,omitempty"`
	Features             []PlanFeature          `protobuf:"varint,4,rep,packed,name=features,proto3,enum=bytebase.v1.PlanFeature" json:"features,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *PlanLimitConfig) Reset() {
	*x = PlanLimitConfig{}
	mi := &file_v1_subscription_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlanLimitConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanLimitConfig) ProtoMessage() {}

func (x *PlanLimitConfig) ProtoReflect() protoreflect.Message {
	mi := &file_v1_subscription_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanLimitConfig.ProtoReflect.Descriptor instead.
func (*PlanLimitConfig) Descriptor() ([]byte, []int) {
	return file_v1_subscription_service_proto_rawDescGZIP(), []int{8}
}

func (x *PlanLimitConfig) GetType() PlanType {
	if x != nil {
		return x.Type
	}
	return PlanType_PLAN_TYPE_UNSPECIFIED
}

func (x *PlanLimitConfig) GetMaximumInstanceCount() int32 {
	if x != nil {
		return x.MaximumInstanceCount
	}
	return 0
}

func (x *PlanLimitConfig) GetMaximumSeatCount() int32 {
	if x != nil {
		return x.MaximumSeatCount
	}
	return 0
}

func (x *PlanLimitConfig) GetFeatures() []PlanFeature {
	if x != nil {
		return x.Features
	}
	return nil
}

var File_v1_subscription_service_proto protoreflect.FileDescriptor

const file_v1_subscription_service_proto_rawDesc = "" +
	"\n" +
	"\x1dv1/subscription_service.proto\x12\vbytebase.v1\x1a\x1cgoogle/api/annotations.proto\x1a\x17google/api/client.proto\x1a\x1fgoogle/api/field_behavior.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x13v1/annotation.proto\"\x18\n" +
	"\x16GetSubscriptionRequest\"\x19\n" +
	"\x17GetFeatureMatrixRequest\"Q\n" +
	"\x19UpdateSubscriptionRequest\x124\n" +
	"\x05patch\x18\x01 \x01(\v2\x1e.bytebase.v1.PatchSubscriptionR\x05patch\"-\n" +
	"\x11PatchSubscription\x12\x18\n" +
	"\alicense\x18\x01 \x01(\tR\alicense\"\xfb\x02\n" +
	"\fSubscription\x12#\n" +
	"\n" +
	"seat_count\x18\x01 \x01(\x05B\x04\xe2A\x01\x03R\tseatCount\x12+\n" +
	"\x0einstance_count\x18\x02 \x01(\x05B\x04\xe2A\x01\x03R\rinstanceCount\x12C\n" +
	"\fexpires_time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampB\x04\xe2A\x01\x03R\vexpiresTime\x12C\n" +
	"\fstarted_time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampB\x04\xe2A\x01\x03R\vstartedTime\x12/\n" +
	"\x04plan\x18\x05 \x01(\x0e2\x15.bytebase.v1.PlanTypeB\x04\xe2A\x01\x03R\x04plan\x12 \n" +
	"\btrialing\x18\x06 \x01(\bB\x04\xe2A\x01\x03R\btrialing\x12\x1b\n" +
	"\x06org_id\x18\a \x01(\tB\x04\xe2A\x01\x03R\x05orgId\x12\x1f\n" +
	"\borg_name\x18\b \x01(\tB\x04\xe2A\x01\x03R\aorgName\"A\n" +
	"\rFeatureMatrix\x120\n" +
	"\bfeatures\x18\x01 \x03(\v2\x14.bytebase.v1.FeatureR\bfeatures\"\x92\x01\n" +
	"\aFeature\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x128\n" +
	"\x06matrix\x18\x02 \x03(\v2 .bytebase.v1.Feature.MatrixEntryR\x06matrix\x1a9\n" +
	"\vMatrixEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\bR\x05value:\x028\x01\"@\n" +
	"\n" +
	"PlanConfig\x122\n" +
	"\x05plans\x18\x01 \x03(\v2\x1c.bytebase.v1.PlanLimitConfigR\x05plans\"\xd6\x01\n" +
	"\x0fPlanLimitConfig\x12)\n" +
	"\x04type\x18\x01 \x01(\x0e2\x15.bytebase.v1.PlanTypeR\x04type\x124\n" +
	"\x16maximum_instance_count\x18\x02 \x01(\x05R\x14maximumInstanceCount\x12,\n" +
	"\x12maximum_seat_count\x18\x03 \x01(\x05R\x10maximumSeatCount\x124\n" +
	"\bfeatures\x18\x04 \x03(\x0e2\x18.bytebase.v1.PlanFeatureR\bfeatures*I\n" +
	"\bPlanType\x12\x19\n" +
	"\x15PLAN_TYPE_UNSPECIFIED\x10\x00\x12\b\n" +
	"\x04FREE\x10\x01\x12\b\n" +
	"\x04TEAM\x10\x02\x12\x0e\n" +
	"\n" +
	"ENTERPRISE\x10\x03*\xaa\x13\n" +
	"\vPlanFeature\x12\x17\n" +
	"\x13FEATURE_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\x17FEATURE_DATABASE_CHANGE\x10\x01\x12,\n" +
	"(FEATURE_GIT_BASED_SCHEMA_VERSION_CONTROL\x10\x02\x12(\n" +
	"$FEATURE_DECLARATIVE_SCHEMA_MIGRATION\x10\x03\x12#\n" +
	"\x1fFEATURE_COMPARE_AND_SYNC_SCHEMA\x10\x04\x12 \n" +
	"\x1cFEATURE_ONLINE_SCHEMA_CHANGE\x10\x05\x12%\n" +
	"!FEATURE_PRE_DEPLOYMENT_SQL_REVIEW\x10\x06\x120\n" +
	",FEATURE_AUTOMATIC_BACKUP_BEFORE_DATA_CHANGES\x10\a\x12#\n" +
	"\x1fFEATURE_ONE_CLICK_DATA_ROLLBACK\x10\b\x12(\n" +
	"$FEATURE_MULTI_DATABASE_BATCH_CHANGES\x10\t\x12.\n" +
	"*FEATURE_PROGRESSIVE_ENVIRONMENT_DEPLOYMENT\x10\n" +
	"\x12\"\n" +
	"\x1eFEATURE_SCHEDULED_ROLLOUT_TIME\x10\v\x12\x1e\n" +
	"\x1aFEATURE_DATABASE_CHANGELOG\x10\f\x12\"\n" +
	"\x1eFEATURE_SCHEMA_DRIFT_DETECTION\x10\r\x12\x16\n" +
	"\x12FEATURE_CHANGELIST\x10\x0e\x12\x1b\n" +
	"\x17FEATURE_SCHEMA_TEMPLATE\x10\x0f\x12\x1a\n" +
	"\x16FEATURE_ROLLOUT_POLICY\x10\x10\x12 \n" +
	"\x1cFEATURE_WEB_BASED_SQL_EDITOR\x10\x11\x12!\n" +
	"\x1dFEATURE_SQL_EDITOR_ADMIN_MODE\x10\x12\x12#\n" +
	"\x1fFEATURE_NATURAL_LANGUAGE_TO_SQL\x10\x13\x12 \n" +
	"\x1cFEATURE_AI_QUERY_EXPLANATION\x10\x14\x12 \n" +
	"\x1cFEATURE_AI_QUERY_SUGGESTIONS\x10\x15\x12\x19\n" +
	"\x15FEATURE_AUTO_COMPLETE\x10\x16\x12\x1a\n" +
	"\x16FEATURE_SCHEMA_DIAGRAM\x10\x17\x12\x19\n" +
	"\x15FEATURE_SCHEMA_EDITOR\x10\x18\x12\x17\n" +
	"\x13FEATURE_DATA_EXPORT\x10\x19\x12\x19\n" +
	"\x15FEATURE_QUERY_HISTORY\x10\x1a\x12(\n" +
	"$FEATURE_SAVED_AND_SHARED_SQL_SCRIPTS\x10\x1b\x12*\n" +
	"&FEATURE_SQL_EDITOR_DDL_DML_RESTRICTION\x10\x1c\x12\x17\n" +
	"\x13FEATURE_BATCH_QUERY\x10\x1d\x12)\n" +
	"%FEATURE_INSTANCE_READ_ONLY_CONNECTION\x10\x1e\x12!\n" +
	"\x1dFEATURE_RESTRICT_COPYING_DATA\x10\x1f\x12\x0f\n" +
	"\vFEATURE_IAM\x10 \x12#\n" +
	"\x1fFEATURE_INSTANCE_SSL_CONNECTION\x10!\x12/\n" +
	"+FEATURE_INSTANCE_CONNECTION_OVER_SSH_TUNNEL\x10\"\x122\n" +
	".FEATURE_INSTANCE_CONNECTION_IAM_AUTHENTICATION\x10#\x12!\n" +
	"\x1dFEATURE_GOOGLE_AND_GITHUB_SSO\x10$\x12\x17\n" +
	"\x13FEATURE_USER_GROUPS\x10%\x12(\n" +
	"$FEATURE_DISALLOW_SELF_SERVICE_SIGNUP\x10&\x12%\n" +
	"!FEATURE_DATABASE_SECRET_VARIABLES\x10'\x12(\n" +
	"$FEATURE_QUERY_DATASOURCE_RESTRICTION\x10(\x12%\n" +
	"!FEATURE_CUSTOM_INSTANCE_SYNC_TIME\x10)\x12,\n" +
	"(FEATURE_CUSTOM_INSTANCE_CONNECTION_LIMIT\x10*\x12\x1b\n" +
	"\x17FEATURE_RISK_ASSESSMENT\x10+\x12\x1d\n" +
	"\x19FEATURE_APPROVAL_WORKFLOW\x10,\x12\x15\n" +
	"\x11FEATURE_AUDIT_LOG\x10-\x12\x1a\n" +
	"\x16FEATURE_ENTERPRISE_SSO\x10.\x12\x12\n" +
	"\x0eFEATURE_TWO_FA\x10/\x12!\n" +
	"\x1dFEATURE_PASSWORD_RESTRICTIONS\x100\x12$\n" +
	" FEATURE_DISALLOW_PASSWORD_SIGNIN\x101\x12\x18\n" +
	"\x14FEATURE_CUSTOM_ROLES\x102\x12!\n" +
	"\x1dFEATURE_REQUEST_ROLE_WORKFLOW\x103\x12\x18\n" +
	"\x14FEATURE_DATA_MASKING\x104\x12\x1f\n" +
	"\x1bFEATURE_DATA_CLASSIFICATION\x105\x12\x10\n" +
	"\fFEATURE_SCIM\x106\x12\x1a\n" +
	"\x16FEATURE_DIRECTORY_SYNC\x107\x12%\n" +
	"!FEATURE_SIGN_IN_FREQUENCY_CONTROL\x108\x12#\n" +
	"\x1fFEATURE_EXTERNAL_SECRET_MANAGER\x109\x12)\n" +
	"%FEATURE_USER_EMAIL_DOMAIN_RESTRICTION\x10:\x12\"\n" +
	"\x1eFEATURE_ENVIRONMENT_MANAGEMENT\x10;\x12\x1c\n" +
	"\x18FEATURE_IM_NOTIFICATIONS\x10<\x12\x1e\n" +
	"\x1aFEATURE_TERRAFORM_PROVIDER\x10=\x12\x1b\n" +
	"\x17FEATURE_DATABASE_GROUPS\x10>\x12\x1d\n" +
	"\x19FEATURE_ENVIRONMENT_TIERS\x10?\x12\"\n" +
	"\x1eFEATURE_DASHBOARD_ANNOUNCEMENT\x10@\x12$\n" +
	" FEATURE_API_INTEGRATION_GUIDANCE\x10A\x12\x17\n" +
	"\x13FEATURE_CUSTOM_LOGO\x10B\x12\x15\n" +
	"\x11FEATURE_WATERMARK\x10C\x12\"\n" +
	"\x1eFEATURE_ROADMAP_PRIORITIZATION\x10D\x12\x16\n" +
	"\x12FEATURE_CUSTOM_MSA\x10E\x12\x1d\n" +
	"\x19FEATURE_COMMUNITY_SUPPORT\x10F\x12\x19\n" +
	"\x15FEATURE_EMAIL_SUPPORT\x10G\x12&\n" +
	"\"FEATURE_DEDICATED_SUPPORT_WITH_SLA\x10H2\x95\x03\n" +
	"\x13SubscriptionService\x12r\n" +
	"\x0fGetSubscription\x12#.bytebase.v1.GetSubscriptionRequest\x1a\x19.bytebase.v1.Subscription\"\x1f\xdaA\x00\x80\xea0\x01\x82\xd3\xe4\x93\x02\x12\x12\x10/v1/subscription\x12p\n" +
	"\x10GetFeatureMatrix\x12$.bytebase.v1.GetFeatureMatrixRequest\x1a\x1a.bytebase.v1.FeatureMatrix\"\x1a\xdaA\x00\x80\xea0\x01\x82\xd3\xe4\x93\x02\r\x12\v/v1/feature\x12\x97\x01\n" +
	"\x12UpdateSubscription\x12&.bytebase.v1.UpdateSubscriptionRequest\x1a\x19.bytebase.v1.Subscription\">\xdaA\x05patch\x8a\xea0\x0fbb.settings.set\x90\xea0\x01\x82\xd3\xe4\x93\x02\x19:\x05patch2\x10/v1/subscriptionB\x11Z\x0fgenerated-go/v1b\x06proto3"

var (
	file_v1_subscription_service_proto_rawDescOnce sync.Once
	file_v1_subscription_service_proto_rawDescData []byte
)

func file_v1_subscription_service_proto_rawDescGZIP() []byte {
	file_v1_subscription_service_proto_rawDescOnce.Do(func() {
		file_v1_subscription_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_v1_subscription_service_proto_rawDesc), len(file_v1_subscription_service_proto_rawDesc)))
	})
	return file_v1_subscription_service_proto_rawDescData
}

var file_v1_subscription_service_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_v1_subscription_service_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_v1_subscription_service_proto_goTypes = []any{
	(PlanType)(0),                     // 0: bytebase.v1.PlanType
	(PlanFeature)(0),                  // 1: bytebase.v1.PlanFeature
	(*GetSubscriptionRequest)(nil),    // 2: bytebase.v1.GetSubscriptionRequest
	(*GetFeatureMatrixRequest)(nil),   // 3: bytebase.v1.GetFeatureMatrixRequest
	(*UpdateSubscriptionRequest)(nil), // 4: bytebase.v1.UpdateSubscriptionRequest
	(*PatchSubscription)(nil),         // 5: bytebase.v1.PatchSubscription
	(*Subscription)(nil),              // 6: bytebase.v1.Subscription
	(*FeatureMatrix)(nil),             // 7: bytebase.v1.FeatureMatrix
	(*Feature)(nil),                   // 8: bytebase.v1.Feature
	(*PlanConfig)(nil),                // 9: bytebase.v1.PlanConfig
	(*PlanLimitConfig)(nil),           // 10: bytebase.v1.PlanLimitConfig
	nil,                               // 11: bytebase.v1.Feature.MatrixEntry
	(*timestamppb.Timestamp)(nil),     // 12: google.protobuf.Timestamp
}
var file_v1_subscription_service_proto_depIdxs = []int32{
	5,  // 0: bytebase.v1.UpdateSubscriptionRequest.patch:type_name -> bytebase.v1.PatchSubscription
	12, // 1: bytebase.v1.Subscription.expires_time:type_name -> google.protobuf.Timestamp
	12, // 2: bytebase.v1.Subscription.started_time:type_name -> google.protobuf.Timestamp
	0,  // 3: bytebase.v1.Subscription.plan:type_name -> bytebase.v1.PlanType
	8,  // 4: bytebase.v1.FeatureMatrix.features:type_name -> bytebase.v1.Feature
	11, // 5: bytebase.v1.Feature.matrix:type_name -> bytebase.v1.Feature.MatrixEntry
	10, // 6: bytebase.v1.PlanConfig.plans:type_name -> bytebase.v1.PlanLimitConfig
	0,  // 7: bytebase.v1.PlanLimitConfig.type:type_name -> bytebase.v1.PlanType
	1,  // 8: bytebase.v1.PlanLimitConfig.features:type_name -> bytebase.v1.PlanFeature
	2,  // 9: bytebase.v1.SubscriptionService.GetSubscription:input_type -> bytebase.v1.GetSubscriptionRequest
	3,  // 10: bytebase.v1.SubscriptionService.GetFeatureMatrix:input_type -> bytebase.v1.GetFeatureMatrixRequest
	4,  // 11: bytebase.v1.SubscriptionService.UpdateSubscription:input_type -> bytebase.v1.UpdateSubscriptionRequest
	6,  // 12: bytebase.v1.SubscriptionService.GetSubscription:output_type -> bytebase.v1.Subscription
	7,  // 13: bytebase.v1.SubscriptionService.GetFeatureMatrix:output_type -> bytebase.v1.FeatureMatrix
	6,  // 14: bytebase.v1.SubscriptionService.UpdateSubscription:output_type -> bytebase.v1.Subscription
	12, // [12:15] is the sub-list for method output_type
	9,  // [9:12] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_v1_subscription_service_proto_init() }
func file_v1_subscription_service_proto_init() {
	if File_v1_subscription_service_proto != nil {
		return
	}
	file_v1_annotation_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_v1_subscription_service_proto_rawDesc), len(file_v1_subscription_service_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v1_subscription_service_proto_goTypes,
		DependencyIndexes: file_v1_subscription_service_proto_depIdxs,
		EnumInfos:         file_v1_subscription_service_proto_enumTypes,
		MessageInfos:      file_v1_subscription_service_proto_msgTypes,
	}.Build()
	File_v1_subscription_service_proto = out.File
	file_v1_subscription_service_proto_goTypes = nil
	file_v1_subscription_service_proto_depIdxs = nil
}
