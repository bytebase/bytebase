// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: v1/vcs_provider_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	VCSProviderService_GetVCSProvider_FullMethodName            = "/bytebase.v1.VCSProviderService/GetVCSProvider"
	VCSProviderService_ListVCSProviders_FullMethodName          = "/bytebase.v1.VCSProviderService/ListVCSProviders"
	VCSProviderService_CreateVCSProvider_FullMethodName         = "/bytebase.v1.VCSProviderService/CreateVCSProvider"
	VCSProviderService_UpdateVCSProvider_FullMethodName         = "/bytebase.v1.VCSProviderService/UpdateVCSProvider"
	VCSProviderService_ExchangeToken_FullMethodName             = "/bytebase.v1.VCSProviderService/ExchangeToken"
	VCSProviderService_DeleteVCSProvider_FullMethodName         = "/bytebase.v1.VCSProviderService/DeleteVCSProvider"
	VCSProviderService_SearchVCSProviderProjects_FullMethodName = "/bytebase.v1.VCSProviderService/SearchVCSProviderProjects"
	VCSProviderService_ListProjectGitOpsInfo_FullMethodName     = "/bytebase.v1.VCSProviderService/ListProjectGitOpsInfo"
)

// VCSProviderServiceClient is the client API for VCSProviderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VCSProviderServiceClient interface {
	GetVCSProvider(ctx context.Context, in *GetVCSProviderRequest, opts ...grpc.CallOption) (*VCSProvider, error)
	ListVCSProviders(ctx context.Context, in *ListVCSProvidersRequest, opts ...grpc.CallOption) (*ListVCSProvidersResponse, error)
	CreateVCSProvider(ctx context.Context, in *CreateVCSProviderRequest, opts ...grpc.CallOption) (*VCSProvider, error)
	UpdateVCSProvider(ctx context.Context, in *UpdateVCSProviderRequest, opts ...grpc.CallOption) (*VCSProvider, error)
	ExchangeToken(ctx context.Context, in *ExchangeTokenRequest, opts ...grpc.CallOption) (*OAuthToken, error)
	DeleteVCSProvider(ctx context.Context, in *DeleteVCSProviderRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SearchVCSProviderProjects(ctx context.Context, in *SearchVCSProviderProjectsRequest, opts ...grpc.CallOption) (*SearchVCSProviderProjectsResponse, error)
	ListProjectGitOpsInfo(ctx context.Context, in *ListProjectGitOpsInfoRequest, opts ...grpc.CallOption) (*ListProjectGitOpsInfoResponse, error)
}

type vCSProviderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVCSProviderServiceClient(cc grpc.ClientConnInterface) VCSProviderServiceClient {
	return &vCSProviderServiceClient{cc}
}

func (c *vCSProviderServiceClient) GetVCSProvider(ctx context.Context, in *GetVCSProviderRequest, opts ...grpc.CallOption) (*VCSProvider, error) {
	out := new(VCSProvider)
	err := c.cc.Invoke(ctx, VCSProviderService_GetVCSProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vCSProviderServiceClient) ListVCSProviders(ctx context.Context, in *ListVCSProvidersRequest, opts ...grpc.CallOption) (*ListVCSProvidersResponse, error) {
	out := new(ListVCSProvidersResponse)
	err := c.cc.Invoke(ctx, VCSProviderService_ListVCSProviders_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vCSProviderServiceClient) CreateVCSProvider(ctx context.Context, in *CreateVCSProviderRequest, opts ...grpc.CallOption) (*VCSProvider, error) {
	out := new(VCSProvider)
	err := c.cc.Invoke(ctx, VCSProviderService_CreateVCSProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vCSProviderServiceClient) UpdateVCSProvider(ctx context.Context, in *UpdateVCSProviderRequest, opts ...grpc.CallOption) (*VCSProvider, error) {
	out := new(VCSProvider)
	err := c.cc.Invoke(ctx, VCSProviderService_UpdateVCSProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vCSProviderServiceClient) ExchangeToken(ctx context.Context, in *ExchangeTokenRequest, opts ...grpc.CallOption) (*OAuthToken, error) {
	out := new(OAuthToken)
	err := c.cc.Invoke(ctx, VCSProviderService_ExchangeToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vCSProviderServiceClient) DeleteVCSProvider(ctx context.Context, in *DeleteVCSProviderRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, VCSProviderService_DeleteVCSProvider_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vCSProviderServiceClient) SearchVCSProviderProjects(ctx context.Context, in *SearchVCSProviderProjectsRequest, opts ...grpc.CallOption) (*SearchVCSProviderProjectsResponse, error) {
	out := new(SearchVCSProviderProjectsResponse)
	err := c.cc.Invoke(ctx, VCSProviderService_SearchVCSProviderProjects_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vCSProviderServiceClient) ListProjectGitOpsInfo(ctx context.Context, in *ListProjectGitOpsInfoRequest, opts ...grpc.CallOption) (*ListProjectGitOpsInfoResponse, error) {
	out := new(ListProjectGitOpsInfoResponse)
	err := c.cc.Invoke(ctx, VCSProviderService_ListProjectGitOpsInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VCSProviderServiceServer is the server API for VCSProviderService service.
// All implementations must embed UnimplementedVCSProviderServiceServer
// for forward compatibility
type VCSProviderServiceServer interface {
	GetVCSProvider(context.Context, *GetVCSProviderRequest) (*VCSProvider, error)
	ListVCSProviders(context.Context, *ListVCSProvidersRequest) (*ListVCSProvidersResponse, error)
	CreateVCSProvider(context.Context, *CreateVCSProviderRequest) (*VCSProvider, error)
	UpdateVCSProvider(context.Context, *UpdateVCSProviderRequest) (*VCSProvider, error)
	ExchangeToken(context.Context, *ExchangeTokenRequest) (*OAuthToken, error)
	DeleteVCSProvider(context.Context, *DeleteVCSProviderRequest) (*emptypb.Empty, error)
	SearchVCSProviderProjects(context.Context, *SearchVCSProviderProjectsRequest) (*SearchVCSProviderProjectsResponse, error)
	ListProjectGitOpsInfo(context.Context, *ListProjectGitOpsInfoRequest) (*ListProjectGitOpsInfoResponse, error)
	mustEmbedUnimplementedVCSProviderServiceServer()
}

// UnimplementedVCSProviderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVCSProviderServiceServer struct {
}

func (UnimplementedVCSProviderServiceServer) GetVCSProvider(context.Context, *GetVCSProviderRequest) (*VCSProvider, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVCSProvider not implemented")
}
func (UnimplementedVCSProviderServiceServer) ListVCSProviders(context.Context, *ListVCSProvidersRequest) (*ListVCSProvidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVCSProviders not implemented")
}
func (UnimplementedVCSProviderServiceServer) CreateVCSProvider(context.Context, *CreateVCSProviderRequest) (*VCSProvider, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVCSProvider not implemented")
}
func (UnimplementedVCSProviderServiceServer) UpdateVCSProvider(context.Context, *UpdateVCSProviderRequest) (*VCSProvider, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVCSProvider not implemented")
}
func (UnimplementedVCSProviderServiceServer) ExchangeToken(context.Context, *ExchangeTokenRequest) (*OAuthToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeToken not implemented")
}
func (UnimplementedVCSProviderServiceServer) DeleteVCSProvider(context.Context, *DeleteVCSProviderRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVCSProvider not implemented")
}
func (UnimplementedVCSProviderServiceServer) SearchVCSProviderProjects(context.Context, *SearchVCSProviderProjectsRequest) (*SearchVCSProviderProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchVCSProviderProjects not implemented")
}
func (UnimplementedVCSProviderServiceServer) ListProjectGitOpsInfo(context.Context, *ListProjectGitOpsInfoRequest) (*ListProjectGitOpsInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectGitOpsInfo not implemented")
}
func (UnimplementedVCSProviderServiceServer) mustEmbedUnimplementedVCSProviderServiceServer() {}

// UnsafeVCSProviderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VCSProviderServiceServer will
// result in compilation errors.
type UnsafeVCSProviderServiceServer interface {
	mustEmbedUnimplementedVCSProviderServiceServer()
}

func RegisterVCSProviderServiceServer(s grpc.ServiceRegistrar, srv VCSProviderServiceServer) {
	s.RegisterService(&VCSProviderService_ServiceDesc, srv)
}

func _VCSProviderService_GetVCSProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVCSProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VCSProviderServiceServer).GetVCSProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VCSProviderService_GetVCSProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VCSProviderServiceServer).GetVCSProvider(ctx, req.(*GetVCSProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VCSProviderService_ListVCSProviders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVCSProvidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VCSProviderServiceServer).ListVCSProviders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VCSProviderService_ListVCSProviders_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VCSProviderServiceServer).ListVCSProviders(ctx, req.(*ListVCSProvidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VCSProviderService_CreateVCSProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVCSProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VCSProviderServiceServer).CreateVCSProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VCSProviderService_CreateVCSProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VCSProviderServiceServer).CreateVCSProvider(ctx, req.(*CreateVCSProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VCSProviderService_UpdateVCSProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVCSProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VCSProviderServiceServer).UpdateVCSProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VCSProviderService_UpdateVCSProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VCSProviderServiceServer).UpdateVCSProvider(ctx, req.(*UpdateVCSProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VCSProviderService_ExchangeToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VCSProviderServiceServer).ExchangeToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VCSProviderService_ExchangeToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VCSProviderServiceServer).ExchangeToken(ctx, req.(*ExchangeTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VCSProviderService_DeleteVCSProvider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVCSProviderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VCSProviderServiceServer).DeleteVCSProvider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VCSProviderService_DeleteVCSProvider_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VCSProviderServiceServer).DeleteVCSProvider(ctx, req.(*DeleteVCSProviderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VCSProviderService_SearchVCSProviderProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchVCSProviderProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VCSProviderServiceServer).SearchVCSProviderProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VCSProviderService_SearchVCSProviderProjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VCSProviderServiceServer).SearchVCSProviderProjects(ctx, req.(*SearchVCSProviderProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VCSProviderService_ListProjectGitOpsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectGitOpsInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VCSProviderServiceServer).ListProjectGitOpsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VCSProviderService_ListProjectGitOpsInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VCSProviderServiceServer).ListProjectGitOpsInfo(ctx, req.(*ListProjectGitOpsInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VCSProviderService_ServiceDesc is the grpc.ServiceDesc for VCSProviderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VCSProviderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bytebase.v1.VCSProviderService",
	HandlerType: (*VCSProviderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVCSProvider",
			Handler:    _VCSProviderService_GetVCSProvider_Handler,
		},
		{
			MethodName: "ListVCSProviders",
			Handler:    _VCSProviderService_ListVCSProviders_Handler,
		},
		{
			MethodName: "CreateVCSProvider",
			Handler:    _VCSProviderService_CreateVCSProvider_Handler,
		},
		{
			MethodName: "UpdateVCSProvider",
			Handler:    _VCSProviderService_UpdateVCSProvider_Handler,
		},
		{
			MethodName: "ExchangeToken",
			Handler:    _VCSProviderService_ExchangeToken_Handler,
		},
		{
			MethodName: "DeleteVCSProvider",
			Handler:    _VCSProviderService_DeleteVCSProvider_Handler,
		},
		{
			MethodName: "SearchVCSProviderProjects",
			Handler:    _VCSProviderService_SearchVCSProviderProjects_Handler,
		},
		{
			MethodName: "ListProjectGitOpsInfo",
			Handler:    _VCSProviderService_ListProjectGitOpsInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/vcs_provider_service.proto",
}
