// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: v1/logging_service.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LogEntity_Action int32

const (
	LogEntity_ACTION_UNSPECIFIED LogEntity_Action = 0 // In worksapce resource only.
	// Member related activity types.
	// Enum value 1 - 20
	//
	// ACTION_MEMBER_CREATE is the type for creating a new member.
	LogEntity_ACTION_MEMBER_CREATE LogEntity_Action = 1
	// ACTION_MEMBER_ROLE_UPDATE is the type for updating a member's role.
	LogEntity_ACTION_MEMBER_ROLE_UPDATE LogEntity_Action = 2
	// ACTION_MEMBER_ACTIVATE_UPDATE is the type for activating members.
	LogEntity_ACTION_MEMBER_ACTIVATE LogEntity_Action = 3
	// ACTION_MEMBER_DEACTIVE is the type for deactiving members.
	LogEntity_ACTION_MEMBER_DEACTIVE LogEntity_Action = 4
	// Issue related activity types.
	// Enum value 21 - 40
	//
	// ACTION_ISSUE_CREATE is the type for creating a new issue.
	LogEntity_ACTION_ISSUE_CREATE LogEntity_Action = 21
	// ACTION_ISSUE_COMMENT_CREATE is the type for creating a new comment on an issue.
	LogEntity_ACTION_ISSUE_COMMENT_CREATE LogEntity_Action = 22
	// ACTION_ISSUE_FIELD_UPDATE is the type for updating an issue's field.
	LogEntity_ACTION_ISSUE_FIELD_UPDATE LogEntity_Action = 23
	// ACTION_ISSUE_STATUS_UPDATE is the type for updating an issue's status.
	LogEntity_ACTION_ISSUE_STATUS_UPDATE LogEntity_Action = 24
	// ACTION_ISSUE_APPROVAL_NOTIFY is the type for notifying issue approval.
	LogEntity_ACTION_ISSUE_APPROVAL_NOTIFY LogEntity_Action = 25
	// ACTION_PIPELINE_STAGE_STATUS_UPDATE represents the pipeline stage status change, including BEGIN, END for now.
	LogEntity_ACTION_PIPELINE_STAGE_STATUS_UPDATE LogEntity_Action = 31
	// ACTION_PIPELINE_TASK_STATUS_UPDATE represents the pipeline task status change, including PENDING, PENDING_APPROVAL, RUNNING, SUCCESS, FAILURE, CANCELED for now.
	LogEntity_ACTION_PIPELINE_TASK_STATUS_UPDATE LogEntity_Action = 32
	// ACTION_PIPELINE_TASK_FILE_COMMIT represents the VCS trigger to commit a file to update the task statement.
	LogEntity_ACTION_PIPELINE_TASK_FILE_COMMIT LogEntity_Action = 33
	// ACTION_PIPELINE_TASK_STATEMENT_UPDATE represents the manual update of the task statement.
	LogEntity_ACTION_PIPELINE_TASK_STATEMENT_UPDATE LogEntity_Action = 34
	// ACTION_PIPELINE_TASK_EARLIEST_ALLOWED_TIME_UPDATE represents the manual update of the task earliest allowed time.
	LogEntity_ACTION_PIPELINE_TASK_EARLIEST_ALLOWED_TIME_UPDATE LogEntity_Action = 35
	// Project related activity types.
	// Enum value 41 - 60
	//
	// ACTION_PROJECT_REPOSITORY_PUSH represents Bytebase receiving a push event from the project repository.
	LogEntity_ACTION_PROJECT_REPOSITORY_PUSH LogEntity_Action = 41
	// ACTION_PROJECT_MEMBER_CREATE represents adding a member to the project.
	LogEntity_ACTION_PROJECT_MEMBER_CREATE LogEntity_Action = 42
	// ACTION_PROJECT_MEMBER_DELETE represents removing a member from the project.
	LogEntity_ACTION_PROJECT_MEMBER_DELETE LogEntity_Action = 43
	// ACTION_PROJECT_DATABASE_RECOVERY_PITR_DONE is the type for database PITR recovery done.
	LogEntity_ACTION_PROJECT_DATABASE_RECOVERY_PITR_DONE LogEntity_Action = 44
	// ACTION_PROJECT_DATABASE_TRANSFER represents transfering the database from one project to another.
	LogEntity_ACTION_PROJECT_DATABASE_TRANSFER LogEntity_Action = 45
	// Database related activity types.
	// Enum value 61 - 80
	//
	// ACTION_DATABASE_SQL_EDITOR_QUERY is the type for SQL editor query.
	LogEntity_ACTION_DATABASE_SQL_EDITOR_QUERY LogEntity_Action = 61
	// ACTION_DATABASE_SQL_EXPORT is the type for exporting SQL.
	LogEntity_ACTION_DATABASE_SQL_EXPORT LogEntity_Action = 62
)

// Enum value maps for LogEntity_Action.
var (
	LogEntity_Action_name = map[int32]string{
		0:  "ACTION_UNSPECIFIED",
		1:  "ACTION_MEMBER_CREATE",
		2:  "ACTION_MEMBER_ROLE_UPDATE",
		3:  "ACTION_MEMBER_ACTIVATE",
		4:  "ACTION_MEMBER_DEACTIVE",
		21: "ACTION_ISSUE_CREATE",
		22: "ACTION_ISSUE_COMMENT_CREATE",
		23: "ACTION_ISSUE_FIELD_UPDATE",
		24: "ACTION_ISSUE_STATUS_UPDATE",
		25: "ACTION_ISSUE_APPROVAL_NOTIFY",
		31: "ACTION_PIPELINE_STAGE_STATUS_UPDATE",
		32: "ACTION_PIPELINE_TASK_STATUS_UPDATE",
		33: "ACTION_PIPELINE_TASK_FILE_COMMIT",
		34: "ACTION_PIPELINE_TASK_STATEMENT_UPDATE",
		35: "ACTION_PIPELINE_TASK_EARLIEST_ALLOWED_TIME_UPDATE",
		41: "ACTION_PROJECT_REPOSITORY_PUSH",
		42: "ACTION_PROJECT_MEMBER_CREATE",
		43: "ACTION_PROJECT_MEMBER_DELETE",
		44: "ACTION_PROJECT_DATABASE_RECOVERY_PITR_DONE",
		45: "ACTION_PROJECT_DATABASE_TRANSFER",
		61: "ACTION_DATABASE_SQL_EDITOR_QUERY",
		62: "ACTION_DATABASE_SQL_EXPORT",
	}
	LogEntity_Action_value = map[string]int32{
		"ACTION_UNSPECIFIED":                                0,
		"ACTION_MEMBER_CREATE":                              1,
		"ACTION_MEMBER_ROLE_UPDATE":                         2,
		"ACTION_MEMBER_ACTIVATE":                            3,
		"ACTION_MEMBER_DEACTIVE":                            4,
		"ACTION_ISSUE_CREATE":                               21,
		"ACTION_ISSUE_COMMENT_CREATE":                       22,
		"ACTION_ISSUE_FIELD_UPDATE":                         23,
		"ACTION_ISSUE_STATUS_UPDATE":                        24,
		"ACTION_ISSUE_APPROVAL_NOTIFY":                      25,
		"ACTION_PIPELINE_STAGE_STATUS_UPDATE":               31,
		"ACTION_PIPELINE_TASK_STATUS_UPDATE":                32,
		"ACTION_PIPELINE_TASK_FILE_COMMIT":                  33,
		"ACTION_PIPELINE_TASK_STATEMENT_UPDATE":             34,
		"ACTION_PIPELINE_TASK_EARLIEST_ALLOWED_TIME_UPDATE": 35,
		"ACTION_PROJECT_REPOSITORY_PUSH":                    41,
		"ACTION_PROJECT_MEMBER_CREATE":                      42,
		"ACTION_PROJECT_MEMBER_DELETE":                      43,
		"ACTION_PROJECT_DATABASE_RECOVERY_PITR_DONE":        44,
		"ACTION_PROJECT_DATABASE_TRANSFER":                  45,
		"ACTION_DATABASE_SQL_EDITOR_QUERY":                  61,
		"ACTION_DATABASE_SQL_EXPORT":                        62,
	}
)

func (x LogEntity_Action) Enum() *LogEntity_Action {
	p := new(LogEntity_Action)
	*p = x
	return p
}

func (x LogEntity_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogEntity_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_logging_service_proto_enumTypes[0].Descriptor()
}

func (LogEntity_Action) Type() protoreflect.EnumType {
	return &file_v1_logging_service_proto_enumTypes[0]
}

func (x LogEntity_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogEntity_Action.Descriptor instead.
func (LogEntity_Action) EnumDescriptor() ([]byte, []int) {
	return file_v1_logging_service_proto_rawDescGZIP(), []int{3, 0}
}

type LogEntity_Level int32

const (
	LogEntity_LEVEL_UNSPECIFIED LogEntity_Level = 0
	// LEVEL_INFO is the type for information.
	LogEntity_LEVEL_INFO LogEntity_Level = 1
	// LEVEL_WARNING is the type for warning.
	LogEntity_LEVEL_WARNING LogEntity_Level = 2
	// LEVEL_ERROR is the type for error.
	LogEntity_LEVEL_ERROR LogEntity_Level = 3
)

// Enum value maps for LogEntity_Level.
var (
	LogEntity_Level_name = map[int32]string{
		0: "LEVEL_UNSPECIFIED",
		1: "LEVEL_INFO",
		2: "LEVEL_WARNING",
		3: "LEVEL_ERROR",
	}
	LogEntity_Level_value = map[string]int32{
		"LEVEL_UNSPECIFIED": 0,
		"LEVEL_INFO":        1,
		"LEVEL_WARNING":     2,
		"LEVEL_ERROR":       3,
	}
)

func (x LogEntity_Level) Enum() *LogEntity_Level {
	p := new(LogEntity_Level)
	*p = x
	return p
}

func (x LogEntity_Level) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogEntity_Level) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_logging_service_proto_enumTypes[1].Descriptor()
}

func (LogEntity_Level) Type() protoreflect.EnumType {
	return &file_v1_logging_service_proto_enumTypes[1]
}

func (x LogEntity_Level) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogEntity_Level.Descriptor instead.
func (LogEntity_Level) EnumDescriptor() ([]byte, []int) {
	return file_v1_logging_service_proto_rawDescGZIP(), []int{3, 1}
}

type ListLogsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// filter is the filter to apply on the list logs request,
	// follow the [ebnf](https://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_form) syntax.
	// The field only support in filter:
	// - creator, example:
	//   - creator = "users/{email}"
	//
	// - resource, example:
	//   - resource = "projects/{project resource id}"
	//
	// - level, example:
	//   - level = "INFO"
	//   - level = "ERROR | WARN"
	//
	// - action, example:
	//   - action = "ACTION_MEMBER_CREATE" | "ACTION_ISSUE_CREATE"
	//
	// - create_time, example:
	//   - create_time <= "2022-01-01T12:00:00.000Z"
	//   - create_time >= "2022-01-01T12:00:00.000Z"
	//
	// For example:
	// List the logs of type 'ACTION_ISSUE_COMMENT_CREATE' in issue/123: 'action="ACTION_ISSUE_COMMENT_CREATE", resource="issue/123"'
	Filter string `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
	// The order by of the log.
	// Only support order by create_time.
	// For example:
	//   - order_by = "create_time asc"
	//   - order_by = "create_time desc"
	OrderBy string `protobuf:"bytes,2,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	// Not used. The maximum number of logs to return.
	// The service may return fewer than this value.
	// If unspecified, at most 100 log entries will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Not used. A page token, received from a previous `ListLogs` call.
	// Provide this to retrieve the subsequent page.
	PageToken string `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListLogsRequest) Reset() {
	*x = ListLogsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_logging_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLogsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLogsRequest) ProtoMessage() {}

func (x *ListLogsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_logging_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLogsRequest.ProtoReflect.Descriptor instead.
func (*ListLogsRequest) Descriptor() ([]byte, []int) {
	return file_v1_logging_service_proto_rawDescGZIP(), []int{0}
}

func (x *ListLogsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListLogsRequest) GetOrderBy() string {
	if x != nil {
		return x.OrderBy
	}
	return ""
}

func (x *ListLogsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListLogsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListLogsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of log entities.
	LogEntities []*LogEntity `protobuf:"bytes,1,rep,name=log_entities,json=logEntities,proto3" json:"log_entities,omitempty"`
	// A token to retrieve next page of log entities.
	// Pass this value in the page_token field in the subsequent call to `ListLogs` method
	// to retrieve the next page of log entities.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListLogsResponse) Reset() {
	*x = ListLogsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_logging_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLogsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLogsResponse) ProtoMessage() {}

func (x *ListLogsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_logging_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLogsResponse.ProtoReflect.Descriptor instead.
func (*ListLogsResponse) Descriptor() ([]byte, []int) {
	return file_v1_logging_service_proto_rawDescGZIP(), []int{1}
}

func (x *ListLogsResponse) GetLogEntities() []*LogEntity {
	if x != nil {
		return x.LogEntities
	}
	return nil
}

func (x *ListLogsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type GetLogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the log to retrieve.
	// Format: logs/{uid}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetLogRequest) Reset() {
	*x = GetLogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_logging_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLogRequest) ProtoMessage() {}

func (x *GetLogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_logging_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLogRequest.ProtoReflect.Descriptor instead.
func (*GetLogRequest) Descriptor() ([]byte, []int) {
	return file_v1_logging_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetLogRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type LogEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the log.
	// Format: logs/{uid}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The creator of the log entity.
	// Format: users/{email}
	Creator    string                 `protobuf:"bytes,2,opt,name=creator,proto3" json:"creator,omitempty"`
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Action     LogEntity_Action       `protobuf:"varint,5,opt,name=action,proto3,enum=bytebase.v1.LogEntity_Action" json:"action,omitempty"`
	Level      LogEntity_Level        `protobuf:"varint,6,opt,name=level,proto3,enum=bytebase.v1.LogEntity_Level" json:"level,omitempty"`
	// The name of the resource associated with this log entity. For example, the resource user associated with log entity type of "ACTION_MEMBER_CREATE".
	// Format:
	// For ACTION_MEMBER_*: users/{email}
	// For ACTION_ISSUE_*: issues/{issue uid}
	// For ACTION_PIPELINE_*: pipelines/{pipeline uid}
	// For ACTION_PROJECT_*: projects/{project resource id}
	// For ACTION_DATABASE_*: instances/{instance resource id}
	Resource string `protobuf:"bytes,7,opt,name=resource,proto3" json:"resource,omitempty"`
	// The payload of the log entity.
	// TODO: use oneof
	Payload string `protobuf:"bytes,8,opt,name=payload,proto3" json:"payload,omitempty"`
	Comment string `protobuf:"bytes,9,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *LogEntity) Reset() {
	*x = LogEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_logging_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogEntity) ProtoMessage() {}

func (x *LogEntity) ProtoReflect() protoreflect.Message {
	mi := &file_v1_logging_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogEntity.ProtoReflect.Descriptor instead.
func (*LogEntity) Descriptor() ([]byte, []int) {
	return file_v1_logging_service_proto_rawDescGZIP(), []int{3}
}

func (x *LogEntity) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LogEntity) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *LogEntity) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *LogEntity) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *LogEntity) GetAction() LogEntity_Action {
	if x != nil {
		return x.Action
	}
	return LogEntity_ACTION_UNSPECIFIED
}

func (x *LogEntity) GetLevel() LogEntity_Level {
	if x != nil {
		return x.Level
	}
	return LogEntity_LEVEL_UNSPECIFIED
}

func (x *LogEntity) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *LogEntity) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

func (x *LogEntity) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

var File_v1_logging_service_proto protoreflect.FileDescriptor

var file_v1_logging_service_proto_rawDesc = []byte{
	0x0a, 0x18, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x62, 0x79, 0x74, 0x65,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x80, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x62, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x7a, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x6c, 0x6f, 0x67, 0x5f, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0b, 0x6c, 0x6f, 0x67, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f,
	0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22,
	0x28, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xf6, 0x09, 0x0a, 0x09, 0x4c, 0x6f,
	0x67, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x40, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x37, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c,
	0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x22, 0x89, 0x06, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x12, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12,
	0x1d, 0x0a, 0x19, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52,
	0x5f, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x1a,
	0x0a, 0x16, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x56, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x41, 0x43,
	0x54, 0x49, 0x56, 0x45, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x49, 0x53, 0x53, 0x55, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x15, 0x12,
	0x1f, 0x0a, 0x1b, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x53, 0x53, 0x55, 0x45, 0x5f,
	0x43, 0x4f, 0x4d, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x16,
	0x12, 0x1d, 0x0a, 0x19, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x53, 0x53, 0x55, 0x45,
	0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x17, 0x12,
	0x1e, 0x0a, 0x1a, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x53, 0x53, 0x55, 0x45, 0x5f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x18, 0x12,
	0x20, 0x0a, 0x1c, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x53, 0x53, 0x55, 0x45, 0x5f,
	0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c, 0x5f, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x10,
	0x19, 0x12, 0x27, 0x0a, 0x23, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x49, 0x50, 0x45,
	0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x47, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x1f, 0x12, 0x26, 0x0a, 0x22, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x49, 0x50, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x54, 0x41,
	0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x10, 0x20, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x49, 0x50,
	0x45, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f,
	0x43, 0x4f, 0x4d, 0x4d, 0x49, 0x54, 0x10, 0x21, 0x12, 0x29, 0x0a, 0x25, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x50, 0x49, 0x50, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x54, 0x41, 0x53, 0x4b,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x10, 0x22, 0x12, 0x35, 0x0a, 0x31, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x49,
	0x50, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x45, 0x41, 0x52, 0x4c,
	0x49, 0x45, 0x53, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x45, 0x44, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x23, 0x12, 0x22, 0x0a, 0x1e, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x50,
	0x4f, 0x53, 0x49, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x50, 0x55, 0x53, 0x48, 0x10, 0x29, 0x12, 0x20,
	0x0a, 0x1c, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54,
	0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x2a,
	0x12, 0x20, 0x0a, 0x1c, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45,
	0x43, 0x54, 0x5f, 0x4d, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45,
	0x10, 0x2b, 0x12, 0x2e, 0x0a, 0x2a, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f,
	0x4a, 0x45, 0x43, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x52, 0x45,
	0x43, 0x4f, 0x56, 0x45, 0x52, 0x59, 0x5f, 0x50, 0x49, 0x54, 0x52, 0x5f, 0x44, 0x4f, 0x4e, 0x45,
	0x10, 0x2c, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x4f,
	0x4a, 0x45, 0x43, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x54, 0x52,
	0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x10, 0x2d, 0x12, 0x24, 0x0a, 0x20, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x51, 0x4c, 0x5f,
	0x45, 0x44, 0x49, 0x54, 0x4f, 0x52, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x3d, 0x12, 0x1e,
	0x0a, 0x1a, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53,
	0x45, 0x5f, 0x53, 0x51, 0x4c, 0x5f, 0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x3e, 0x22, 0x52,
	0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x45, 0x56, 0x45, 0x4c,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e,
	0x0a, 0x0a, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x01, 0x12, 0x11,
	0x0a, 0x0d, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10,
	0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x03, 0x32, 0xd2, 0x01, 0x0a, 0x0e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x60, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67,
	0x73, 0x12, 0x1c, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x4c, 0x6f, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x67, 0x73,
	0x3a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x5e, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4c, 0x6f,
	0x67, 0x12, 0x1a, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x67, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x20, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d,
	0x6c, 0x6f, 0x67, 0x73, 0x2f, 0x2a, 0x7d, 0x42, 0x11, 0x5a, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x65, 0x64, 0x2d, 0x67, 0x6f, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_v1_logging_service_proto_rawDescOnce sync.Once
	file_v1_logging_service_proto_rawDescData = file_v1_logging_service_proto_rawDesc
)

func file_v1_logging_service_proto_rawDescGZIP() []byte {
	file_v1_logging_service_proto_rawDescOnce.Do(func() {
		file_v1_logging_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_logging_service_proto_rawDescData)
	})
	return file_v1_logging_service_proto_rawDescData
}

var file_v1_logging_service_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_v1_logging_service_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_v1_logging_service_proto_goTypes = []interface{}{
	(LogEntity_Action)(0),         // 0: bytebase.v1.LogEntity.Action
	(LogEntity_Level)(0),          // 1: bytebase.v1.LogEntity.Level
	(*ListLogsRequest)(nil),       // 2: bytebase.v1.ListLogsRequest
	(*ListLogsResponse)(nil),      // 3: bytebase.v1.ListLogsResponse
	(*GetLogRequest)(nil),         // 4: bytebase.v1.GetLogRequest
	(*LogEntity)(nil),             // 5: bytebase.v1.LogEntity
	(*timestamppb.Timestamp)(nil), // 6: google.protobuf.Timestamp
}
var file_v1_logging_service_proto_depIdxs = []int32{
	5, // 0: bytebase.v1.ListLogsResponse.log_entities:type_name -> bytebase.v1.LogEntity
	6, // 1: bytebase.v1.LogEntity.create_time:type_name -> google.protobuf.Timestamp
	6, // 2: bytebase.v1.LogEntity.update_time:type_name -> google.protobuf.Timestamp
	0, // 3: bytebase.v1.LogEntity.action:type_name -> bytebase.v1.LogEntity.Action
	1, // 4: bytebase.v1.LogEntity.level:type_name -> bytebase.v1.LogEntity.Level
	2, // 5: bytebase.v1.LoggingService.ListLogs:input_type -> bytebase.v1.ListLogsRequest
	4, // 6: bytebase.v1.LoggingService.GetLog:input_type -> bytebase.v1.GetLogRequest
	3, // 7: bytebase.v1.LoggingService.ListLogs:output_type -> bytebase.v1.ListLogsResponse
	5, // 8: bytebase.v1.LoggingService.GetLog:output_type -> bytebase.v1.LogEntity
	7, // [7:9] is the sub-list for method output_type
	5, // [5:7] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_v1_logging_service_proto_init() }
func file_v1_logging_service_proto_init() {
	if File_v1_logging_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_v1_logging_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLogsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_logging_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLogsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_logging_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_logging_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_logging_service_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v1_logging_service_proto_goTypes,
		DependencyIndexes: file_v1_logging_service_proto_depIdxs,
		EnumInfos:         file_v1_logging_service_proto_enumTypes,
		MessageInfos:      file_v1_logging_service_proto_msgTypes,
	}.Build()
	File_v1_logging_service_proto = out.File
	file_v1_logging_service_proto_rawDesc = nil
	file_v1_logging_service_proto_goTypes = nil
	file_v1_logging_service_proto_depIdxs = nil
}
