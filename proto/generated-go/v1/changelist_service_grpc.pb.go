// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: v1/changelist_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ChangelistService_CreateChangelist_FullMethodName = "/bytebase.v1.ChangelistService/CreateChangelist"
	ChangelistService_GetChangelist_FullMethodName    = "/bytebase.v1.ChangelistService/GetChangelist"
	ChangelistService_ListChangelists_FullMethodName  = "/bytebase.v1.ChangelistService/ListChangelists"
	ChangelistService_UpdateChangelist_FullMethodName = "/bytebase.v1.ChangelistService/UpdateChangelist"
	ChangelistService_DeleteChangelist_FullMethodName = "/bytebase.v1.ChangelistService/DeleteChangelist"
)

// ChangelistServiceClient is the client API for ChangelistService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChangelistServiceClient interface {
	CreateChangelist(ctx context.Context, in *CreateChangelistRequest, opts ...grpc.CallOption) (*Changelist, error)
	GetChangelist(ctx context.Context, in *GetChangelistRequest, opts ...grpc.CallOption) (*Changelist, error)
	ListChangelists(ctx context.Context, in *ListChangelistsRequest, opts ...grpc.CallOption) (*ListChangelistsResponse, error)
	UpdateChangelist(ctx context.Context, in *UpdateChangelistRequest, opts ...grpc.CallOption) (*Changelist, error)
	DeleteChangelist(ctx context.Context, in *DeleteChangelistRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type changelistServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChangelistServiceClient(cc grpc.ClientConnInterface) ChangelistServiceClient {
	return &changelistServiceClient{cc}
}

func (c *changelistServiceClient) CreateChangelist(ctx context.Context, in *CreateChangelistRequest, opts ...grpc.CallOption) (*Changelist, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Changelist)
	err := c.cc.Invoke(ctx, ChangelistService_CreateChangelist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *changelistServiceClient) GetChangelist(ctx context.Context, in *GetChangelistRequest, opts ...grpc.CallOption) (*Changelist, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Changelist)
	err := c.cc.Invoke(ctx, ChangelistService_GetChangelist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *changelistServiceClient) ListChangelists(ctx context.Context, in *ListChangelistsRequest, opts ...grpc.CallOption) (*ListChangelistsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListChangelistsResponse)
	err := c.cc.Invoke(ctx, ChangelistService_ListChangelists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *changelistServiceClient) UpdateChangelist(ctx context.Context, in *UpdateChangelistRequest, opts ...grpc.CallOption) (*Changelist, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Changelist)
	err := c.cc.Invoke(ctx, ChangelistService_UpdateChangelist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *changelistServiceClient) DeleteChangelist(ctx context.Context, in *DeleteChangelistRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ChangelistService_DeleteChangelist_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChangelistServiceServer is the server API for ChangelistService service.
// All implementations must embed UnimplementedChangelistServiceServer
// for forward compatibility
type ChangelistServiceServer interface {
	CreateChangelist(context.Context, *CreateChangelistRequest) (*Changelist, error)
	GetChangelist(context.Context, *GetChangelistRequest) (*Changelist, error)
	ListChangelists(context.Context, *ListChangelistsRequest) (*ListChangelistsResponse, error)
	UpdateChangelist(context.Context, *UpdateChangelistRequest) (*Changelist, error)
	DeleteChangelist(context.Context, *DeleteChangelistRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedChangelistServiceServer()
}

// UnimplementedChangelistServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChangelistServiceServer struct {
}

func (UnimplementedChangelistServiceServer) CreateChangelist(context.Context, *CreateChangelistRequest) (*Changelist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChangelist not implemented")
}
func (UnimplementedChangelistServiceServer) GetChangelist(context.Context, *GetChangelistRequest) (*Changelist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChangelist not implemented")
}
func (UnimplementedChangelistServiceServer) ListChangelists(context.Context, *ListChangelistsRequest) (*ListChangelistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChangelists not implemented")
}
func (UnimplementedChangelistServiceServer) UpdateChangelist(context.Context, *UpdateChangelistRequest) (*Changelist, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChangelist not implemented")
}
func (UnimplementedChangelistServiceServer) DeleteChangelist(context.Context, *DeleteChangelistRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChangelist not implemented")
}
func (UnimplementedChangelistServiceServer) mustEmbedUnimplementedChangelistServiceServer() {}

// UnsafeChangelistServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChangelistServiceServer will
// result in compilation errors.
type UnsafeChangelistServiceServer interface {
	mustEmbedUnimplementedChangelistServiceServer()
}

func RegisterChangelistServiceServer(s grpc.ServiceRegistrar, srv ChangelistServiceServer) {
	s.RegisterService(&ChangelistService_ServiceDesc, srv)
}

func _ChangelistService_CreateChangelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChangelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChangelistServiceServer).CreateChangelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChangelistService_CreateChangelist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChangelistServiceServer).CreateChangelist(ctx, req.(*CreateChangelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChangelistService_GetChangelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChangelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChangelistServiceServer).GetChangelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChangelistService_GetChangelist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChangelistServiceServer).GetChangelist(ctx, req.(*GetChangelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChangelistService_ListChangelists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChangelistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChangelistServiceServer).ListChangelists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChangelistService_ListChangelists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChangelistServiceServer).ListChangelists(ctx, req.(*ListChangelistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChangelistService_UpdateChangelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChangelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChangelistServiceServer).UpdateChangelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChangelistService_UpdateChangelist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChangelistServiceServer).UpdateChangelist(ctx, req.(*UpdateChangelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChangelistService_DeleteChangelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChangelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChangelistServiceServer).DeleteChangelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChangelistService_DeleteChangelist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChangelistServiceServer).DeleteChangelist(ctx, req.(*DeleteChangelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChangelistService_ServiceDesc is the grpc.ServiceDesc for ChangelistService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChangelistService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bytebase.v1.ChangelistService",
	HandlerType: (*ChangelistServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChangelist",
			Handler:    _ChangelistService_CreateChangelist_Handler,
		},
		{
			MethodName: "GetChangelist",
			Handler:    _ChangelistService_GetChangelist_Handler,
		},
		{
			MethodName: "ListChangelists",
			Handler:    _ChangelistService_ListChangelists_Handler,
		},
		{
			MethodName: "UpdateChangelist",
			Handler:    _ChangelistService_UpdateChangelist_Handler,
		},
		{
			MethodName: "DeleteChangelist",
			Handler:    _ChangelistService_DeleteChangelist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/changelist_service.proto",
}
