// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: v1/database_catalog_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DatabaseCatalogService_GetDatabaseCatalog_FullMethodName    = "/bytebase.v1.DatabaseCatalogService/GetDatabaseCatalog"
	DatabaseCatalogService_UpdateDatabaseCatalog_FullMethodName = "/bytebase.v1.DatabaseCatalogService/UpdateDatabaseCatalog"
)

// DatabaseCatalogServiceClient is the client API for DatabaseCatalogService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DatabaseCatalogServiceClient interface {
	GetDatabaseCatalog(ctx context.Context, in *GetDatabaseCatalogRequest, opts ...grpc.CallOption) (*DatabaseCatalog, error)
	UpdateDatabaseCatalog(ctx context.Context, in *UpdateDatabaseCatalogRequest, opts ...grpc.CallOption) (*DatabaseCatalog, error)
}

type databaseCatalogServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDatabaseCatalogServiceClient(cc grpc.ClientConnInterface) DatabaseCatalogServiceClient {
	return &databaseCatalogServiceClient{cc}
}

func (c *databaseCatalogServiceClient) GetDatabaseCatalog(ctx context.Context, in *GetDatabaseCatalogRequest, opts ...grpc.CallOption) (*DatabaseCatalog, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DatabaseCatalog)
	err := c.cc.Invoke(ctx, DatabaseCatalogService_GetDatabaseCatalog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *databaseCatalogServiceClient) UpdateDatabaseCatalog(ctx context.Context, in *UpdateDatabaseCatalogRequest, opts ...grpc.CallOption) (*DatabaseCatalog, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DatabaseCatalog)
	err := c.cc.Invoke(ctx, DatabaseCatalogService_UpdateDatabaseCatalog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatabaseCatalogServiceServer is the server API for DatabaseCatalogService service.
// All implementations must embed UnimplementedDatabaseCatalogServiceServer
// for forward compatibility.
type DatabaseCatalogServiceServer interface {
	GetDatabaseCatalog(context.Context, *GetDatabaseCatalogRequest) (*DatabaseCatalog, error)
	UpdateDatabaseCatalog(context.Context, *UpdateDatabaseCatalogRequest) (*DatabaseCatalog, error)
	mustEmbedUnimplementedDatabaseCatalogServiceServer()
}

// UnimplementedDatabaseCatalogServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDatabaseCatalogServiceServer struct{}

func (UnimplementedDatabaseCatalogServiceServer) GetDatabaseCatalog(context.Context, *GetDatabaseCatalogRequest) (*DatabaseCatalog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDatabaseCatalog not implemented")
}
func (UnimplementedDatabaseCatalogServiceServer) UpdateDatabaseCatalog(context.Context, *UpdateDatabaseCatalogRequest) (*DatabaseCatalog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDatabaseCatalog not implemented")
}
func (UnimplementedDatabaseCatalogServiceServer) mustEmbedUnimplementedDatabaseCatalogServiceServer() {
}
func (UnimplementedDatabaseCatalogServiceServer) testEmbeddedByValue() {}

// UnsafeDatabaseCatalogServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatabaseCatalogServiceServer will
// result in compilation errors.
type UnsafeDatabaseCatalogServiceServer interface {
	mustEmbedUnimplementedDatabaseCatalogServiceServer()
}

func RegisterDatabaseCatalogServiceServer(s grpc.ServiceRegistrar, srv DatabaseCatalogServiceServer) {
	// If the following call pancis, it indicates UnimplementedDatabaseCatalogServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DatabaseCatalogService_ServiceDesc, srv)
}

func _DatabaseCatalogService_GetDatabaseCatalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatabaseCatalogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseCatalogServiceServer).GetDatabaseCatalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseCatalogService_GetDatabaseCatalog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseCatalogServiceServer).GetDatabaseCatalog(ctx, req.(*GetDatabaseCatalogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatabaseCatalogService_UpdateDatabaseCatalog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDatabaseCatalogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatabaseCatalogServiceServer).UpdateDatabaseCatalog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DatabaseCatalogService_UpdateDatabaseCatalog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatabaseCatalogServiceServer).UpdateDatabaseCatalog(ctx, req.(*UpdateDatabaseCatalogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DatabaseCatalogService_ServiceDesc is the grpc.ServiceDesc for DatabaseCatalogService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DatabaseCatalogService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bytebase.v1.DatabaseCatalogService",
	HandlerType: (*DatabaseCatalogServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDatabaseCatalog",
			Handler:    _DatabaseCatalogService_GetDatabaseCatalog_Handler,
		},
		{
			MethodName: "UpdateDatabaseCatalog",
			Handler:    _DatabaseCatalogService_UpdateDatabaseCatalog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/database_catalog_service.proto",
}
