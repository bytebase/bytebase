// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: v1/externalvs_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ExternalVersionControlService_GetExternalVersionControl_FullMethodName            = "/bytebase.v1.ExternalVersionControlService/GetExternalVersionControl"
	ExternalVersionControlService_ListExternalVersionControls_FullMethodName          = "/bytebase.v1.ExternalVersionControlService/ListExternalVersionControls"
	ExternalVersionControlService_CreateExternalVersionControl_FullMethodName         = "/bytebase.v1.ExternalVersionControlService/CreateExternalVersionControl"
	ExternalVersionControlService_UpdateExternalVersionControl_FullMethodName         = "/bytebase.v1.ExternalVersionControlService/UpdateExternalVersionControl"
	ExternalVersionControlService_DeleteExternalVersionControl_FullMethodName         = "/bytebase.v1.ExternalVersionControlService/DeleteExternalVersionControl"
	ExternalVersionControlService_SearchExternalVersionControlProjects_FullMethodName = "/bytebase.v1.ExternalVersionControlService/SearchExternalVersionControlProjects"
	ExternalVersionControlService_ListProjectGitOpsInfo_FullMethodName                = "/bytebase.v1.ExternalVersionControlService/ListProjectGitOpsInfo"
)

// ExternalVersionControlServiceClient is the client API for ExternalVersionControlService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExternalVersionControlServiceClient interface {
	GetExternalVersionControl(ctx context.Context, in *GetExternalVersionControlRequest, opts ...grpc.CallOption) (*ExternalVersionControl, error)
	ListExternalVersionControls(ctx context.Context, in *ListExternalVersionControlsRequest, opts ...grpc.CallOption) (*ListExternalVersionControlsResponse, error)
	CreateExternalVersionControl(ctx context.Context, in *CreateExternalVersionControlRequest, opts ...grpc.CallOption) (*ExternalVersionControl, error)
	UpdateExternalVersionControl(ctx context.Context, in *UpdateExternalVersionControlRequest, opts ...grpc.CallOption) (*ExternalVersionControl, error)
	DeleteExternalVersionControl(ctx context.Context, in *DeleteExternalVersionControlRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SearchExternalVersionControlProjects(ctx context.Context, in *SearchExternalVersionControlProjectsRequest, opts ...grpc.CallOption) (*SearchExternalVersionControlProjectsResponse, error)
	ListProjectGitOpsInfo(ctx context.Context, in *ListProjectGitOpsInfoRequest, opts ...grpc.CallOption) (*ListProjectGitOpsInfoResponse, error)
}

type externalVersionControlServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExternalVersionControlServiceClient(cc grpc.ClientConnInterface) ExternalVersionControlServiceClient {
	return &externalVersionControlServiceClient{cc}
}

func (c *externalVersionControlServiceClient) GetExternalVersionControl(ctx context.Context, in *GetExternalVersionControlRequest, opts ...grpc.CallOption) (*ExternalVersionControl, error) {
	out := new(ExternalVersionControl)
	err := c.cc.Invoke(ctx, ExternalVersionControlService_GetExternalVersionControl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalVersionControlServiceClient) ListExternalVersionControls(ctx context.Context, in *ListExternalVersionControlsRequest, opts ...grpc.CallOption) (*ListExternalVersionControlsResponse, error) {
	out := new(ListExternalVersionControlsResponse)
	err := c.cc.Invoke(ctx, ExternalVersionControlService_ListExternalVersionControls_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalVersionControlServiceClient) CreateExternalVersionControl(ctx context.Context, in *CreateExternalVersionControlRequest, opts ...grpc.CallOption) (*ExternalVersionControl, error) {
	out := new(ExternalVersionControl)
	err := c.cc.Invoke(ctx, ExternalVersionControlService_CreateExternalVersionControl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalVersionControlServiceClient) UpdateExternalVersionControl(ctx context.Context, in *UpdateExternalVersionControlRequest, opts ...grpc.CallOption) (*ExternalVersionControl, error) {
	out := new(ExternalVersionControl)
	err := c.cc.Invoke(ctx, ExternalVersionControlService_UpdateExternalVersionControl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalVersionControlServiceClient) DeleteExternalVersionControl(ctx context.Context, in *DeleteExternalVersionControlRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ExternalVersionControlService_DeleteExternalVersionControl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalVersionControlServiceClient) SearchExternalVersionControlProjects(ctx context.Context, in *SearchExternalVersionControlProjectsRequest, opts ...grpc.CallOption) (*SearchExternalVersionControlProjectsResponse, error) {
	out := new(SearchExternalVersionControlProjectsResponse)
	err := c.cc.Invoke(ctx, ExternalVersionControlService_SearchExternalVersionControlProjects_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalVersionControlServiceClient) ListProjectGitOpsInfo(ctx context.Context, in *ListProjectGitOpsInfoRequest, opts ...grpc.CallOption) (*ListProjectGitOpsInfoResponse, error) {
	out := new(ListProjectGitOpsInfoResponse)
	err := c.cc.Invoke(ctx, ExternalVersionControlService_ListProjectGitOpsInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExternalVersionControlServiceServer is the server API for ExternalVersionControlService service.
// All implementations must embed UnimplementedExternalVersionControlServiceServer
// for forward compatibility
type ExternalVersionControlServiceServer interface {
	GetExternalVersionControl(context.Context, *GetExternalVersionControlRequest) (*ExternalVersionControl, error)
	ListExternalVersionControls(context.Context, *ListExternalVersionControlsRequest) (*ListExternalVersionControlsResponse, error)
	CreateExternalVersionControl(context.Context, *CreateExternalVersionControlRequest) (*ExternalVersionControl, error)
	UpdateExternalVersionControl(context.Context, *UpdateExternalVersionControlRequest) (*ExternalVersionControl, error)
	DeleteExternalVersionControl(context.Context, *DeleteExternalVersionControlRequest) (*emptypb.Empty, error)
	SearchExternalVersionControlProjects(context.Context, *SearchExternalVersionControlProjectsRequest) (*SearchExternalVersionControlProjectsResponse, error)
	ListProjectGitOpsInfo(context.Context, *ListProjectGitOpsInfoRequest) (*ListProjectGitOpsInfoResponse, error)
	mustEmbedUnimplementedExternalVersionControlServiceServer()
}

// UnimplementedExternalVersionControlServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExternalVersionControlServiceServer struct {
}

func (UnimplementedExternalVersionControlServiceServer) GetExternalVersionControl(context.Context, *GetExternalVersionControlRequest) (*ExternalVersionControl, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExternalVersionControl not implemented")
}
func (UnimplementedExternalVersionControlServiceServer) ListExternalVersionControls(context.Context, *ListExternalVersionControlsRequest) (*ListExternalVersionControlsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExternalVersionControls not implemented")
}
func (UnimplementedExternalVersionControlServiceServer) CreateExternalVersionControl(context.Context, *CreateExternalVersionControlRequest) (*ExternalVersionControl, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExternalVersionControl not implemented")
}
func (UnimplementedExternalVersionControlServiceServer) UpdateExternalVersionControl(context.Context, *UpdateExternalVersionControlRequest) (*ExternalVersionControl, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExternalVersionControl not implemented")
}
func (UnimplementedExternalVersionControlServiceServer) DeleteExternalVersionControl(context.Context, *DeleteExternalVersionControlRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExternalVersionControl not implemented")
}
func (UnimplementedExternalVersionControlServiceServer) SearchExternalVersionControlProjects(context.Context, *SearchExternalVersionControlProjectsRequest) (*SearchExternalVersionControlProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchExternalVersionControlProjects not implemented")
}
func (UnimplementedExternalVersionControlServiceServer) ListProjectGitOpsInfo(context.Context, *ListProjectGitOpsInfoRequest) (*ListProjectGitOpsInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjectGitOpsInfo not implemented")
}
func (UnimplementedExternalVersionControlServiceServer) mustEmbedUnimplementedExternalVersionControlServiceServer() {
}

// UnsafeExternalVersionControlServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExternalVersionControlServiceServer will
// result in compilation errors.
type UnsafeExternalVersionControlServiceServer interface {
	mustEmbedUnimplementedExternalVersionControlServiceServer()
}

func RegisterExternalVersionControlServiceServer(s grpc.ServiceRegistrar, srv ExternalVersionControlServiceServer) {
	s.RegisterService(&ExternalVersionControlService_ServiceDesc, srv)
}

func _ExternalVersionControlService_GetExternalVersionControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExternalVersionControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalVersionControlServiceServer).GetExternalVersionControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalVersionControlService_GetExternalVersionControl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalVersionControlServiceServer).GetExternalVersionControl(ctx, req.(*GetExternalVersionControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalVersionControlService_ListExternalVersionControls_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListExternalVersionControlsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalVersionControlServiceServer).ListExternalVersionControls(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalVersionControlService_ListExternalVersionControls_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalVersionControlServiceServer).ListExternalVersionControls(ctx, req.(*ListExternalVersionControlsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalVersionControlService_CreateExternalVersionControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExternalVersionControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalVersionControlServiceServer).CreateExternalVersionControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalVersionControlService_CreateExternalVersionControl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalVersionControlServiceServer).CreateExternalVersionControl(ctx, req.(*CreateExternalVersionControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalVersionControlService_UpdateExternalVersionControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExternalVersionControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalVersionControlServiceServer).UpdateExternalVersionControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalVersionControlService_UpdateExternalVersionControl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalVersionControlServiceServer).UpdateExternalVersionControl(ctx, req.(*UpdateExternalVersionControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalVersionControlService_DeleteExternalVersionControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExternalVersionControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalVersionControlServiceServer).DeleteExternalVersionControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalVersionControlService_DeleteExternalVersionControl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalVersionControlServiceServer).DeleteExternalVersionControl(ctx, req.(*DeleteExternalVersionControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalVersionControlService_SearchExternalVersionControlProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchExternalVersionControlProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalVersionControlServiceServer).SearchExternalVersionControlProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalVersionControlService_SearchExternalVersionControlProjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalVersionControlServiceServer).SearchExternalVersionControlProjects(ctx, req.(*SearchExternalVersionControlProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalVersionControlService_ListProjectGitOpsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectGitOpsInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalVersionControlServiceServer).ListProjectGitOpsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExternalVersionControlService_ListProjectGitOpsInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalVersionControlServiceServer).ListProjectGitOpsInfo(ctx, req.(*ListProjectGitOpsInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExternalVersionControlService_ServiceDesc is the grpc.ServiceDesc for ExternalVersionControlService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExternalVersionControlService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bytebase.v1.ExternalVersionControlService",
	HandlerType: (*ExternalVersionControlServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetExternalVersionControl",
			Handler:    _ExternalVersionControlService_GetExternalVersionControl_Handler,
		},
		{
			MethodName: "ListExternalVersionControls",
			Handler:    _ExternalVersionControlService_ListExternalVersionControls_Handler,
		},
		{
			MethodName: "CreateExternalVersionControl",
			Handler:    _ExternalVersionControlService_CreateExternalVersionControl_Handler,
		},
		{
			MethodName: "UpdateExternalVersionControl",
			Handler:    _ExternalVersionControlService_UpdateExternalVersionControl_Handler,
		},
		{
			MethodName: "DeleteExternalVersionControl",
			Handler:    _ExternalVersionControlService_DeleteExternalVersionControl_Handler,
		},
		{
			MethodName: "SearchExternalVersionControlProjects",
			Handler:    _ExternalVersionControlService_SearchExternalVersionControlProjects_Handler,
		},
		{
			MethodName: "ListProjectGitOpsInfo",
			Handler:    _ExternalVersionControlService_ListProjectGitOpsInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/externalvs_service.proto",
}
