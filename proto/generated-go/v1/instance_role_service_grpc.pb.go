// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: v1/instance_role_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	InstanceRoleService_GetRole_FullMethodName      = "/bytebase.v1.InstanceRoleService/GetRole"
	InstanceRoleService_ListRoles_FullMethodName    = "/bytebase.v1.InstanceRoleService/ListRoles"
	InstanceRoleService_CreateRole_FullMethodName   = "/bytebase.v1.InstanceRoleService/CreateRole"
	InstanceRoleService_UpdateRole_FullMethodName   = "/bytebase.v1.InstanceRoleService/UpdateRole"
	InstanceRoleService_DeleteRole_FullMethodName   = "/bytebase.v1.InstanceRoleService/DeleteRole"
	InstanceRoleService_UndeleteRole_FullMethodName = "/bytebase.v1.InstanceRoleService/UndeleteRole"
)

// InstanceRoleServiceClient is the client API for InstanceRoleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InstanceRoleServiceClient interface {
	GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*InstanceRole, error)
	ListRoles(ctx context.Context, in *ListRolesRequest, opts ...grpc.CallOption) (*ListRolesResponse, error)
	CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*InstanceRole, error)
	UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*InstanceRole, error)
	DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UndeleteRole(ctx context.Context, in *UndeleteRoleRequest, opts ...grpc.CallOption) (*InstanceRole, error)
}

type instanceRoleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInstanceRoleServiceClient(cc grpc.ClientConnInterface) InstanceRoleServiceClient {
	return &instanceRoleServiceClient{cc}
}

func (c *instanceRoleServiceClient) GetRole(ctx context.Context, in *GetRoleRequest, opts ...grpc.CallOption) (*InstanceRole, error) {
	out := new(InstanceRole)
	err := c.cc.Invoke(ctx, InstanceRoleService_GetRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instanceRoleServiceClient) ListRoles(ctx context.Context, in *ListRolesRequest, opts ...grpc.CallOption) (*ListRolesResponse, error) {
	out := new(ListRolesResponse)
	err := c.cc.Invoke(ctx, InstanceRoleService_ListRoles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instanceRoleServiceClient) CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*InstanceRole, error) {
	out := new(InstanceRole)
	err := c.cc.Invoke(ctx, InstanceRoleService_CreateRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instanceRoleServiceClient) UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*InstanceRole, error) {
	out := new(InstanceRole)
	err := c.cc.Invoke(ctx, InstanceRoleService_UpdateRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instanceRoleServiceClient) DeleteRole(ctx context.Context, in *DeleteRoleRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, InstanceRoleService_DeleteRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instanceRoleServiceClient) UndeleteRole(ctx context.Context, in *UndeleteRoleRequest, opts ...grpc.CallOption) (*InstanceRole, error) {
	out := new(InstanceRole)
	err := c.cc.Invoke(ctx, InstanceRoleService_UndeleteRole_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InstanceRoleServiceServer is the server API for InstanceRoleService service.
// All implementations must embed UnimplementedInstanceRoleServiceServer
// for forward compatibility
type InstanceRoleServiceServer interface {
	GetRole(context.Context, *GetRoleRequest) (*InstanceRole, error)
	ListRoles(context.Context, *ListRolesRequest) (*ListRolesResponse, error)
	CreateRole(context.Context, *CreateRoleRequest) (*InstanceRole, error)
	UpdateRole(context.Context, *UpdateRoleRequest) (*InstanceRole, error)
	DeleteRole(context.Context, *DeleteRoleRequest) (*emptypb.Empty, error)
	UndeleteRole(context.Context, *UndeleteRoleRequest) (*InstanceRole, error)
	mustEmbedUnimplementedInstanceRoleServiceServer()
}

// UnimplementedInstanceRoleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInstanceRoleServiceServer struct {
}

func (UnimplementedInstanceRoleServiceServer) GetRole(context.Context, *GetRoleRequest) (*InstanceRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRole not implemented")
}
func (UnimplementedInstanceRoleServiceServer) ListRoles(context.Context, *ListRolesRequest) (*ListRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoles not implemented")
}
func (UnimplementedInstanceRoleServiceServer) CreateRole(context.Context, *CreateRoleRequest) (*InstanceRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedInstanceRoleServiceServer) UpdateRole(context.Context, *UpdateRoleRequest) (*InstanceRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedInstanceRoleServiceServer) DeleteRole(context.Context, *DeleteRoleRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedInstanceRoleServiceServer) UndeleteRole(context.Context, *UndeleteRoleRequest) (*InstanceRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UndeleteRole not implemented")
}
func (UnimplementedInstanceRoleServiceServer) mustEmbedUnimplementedInstanceRoleServiceServer() {}

// UnsafeInstanceRoleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InstanceRoleServiceServer will
// result in compilation errors.
type UnsafeInstanceRoleServiceServer interface {
	mustEmbedUnimplementedInstanceRoleServiceServer()
}

func RegisterInstanceRoleServiceServer(s grpc.ServiceRegistrar, srv InstanceRoleServiceServer) {
	s.RegisterService(&InstanceRoleService_ServiceDesc, srv)
}

func _InstanceRoleService_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceRoleServiceServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InstanceRoleService_GetRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceRoleServiceServer).GetRole(ctx, req.(*GetRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstanceRoleService_ListRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceRoleServiceServer).ListRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InstanceRoleService_ListRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceRoleServiceServer).ListRoles(ctx, req.(*ListRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstanceRoleService_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceRoleServiceServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InstanceRoleService_CreateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceRoleServiceServer).CreateRole(ctx, req.(*CreateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstanceRoleService_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceRoleServiceServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InstanceRoleService_UpdateRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceRoleServiceServer).UpdateRole(ctx, req.(*UpdateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstanceRoleService_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceRoleServiceServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InstanceRoleService_DeleteRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceRoleServiceServer).DeleteRole(ctx, req.(*DeleteRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstanceRoleService_UndeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UndeleteRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceRoleServiceServer).UndeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InstanceRoleService_UndeleteRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceRoleServiceServer).UndeleteRole(ctx, req.(*UndeleteRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InstanceRoleService_ServiceDesc is the grpc.ServiceDesc for InstanceRoleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InstanceRoleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bytebase.v1.InstanceRoleService",
	HandlerType: (*InstanceRoleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRole",
			Handler:    _InstanceRoleService_GetRole_Handler,
		},
		{
			MethodName: "ListRoles",
			Handler:    _InstanceRoleService_ListRoles_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _InstanceRoleService_CreateRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _InstanceRoleService_UpdateRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _InstanceRoleService_DeleteRole_Handler,
		},
		{
			MethodName: "UndeleteRole",
			Handler:    _InstanceRoleService_UndeleteRole_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/instance_role_service.proto",
}
