// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: v1/instance_role_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	InstanceRoleService_GetInstanceRole_FullMethodName   = "/bytebase.v1.InstanceRoleService/GetInstanceRole"
	InstanceRoleService_ListInstanceRoles_FullMethodName = "/bytebase.v1.InstanceRoleService/ListInstanceRoles"
)

// InstanceRoleServiceClient is the client API for InstanceRoleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InstanceRoleServiceClient interface {
	GetInstanceRole(ctx context.Context, in *GetInstanceRoleRequest, opts ...grpc.CallOption) (*InstanceRole, error)
	ListInstanceRoles(ctx context.Context, in *ListInstanceRolesRequest, opts ...grpc.CallOption) (*ListInstanceRolesResponse, error)
}

type instanceRoleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInstanceRoleServiceClient(cc grpc.ClientConnInterface) InstanceRoleServiceClient {
	return &instanceRoleServiceClient{cc}
}

func (c *instanceRoleServiceClient) GetInstanceRole(ctx context.Context, in *GetInstanceRoleRequest, opts ...grpc.CallOption) (*InstanceRole, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InstanceRole)
	err := c.cc.Invoke(ctx, InstanceRoleService_GetInstanceRole_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *instanceRoleServiceClient) ListInstanceRoles(ctx context.Context, in *ListInstanceRolesRequest, opts ...grpc.CallOption) (*ListInstanceRolesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListInstanceRolesResponse)
	err := c.cc.Invoke(ctx, InstanceRoleService_ListInstanceRoles_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InstanceRoleServiceServer is the server API for InstanceRoleService service.
// All implementations must embed UnimplementedInstanceRoleServiceServer
// for forward compatibility
type InstanceRoleServiceServer interface {
	GetInstanceRole(context.Context, *GetInstanceRoleRequest) (*InstanceRole, error)
	ListInstanceRoles(context.Context, *ListInstanceRolesRequest) (*ListInstanceRolesResponse, error)
	mustEmbedUnimplementedInstanceRoleServiceServer()
}

// UnimplementedInstanceRoleServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInstanceRoleServiceServer struct {
}

func (UnimplementedInstanceRoleServiceServer) GetInstanceRole(context.Context, *GetInstanceRoleRequest) (*InstanceRole, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstanceRole not implemented")
}
func (UnimplementedInstanceRoleServiceServer) ListInstanceRoles(context.Context, *ListInstanceRolesRequest) (*ListInstanceRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInstanceRoles not implemented")
}
func (UnimplementedInstanceRoleServiceServer) mustEmbedUnimplementedInstanceRoleServiceServer() {}

// UnsafeInstanceRoleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InstanceRoleServiceServer will
// result in compilation errors.
type UnsafeInstanceRoleServiceServer interface {
	mustEmbedUnimplementedInstanceRoleServiceServer()
}

func RegisterInstanceRoleServiceServer(s grpc.ServiceRegistrar, srv InstanceRoleServiceServer) {
	s.RegisterService(&InstanceRoleService_ServiceDesc, srv)
}

func _InstanceRoleService_GetInstanceRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstanceRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceRoleServiceServer).GetInstanceRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InstanceRoleService_GetInstanceRole_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceRoleServiceServer).GetInstanceRole(ctx, req.(*GetInstanceRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InstanceRoleService_ListInstanceRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInstanceRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstanceRoleServiceServer).ListInstanceRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InstanceRoleService_ListInstanceRoles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstanceRoleServiceServer).ListInstanceRoles(ctx, req.(*ListInstanceRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InstanceRoleService_ServiceDesc is the grpc.ServiceDesc for InstanceRoleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InstanceRoleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bytebase.v1.InstanceRoleService",
	HandlerType: (*InstanceRoleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetInstanceRole",
			Handler:    _InstanceRoleService_GetInstanceRole_Handler,
		},
		{
			MethodName: "ListInstanceRoles",
			Handler:    _InstanceRoleService_ListInstanceRoles_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/instance_role_service.proto",
}
