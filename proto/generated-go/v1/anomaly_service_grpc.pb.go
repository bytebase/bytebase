// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: v1/anomaly_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AnomalyService_SearchAnomalies_FullMethodName = "/bytebase.v1.AnomalyService/SearchAnomalies"
)

// AnomalyServiceClient is the client API for AnomalyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnomalyServiceClient interface {
	SearchAnomalies(ctx context.Context, in *SearchAnomaliesRequest, opts ...grpc.CallOption) (*SearchAnomaliesResponse, error)
}

type anomalyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAnomalyServiceClient(cc grpc.ClientConnInterface) AnomalyServiceClient {
	return &anomalyServiceClient{cc}
}

func (c *anomalyServiceClient) SearchAnomalies(ctx context.Context, in *SearchAnomaliesRequest, opts ...grpc.CallOption) (*SearchAnomaliesResponse, error) {
	out := new(SearchAnomaliesResponse)
	err := c.cc.Invoke(ctx, AnomalyService_SearchAnomalies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AnomalyServiceServer is the server API for AnomalyService service.
// All implementations must embed UnimplementedAnomalyServiceServer
// for forward compatibility
type AnomalyServiceServer interface {
	SearchAnomalies(context.Context, *SearchAnomaliesRequest) (*SearchAnomaliesResponse, error)
	mustEmbedUnimplementedAnomalyServiceServer()
}

// UnimplementedAnomalyServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAnomalyServiceServer struct {
}

func (UnimplementedAnomalyServiceServer) SearchAnomalies(context.Context, *SearchAnomaliesRequest) (*SearchAnomaliesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAnomalies not implemented")
}
func (UnimplementedAnomalyServiceServer) mustEmbedUnimplementedAnomalyServiceServer() {}

// UnsafeAnomalyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnomalyServiceServer will
// result in compilation errors.
type UnsafeAnomalyServiceServer interface {
	mustEmbedUnimplementedAnomalyServiceServer()
}

func RegisterAnomalyServiceServer(s grpc.ServiceRegistrar, srv AnomalyServiceServer) {
	s.RegisterService(&AnomalyService_ServiceDesc, srv)
}

func _AnomalyService_SearchAnomalies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchAnomaliesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnomalyServiceServer).SearchAnomalies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AnomalyService_SearchAnomalies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnomalyServiceServer).SearchAnomalies(ctx, req.(*SearchAnomaliesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AnomalyService_ServiceDesc is the grpc.ServiceDesc for AnomalyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AnomalyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bytebase.v1.AnomalyService",
	HandlerType: (*AnomalyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchAnomalies",
			Handler:    _AnomalyService_SearchAnomalies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/anomaly_service.proto",
}
