// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: v1/database_edit.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DatabaseEdit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of schema creation contexts.
	CreateSchemaContexts []*CreateSchemaContext `protobuf:"bytes,1,rep,name=create_schema_contexts,json=createSchemaContexts,proto3" json:"create_schema_contexts,omitempty"`
	// List of schema renaming contexts.
	RenameSchemaContexts []*RenameSchemaContext `protobuf:"bytes,2,rep,name=rename_schema_contexts,json=renameSchemaContexts,proto3" json:"rename_schema_contexts,omitempty"`
	// List of schema dropping contexts.
	DropSchemaContexts []*DropSchemaContext `protobuf:"bytes,3,rep,name=drop_schema_contexts,json=dropSchemaContexts,proto3" json:"drop_schema_contexts,omitempty"`
	// List of table creation contexts.
	CreateTableContexts []*CreateTableContext `protobuf:"bytes,4,rep,name=create_table_contexts,json=createTableContexts,proto3" json:"create_table_contexts,omitempty"`
	// List of table alteration contexts.
	AlterTableContexts []*AlterTableContext `protobuf:"bytes,5,rep,name=alter_table_contexts,json=alterTableContexts,proto3" json:"alter_table_contexts,omitempty"`
	// List of table renaming contexts.
	RenameTableContexts []*RenameTableContext `protobuf:"bytes,6,rep,name=rename_table_contexts,json=renameTableContexts,proto3" json:"rename_table_contexts,omitempty"`
	// List of table dropping contexts.
	DropTableContexts []*DropTableContext `protobuf:"bytes,7,rep,name=drop_table_contexts,json=dropTableContexts,proto3" json:"drop_table_contexts,omitempty"`
}

func (x *DatabaseEdit) Reset() {
	*x = DatabaseEdit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_database_edit_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatabaseEdit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseEdit) ProtoMessage() {}

func (x *DatabaseEdit) ProtoReflect() protoreflect.Message {
	mi := &file_v1_database_edit_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseEdit.ProtoReflect.Descriptor instead.
func (*DatabaseEdit) Descriptor() ([]byte, []int) {
	return file_v1_database_edit_proto_rawDescGZIP(), []int{0}
}

func (x *DatabaseEdit) GetCreateSchemaContexts() []*CreateSchemaContext {
	if x != nil {
		return x.CreateSchemaContexts
	}
	return nil
}

func (x *DatabaseEdit) GetRenameSchemaContexts() []*RenameSchemaContext {
	if x != nil {
		return x.RenameSchemaContexts
	}
	return nil
}

func (x *DatabaseEdit) GetDropSchemaContexts() []*DropSchemaContext {
	if x != nil {
		return x.DropSchemaContexts
	}
	return nil
}

func (x *DatabaseEdit) GetCreateTableContexts() []*CreateTableContext {
	if x != nil {
		return x.CreateTableContexts
	}
	return nil
}

func (x *DatabaseEdit) GetAlterTableContexts() []*AlterTableContext {
	if x != nil {
		return x.AlterTableContexts
	}
	return nil
}

func (x *DatabaseEdit) GetRenameTableContexts() []*RenameTableContext {
	if x != nil {
		return x.RenameTableContexts
	}
	return nil
}

func (x *DatabaseEdit) GetDropTableContexts() []*DropTableContext {
	if x != nil {
		return x.DropTableContexts
	}
	return nil
}

type CreateSchemaContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the schema to create.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *CreateSchemaContext) Reset() {
	*x = CreateSchemaContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_database_edit_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateSchemaContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateSchemaContext) ProtoMessage() {}

func (x *CreateSchemaContext) ProtoReflect() protoreflect.Message {
	mi := &file_v1_database_edit_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateSchemaContext.ProtoReflect.Descriptor instead.
func (*CreateSchemaContext) Descriptor() ([]byte, []int) {
	return file_v1_database_edit_proto_rawDescGZIP(), []int{1}
}

func (x *CreateSchemaContext) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type RenameSchemaContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The old name of the schema.
	OldName string `protobuf:"bytes,1,opt,name=old_name,json=oldName,proto3" json:"old_name,omitempty"`
	// The new name of the schema.
	NewName string `protobuf:"bytes,2,opt,name=new_name,json=newName,proto3" json:"new_name,omitempty"`
}

func (x *RenameSchemaContext) Reset() {
	*x = RenameSchemaContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_database_edit_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameSchemaContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameSchemaContext) ProtoMessage() {}

func (x *RenameSchemaContext) ProtoReflect() protoreflect.Message {
	mi := &file_v1_database_edit_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameSchemaContext.ProtoReflect.Descriptor instead.
func (*RenameSchemaContext) Descriptor() ([]byte, []int) {
	return file_v1_database_edit_proto_rawDescGZIP(), []int{2}
}

func (x *RenameSchemaContext) GetOldName() string {
	if x != nil {
		return x.OldName
	}
	return ""
}

func (x *RenameSchemaContext) GetNewName() string {
	if x != nil {
		return x.NewName
	}
	return ""
}

type DropSchemaContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the schema to drop.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DropSchemaContext) Reset() {
	*x = DropSchemaContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_database_edit_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropSchemaContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropSchemaContext) ProtoMessage() {}

func (x *DropSchemaContext) ProtoReflect() protoreflect.Message {
	mi := &file_v1_database_edit_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropSchemaContext.ProtoReflect.Descriptor instead.
func (*DropSchemaContext) Descriptor() ([]byte, []int) {
	return file_v1_database_edit_proto_rawDescGZIP(), []int{3}
}

func (x *DropSchemaContext) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type CreateTableContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the table to create.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The schema of the table.
	Schema string `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
	// The type of the table.
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// The engine of the table.
	Engine string `protobuf:"bytes,4,opt,name=engine,proto3" json:"engine,omitempty"`
	// The character set of the table.
	CharacterSet string `protobuf:"bytes,5,opt,name=character_set,json=characterSet,proto3" json:"character_set,omitempty"`
	// The collation of the table.
	Collation string `protobuf:"bytes,6,opt,name=collation,proto3" json:"collation,omitempty"`
	// The comment of the table.
	Comment string `protobuf:"bytes,7,opt,name=comment,proto3" json:"comment,omitempty"`
	// List of column addition contexts.
	AddColumnContexts []*AddColumnContext `protobuf:"bytes,8,rep,name=add_column_contexts,json=addColumnContexts,proto3" json:"add_column_contexts,omitempty"`
	// List of primary key columns.
	PrimaryKeys []string `protobuf:"bytes,9,rep,name=primary_keys,json=primaryKeys,proto3" json:"primary_keys,omitempty"`
	// List of foreign key addition contexts.
	AddForeignKeyContexts []*AddForeignKeyContext `protobuf:"bytes,10,rep,name=add_foreign_key_contexts,json=addForeignKeyContexts,proto3" json:"add_foreign_key_contexts,omitempty"`
}

func (x *CreateTableContext) Reset() {
	*x = CreateTableContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_database_edit_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTableContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTableContext) ProtoMessage() {}

func (x *CreateTableContext) ProtoReflect() protoreflect.Message {
	mi := &file_v1_database_edit_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTableContext.ProtoReflect.Descriptor instead.
func (*CreateTableContext) Descriptor() ([]byte, []int) {
	return file_v1_database_edit_proto_rawDescGZIP(), []int{4}
}

func (x *CreateTableContext) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateTableContext) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *CreateTableContext) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CreateTableContext) GetEngine() string {
	if x != nil {
		return x.Engine
	}
	return ""
}

func (x *CreateTableContext) GetCharacterSet() string {
	if x != nil {
		return x.CharacterSet
	}
	return ""
}

func (x *CreateTableContext) GetCollation() string {
	if x != nil {
		return x.Collation
	}
	return ""
}

func (x *CreateTableContext) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *CreateTableContext) GetAddColumnContexts() []*AddColumnContext {
	if x != nil {
		return x.AddColumnContexts
	}
	return nil
}

func (x *CreateTableContext) GetPrimaryKeys() []string {
	if x != nil {
		return x.PrimaryKeys
	}
	return nil
}

func (x *CreateTableContext) GetAddForeignKeyContexts() []*AddForeignKeyContext {
	if x != nil {
		return x.AddForeignKeyContexts
	}
	return nil
}

type AlterTableContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the table to alter.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The schema of the table.
	Schema string `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
	// List of column addition contexts.
	AddColumnContexts []*AddColumnContext `protobuf:"bytes,3,rep,name=add_column_contexts,json=addColumnContexts,proto3" json:"add_column_contexts,omitempty"`
	// List of column alteration contexts.
	AlterColumnContexts []*AlterColumnContext `protobuf:"bytes,4,rep,name=alter_column_contexts,json=alterColumnContexts,proto3" json:"alter_column_contexts,omitempty"`
	// List of column dropping contexts.
	DropColumnContexts []*DropColumnContext `protobuf:"bytes,5,rep,name=drop_column_contexts,json=dropColumnContexts,proto3" json:"drop_column_contexts,omitempty"`
	// List of primary key columns to be dropped.
	DropPrimaryKeys []string `protobuf:"bytes,6,rep,name=drop_primary_keys,json=dropPrimaryKeys,proto3" json:"drop_primary_keys,omitempty"`
	// List of primary key columns.
	PrimaryKeys []string `protobuf:"bytes,7,rep,name=primary_keys,json=primaryKeys,proto3" json:"primary_keys,omitempty"`
	// List of foreign key columns to be dropped.
	DropForeignKeys []string `protobuf:"bytes,8,rep,name=drop_foreign_keys,json=dropForeignKeys,proto3" json:"drop_foreign_keys,omitempty"`
	// List of foreign key addition contexts.
	AddForeignKeyContexts []*AddForeignKeyContext `protobuf:"bytes,9,rep,name=add_foreign_key_contexts,json=addForeignKeyContexts,proto3" json:"add_foreign_key_contexts,omitempty"`
}

func (x *AlterTableContext) Reset() {
	*x = AlterTableContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_database_edit_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterTableContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterTableContext) ProtoMessage() {}

func (x *AlterTableContext) ProtoReflect() protoreflect.Message {
	mi := &file_v1_database_edit_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterTableContext.ProtoReflect.Descriptor instead.
func (*AlterTableContext) Descriptor() ([]byte, []int) {
	return file_v1_database_edit_proto_rawDescGZIP(), []int{5}
}

func (x *AlterTableContext) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AlterTableContext) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *AlterTableContext) GetAddColumnContexts() []*AddColumnContext {
	if x != nil {
		return x.AddColumnContexts
	}
	return nil
}

func (x *AlterTableContext) GetAlterColumnContexts() []*AlterColumnContext {
	if x != nil {
		return x.AlterColumnContexts
	}
	return nil
}

func (x *AlterTableContext) GetDropColumnContexts() []*DropColumnContext {
	if x != nil {
		return x.DropColumnContexts
	}
	return nil
}

func (x *AlterTableContext) GetDropPrimaryKeys() []string {
	if x != nil {
		return x.DropPrimaryKeys
	}
	return nil
}

func (x *AlterTableContext) GetPrimaryKeys() []string {
	if x != nil {
		return x.PrimaryKeys
	}
	return nil
}

func (x *AlterTableContext) GetDropForeignKeys() []string {
	if x != nil {
		return x.DropForeignKeys
	}
	return nil
}

func (x *AlterTableContext) GetAddForeignKeyContexts() []*AddForeignKeyContext {
	if x != nil {
		return x.AddForeignKeyContexts
	}
	return nil
}

type RenameTableContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The schema of the table.
	Schema string `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
	// The old name of the table.
	OldName string `protobuf:"bytes,2,opt,name=old_name,json=oldName,proto3" json:"old_name,omitempty"`
	// The new name of the table.
	NewName string `protobuf:"bytes,3,opt,name=new_name,json=newName,proto3" json:"new_name,omitempty"`
}

func (x *RenameTableContext) Reset() {
	*x = RenameTableContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_database_edit_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RenameTableContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RenameTableContext) ProtoMessage() {}

func (x *RenameTableContext) ProtoReflect() protoreflect.Message {
	mi := &file_v1_database_edit_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RenameTableContext.ProtoReflect.Descriptor instead.
func (*RenameTableContext) Descriptor() ([]byte, []int) {
	return file_v1_database_edit_proto_rawDescGZIP(), []int{6}
}

func (x *RenameTableContext) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *RenameTableContext) GetOldName() string {
	if x != nil {
		return x.OldName
	}
	return ""
}

func (x *RenameTableContext) GetNewName() string {
	if x != nil {
		return x.NewName
	}
	return ""
}

type DropTableContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the table to drop.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The schema of the table.
	Schema string `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
}

func (x *DropTableContext) Reset() {
	*x = DropTableContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_database_edit_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropTableContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropTableContext) ProtoMessage() {}

func (x *DropTableContext) ProtoReflect() protoreflect.Message {
	mi := &file_v1_database_edit_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropTableContext.ProtoReflect.Descriptor instead.
func (*DropTableContext) Descriptor() ([]byte, []int) {
	return file_v1_database_edit_proto_rawDescGZIP(), []int{7}
}

func (x *DropTableContext) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DropTableContext) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

type AddColumnContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the column to add.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The type of the column.
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// The character set of the column.
	CharacterSet string `protobuf:"bytes,3,opt,name=character_set,json=characterSet,proto3" json:"character_set,omitempty"`
	// The collation of the column.
	Collation string `protobuf:"bytes,4,opt,name=collation,proto3" json:"collation,omitempty"`
	// The comment of the column.
	Comment string `protobuf:"bytes,5,opt,name=comment,proto3" json:"comment,omitempty"`
	// Whether the column is nullable.
	Nullable bool `protobuf:"varint,6,opt,name=nullable,proto3" json:"nullable,omitempty"`
	// The default value of the column.
	DefaultValue string `protobuf:"bytes,7,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
	// Whether the column has a default value.
	HasDefaultValue bool `protobuf:"varint,8,opt,name=has_default_value,json=hasDefaultValue,proto3" json:"has_default_value,omitempty"`
}

func (x *AddColumnContext) Reset() {
	*x = AddColumnContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_database_edit_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddColumnContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddColumnContext) ProtoMessage() {}

func (x *AddColumnContext) ProtoReflect() protoreflect.Message {
	mi := &file_v1_database_edit_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddColumnContext.ProtoReflect.Descriptor instead.
func (*AddColumnContext) Descriptor() ([]byte, []int) {
	return file_v1_database_edit_proto_rawDescGZIP(), []int{8}
}

func (x *AddColumnContext) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AddColumnContext) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AddColumnContext) GetCharacterSet() string {
	if x != nil {
		return x.CharacterSet
	}
	return ""
}

func (x *AddColumnContext) GetCollation() string {
	if x != nil {
		return x.Collation
	}
	return ""
}

func (x *AddColumnContext) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *AddColumnContext) GetNullable() bool {
	if x != nil {
		return x.Nullable
	}
	return false
}

func (x *AddColumnContext) GetDefaultValue() string {
	if x != nil {
		return x.DefaultValue
	}
	return ""
}

func (x *AddColumnContext) GetHasDefaultValue() bool {
	if x != nil {
		return x.HasDefaultValue
	}
	return false
}

type AlterColumnContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The old name of the column.
	OldName string `protobuf:"bytes,1,opt,name=old_name,json=oldName,proto3" json:"old_name,omitempty"`
	// The new name of the column.
	NewName string `protobuf:"bytes,2,opt,name=new_name,json=newName,proto3" json:"new_name,omitempty"`
	// The type of the column.
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// The character set of the column.
	CharacterSet string `protobuf:"bytes,4,opt,name=character_set,json=characterSet,proto3" json:"character_set,omitempty"`
	// The collation of the column.
	Collation string `protobuf:"bytes,5,opt,name=collation,proto3" json:"collation,omitempty"`
	// The comment of the column.
	Comment string `protobuf:"bytes,6,opt,name=comment,proto3" json:"comment,omitempty"`
	// Whether the column is nullable.
	Nullable bool `protobuf:"varint,7,opt,name=nullable,proto3" json:"nullable,omitempty"`
	// The default value of the column.
	DefaultValue string `protobuf:"bytes,8,opt,name=default_value,json=defaultValue,proto3" json:"default_value,omitempty"`
	// Whether the default value of the column has changed.
	IsDefaultValueChanged bool `protobuf:"varint,9,opt,name=is_default_value_changed,json=isDefaultValueChanged,proto3" json:"is_default_value_changed,omitempty"`
}

func (x *AlterColumnContext) Reset() {
	*x = AlterColumnContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_database_edit_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlterColumnContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlterColumnContext) ProtoMessage() {}

func (x *AlterColumnContext) ProtoReflect() protoreflect.Message {
	mi := &file_v1_database_edit_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlterColumnContext.ProtoReflect.Descriptor instead.
func (*AlterColumnContext) Descriptor() ([]byte, []int) {
	return file_v1_database_edit_proto_rawDescGZIP(), []int{9}
}

func (x *AlterColumnContext) GetOldName() string {
	if x != nil {
		return x.OldName
	}
	return ""
}

func (x *AlterColumnContext) GetNewName() string {
	if x != nil {
		return x.NewName
	}
	return ""
}

func (x *AlterColumnContext) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AlterColumnContext) GetCharacterSet() string {
	if x != nil {
		return x.CharacterSet
	}
	return ""
}

func (x *AlterColumnContext) GetCollation() string {
	if x != nil {
		return x.Collation
	}
	return ""
}

func (x *AlterColumnContext) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *AlterColumnContext) GetNullable() bool {
	if x != nil {
		return x.Nullable
	}
	return false
}

func (x *AlterColumnContext) GetDefaultValue() string {
	if x != nil {
		return x.DefaultValue
	}
	return ""
}

func (x *AlterColumnContext) GetIsDefaultValueChanged() bool {
	if x != nil {
		return x.IsDefaultValueChanged
	}
	return false
}

type DropColumnContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the column to drop.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DropColumnContext) Reset() {
	*x = DropColumnContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_database_edit_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DropColumnContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DropColumnContext) ProtoMessage() {}

func (x *DropColumnContext) ProtoReflect() protoreflect.Message {
	mi := &file_v1_database_edit_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DropColumnContext.ProtoReflect.Descriptor instead.
func (*DropColumnContext) Descriptor() ([]byte, []int) {
	return file_v1_database_edit_proto_rawDescGZIP(), []int{10}
}

func (x *DropColumnContext) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type AddForeignKeyContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The column of the foreign key.
	Column string `protobuf:"bytes,1,opt,name=column,proto3" json:"column,omitempty"`
	// The referenced schema of the foreign key.
	ReferencedSchema string `protobuf:"bytes,2,opt,name=referenced_schema,json=referencedSchema,proto3" json:"referenced_schema,omitempty"`
	// The referenced table of the foreign key.
	ReferencedTable string `protobuf:"bytes,3,opt,name=referenced_table,json=referencedTable,proto3" json:"referenced_table,omitempty"`
	// The referenced column of the foreign key.
	ReferencedColumn string `protobuf:"bytes,4,opt,name=referenced_column,json=referencedColumn,proto3" json:"referenced_column,omitempty"`
}

func (x *AddForeignKeyContext) Reset() {
	*x = AddForeignKeyContext{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_database_edit_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddForeignKeyContext) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddForeignKeyContext) ProtoMessage() {}

func (x *AddForeignKeyContext) ProtoReflect() protoreflect.Message {
	mi := &file_v1_database_edit_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddForeignKeyContext.ProtoReflect.Descriptor instead.
func (*AddForeignKeyContext) Descriptor() ([]byte, []int) {
	return file_v1_database_edit_proto_rawDescGZIP(), []int{11}
}

func (x *AddForeignKeyContext) GetColumn() string {
	if x != nil {
		return x.Column
	}
	return ""
}

func (x *AddForeignKeyContext) GetReferencedSchema() string {
	if x != nil {
		return x.ReferencedSchema
	}
	return ""
}

func (x *AddForeignKeyContext) GetReferencedTable() string {
	if x != nil {
		return x.ReferencedTable
	}
	return ""
}

func (x *AddForeignKeyContext) GetReferencedColumn() string {
	if x != nil {
		return x.ReferencedColumn
	}
	return ""
}

var File_v1_database_edit_proto protoreflect.FileDescriptor

var file_v1_database_edit_proto_rawDesc = []byte{
	0x0a, 0x16, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x65, 0x64,
	0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x76, 0x31, 0x22, 0xdb, 0x04, 0x0a, 0x0c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x45, 0x64, 0x69, 0x74, 0x12, 0x56, 0x0a, 0x16, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x14, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x12, 0x56,
	0x0a, 0x16, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x14, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x12, 0x50, 0x0a, 0x14, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x72, 0x6f, 0x70, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x12, 0x64, 0x72, 0x6f, 0x70, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x12, 0x53, 0x0a, 0x15, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x13, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x12, 0x50, 0x0a,
	0x14, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x79,
	0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x12, 0x61, 0x6c, 0x74,
	0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x12,
	0x53, 0x0a, 0x15, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x13, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x73, 0x12, 0x4d, 0x0a, 0x13, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x72, 0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x52, 0x11, 0x64, 0x72, 0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x73, 0x22, 0x29, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4b,
	0x0a, 0x13, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x27, 0x0a, 0x11, 0x44,
	0x72, 0x6f, 0x70, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x97, 0x03, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6c,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x4d, 0x0a, 0x13, 0x61, 0x64, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x11, 0x61, 0x64,
	0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65,
	0x79, 0x73, 0x12, 0x5a, 0x0a, 0x18, 0x61, 0x64, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67,
	0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x18, 0x0a,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x4b, 0x65, 0x79,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x15, 0x61, 0x64, 0x64, 0x46, 0x6f, 0x72, 0x65,
	0x69, 0x67, 0x6e, 0x4b, 0x65, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x22, 0x8c,
	0x04, 0x0a, 0x11, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x12, 0x4d, 0x0a, 0x13, 0x61, 0x64, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x11, 0x61, 0x64,
	0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x12,
	0x53, 0x0a, 0x15, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52,
	0x13, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x73, 0x12, 0x50, 0x0a, 0x14, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x72, 0x6f, 0x70, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x52, 0x12, 0x64, 0x72, 0x6f, 0x70, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0f, 0x64, 0x72, 0x6f, 0x70, 0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4b, 0x65,
	0x79, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6b, 0x65,
	0x79, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x66, 0x6f,
	0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0f, 0x64, 0x72, 0x6f, 0x70, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x4b, 0x65, 0x79,
	0x73, 0x12, 0x5a, 0x0a, 0x18, 0x61, 0x64, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e,
	0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x64, 0x64, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x4b, 0x65, 0x79, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x15, 0x61, 0x64, 0x64, 0x46, 0x6f, 0x72, 0x65, 0x69,
	0x67, 0x6e, 0x4b, 0x65, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x73, 0x22, 0x62, 0x0a,
	0x12, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x6f,
	0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f,
	0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65, 0x77, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x3e, 0x0a, 0x10, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x22, 0x84, 0x02, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x53, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6e,
	0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6e,
	0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2a, 0x0a, 0x11,
	0x68, 0x61, 0x73, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x68, 0x61, 0x73, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xb5, 0x02, 0x0a, 0x12, 0x41, 0x6c, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x6f, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x65,
	0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e, 0x65,
	0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x37, 0x0a, 0x18, 0x69, 0x73, 0x5f, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x69, 0x73, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64,
	0x22, 0x27, 0x0a, 0x11, 0x44, 0x72, 0x6f, 0x70, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xb3, 0x01, 0x0a, 0x14, 0x41, 0x64,
	0x64, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x4b, 0x65, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64,
	0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x72,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x42,
	0x11, 0x5a, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x67, 0x6f, 0x2f,
	0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v1_database_edit_proto_rawDescOnce sync.Once
	file_v1_database_edit_proto_rawDescData = file_v1_database_edit_proto_rawDesc
)

func file_v1_database_edit_proto_rawDescGZIP() []byte {
	file_v1_database_edit_proto_rawDescOnce.Do(func() {
		file_v1_database_edit_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_database_edit_proto_rawDescData)
	})
	return file_v1_database_edit_proto_rawDescData
}

var file_v1_database_edit_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_v1_database_edit_proto_goTypes = []interface{}{
	(*DatabaseEdit)(nil),         // 0: bytebase.v1.DatabaseEdit
	(*CreateSchemaContext)(nil),  // 1: bytebase.v1.CreateSchemaContext
	(*RenameSchemaContext)(nil),  // 2: bytebase.v1.RenameSchemaContext
	(*DropSchemaContext)(nil),    // 3: bytebase.v1.DropSchemaContext
	(*CreateTableContext)(nil),   // 4: bytebase.v1.CreateTableContext
	(*AlterTableContext)(nil),    // 5: bytebase.v1.AlterTableContext
	(*RenameTableContext)(nil),   // 6: bytebase.v1.RenameTableContext
	(*DropTableContext)(nil),     // 7: bytebase.v1.DropTableContext
	(*AddColumnContext)(nil),     // 8: bytebase.v1.AddColumnContext
	(*AlterColumnContext)(nil),   // 9: bytebase.v1.AlterColumnContext
	(*DropColumnContext)(nil),    // 10: bytebase.v1.DropColumnContext
	(*AddForeignKeyContext)(nil), // 11: bytebase.v1.AddForeignKeyContext
}
var file_v1_database_edit_proto_depIdxs = []int32{
	1,  // 0: bytebase.v1.DatabaseEdit.create_schema_contexts:type_name -> bytebase.v1.CreateSchemaContext
	2,  // 1: bytebase.v1.DatabaseEdit.rename_schema_contexts:type_name -> bytebase.v1.RenameSchemaContext
	3,  // 2: bytebase.v1.DatabaseEdit.drop_schema_contexts:type_name -> bytebase.v1.DropSchemaContext
	4,  // 3: bytebase.v1.DatabaseEdit.create_table_contexts:type_name -> bytebase.v1.CreateTableContext
	5,  // 4: bytebase.v1.DatabaseEdit.alter_table_contexts:type_name -> bytebase.v1.AlterTableContext
	6,  // 5: bytebase.v1.DatabaseEdit.rename_table_contexts:type_name -> bytebase.v1.RenameTableContext
	7,  // 6: bytebase.v1.DatabaseEdit.drop_table_contexts:type_name -> bytebase.v1.DropTableContext
	8,  // 7: bytebase.v1.CreateTableContext.add_column_contexts:type_name -> bytebase.v1.AddColumnContext
	11, // 8: bytebase.v1.CreateTableContext.add_foreign_key_contexts:type_name -> bytebase.v1.AddForeignKeyContext
	8,  // 9: bytebase.v1.AlterTableContext.add_column_contexts:type_name -> bytebase.v1.AddColumnContext
	9,  // 10: bytebase.v1.AlterTableContext.alter_column_contexts:type_name -> bytebase.v1.AlterColumnContext
	10, // 11: bytebase.v1.AlterTableContext.drop_column_contexts:type_name -> bytebase.v1.DropColumnContext
	11, // 12: bytebase.v1.AlterTableContext.add_foreign_key_contexts:type_name -> bytebase.v1.AddForeignKeyContext
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_v1_database_edit_proto_init() }
func file_v1_database_edit_proto_init() {
	if File_v1_database_edit_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_v1_database_edit_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatabaseEdit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_database_edit_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateSchemaContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_database_edit_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameSchemaContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_database_edit_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropSchemaContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_database_edit_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTableContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_database_edit_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterTableContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_database_edit_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RenameTableContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_database_edit_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropTableContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_database_edit_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddColumnContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_database_edit_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlterColumnContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_database_edit_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DropColumnContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_database_edit_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddForeignKeyContext); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_database_edit_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_v1_database_edit_proto_goTypes,
		DependencyIndexes: file_v1_database_edit_proto_depIdxs,
		MessageInfos:      file_v1_database_edit_proto_msgTypes,
	}.Build()
	File_v1_database_edit_proto = out.File
	file_v1_database_edit_proto_rawDesc = nil
	file_v1_database_edit_proto_goTypes = nil
	file_v1_database_edit_proto_depIdxs = nil
}
