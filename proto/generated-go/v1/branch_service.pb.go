// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        (unknown)
// source: v1/branch_service.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BranchView int32

const (
	// The default / unset value.
	// The API will default to the BASIC view.
	BranchView_BRANCH_VIEW_UNSPECIFIED BranchView = 0
	// Exclude schema, baseline_schema.
	BranchView_BRANCH_VIEW_BASIC BranchView = 1
	// Include everything.
	BranchView_BRANCH_VIEW_FULL BranchView = 2
)

// Enum value maps for BranchView.
var (
	BranchView_name = map[int32]string{
		0: "BRANCH_VIEW_UNSPECIFIED",
		1: "BRANCH_VIEW_BASIC",
		2: "BRANCH_VIEW_FULL",
	}
	BranchView_value = map[string]int32{
		"BRANCH_VIEW_UNSPECIFIED": 0,
		"BRANCH_VIEW_BASIC":       1,
		"BRANCH_VIEW_FULL":        2,
	}
)

func (x BranchView) Enum() *BranchView {
	p := new(BranchView)
	*p = x
	return p
}

func (x BranchView) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BranchView) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_branch_service_proto_enumTypes[0].Descriptor()
}

func (BranchView) Type() protoreflect.EnumType {
	return &file_v1_branch_service_proto_enumTypes[0]
}

func (x BranchView) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BranchView.Descriptor instead.
func (BranchView) EnumDescriptor() ([]byte, []int) {
	return file_v1_branch_service_proto_rawDescGZIP(), []int{0}
}

type BranchTaskMetadata_State int32

const (
	BranchTaskMetadata_STATE_UNSPECIFIED BranchTaskMetadata_State = 0
	BranchTaskMetadata_STATE_STARTED     BranchTaskMetadata_State = 1
	BranchTaskMetadata_STATE_SUSPENDED   BranchTaskMetadata_State = 2
)

// Enum value maps for BranchTaskMetadata_State.
var (
	BranchTaskMetadata_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "STATE_STARTED",
		2: "STATE_SUSPENDED",
	}
	BranchTaskMetadata_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"STATE_STARTED":     1,
		"STATE_SUSPENDED":   2,
	}
)

func (x BranchTaskMetadata_State) Enum() *BranchTaskMetadata_State {
	p := new(BranchTaskMetadata_State)
	*p = x
	return p
}

func (x BranchTaskMetadata_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BranchTaskMetadata_State) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_branch_service_proto_enumTypes[1].Descriptor()
}

func (BranchTaskMetadata_State) Type() protoreflect.EnumType {
	return &file_v1_branch_service_proto_enumTypes[1]
}

func (x BranchTaskMetadata_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BranchTaskMetadata_State.Descriptor instead.
func (BranchTaskMetadata_State) EnumDescriptor() ([]byte, []int) {
	return file_v1_branch_service_proto_rawDescGZIP(), []int{16, 0}
}

type BranchStreamMetadata_Type int32

const (
	BranchStreamMetadata_TYPE_UNSPECIFIED BranchStreamMetadata_Type = 0
	BranchStreamMetadata_TYPE_DELTA       BranchStreamMetadata_Type = 1
)

// Enum value maps for BranchStreamMetadata_Type.
var (
	BranchStreamMetadata_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "TYPE_DELTA",
	}
	BranchStreamMetadata_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"TYPE_DELTA":       1,
	}
)

func (x BranchStreamMetadata_Type) Enum() *BranchStreamMetadata_Type {
	p := new(BranchStreamMetadata_Type)
	*p = x
	return p
}

func (x BranchStreamMetadata_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BranchStreamMetadata_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_branch_service_proto_enumTypes[2].Descriptor()
}

func (BranchStreamMetadata_Type) Type() protoreflect.EnumType {
	return &file_v1_branch_service_proto_enumTypes[2]
}

func (x BranchStreamMetadata_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BranchStreamMetadata_Type.Descriptor instead.
func (BranchStreamMetadata_Type) EnumDescriptor() ([]byte, []int) {
	return file_v1_branch_service_proto_rawDescGZIP(), []int{17, 0}
}

type BranchStreamMetadata_Mode int32

const (
	BranchStreamMetadata_MODE_UNSPECIFIED BranchStreamMetadata_Mode = 0
	BranchStreamMetadata_MODE_DEFAULT     BranchStreamMetadata_Mode = 1
	BranchStreamMetadata_MODE_APPEND_ONLY BranchStreamMetadata_Mode = 2
	BranchStreamMetadata_MODE_INSERT_ONLY BranchStreamMetadata_Mode = 3
)

// Enum value maps for BranchStreamMetadata_Mode.
var (
	BranchStreamMetadata_Mode_name = map[int32]string{
		0: "MODE_UNSPECIFIED",
		1: "MODE_DEFAULT",
		2: "MODE_APPEND_ONLY",
		3: "MODE_INSERT_ONLY",
	}
	BranchStreamMetadata_Mode_value = map[string]int32{
		"MODE_UNSPECIFIED": 0,
		"MODE_DEFAULT":     1,
		"MODE_APPEND_ONLY": 2,
		"MODE_INSERT_ONLY": 3,
	}
)

func (x BranchStreamMetadata_Mode) Enum() *BranchStreamMetadata_Mode {
	p := new(BranchStreamMetadata_Mode)
	*p = x
	return p
}

func (x BranchStreamMetadata_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BranchStreamMetadata_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_branch_service_proto_enumTypes[3].Descriptor()
}

func (BranchStreamMetadata_Mode) Type() protoreflect.EnumType {
	return &file_v1_branch_service_proto_enumTypes[3]
}

func (x BranchStreamMetadata_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BranchStreamMetadata_Mode.Descriptor instead.
func (BranchStreamMetadata_Mode) EnumDescriptor() ([]byte, []int) {
	return file_v1_branch_service_proto_rawDescGZIP(), []int{17, 1}
}

// Type is the type of a table partition, some database engines may not support all types.
// Only avilable for the following database engines now:
// MySQL: RANGE, RANGE COLUMNS, LIST, LIST COLUMNS, HASH, LINEAR HASH, KEY, LINEAR_KEY (https://dev.mysql.com/doc/refman/8.0/en/partitioning-types.html)
// TiDB: RANGE, RANGE COLUMNS, LIST, LIST COLUMNS, HASH, KEY
// PostgreSQL: RANGE, LIST, HASH (https://www.postgresql.org/docs/current/ddl-partitioning.html)
type BranchTablePartitionMetadata_Type int32

const (
	BranchTablePartitionMetadata_TYPE_UNSPECIFIED BranchTablePartitionMetadata_Type = 0
	BranchTablePartitionMetadata_RANGE            BranchTablePartitionMetadata_Type = 1
	BranchTablePartitionMetadata_RANGE_COLUMNS    BranchTablePartitionMetadata_Type = 2
	BranchTablePartitionMetadata_LIST             BranchTablePartitionMetadata_Type = 3
	BranchTablePartitionMetadata_LIST_COLUMNS     BranchTablePartitionMetadata_Type = 4
	BranchTablePartitionMetadata_HASH             BranchTablePartitionMetadata_Type = 5
	BranchTablePartitionMetadata_LINEAR_HASH      BranchTablePartitionMetadata_Type = 6
	BranchTablePartitionMetadata_KEY              BranchTablePartitionMetadata_Type = 7
	BranchTablePartitionMetadata_LINEAR_KEY       BranchTablePartitionMetadata_Type = 8
)

// Enum value maps for BranchTablePartitionMetadata_Type.
var (
	BranchTablePartitionMetadata_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "RANGE",
		2: "RANGE_COLUMNS",
		3: "LIST",
		4: "LIST_COLUMNS",
		5: "HASH",
		6: "LINEAR_HASH",
		7: "KEY",
		8: "LINEAR_KEY",
	}
	BranchTablePartitionMetadata_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"RANGE":            1,
		"RANGE_COLUMNS":    2,
		"LIST":             3,
		"LIST_COLUMNS":     4,
		"HASH":             5,
		"LINEAR_HASH":      6,
		"KEY":              7,
		"LINEAR_KEY":       8,
	}
)

func (x BranchTablePartitionMetadata_Type) Enum() *BranchTablePartitionMetadata_Type {
	p := new(BranchTablePartitionMetadata_Type)
	*p = x
	return p
}

func (x BranchTablePartitionMetadata_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BranchTablePartitionMetadata_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_branch_service_proto_enumTypes[4].Descriptor()
}

func (BranchTablePartitionMetadata_Type) Type() protoreflect.EnumType {
	return &file_v1_branch_service_proto_enumTypes[4]
}

func (x BranchTablePartitionMetadata_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BranchTablePartitionMetadata_Type.Descriptor instead.
func (BranchTablePartitionMetadata_Type) EnumDescriptor() ([]byte, []int) {
	return file_v1_branch_service_proto_rawDescGZIP(), []int{20, 0}
}

type Branch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the branch.
	// Format: projects/{project}/branches/{branch}
	// {branch} should be the id of a sheet.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The branch ID.
	BranchId string `protobuf:"bytes,2,opt,name=branch_id,json=branchId,proto3" json:"branch_id,omitempty"`
	// The schema of branch. AKA sheet's statement.
	Schema string `protobuf:"bytes,3,opt,name=schema,proto3" json:"schema,omitempty"`
	// The metadata of the current editing schema.
	SchemaMetadata *DatabaseMetadata `protobuf:"bytes,4,opt,name=schema_metadata,json=schemaMetadata,proto3" json:"schema_metadata,omitempty"`
	// The baseline schema.
	BaselineSchema string `protobuf:"bytes,5,opt,name=baseline_schema,json=baselineSchema,proto3" json:"baseline_schema,omitempty"`
	// The metadata of the baseline schema.
	BaselineSchemaMetadata *DatabaseMetadata `protobuf:"bytes,6,opt,name=baseline_schema_metadata,json=baselineSchemaMetadata,proto3" json:"baseline_schema_metadata,omitempty"`
	// The database engine of the branch.
	Engine Engine `protobuf:"varint,7,opt,name=engine,proto3,enum=bytebase.v1.Engine" json:"engine,omitempty"`
	// The name of the baseline database.
	// Format: instances/{instance}/databases/{database}
	BaselineDatabase string `protobuf:"bytes,8,opt,name=baseline_database,json=baselineDatabase,proto3" json:"baseline_database,omitempty"`
	// The name of the parent branch.
	// For main branch, it's empty.
	// For child branch, its format will be: projects/{project}/branches/{branch}
	ParentBranch string `protobuf:"bytes,9,opt,name=parent_branch,json=parentBranch,proto3" json:"parent_branch,omitempty"`
	// The etag of the branch.
	Etag string `protobuf:"bytes,10,opt,name=etag,proto3" json:"etag,omitempty"`
	// The creator of the branch.
	// Format: users/{email}
	Creator string `protobuf:"bytes,11,opt,name=creator,proto3" json:"creator,omitempty"`
	// The updater of the branch.
	// Format: users/{email}
	Updater string `protobuf:"bytes,12,opt,name=updater,proto3" json:"updater,omitempty"`
	// The timestamp when the branch was created.
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// The timestamp when the branch was last updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *Branch) Reset() {
	*x = Branch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_branch_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Branch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Branch) ProtoMessage() {}

func (x *Branch) ProtoReflect() protoreflect.Message {
	mi := &file_v1_branch_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Branch.ProtoReflect.Descriptor instead.
func (*Branch) Descriptor() ([]byte, []int) {
	return file_v1_branch_service_proto_rawDescGZIP(), []int{0}
}

func (x *Branch) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Branch) GetBranchId() string {
	if x != nil {
		return x.BranchId
	}
	return ""
}

func (x *Branch) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *Branch) GetSchemaMetadata() *DatabaseMetadata {
	if x != nil {
		return x.SchemaMetadata
	}
	return nil
}

func (x *Branch) GetBaselineSchema() string {
	if x != nil {
		return x.BaselineSchema
	}
	return ""
}

func (x *Branch) GetBaselineSchemaMetadata() *DatabaseMetadata {
	if x != nil {
		return x.BaselineSchemaMetadata
	}
	return nil
}

func (x *Branch) GetEngine() Engine {
	if x != nil {
		return x.Engine
	}
	return Engine_ENGINE_UNSPECIFIED
}

func (x *Branch) GetBaselineDatabase() string {
	if x != nil {
		return x.BaselineDatabase
	}
	return ""
}

func (x *Branch) GetParentBranch() string {
	if x != nil {
		return x.ParentBranch
	}
	return ""
}

func (x *Branch) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *Branch) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *Branch) GetUpdater() string {
	if x != nil {
		return x.Updater
	}
	return ""
}

func (x *Branch) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Branch) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

type GetBranchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the branch to retrieve.
	// Format: projects/{project}/branches/{branch}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetBranchRequest) Reset() {
	*x = GetBranchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_branch_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetBranchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBranchRequest) ProtoMessage() {}

func (x *GetBranchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_branch_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBranchRequest.ProtoReflect.Descriptor instead.
func (*GetBranchRequest) Descriptor() ([]byte, []int) {
	return file_v1_branch_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetBranchRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListBranchesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The parent resource of the branch.
	// Format: projects/{project}
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// To filter the search result.
	Filter string `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	// The maximum number of branches to return. The service may return fewer than
	// this value.
	// If unspecified, at most 50 branches will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListBranches` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListBranches` must match
	// the call that provided the page token.
	PageToken string     `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	View      BranchView `protobuf:"varint,5,opt,name=view,proto3,enum=bytebase.v1.BranchView" json:"view,omitempty"`
}

func (x *ListBranchesRequest) Reset() {
	*x = ListBranchesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_branch_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBranchesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBranchesRequest) ProtoMessage() {}

func (x *ListBranchesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_branch_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBranchesRequest.ProtoReflect.Descriptor instead.
func (*ListBranchesRequest) Descriptor() ([]byte, []int) {
	return file_v1_branch_service_proto_rawDescGZIP(), []int{2}
}

func (x *ListBranchesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListBranchesRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *ListBranchesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListBranchesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListBranchesRequest) GetView() BranchView {
	if x != nil {
		return x.View
	}
	return BranchView_BRANCH_VIEW_UNSPECIFIED
}

type ListBranchesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The branches from the specified request.
	Branches []*Branch `protobuf:"bytes,1,rep,name=branches,proto3" json:"branches,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListBranchesResponse) Reset() {
	*x = ListBranchesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_branch_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListBranchesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBranchesResponse) ProtoMessage() {}

func (x *ListBranchesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_branch_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBranchesResponse.ProtoReflect.Descriptor instead.
func (*ListBranchesResponse) Descriptor() ([]byte, []int) {
	return file_v1_branch_service_proto_rawDescGZIP(), []int{3}
}

func (x *ListBranchesResponse) GetBranches() []*Branch {
	if x != nil {
		return x.Branches
	}
	return nil
}

func (x *ListBranchesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type CreateBranchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The parent, which owns this collection of branches.
	// Format: project/{project}
	Parent string  `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	Branch *Branch `protobuf:"bytes,2,opt,name=branch,proto3" json:"branch,omitempty"`
	// The ID to use for the branch, which will become the final component of
	// the branch's resource name.
	// Format: [a-zA-Z][a-zA-Z0-9-_/]+.
	BranchId string `protobuf:"bytes,3,opt,name=branch_id,json=branchId,proto3" json:"branch_id,omitempty"`
}

func (x *CreateBranchRequest) Reset() {
	*x = CreateBranchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_branch_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateBranchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBranchRequest) ProtoMessage() {}

func (x *CreateBranchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_branch_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBranchRequest.ProtoReflect.Descriptor instead.
func (*CreateBranchRequest) Descriptor() ([]byte, []int) {
	return file_v1_branch_service_proto_rawDescGZIP(), []int{4}
}

func (x *CreateBranchRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateBranchRequest) GetBranch() *Branch {
	if x != nil {
		return x.Branch
	}
	return nil
}

func (x *CreateBranchRequest) GetBranchId() string {
	if x != nil {
		return x.BranchId
	}
	return ""
}

type UpdateBranchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The branch to update.
	//
	// The branch's `name` field is used to identify the branch to update.
	// Format: projects/{project}/branches/{branch}
	Branch *Branch `protobuf:"bytes,1,opt,name=branch,proto3" json:"branch,omitempty"`
	// The list of fields to update.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// The current etag of the branch.
	// If an etag is provided and does not match the current etag of the branch,
	// the call will be blocked and an ABORTED error will be returned.
	// The etag should be specified for using merged_schema. The etag should be the etag from named branch.
	Etag string `protobuf:"bytes,3,opt,name=etag,proto3" json:"etag,omitempty"`
}

func (x *UpdateBranchRequest) Reset() {
	*x = UpdateBranchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_branch_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateBranchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateBranchRequest) ProtoMessage() {}

func (x *UpdateBranchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_branch_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateBranchRequest.ProtoReflect.Descriptor instead.
func (*UpdateBranchRequest) Descriptor() ([]byte, []int) {
	return file_v1_branch_service_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateBranchRequest) GetBranch() *Branch {
	if x != nil {
		return x.Branch
	}
	return nil
}

func (x *UpdateBranchRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateBranchRequest) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

type MergeBranchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the base branch to merge to.
	// Format: projects/{project}/branches/{branch}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The head branch to merge from.
	// Format: projects/{project}/branches/{branch}
	HeadBranch string `protobuf:"bytes,2,opt,name=head_branch,json=headBranch,proto3" json:"head_branch,omitempty"`
	// The current etag of the branch.
	// If an etag is provided and does not match the current etag of the branch,
	// the call will be blocked and an ABORTED error will be returned.
	// The etag should be the etag from named branch.
	Etag string `protobuf:"bytes,3,opt,name=etag,proto3" json:"etag,omitempty"`
	// validate_only determines if the merge can occur seamlessly without any conflicts.
	ValidateOnly bool `protobuf:"varint,4,opt,name=validate_only,json=validateOnly,proto3" json:"validate_only,omitempty"`
}

func (x *MergeBranchRequest) Reset() {
	*x = MergeBranchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_branch_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MergeBranchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MergeBranchRequest) ProtoMessage() {}

func (x *MergeBranchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_branch_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MergeBranchRequest.ProtoReflect.Descriptor instead.
func (*MergeBranchRequest) Descriptor() ([]byte, []int) {
	return file_v1_branch_service_proto_rawDescGZIP(), []int{6}
}

func (x *MergeBranchRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MergeBranchRequest) GetHeadBranch() string {
	if x != nil {
		return x.HeadBranch
	}
	return ""
}

func (x *MergeBranchRequest) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *MergeBranchRequest) GetValidateOnly() bool {
	if x != nil {
		return x.ValidateOnly
	}
	return false
}

type RebaseBranchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the base branch to merge to.
	// Format: projects/{project}/branches/{branch}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The database (remote upstream) used to rebase.
	// We use its schema as baseline and reapply the difference between base and head of the named branch.
	// Format: instances/{instance}/databases/{database}
	SourceDatabase string `protobuf:"bytes,2,opt,name=source_database,json=sourceDatabase,proto3" json:"source_database,omitempty"`
	// The branch (remote upstream) used to rebase. We use its head as baseline.
	// We use its head schema as baseline and reapply the difference between base and head of the named branch.
	// Format: projects/{project}/branches/{branch}
	SourceBranch string `protobuf:"bytes,3,opt,name=source_branch,json=sourceBranch,proto3" json:"source_branch,omitempty"`
	// For failed merge, we will pass in this addition merged schema and use it for head.
	// This has to be set together with source_database or source_branch.
	MergedSchema string `protobuf:"bytes,4,opt,name=merged_schema,json=mergedSchema,proto3" json:"merged_schema,omitempty"`
	// The current etag of the branch.
	// If an etag is provided and does not match the current etag of the branch,
	// the call will be blocked and an ABORTED error will be returned.
	// The etag should be specified for using merged_schema. The etag should be the etag from named branch.
	Etag string `protobuf:"bytes,5,opt,name=etag,proto3" json:"etag,omitempty"`
	// validate_only determines if the rebase can occur seamlessly without any conflicts.
	ValidateOnly bool `protobuf:"varint,6,opt,name=validate_only,json=validateOnly,proto3" json:"validate_only,omitempty"`
}

func (x *RebaseBranchRequest) Reset() {
	*x = RebaseBranchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_branch_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RebaseBranchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebaseBranchRequest) ProtoMessage() {}

func (x *RebaseBranchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_branch_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebaseBranchRequest.ProtoReflect.Descriptor instead.
func (*RebaseBranchRequest) Descriptor() ([]byte, []int) {
	return file_v1_branch_service_proto_rawDescGZIP(), []int{7}
}

func (x *RebaseBranchRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RebaseBranchRequest) GetSourceDatabase() string {
	if x != nil {
		return x.SourceDatabase
	}
	return ""
}

func (x *RebaseBranchRequest) GetSourceBranch() string {
	if x != nil {
		return x.SourceBranch
	}
	return ""
}

func (x *RebaseBranchRequest) GetMergedSchema() string {
	if x != nil {
		return x.MergedSchema
	}
	return ""
}

func (x *RebaseBranchRequest) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *RebaseBranchRequest) GetValidateOnly() bool {
	if x != nil {
		return x.ValidateOnly
	}
	return false
}

type RebaseBranchResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Result:
	//
	//	*RebaseBranchResponse_Branch
	//	*RebaseBranchResponse_ConflictSchema
	Result isRebaseBranchResponse_Result `protobuf_oneof:"result"`
}

func (x *RebaseBranchResponse) Reset() {
	*x = RebaseBranchResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_branch_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RebaseBranchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RebaseBranchResponse) ProtoMessage() {}

func (x *RebaseBranchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_branch_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RebaseBranchResponse.ProtoReflect.Descriptor instead.
func (*RebaseBranchResponse) Descriptor() ([]byte, []int) {
	return file_v1_branch_service_proto_rawDescGZIP(), []int{8}
}

func (m *RebaseBranchResponse) GetResult() isRebaseBranchResponse_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *RebaseBranchResponse) GetBranch() *Branch {
	if x, ok := x.GetResult().(*RebaseBranchResponse_Branch); ok {
		return x.Branch
	}
	return nil
}

func (x *RebaseBranchResponse) GetConflictSchema() string {
	if x, ok := x.GetResult().(*RebaseBranchResponse_ConflictSchema); ok {
		return x.ConflictSchema
	}
	return ""
}

type isRebaseBranchResponse_Result interface {
	isRebaseBranchResponse_Result()
}

type RebaseBranchResponse_Branch struct {
	// The rebased branch when rebase occurs seamlessly.
	Branch *Branch `protobuf:"bytes,1,opt,name=branch,proto3,oneof"`
}

type RebaseBranchResponse_ConflictSchema struct {
	// The conflict schema when rebase has conflicts.
	// The conflict section is enclosed by the following.
	// <<<<< HEAD
	// ====
	// >>>>> main
	ConflictSchema string `protobuf:"bytes,2,opt,name=conflict_schema,json=conflictSchema,proto3,oneof"`
}

func (*RebaseBranchResponse_Branch) isRebaseBranchResponse_Result() {}

func (*RebaseBranchResponse_ConflictSchema) isRebaseBranchResponse_Result() {}

type DeleteBranchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the branch to delete.
	// Format: projects/{project}/branches/{branch}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// By default, server will return `FAILED_PRECONDITION` error
	// if delete the branch that is parent of other branches.
	// If true, server will delete the branch forcely but will not delete its children branches.
	Force bool `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
}

func (x *DeleteBranchRequest) Reset() {
	*x = DeleteBranchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_branch_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteBranchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteBranchRequest) ProtoMessage() {}

func (x *DeleteBranchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_branch_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteBranchRequest.ProtoReflect.Descriptor instead.
func (*DeleteBranchRequest) Descriptor() ([]byte, []int) {
	return file_v1_branch_service_proto_rawDescGZIP(), []int{9}
}

func (x *DeleteBranchRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteBranchRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type DiffDatabaseRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of branch.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The name of the databsae to merge the branch to.
	Database string `protobuf:"bytes,2,opt,name=database,proto3" json:"database,omitempty"`
}

func (x *DiffDatabaseRequest) Reset() {
	*x = DiffDatabaseRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_branch_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiffDatabaseRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiffDatabaseRequest) ProtoMessage() {}

func (x *DiffDatabaseRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_branch_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiffDatabaseRequest.ProtoReflect.Descriptor instead.
func (*DiffDatabaseRequest) Descriptor() ([]byte, []int) {
	return file_v1_branch_service_proto_rawDescGZIP(), []int{10}
}

func (x *DiffDatabaseRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DiffDatabaseRequest) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

type DiffDatabaseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The schema diff when merge occurs seamlessly.
	Diff string `protobuf:"bytes,1,opt,name=diff,proto3" json:"diff,omitempty"`
	// Types that are assignable to Result:
	//
	//	*DiffDatabaseResponse_Schema
	//	*DiffDatabaseResponse_ConflictSchema
	Result isDiffDatabaseResponse_Result `protobuf_oneof:"result"`
}

func (x *DiffDatabaseResponse) Reset() {
	*x = DiffDatabaseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_branch_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiffDatabaseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiffDatabaseResponse) ProtoMessage() {}

func (x *DiffDatabaseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_branch_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiffDatabaseResponse.ProtoReflect.Descriptor instead.
func (*DiffDatabaseResponse) Descriptor() ([]byte, []int) {
	return file_v1_branch_service_proto_rawDescGZIP(), []int{11}
}

func (x *DiffDatabaseResponse) GetDiff() string {
	if x != nil {
		return x.Diff
	}
	return ""
}

func (m *DiffDatabaseResponse) GetResult() isDiffDatabaseResponse_Result {
	if m != nil {
		return m.Result
	}
	return nil
}

func (x *DiffDatabaseResponse) GetSchema() string {
	if x, ok := x.GetResult().(*DiffDatabaseResponse_Schema); ok {
		return x.Schema
	}
	return ""
}

func (x *DiffDatabaseResponse) GetConflictSchema() string {
	if x, ok := x.GetResult().(*DiffDatabaseResponse_ConflictSchema); ok {
		return x.ConflictSchema
	}
	return ""
}

type isDiffDatabaseResponse_Result interface {
	isDiffDatabaseResponse_Result()
}

type DiffDatabaseResponse_Schema struct {
	// The merged schema if there is no conflict.
	Schema string `protobuf:"bytes,2,opt,name=schema,proto3,oneof"`
}

type DiffDatabaseResponse_ConflictSchema struct {
	// The conflict schema when rebase has conflicts.
	// The conflict section is enclosed by the following.
	// <<<<< HEAD
	// ====
	// >>>>> main
	ConflictSchema string `protobuf:"bytes,3,opt,name=conflict_schema,json=conflictSchema,proto3,oneof"`
}

func (*DiffDatabaseResponse_Schema) isDiffDatabaseResponse_Result() {}

func (*DiffDatabaseResponse_ConflictSchema) isDiffDatabaseResponse_Result() {}

type DiffMetadataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The metadata of the source schema.
	SourceMetadata *DatabaseMetadata `protobuf:"bytes,1,opt,name=source_metadata,json=sourceMetadata,proto3" json:"source_metadata,omitempty"`
	// The metadata of the target schema.
	TargetMetadata *DatabaseMetadata `protobuf:"bytes,2,opt,name=target_metadata,json=targetMetadata,proto3" json:"target_metadata,omitempty"`
	// The database engine of the schema.
	Engine Engine `protobuf:"varint,3,opt,name=engine,proto3,enum=bytebase.v1.Engine" json:"engine,omitempty"`
}

func (x *DiffMetadataRequest) Reset() {
	*x = DiffMetadataRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_branch_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiffMetadataRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiffMetadataRequest) ProtoMessage() {}

func (x *DiffMetadataRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_branch_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiffMetadataRequest.ProtoReflect.Descriptor instead.
func (*DiffMetadataRequest) Descriptor() ([]byte, []int) {
	return file_v1_branch_service_proto_rawDescGZIP(), []int{12}
}

func (x *DiffMetadataRequest) GetSourceMetadata() *DatabaseMetadata {
	if x != nil {
		return x.SourceMetadata
	}
	return nil
}

func (x *DiffMetadataRequest) GetTargetMetadata() *DatabaseMetadata {
	if x != nil {
		return x.TargetMetadata
	}
	return nil
}

func (x *DiffMetadataRequest) GetEngine() Engine {
	if x != nil {
		return x.Engine
	}
	return Engine_ENGINE_UNSPECIFIED
}

type DiffMetadataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The diff of the metadata.
	Diff string `protobuf:"bytes,1,opt,name=diff,proto3" json:"diff,omitempty"`
}

func (x *DiffMetadataResponse) Reset() {
	*x = DiffMetadataResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_branch_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiffMetadataResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiffMetadataResponse) ProtoMessage() {}

func (x *DiffMetadataResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_branch_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiffMetadataResponse.ProtoReflect.Descriptor instead.
func (*DiffMetadataResponse) Descriptor() ([]byte, []int) {
	return file_v1_branch_service_proto_rawDescGZIP(), []int{13}
}

func (x *DiffMetadataResponse) GetDiff() string {
	if x != nil {
		return x.Diff
	}
	return ""
}

// BranchDatabaseSchemaMetadata is the schema metadata for databases used in branch.
type BranchDatabaseSchemaMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The schemas is the list of schemas in a database.
	Schemas []*BranchSchemaMetadata `protobuf:"bytes,2,rep,name=schemas,proto3" json:"schemas,omitempty"`
	// The character_set is the character set of a database.
	CharacterSet string `protobuf:"bytes,3,opt,name=character_set,json=characterSet,proto3" json:"character_set,omitempty"`
	// The collation is the collation of a database.
	Collation string `protobuf:"bytes,4,opt,name=collation,proto3" json:"collation,omitempty"`
	// The extensions is the list of extensions in a database.
	Extensions []*ExtensionMetadata `protobuf:"bytes,5,rep,name=extensions,proto3" json:"extensions,omitempty"`
	// The database belongs to a datashare.
	Datashare bool `protobuf:"varint,6,opt,name=datashare,proto3" json:"datashare,omitempty"`
	// The service name of the database. It's the Oracle specific concept.
	ServiceName string `protobuf:"bytes,7,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
}

func (x *BranchDatabaseSchemaMetadata) Reset() {
	*x = BranchDatabaseSchemaMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_branch_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BranchDatabaseSchemaMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BranchDatabaseSchemaMetadata) ProtoMessage() {}

func (x *BranchDatabaseSchemaMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_v1_branch_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BranchDatabaseSchemaMetadata.ProtoReflect.Descriptor instead.
func (*BranchDatabaseSchemaMetadata) Descriptor() ([]byte, []int) {
	return file_v1_branch_service_proto_rawDescGZIP(), []int{14}
}

func (x *BranchDatabaseSchemaMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BranchDatabaseSchemaMetadata) GetSchemas() []*BranchSchemaMetadata {
	if x != nil {
		return x.Schemas
	}
	return nil
}

func (x *BranchDatabaseSchemaMetadata) GetCharacterSet() string {
	if x != nil {
		return x.CharacterSet
	}
	return ""
}

func (x *BranchDatabaseSchemaMetadata) GetCollation() string {
	if x != nil {
		return x.Collation
	}
	return ""
}

func (x *BranchDatabaseSchemaMetadata) GetExtensions() []*ExtensionMetadata {
	if x != nil {
		return x.Extensions
	}
	return nil
}

func (x *BranchDatabaseSchemaMetadata) GetDatashare() bool {
	if x != nil {
		return x.Datashare
	}
	return false
}

func (x *BranchDatabaseSchemaMetadata) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

// BranchSchemaMetadata is the metadata for schemas used in branch.
// This is the concept of schema in Postgres, but it's a no-op for MySQL.
type BranchSchemaMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name is the schema name.
	// It is an empty string for databases without such concept such as MySQL.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The tables is the list of tables in a schema.
	Tables []*BranchTableMetadata `protobuf:"bytes,2,rep,name=tables,proto3" json:"tables,omitempty"`
	// The external_tables is the list of external tables in a schema.
	ExternalTables []*BranchExternalTableMetadata `protobuf:"bytes,3,rep,name=external_tables,json=externalTables,proto3" json:"external_tables,omitempty"`
	// The views is the list of views in a schema.
	Views []*BranchViewMetadata `protobuf:"bytes,4,rep,name=views,proto3" json:"views,omitempty"`
	// The functions is the list of functions in a schema.
	Functions []*BranchFunctionMetadata `protobuf:"bytes,5,rep,name=functions,proto3" json:"functions,omitempty"`
	// The procedures is the list of procedures in a schema.
	Procedures []*BranchProcedureMetadata `protobuf:"bytes,6,rep,name=procedures,proto3" json:"procedures,omitempty"`
	// The streams is the list of streams in a schema, currently, only used for Snowflake.
	Streams []*BranchStreamMetadata `protobuf:"bytes,7,rep,name=streams,proto3" json:"streams,omitempty"`
	// The routines is the list of routines in a schema, currently, only used for Snowflake.
	Tasks []*BranchTaskMetadata `protobuf:"bytes,8,rep,name=tasks,proto3" json:"tasks,omitempty"`
	// The materialized_views is the list of materialized views in a schema.
	MaterializedViews []*BranchMaterializedViewMetadata `protobuf:"bytes,9,rep,name=materialized_views,json=materializedViews,proto3" json:"materialized_views,omitempty"`
	// The last updater of the object.
	// Format: users/{email}
	Updater string `protobuf:"bytes,10,opt,name=updater,proto3" json:"updater,omitempty"`
	// The timestamp when the object was last updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *BranchSchemaMetadata) Reset() {
	*x = BranchSchemaMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_branch_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BranchSchemaMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BranchSchemaMetadata) ProtoMessage() {}

func (x *BranchSchemaMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_v1_branch_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BranchSchemaMetadata.ProtoReflect.Descriptor instead.
func (*BranchSchemaMetadata) Descriptor() ([]byte, []int) {
	return file_v1_branch_service_proto_rawDescGZIP(), []int{15}
}

func (x *BranchSchemaMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BranchSchemaMetadata) GetTables() []*BranchTableMetadata {
	if x != nil {
		return x.Tables
	}
	return nil
}

func (x *BranchSchemaMetadata) GetExternalTables() []*BranchExternalTableMetadata {
	if x != nil {
		return x.ExternalTables
	}
	return nil
}

func (x *BranchSchemaMetadata) GetViews() []*BranchViewMetadata {
	if x != nil {
		return x.Views
	}
	return nil
}

func (x *BranchSchemaMetadata) GetFunctions() []*BranchFunctionMetadata {
	if x != nil {
		return x.Functions
	}
	return nil
}

func (x *BranchSchemaMetadata) GetProcedures() []*BranchProcedureMetadata {
	if x != nil {
		return x.Procedures
	}
	return nil
}

func (x *BranchSchemaMetadata) GetStreams() []*BranchStreamMetadata {
	if x != nil {
		return x.Streams
	}
	return nil
}

func (x *BranchSchemaMetadata) GetTasks() []*BranchTaskMetadata {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *BranchSchemaMetadata) GetMaterializedViews() []*BranchMaterializedViewMetadata {
	if x != nil {
		return x.MaterializedViews
	}
	return nil
}

func (x *BranchSchemaMetadata) GetUpdater() string {
	if x != nil {
		return x.Updater
	}
	return ""
}

func (x *BranchSchemaMetadata) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

type BranchTaskMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name is the name of a task.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The id is the snowflake-generated id of a task.
	// Example: 01ad32a0-1bb6-5e93-0000-000000000001
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// The owner of the task.
	Owner string `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	// The comment of the task.
	Comment string `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment,omitempty"`
	// The warehouse of the task.
	Warehouse string `protobuf:"bytes,5,opt,name=warehouse,proto3" json:"warehouse,omitempty"`
	// The schedule interval of the task.
	Schedule string `protobuf:"bytes,6,opt,name=schedule,proto3" json:"schedule,omitempty"`
	// The predecessor tasks of the task.
	Predecessors []string `protobuf:"bytes,7,rep,name=predecessors,proto3" json:"predecessors,omitempty"`
	// The state of the task.
	State BranchTaskMetadata_State `protobuf:"varint,8,opt,name=state,proto3,enum=bytebase.v1.BranchTaskMetadata_State" json:"state,omitempty"`
	// The condition of the task.
	Condition string `protobuf:"bytes,9,opt,name=condition,proto3" json:"condition,omitempty"`
	// The definition of the task.
	Definition string `protobuf:"bytes,10,opt,name=definition,proto3" json:"definition,omitempty"`
}

func (x *BranchTaskMetadata) Reset() {
	*x = BranchTaskMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_branch_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BranchTaskMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BranchTaskMetadata) ProtoMessage() {}

func (x *BranchTaskMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_v1_branch_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BranchTaskMetadata.ProtoReflect.Descriptor instead.
func (*BranchTaskMetadata) Descriptor() ([]byte, []int) {
	return file_v1_branch_service_proto_rawDescGZIP(), []int{16}
}

func (x *BranchTaskMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BranchTaskMetadata) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BranchTaskMetadata) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *BranchTaskMetadata) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *BranchTaskMetadata) GetWarehouse() string {
	if x != nil {
		return x.Warehouse
	}
	return ""
}

func (x *BranchTaskMetadata) GetSchedule() string {
	if x != nil {
		return x.Schedule
	}
	return ""
}

func (x *BranchTaskMetadata) GetPredecessors() []string {
	if x != nil {
		return x.Predecessors
	}
	return nil
}

func (x *BranchTaskMetadata) GetState() BranchTaskMetadata_State {
	if x != nil {
		return x.State
	}
	return BranchTaskMetadata_STATE_UNSPECIFIED
}

func (x *BranchTaskMetadata) GetCondition() string {
	if x != nil {
		return x.Condition
	}
	return ""
}

func (x *BranchTaskMetadata) GetDefinition() string {
	if x != nil {
		return x.Definition
	}
	return ""
}

type BranchStreamMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name is the name of a stream.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The table_name is the name of the table/view that the stream is created on.
	TableName string `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	// The owner of the stream.
	Owner string `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	// The comment of the stream.
	Comment string `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment,omitempty"`
	// The type of the stream.
	Type BranchStreamMetadata_Type `protobuf:"varint,5,opt,name=type,proto3,enum=bytebase.v1.BranchStreamMetadata_Type" json:"type,omitempty"`
	// Indicates whether the stream was last read before the `stale_after` time.
	Stale bool `protobuf:"varint,6,opt,name=stale,proto3" json:"stale,omitempty"`
	// The mode of the stream.
	Mode BranchStreamMetadata_Mode `protobuf:"varint,7,opt,name=mode,proto3,enum=bytebase.v1.BranchStreamMetadata_Mode" json:"mode,omitempty"`
	// The definition of the stream.
	Definition string `protobuf:"bytes,8,opt,name=definition,proto3" json:"definition,omitempty"`
}

func (x *BranchStreamMetadata) Reset() {
	*x = BranchStreamMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_branch_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BranchStreamMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BranchStreamMetadata) ProtoMessage() {}

func (x *BranchStreamMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_v1_branch_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BranchStreamMetadata.ProtoReflect.Descriptor instead.
func (*BranchStreamMetadata) Descriptor() ([]byte, []int) {
	return file_v1_branch_service_proto_rawDescGZIP(), []int{17}
}

func (x *BranchStreamMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BranchStreamMetadata) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *BranchStreamMetadata) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *BranchStreamMetadata) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *BranchStreamMetadata) GetType() BranchStreamMetadata_Type {
	if x != nil {
		return x.Type
	}
	return BranchStreamMetadata_TYPE_UNSPECIFIED
}

func (x *BranchStreamMetadata) GetStale() bool {
	if x != nil {
		return x.Stale
	}
	return false
}

func (x *BranchStreamMetadata) GetMode() BranchStreamMetadata_Mode {
	if x != nil {
		return x.Mode
	}
	return BranchStreamMetadata_MODE_UNSPECIFIED
}

func (x *BranchStreamMetadata) GetDefinition() string {
	if x != nil {
		return x.Definition
	}
	return ""
}

// BranchTableMetadata is the metadata for tables used in branch.
type BranchTableMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name is the name of a table.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The columns is the ordered list of columns in a table.
	Columns []*BranchColumnMetadata `protobuf:"bytes,2,rep,name=columns,proto3" json:"columns,omitempty"`
	// The indexes is the list of indexes in a table.
	Indexes []*BranchIndexMetadata `protobuf:"bytes,3,rep,name=indexes,proto3" json:"indexes,omitempty"`
	// The engine is the engine of a table.
	Engine string `protobuf:"bytes,4,opt,name=engine,proto3" json:"engine,omitempty"`
	// The collation is the collation of a table.
	Collation string `protobuf:"bytes,5,opt,name=collation,proto3" json:"collation,omitempty"`
	// The row_count is the estimated number of rows of a table.
	RowCount int64 `protobuf:"varint,6,opt,name=row_count,json=rowCount,proto3" json:"row_count,omitempty"`
	// The data_size is the estimated data size of a table.
	DataSize int64 `protobuf:"varint,7,opt,name=data_size,json=dataSize,proto3" json:"data_size,omitempty"`
	// The index_size is the estimated index size of a table.
	IndexSize int64 `protobuf:"varint,8,opt,name=index_size,json=indexSize,proto3" json:"index_size,omitempty"`
	// The data_free is the estimated free data size of a table.
	DataFree int64 `protobuf:"varint,9,opt,name=data_free,json=dataFree,proto3" json:"data_free,omitempty"`
	// The create_options is the create option of a table.
	CreateOptions string `protobuf:"bytes,10,opt,name=create_options,json=createOptions,proto3" json:"create_options,omitempty"`
	// The comment is the comment of a table.
	// classification and user_comment is parsed from the comment.
	Comment string `protobuf:"bytes,11,opt,name=comment,proto3" json:"comment,omitempty"`
	// The classification is the classification of a table parsed from the comment.
	Classification string `protobuf:"bytes,13,opt,name=classification,proto3" json:"classification,omitempty"`
	// The user_comment is the user comment of a table parsed from the comment.
	UserComment string `protobuf:"bytes,14,opt,name=user_comment,json=userComment,proto3" json:"user_comment,omitempty"`
	// The foreign_keys is the list of foreign keys in a table.
	ForeignKeys []*BranchForeignKeyMetadata `protobuf:"bytes,12,rep,name=foreign_keys,json=foreignKeys,proto3" json:"foreign_keys,omitempty"`
	// The partitions is the list of partitions in a table.
	Partitions []*BranchTablePartitionMetadata `protobuf:"bytes,15,rep,name=partitions,proto3" json:"partitions,omitempty"`
	// The last updater of the object.
	// Format: users/{email}
	Updater string `protobuf:"bytes,16,opt,name=updater,proto3" json:"updater,omitempty"`
	// The timestamp when the object was last updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,17,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *BranchTableMetadata) Reset() {
	*x = BranchTableMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_branch_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BranchTableMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BranchTableMetadata) ProtoMessage() {}

func (x *BranchTableMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_v1_branch_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BranchTableMetadata.ProtoReflect.Descriptor instead.
func (*BranchTableMetadata) Descriptor() ([]byte, []int) {
	return file_v1_branch_service_proto_rawDescGZIP(), []int{18}
}

func (x *BranchTableMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BranchTableMetadata) GetColumns() []*BranchColumnMetadata {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *BranchTableMetadata) GetIndexes() []*BranchIndexMetadata {
	if x != nil {
		return x.Indexes
	}
	return nil
}

func (x *BranchTableMetadata) GetEngine() string {
	if x != nil {
		return x.Engine
	}
	return ""
}

func (x *BranchTableMetadata) GetCollation() string {
	if x != nil {
		return x.Collation
	}
	return ""
}

func (x *BranchTableMetadata) GetRowCount() int64 {
	if x != nil {
		return x.RowCount
	}
	return 0
}

func (x *BranchTableMetadata) GetDataSize() int64 {
	if x != nil {
		return x.DataSize
	}
	return 0
}

func (x *BranchTableMetadata) GetIndexSize() int64 {
	if x != nil {
		return x.IndexSize
	}
	return 0
}

func (x *BranchTableMetadata) GetDataFree() int64 {
	if x != nil {
		return x.DataFree
	}
	return 0
}

func (x *BranchTableMetadata) GetCreateOptions() string {
	if x != nil {
		return x.CreateOptions
	}
	return ""
}

func (x *BranchTableMetadata) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *BranchTableMetadata) GetClassification() string {
	if x != nil {
		return x.Classification
	}
	return ""
}

func (x *BranchTableMetadata) GetUserComment() string {
	if x != nil {
		return x.UserComment
	}
	return ""
}

func (x *BranchTableMetadata) GetForeignKeys() []*BranchForeignKeyMetadata {
	if x != nil {
		return x.ForeignKeys
	}
	return nil
}

func (x *BranchTableMetadata) GetPartitions() []*BranchTablePartitionMetadata {
	if x != nil {
		return x.Partitions
	}
	return nil
}

func (x *BranchTableMetadata) GetUpdater() string {
	if x != nil {
		return x.Updater
	}
	return ""
}

func (x *BranchTableMetadata) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

type BranchExternalTableMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name is the name of a external table.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The external_server_name is the name of the external server.
	ExternalServerName string `protobuf:"bytes,2,opt,name=external_server_name,json=externalServerName,proto3" json:"external_server_name,omitempty"`
	// The external_database_name is the name of the external database.
	ExternalDatabaseName string `protobuf:"bytes,3,opt,name=external_database_name,json=externalDatabaseName,proto3" json:"external_database_name,omitempty"`
	// The columns is the ordered list of columns in a foreign table.
	Columns []*BranchColumnMetadata `protobuf:"bytes,4,rep,name=columns,proto3" json:"columns,omitempty"`
}

func (x *BranchExternalTableMetadata) Reset() {
	*x = BranchExternalTableMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_branch_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BranchExternalTableMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BranchExternalTableMetadata) ProtoMessage() {}

func (x *BranchExternalTableMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_v1_branch_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BranchExternalTableMetadata.ProtoReflect.Descriptor instead.
func (*BranchExternalTableMetadata) Descriptor() ([]byte, []int) {
	return file_v1_branch_service_proto_rawDescGZIP(), []int{19}
}

func (x *BranchExternalTableMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BranchExternalTableMetadata) GetExternalServerName() string {
	if x != nil {
		return x.ExternalServerName
	}
	return ""
}

func (x *BranchExternalTableMetadata) GetExternalDatabaseName() string {
	if x != nil {
		return x.ExternalDatabaseName
	}
	return ""
}

func (x *BranchExternalTableMetadata) GetColumns() []*BranchColumnMetadata {
	if x != nil {
		return x.Columns
	}
	return nil
}

// BranchTablePartitionMetadata is the metadata for table partitions used in branch.
type BranchTablePartitionMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name is the name of a table partition.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The type of a table partition.
	Type BranchTablePartitionMetadata_Type `protobuf:"varint,2,opt,name=type,proto3,enum=bytebase.v1.BranchTablePartitionMetadata_Type" json:"type,omitempty"`
	// The expression is the expression of a table partition.
	// For PostgreSQL, the expression is the text of {FOR VALUES partition_bound_spec}, see https://www.postgresql.org/docs/current/sql-createtable.html.
	// For MySQL, the expression is the `expr` or `column_list` of the following syntax.
	// PARTITION BY
	//
	//	{ [LINEAR] HASH(expr)
	//	| [LINEAR] KEY [ALGORITHM={1 | 2}] (column_list)
	//	| RANGE{(expr) | COLUMNS(column_list)}
	//	| LIST{(expr) | COLUMNS(column_list)} }.
	Expression string `protobuf:"bytes,3,opt,name=expression,proto3" json:"expression,omitempty"`
	// The value is the value of a table partition.
	// For MySQL, the value is for RANGE and LIST partition types,
	// - For a RANGE partition, it contains the value set in the partition's VALUES LESS THAN clause, which can be either an integer or MAXVALUE.
	// - For a LIST partition, this column contains the values defined in the partition's VALUES IN clause, which is a list of comma-separated integer values.
	// - For others, it's an empty string.
	Value string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	// The use_default is whether the users use the default partition, it stores the different value for different database engines.
	// For MySQL, it's [INT] type, 0 means not use default partition, otherwise, it's equals to number in syntax [SUB]PARTITION {number}.
	UseDefault string `protobuf:"bytes,5,opt,name=use_default,json=useDefault,proto3" json:"use_default,omitempty"`
	// The subpartitions is the list of subpartitions in a table partition.
	Subpartitions []*BranchTablePartitionMetadata `protobuf:"bytes,6,rep,name=subpartitions,proto3" json:"subpartitions,omitempty"`
}

func (x *BranchTablePartitionMetadata) Reset() {
	*x = BranchTablePartitionMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_branch_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BranchTablePartitionMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BranchTablePartitionMetadata) ProtoMessage() {}

func (x *BranchTablePartitionMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_v1_branch_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BranchTablePartitionMetadata.ProtoReflect.Descriptor instead.
func (*BranchTablePartitionMetadata) Descriptor() ([]byte, []int) {
	return file_v1_branch_service_proto_rawDescGZIP(), []int{20}
}

func (x *BranchTablePartitionMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BranchTablePartitionMetadata) GetType() BranchTablePartitionMetadata_Type {
	if x != nil {
		return x.Type
	}
	return BranchTablePartitionMetadata_TYPE_UNSPECIFIED
}

func (x *BranchTablePartitionMetadata) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

func (x *BranchTablePartitionMetadata) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *BranchTablePartitionMetadata) GetUseDefault() string {
	if x != nil {
		return x.UseDefault
	}
	return ""
}

func (x *BranchTablePartitionMetadata) GetSubpartitions() []*BranchTablePartitionMetadata {
	if x != nil {
		return x.Subpartitions
	}
	return nil
}

// BranchColumnMetadata is the metadata for columns used in branch.
type BranchColumnMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name is the name of a column.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The position is the position in columns.
	Position int32 `protobuf:"varint,2,opt,name=position,proto3" json:"position,omitempty"`
	// The default_value is the default value of a column.
	//
	// Types that are assignable to DefaultValue:
	//
	//	*BranchColumnMetadata_Default
	//	*BranchColumnMetadata_DefaultNull
	//	*BranchColumnMetadata_DefaultExpression
	DefaultValue isBranchColumnMetadata_DefaultValue `protobuf_oneof:"default_value"`
	// The on_update is the on update action of a column.
	// For MySQL like databases, it's only supported for TIMESTAMP columns with CURRENT_TIMESTAMP as on update value.
	OnUpdate string `protobuf:"bytes,13,opt,name=on_update,json=onUpdate,proto3" json:"on_update,omitempty"`
	// The nullable is the nullable of a column.
	Nullable bool `protobuf:"varint,6,opt,name=nullable,proto3" json:"nullable,omitempty"`
	// The type is the type of a column.
	Type string `protobuf:"bytes,7,opt,name=type,proto3" json:"type,omitempty"`
	// The character_set is the character_set of a column.
	CharacterSet string `protobuf:"bytes,8,opt,name=character_set,json=characterSet,proto3" json:"character_set,omitempty"`
	// The collation is the collation of a column.
	Collation string `protobuf:"bytes,9,opt,name=collation,proto3" json:"collation,omitempty"`
	// The comment is the comment of a column.
	// classification and user_comment is parsed from the comment.
	Comment string `protobuf:"bytes,10,opt,name=comment,proto3" json:"comment,omitempty"`
	// The classification is the classification of a table parsed from the comment.
	Classification string `protobuf:"bytes,11,opt,name=classification,proto3" json:"classification,omitempty"`
	// The user_comment is the user comment of a table parsed from the comment.
	UserComment string `protobuf:"bytes,12,opt,name=user_comment,json=userComment,proto3" json:"user_comment,omitempty"`
}

func (x *BranchColumnMetadata) Reset() {
	*x = BranchColumnMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_branch_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BranchColumnMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BranchColumnMetadata) ProtoMessage() {}

func (x *BranchColumnMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_v1_branch_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BranchColumnMetadata.ProtoReflect.Descriptor instead.
func (*BranchColumnMetadata) Descriptor() ([]byte, []int) {
	return file_v1_branch_service_proto_rawDescGZIP(), []int{21}
}

func (x *BranchColumnMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BranchColumnMetadata) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (m *BranchColumnMetadata) GetDefaultValue() isBranchColumnMetadata_DefaultValue {
	if m != nil {
		return m.DefaultValue
	}
	return nil
}

func (x *BranchColumnMetadata) GetDefault() *wrapperspb.StringValue {
	if x, ok := x.GetDefaultValue().(*BranchColumnMetadata_Default); ok {
		return x.Default
	}
	return nil
}

func (x *BranchColumnMetadata) GetDefaultNull() bool {
	if x, ok := x.GetDefaultValue().(*BranchColumnMetadata_DefaultNull); ok {
		return x.DefaultNull
	}
	return false
}

func (x *BranchColumnMetadata) GetDefaultExpression() string {
	if x, ok := x.GetDefaultValue().(*BranchColumnMetadata_DefaultExpression); ok {
		return x.DefaultExpression
	}
	return ""
}

func (x *BranchColumnMetadata) GetOnUpdate() string {
	if x != nil {
		return x.OnUpdate
	}
	return ""
}

func (x *BranchColumnMetadata) GetNullable() bool {
	if x != nil {
		return x.Nullable
	}
	return false
}

func (x *BranchColumnMetadata) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *BranchColumnMetadata) GetCharacterSet() string {
	if x != nil {
		return x.CharacterSet
	}
	return ""
}

func (x *BranchColumnMetadata) GetCollation() string {
	if x != nil {
		return x.Collation
	}
	return ""
}

func (x *BranchColumnMetadata) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *BranchColumnMetadata) GetClassification() string {
	if x != nil {
		return x.Classification
	}
	return ""
}

func (x *BranchColumnMetadata) GetUserComment() string {
	if x != nil {
		return x.UserComment
	}
	return ""
}

type isBranchColumnMetadata_DefaultValue interface {
	isBranchColumnMetadata_DefaultValue()
}

type BranchColumnMetadata_Default struct {
	// The default is the default of a column. Use google.protobuf.StringValue to distinguish between an empty string default value or no default.
	Default *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=default,proto3,oneof"`
}

type BranchColumnMetadata_DefaultNull struct {
	DefaultNull bool `protobuf:"varint,4,opt,name=default_null,json=defaultNull,proto3,oneof"`
}

type BranchColumnMetadata_DefaultExpression struct {
	DefaultExpression string `protobuf:"bytes,5,opt,name=default_expression,json=defaultExpression,proto3,oneof"`
}

func (*BranchColumnMetadata_Default) isBranchColumnMetadata_DefaultValue() {}

func (*BranchColumnMetadata_DefaultNull) isBranchColumnMetadata_DefaultValue() {}

func (*BranchColumnMetadata_DefaultExpression) isBranchColumnMetadata_DefaultValue() {}

// BranchViewMetadata is the metadata for views used in branch.
type BranchViewMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name is the name of a view.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The definition is the definition of a view.
	Definition string `protobuf:"bytes,2,opt,name=definition,proto3" json:"definition,omitempty"`
	// The comment is the comment of a view.
	Comment string `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
	// The dependent_columns is the list of dependent columns of a view.
	DependentColumns []*BranchDependentColumn `protobuf:"bytes,4,rep,name=dependent_columns,json=dependentColumns,proto3" json:"dependent_columns,omitempty"`
	// The last updater of the object.
	// Format: users/{email}
	Updater string `protobuf:"bytes,5,opt,name=updater,proto3" json:"updater,omitempty"`
	// The timestamp when the object was last updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *BranchViewMetadata) Reset() {
	*x = BranchViewMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_branch_service_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BranchViewMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BranchViewMetadata) ProtoMessage() {}

func (x *BranchViewMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_v1_branch_service_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BranchViewMetadata.ProtoReflect.Descriptor instead.
func (*BranchViewMetadata) Descriptor() ([]byte, []int) {
	return file_v1_branch_service_proto_rawDescGZIP(), []int{22}
}

func (x *BranchViewMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BranchViewMetadata) GetDefinition() string {
	if x != nil {
		return x.Definition
	}
	return ""
}

func (x *BranchViewMetadata) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *BranchViewMetadata) GetDependentColumns() []*BranchDependentColumn {
	if x != nil {
		return x.DependentColumns
	}
	return nil
}

func (x *BranchViewMetadata) GetUpdater() string {
	if x != nil {
		return x.Updater
	}
	return ""
}

func (x *BranchViewMetadata) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

// BranchDependentColumn is the metadata for dependent columns used in branch.
type BranchDependentColumn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The schema is the schema of a reference column.
	Schema string `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
	// The table is the table of a reference column.
	Table string `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
	// The column is the name of a reference column.
	Column string `protobuf:"bytes,3,opt,name=column,proto3" json:"column,omitempty"`
}

func (x *BranchDependentColumn) Reset() {
	*x = BranchDependentColumn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_branch_service_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BranchDependentColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BranchDependentColumn) ProtoMessage() {}

func (x *BranchDependentColumn) ProtoReflect() protoreflect.Message {
	mi := &file_v1_branch_service_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BranchDependentColumn.ProtoReflect.Descriptor instead.
func (*BranchDependentColumn) Descriptor() ([]byte, []int) {
	return file_v1_branch_service_proto_rawDescGZIP(), []int{23}
}

func (x *BranchDependentColumn) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *BranchDependentColumn) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *BranchDependentColumn) GetColumn() string {
	if x != nil {
		return x.Column
	}
	return ""
}

// BranchMaterializedViewMetadata is the metadata for materialized views used in branch.
type BranchMaterializedViewMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name is the name of a view.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The definition is the definition of a view.
	Definition string `protobuf:"bytes,2,opt,name=definition,proto3" json:"definition,omitempty"`
	// The comment is the comment of a view.
	Comment string `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
	// The dependent_columns is the list of dependent columns of a view.
	DependentColumns []*BranchDependentColumn `protobuf:"bytes,4,rep,name=dependent_columns,json=dependentColumns,proto3" json:"dependent_columns,omitempty"`
}

func (x *BranchMaterializedViewMetadata) Reset() {
	*x = BranchMaterializedViewMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_branch_service_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BranchMaterializedViewMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BranchMaterializedViewMetadata) ProtoMessage() {}

func (x *BranchMaterializedViewMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_v1_branch_service_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BranchMaterializedViewMetadata.ProtoReflect.Descriptor instead.
func (*BranchMaterializedViewMetadata) Descriptor() ([]byte, []int) {
	return file_v1_branch_service_proto_rawDescGZIP(), []int{24}
}

func (x *BranchMaterializedViewMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BranchMaterializedViewMetadata) GetDefinition() string {
	if x != nil {
		return x.Definition
	}
	return ""
}

func (x *BranchMaterializedViewMetadata) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *BranchMaterializedViewMetadata) GetDependentColumns() []*BranchDependentColumn {
	if x != nil {
		return x.DependentColumns
	}
	return nil
}

// BranchFunctionMetadata is the metadata for functions used in branch.
type BranchFunctionMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name is the name of a function.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The definition is the definition of a function.
	Definition string `protobuf:"bytes,2,opt,name=definition,proto3" json:"definition,omitempty"`
	// The last updater of the object.
	// Format: users/{email}
	Updater string `protobuf:"bytes,3,opt,name=updater,proto3" json:"updater,omitempty"`
	// The timestamp when the object was last updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *BranchFunctionMetadata) Reset() {
	*x = BranchFunctionMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_branch_service_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BranchFunctionMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BranchFunctionMetadata) ProtoMessage() {}

func (x *BranchFunctionMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_v1_branch_service_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BranchFunctionMetadata.ProtoReflect.Descriptor instead.
func (*BranchFunctionMetadata) Descriptor() ([]byte, []int) {
	return file_v1_branch_service_proto_rawDescGZIP(), []int{25}
}

func (x *BranchFunctionMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BranchFunctionMetadata) GetDefinition() string {
	if x != nil {
		return x.Definition
	}
	return ""
}

func (x *BranchFunctionMetadata) GetUpdater() string {
	if x != nil {
		return x.Updater
	}
	return ""
}

func (x *BranchFunctionMetadata) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

// BranchProcedureMetadata is the metadata for procedures used in branch.
type BranchProcedureMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name is the name of a procedure.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The definition is the definition of a procedure.
	Definition string `protobuf:"bytes,2,opt,name=definition,proto3" json:"definition,omitempty"`
	// The last updater of the object.
	// Format: users/{email}
	Updater string `protobuf:"bytes,3,opt,name=updater,proto3" json:"updater,omitempty"`
	// The timestamp when the object was last updated.
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
}

func (x *BranchProcedureMetadata) Reset() {
	*x = BranchProcedureMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_branch_service_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BranchProcedureMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BranchProcedureMetadata) ProtoMessage() {}

func (x *BranchProcedureMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_v1_branch_service_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BranchProcedureMetadata.ProtoReflect.Descriptor instead.
func (*BranchProcedureMetadata) Descriptor() ([]byte, []int) {
	return file_v1_branch_service_proto_rawDescGZIP(), []int{26}
}

func (x *BranchProcedureMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BranchProcedureMetadata) GetDefinition() string {
	if x != nil {
		return x.Definition
	}
	return ""
}

func (x *BranchProcedureMetadata) GetUpdater() string {
	if x != nil {
		return x.Updater
	}
	return ""
}

func (x *BranchProcedureMetadata) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

// BranchIndexMetadata is the metadata for indexes used in branch.
type BranchIndexMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name is the name of an index.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The expressions are the ordered columns or expressions of an index.
	// This could refer to a column or an expression.
	Expressions []string `protobuf:"bytes,2,rep,name=expressions,proto3" json:"expressions,omitempty"`
	// The key_lengths are the ordered key lengths of an index.
	// If the key length is not specified, it's -1.
	KeyLength []int64 `protobuf:"varint,9,rep,packed,name=key_length,json=keyLength,proto3" json:"key_length,omitempty"`
	// The type is the type of an index.
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// The unique is whether the index is unique.
	Unique bool `protobuf:"varint,4,opt,name=unique,proto3" json:"unique,omitempty"`
	// The primary is whether the index is a primary key index.
	Primary bool `protobuf:"varint,5,opt,name=primary,proto3" json:"primary,omitempty"`
	// The visible is whether the index is visible.
	Visible bool `protobuf:"varint,6,opt,name=visible,proto3" json:"visible,omitempty"`
	// The comment is the comment of an index.
	Comment string `protobuf:"bytes,7,opt,name=comment,proto3" json:"comment,omitempty"`
	// The definition of an index.
	Definition string `protobuf:"bytes,8,opt,name=definition,proto3" json:"definition,omitempty"`
}

func (x *BranchIndexMetadata) Reset() {
	*x = BranchIndexMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_branch_service_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BranchIndexMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BranchIndexMetadata) ProtoMessage() {}

func (x *BranchIndexMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_v1_branch_service_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BranchIndexMetadata.ProtoReflect.Descriptor instead.
func (*BranchIndexMetadata) Descriptor() ([]byte, []int) {
	return file_v1_branch_service_proto_rawDescGZIP(), []int{27}
}

func (x *BranchIndexMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BranchIndexMetadata) GetExpressions() []string {
	if x != nil {
		return x.Expressions
	}
	return nil
}

func (x *BranchIndexMetadata) GetKeyLength() []int64 {
	if x != nil {
		return x.KeyLength
	}
	return nil
}

func (x *BranchIndexMetadata) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *BranchIndexMetadata) GetUnique() bool {
	if x != nil {
		return x.Unique
	}
	return false
}

func (x *BranchIndexMetadata) GetPrimary() bool {
	if x != nil {
		return x.Primary
	}
	return false
}

func (x *BranchIndexMetadata) GetVisible() bool {
	if x != nil {
		return x.Visible
	}
	return false
}

func (x *BranchIndexMetadata) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *BranchIndexMetadata) GetDefinition() string {
	if x != nil {
		return x.Definition
	}
	return ""
}

// BranchExtensionMetadata is the metadata for extensions used in branch.
type BranchExtensionMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name is the name of an extension.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The schema is the extension that is installed to. But the extension usage is not limited to the schema.
	Schema string `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
	// The version is the version of an extension.
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	// The description is the description of an extension.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *BranchExtensionMetadata) Reset() {
	*x = BranchExtensionMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_branch_service_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BranchExtensionMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BranchExtensionMetadata) ProtoMessage() {}

func (x *BranchExtensionMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_v1_branch_service_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BranchExtensionMetadata.ProtoReflect.Descriptor instead.
func (*BranchExtensionMetadata) Descriptor() ([]byte, []int) {
	return file_v1_branch_service_proto_rawDescGZIP(), []int{28}
}

func (x *BranchExtensionMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BranchExtensionMetadata) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *BranchExtensionMetadata) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *BranchExtensionMetadata) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// BranchForeignKeyMetadata is the metadata for foreign keys used in branch.
type BranchForeignKeyMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name is the name of a foreign key.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The columns are the ordered referencing columns of a foreign key.
	Columns []string `protobuf:"bytes,2,rep,name=columns,proto3" json:"columns,omitempty"`
	// The referenced_schema is the referenced schema name of a foreign key.
	// It is an empty string for databases without such concept such as MySQL.
	ReferencedSchema string `protobuf:"bytes,3,opt,name=referenced_schema,json=referencedSchema,proto3" json:"referenced_schema,omitempty"`
	// The referenced_table is the referenced table name of a foreign key.
	ReferencedTable string `protobuf:"bytes,4,opt,name=referenced_table,json=referencedTable,proto3" json:"referenced_table,omitempty"`
	// The referenced_columns are the ordered referenced columns of a foreign key.
	ReferencedColumns []string `protobuf:"bytes,5,rep,name=referenced_columns,json=referencedColumns,proto3" json:"referenced_columns,omitempty"`
	// The on_delete is the on delete action of a foreign key.
	OnDelete string `protobuf:"bytes,6,opt,name=on_delete,json=onDelete,proto3" json:"on_delete,omitempty"`
	// The on_update is the on update action of a foreign key.
	OnUpdate string `protobuf:"bytes,7,opt,name=on_update,json=onUpdate,proto3" json:"on_update,omitempty"`
	// The match_type is the match type of a foreign key.
	// The match_type is the PostgreSQL specific field.
	// It's empty string for other databases.
	MatchType string `protobuf:"bytes,8,opt,name=match_type,json=matchType,proto3" json:"match_type,omitempty"`
}

func (x *BranchForeignKeyMetadata) Reset() {
	*x = BranchForeignKeyMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_branch_service_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BranchForeignKeyMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BranchForeignKeyMetadata) ProtoMessage() {}

func (x *BranchForeignKeyMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_v1_branch_service_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BranchForeignKeyMetadata.ProtoReflect.Descriptor instead.
func (*BranchForeignKeyMetadata) Descriptor() ([]byte, []int) {
	return file_v1_branch_service_proto_rawDescGZIP(), []int{29}
}

func (x *BranchForeignKeyMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BranchForeignKeyMetadata) GetColumns() []string {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *BranchForeignKeyMetadata) GetReferencedSchema() string {
	if x != nil {
		return x.ReferencedSchema
	}
	return ""
}

func (x *BranchForeignKeyMetadata) GetReferencedTable() string {
	if x != nil {
		return x.ReferencedTable
	}
	return ""
}

func (x *BranchForeignKeyMetadata) GetReferencedColumns() []string {
	if x != nil {
		return x.ReferencedColumns
	}
	return nil
}

func (x *BranchForeignKeyMetadata) GetOnDelete() string {
	if x != nil {
		return x.OnDelete
	}
	return ""
}

func (x *BranchForeignKeyMetadata) GetOnUpdate() string {
	if x != nil {
		return x.OnUpdate
	}
	return ""
}

func (x *BranchForeignKeyMetadata) GetMatchType() string {
	if x != nil {
		return x.MatchType
	}
	return ""
}

var File_v1_branch_service_proto protoreflect.FileDescriptor

var file_v1_branch_service_proto_rawDesc = []byte{
	0x0a, 0x17, 0x76, 0x31, 0x2f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f,
	0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x19, 0x76, 0x31, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x92, 0x05, 0x0a, 0x06, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x06, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x12, 0x46, 0x0a, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2d, 0x0a, 0x0f,
	0x62, 0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0e, 0x62, 0x61, 0x73,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x5d, 0x0a, 0x18, 0x62,
	0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x04, 0xe2, 0x41,
	0x01, 0x03, 0x52, 0x16, 0x62, 0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x06, 0x65, 0x6e,
	0x67, 0x69, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x62, 0x79, 0x74,
	0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52,
	0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x31, 0x0a, 0x11, 0x62, 0x61, 0x73, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x05, 0x52, 0x10, 0x62, 0x61, 0x73, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x0d, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x05, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03,
	0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x07, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03,
	0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0xe2,
	0x41, 0x01, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x2c, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xb4, 0x01,
	0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x70,
	0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2b, 0x0a, 0x04, 0x76, 0x69, 0x65, 0x77, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x56, 0x69, 0x65, 0x77, 0x52, 0x04,
	0x76, 0x69, 0x65, 0x77, 0x22, 0x6f, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x08,
	0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x52, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x12, 0x26, 0x0a,
	0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x77, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x64, 0x22, 0x99,
	0x01, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x42, 0x04, 0xe2, 0x41, 0x01,
	0x02, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x22, 0x8e, 0x01, 0x0a, 0x12, 0x4d,
	0x65, 0x72, 0x67, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x18, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x68,
	0x65, 0x61, 0x64, 0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x68, 0x65, 0x61, 0x64, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x18, 0x0a, 0x04,
	0x65, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x01,
	0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0xdb, 0x01, 0x0a, 0x13,
	0x52, 0x65, 0x62, 0x61, 0x73, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a,
	0x0f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x23, 0x0a, 0x0d, 0x6d,
	0x65, 0x72, 0x67, 0x65, 0x64, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x12, 0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x65, 0x74, 0x61, 0x67, 0x12, 0x23, 0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0x7a, 0x0a, 0x14, 0x52, 0x65, 0x62,
	0x61, 0x73, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2d, 0x0a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x48, 0x00, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x12, 0x29, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x5f, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x6f, 0x6e,
	0x66, 0x6c, 0x69, 0x63, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x42, 0x08, 0x0a, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x45, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x22, 0x4b, 0x0a, 0x13,
	0x44, 0x69, 0x66, 0x66, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52,
	0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x22, 0x79, 0x0a, 0x14, 0x44, 0x69, 0x66,
	0x66, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x69, 0x66, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x64, 0x69, 0x66, 0x66, 0x12, 0x18, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12,
	0x29, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x66,
	0x6c, 0x69, 0x63, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0xde, 0x01, 0x0a, 0x13, 0x44, 0x69, 0x66, 0x66, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x0f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x0e, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4c, 0x0a, 0x0f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x06, 0x65, 0x6e, 0x67, 0x69,
	0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x06, 0x65,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x22, 0x2a, 0x0a, 0x14, 0x44, 0x69, 0x66, 0x66, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x64, 0x69, 0x66, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x69, 0x66,
	0x66, 0x22, 0xb3, 0x02, 0x0a, 0x1c, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x07, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6c,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0a, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x79, 0x74,
	0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x65, 0x78, 0x74, 0x65,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xaa, 0x05, 0x0a, 0x14, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x51,
	0x0a, 0x0f, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x45, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x0e, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x12, 0x35, 0x0a, 0x05, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x05, 0x76, 0x69, 0x65, 0x77, 0x73, 0x12, 0x41, 0x0a, 0x09, 0x66, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x79,
	0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x44, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65,
	0x73, 0x12, 0x3b, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x07, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x12, 0x35,
	0x0a, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x05,
	0x74, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x5a, 0x0a, 0x12, 0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x11,
	0x6d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x56, 0x69, 0x65, 0x77,
	0x73, 0x12, 0x1e, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x72, 0x12, 0x41, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0x89, 0x03, 0x0a, 0x12, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x54,
	0x61, 0x73, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x72, 0x65,
	0x64, 0x65, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0c, 0x70, 0x72, 0x65, 0x64, 0x65, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x73, 0x12, 0x3b, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x62,
	0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x54, 0x61, 0x73, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x46, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x54, 0x41, 0x54,
	0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x53,
	0x54, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x55, 0x53, 0x50, 0x45, 0x4e, 0x44, 0x45, 0x44, 0x10, 0x02,
	0x22, 0xb1, 0x03, 0x0a, 0x14, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x62, 0x79, 0x74,
	0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x6c,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x73, 0x74, 0x61, 0x6c, 0x65, 0x12, 0x3a,
	0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x62,
	0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2c, 0x0a, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x44, 0x45, 0x4c, 0x54, 0x41, 0x10, 0x01, 0x22, 0x5a, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x14, 0x0a, 0x10, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x44,
	0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x4d, 0x4f, 0x44, 0x45,
	0x5f, 0x41, 0x50, 0x50, 0x45, 0x4e, 0x44, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x02, 0x12, 0x14,
	0x0a, 0x10, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x4e, 0x53, 0x45, 0x52, 0x54, 0x5f, 0x4f, 0x4e,
	0x4c, 0x59, 0x10, 0x03, 0x22, 0xd2, 0x05, 0x0a, 0x13, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x3b, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x3a, 0x0a,
	0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x67,
	0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1b, 0x0a, 0x09, 0x72, 0x6f, 0x77, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x72, 0x6f, 0x77, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x64, 0x61, 0x74, 0x61, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x66, 0x72, 0x65, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x64, 0x61, 0x74,
	0x61, 0x46, 0x72, 0x65, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21,
	0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x48, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x5f, 0x6b, 0x65, 0x79,
	0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x46, 0x6f, 0x72, 0x65,
	0x69, 0x67, 0x6e, 0x4b, 0x65, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0b,
	0x66, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x49, 0x0a, 0x0a, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x07, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xd6, 0x01, 0x0a, 0x1b, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a,
	0x14, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x34, 0x0a, 0x16, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x73, 0x22, 0xab, 0x03, 0x0a, 0x1c, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x12, 0x4f, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x62, 0x79, 0x74, 0x65,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x22, 0x8a, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x01, 0x12, 0x11, 0x0a,
	0x0d, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x53, 0x10, 0x02,
	0x12, 0x08, 0x0a, 0x04, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x49,
	0x53, 0x54, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x53, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04,
	0x48, 0x41, 0x53, 0x48, 0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x49, 0x4e, 0x45, 0x41, 0x52,
	0x5f, 0x48, 0x41, 0x53, 0x48, 0x10, 0x06, 0x12, 0x07, 0x0a, 0x03, 0x4b, 0x45, 0x59, 0x10, 0x07,
	0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x49, 0x4e, 0x45, 0x41, 0x52, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x08,
	0x22, 0xdc, 0x03, 0x0a, 0x14, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x07, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x12, 0x23, 0x0a, 0x0c, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6e,
	0x75, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x2f, 0x0a, 0x12, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x6e, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x6e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63,
	0x74, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6c, 0x61,
	0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0f,
	0x0a, 0x0d, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x96, 0x02, 0x0a, 0x12, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x56, 0x69, 0x65, 0x77, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4f, 0x0a, 0x11, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e,
	0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x52, 0x10, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x07, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x5d, 0x0a, 0x15, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0xbf, 0x01, 0x0a, 0x1e, 0x42, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x56, 0x69,
	0x65, 0x77, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4f, 0x0a, 0x11, 0x64, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x52, 0x10, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x22, 0xaf, 0x01, 0x0a, 0x16, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52,
	0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xb0, 0x01, 0x0a, 0x17,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64,
	0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x07, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41,
	0x01, 0x03, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0b, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0xe2, 0x41,
	0x01, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x84,
	0x02, 0x0a, 0x13, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x6b, 0x65, 0x79, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x09, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x09, 0x6b, 0x65, 0x79, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x65, 0x66, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x81, 0x01, 0x0a, 0x17, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x18, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa8, 0x02, 0x0a, 0x18, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x4b, 0x65, 0x79, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x64, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x5f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2d, 0x0a, 0x12,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x6f,
	0x6e, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x6e, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x6e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x74, 0x63, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x2a, 0x56, 0x0a, 0x0a, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x56, 0x69,
	0x65, 0x77, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x5f, 0x56, 0x49, 0x45,
	0x57, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x15, 0x0a, 0x11, 0x42, 0x52, 0x41, 0x4e, 0x43, 0x48, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x42,
	0x41, 0x53, 0x49, 0x43, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x52, 0x41, 0x4e, 0x43, 0x48,
	0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x10, 0x02, 0x32, 0xba, 0x09, 0x0a,
	0x0d, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x70,
	0x0a, 0x09, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x1d, 0x2e, 0x62, 0x79,
	0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x62, 0x79, 0x74,
	0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x22,
	0x2f, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20,
	0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x2f, 0x2a, 0x7d,
	0x12, 0x80, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65,
	0x73, 0x12, 0x20, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x2b, 0xda, 0x41, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x22, 0x12, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x65, 0x73, 0x12, 0x85, 0x01, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x72,
	0x61, 0x6e, 0x63, 0x68, 0x12, 0x20, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x22, 0x3e, 0xda, 0x41, 0x0d,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x2c, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x28, 0x3a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x22, 0x1e, 0x2f, 0x76, 0x31,
	0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x93, 0x01, 0x0a, 0x0c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x20, 0x2e, 0x62,
	0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13,
	0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x72, 0x61,
	0x6e, 0x63, 0x68, 0x22, 0x4c, 0xda, 0x41, 0x12, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x2c, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31,
	0x3a, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x32, 0x27, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x62,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x2f, 0x2a,
	0x7d, 0x12, 0x7a, 0x0a, 0x0b, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68,
	0x12, 0x1f, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x65, 0x72, 0x67, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x13, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x22, 0x35, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x28, 0x22, 0x26, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x62, 0x72, 0x61, 0x6e,
	0x63, 0x68, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x12, 0x8b, 0x01,
	0x0a, 0x0c, 0x52, 0x65, 0x62, 0x61, 0x73, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x20,
	0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x62,
	0x61, 0x73, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x62, 0x61, 0x73, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x36, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x29, 0x22, 0x27, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65,
	0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x72, 0x65, 0x62, 0x61, 0x73, 0x65, 0x12, 0x79, 0x0a, 0x0c, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x20, 0x2e, 0x62, 0x79,
	0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x2f, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x22, 0x2a, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x62, 0x72, 0x61, 0x6e, 0x63,
	0x68, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0x91, 0x01, 0x0a, 0x0c, 0x44, 0x69, 0x66, 0x66, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x20, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x62, 0x79, 0x74, 0x65,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x44, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3c, 0xda, 0x41,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2f, 0x22, 0x2d, 0x2f, 0x76, 0x31,
	0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f,
	0x2a, 0x2f, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x64, 0x69,
	0x66, 0x66, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x7d, 0x0a, 0x0c, 0x44, 0x69,
	0x66, 0x66, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x20, 0x2e, 0x62, 0x79, 0x74,
	0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x62,
	0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a, 0x01, 0x2a, 0x22, 0x1d, 0x2f, 0x76, 0x31, 0x2f,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x44, 0x65, 0x73, 0x69, 0x67, 0x6e, 0x3a, 0x64, 0x69, 0x66,
	0x66, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x11, 0x5a, 0x0f, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x67, 0x6f, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v1_branch_service_proto_rawDescOnce sync.Once
	file_v1_branch_service_proto_rawDescData = file_v1_branch_service_proto_rawDesc
)

func file_v1_branch_service_proto_rawDescGZIP() []byte {
	file_v1_branch_service_proto_rawDescOnce.Do(func() {
		file_v1_branch_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_branch_service_proto_rawDescData)
	})
	return file_v1_branch_service_proto_rawDescData
}

var file_v1_branch_service_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_v1_branch_service_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_v1_branch_service_proto_goTypes = []interface{}{
	(BranchView)(0),                        // 0: bytebase.v1.BranchView
	(BranchTaskMetadata_State)(0),          // 1: bytebase.v1.BranchTaskMetadata.State
	(BranchStreamMetadata_Type)(0),         // 2: bytebase.v1.BranchStreamMetadata.Type
	(BranchStreamMetadata_Mode)(0),         // 3: bytebase.v1.BranchStreamMetadata.Mode
	(BranchTablePartitionMetadata_Type)(0), // 4: bytebase.v1.BranchTablePartitionMetadata.Type
	(*Branch)(nil),                         // 5: bytebase.v1.Branch
	(*GetBranchRequest)(nil),               // 6: bytebase.v1.GetBranchRequest
	(*ListBranchesRequest)(nil),            // 7: bytebase.v1.ListBranchesRequest
	(*ListBranchesResponse)(nil),           // 8: bytebase.v1.ListBranchesResponse
	(*CreateBranchRequest)(nil),            // 9: bytebase.v1.CreateBranchRequest
	(*UpdateBranchRequest)(nil),            // 10: bytebase.v1.UpdateBranchRequest
	(*MergeBranchRequest)(nil),             // 11: bytebase.v1.MergeBranchRequest
	(*RebaseBranchRequest)(nil),            // 12: bytebase.v1.RebaseBranchRequest
	(*RebaseBranchResponse)(nil),           // 13: bytebase.v1.RebaseBranchResponse
	(*DeleteBranchRequest)(nil),            // 14: bytebase.v1.DeleteBranchRequest
	(*DiffDatabaseRequest)(nil),            // 15: bytebase.v1.DiffDatabaseRequest
	(*DiffDatabaseResponse)(nil),           // 16: bytebase.v1.DiffDatabaseResponse
	(*DiffMetadataRequest)(nil),            // 17: bytebase.v1.DiffMetadataRequest
	(*DiffMetadataResponse)(nil),           // 18: bytebase.v1.DiffMetadataResponse
	(*BranchDatabaseSchemaMetadata)(nil),   // 19: bytebase.v1.BranchDatabaseSchemaMetadata
	(*BranchSchemaMetadata)(nil),           // 20: bytebase.v1.BranchSchemaMetadata
	(*BranchTaskMetadata)(nil),             // 21: bytebase.v1.BranchTaskMetadata
	(*BranchStreamMetadata)(nil),           // 22: bytebase.v1.BranchStreamMetadata
	(*BranchTableMetadata)(nil),            // 23: bytebase.v1.BranchTableMetadata
	(*BranchExternalTableMetadata)(nil),    // 24: bytebase.v1.BranchExternalTableMetadata
	(*BranchTablePartitionMetadata)(nil),   // 25: bytebase.v1.BranchTablePartitionMetadata
	(*BranchColumnMetadata)(nil),           // 26: bytebase.v1.BranchColumnMetadata
	(*BranchViewMetadata)(nil),             // 27: bytebase.v1.BranchViewMetadata
	(*BranchDependentColumn)(nil),          // 28: bytebase.v1.BranchDependentColumn
	(*BranchMaterializedViewMetadata)(nil), // 29: bytebase.v1.BranchMaterializedViewMetadata
	(*BranchFunctionMetadata)(nil),         // 30: bytebase.v1.BranchFunctionMetadata
	(*BranchProcedureMetadata)(nil),        // 31: bytebase.v1.BranchProcedureMetadata
	(*BranchIndexMetadata)(nil),            // 32: bytebase.v1.BranchIndexMetadata
	(*BranchExtensionMetadata)(nil),        // 33: bytebase.v1.BranchExtensionMetadata
	(*BranchForeignKeyMetadata)(nil),       // 34: bytebase.v1.BranchForeignKeyMetadata
	(*DatabaseMetadata)(nil),               // 35: bytebase.v1.DatabaseMetadata
	(Engine)(0),                            // 36: bytebase.v1.Engine
	(*timestamppb.Timestamp)(nil),          // 37: google.protobuf.Timestamp
	(*fieldmaskpb.FieldMask)(nil),          // 38: google.protobuf.FieldMask
	(*ExtensionMetadata)(nil),              // 39: bytebase.v1.ExtensionMetadata
	(*wrapperspb.StringValue)(nil),         // 40: google.protobuf.StringValue
	(*emptypb.Empty)(nil),                  // 41: google.protobuf.Empty
}
var file_v1_branch_service_proto_depIdxs = []int32{
	35, // 0: bytebase.v1.Branch.schema_metadata:type_name -> bytebase.v1.DatabaseMetadata
	35, // 1: bytebase.v1.Branch.baseline_schema_metadata:type_name -> bytebase.v1.DatabaseMetadata
	36, // 2: bytebase.v1.Branch.engine:type_name -> bytebase.v1.Engine
	37, // 3: bytebase.v1.Branch.create_time:type_name -> google.protobuf.Timestamp
	37, // 4: bytebase.v1.Branch.update_time:type_name -> google.protobuf.Timestamp
	0,  // 5: bytebase.v1.ListBranchesRequest.view:type_name -> bytebase.v1.BranchView
	5,  // 6: bytebase.v1.ListBranchesResponse.branches:type_name -> bytebase.v1.Branch
	5,  // 7: bytebase.v1.CreateBranchRequest.branch:type_name -> bytebase.v1.Branch
	5,  // 8: bytebase.v1.UpdateBranchRequest.branch:type_name -> bytebase.v1.Branch
	38, // 9: bytebase.v1.UpdateBranchRequest.update_mask:type_name -> google.protobuf.FieldMask
	5,  // 10: bytebase.v1.RebaseBranchResponse.branch:type_name -> bytebase.v1.Branch
	35, // 11: bytebase.v1.DiffMetadataRequest.source_metadata:type_name -> bytebase.v1.DatabaseMetadata
	35, // 12: bytebase.v1.DiffMetadataRequest.target_metadata:type_name -> bytebase.v1.DatabaseMetadata
	36, // 13: bytebase.v1.DiffMetadataRequest.engine:type_name -> bytebase.v1.Engine
	20, // 14: bytebase.v1.BranchDatabaseSchemaMetadata.schemas:type_name -> bytebase.v1.BranchSchemaMetadata
	39, // 15: bytebase.v1.BranchDatabaseSchemaMetadata.extensions:type_name -> bytebase.v1.ExtensionMetadata
	23, // 16: bytebase.v1.BranchSchemaMetadata.tables:type_name -> bytebase.v1.BranchTableMetadata
	24, // 17: bytebase.v1.BranchSchemaMetadata.external_tables:type_name -> bytebase.v1.BranchExternalTableMetadata
	27, // 18: bytebase.v1.BranchSchemaMetadata.views:type_name -> bytebase.v1.BranchViewMetadata
	30, // 19: bytebase.v1.BranchSchemaMetadata.functions:type_name -> bytebase.v1.BranchFunctionMetadata
	31, // 20: bytebase.v1.BranchSchemaMetadata.procedures:type_name -> bytebase.v1.BranchProcedureMetadata
	22, // 21: bytebase.v1.BranchSchemaMetadata.streams:type_name -> bytebase.v1.BranchStreamMetadata
	21, // 22: bytebase.v1.BranchSchemaMetadata.tasks:type_name -> bytebase.v1.BranchTaskMetadata
	29, // 23: bytebase.v1.BranchSchemaMetadata.materialized_views:type_name -> bytebase.v1.BranchMaterializedViewMetadata
	37, // 24: bytebase.v1.BranchSchemaMetadata.update_time:type_name -> google.protobuf.Timestamp
	1,  // 25: bytebase.v1.BranchTaskMetadata.state:type_name -> bytebase.v1.BranchTaskMetadata.State
	2,  // 26: bytebase.v1.BranchStreamMetadata.type:type_name -> bytebase.v1.BranchStreamMetadata.Type
	3,  // 27: bytebase.v1.BranchStreamMetadata.mode:type_name -> bytebase.v1.BranchStreamMetadata.Mode
	26, // 28: bytebase.v1.BranchTableMetadata.columns:type_name -> bytebase.v1.BranchColumnMetadata
	32, // 29: bytebase.v1.BranchTableMetadata.indexes:type_name -> bytebase.v1.BranchIndexMetadata
	34, // 30: bytebase.v1.BranchTableMetadata.foreign_keys:type_name -> bytebase.v1.BranchForeignKeyMetadata
	25, // 31: bytebase.v1.BranchTableMetadata.partitions:type_name -> bytebase.v1.BranchTablePartitionMetadata
	37, // 32: bytebase.v1.BranchTableMetadata.update_time:type_name -> google.protobuf.Timestamp
	26, // 33: bytebase.v1.BranchExternalTableMetadata.columns:type_name -> bytebase.v1.BranchColumnMetadata
	4,  // 34: bytebase.v1.BranchTablePartitionMetadata.type:type_name -> bytebase.v1.BranchTablePartitionMetadata.Type
	25, // 35: bytebase.v1.BranchTablePartitionMetadata.subpartitions:type_name -> bytebase.v1.BranchTablePartitionMetadata
	40, // 36: bytebase.v1.BranchColumnMetadata.default:type_name -> google.protobuf.StringValue
	28, // 37: bytebase.v1.BranchViewMetadata.dependent_columns:type_name -> bytebase.v1.BranchDependentColumn
	37, // 38: bytebase.v1.BranchViewMetadata.update_time:type_name -> google.protobuf.Timestamp
	28, // 39: bytebase.v1.BranchMaterializedViewMetadata.dependent_columns:type_name -> bytebase.v1.BranchDependentColumn
	37, // 40: bytebase.v1.BranchFunctionMetadata.update_time:type_name -> google.protobuf.Timestamp
	37, // 41: bytebase.v1.BranchProcedureMetadata.update_time:type_name -> google.protobuf.Timestamp
	6,  // 42: bytebase.v1.BranchService.GetBranch:input_type -> bytebase.v1.GetBranchRequest
	7,  // 43: bytebase.v1.BranchService.ListBranches:input_type -> bytebase.v1.ListBranchesRequest
	9,  // 44: bytebase.v1.BranchService.CreateBranch:input_type -> bytebase.v1.CreateBranchRequest
	10, // 45: bytebase.v1.BranchService.UpdateBranch:input_type -> bytebase.v1.UpdateBranchRequest
	11, // 46: bytebase.v1.BranchService.MergeBranch:input_type -> bytebase.v1.MergeBranchRequest
	12, // 47: bytebase.v1.BranchService.RebaseBranch:input_type -> bytebase.v1.RebaseBranchRequest
	14, // 48: bytebase.v1.BranchService.DeleteBranch:input_type -> bytebase.v1.DeleteBranchRequest
	15, // 49: bytebase.v1.BranchService.DiffDatabase:input_type -> bytebase.v1.DiffDatabaseRequest
	17, // 50: bytebase.v1.BranchService.DiffMetadata:input_type -> bytebase.v1.DiffMetadataRequest
	5,  // 51: bytebase.v1.BranchService.GetBranch:output_type -> bytebase.v1.Branch
	8,  // 52: bytebase.v1.BranchService.ListBranches:output_type -> bytebase.v1.ListBranchesResponse
	5,  // 53: bytebase.v1.BranchService.CreateBranch:output_type -> bytebase.v1.Branch
	5,  // 54: bytebase.v1.BranchService.UpdateBranch:output_type -> bytebase.v1.Branch
	5,  // 55: bytebase.v1.BranchService.MergeBranch:output_type -> bytebase.v1.Branch
	13, // 56: bytebase.v1.BranchService.RebaseBranch:output_type -> bytebase.v1.RebaseBranchResponse
	41, // 57: bytebase.v1.BranchService.DeleteBranch:output_type -> google.protobuf.Empty
	16, // 58: bytebase.v1.BranchService.DiffDatabase:output_type -> bytebase.v1.DiffDatabaseResponse
	18, // 59: bytebase.v1.BranchService.DiffMetadata:output_type -> bytebase.v1.DiffMetadataResponse
	51, // [51:60] is the sub-list for method output_type
	42, // [42:51] is the sub-list for method input_type
	42, // [42:42] is the sub-list for extension type_name
	42, // [42:42] is the sub-list for extension extendee
	0,  // [0:42] is the sub-list for field type_name
}

func init() { file_v1_branch_service_proto_init() }
func file_v1_branch_service_proto_init() {
	if File_v1_branch_service_proto != nil {
		return
	}
	file_v1_common_proto_init()
	file_v1_database_service_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_v1_branch_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Branch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_branch_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetBranchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_branch_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBranchesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_branch_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListBranchesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_branch_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateBranchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_branch_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateBranchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_branch_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MergeBranchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_branch_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RebaseBranchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_branch_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RebaseBranchResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_branch_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteBranchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_branch_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiffDatabaseRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_branch_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiffDatabaseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_branch_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiffMetadataRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_branch_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiffMetadataResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_branch_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BranchDatabaseSchemaMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_branch_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BranchSchemaMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_branch_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BranchTaskMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_branch_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BranchStreamMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_branch_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BranchTableMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_branch_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BranchExternalTableMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_branch_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BranchTablePartitionMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_branch_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BranchColumnMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_branch_service_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BranchViewMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_branch_service_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BranchDependentColumn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_branch_service_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BranchMaterializedViewMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_branch_service_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BranchFunctionMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_branch_service_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BranchProcedureMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_branch_service_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BranchIndexMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_branch_service_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BranchExtensionMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_branch_service_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BranchForeignKeyMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_v1_branch_service_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*RebaseBranchResponse_Branch)(nil),
		(*RebaseBranchResponse_ConflictSchema)(nil),
	}
	file_v1_branch_service_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*DiffDatabaseResponse_Schema)(nil),
		(*DiffDatabaseResponse_ConflictSchema)(nil),
	}
	file_v1_branch_service_proto_msgTypes[21].OneofWrappers = []interface{}{
		(*BranchColumnMetadata_Default)(nil),
		(*BranchColumnMetadata_DefaultNull)(nil),
		(*BranchColumnMetadata_DefaultExpression)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_branch_service_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v1_branch_service_proto_goTypes,
		DependencyIndexes: file_v1_branch_service_proto_depIdxs,
		EnumInfos:         file_v1_branch_service_proto_enumTypes,
		MessageInfos:      file_v1_branch_service_proto_msgTypes,
	}.Build()
	File_v1_branch_service_proto = out.File
	file_v1_branch_service_proto_rawDesc = nil
	file_v1_branch_service_proto_goTypes = nil
	file_v1_branch_service_proto_depIdxs = nil
}
