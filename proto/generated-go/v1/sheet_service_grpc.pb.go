// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: v1/sheet_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SheetService_CreateSheet_FullMethodName          = "/bytebase.v1.SheetService/CreateSheet"
	SheetService_GetSheet_FullMethodName             = "/bytebase.v1.SheetService/GetSheet"
	SheetService_SearchSheets_FullMethodName         = "/bytebase.v1.SheetService/SearchSheets"
	SheetService_UpdateSheet_FullMethodName          = "/bytebase.v1.SheetService/UpdateSheet"
	SheetService_UpdateSheetOrganizer_FullMethodName = "/bytebase.v1.SheetService/UpdateSheetOrganizer"
	SheetService_DeleteSheet_FullMethodName          = "/bytebase.v1.SheetService/DeleteSheet"
	SheetService_SyncSheets_FullMethodName           = "/bytebase.v1.SheetService/SyncSheets"
)

// SheetServiceClient is the client API for SheetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SheetServiceClient interface {
	CreateSheet(ctx context.Context, in *CreateSheetRequest, opts ...grpc.CallOption) (*Sheet, error)
	GetSheet(ctx context.Context, in *GetSheetRequest, opts ...grpc.CallOption) (*Sheet, error)
	SearchSheets(ctx context.Context, in *SearchSheetsRequest, opts ...grpc.CallOption) (*SearchSheetsResponse, error)
	UpdateSheet(ctx context.Context, in *UpdateSheetRequest, opts ...grpc.CallOption) (*Sheet, error)
	UpdateSheetOrganizer(ctx context.Context, in *UpdateSheetOrganizerRequest, opts ...grpc.CallOption) (*SheetOrganizer, error)
	DeleteSheet(ctx context.Context, in *DeleteSheetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SyncSheets(ctx context.Context, in *SyncSheetsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type sheetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSheetServiceClient(cc grpc.ClientConnInterface) SheetServiceClient {
	return &sheetServiceClient{cc}
}

func (c *sheetServiceClient) CreateSheet(ctx context.Context, in *CreateSheetRequest, opts ...grpc.CallOption) (*Sheet, error) {
	out := new(Sheet)
	err := c.cc.Invoke(ctx, SheetService_CreateSheet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sheetServiceClient) GetSheet(ctx context.Context, in *GetSheetRequest, opts ...grpc.CallOption) (*Sheet, error) {
	out := new(Sheet)
	err := c.cc.Invoke(ctx, SheetService_GetSheet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sheetServiceClient) SearchSheets(ctx context.Context, in *SearchSheetsRequest, opts ...grpc.CallOption) (*SearchSheetsResponse, error) {
	out := new(SearchSheetsResponse)
	err := c.cc.Invoke(ctx, SheetService_SearchSheets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sheetServiceClient) UpdateSheet(ctx context.Context, in *UpdateSheetRequest, opts ...grpc.CallOption) (*Sheet, error) {
	out := new(Sheet)
	err := c.cc.Invoke(ctx, SheetService_UpdateSheet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sheetServiceClient) UpdateSheetOrganizer(ctx context.Context, in *UpdateSheetOrganizerRequest, opts ...grpc.CallOption) (*SheetOrganizer, error) {
	out := new(SheetOrganizer)
	err := c.cc.Invoke(ctx, SheetService_UpdateSheetOrganizer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sheetServiceClient) DeleteSheet(ctx context.Context, in *DeleteSheetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SheetService_DeleteSheet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sheetServiceClient) SyncSheets(ctx context.Context, in *SyncSheetsRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, SheetService_SyncSheets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SheetServiceServer is the server API for SheetService service.
// All implementations must embed UnimplementedSheetServiceServer
// for forward compatibility
type SheetServiceServer interface {
	CreateSheet(context.Context, *CreateSheetRequest) (*Sheet, error)
	GetSheet(context.Context, *GetSheetRequest) (*Sheet, error)
	SearchSheets(context.Context, *SearchSheetsRequest) (*SearchSheetsResponse, error)
	UpdateSheet(context.Context, *UpdateSheetRequest) (*Sheet, error)
	UpdateSheetOrganizer(context.Context, *UpdateSheetOrganizerRequest) (*SheetOrganizer, error)
	DeleteSheet(context.Context, *DeleteSheetRequest) (*emptypb.Empty, error)
	SyncSheets(context.Context, *SyncSheetsRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedSheetServiceServer()
}

// UnimplementedSheetServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSheetServiceServer struct {
}

func (UnimplementedSheetServiceServer) CreateSheet(context.Context, *CreateSheetRequest) (*Sheet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSheet not implemented")
}
func (UnimplementedSheetServiceServer) GetSheet(context.Context, *GetSheetRequest) (*Sheet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSheet not implemented")
}
func (UnimplementedSheetServiceServer) SearchSheets(context.Context, *SearchSheetsRequest) (*SearchSheetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchSheets not implemented")
}
func (UnimplementedSheetServiceServer) UpdateSheet(context.Context, *UpdateSheetRequest) (*Sheet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSheet not implemented")
}
func (UnimplementedSheetServiceServer) UpdateSheetOrganizer(context.Context, *UpdateSheetOrganizerRequest) (*SheetOrganizer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSheetOrganizer not implemented")
}
func (UnimplementedSheetServiceServer) DeleteSheet(context.Context, *DeleteSheetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSheet not implemented")
}
func (UnimplementedSheetServiceServer) SyncSheets(context.Context, *SyncSheetsRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncSheets not implemented")
}
func (UnimplementedSheetServiceServer) mustEmbedUnimplementedSheetServiceServer() {}

// UnsafeSheetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SheetServiceServer will
// result in compilation errors.
type UnsafeSheetServiceServer interface {
	mustEmbedUnimplementedSheetServiceServer()
}

func RegisterSheetServiceServer(s grpc.ServiceRegistrar, srv SheetServiceServer) {
	s.RegisterService(&SheetService_ServiceDesc, srv)
}

func _SheetService_CreateSheet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSheetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SheetServiceServer).CreateSheet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SheetService_CreateSheet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SheetServiceServer).CreateSheet(ctx, req.(*CreateSheetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SheetService_GetSheet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSheetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SheetServiceServer).GetSheet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SheetService_GetSheet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SheetServiceServer).GetSheet(ctx, req.(*GetSheetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SheetService_SearchSheets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchSheetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SheetServiceServer).SearchSheets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SheetService_SearchSheets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SheetServiceServer).SearchSheets(ctx, req.(*SearchSheetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SheetService_UpdateSheet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSheetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SheetServiceServer).UpdateSheet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SheetService_UpdateSheet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SheetServiceServer).UpdateSheet(ctx, req.(*UpdateSheetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SheetService_UpdateSheetOrganizer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSheetOrganizerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SheetServiceServer).UpdateSheetOrganizer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SheetService_UpdateSheetOrganizer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SheetServiceServer).UpdateSheetOrganizer(ctx, req.(*UpdateSheetOrganizerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SheetService_DeleteSheet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSheetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SheetServiceServer).DeleteSheet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SheetService_DeleteSheet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SheetServiceServer).DeleteSheet(ctx, req.(*DeleteSheetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SheetService_SyncSheets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncSheetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SheetServiceServer).SyncSheets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SheetService_SyncSheets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SheetServiceServer).SyncSheets(ctx, req.(*SyncSheetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SheetService_ServiceDesc is the grpc.ServiceDesc for SheetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SheetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bytebase.v1.SheetService",
	HandlerType: (*SheetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSheet",
			Handler:    _SheetService_CreateSheet_Handler,
		},
		{
			MethodName: "GetSheet",
			Handler:    _SheetService_GetSheet_Handler,
		},
		{
			MethodName: "SearchSheets",
			Handler:    _SheetService_SearchSheets_Handler,
		},
		{
			MethodName: "UpdateSheet",
			Handler:    _SheetService_UpdateSheet_Handler,
		},
		{
			MethodName: "UpdateSheetOrganizer",
			Handler:    _SheetService_UpdateSheetOrganizer_Handler,
		},
		{
			MethodName: "DeleteSheet",
			Handler:    _SheetService_DeleteSheet_Handler,
		},
		{
			MethodName: "SyncSheets",
			Handler:    _SheetService_SyncSheets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/sheet_service.proto",
}
