// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: v1/setting_service.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	expr "google.golang.org/genproto/googleapis/type/expr"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// We support three types of SMTP encryption: NONE, STARTTLS, and SSL/TLS.
type SMTPMailDeliverySettingValue_Encryption int32

const (
	SMTPMailDeliverySettingValue_ENCRYPTION_UNSPECIFIED SMTPMailDeliverySettingValue_Encryption = 0
	SMTPMailDeliverySettingValue_ENCRYPTION_NONE        SMTPMailDeliverySettingValue_Encryption = 1
	SMTPMailDeliverySettingValue_ENCRYPTION_STARTTLS    SMTPMailDeliverySettingValue_Encryption = 2
	SMTPMailDeliverySettingValue_ENCRYPTION_SSL_TLS     SMTPMailDeliverySettingValue_Encryption = 3
)

// Enum value maps for SMTPMailDeliverySettingValue_Encryption.
var (
	SMTPMailDeliverySettingValue_Encryption_name = map[int32]string{
		0: "ENCRYPTION_UNSPECIFIED",
		1: "ENCRYPTION_NONE",
		2: "ENCRYPTION_STARTTLS",
		3: "ENCRYPTION_SSL_TLS",
	}
	SMTPMailDeliverySettingValue_Encryption_value = map[string]int32{
		"ENCRYPTION_UNSPECIFIED": 0,
		"ENCRYPTION_NONE":        1,
		"ENCRYPTION_STARTTLS":    2,
		"ENCRYPTION_SSL_TLS":     3,
	}
)

func (x SMTPMailDeliverySettingValue_Encryption) Enum() *SMTPMailDeliverySettingValue_Encryption {
	p := new(SMTPMailDeliverySettingValue_Encryption)
	*p = x
	return p
}

func (x SMTPMailDeliverySettingValue_Encryption) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SMTPMailDeliverySettingValue_Encryption) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_setting_service_proto_enumTypes[0].Descriptor()
}

func (SMTPMailDeliverySettingValue_Encryption) Type() protoreflect.EnumType {
	return &file_v1_setting_service_proto_enumTypes[0]
}

func (x SMTPMailDeliverySettingValue_Encryption) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SMTPMailDeliverySettingValue_Encryption.Descriptor instead.
func (SMTPMailDeliverySettingValue_Encryption) EnumDescriptor() ([]byte, []int) {
	return file_v1_setting_service_proto_rawDescGZIP(), []int{7, 0}
}

// We support four types of SMTP authentication: NONE, PLAIN, LOGIN, and CRAM-MD5.
type SMTPMailDeliverySettingValue_Authentication int32

const (
	SMTPMailDeliverySettingValue_AUTHENTICATION_UNSPECIFIED SMTPMailDeliverySettingValue_Authentication = 0
	SMTPMailDeliverySettingValue_AUTHENTICATION_NONE        SMTPMailDeliverySettingValue_Authentication = 1
	SMTPMailDeliverySettingValue_AUTHENTICATION_PLAIN       SMTPMailDeliverySettingValue_Authentication = 2
	SMTPMailDeliverySettingValue_AUTHENTICATION_LOGIN       SMTPMailDeliverySettingValue_Authentication = 3
	SMTPMailDeliverySettingValue_AUTHENTICATION_CRAM_MD5    SMTPMailDeliverySettingValue_Authentication = 4
)

// Enum value maps for SMTPMailDeliverySettingValue_Authentication.
var (
	SMTPMailDeliverySettingValue_Authentication_name = map[int32]string{
		0: "AUTHENTICATION_UNSPECIFIED",
		1: "AUTHENTICATION_NONE",
		2: "AUTHENTICATION_PLAIN",
		3: "AUTHENTICATION_LOGIN",
		4: "AUTHENTICATION_CRAM_MD5",
	}
	SMTPMailDeliverySettingValue_Authentication_value = map[string]int32{
		"AUTHENTICATION_UNSPECIFIED": 0,
		"AUTHENTICATION_NONE":        1,
		"AUTHENTICATION_PLAIN":       2,
		"AUTHENTICATION_LOGIN":       3,
		"AUTHENTICATION_CRAM_MD5":    4,
	}
)

func (x SMTPMailDeliverySettingValue_Authentication) Enum() *SMTPMailDeliverySettingValue_Authentication {
	p := new(SMTPMailDeliverySettingValue_Authentication)
	*p = x
	return p
}

func (x SMTPMailDeliverySettingValue_Authentication) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SMTPMailDeliverySettingValue_Authentication) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_setting_service_proto_enumTypes[1].Descriptor()
}

func (SMTPMailDeliverySettingValue_Authentication) Type() protoreflect.EnumType {
	return &file_v1_setting_service_proto_enumTypes[1]
}

func (x SMTPMailDeliverySettingValue_Authentication) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SMTPMailDeliverySettingValue_Authentication.Descriptor instead.
func (SMTPMailDeliverySettingValue_Authentication) EnumDescriptor() ([]byte, []int) {
	return file_v1_setting_service_proto_rawDescGZIP(), []int{7, 1}
}

type AppIMSetting_IMType int32

const (
	AppIMSetting_IM_TYPE_UNSPECIFIED AppIMSetting_IMType = 0
	AppIMSetting_FEISHU              AppIMSetting_IMType = 1
)

// Enum value maps for AppIMSetting_IMType.
var (
	AppIMSetting_IMType_name = map[int32]string{
		0: "IM_TYPE_UNSPECIFIED",
		1: "FEISHU",
	}
	AppIMSetting_IMType_value = map[string]int32{
		"IM_TYPE_UNSPECIFIED": 0,
		"FEISHU":              1,
	}
)

func (x AppIMSetting_IMType) Enum() *AppIMSetting_IMType {
	p := new(AppIMSetting_IMType)
	*p = x
	return p
}

func (x AppIMSetting_IMType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AppIMSetting_IMType) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_setting_service_proto_enumTypes[2].Descriptor()
}

func (AppIMSetting_IMType) Type() protoreflect.EnumType {
	return &file_v1_setting_service_proto_enumTypes[2]
}

func (x AppIMSetting_IMType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AppIMSetting_IMType.Descriptor instead.
func (AppIMSetting_IMType) EnumDescriptor() ([]byte, []int) {
	return file_v1_setting_service_proto_rawDescGZIP(), []int{8, 0}
}

type ListSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The maximum number of settings to return. The service may return fewer than
	// this value.
	// If unspecified, at most 50 settings will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListSettings` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListSettings` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
}

func (x *ListSettingsRequest) Reset() {
	*x = ListSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_setting_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSettingsRequest) ProtoMessage() {}

func (x *ListSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_setting_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSettingsRequest.ProtoReflect.Descriptor instead.
func (*ListSettingsRequest) Descriptor() ([]byte, []int) {
	return file_v1_setting_service_proto_rawDescGZIP(), []int{0}
}

func (x *ListSettingsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListSettingsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListSettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The settings from the specified request.
	Settings []*Setting `protobuf:"bytes,1,rep,name=settings,proto3" json:"settings,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListSettingsResponse) Reset() {
	*x = ListSettingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_setting_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSettingsResponse) ProtoMessage() {}

func (x *ListSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_setting_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSettingsResponse.ProtoReflect.Descriptor instead.
func (*ListSettingsResponse) Descriptor() ([]byte, []int) {
	return file_v1_setting_service_proto_rawDescGZIP(), []int{1}
}

func (x *ListSettingsResponse) GetSettings() []*Setting {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *ListSettingsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

// The request message for getting a setting.
type GetSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the setting.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetSettingRequest) Reset() {
	*x = GetSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_setting_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSettingRequest) ProtoMessage() {}

func (x *GetSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_setting_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSettingRequest.ProtoReflect.Descriptor instead.
func (*GetSettingRequest) Descriptor() ([]byte, []int) {
	return file_v1_setting_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetSettingRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// The response message for getting a setting.
type GetSettingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Setting *Setting `protobuf:"bytes,1,opt,name=setting,proto3" json:"setting,omitempty"`
}

func (x *GetSettingResponse) Reset() {
	*x = GetSettingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_setting_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSettingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSettingResponse) ProtoMessage() {}

func (x *GetSettingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_setting_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSettingResponse.ProtoReflect.Descriptor instead.
func (*GetSettingResponse) Descriptor() ([]byte, []int) {
	return file_v1_setting_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetSettingResponse) GetSetting() *Setting {
	if x != nil {
		return x.Setting
	}
	return nil
}

// The request message for updating a setting.
type SetSettingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The setting to update.
	Setting *Setting `protobuf:"bytes,1,opt,name=setting,proto3" json:"setting,omitempty"`
	// validate_only is a flag to indicate whether to validate the setting value,
	// server would not persist the setting value if it is true.
	ValidateOnly bool `protobuf:"varint,2,opt,name=validate_only,json=validateOnly,proto3" json:"validate_only,omitempty"`
}

func (x *SetSettingRequest) Reset() {
	*x = SetSettingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_setting_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSettingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSettingRequest) ProtoMessage() {}

func (x *SetSettingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_setting_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSettingRequest.ProtoReflect.Descriptor instead.
func (*SetSettingRequest) Descriptor() ([]byte, []int) {
	return file_v1_setting_service_proto_rawDescGZIP(), []int{4}
}

func (x *SetSettingRequest) GetSetting() *Setting {
	if x != nil {
		return x.Setting
	}
	return nil
}

func (x *SetSettingRequest) GetValidateOnly() bool {
	if x != nil {
		return x.ValidateOnly
	}
	return false
}

// The schema of setting.
type Setting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The resource name of the setting. Must be one of the following forms:
	//
	// - `setting/{setting_name}`
	// For example, "settings/bb.branding.logo"
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The value of the setting.
	Value *Value `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Setting) Reset() {
	*x = Setting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_setting_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Setting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Setting) ProtoMessage() {}

func (x *Setting) ProtoReflect() protoreflect.Message {
	mi := &file_v1_setting_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Setting.ProtoReflect.Descriptor instead.
func (*Setting) Descriptor() ([]byte, []int) {
	return file_v1_setting_service_proto_rawDescGZIP(), []int{5}
}

func (x *Setting) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Setting) GetValue() *Value {
	if x != nil {
		return x.Value
	}
	return nil
}

// The data in setting value.
type Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Value is a oneof field for setting value.
	//
	// Types that are assignable to Value:
	//
	//	*Value_StringValue
	//	*Value_SmtpMailDeliverySettingValue
	//	*Value_AppImSettingValue
	//	*Value_AgentPluginSettingValue
	//	*Value_WorkspaceProfileSettingValue
	//	*Value_WorkspaceApprovalSettingValue
	//	*Value_WorkspaceTrialSettingValue
	//	*Value_ExternalApprovalSettingValue
	//	*Value_SchemaTemplateSettingValue
	Value isValue_Value `protobuf_oneof:"value"`
}

func (x *Value) Reset() {
	*x = Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_setting_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Value) ProtoMessage() {}

func (x *Value) ProtoReflect() protoreflect.Message {
	mi := &file_v1_setting_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Value.ProtoReflect.Descriptor instead.
func (*Value) Descriptor() ([]byte, []int) {
	return file_v1_setting_service_proto_rawDescGZIP(), []int{6}
}

func (m *Value) GetValue() isValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *Value) GetStringValue() string {
	if x, ok := x.GetValue().(*Value_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *Value) GetSmtpMailDeliverySettingValue() *SMTPMailDeliverySettingValue {
	if x, ok := x.GetValue().(*Value_SmtpMailDeliverySettingValue); ok {
		return x.SmtpMailDeliverySettingValue
	}
	return nil
}

func (x *Value) GetAppImSettingValue() *AppIMSetting {
	if x, ok := x.GetValue().(*Value_AppImSettingValue); ok {
		return x.AppImSettingValue
	}
	return nil
}

func (x *Value) GetAgentPluginSettingValue() *AgentPluginSetting {
	if x, ok := x.GetValue().(*Value_AgentPluginSettingValue); ok {
		return x.AgentPluginSettingValue
	}
	return nil
}

func (x *Value) GetWorkspaceProfileSettingValue() *WorkspaceProfileSetting {
	if x, ok := x.GetValue().(*Value_WorkspaceProfileSettingValue); ok {
		return x.WorkspaceProfileSettingValue
	}
	return nil
}

func (x *Value) GetWorkspaceApprovalSettingValue() *WorkspaceApprovalSetting {
	if x, ok := x.GetValue().(*Value_WorkspaceApprovalSettingValue); ok {
		return x.WorkspaceApprovalSettingValue
	}
	return nil
}

func (x *Value) GetWorkspaceTrialSettingValue() *WorkspaceTrialSetting {
	if x, ok := x.GetValue().(*Value_WorkspaceTrialSettingValue); ok {
		return x.WorkspaceTrialSettingValue
	}
	return nil
}

func (x *Value) GetExternalApprovalSettingValue() *ExternalApprovalSetting {
	if x, ok := x.GetValue().(*Value_ExternalApprovalSettingValue); ok {
		return x.ExternalApprovalSettingValue
	}
	return nil
}

func (x *Value) GetSchemaTemplateSettingValue() *SchemaTemplateSetting {
	if x, ok := x.GetValue().(*Value_SchemaTemplateSettingValue); ok {
		return x.SchemaTemplateSettingValue
	}
	return nil
}

type isValue_Value interface {
	isValue_Value()
}

type Value_StringValue struct {
	// Defines this value as being a string value.
	StringValue string `protobuf:"bytes,1,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type Value_SmtpMailDeliverySettingValue struct {
	SmtpMailDeliverySettingValue *SMTPMailDeliverySettingValue `protobuf:"bytes,2,opt,name=smtp_mail_delivery_setting_value,json=smtpMailDeliverySettingValue,proto3,oneof"`
}

type Value_AppImSettingValue struct {
	AppImSettingValue *AppIMSetting `protobuf:"bytes,3,opt,name=app_im_setting_value,json=appImSettingValue,proto3,oneof"`
}

type Value_AgentPluginSettingValue struct {
	AgentPluginSettingValue *AgentPluginSetting `protobuf:"bytes,4,opt,name=agent_plugin_setting_value,json=agentPluginSettingValue,proto3,oneof"`
}

type Value_WorkspaceProfileSettingValue struct {
	WorkspaceProfileSettingValue *WorkspaceProfileSetting `protobuf:"bytes,5,opt,name=workspace_profile_setting_value,json=workspaceProfileSettingValue,proto3,oneof"`
}

type Value_WorkspaceApprovalSettingValue struct {
	WorkspaceApprovalSettingValue *WorkspaceApprovalSetting `protobuf:"bytes,6,opt,name=workspace_approval_setting_value,json=workspaceApprovalSettingValue,proto3,oneof"`
}

type Value_WorkspaceTrialSettingValue struct {
	WorkspaceTrialSettingValue *WorkspaceTrialSetting `protobuf:"bytes,7,opt,name=workspace_trial_setting_value,json=workspaceTrialSettingValue,proto3,oneof"`
}

type Value_ExternalApprovalSettingValue struct {
	ExternalApprovalSettingValue *ExternalApprovalSetting `protobuf:"bytes,8,opt,name=external_approval_setting_value,json=externalApprovalSettingValue,proto3,oneof"`
}

type Value_SchemaTemplateSettingValue struct {
	SchemaTemplateSettingValue *SchemaTemplateSetting `protobuf:"bytes,9,opt,name=schema_template_setting_value,json=schemaTemplateSettingValue,proto3,oneof"`
}

func (*Value_StringValue) isValue_Value() {}

func (*Value_SmtpMailDeliverySettingValue) isValue_Value() {}

func (*Value_AppImSettingValue) isValue_Value() {}

func (*Value_AgentPluginSettingValue) isValue_Value() {}

func (*Value_WorkspaceProfileSettingValue) isValue_Value() {}

func (*Value_WorkspaceApprovalSettingValue) isValue_Value() {}

func (*Value_WorkspaceTrialSettingValue) isValue_Value() {}

func (*Value_ExternalApprovalSettingValue) isValue_Value() {}

func (*Value_SchemaTemplateSettingValue) isValue_Value() {}

type SMTPMailDeliverySettingValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The SMTP server address.
	Server string `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
	// The SMTP server port.
	Port int32 `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	// The SMTP server encryption.
	Encryption SMTPMailDeliverySettingValue_Encryption `protobuf:"varint,3,opt,name=encryption,proto3,enum=bytebase.v1.SMTPMailDeliverySettingValue_Encryption" json:"encryption,omitempty"`
	// The CA, KEY, and CERT for the SMTP server.
	// Not used.
	Ca             *string                                     `protobuf:"bytes,4,opt,name=ca,proto3,oneof" json:"ca,omitempty"`
	Key            *string                                     `protobuf:"bytes,5,opt,name=key,proto3,oneof" json:"key,omitempty"`
	Cert           *string                                     `protobuf:"bytes,6,opt,name=cert,proto3,oneof" json:"cert,omitempty"`
	Authentication SMTPMailDeliverySettingValue_Authentication `protobuf:"varint,7,opt,name=authentication,proto3,enum=bytebase.v1.SMTPMailDeliverySettingValue_Authentication" json:"authentication,omitempty"`
	Username       string                                      `protobuf:"bytes,8,opt,name=username,proto3" json:"username,omitempty"`
	// If not specified, server will use the existed password.
	Password *string `protobuf:"bytes,9,opt,name=password,proto3,oneof" json:"password,omitempty"`
	// The sender email address.
	From string `protobuf:"bytes,10,opt,name=from,proto3" json:"from,omitempty"`
	// The recipient email address, used with validate_only to send test email.
	To string `protobuf:"bytes,11,opt,name=to,proto3" json:"to,omitempty"`
}

func (x *SMTPMailDeliverySettingValue) Reset() {
	*x = SMTPMailDeliverySettingValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_setting_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SMTPMailDeliverySettingValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SMTPMailDeliverySettingValue) ProtoMessage() {}

func (x *SMTPMailDeliverySettingValue) ProtoReflect() protoreflect.Message {
	mi := &file_v1_setting_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SMTPMailDeliverySettingValue.ProtoReflect.Descriptor instead.
func (*SMTPMailDeliverySettingValue) Descriptor() ([]byte, []int) {
	return file_v1_setting_service_proto_rawDescGZIP(), []int{7}
}

func (x *SMTPMailDeliverySettingValue) GetServer() string {
	if x != nil {
		return x.Server
	}
	return ""
}

func (x *SMTPMailDeliverySettingValue) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *SMTPMailDeliverySettingValue) GetEncryption() SMTPMailDeliverySettingValue_Encryption {
	if x != nil {
		return x.Encryption
	}
	return SMTPMailDeliverySettingValue_ENCRYPTION_UNSPECIFIED
}

func (x *SMTPMailDeliverySettingValue) GetCa() string {
	if x != nil && x.Ca != nil {
		return *x.Ca
	}
	return ""
}

func (x *SMTPMailDeliverySettingValue) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *SMTPMailDeliverySettingValue) GetCert() string {
	if x != nil && x.Cert != nil {
		return *x.Cert
	}
	return ""
}

func (x *SMTPMailDeliverySettingValue) GetAuthentication() SMTPMailDeliverySettingValue_Authentication {
	if x != nil {
		return x.Authentication
	}
	return SMTPMailDeliverySettingValue_AUTHENTICATION_UNSPECIFIED
}

func (x *SMTPMailDeliverySettingValue) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *SMTPMailDeliverySettingValue) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

func (x *SMTPMailDeliverySettingValue) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *SMTPMailDeliverySettingValue) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

type AppIMSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ImType           AppIMSetting_IMType            `protobuf:"varint,1,opt,name=im_type,json=imType,proto3,enum=bytebase.v1.AppIMSetting_IMType" json:"im_type,omitempty"`
	AppId            string                         `protobuf:"bytes,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	AppSecret        string                         `protobuf:"bytes,3,opt,name=app_secret,json=appSecret,proto3" json:"app_secret,omitempty"`
	ExternalApproval *AppIMSetting_ExternalApproval `protobuf:"bytes,4,opt,name=external_approval,json=externalApproval,proto3" json:"external_approval,omitempty"`
}

func (x *AppIMSetting) Reset() {
	*x = AppIMSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_setting_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppIMSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppIMSetting) ProtoMessage() {}

func (x *AppIMSetting) ProtoReflect() protoreflect.Message {
	mi := &file_v1_setting_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppIMSetting.ProtoReflect.Descriptor instead.
func (*AppIMSetting) Descriptor() ([]byte, []int) {
	return file_v1_setting_service_proto_rawDescGZIP(), []int{8}
}

func (x *AppIMSetting) GetImType() AppIMSetting_IMType {
	if x != nil {
		return x.ImType
	}
	return AppIMSetting_IM_TYPE_UNSPECIFIED
}

func (x *AppIMSetting) GetAppId() string {
	if x != nil {
		return x.AppId
	}
	return ""
}

func (x *AppIMSetting) GetAppSecret() string {
	if x != nil {
		return x.AppSecret
	}
	return ""
}

func (x *AppIMSetting) GetExternalApproval() *AppIMSetting_ExternalApproval {
	if x != nil {
		return x.ExternalApproval
	}
	return nil
}

type AgentPluginSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The URL for the agent API.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// The token for the agent.
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *AgentPluginSetting) Reset() {
	*x = AgentPluginSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_setting_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentPluginSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentPluginSetting) ProtoMessage() {}

func (x *AgentPluginSetting) ProtoReflect() protoreflect.Message {
	mi := &file_v1_setting_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentPluginSetting.ProtoReflect.Descriptor instead.
func (*AgentPluginSetting) Descriptor() ([]byte, []int) {
	return file_v1_setting_service_proto_rawDescGZIP(), []int{9}
}

func (x *AgentPluginSetting) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *AgentPluginSetting) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type WorkspaceProfileSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The URL user visits Bytebase.
	//
	// The external URL is used for:
	// 1. Constructing the correct callback URL when configuring the VCS provider. The callback URL points to the frontend.
	// 2. Creating the correct webhook endpoint when configuring the project GitOps workflow. The webhook endpoint points to the backend.
	ExternalUrl string `protobuf:"bytes,1,opt,name=external_url,json=externalUrl,proto3" json:"external_url,omitempty"`
	// Disallow self-service signup, users can only be invited by the owner.
	DisallowSignup bool `protobuf:"varint,2,opt,name=disallow_signup,json=disallowSignup,proto3" json:"disallow_signup,omitempty"`
	// Require 2FA for all users.
	Require_2Fa bool `protobuf:"varint,3,opt,name=require_2fa,json=require2fa,proto3" json:"require_2fa,omitempty"`
	// outbound_ip_list is the outbound IP for Bytebase instance in SaaS mode.
	OutboundIpList []string `protobuf:"bytes,4,rep,name=outbound_ip_list,json=outboundIpList,proto3" json:"outbound_ip_list,omitempty"`
	// The webhook URL for the GitOps workflow.
	GitopsWebhookUrl string `protobuf:"bytes,5,opt,name=gitops_webhook_url,json=gitopsWebhookUrl,proto3" json:"gitops_webhook_url,omitempty"`
}

func (x *WorkspaceProfileSetting) Reset() {
	*x = WorkspaceProfileSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_setting_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkspaceProfileSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkspaceProfileSetting) ProtoMessage() {}

func (x *WorkspaceProfileSetting) ProtoReflect() protoreflect.Message {
	mi := &file_v1_setting_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkspaceProfileSetting.ProtoReflect.Descriptor instead.
func (*WorkspaceProfileSetting) Descriptor() ([]byte, []int) {
	return file_v1_setting_service_proto_rawDescGZIP(), []int{10}
}

func (x *WorkspaceProfileSetting) GetExternalUrl() string {
	if x != nil {
		return x.ExternalUrl
	}
	return ""
}

func (x *WorkspaceProfileSetting) GetDisallowSignup() bool {
	if x != nil {
		return x.DisallowSignup
	}
	return false
}

func (x *WorkspaceProfileSetting) GetRequire_2Fa() bool {
	if x != nil {
		return x.Require_2Fa
	}
	return false
}

func (x *WorkspaceProfileSetting) GetOutboundIpList() []string {
	if x != nil {
		return x.OutboundIpList
	}
	return nil
}

func (x *WorkspaceProfileSetting) GetGitopsWebhookUrl() string {
	if x != nil {
		return x.GitopsWebhookUrl
	}
	return ""
}

type WorkspaceApprovalSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rules []*WorkspaceApprovalSetting_Rule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *WorkspaceApprovalSetting) Reset() {
	*x = WorkspaceApprovalSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_setting_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkspaceApprovalSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkspaceApprovalSetting) ProtoMessage() {}

func (x *WorkspaceApprovalSetting) ProtoReflect() protoreflect.Message {
	mi := &file_v1_setting_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkspaceApprovalSetting.ProtoReflect.Descriptor instead.
func (*WorkspaceApprovalSetting) Descriptor() ([]byte, []int) {
	return file_v1_setting_service_proto_rawDescGZIP(), []int{11}
}

func (x *WorkspaceApprovalSetting) GetRules() []*WorkspaceApprovalSetting_Rule {
	if x != nil {
		return x.Rules
	}
	return nil
}

type ExternalApprovalSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes []*ExternalApprovalSetting_Node `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (x *ExternalApprovalSetting) Reset() {
	*x = ExternalApprovalSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_setting_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalApprovalSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalApprovalSetting) ProtoMessage() {}

func (x *ExternalApprovalSetting) ProtoReflect() protoreflect.Message {
	mi := &file_v1_setting_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalApprovalSetting.ProtoReflect.Descriptor instead.
func (*ExternalApprovalSetting) Descriptor() ([]byte, []int) {
	return file_v1_setting_service_proto_rawDescGZIP(), []int{12}
}

func (x *ExternalApprovalSetting) GetNodes() []*ExternalApprovalSetting_Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type SchemaTemplateSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldTemplates []*SchemaTemplateSetting_FieldTemplate `protobuf:"bytes,1,rep,name=field_templates,json=fieldTemplates,proto3" json:"field_templates,omitempty"`
}

func (x *SchemaTemplateSetting) Reset() {
	*x = SchemaTemplateSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_setting_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchemaTemplateSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaTemplateSetting) ProtoMessage() {}

func (x *SchemaTemplateSetting) ProtoReflect() protoreflect.Message {
	mi := &file_v1_setting_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaTemplateSetting.ProtoReflect.Descriptor instead.
func (*SchemaTemplateSetting) Descriptor() ([]byte, []int) {
	return file_v1_setting_service_proto_rawDescGZIP(), []int{13}
}

func (x *SchemaTemplateSetting) GetFieldTemplates() []*SchemaTemplateSetting_FieldTemplate {
	if x != nil {
		return x.FieldTemplates
	}
	return nil
}

type WorkspaceTrialSetting struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceCount int32                  `protobuf:"varint,1,opt,name=instance_count,json=instanceCount,proto3" json:"instance_count,omitempty"`
	ExpireTime    *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=expire_time,json=expireTime,proto3" json:"expire_time,omitempty"`
	IssuedTime    *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=issued_time,json=issuedTime,proto3" json:"issued_time,omitempty"`
	Subject       string                 `protobuf:"bytes,4,opt,name=subject,proto3" json:"subject,omitempty"`
	OrgName       string                 `protobuf:"bytes,5,opt,name=org_name,json=orgName,proto3" json:"org_name,omitempty"`
	Plan          PlanType               `protobuf:"varint,6,opt,name=plan,proto3,enum=bytebase.v1.PlanType" json:"plan,omitempty"`
}

func (x *WorkspaceTrialSetting) Reset() {
	*x = WorkspaceTrialSetting{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_setting_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkspaceTrialSetting) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkspaceTrialSetting) ProtoMessage() {}

func (x *WorkspaceTrialSetting) ProtoReflect() protoreflect.Message {
	mi := &file_v1_setting_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkspaceTrialSetting.ProtoReflect.Descriptor instead.
func (*WorkspaceTrialSetting) Descriptor() ([]byte, []int) {
	return file_v1_setting_service_proto_rawDescGZIP(), []int{14}
}

func (x *WorkspaceTrialSetting) GetInstanceCount() int32 {
	if x != nil {
		return x.InstanceCount
	}
	return 0
}

func (x *WorkspaceTrialSetting) GetExpireTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireTime
	}
	return nil
}

func (x *WorkspaceTrialSetting) GetIssuedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.IssuedTime
	}
	return nil
}

func (x *WorkspaceTrialSetting) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *WorkspaceTrialSetting) GetOrgName() string {
	if x != nil {
		return x.OrgName
	}
	return ""
}

func (x *WorkspaceTrialSetting) GetPlan() PlanType {
	if x != nil {
		return x.Plan
	}
	return PlanType_PLAN_TYPE_UNSPECIFIED
}

type AppIMSetting_ExternalApproval struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled              bool   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	ApprovalDefinitionId string `protobuf:"bytes,2,opt,name=approval_definition_id,json=approvalDefinitionId,proto3" json:"approval_definition_id,omitempty"`
}

func (x *AppIMSetting_ExternalApproval) Reset() {
	*x = AppIMSetting_ExternalApproval{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_setting_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppIMSetting_ExternalApproval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppIMSetting_ExternalApproval) ProtoMessage() {}

func (x *AppIMSetting_ExternalApproval) ProtoReflect() protoreflect.Message {
	mi := &file_v1_setting_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppIMSetting_ExternalApproval.ProtoReflect.Descriptor instead.
func (*AppIMSetting_ExternalApproval) Descriptor() ([]byte, []int) {
	return file_v1_setting_service_proto_rawDescGZIP(), []int{8, 0}
}

func (x *AppIMSetting_ExternalApproval) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *AppIMSetting_ExternalApproval) GetApprovalDefinitionId() string {
	if x != nil {
		return x.ApprovalDefinitionId
	}
	return ""
}

type WorkspaceApprovalSetting_Rule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Template  *ApprovalTemplate `protobuf:"bytes,2,opt,name=template,proto3" json:"template,omitempty"`
	Condition *expr.Expr        `protobuf:"bytes,3,opt,name=condition,proto3" json:"condition,omitempty"`
}

func (x *WorkspaceApprovalSetting_Rule) Reset() {
	*x = WorkspaceApprovalSetting_Rule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_setting_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkspaceApprovalSetting_Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkspaceApprovalSetting_Rule) ProtoMessage() {}

func (x *WorkspaceApprovalSetting_Rule) ProtoReflect() protoreflect.Message {
	mi := &file_v1_setting_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkspaceApprovalSetting_Rule.ProtoReflect.Descriptor instead.
func (*WorkspaceApprovalSetting_Rule) Descriptor() ([]byte, []int) {
	return file_v1_setting_service_proto_rawDescGZIP(), []int{11, 0}
}

func (x *WorkspaceApprovalSetting_Rule) GetTemplate() *ApprovalTemplate {
	if x != nil {
		return x.Template
	}
	return nil
}

func (x *WorkspaceApprovalSetting_Rule) GetCondition() *expr.Expr {
	if x != nil {
		return x.Condition
	}
	return nil
}

type ExternalApprovalSetting_Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique identifier for a node in UUID format.
	// We will also include the id in the message sending to the external relay service to identify the node.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The title of the node.
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// The external endpoint for the relay service, e.g. "http://hello:1234".
	Endpoint string `protobuf:"bytes,3,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
}

func (x *ExternalApprovalSetting_Node) Reset() {
	*x = ExternalApprovalSetting_Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_setting_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalApprovalSetting_Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalApprovalSetting_Node) ProtoMessage() {}

func (x *ExternalApprovalSetting_Node) ProtoReflect() protoreflect.Message {
	mi := &file_v1_setting_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalApprovalSetting_Node.ProtoReflect.Descriptor instead.
func (*ExternalApprovalSetting_Node) Descriptor() ([]byte, []int) {
	return file_v1_setting_service_proto_rawDescGZIP(), []int{12, 0}
}

func (x *ExternalApprovalSetting_Node) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ExternalApprovalSetting_Node) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ExternalApprovalSetting_Node) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

type SchemaTemplateSetting_FieldTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string          `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Engine Engine          `protobuf:"varint,2,opt,name=engine,proto3,enum=bytebase.v1.Engine" json:"engine,omitempty"`
	Column *ColumnMetadata `protobuf:"bytes,3,opt,name=column,proto3" json:"column,omitempty"`
}

func (x *SchemaTemplateSetting_FieldTemplate) Reset() {
	*x = SchemaTemplateSetting_FieldTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_setting_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchemaTemplateSetting_FieldTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaTemplateSetting_FieldTemplate) ProtoMessage() {}

func (x *SchemaTemplateSetting_FieldTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_v1_setting_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaTemplateSetting_FieldTemplate.ProtoReflect.Descriptor instead.
func (*SchemaTemplateSetting_FieldTemplate) Descriptor() ([]byte, []int) {
	return file_v1_setting_service_proto_rawDescGZIP(), []int{13, 0}
}

func (x *SchemaTemplateSetting_FieldTemplate) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SchemaTemplateSetting_FieldTemplate) GetEngine() Engine {
	if x != nil {
		return x.Engine
	}
	return Engine_ENGINE_UNSPECIFIED
}

func (x *SchemaTemplateSetting_FieldTemplate) GetColumn() *ColumnMetadata {
	if x != nil {
		return x.Column
	}
	return nil
}

var File_v1_setting_service_proto protoreflect.FileDescriptor

var file_v1_setting_service_proto_rawDesc = []byte{
	0x0a, 0x18, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x62, 0x79, 0x74, 0x65,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x16, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x65, 0x78,
	0x70, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x76, 0x31, 0x2f, 0x64, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x76, 0x31, 0x2f, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x76, 0x31,
	0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x51, 0x0a, 0x13, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x70,
	0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x08,
	0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x2c, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x44,
	0x0a, 0x12, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x22, 0x6d, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x07, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x79, 0x74,
	0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x23,
	0x0a, 0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4f,
	0x6e, 0x6c, 0x79, 0x22, 0x47, 0x0a, 0x07, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xfa, 0x06, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x73, 0x0a, 0x20, 0x73,
	0x6d, 0x74, 0x70, 0x5f, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x4d, 0x54, 0x50, 0x4d, 0x61, 0x69, 0x6c, 0x44, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x48, 0x00, 0x52, 0x1c, 0x73, 0x6d, 0x74, 0x70, 0x4d, 0x61, 0x69, 0x6c, 0x44, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x4c, 0x0a, 0x14, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x6d, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70,
	0x49, 0x4d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x11, 0x61, 0x70, 0x70,
	0x49, 0x6d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x5e,
	0x0a, 0x1a, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x73,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x17, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x6d,
	0x0a, 0x1f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52,
	0x1c, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x70, 0x0a,
	0x20, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x00,
	0x52, 0x1d, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x67, 0x0a, 0x1d, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x72, 0x69,
	0x61, 0x6c, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x54, 0x72,
	0x69, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x1a, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x6d, 0x0a, 0x1f, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x1c, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x67, 0x0a, 0x1d, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x48, 0x00, 0x52, 0x1a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xda, 0x05, 0x0a, 0x1c, 0x53, 0x4d,
	0x54, 0x50, 0x4d, 0x61, 0x69, 0x6c, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x54, 0x0a, 0x0a, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x62, 0x79, 0x74,
	0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x4d, 0x54, 0x50, 0x4d, 0x61, 0x69,
	0x6c, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0a, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x02,
	0x63, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x02, 0x63, 0x61, 0x88, 0x01,
	0x01, 0x12, 0x15, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x63, 0x65, 0x72, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x04, 0x63, 0x65, 0x72, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x60, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38, 0x2e, 0x62, 0x79, 0x74, 0x65,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x4d, 0x54, 0x50, 0x4d, 0x61, 0x69, 0x6c,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1f, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x03, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x74, 0x6f, 0x22, 0x6e, 0x0a, 0x0a, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x16, 0x45, 0x4e, 0x43, 0x52, 0x59, 0x50, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13,
	0x0a, 0x0f, 0x45, 0x4e, 0x43, 0x52, 0x59, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x4e, 0x43, 0x52, 0x59, 0x50, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x54, 0x4c, 0x53, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12,
	0x45, 0x4e, 0x43, 0x52, 0x59, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x53, 0x4c, 0x5f, 0x54,
	0x4c, 0x53, 0x10, 0x03, 0x22, 0x9a, 0x01, 0x0a, 0x0e, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x55, 0x54, 0x48, 0x45,
	0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x55, 0x54, 0x48, 0x45,
	0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x01,
	0x12, 0x18, 0x0a, 0x14, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x50, 0x4c, 0x41, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x55,
	0x54, 0x48, 0x45, 0x4e, 0x54, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x4f, 0x47,
	0x49, 0x4e, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x55, 0x54, 0x48, 0x45, 0x4e, 0x54, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x52, 0x41, 0x4d, 0x5f, 0x4d, 0x44, 0x35, 0x10,
	0x04, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x63, 0x61, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6b, 0x65, 0x79,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0xeb, 0x02, 0x0a, 0x0c, 0x41, 0x70, 0x70, 0x49, 0x4d,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x39, 0x0a, 0x07, 0x69, 0x6d, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x49, 0x4d, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x2e, 0x49, 0x4d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x69, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x70, 0x70,
	0x5f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61,
	0x70, 0x70, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x57, 0x0a, 0x11, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x70, 0x70, 0x49, 0x4d, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x45,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52,
	0x10, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x1a, 0x62, 0x0a, 0x10, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x34, 0x0a, 0x16, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x2d, 0x0a, 0x06, 0x49, 0x4d, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x17, 0x0a, 0x13, 0x49, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x45, 0x49, 0x53,
	0x48, 0x55, 0x10, 0x01, 0x22, 0x3c, 0x0a, 0x12, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0xde, 0x01, 0x0a, 0x17, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x21,
	0x0a, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x72,
	0x6c, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x73, 0x69,
	0x67, 0x6e, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x53, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x5f, 0x32, 0x66, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x32, 0x66, 0x61, 0x12, 0x28, 0x0a, 0x10, 0x6f,
	0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x69, 0x70, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x75, 0x74, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x49,
	0x70, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x73, 0x5f,
	0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x73, 0x57, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b,
	0x55, 0x72, 0x6c, 0x22, 0xd0, 0x01, 0x0a, 0x18, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x40, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x1a, 0x72, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62,
	0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x08, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x09, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa4, 0x01, 0x0a, 0x17, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x12, 0x3f, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x1a, 0x48, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0xf6, 0x01,
	0x0a, 0x15, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x59, 0x0a, 0x0f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x52, 0x0e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x73, 0x1a, 0x81, 0x01, 0x0a, 0x0d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x12, 0x33, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x06,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0x98, 0x02, 0x0a, 0x15, 0x57, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x54, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f,
	0x72, 0x67, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f,
	0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x70, 0x6c, 0x61,
	0x6e, 0x32, 0xdc, 0x02, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x6c, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x20, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0xda, 0x41, 0x00, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x0e, 0x12, 0x0c, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x68, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x1e, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x14, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x24, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x17, 0x12, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65,
	0x3d, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0x72, 0x0a, 0x0a,
	0x53, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x2e, 0x62, 0x79, 0x74,
	0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x53, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x62, 0x79, 0x74,
	0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x07, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x32, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x2e,
	0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2f, 0x2a, 0x7d,
	0x42, 0x11, 0x5a, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x67, 0x6f,
	0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v1_setting_service_proto_rawDescOnce sync.Once
	file_v1_setting_service_proto_rawDescData = file_v1_setting_service_proto_rawDesc
)

func file_v1_setting_service_proto_rawDescGZIP() []byte {
	file_v1_setting_service_proto_rawDescOnce.Do(func() {
		file_v1_setting_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_setting_service_proto_rawDescData)
	})
	return file_v1_setting_service_proto_rawDescData
}

var file_v1_setting_service_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_v1_setting_service_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_v1_setting_service_proto_goTypes = []interface{}{
	(SMTPMailDeliverySettingValue_Encryption)(0),     // 0: bytebase.v1.SMTPMailDeliverySettingValue.Encryption
	(SMTPMailDeliverySettingValue_Authentication)(0), // 1: bytebase.v1.SMTPMailDeliverySettingValue.Authentication
	(AppIMSetting_IMType)(0),                         // 2: bytebase.v1.AppIMSetting.IMType
	(*ListSettingsRequest)(nil),                      // 3: bytebase.v1.ListSettingsRequest
	(*ListSettingsResponse)(nil),                     // 4: bytebase.v1.ListSettingsResponse
	(*GetSettingRequest)(nil),                        // 5: bytebase.v1.GetSettingRequest
	(*GetSettingResponse)(nil),                       // 6: bytebase.v1.GetSettingResponse
	(*SetSettingRequest)(nil),                        // 7: bytebase.v1.SetSettingRequest
	(*Setting)(nil),                                  // 8: bytebase.v1.Setting
	(*Value)(nil),                                    // 9: bytebase.v1.Value
	(*SMTPMailDeliverySettingValue)(nil),             // 10: bytebase.v1.SMTPMailDeliverySettingValue
	(*AppIMSetting)(nil),                             // 11: bytebase.v1.AppIMSetting
	(*AgentPluginSetting)(nil),                       // 12: bytebase.v1.AgentPluginSetting
	(*WorkspaceProfileSetting)(nil),                  // 13: bytebase.v1.WorkspaceProfileSetting
	(*WorkspaceApprovalSetting)(nil),                 // 14: bytebase.v1.WorkspaceApprovalSetting
	(*ExternalApprovalSetting)(nil),                  // 15: bytebase.v1.ExternalApprovalSetting
	(*SchemaTemplateSetting)(nil),                    // 16: bytebase.v1.SchemaTemplateSetting
	(*WorkspaceTrialSetting)(nil),                    // 17: bytebase.v1.WorkspaceTrialSetting
	(*AppIMSetting_ExternalApproval)(nil),            // 18: bytebase.v1.AppIMSetting.ExternalApproval
	(*WorkspaceApprovalSetting_Rule)(nil),            // 19: bytebase.v1.WorkspaceApprovalSetting.Rule
	(*ExternalApprovalSetting_Node)(nil),             // 20: bytebase.v1.ExternalApprovalSetting.Node
	(*SchemaTemplateSetting_FieldTemplate)(nil),      // 21: bytebase.v1.SchemaTemplateSetting.FieldTemplate
	(*timestamppb.Timestamp)(nil),                    // 22: google.protobuf.Timestamp
	(PlanType)(0),                                    // 23: bytebase.v1.PlanType
	(*ApprovalTemplate)(nil),                         // 24: bytebase.v1.ApprovalTemplate
	(*expr.Expr)(nil),                                // 25: google.type.Expr
	(Engine)(0),                                      // 26: bytebase.v1.Engine
	(*ColumnMetadata)(nil),                           // 27: bytebase.v1.ColumnMetadata
}
var file_v1_setting_service_proto_depIdxs = []int32{
	8,  // 0: bytebase.v1.ListSettingsResponse.settings:type_name -> bytebase.v1.Setting
	8,  // 1: bytebase.v1.GetSettingResponse.setting:type_name -> bytebase.v1.Setting
	8,  // 2: bytebase.v1.SetSettingRequest.setting:type_name -> bytebase.v1.Setting
	9,  // 3: bytebase.v1.Setting.value:type_name -> bytebase.v1.Value
	10, // 4: bytebase.v1.Value.smtp_mail_delivery_setting_value:type_name -> bytebase.v1.SMTPMailDeliverySettingValue
	11, // 5: bytebase.v1.Value.app_im_setting_value:type_name -> bytebase.v1.AppIMSetting
	12, // 6: bytebase.v1.Value.agent_plugin_setting_value:type_name -> bytebase.v1.AgentPluginSetting
	13, // 7: bytebase.v1.Value.workspace_profile_setting_value:type_name -> bytebase.v1.WorkspaceProfileSetting
	14, // 8: bytebase.v1.Value.workspace_approval_setting_value:type_name -> bytebase.v1.WorkspaceApprovalSetting
	17, // 9: bytebase.v1.Value.workspace_trial_setting_value:type_name -> bytebase.v1.WorkspaceTrialSetting
	15, // 10: bytebase.v1.Value.external_approval_setting_value:type_name -> bytebase.v1.ExternalApprovalSetting
	16, // 11: bytebase.v1.Value.schema_template_setting_value:type_name -> bytebase.v1.SchemaTemplateSetting
	0,  // 12: bytebase.v1.SMTPMailDeliverySettingValue.encryption:type_name -> bytebase.v1.SMTPMailDeliverySettingValue.Encryption
	1,  // 13: bytebase.v1.SMTPMailDeliverySettingValue.authentication:type_name -> bytebase.v1.SMTPMailDeliverySettingValue.Authentication
	2,  // 14: bytebase.v1.AppIMSetting.im_type:type_name -> bytebase.v1.AppIMSetting.IMType
	18, // 15: bytebase.v1.AppIMSetting.external_approval:type_name -> bytebase.v1.AppIMSetting.ExternalApproval
	19, // 16: bytebase.v1.WorkspaceApprovalSetting.rules:type_name -> bytebase.v1.WorkspaceApprovalSetting.Rule
	20, // 17: bytebase.v1.ExternalApprovalSetting.nodes:type_name -> bytebase.v1.ExternalApprovalSetting.Node
	21, // 18: bytebase.v1.SchemaTemplateSetting.field_templates:type_name -> bytebase.v1.SchemaTemplateSetting.FieldTemplate
	22, // 19: bytebase.v1.WorkspaceTrialSetting.expire_time:type_name -> google.protobuf.Timestamp
	22, // 20: bytebase.v1.WorkspaceTrialSetting.issued_time:type_name -> google.protobuf.Timestamp
	23, // 21: bytebase.v1.WorkspaceTrialSetting.plan:type_name -> bytebase.v1.PlanType
	24, // 22: bytebase.v1.WorkspaceApprovalSetting.Rule.template:type_name -> bytebase.v1.ApprovalTemplate
	25, // 23: bytebase.v1.WorkspaceApprovalSetting.Rule.condition:type_name -> google.type.Expr
	26, // 24: bytebase.v1.SchemaTemplateSetting.FieldTemplate.engine:type_name -> bytebase.v1.Engine
	27, // 25: bytebase.v1.SchemaTemplateSetting.FieldTemplate.column:type_name -> bytebase.v1.ColumnMetadata
	3,  // 26: bytebase.v1.SettingService.ListSettings:input_type -> bytebase.v1.ListSettingsRequest
	5,  // 27: bytebase.v1.SettingService.GetSetting:input_type -> bytebase.v1.GetSettingRequest
	7,  // 28: bytebase.v1.SettingService.SetSetting:input_type -> bytebase.v1.SetSettingRequest
	4,  // 29: bytebase.v1.SettingService.ListSettings:output_type -> bytebase.v1.ListSettingsResponse
	8,  // 30: bytebase.v1.SettingService.GetSetting:output_type -> bytebase.v1.Setting
	8,  // 31: bytebase.v1.SettingService.SetSetting:output_type -> bytebase.v1.Setting
	29, // [29:32] is the sub-list for method output_type
	26, // [26:29] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_v1_setting_service_proto_init() }
func file_v1_setting_service_proto_init() {
	if File_v1_setting_service_proto != nil {
		return
	}
	file_v1_common_proto_init()
	file_v1_database_service_proto_init()
	file_v1_issue_service_proto_init()
	file_v1_subscription_service_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_v1_setting_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_setting_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSettingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_setting_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_setting_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSettingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_setting_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSettingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_setting_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Setting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_setting_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_setting_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SMTPMailDeliverySettingValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_setting_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppIMSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_setting_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentPluginSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_setting_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkspaceProfileSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_setting_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkspaceApprovalSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_setting_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalApprovalSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_setting_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchemaTemplateSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_setting_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkspaceTrialSetting); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_setting_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppIMSetting_ExternalApproval); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_setting_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkspaceApprovalSetting_Rule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_setting_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalApprovalSetting_Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_setting_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchemaTemplateSetting_FieldTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_v1_setting_service_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*Value_StringValue)(nil),
		(*Value_SmtpMailDeliverySettingValue)(nil),
		(*Value_AppImSettingValue)(nil),
		(*Value_AgentPluginSettingValue)(nil),
		(*Value_WorkspaceProfileSettingValue)(nil),
		(*Value_WorkspaceApprovalSettingValue)(nil),
		(*Value_WorkspaceTrialSettingValue)(nil),
		(*Value_ExternalApprovalSettingValue)(nil),
		(*Value_SchemaTemplateSettingValue)(nil),
	}
	file_v1_setting_service_proto_msgTypes[7].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_setting_service_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v1_setting_service_proto_goTypes,
		DependencyIndexes: file_v1_setting_service_proto_depIdxs,
		EnumInfos:         file_v1_setting_service_proto_enumTypes,
		MessageInfos:      file_v1_setting_service_proto_msgTypes,
	}.Build()
	File_v1_setting_service_proto = out.File
	file_v1_setting_service_proto_rawDesc = nil
	file_v1_setting_service_proto_goTypes = nil
	file_v1_setting_service_proto_depIdxs = nil
}
