// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: v1/common.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type State int32

const (
	State_STATE_UNSPECIFIED State = 0
	State_ACTIVE            State = 1
	State_DELETED           State = 2
)

// Enum value maps for State.
var (
	State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "ACTIVE",
		2: "DELETED",
	}
	State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"ACTIVE":            1,
		"DELETED":           2,
	}
)

func (x State) Enum() *State {
	p := new(State)
	*p = x
	return p
}

func (x State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (State) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_common_proto_enumTypes[0].Descriptor()
}

func (State) Type() protoreflect.EnumType {
	return &file_v1_common_proto_enumTypes[0]
}

func (x State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use State.Descriptor instead.
func (State) EnumDescriptor() ([]byte, []int) {
	return file_v1_common_proto_rawDescGZIP(), []int{0}
}

type Engine int32

const (
	Engine_ENGINE_UNSPECIFIED Engine = 0
	Engine_CLICKHOUSE         Engine = 1
	Engine_MYSQL              Engine = 2
	Engine_POSTGRES           Engine = 3
	Engine_SNOWFLAKE          Engine = 4
	Engine_SQLITE             Engine = 5
	Engine_TIDB               Engine = 6
	Engine_MONGODB            Engine = 7
	Engine_REDIS              Engine = 8
	Engine_ORACLE             Engine = 9
	Engine_SPANNER            Engine = 10
	Engine_MSSQL              Engine = 11
	Engine_REDSHIFT           Engine = 12
	Engine_MARIADB            Engine = 13
	Engine_OCEANBASE          Engine = 14
	Engine_DM                 Engine = 15
	Engine_RISINGWAVE         Engine = 16
	Engine_OCEANBASE_ORACLE   Engine = 17
	Engine_STARROCKS          Engine = 18
	Engine_DORIS              Engine = 19
	Engine_HIVE               Engine = 20
	Engine_ELASTICSEARCH      Engine = 21
	Engine_BIGQUERY           Engine = 22
	Engine_DYNAMODB           Engine = 23
	Engine_DATABRICKS         Engine = 24
	Engine_COCKROACHDB        Engine = 25
	Engine_COSMOSDB           Engine = 26
	Engine_TRINO              Engine = 27
)

// Enum value maps for Engine.
var (
	Engine_name = map[int32]string{
		0:  "ENGINE_UNSPECIFIED",
		1:  "CLICKHOUSE",
		2:  "MYSQL",
		3:  "POSTGRES",
		4:  "SNOWFLAKE",
		5:  "SQLITE",
		6:  "TIDB",
		7:  "MONGODB",
		8:  "REDIS",
		9:  "ORACLE",
		10: "SPANNER",
		11: "MSSQL",
		12: "REDSHIFT",
		13: "MARIADB",
		14: "OCEANBASE",
		15: "DM",
		16: "RISINGWAVE",
		17: "OCEANBASE_ORACLE",
		18: "STARROCKS",
		19: "DORIS",
		20: "HIVE",
		21: "ELASTICSEARCH",
		22: "BIGQUERY",
		23: "DYNAMODB",
		24: "DATABRICKS",
		25: "COCKROACHDB",
		26: "COSMOSDB",
		27: "TRINO",
	}
	Engine_value = map[string]int32{
		"ENGINE_UNSPECIFIED": 0,
		"CLICKHOUSE":         1,
		"MYSQL":              2,
		"POSTGRES":           3,
		"SNOWFLAKE":          4,
		"SQLITE":             5,
		"TIDB":               6,
		"MONGODB":            7,
		"REDIS":              8,
		"ORACLE":             9,
		"SPANNER":            10,
		"MSSQL":              11,
		"REDSHIFT":           12,
		"MARIADB":            13,
		"OCEANBASE":          14,
		"DM":                 15,
		"RISINGWAVE":         16,
		"OCEANBASE_ORACLE":   17,
		"STARROCKS":          18,
		"DORIS":              19,
		"HIVE":               20,
		"ELASTICSEARCH":      21,
		"BIGQUERY":           22,
		"DYNAMODB":           23,
		"DATABRICKS":         24,
		"COCKROACHDB":        25,
		"COSMOSDB":           26,
		"TRINO":              27,
	}
)

func (x Engine) Enum() *Engine {
	p := new(Engine)
	*p = x
	return p
}

func (x Engine) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Engine) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_common_proto_enumTypes[1].Descriptor()
}

func (Engine) Type() protoreflect.EnumType {
	return &file_v1_common_proto_enumTypes[1]
}

func (x Engine) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Engine.Descriptor instead.
func (Engine) EnumDescriptor() ([]byte, []int) {
	return file_v1_common_proto_rawDescGZIP(), []int{1}
}

type VCSType int32

const (
	VCSType_VCS_TYPE_UNSPECIFIED VCSType = 0
	VCSType_GITHUB               VCSType = 1
	VCSType_GITLAB               VCSType = 2
	VCSType_BITBUCKET            VCSType = 3
	VCSType_AZURE_DEVOPS         VCSType = 4
)

// Enum value maps for VCSType.
var (
	VCSType_name = map[int32]string{
		0: "VCS_TYPE_UNSPECIFIED",
		1: "GITHUB",
		2: "GITLAB",
		3: "BITBUCKET",
		4: "AZURE_DEVOPS",
	}
	VCSType_value = map[string]int32{
		"VCS_TYPE_UNSPECIFIED": 0,
		"GITHUB":               1,
		"GITLAB":               2,
		"BITBUCKET":            3,
		"AZURE_DEVOPS":         4,
	}
)

func (x VCSType) Enum() *VCSType {
	p := new(VCSType)
	*p = x
	return p
}

func (x VCSType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VCSType) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_common_proto_enumTypes[2].Descriptor()
}

func (VCSType) Type() protoreflect.EnumType {
	return &file_v1_common_proto_enumTypes[2]
}

func (x VCSType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VCSType.Descriptor instead.
func (VCSType) EnumDescriptor() ([]byte, []int) {
	return file_v1_common_proto_rawDescGZIP(), []int{2}
}

type ExportFormat int32

const (
	ExportFormat_FORMAT_UNSPECIFIED ExportFormat = 0
	ExportFormat_CSV                ExportFormat = 1
	ExportFormat_JSON               ExportFormat = 2
	ExportFormat_SQL                ExportFormat = 3
	ExportFormat_XLSX               ExportFormat = 4
)

// Enum value maps for ExportFormat.
var (
	ExportFormat_name = map[int32]string{
		0: "FORMAT_UNSPECIFIED",
		1: "CSV",
		2: "JSON",
		3: "SQL",
		4: "XLSX",
	}
	ExportFormat_value = map[string]int32{
		"FORMAT_UNSPECIFIED": 0,
		"CSV":                1,
		"JSON":               2,
		"SQL":                3,
		"XLSX":               4,
	}
)

func (x ExportFormat) Enum() *ExportFormat {
	p := new(ExportFormat)
	*p = x
	return p
}

func (x ExportFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExportFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_common_proto_enumTypes[3].Descriptor()
}

func (ExportFormat) Type() protoreflect.EnumType {
	return &file_v1_common_proto_enumTypes[3]
}

func (x ExportFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExportFormat.Descriptor instead.
func (ExportFormat) EnumDescriptor() ([]byte, []int) {
	return file_v1_common_proto_rawDescGZIP(), []int{3}
}

// Position in a text expressed as zero-based line and zero-based column byte
// offset.
type Position struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Line position in a text (zero-based).
	Line int32 `protobuf:"varint,1,opt,name=line,proto3" json:"line,omitempty"`
	// Column position in a text (zero-based), equivalent to byte offset.
	Column        int32 `protobuf:"varint,2,opt,name=column,proto3" json:"column,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Position) Reset() {
	*x = Position{}
	mi := &file_v1_common_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_v1_common_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_v1_common_proto_rawDescGZIP(), []int{0}
}

func (x *Position) GetLine() int32 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *Position) GetColumn() int32 {
	if x != nil {
		return x.Column
	}
	return 0
}

type Range struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Start         int32                  `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	End           int32                  `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Range) Reset() {
	*x = Range{}
	mi := &file_v1_common_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Range) ProtoMessage() {}

func (x *Range) ProtoReflect() protoreflect.Message {
	mi := &file_v1_common_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Range.ProtoReflect.Descriptor instead.
func (*Range) Descriptor() ([]byte, []int) {
	return file_v1_common_proto_rawDescGZIP(), []int{1}
}

func (x *Range) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *Range) GetEnd() int32 {
	if x != nil {
		return x.End
	}
	return 0
}

var File_v1_common_proto protoreflect.FileDescriptor

const file_v1_common_proto_rawDesc = "" +
	"\n" +
	"\x0fv1/common.proto\x12\vbytebase.v1\"6\n" +
	"\bPosition\x12\x12\n" +
	"\x04line\x18\x01 \x01(\x05R\x04line\x12\x16\n" +
	"\x06column\x18\x02 \x01(\x05R\x06column\"/\n" +
	"\x05Range\x12\x14\n" +
	"\x05start\x18\x01 \x01(\x05R\x05start\x12\x10\n" +
	"\x03end\x18\x02 \x01(\x05R\x03end*7\n" +
	"\x05State\x12\x15\n" +
	"\x11STATE_UNSPECIFIED\x10\x00\x12\n" +
	"\n" +
	"\x06ACTIVE\x10\x01\x12\v\n" +
	"\aDELETED\x10\x02*\x8f\x03\n" +
	"\x06Engine\x12\x16\n" +
	"\x12ENGINE_UNSPECIFIED\x10\x00\x12\x0e\n" +
	"\n" +
	"CLICKHOUSE\x10\x01\x12\t\n" +
	"\x05MYSQL\x10\x02\x12\f\n" +
	"\bPOSTGRES\x10\x03\x12\r\n" +
	"\tSNOWFLAKE\x10\x04\x12\n" +
	"\n" +
	"\x06SQLITE\x10\x05\x12\b\n" +
	"\x04TIDB\x10\x06\x12\v\n" +
	"\aMONGODB\x10\a\x12\t\n" +
	"\x05REDIS\x10\b\x12\n" +
	"\n" +
	"\x06ORACLE\x10\t\x12\v\n" +
	"\aSPANNER\x10\n" +
	"\x12\t\n" +
	"\x05MSSQL\x10\v\x12\f\n" +
	"\bREDSHIFT\x10\f\x12\v\n" +
	"\aMARIADB\x10\r\x12\r\n" +
	"\tOCEANBASE\x10\x0e\x12\x06\n" +
	"\x02DM\x10\x0f\x12\x0e\n" +
	"\n" +
	"RISINGWAVE\x10\x10\x12\x14\n" +
	"\x10OCEANBASE_ORACLE\x10\x11\x12\r\n" +
	"\tSTARROCKS\x10\x12\x12\t\n" +
	"\x05DORIS\x10\x13\x12\b\n" +
	"\x04HIVE\x10\x14\x12\x11\n" +
	"\rELASTICSEARCH\x10\x15\x12\f\n" +
	"\bBIGQUERY\x10\x16\x12\f\n" +
	"\bDYNAMODB\x10\x17\x12\x0e\n" +
	"\n" +
	"DATABRICKS\x10\x18\x12\x0f\n" +
	"\vCOCKROACHDB\x10\x19\x12\f\n" +
	"\bCOSMOSDB\x10\x1a\x12\t\n" +
	"\x05TRINO\x10\x1b*\\\n" +
	"\aVCSType\x12\x18\n" +
	"\x14VCS_TYPE_UNSPECIFIED\x10\x00\x12\n" +
	"\n" +
	"\x06GITHUB\x10\x01\x12\n" +
	"\n" +
	"\x06GITLAB\x10\x02\x12\r\n" +
	"\tBITBUCKET\x10\x03\x12\x10\n" +
	"\fAZURE_DEVOPS\x10\x04*L\n" +
	"\fExportFormat\x12\x16\n" +
	"\x12FORMAT_UNSPECIFIED\x10\x00\x12\a\n" +
	"\x03CSV\x10\x01\x12\b\n" +
	"\x04JSON\x10\x02\x12\a\n" +
	"\x03SQL\x10\x03\x12\b\n" +
	"\x04XLSX\x10\x04B\x11Z\x0fgenerated-go/v1b\x06proto3"

var (
	file_v1_common_proto_rawDescOnce sync.Once
	file_v1_common_proto_rawDescData []byte
)

func file_v1_common_proto_rawDescGZIP() []byte {
	file_v1_common_proto_rawDescOnce.Do(func() {
		file_v1_common_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_v1_common_proto_rawDesc), len(file_v1_common_proto_rawDesc)))
	})
	return file_v1_common_proto_rawDescData
}

var file_v1_common_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_v1_common_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_v1_common_proto_goTypes = []any{
	(State)(0),        // 0: bytebase.v1.State
	(Engine)(0),       // 1: bytebase.v1.Engine
	(VCSType)(0),      // 2: bytebase.v1.VCSType
	(ExportFormat)(0), // 3: bytebase.v1.ExportFormat
	(*Position)(nil),  // 4: bytebase.v1.Position
	(*Range)(nil),     // 5: bytebase.v1.Range
}
var file_v1_common_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_v1_common_proto_init() }
func file_v1_common_proto_init() {
	if File_v1_common_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_v1_common_proto_rawDesc), len(file_v1_common_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_v1_common_proto_goTypes,
		DependencyIndexes: file_v1_common_proto_depIdxs,
		EnumInfos:         file_v1_common_proto_enumTypes,
		MessageInfos:      file_v1_common_proto_msgTypes,
	}.Build()
	File_v1_common_proto = out.File
	file_v1_common_proto_goTypes = nil
	file_v1_common_proto_depIdxs = nil
}
