// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/database_service.proto

package v1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/bytebase/bytebase/proto/generated-go/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// DatabaseServiceName is the fully-qualified name of the DatabaseService service.
	DatabaseServiceName = "bytebase.v1.DatabaseService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DatabaseServiceGetDatabaseProcedure is the fully-qualified name of the DatabaseService's
	// GetDatabase RPC.
	DatabaseServiceGetDatabaseProcedure = "/bytebase.v1.DatabaseService/GetDatabase"
	// DatabaseServiceBatchGetDatabasesProcedure is the fully-qualified name of the DatabaseService's
	// BatchGetDatabases RPC.
	DatabaseServiceBatchGetDatabasesProcedure = "/bytebase.v1.DatabaseService/BatchGetDatabases"
	// DatabaseServiceListDatabasesProcedure is the fully-qualified name of the DatabaseService's
	// ListDatabases RPC.
	DatabaseServiceListDatabasesProcedure = "/bytebase.v1.DatabaseService/ListDatabases"
	// DatabaseServiceUpdateDatabaseProcedure is the fully-qualified name of the DatabaseService's
	// UpdateDatabase RPC.
	DatabaseServiceUpdateDatabaseProcedure = "/bytebase.v1.DatabaseService/UpdateDatabase"
	// DatabaseServiceBatchUpdateDatabasesProcedure is the fully-qualified name of the DatabaseService's
	// BatchUpdateDatabases RPC.
	DatabaseServiceBatchUpdateDatabasesProcedure = "/bytebase.v1.DatabaseService/BatchUpdateDatabases"
	// DatabaseServiceSyncDatabaseProcedure is the fully-qualified name of the DatabaseService's
	// SyncDatabase RPC.
	DatabaseServiceSyncDatabaseProcedure = "/bytebase.v1.DatabaseService/SyncDatabase"
	// DatabaseServiceBatchSyncDatabasesProcedure is the fully-qualified name of the DatabaseService's
	// BatchSyncDatabases RPC.
	DatabaseServiceBatchSyncDatabasesProcedure = "/bytebase.v1.DatabaseService/BatchSyncDatabases"
	// DatabaseServiceGetDatabaseMetadataProcedure is the fully-qualified name of the DatabaseService's
	// GetDatabaseMetadata RPC.
	DatabaseServiceGetDatabaseMetadataProcedure = "/bytebase.v1.DatabaseService/GetDatabaseMetadata"
	// DatabaseServiceGetDatabaseSchemaProcedure is the fully-qualified name of the DatabaseService's
	// GetDatabaseSchema RPC.
	DatabaseServiceGetDatabaseSchemaProcedure = "/bytebase.v1.DatabaseService/GetDatabaseSchema"
	// DatabaseServiceDiffSchemaProcedure is the fully-qualified name of the DatabaseService's
	// DiffSchema RPC.
	DatabaseServiceDiffSchemaProcedure = "/bytebase.v1.DatabaseService/DiffSchema"
	// DatabaseServiceListSecretsProcedure is the fully-qualified name of the DatabaseService's
	// ListSecrets RPC.
	DatabaseServiceListSecretsProcedure = "/bytebase.v1.DatabaseService/ListSecrets"
	// DatabaseServiceUpdateSecretProcedure is the fully-qualified name of the DatabaseService's
	// UpdateSecret RPC.
	DatabaseServiceUpdateSecretProcedure = "/bytebase.v1.DatabaseService/UpdateSecret"
	// DatabaseServiceDeleteSecretProcedure is the fully-qualified name of the DatabaseService's
	// DeleteSecret RPC.
	DatabaseServiceDeleteSecretProcedure = "/bytebase.v1.DatabaseService/DeleteSecret"
	// DatabaseServiceListChangelogsProcedure is the fully-qualified name of the DatabaseService's
	// ListChangelogs RPC.
	DatabaseServiceListChangelogsProcedure = "/bytebase.v1.DatabaseService/ListChangelogs"
	// DatabaseServiceGetChangelogProcedure is the fully-qualified name of the DatabaseService's
	// GetChangelog RPC.
	DatabaseServiceGetChangelogProcedure = "/bytebase.v1.DatabaseService/GetChangelog"
	// DatabaseServiceGetSchemaStringProcedure is the fully-qualified name of the DatabaseService's
	// GetSchemaString RPC.
	DatabaseServiceGetSchemaStringProcedure = "/bytebase.v1.DatabaseService/GetSchemaString"
)

// DatabaseServiceClient is a client for the bytebase.v1.DatabaseService service.
type DatabaseServiceClient interface {
	GetDatabase(context.Context, *connect_go.Request[v1.GetDatabaseRequest]) (*connect_go.Response[v1.Database], error)
	BatchGetDatabases(context.Context, *connect_go.Request[v1.BatchGetDatabasesRequest]) (*connect_go.Response[v1.BatchGetDatabasesResponse], error)
	ListDatabases(context.Context, *connect_go.Request[v1.ListDatabasesRequest]) (*connect_go.Response[v1.ListDatabasesResponse], error)
	UpdateDatabase(context.Context, *connect_go.Request[v1.UpdateDatabaseRequest]) (*connect_go.Response[v1.Database], error)
	BatchUpdateDatabases(context.Context, *connect_go.Request[v1.BatchUpdateDatabasesRequest]) (*connect_go.Response[v1.BatchUpdateDatabasesResponse], error)
	SyncDatabase(context.Context, *connect_go.Request[v1.SyncDatabaseRequest]) (*connect_go.Response[v1.SyncDatabaseResponse], error)
	BatchSyncDatabases(context.Context, *connect_go.Request[v1.BatchSyncDatabasesRequest]) (*connect_go.Response[v1.BatchSyncDatabasesResponse], error)
	GetDatabaseMetadata(context.Context, *connect_go.Request[v1.GetDatabaseMetadataRequest]) (*connect_go.Response[v1.DatabaseMetadata], error)
	GetDatabaseSchema(context.Context, *connect_go.Request[v1.GetDatabaseSchemaRequest]) (*connect_go.Response[v1.DatabaseSchema], error)
	DiffSchema(context.Context, *connect_go.Request[v1.DiffSchemaRequest]) (*connect_go.Response[v1.DiffSchemaResponse], error)
	ListSecrets(context.Context, *connect_go.Request[v1.ListSecretsRequest]) (*connect_go.Response[v1.ListSecretsResponse], error)
	UpdateSecret(context.Context, *connect_go.Request[v1.UpdateSecretRequest]) (*connect_go.Response[v1.Secret], error)
	DeleteSecret(context.Context, *connect_go.Request[v1.DeleteSecretRequest]) (*connect_go.Response[emptypb.Empty], error)
	ListChangelogs(context.Context, *connect_go.Request[v1.ListChangelogsRequest]) (*connect_go.Response[v1.ListChangelogsResponse], error)
	GetChangelog(context.Context, *connect_go.Request[v1.GetChangelogRequest]) (*connect_go.Response[v1.Changelog], error)
	GetSchemaString(context.Context, *connect_go.Request[v1.GetSchemaStringRequest]) (*connect_go.Response[v1.GetSchemaStringResponse], error)
}

// NewDatabaseServiceClient constructs a client for the bytebase.v1.DatabaseService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDatabaseServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) DatabaseServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &databaseServiceClient{
		getDatabase: connect_go.NewClient[v1.GetDatabaseRequest, v1.Database](
			httpClient,
			baseURL+DatabaseServiceGetDatabaseProcedure,
			opts...,
		),
		batchGetDatabases: connect_go.NewClient[v1.BatchGetDatabasesRequest, v1.BatchGetDatabasesResponse](
			httpClient,
			baseURL+DatabaseServiceBatchGetDatabasesProcedure,
			opts...,
		),
		listDatabases: connect_go.NewClient[v1.ListDatabasesRequest, v1.ListDatabasesResponse](
			httpClient,
			baseURL+DatabaseServiceListDatabasesProcedure,
			opts...,
		),
		updateDatabase: connect_go.NewClient[v1.UpdateDatabaseRequest, v1.Database](
			httpClient,
			baseURL+DatabaseServiceUpdateDatabaseProcedure,
			opts...,
		),
		batchUpdateDatabases: connect_go.NewClient[v1.BatchUpdateDatabasesRequest, v1.BatchUpdateDatabasesResponse](
			httpClient,
			baseURL+DatabaseServiceBatchUpdateDatabasesProcedure,
			opts...,
		),
		syncDatabase: connect_go.NewClient[v1.SyncDatabaseRequest, v1.SyncDatabaseResponse](
			httpClient,
			baseURL+DatabaseServiceSyncDatabaseProcedure,
			opts...,
		),
		batchSyncDatabases: connect_go.NewClient[v1.BatchSyncDatabasesRequest, v1.BatchSyncDatabasesResponse](
			httpClient,
			baseURL+DatabaseServiceBatchSyncDatabasesProcedure,
			opts...,
		),
		getDatabaseMetadata: connect_go.NewClient[v1.GetDatabaseMetadataRequest, v1.DatabaseMetadata](
			httpClient,
			baseURL+DatabaseServiceGetDatabaseMetadataProcedure,
			opts...,
		),
		getDatabaseSchema: connect_go.NewClient[v1.GetDatabaseSchemaRequest, v1.DatabaseSchema](
			httpClient,
			baseURL+DatabaseServiceGetDatabaseSchemaProcedure,
			opts...,
		),
		diffSchema: connect_go.NewClient[v1.DiffSchemaRequest, v1.DiffSchemaResponse](
			httpClient,
			baseURL+DatabaseServiceDiffSchemaProcedure,
			opts...,
		),
		listSecrets: connect_go.NewClient[v1.ListSecretsRequest, v1.ListSecretsResponse](
			httpClient,
			baseURL+DatabaseServiceListSecretsProcedure,
			opts...,
		),
		updateSecret: connect_go.NewClient[v1.UpdateSecretRequest, v1.Secret](
			httpClient,
			baseURL+DatabaseServiceUpdateSecretProcedure,
			opts...,
		),
		deleteSecret: connect_go.NewClient[v1.DeleteSecretRequest, emptypb.Empty](
			httpClient,
			baseURL+DatabaseServiceDeleteSecretProcedure,
			opts...,
		),
		listChangelogs: connect_go.NewClient[v1.ListChangelogsRequest, v1.ListChangelogsResponse](
			httpClient,
			baseURL+DatabaseServiceListChangelogsProcedure,
			opts...,
		),
		getChangelog: connect_go.NewClient[v1.GetChangelogRequest, v1.Changelog](
			httpClient,
			baseURL+DatabaseServiceGetChangelogProcedure,
			opts...,
		),
		getSchemaString: connect_go.NewClient[v1.GetSchemaStringRequest, v1.GetSchemaStringResponse](
			httpClient,
			baseURL+DatabaseServiceGetSchemaStringProcedure,
			opts...,
		),
	}
}

// databaseServiceClient implements DatabaseServiceClient.
type databaseServiceClient struct {
	getDatabase          *connect_go.Client[v1.GetDatabaseRequest, v1.Database]
	batchGetDatabases    *connect_go.Client[v1.BatchGetDatabasesRequest, v1.BatchGetDatabasesResponse]
	listDatabases        *connect_go.Client[v1.ListDatabasesRequest, v1.ListDatabasesResponse]
	updateDatabase       *connect_go.Client[v1.UpdateDatabaseRequest, v1.Database]
	batchUpdateDatabases *connect_go.Client[v1.BatchUpdateDatabasesRequest, v1.BatchUpdateDatabasesResponse]
	syncDatabase         *connect_go.Client[v1.SyncDatabaseRequest, v1.SyncDatabaseResponse]
	batchSyncDatabases   *connect_go.Client[v1.BatchSyncDatabasesRequest, v1.BatchSyncDatabasesResponse]
	getDatabaseMetadata  *connect_go.Client[v1.GetDatabaseMetadataRequest, v1.DatabaseMetadata]
	getDatabaseSchema    *connect_go.Client[v1.GetDatabaseSchemaRequest, v1.DatabaseSchema]
	diffSchema           *connect_go.Client[v1.DiffSchemaRequest, v1.DiffSchemaResponse]
	listSecrets          *connect_go.Client[v1.ListSecretsRequest, v1.ListSecretsResponse]
	updateSecret         *connect_go.Client[v1.UpdateSecretRequest, v1.Secret]
	deleteSecret         *connect_go.Client[v1.DeleteSecretRequest, emptypb.Empty]
	listChangelogs       *connect_go.Client[v1.ListChangelogsRequest, v1.ListChangelogsResponse]
	getChangelog         *connect_go.Client[v1.GetChangelogRequest, v1.Changelog]
	getSchemaString      *connect_go.Client[v1.GetSchemaStringRequest, v1.GetSchemaStringResponse]
}

// GetDatabase calls bytebase.v1.DatabaseService.GetDatabase.
func (c *databaseServiceClient) GetDatabase(ctx context.Context, req *connect_go.Request[v1.GetDatabaseRequest]) (*connect_go.Response[v1.Database], error) {
	return c.getDatabase.CallUnary(ctx, req)
}

// BatchGetDatabases calls bytebase.v1.DatabaseService.BatchGetDatabases.
func (c *databaseServiceClient) BatchGetDatabases(ctx context.Context, req *connect_go.Request[v1.BatchGetDatabasesRequest]) (*connect_go.Response[v1.BatchGetDatabasesResponse], error) {
	return c.batchGetDatabases.CallUnary(ctx, req)
}

// ListDatabases calls bytebase.v1.DatabaseService.ListDatabases.
func (c *databaseServiceClient) ListDatabases(ctx context.Context, req *connect_go.Request[v1.ListDatabasesRequest]) (*connect_go.Response[v1.ListDatabasesResponse], error) {
	return c.listDatabases.CallUnary(ctx, req)
}

// UpdateDatabase calls bytebase.v1.DatabaseService.UpdateDatabase.
func (c *databaseServiceClient) UpdateDatabase(ctx context.Context, req *connect_go.Request[v1.UpdateDatabaseRequest]) (*connect_go.Response[v1.Database], error) {
	return c.updateDatabase.CallUnary(ctx, req)
}

// BatchUpdateDatabases calls bytebase.v1.DatabaseService.BatchUpdateDatabases.
func (c *databaseServiceClient) BatchUpdateDatabases(ctx context.Context, req *connect_go.Request[v1.BatchUpdateDatabasesRequest]) (*connect_go.Response[v1.BatchUpdateDatabasesResponse], error) {
	return c.batchUpdateDatabases.CallUnary(ctx, req)
}

// SyncDatabase calls bytebase.v1.DatabaseService.SyncDatabase.
func (c *databaseServiceClient) SyncDatabase(ctx context.Context, req *connect_go.Request[v1.SyncDatabaseRequest]) (*connect_go.Response[v1.SyncDatabaseResponse], error) {
	return c.syncDatabase.CallUnary(ctx, req)
}

// BatchSyncDatabases calls bytebase.v1.DatabaseService.BatchSyncDatabases.
func (c *databaseServiceClient) BatchSyncDatabases(ctx context.Context, req *connect_go.Request[v1.BatchSyncDatabasesRequest]) (*connect_go.Response[v1.BatchSyncDatabasesResponse], error) {
	return c.batchSyncDatabases.CallUnary(ctx, req)
}

// GetDatabaseMetadata calls bytebase.v1.DatabaseService.GetDatabaseMetadata.
func (c *databaseServiceClient) GetDatabaseMetadata(ctx context.Context, req *connect_go.Request[v1.GetDatabaseMetadataRequest]) (*connect_go.Response[v1.DatabaseMetadata], error) {
	return c.getDatabaseMetadata.CallUnary(ctx, req)
}

// GetDatabaseSchema calls bytebase.v1.DatabaseService.GetDatabaseSchema.
func (c *databaseServiceClient) GetDatabaseSchema(ctx context.Context, req *connect_go.Request[v1.GetDatabaseSchemaRequest]) (*connect_go.Response[v1.DatabaseSchema], error) {
	return c.getDatabaseSchema.CallUnary(ctx, req)
}

// DiffSchema calls bytebase.v1.DatabaseService.DiffSchema.
func (c *databaseServiceClient) DiffSchema(ctx context.Context, req *connect_go.Request[v1.DiffSchemaRequest]) (*connect_go.Response[v1.DiffSchemaResponse], error) {
	return c.diffSchema.CallUnary(ctx, req)
}

// ListSecrets calls bytebase.v1.DatabaseService.ListSecrets.
func (c *databaseServiceClient) ListSecrets(ctx context.Context, req *connect_go.Request[v1.ListSecretsRequest]) (*connect_go.Response[v1.ListSecretsResponse], error) {
	return c.listSecrets.CallUnary(ctx, req)
}

// UpdateSecret calls bytebase.v1.DatabaseService.UpdateSecret.
func (c *databaseServiceClient) UpdateSecret(ctx context.Context, req *connect_go.Request[v1.UpdateSecretRequest]) (*connect_go.Response[v1.Secret], error) {
	return c.updateSecret.CallUnary(ctx, req)
}

// DeleteSecret calls bytebase.v1.DatabaseService.DeleteSecret.
func (c *databaseServiceClient) DeleteSecret(ctx context.Context, req *connect_go.Request[v1.DeleteSecretRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.deleteSecret.CallUnary(ctx, req)
}

// ListChangelogs calls bytebase.v1.DatabaseService.ListChangelogs.
func (c *databaseServiceClient) ListChangelogs(ctx context.Context, req *connect_go.Request[v1.ListChangelogsRequest]) (*connect_go.Response[v1.ListChangelogsResponse], error) {
	return c.listChangelogs.CallUnary(ctx, req)
}

// GetChangelog calls bytebase.v1.DatabaseService.GetChangelog.
func (c *databaseServiceClient) GetChangelog(ctx context.Context, req *connect_go.Request[v1.GetChangelogRequest]) (*connect_go.Response[v1.Changelog], error) {
	return c.getChangelog.CallUnary(ctx, req)
}

// GetSchemaString calls bytebase.v1.DatabaseService.GetSchemaString.
func (c *databaseServiceClient) GetSchemaString(ctx context.Context, req *connect_go.Request[v1.GetSchemaStringRequest]) (*connect_go.Response[v1.GetSchemaStringResponse], error) {
	return c.getSchemaString.CallUnary(ctx, req)
}

// DatabaseServiceHandler is an implementation of the bytebase.v1.DatabaseService service.
type DatabaseServiceHandler interface {
	GetDatabase(context.Context, *connect_go.Request[v1.GetDatabaseRequest]) (*connect_go.Response[v1.Database], error)
	BatchGetDatabases(context.Context, *connect_go.Request[v1.BatchGetDatabasesRequest]) (*connect_go.Response[v1.BatchGetDatabasesResponse], error)
	ListDatabases(context.Context, *connect_go.Request[v1.ListDatabasesRequest]) (*connect_go.Response[v1.ListDatabasesResponse], error)
	UpdateDatabase(context.Context, *connect_go.Request[v1.UpdateDatabaseRequest]) (*connect_go.Response[v1.Database], error)
	BatchUpdateDatabases(context.Context, *connect_go.Request[v1.BatchUpdateDatabasesRequest]) (*connect_go.Response[v1.BatchUpdateDatabasesResponse], error)
	SyncDatabase(context.Context, *connect_go.Request[v1.SyncDatabaseRequest]) (*connect_go.Response[v1.SyncDatabaseResponse], error)
	BatchSyncDatabases(context.Context, *connect_go.Request[v1.BatchSyncDatabasesRequest]) (*connect_go.Response[v1.BatchSyncDatabasesResponse], error)
	GetDatabaseMetadata(context.Context, *connect_go.Request[v1.GetDatabaseMetadataRequest]) (*connect_go.Response[v1.DatabaseMetadata], error)
	GetDatabaseSchema(context.Context, *connect_go.Request[v1.GetDatabaseSchemaRequest]) (*connect_go.Response[v1.DatabaseSchema], error)
	DiffSchema(context.Context, *connect_go.Request[v1.DiffSchemaRequest]) (*connect_go.Response[v1.DiffSchemaResponse], error)
	ListSecrets(context.Context, *connect_go.Request[v1.ListSecretsRequest]) (*connect_go.Response[v1.ListSecretsResponse], error)
	UpdateSecret(context.Context, *connect_go.Request[v1.UpdateSecretRequest]) (*connect_go.Response[v1.Secret], error)
	DeleteSecret(context.Context, *connect_go.Request[v1.DeleteSecretRequest]) (*connect_go.Response[emptypb.Empty], error)
	ListChangelogs(context.Context, *connect_go.Request[v1.ListChangelogsRequest]) (*connect_go.Response[v1.ListChangelogsResponse], error)
	GetChangelog(context.Context, *connect_go.Request[v1.GetChangelogRequest]) (*connect_go.Response[v1.Changelog], error)
	GetSchemaString(context.Context, *connect_go.Request[v1.GetSchemaStringRequest]) (*connect_go.Response[v1.GetSchemaStringResponse], error)
}

// NewDatabaseServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDatabaseServiceHandler(svc DatabaseServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	databaseServiceGetDatabaseHandler := connect_go.NewUnaryHandler(
		DatabaseServiceGetDatabaseProcedure,
		svc.GetDatabase,
		opts...,
	)
	databaseServiceBatchGetDatabasesHandler := connect_go.NewUnaryHandler(
		DatabaseServiceBatchGetDatabasesProcedure,
		svc.BatchGetDatabases,
		opts...,
	)
	databaseServiceListDatabasesHandler := connect_go.NewUnaryHandler(
		DatabaseServiceListDatabasesProcedure,
		svc.ListDatabases,
		opts...,
	)
	databaseServiceUpdateDatabaseHandler := connect_go.NewUnaryHandler(
		DatabaseServiceUpdateDatabaseProcedure,
		svc.UpdateDatabase,
		opts...,
	)
	databaseServiceBatchUpdateDatabasesHandler := connect_go.NewUnaryHandler(
		DatabaseServiceBatchUpdateDatabasesProcedure,
		svc.BatchUpdateDatabases,
		opts...,
	)
	databaseServiceSyncDatabaseHandler := connect_go.NewUnaryHandler(
		DatabaseServiceSyncDatabaseProcedure,
		svc.SyncDatabase,
		opts...,
	)
	databaseServiceBatchSyncDatabasesHandler := connect_go.NewUnaryHandler(
		DatabaseServiceBatchSyncDatabasesProcedure,
		svc.BatchSyncDatabases,
		opts...,
	)
	databaseServiceGetDatabaseMetadataHandler := connect_go.NewUnaryHandler(
		DatabaseServiceGetDatabaseMetadataProcedure,
		svc.GetDatabaseMetadata,
		opts...,
	)
	databaseServiceGetDatabaseSchemaHandler := connect_go.NewUnaryHandler(
		DatabaseServiceGetDatabaseSchemaProcedure,
		svc.GetDatabaseSchema,
		opts...,
	)
	databaseServiceDiffSchemaHandler := connect_go.NewUnaryHandler(
		DatabaseServiceDiffSchemaProcedure,
		svc.DiffSchema,
		opts...,
	)
	databaseServiceListSecretsHandler := connect_go.NewUnaryHandler(
		DatabaseServiceListSecretsProcedure,
		svc.ListSecrets,
		opts...,
	)
	databaseServiceUpdateSecretHandler := connect_go.NewUnaryHandler(
		DatabaseServiceUpdateSecretProcedure,
		svc.UpdateSecret,
		opts...,
	)
	databaseServiceDeleteSecretHandler := connect_go.NewUnaryHandler(
		DatabaseServiceDeleteSecretProcedure,
		svc.DeleteSecret,
		opts...,
	)
	databaseServiceListChangelogsHandler := connect_go.NewUnaryHandler(
		DatabaseServiceListChangelogsProcedure,
		svc.ListChangelogs,
		opts...,
	)
	databaseServiceGetChangelogHandler := connect_go.NewUnaryHandler(
		DatabaseServiceGetChangelogProcedure,
		svc.GetChangelog,
		opts...,
	)
	databaseServiceGetSchemaStringHandler := connect_go.NewUnaryHandler(
		DatabaseServiceGetSchemaStringProcedure,
		svc.GetSchemaString,
		opts...,
	)
	return "/bytebase.v1.DatabaseService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DatabaseServiceGetDatabaseProcedure:
			databaseServiceGetDatabaseHandler.ServeHTTP(w, r)
		case DatabaseServiceBatchGetDatabasesProcedure:
			databaseServiceBatchGetDatabasesHandler.ServeHTTP(w, r)
		case DatabaseServiceListDatabasesProcedure:
			databaseServiceListDatabasesHandler.ServeHTTP(w, r)
		case DatabaseServiceUpdateDatabaseProcedure:
			databaseServiceUpdateDatabaseHandler.ServeHTTP(w, r)
		case DatabaseServiceBatchUpdateDatabasesProcedure:
			databaseServiceBatchUpdateDatabasesHandler.ServeHTTP(w, r)
		case DatabaseServiceSyncDatabaseProcedure:
			databaseServiceSyncDatabaseHandler.ServeHTTP(w, r)
		case DatabaseServiceBatchSyncDatabasesProcedure:
			databaseServiceBatchSyncDatabasesHandler.ServeHTTP(w, r)
		case DatabaseServiceGetDatabaseMetadataProcedure:
			databaseServiceGetDatabaseMetadataHandler.ServeHTTP(w, r)
		case DatabaseServiceGetDatabaseSchemaProcedure:
			databaseServiceGetDatabaseSchemaHandler.ServeHTTP(w, r)
		case DatabaseServiceDiffSchemaProcedure:
			databaseServiceDiffSchemaHandler.ServeHTTP(w, r)
		case DatabaseServiceListSecretsProcedure:
			databaseServiceListSecretsHandler.ServeHTTP(w, r)
		case DatabaseServiceUpdateSecretProcedure:
			databaseServiceUpdateSecretHandler.ServeHTTP(w, r)
		case DatabaseServiceDeleteSecretProcedure:
			databaseServiceDeleteSecretHandler.ServeHTTP(w, r)
		case DatabaseServiceListChangelogsProcedure:
			databaseServiceListChangelogsHandler.ServeHTTP(w, r)
		case DatabaseServiceGetChangelogProcedure:
			databaseServiceGetChangelogHandler.ServeHTTP(w, r)
		case DatabaseServiceGetSchemaStringProcedure:
			databaseServiceGetSchemaStringHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDatabaseServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDatabaseServiceHandler struct{}

func (UnimplementedDatabaseServiceHandler) GetDatabase(context.Context, *connect_go.Request[v1.GetDatabaseRequest]) (*connect_go.Response[v1.Database], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bytebase.v1.DatabaseService.GetDatabase is not implemented"))
}

func (UnimplementedDatabaseServiceHandler) BatchGetDatabases(context.Context, *connect_go.Request[v1.BatchGetDatabasesRequest]) (*connect_go.Response[v1.BatchGetDatabasesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bytebase.v1.DatabaseService.BatchGetDatabases is not implemented"))
}

func (UnimplementedDatabaseServiceHandler) ListDatabases(context.Context, *connect_go.Request[v1.ListDatabasesRequest]) (*connect_go.Response[v1.ListDatabasesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bytebase.v1.DatabaseService.ListDatabases is not implemented"))
}

func (UnimplementedDatabaseServiceHandler) UpdateDatabase(context.Context, *connect_go.Request[v1.UpdateDatabaseRequest]) (*connect_go.Response[v1.Database], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bytebase.v1.DatabaseService.UpdateDatabase is not implemented"))
}

func (UnimplementedDatabaseServiceHandler) BatchUpdateDatabases(context.Context, *connect_go.Request[v1.BatchUpdateDatabasesRequest]) (*connect_go.Response[v1.BatchUpdateDatabasesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bytebase.v1.DatabaseService.BatchUpdateDatabases is not implemented"))
}

func (UnimplementedDatabaseServiceHandler) SyncDatabase(context.Context, *connect_go.Request[v1.SyncDatabaseRequest]) (*connect_go.Response[v1.SyncDatabaseResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bytebase.v1.DatabaseService.SyncDatabase is not implemented"))
}

func (UnimplementedDatabaseServiceHandler) BatchSyncDatabases(context.Context, *connect_go.Request[v1.BatchSyncDatabasesRequest]) (*connect_go.Response[v1.BatchSyncDatabasesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bytebase.v1.DatabaseService.BatchSyncDatabases is not implemented"))
}

func (UnimplementedDatabaseServiceHandler) GetDatabaseMetadata(context.Context, *connect_go.Request[v1.GetDatabaseMetadataRequest]) (*connect_go.Response[v1.DatabaseMetadata], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bytebase.v1.DatabaseService.GetDatabaseMetadata is not implemented"))
}

func (UnimplementedDatabaseServiceHandler) GetDatabaseSchema(context.Context, *connect_go.Request[v1.GetDatabaseSchemaRequest]) (*connect_go.Response[v1.DatabaseSchema], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bytebase.v1.DatabaseService.GetDatabaseSchema is not implemented"))
}

func (UnimplementedDatabaseServiceHandler) DiffSchema(context.Context, *connect_go.Request[v1.DiffSchemaRequest]) (*connect_go.Response[v1.DiffSchemaResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bytebase.v1.DatabaseService.DiffSchema is not implemented"))
}

func (UnimplementedDatabaseServiceHandler) ListSecrets(context.Context, *connect_go.Request[v1.ListSecretsRequest]) (*connect_go.Response[v1.ListSecretsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bytebase.v1.DatabaseService.ListSecrets is not implemented"))
}

func (UnimplementedDatabaseServiceHandler) UpdateSecret(context.Context, *connect_go.Request[v1.UpdateSecretRequest]) (*connect_go.Response[v1.Secret], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bytebase.v1.DatabaseService.UpdateSecret is not implemented"))
}

func (UnimplementedDatabaseServiceHandler) DeleteSecret(context.Context, *connect_go.Request[v1.DeleteSecretRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bytebase.v1.DatabaseService.DeleteSecret is not implemented"))
}

func (UnimplementedDatabaseServiceHandler) ListChangelogs(context.Context, *connect_go.Request[v1.ListChangelogsRequest]) (*connect_go.Response[v1.ListChangelogsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bytebase.v1.DatabaseService.ListChangelogs is not implemented"))
}

func (UnimplementedDatabaseServiceHandler) GetChangelog(context.Context, *connect_go.Request[v1.GetChangelogRequest]) (*connect_go.Response[v1.Changelog], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bytebase.v1.DatabaseService.GetChangelog is not implemented"))
}

func (UnimplementedDatabaseServiceHandler) GetSchemaString(context.Context, *connect_go.Request[v1.GetSchemaStringRequest]) (*connect_go.Response[v1.GetSchemaStringResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bytebase.v1.DatabaseService.GetSchemaString is not implemented"))
}
