// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/plan_service.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/bytebase/bytebase/proto/generated-go/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PlanServiceName is the fully-qualified name of the PlanService service.
	PlanServiceName = "bytebase.v1.PlanService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PlanServiceGetPlanProcedure is the fully-qualified name of the PlanService's GetPlan RPC.
	PlanServiceGetPlanProcedure = "/bytebase.v1.PlanService/GetPlan"
	// PlanServiceListPlansProcedure is the fully-qualified name of the PlanService's ListPlans RPC.
	PlanServiceListPlansProcedure = "/bytebase.v1.PlanService/ListPlans"
	// PlanServiceSearchPlansProcedure is the fully-qualified name of the PlanService's SearchPlans RPC.
	PlanServiceSearchPlansProcedure = "/bytebase.v1.PlanService/SearchPlans"
	// PlanServiceCreatePlanProcedure is the fully-qualified name of the PlanService's CreatePlan RPC.
	PlanServiceCreatePlanProcedure = "/bytebase.v1.PlanService/CreatePlan"
	// PlanServiceUpdatePlanProcedure is the fully-qualified name of the PlanService's UpdatePlan RPC.
	PlanServiceUpdatePlanProcedure = "/bytebase.v1.PlanService/UpdatePlan"
	// PlanServiceListPlanCheckRunsProcedure is the fully-qualified name of the PlanService's
	// ListPlanCheckRuns RPC.
	PlanServiceListPlanCheckRunsProcedure = "/bytebase.v1.PlanService/ListPlanCheckRuns"
	// PlanServiceRunPlanChecksProcedure is the fully-qualified name of the PlanService's RunPlanChecks
	// RPC.
	PlanServiceRunPlanChecksProcedure = "/bytebase.v1.PlanService/RunPlanChecks"
	// PlanServiceBatchCancelPlanCheckRunsProcedure is the fully-qualified name of the PlanService's
	// BatchCancelPlanCheckRuns RPC.
	PlanServiceBatchCancelPlanCheckRunsProcedure = "/bytebase.v1.PlanService/BatchCancelPlanCheckRuns"
)

// PlanServiceClient is a client for the bytebase.v1.PlanService service.
type PlanServiceClient interface {
	GetPlan(context.Context, *connect.Request[v1.GetPlanRequest]) (*connect.Response[v1.Plan], error)
	ListPlans(context.Context, *connect.Request[v1.ListPlansRequest]) (*connect.Response[v1.ListPlansResponse], error)
	// Search for plans that the caller has the bb.plans.get permission on and also satisfy the specified filter & query.
	SearchPlans(context.Context, *connect.Request[v1.SearchPlansRequest]) (*connect.Response[v1.SearchPlansResponse], error)
	CreatePlan(context.Context, *connect.Request[v1.CreatePlanRequest]) (*connect.Response[v1.Plan], error)
	// UpdatePlan updates the plan.
	// The plan creator and the user with bb.plans.update permission on the project can update the plan.
	UpdatePlan(context.Context, *connect.Request[v1.UpdatePlanRequest]) (*connect.Response[v1.Plan], error)
	ListPlanCheckRuns(context.Context, *connect.Request[v1.ListPlanCheckRunsRequest]) (*connect.Response[v1.ListPlanCheckRunsResponse], error)
	RunPlanChecks(context.Context, *connect.Request[v1.RunPlanChecksRequest]) (*connect.Response[v1.RunPlanChecksResponse], error)
	BatchCancelPlanCheckRuns(context.Context, *connect.Request[v1.BatchCancelPlanCheckRunsRequest]) (*connect.Response[v1.BatchCancelPlanCheckRunsResponse], error)
}

// NewPlanServiceClient constructs a client for the bytebase.v1.PlanService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPlanServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PlanServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	planServiceMethods := v1.File_v1_plan_service_proto.Services().ByName("PlanService").Methods()
	return &planServiceClient{
		getPlan: connect.NewClient[v1.GetPlanRequest, v1.Plan](
			httpClient,
			baseURL+PlanServiceGetPlanProcedure,
			connect.WithSchema(planServiceMethods.ByName("GetPlan")),
			connect.WithClientOptions(opts...),
		),
		listPlans: connect.NewClient[v1.ListPlansRequest, v1.ListPlansResponse](
			httpClient,
			baseURL+PlanServiceListPlansProcedure,
			connect.WithSchema(planServiceMethods.ByName("ListPlans")),
			connect.WithClientOptions(opts...),
		),
		searchPlans: connect.NewClient[v1.SearchPlansRequest, v1.SearchPlansResponse](
			httpClient,
			baseURL+PlanServiceSearchPlansProcedure,
			connect.WithSchema(planServiceMethods.ByName("SearchPlans")),
			connect.WithClientOptions(opts...),
		),
		createPlan: connect.NewClient[v1.CreatePlanRequest, v1.Plan](
			httpClient,
			baseURL+PlanServiceCreatePlanProcedure,
			connect.WithSchema(planServiceMethods.ByName("CreatePlan")),
			connect.WithClientOptions(opts...),
		),
		updatePlan: connect.NewClient[v1.UpdatePlanRequest, v1.Plan](
			httpClient,
			baseURL+PlanServiceUpdatePlanProcedure,
			connect.WithSchema(planServiceMethods.ByName("UpdatePlan")),
			connect.WithClientOptions(opts...),
		),
		listPlanCheckRuns: connect.NewClient[v1.ListPlanCheckRunsRequest, v1.ListPlanCheckRunsResponse](
			httpClient,
			baseURL+PlanServiceListPlanCheckRunsProcedure,
			connect.WithSchema(planServiceMethods.ByName("ListPlanCheckRuns")),
			connect.WithClientOptions(opts...),
		),
		runPlanChecks: connect.NewClient[v1.RunPlanChecksRequest, v1.RunPlanChecksResponse](
			httpClient,
			baseURL+PlanServiceRunPlanChecksProcedure,
			connect.WithSchema(planServiceMethods.ByName("RunPlanChecks")),
			connect.WithClientOptions(opts...),
		),
		batchCancelPlanCheckRuns: connect.NewClient[v1.BatchCancelPlanCheckRunsRequest, v1.BatchCancelPlanCheckRunsResponse](
			httpClient,
			baseURL+PlanServiceBatchCancelPlanCheckRunsProcedure,
			connect.WithSchema(planServiceMethods.ByName("BatchCancelPlanCheckRuns")),
			connect.WithClientOptions(opts...),
		),
	}
}

// planServiceClient implements PlanServiceClient.
type planServiceClient struct {
	getPlan                  *connect.Client[v1.GetPlanRequest, v1.Plan]
	listPlans                *connect.Client[v1.ListPlansRequest, v1.ListPlansResponse]
	searchPlans              *connect.Client[v1.SearchPlansRequest, v1.SearchPlansResponse]
	createPlan               *connect.Client[v1.CreatePlanRequest, v1.Plan]
	updatePlan               *connect.Client[v1.UpdatePlanRequest, v1.Plan]
	listPlanCheckRuns        *connect.Client[v1.ListPlanCheckRunsRequest, v1.ListPlanCheckRunsResponse]
	runPlanChecks            *connect.Client[v1.RunPlanChecksRequest, v1.RunPlanChecksResponse]
	batchCancelPlanCheckRuns *connect.Client[v1.BatchCancelPlanCheckRunsRequest, v1.BatchCancelPlanCheckRunsResponse]
}

// GetPlan calls bytebase.v1.PlanService.GetPlan.
func (c *planServiceClient) GetPlan(ctx context.Context, req *connect.Request[v1.GetPlanRequest]) (*connect.Response[v1.Plan], error) {
	return c.getPlan.CallUnary(ctx, req)
}

// ListPlans calls bytebase.v1.PlanService.ListPlans.
func (c *planServiceClient) ListPlans(ctx context.Context, req *connect.Request[v1.ListPlansRequest]) (*connect.Response[v1.ListPlansResponse], error) {
	return c.listPlans.CallUnary(ctx, req)
}

// SearchPlans calls bytebase.v1.PlanService.SearchPlans.
func (c *planServiceClient) SearchPlans(ctx context.Context, req *connect.Request[v1.SearchPlansRequest]) (*connect.Response[v1.SearchPlansResponse], error) {
	return c.searchPlans.CallUnary(ctx, req)
}

// CreatePlan calls bytebase.v1.PlanService.CreatePlan.
func (c *planServiceClient) CreatePlan(ctx context.Context, req *connect.Request[v1.CreatePlanRequest]) (*connect.Response[v1.Plan], error) {
	return c.createPlan.CallUnary(ctx, req)
}

// UpdatePlan calls bytebase.v1.PlanService.UpdatePlan.
func (c *planServiceClient) UpdatePlan(ctx context.Context, req *connect.Request[v1.UpdatePlanRequest]) (*connect.Response[v1.Plan], error) {
	return c.updatePlan.CallUnary(ctx, req)
}

// ListPlanCheckRuns calls bytebase.v1.PlanService.ListPlanCheckRuns.
func (c *planServiceClient) ListPlanCheckRuns(ctx context.Context, req *connect.Request[v1.ListPlanCheckRunsRequest]) (*connect.Response[v1.ListPlanCheckRunsResponse], error) {
	return c.listPlanCheckRuns.CallUnary(ctx, req)
}

// RunPlanChecks calls bytebase.v1.PlanService.RunPlanChecks.
func (c *planServiceClient) RunPlanChecks(ctx context.Context, req *connect.Request[v1.RunPlanChecksRequest]) (*connect.Response[v1.RunPlanChecksResponse], error) {
	return c.runPlanChecks.CallUnary(ctx, req)
}

// BatchCancelPlanCheckRuns calls bytebase.v1.PlanService.BatchCancelPlanCheckRuns.
func (c *planServiceClient) BatchCancelPlanCheckRuns(ctx context.Context, req *connect.Request[v1.BatchCancelPlanCheckRunsRequest]) (*connect.Response[v1.BatchCancelPlanCheckRunsResponse], error) {
	return c.batchCancelPlanCheckRuns.CallUnary(ctx, req)
}

// PlanServiceHandler is an implementation of the bytebase.v1.PlanService service.
type PlanServiceHandler interface {
	GetPlan(context.Context, *connect.Request[v1.GetPlanRequest]) (*connect.Response[v1.Plan], error)
	ListPlans(context.Context, *connect.Request[v1.ListPlansRequest]) (*connect.Response[v1.ListPlansResponse], error)
	// Search for plans that the caller has the bb.plans.get permission on and also satisfy the specified filter & query.
	SearchPlans(context.Context, *connect.Request[v1.SearchPlansRequest]) (*connect.Response[v1.SearchPlansResponse], error)
	CreatePlan(context.Context, *connect.Request[v1.CreatePlanRequest]) (*connect.Response[v1.Plan], error)
	// UpdatePlan updates the plan.
	// The plan creator and the user with bb.plans.update permission on the project can update the plan.
	UpdatePlan(context.Context, *connect.Request[v1.UpdatePlanRequest]) (*connect.Response[v1.Plan], error)
	ListPlanCheckRuns(context.Context, *connect.Request[v1.ListPlanCheckRunsRequest]) (*connect.Response[v1.ListPlanCheckRunsResponse], error)
	RunPlanChecks(context.Context, *connect.Request[v1.RunPlanChecksRequest]) (*connect.Response[v1.RunPlanChecksResponse], error)
	BatchCancelPlanCheckRuns(context.Context, *connect.Request[v1.BatchCancelPlanCheckRunsRequest]) (*connect.Response[v1.BatchCancelPlanCheckRunsResponse], error)
}

// NewPlanServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPlanServiceHandler(svc PlanServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	planServiceMethods := v1.File_v1_plan_service_proto.Services().ByName("PlanService").Methods()
	planServiceGetPlanHandler := connect.NewUnaryHandler(
		PlanServiceGetPlanProcedure,
		svc.GetPlan,
		connect.WithSchema(planServiceMethods.ByName("GetPlan")),
		connect.WithHandlerOptions(opts...),
	)
	planServiceListPlansHandler := connect.NewUnaryHandler(
		PlanServiceListPlansProcedure,
		svc.ListPlans,
		connect.WithSchema(planServiceMethods.ByName("ListPlans")),
		connect.WithHandlerOptions(opts...),
	)
	planServiceSearchPlansHandler := connect.NewUnaryHandler(
		PlanServiceSearchPlansProcedure,
		svc.SearchPlans,
		connect.WithSchema(planServiceMethods.ByName("SearchPlans")),
		connect.WithHandlerOptions(opts...),
	)
	planServiceCreatePlanHandler := connect.NewUnaryHandler(
		PlanServiceCreatePlanProcedure,
		svc.CreatePlan,
		connect.WithSchema(planServiceMethods.ByName("CreatePlan")),
		connect.WithHandlerOptions(opts...),
	)
	planServiceUpdatePlanHandler := connect.NewUnaryHandler(
		PlanServiceUpdatePlanProcedure,
		svc.UpdatePlan,
		connect.WithSchema(planServiceMethods.ByName("UpdatePlan")),
		connect.WithHandlerOptions(opts...),
	)
	planServiceListPlanCheckRunsHandler := connect.NewUnaryHandler(
		PlanServiceListPlanCheckRunsProcedure,
		svc.ListPlanCheckRuns,
		connect.WithSchema(planServiceMethods.ByName("ListPlanCheckRuns")),
		connect.WithHandlerOptions(opts...),
	)
	planServiceRunPlanChecksHandler := connect.NewUnaryHandler(
		PlanServiceRunPlanChecksProcedure,
		svc.RunPlanChecks,
		connect.WithSchema(planServiceMethods.ByName("RunPlanChecks")),
		connect.WithHandlerOptions(opts...),
	)
	planServiceBatchCancelPlanCheckRunsHandler := connect.NewUnaryHandler(
		PlanServiceBatchCancelPlanCheckRunsProcedure,
		svc.BatchCancelPlanCheckRuns,
		connect.WithSchema(planServiceMethods.ByName("BatchCancelPlanCheckRuns")),
		connect.WithHandlerOptions(opts...),
	)
	return "/bytebase.v1.PlanService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PlanServiceGetPlanProcedure:
			planServiceGetPlanHandler.ServeHTTP(w, r)
		case PlanServiceListPlansProcedure:
			planServiceListPlansHandler.ServeHTTP(w, r)
		case PlanServiceSearchPlansProcedure:
			planServiceSearchPlansHandler.ServeHTTP(w, r)
		case PlanServiceCreatePlanProcedure:
			planServiceCreatePlanHandler.ServeHTTP(w, r)
		case PlanServiceUpdatePlanProcedure:
			planServiceUpdatePlanHandler.ServeHTTP(w, r)
		case PlanServiceListPlanCheckRunsProcedure:
			planServiceListPlanCheckRunsHandler.ServeHTTP(w, r)
		case PlanServiceRunPlanChecksProcedure:
			planServiceRunPlanChecksHandler.ServeHTTP(w, r)
		case PlanServiceBatchCancelPlanCheckRunsProcedure:
			planServiceBatchCancelPlanCheckRunsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPlanServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPlanServiceHandler struct{}

func (UnimplementedPlanServiceHandler) GetPlan(context.Context, *connect.Request[v1.GetPlanRequest]) (*connect.Response[v1.Plan], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.PlanService.GetPlan is not implemented"))
}

func (UnimplementedPlanServiceHandler) ListPlans(context.Context, *connect.Request[v1.ListPlansRequest]) (*connect.Response[v1.ListPlansResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.PlanService.ListPlans is not implemented"))
}

func (UnimplementedPlanServiceHandler) SearchPlans(context.Context, *connect.Request[v1.SearchPlansRequest]) (*connect.Response[v1.SearchPlansResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.PlanService.SearchPlans is not implemented"))
}

func (UnimplementedPlanServiceHandler) CreatePlan(context.Context, *connect.Request[v1.CreatePlanRequest]) (*connect.Response[v1.Plan], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.PlanService.CreatePlan is not implemented"))
}

func (UnimplementedPlanServiceHandler) UpdatePlan(context.Context, *connect.Request[v1.UpdatePlanRequest]) (*connect.Response[v1.Plan], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.PlanService.UpdatePlan is not implemented"))
}

func (UnimplementedPlanServiceHandler) ListPlanCheckRuns(context.Context, *connect.Request[v1.ListPlanCheckRunsRequest]) (*connect.Response[v1.ListPlanCheckRunsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.PlanService.ListPlanCheckRuns is not implemented"))
}

func (UnimplementedPlanServiceHandler) RunPlanChecks(context.Context, *connect.Request[v1.RunPlanChecksRequest]) (*connect.Response[v1.RunPlanChecksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.PlanService.RunPlanChecks is not implemented"))
}

func (UnimplementedPlanServiceHandler) BatchCancelPlanCheckRuns(context.Context, *connect.Request[v1.BatchCancelPlanCheckRunsRequest]) (*connect.Response[v1.BatchCancelPlanCheckRunsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.PlanService.BatchCancelPlanCheckRuns is not implemented"))
}
