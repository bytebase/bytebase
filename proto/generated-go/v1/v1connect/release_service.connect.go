// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/release_service.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/bytebase/bytebase/proto/generated-go/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ReleaseServiceName is the fully-qualified name of the ReleaseService service.
	ReleaseServiceName = "bytebase.v1.ReleaseService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ReleaseServiceGetReleaseProcedure is the fully-qualified name of the ReleaseService's GetRelease
	// RPC.
	ReleaseServiceGetReleaseProcedure = "/bytebase.v1.ReleaseService/GetRelease"
	// ReleaseServiceListReleasesProcedure is the fully-qualified name of the ReleaseService's
	// ListReleases RPC.
	ReleaseServiceListReleasesProcedure = "/bytebase.v1.ReleaseService/ListReleases"
	// ReleaseServiceCreateReleaseProcedure is the fully-qualified name of the ReleaseService's
	// CreateRelease RPC.
	ReleaseServiceCreateReleaseProcedure = "/bytebase.v1.ReleaseService/CreateRelease"
	// ReleaseServiceUpdateReleaseProcedure is the fully-qualified name of the ReleaseService's
	// UpdateRelease RPC.
	ReleaseServiceUpdateReleaseProcedure = "/bytebase.v1.ReleaseService/UpdateRelease"
	// ReleaseServiceDeleteReleaseProcedure is the fully-qualified name of the ReleaseService's
	// DeleteRelease RPC.
	ReleaseServiceDeleteReleaseProcedure = "/bytebase.v1.ReleaseService/DeleteRelease"
	// ReleaseServiceUndeleteReleaseProcedure is the fully-qualified name of the ReleaseService's
	// UndeleteRelease RPC.
	ReleaseServiceUndeleteReleaseProcedure = "/bytebase.v1.ReleaseService/UndeleteRelease"
	// ReleaseServiceCheckReleaseProcedure is the fully-qualified name of the ReleaseService's
	// CheckRelease RPC.
	ReleaseServiceCheckReleaseProcedure = "/bytebase.v1.ReleaseService/CheckRelease"
)

// ReleaseServiceClient is a client for the bytebase.v1.ReleaseService service.
type ReleaseServiceClient interface {
	GetRelease(context.Context, *connect.Request[v1.GetReleaseRequest]) (*connect.Response[v1.Release], error)
	ListReleases(context.Context, *connect.Request[v1.ListReleasesRequest]) (*connect.Response[v1.ListReleasesResponse], error)
	CreateRelease(context.Context, *connect.Request[v1.CreateReleaseRequest]) (*connect.Response[v1.Release], error)
	UpdateRelease(context.Context, *connect.Request[v1.UpdateReleaseRequest]) (*connect.Response[v1.Release], error)
	DeleteRelease(context.Context, *connect.Request[v1.DeleteReleaseRequest]) (*connect.Response[emptypb.Empty], error)
	UndeleteRelease(context.Context, *connect.Request[v1.UndeleteReleaseRequest]) (*connect.Response[v1.Release], error)
	CheckRelease(context.Context, *connect.Request[v1.CheckReleaseRequest]) (*connect.Response[v1.CheckReleaseResponse], error)
}

// NewReleaseServiceClient constructs a client for the bytebase.v1.ReleaseService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewReleaseServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ReleaseServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	releaseServiceMethods := v1.File_v1_release_service_proto.Services().ByName("ReleaseService").Methods()
	return &releaseServiceClient{
		getRelease: connect.NewClient[v1.GetReleaseRequest, v1.Release](
			httpClient,
			baseURL+ReleaseServiceGetReleaseProcedure,
			connect.WithSchema(releaseServiceMethods.ByName("GetRelease")),
			connect.WithClientOptions(opts...),
		),
		listReleases: connect.NewClient[v1.ListReleasesRequest, v1.ListReleasesResponse](
			httpClient,
			baseURL+ReleaseServiceListReleasesProcedure,
			connect.WithSchema(releaseServiceMethods.ByName("ListReleases")),
			connect.WithClientOptions(opts...),
		),
		createRelease: connect.NewClient[v1.CreateReleaseRequest, v1.Release](
			httpClient,
			baseURL+ReleaseServiceCreateReleaseProcedure,
			connect.WithSchema(releaseServiceMethods.ByName("CreateRelease")),
			connect.WithClientOptions(opts...),
		),
		updateRelease: connect.NewClient[v1.UpdateReleaseRequest, v1.Release](
			httpClient,
			baseURL+ReleaseServiceUpdateReleaseProcedure,
			connect.WithSchema(releaseServiceMethods.ByName("UpdateRelease")),
			connect.WithClientOptions(opts...),
		),
		deleteRelease: connect.NewClient[v1.DeleteReleaseRequest, emptypb.Empty](
			httpClient,
			baseURL+ReleaseServiceDeleteReleaseProcedure,
			connect.WithSchema(releaseServiceMethods.ByName("DeleteRelease")),
			connect.WithClientOptions(opts...),
		),
		undeleteRelease: connect.NewClient[v1.UndeleteReleaseRequest, v1.Release](
			httpClient,
			baseURL+ReleaseServiceUndeleteReleaseProcedure,
			connect.WithSchema(releaseServiceMethods.ByName("UndeleteRelease")),
			connect.WithClientOptions(opts...),
		),
		checkRelease: connect.NewClient[v1.CheckReleaseRequest, v1.CheckReleaseResponse](
			httpClient,
			baseURL+ReleaseServiceCheckReleaseProcedure,
			connect.WithSchema(releaseServiceMethods.ByName("CheckRelease")),
			connect.WithClientOptions(opts...),
		),
	}
}

// releaseServiceClient implements ReleaseServiceClient.
type releaseServiceClient struct {
	getRelease      *connect.Client[v1.GetReleaseRequest, v1.Release]
	listReleases    *connect.Client[v1.ListReleasesRequest, v1.ListReleasesResponse]
	createRelease   *connect.Client[v1.CreateReleaseRequest, v1.Release]
	updateRelease   *connect.Client[v1.UpdateReleaseRequest, v1.Release]
	deleteRelease   *connect.Client[v1.DeleteReleaseRequest, emptypb.Empty]
	undeleteRelease *connect.Client[v1.UndeleteReleaseRequest, v1.Release]
	checkRelease    *connect.Client[v1.CheckReleaseRequest, v1.CheckReleaseResponse]
}

// GetRelease calls bytebase.v1.ReleaseService.GetRelease.
func (c *releaseServiceClient) GetRelease(ctx context.Context, req *connect.Request[v1.GetReleaseRequest]) (*connect.Response[v1.Release], error) {
	return c.getRelease.CallUnary(ctx, req)
}

// ListReleases calls bytebase.v1.ReleaseService.ListReleases.
func (c *releaseServiceClient) ListReleases(ctx context.Context, req *connect.Request[v1.ListReleasesRequest]) (*connect.Response[v1.ListReleasesResponse], error) {
	return c.listReleases.CallUnary(ctx, req)
}

// CreateRelease calls bytebase.v1.ReleaseService.CreateRelease.
func (c *releaseServiceClient) CreateRelease(ctx context.Context, req *connect.Request[v1.CreateReleaseRequest]) (*connect.Response[v1.Release], error) {
	return c.createRelease.CallUnary(ctx, req)
}

// UpdateRelease calls bytebase.v1.ReleaseService.UpdateRelease.
func (c *releaseServiceClient) UpdateRelease(ctx context.Context, req *connect.Request[v1.UpdateReleaseRequest]) (*connect.Response[v1.Release], error) {
	return c.updateRelease.CallUnary(ctx, req)
}

// DeleteRelease calls bytebase.v1.ReleaseService.DeleteRelease.
func (c *releaseServiceClient) DeleteRelease(ctx context.Context, req *connect.Request[v1.DeleteReleaseRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteRelease.CallUnary(ctx, req)
}

// UndeleteRelease calls bytebase.v1.ReleaseService.UndeleteRelease.
func (c *releaseServiceClient) UndeleteRelease(ctx context.Context, req *connect.Request[v1.UndeleteReleaseRequest]) (*connect.Response[v1.Release], error) {
	return c.undeleteRelease.CallUnary(ctx, req)
}

// CheckRelease calls bytebase.v1.ReleaseService.CheckRelease.
func (c *releaseServiceClient) CheckRelease(ctx context.Context, req *connect.Request[v1.CheckReleaseRequest]) (*connect.Response[v1.CheckReleaseResponse], error) {
	return c.checkRelease.CallUnary(ctx, req)
}

// ReleaseServiceHandler is an implementation of the bytebase.v1.ReleaseService service.
type ReleaseServiceHandler interface {
	GetRelease(context.Context, *connect.Request[v1.GetReleaseRequest]) (*connect.Response[v1.Release], error)
	ListReleases(context.Context, *connect.Request[v1.ListReleasesRequest]) (*connect.Response[v1.ListReleasesResponse], error)
	CreateRelease(context.Context, *connect.Request[v1.CreateReleaseRequest]) (*connect.Response[v1.Release], error)
	UpdateRelease(context.Context, *connect.Request[v1.UpdateReleaseRequest]) (*connect.Response[v1.Release], error)
	DeleteRelease(context.Context, *connect.Request[v1.DeleteReleaseRequest]) (*connect.Response[emptypb.Empty], error)
	UndeleteRelease(context.Context, *connect.Request[v1.UndeleteReleaseRequest]) (*connect.Response[v1.Release], error)
	CheckRelease(context.Context, *connect.Request[v1.CheckReleaseRequest]) (*connect.Response[v1.CheckReleaseResponse], error)
}

// NewReleaseServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewReleaseServiceHandler(svc ReleaseServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	releaseServiceMethods := v1.File_v1_release_service_proto.Services().ByName("ReleaseService").Methods()
	releaseServiceGetReleaseHandler := connect.NewUnaryHandler(
		ReleaseServiceGetReleaseProcedure,
		svc.GetRelease,
		connect.WithSchema(releaseServiceMethods.ByName("GetRelease")),
		connect.WithHandlerOptions(opts...),
	)
	releaseServiceListReleasesHandler := connect.NewUnaryHandler(
		ReleaseServiceListReleasesProcedure,
		svc.ListReleases,
		connect.WithSchema(releaseServiceMethods.ByName("ListReleases")),
		connect.WithHandlerOptions(opts...),
	)
	releaseServiceCreateReleaseHandler := connect.NewUnaryHandler(
		ReleaseServiceCreateReleaseProcedure,
		svc.CreateRelease,
		connect.WithSchema(releaseServiceMethods.ByName("CreateRelease")),
		connect.WithHandlerOptions(opts...),
	)
	releaseServiceUpdateReleaseHandler := connect.NewUnaryHandler(
		ReleaseServiceUpdateReleaseProcedure,
		svc.UpdateRelease,
		connect.WithSchema(releaseServiceMethods.ByName("UpdateRelease")),
		connect.WithHandlerOptions(opts...),
	)
	releaseServiceDeleteReleaseHandler := connect.NewUnaryHandler(
		ReleaseServiceDeleteReleaseProcedure,
		svc.DeleteRelease,
		connect.WithSchema(releaseServiceMethods.ByName("DeleteRelease")),
		connect.WithHandlerOptions(opts...),
	)
	releaseServiceUndeleteReleaseHandler := connect.NewUnaryHandler(
		ReleaseServiceUndeleteReleaseProcedure,
		svc.UndeleteRelease,
		connect.WithSchema(releaseServiceMethods.ByName("UndeleteRelease")),
		connect.WithHandlerOptions(opts...),
	)
	releaseServiceCheckReleaseHandler := connect.NewUnaryHandler(
		ReleaseServiceCheckReleaseProcedure,
		svc.CheckRelease,
		connect.WithSchema(releaseServiceMethods.ByName("CheckRelease")),
		connect.WithHandlerOptions(opts...),
	)
	return "/bytebase.v1.ReleaseService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ReleaseServiceGetReleaseProcedure:
			releaseServiceGetReleaseHandler.ServeHTTP(w, r)
		case ReleaseServiceListReleasesProcedure:
			releaseServiceListReleasesHandler.ServeHTTP(w, r)
		case ReleaseServiceCreateReleaseProcedure:
			releaseServiceCreateReleaseHandler.ServeHTTP(w, r)
		case ReleaseServiceUpdateReleaseProcedure:
			releaseServiceUpdateReleaseHandler.ServeHTTP(w, r)
		case ReleaseServiceDeleteReleaseProcedure:
			releaseServiceDeleteReleaseHandler.ServeHTTP(w, r)
		case ReleaseServiceUndeleteReleaseProcedure:
			releaseServiceUndeleteReleaseHandler.ServeHTTP(w, r)
		case ReleaseServiceCheckReleaseProcedure:
			releaseServiceCheckReleaseHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedReleaseServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedReleaseServiceHandler struct{}

func (UnimplementedReleaseServiceHandler) GetRelease(context.Context, *connect.Request[v1.GetReleaseRequest]) (*connect.Response[v1.Release], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.ReleaseService.GetRelease is not implemented"))
}

func (UnimplementedReleaseServiceHandler) ListReleases(context.Context, *connect.Request[v1.ListReleasesRequest]) (*connect.Response[v1.ListReleasesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.ReleaseService.ListReleases is not implemented"))
}

func (UnimplementedReleaseServiceHandler) CreateRelease(context.Context, *connect.Request[v1.CreateReleaseRequest]) (*connect.Response[v1.Release], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.ReleaseService.CreateRelease is not implemented"))
}

func (UnimplementedReleaseServiceHandler) UpdateRelease(context.Context, *connect.Request[v1.UpdateReleaseRequest]) (*connect.Response[v1.Release], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.ReleaseService.UpdateRelease is not implemented"))
}

func (UnimplementedReleaseServiceHandler) DeleteRelease(context.Context, *connect.Request[v1.DeleteReleaseRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.ReleaseService.DeleteRelease is not implemented"))
}

func (UnimplementedReleaseServiceHandler) UndeleteRelease(context.Context, *connect.Request[v1.UndeleteReleaseRequest]) (*connect.Response[v1.Release], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.ReleaseService.UndeleteRelease is not implemented"))
}

func (UnimplementedReleaseServiceHandler) CheckRelease(context.Context, *connect.Request[v1.CheckReleaseRequest]) (*connect.Response[v1.CheckReleaseResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.ReleaseService.CheckRelease is not implemented"))
}
