// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/subscription_service.proto

package v1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/bytebase/bytebase/proto/generated-go/v1"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// SubscriptionServiceName is the fully-qualified name of the SubscriptionService service.
	SubscriptionServiceName = "bytebase.v1.SubscriptionService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SubscriptionServiceGetSubscriptionProcedure is the fully-qualified name of the
	// SubscriptionService's GetSubscription RPC.
	SubscriptionServiceGetSubscriptionProcedure = "/bytebase.v1.SubscriptionService/GetSubscription"
	// SubscriptionServiceUpdateSubscriptionProcedure is the fully-qualified name of the
	// SubscriptionService's UpdateSubscription RPC.
	SubscriptionServiceUpdateSubscriptionProcedure = "/bytebase.v1.SubscriptionService/UpdateSubscription"
)

// SubscriptionServiceClient is a client for the bytebase.v1.SubscriptionService service.
type SubscriptionServiceClient interface {
	GetSubscription(context.Context, *connect_go.Request[v1.GetSubscriptionRequest]) (*connect_go.Response[v1.Subscription], error)
	UpdateSubscription(context.Context, *connect_go.Request[v1.UpdateSubscriptionRequest]) (*connect_go.Response[v1.Subscription], error)
}

// NewSubscriptionServiceClient constructs a client for the bytebase.v1.SubscriptionService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSubscriptionServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) SubscriptionServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &subscriptionServiceClient{
		getSubscription: connect_go.NewClient[v1.GetSubscriptionRequest, v1.Subscription](
			httpClient,
			baseURL+SubscriptionServiceGetSubscriptionProcedure,
			opts...,
		),
		updateSubscription: connect_go.NewClient[v1.UpdateSubscriptionRequest, v1.Subscription](
			httpClient,
			baseURL+SubscriptionServiceUpdateSubscriptionProcedure,
			opts...,
		),
	}
}

// subscriptionServiceClient implements SubscriptionServiceClient.
type subscriptionServiceClient struct {
	getSubscription    *connect_go.Client[v1.GetSubscriptionRequest, v1.Subscription]
	updateSubscription *connect_go.Client[v1.UpdateSubscriptionRequest, v1.Subscription]
}

// GetSubscription calls bytebase.v1.SubscriptionService.GetSubscription.
func (c *subscriptionServiceClient) GetSubscription(ctx context.Context, req *connect_go.Request[v1.GetSubscriptionRequest]) (*connect_go.Response[v1.Subscription], error) {
	return c.getSubscription.CallUnary(ctx, req)
}

// UpdateSubscription calls bytebase.v1.SubscriptionService.UpdateSubscription.
func (c *subscriptionServiceClient) UpdateSubscription(ctx context.Context, req *connect_go.Request[v1.UpdateSubscriptionRequest]) (*connect_go.Response[v1.Subscription], error) {
	return c.updateSubscription.CallUnary(ctx, req)
}

// SubscriptionServiceHandler is an implementation of the bytebase.v1.SubscriptionService service.
type SubscriptionServiceHandler interface {
	GetSubscription(context.Context, *connect_go.Request[v1.GetSubscriptionRequest]) (*connect_go.Response[v1.Subscription], error)
	UpdateSubscription(context.Context, *connect_go.Request[v1.UpdateSubscriptionRequest]) (*connect_go.Response[v1.Subscription], error)
}

// NewSubscriptionServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSubscriptionServiceHandler(svc SubscriptionServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	subscriptionServiceGetSubscriptionHandler := connect_go.NewUnaryHandler(
		SubscriptionServiceGetSubscriptionProcedure,
		svc.GetSubscription,
		opts...,
	)
	subscriptionServiceUpdateSubscriptionHandler := connect_go.NewUnaryHandler(
		SubscriptionServiceUpdateSubscriptionProcedure,
		svc.UpdateSubscription,
		opts...,
	)
	return "/bytebase.v1.SubscriptionService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SubscriptionServiceGetSubscriptionProcedure:
			subscriptionServiceGetSubscriptionHandler.ServeHTTP(w, r)
		case SubscriptionServiceUpdateSubscriptionProcedure:
			subscriptionServiceUpdateSubscriptionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSubscriptionServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSubscriptionServiceHandler struct{}

func (UnimplementedSubscriptionServiceHandler) GetSubscription(context.Context, *connect_go.Request[v1.GetSubscriptionRequest]) (*connect_go.Response[v1.Subscription], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bytebase.v1.SubscriptionService.GetSubscription is not implemented"))
}

func (UnimplementedSubscriptionServiceHandler) UpdateSubscription(context.Context, *connect_go.Request[v1.UpdateSubscriptionRequest]) (*connect_go.Response[v1.Subscription], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bytebase.v1.SubscriptionService.UpdateSubscription is not implemented"))
}
