// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/rollout_service.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/bytebase/bytebase/proto/generated-go/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RolloutServiceName is the fully-qualified name of the RolloutService service.
	RolloutServiceName = "bytebase.v1.RolloutService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RolloutServiceGetRolloutProcedure is the fully-qualified name of the RolloutService's GetRollout
	// RPC.
	RolloutServiceGetRolloutProcedure = "/bytebase.v1.RolloutService/GetRollout"
	// RolloutServiceListRolloutsProcedure is the fully-qualified name of the RolloutService's
	// ListRollouts RPC.
	RolloutServiceListRolloutsProcedure = "/bytebase.v1.RolloutService/ListRollouts"
	// RolloutServiceCreateRolloutProcedure is the fully-qualified name of the RolloutService's
	// CreateRollout RPC.
	RolloutServiceCreateRolloutProcedure = "/bytebase.v1.RolloutService/CreateRollout"
	// RolloutServicePreviewRolloutProcedure is the fully-qualified name of the RolloutService's
	// PreviewRollout RPC.
	RolloutServicePreviewRolloutProcedure = "/bytebase.v1.RolloutService/PreviewRollout"
	// RolloutServiceListTaskRunsProcedure is the fully-qualified name of the RolloutService's
	// ListTaskRuns RPC.
	RolloutServiceListTaskRunsProcedure = "/bytebase.v1.RolloutService/ListTaskRuns"
	// RolloutServiceGetTaskRunProcedure is the fully-qualified name of the RolloutService's GetTaskRun
	// RPC.
	RolloutServiceGetTaskRunProcedure = "/bytebase.v1.RolloutService/GetTaskRun"
	// RolloutServiceGetTaskRunLogProcedure is the fully-qualified name of the RolloutService's
	// GetTaskRunLog RPC.
	RolloutServiceGetTaskRunLogProcedure = "/bytebase.v1.RolloutService/GetTaskRunLog"
	// RolloutServiceGetTaskRunSessionProcedure is the fully-qualified name of the RolloutService's
	// GetTaskRunSession RPC.
	RolloutServiceGetTaskRunSessionProcedure = "/bytebase.v1.RolloutService/GetTaskRunSession"
	// RolloutServiceBatchRunTasksProcedure is the fully-qualified name of the RolloutService's
	// BatchRunTasks RPC.
	RolloutServiceBatchRunTasksProcedure = "/bytebase.v1.RolloutService/BatchRunTasks"
	// RolloutServiceBatchSkipTasksProcedure is the fully-qualified name of the RolloutService's
	// BatchSkipTasks RPC.
	RolloutServiceBatchSkipTasksProcedure = "/bytebase.v1.RolloutService/BatchSkipTasks"
	// RolloutServiceBatchCancelTaskRunsProcedure is the fully-qualified name of the RolloutService's
	// BatchCancelTaskRuns RPC.
	RolloutServiceBatchCancelTaskRunsProcedure = "/bytebase.v1.RolloutService/BatchCancelTaskRuns"
	// RolloutServicePreviewTaskRunRollbackProcedure is the fully-qualified name of the RolloutService's
	// PreviewTaskRunRollback RPC.
	RolloutServicePreviewTaskRunRollbackProcedure = "/bytebase.v1.RolloutService/PreviewTaskRunRollback"
)

// RolloutServiceClient is a client for the bytebase.v1.RolloutService service.
type RolloutServiceClient interface {
	GetRollout(context.Context, *connect.Request[v1.GetRolloutRequest]) (*connect.Response[v1.Rollout], error)
	ListRollouts(context.Context, *connect.Request[v1.ListRolloutsRequest]) (*connect.Response[v1.ListRolloutsResponse], error)
	// CreateRollout can be called multiple times with the same rollout.plan but different stage_id to promote rollout stages.
	CreateRollout(context.Context, *connect.Request[v1.CreateRolloutRequest]) (*connect.Response[v1.Rollout], error)
	PreviewRollout(context.Context, *connect.Request[v1.PreviewRolloutRequest]) (*connect.Response[v1.Rollout], error)
	ListTaskRuns(context.Context, *connect.Request[v1.ListTaskRunsRequest]) (*connect.Response[v1.ListTaskRunsResponse], error)
	GetTaskRun(context.Context, *connect.Request[v1.GetTaskRunRequest]) (*connect.Response[v1.TaskRun], error)
	GetTaskRunLog(context.Context, *connect.Request[v1.GetTaskRunLogRequest]) (*connect.Response[v1.TaskRunLog], error)
	GetTaskRunSession(context.Context, *connect.Request[v1.GetTaskRunSessionRequest]) (*connect.Response[v1.TaskRunSession], error)
	// BatchRunTasks creates task runs for the specified tasks.
	// DataExport issue only allows the creator to run the task.
	// Users with "bb.taskRuns.create" permission can run the task, e.g. Workspace Admin and DBA.
	// Follow role-based rollout policy for the environment.
	BatchRunTasks(context.Context, *connect.Request[v1.BatchRunTasksRequest]) (*connect.Response[v1.BatchRunTasksResponse], error)
	// BatchSkipTasks skips the specified tasks.
	// The access is the same as BatchRunTasks().
	BatchSkipTasks(context.Context, *connect.Request[v1.BatchSkipTasksRequest]) (*connect.Response[v1.BatchSkipTasksResponse], error)
	// BatchCancelTaskRuns cancels the specified task runs in batch.
	// The access is the same as BatchRunTasks().
	BatchCancelTaskRuns(context.Context, *connect.Request[v1.BatchCancelTaskRunsRequest]) (*connect.Response[v1.BatchCancelTaskRunsResponse], error)
	PreviewTaskRunRollback(context.Context, *connect.Request[v1.PreviewTaskRunRollbackRequest]) (*connect.Response[v1.PreviewTaskRunRollbackResponse], error)
}

// NewRolloutServiceClient constructs a client for the bytebase.v1.RolloutService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRolloutServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RolloutServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	rolloutServiceMethods := v1.File_v1_rollout_service_proto.Services().ByName("RolloutService").Methods()
	return &rolloutServiceClient{
		getRollout: connect.NewClient[v1.GetRolloutRequest, v1.Rollout](
			httpClient,
			baseURL+RolloutServiceGetRolloutProcedure,
			connect.WithSchema(rolloutServiceMethods.ByName("GetRollout")),
			connect.WithClientOptions(opts...),
		),
		listRollouts: connect.NewClient[v1.ListRolloutsRequest, v1.ListRolloutsResponse](
			httpClient,
			baseURL+RolloutServiceListRolloutsProcedure,
			connect.WithSchema(rolloutServiceMethods.ByName("ListRollouts")),
			connect.WithClientOptions(opts...),
		),
		createRollout: connect.NewClient[v1.CreateRolloutRequest, v1.Rollout](
			httpClient,
			baseURL+RolloutServiceCreateRolloutProcedure,
			connect.WithSchema(rolloutServiceMethods.ByName("CreateRollout")),
			connect.WithClientOptions(opts...),
		),
		previewRollout: connect.NewClient[v1.PreviewRolloutRequest, v1.Rollout](
			httpClient,
			baseURL+RolloutServicePreviewRolloutProcedure,
			connect.WithSchema(rolloutServiceMethods.ByName("PreviewRollout")),
			connect.WithClientOptions(opts...),
		),
		listTaskRuns: connect.NewClient[v1.ListTaskRunsRequest, v1.ListTaskRunsResponse](
			httpClient,
			baseURL+RolloutServiceListTaskRunsProcedure,
			connect.WithSchema(rolloutServiceMethods.ByName("ListTaskRuns")),
			connect.WithClientOptions(opts...),
		),
		getTaskRun: connect.NewClient[v1.GetTaskRunRequest, v1.TaskRun](
			httpClient,
			baseURL+RolloutServiceGetTaskRunProcedure,
			connect.WithSchema(rolloutServiceMethods.ByName("GetTaskRun")),
			connect.WithClientOptions(opts...),
		),
		getTaskRunLog: connect.NewClient[v1.GetTaskRunLogRequest, v1.TaskRunLog](
			httpClient,
			baseURL+RolloutServiceGetTaskRunLogProcedure,
			connect.WithSchema(rolloutServiceMethods.ByName("GetTaskRunLog")),
			connect.WithClientOptions(opts...),
		),
		getTaskRunSession: connect.NewClient[v1.GetTaskRunSessionRequest, v1.TaskRunSession](
			httpClient,
			baseURL+RolloutServiceGetTaskRunSessionProcedure,
			connect.WithSchema(rolloutServiceMethods.ByName("GetTaskRunSession")),
			connect.WithClientOptions(opts...),
		),
		batchRunTasks: connect.NewClient[v1.BatchRunTasksRequest, v1.BatchRunTasksResponse](
			httpClient,
			baseURL+RolloutServiceBatchRunTasksProcedure,
			connect.WithSchema(rolloutServiceMethods.ByName("BatchRunTasks")),
			connect.WithClientOptions(opts...),
		),
		batchSkipTasks: connect.NewClient[v1.BatchSkipTasksRequest, v1.BatchSkipTasksResponse](
			httpClient,
			baseURL+RolloutServiceBatchSkipTasksProcedure,
			connect.WithSchema(rolloutServiceMethods.ByName("BatchSkipTasks")),
			connect.WithClientOptions(opts...),
		),
		batchCancelTaskRuns: connect.NewClient[v1.BatchCancelTaskRunsRequest, v1.BatchCancelTaskRunsResponse](
			httpClient,
			baseURL+RolloutServiceBatchCancelTaskRunsProcedure,
			connect.WithSchema(rolloutServiceMethods.ByName("BatchCancelTaskRuns")),
			connect.WithClientOptions(opts...),
		),
		previewTaskRunRollback: connect.NewClient[v1.PreviewTaskRunRollbackRequest, v1.PreviewTaskRunRollbackResponse](
			httpClient,
			baseURL+RolloutServicePreviewTaskRunRollbackProcedure,
			connect.WithSchema(rolloutServiceMethods.ByName("PreviewTaskRunRollback")),
			connect.WithClientOptions(opts...),
		),
	}
}

// rolloutServiceClient implements RolloutServiceClient.
type rolloutServiceClient struct {
	getRollout             *connect.Client[v1.GetRolloutRequest, v1.Rollout]
	listRollouts           *connect.Client[v1.ListRolloutsRequest, v1.ListRolloutsResponse]
	createRollout          *connect.Client[v1.CreateRolloutRequest, v1.Rollout]
	previewRollout         *connect.Client[v1.PreviewRolloutRequest, v1.Rollout]
	listTaskRuns           *connect.Client[v1.ListTaskRunsRequest, v1.ListTaskRunsResponse]
	getTaskRun             *connect.Client[v1.GetTaskRunRequest, v1.TaskRun]
	getTaskRunLog          *connect.Client[v1.GetTaskRunLogRequest, v1.TaskRunLog]
	getTaskRunSession      *connect.Client[v1.GetTaskRunSessionRequest, v1.TaskRunSession]
	batchRunTasks          *connect.Client[v1.BatchRunTasksRequest, v1.BatchRunTasksResponse]
	batchSkipTasks         *connect.Client[v1.BatchSkipTasksRequest, v1.BatchSkipTasksResponse]
	batchCancelTaskRuns    *connect.Client[v1.BatchCancelTaskRunsRequest, v1.BatchCancelTaskRunsResponse]
	previewTaskRunRollback *connect.Client[v1.PreviewTaskRunRollbackRequest, v1.PreviewTaskRunRollbackResponse]
}

// GetRollout calls bytebase.v1.RolloutService.GetRollout.
func (c *rolloutServiceClient) GetRollout(ctx context.Context, req *connect.Request[v1.GetRolloutRequest]) (*connect.Response[v1.Rollout], error) {
	return c.getRollout.CallUnary(ctx, req)
}

// ListRollouts calls bytebase.v1.RolloutService.ListRollouts.
func (c *rolloutServiceClient) ListRollouts(ctx context.Context, req *connect.Request[v1.ListRolloutsRequest]) (*connect.Response[v1.ListRolloutsResponse], error) {
	return c.listRollouts.CallUnary(ctx, req)
}

// CreateRollout calls bytebase.v1.RolloutService.CreateRollout.
func (c *rolloutServiceClient) CreateRollout(ctx context.Context, req *connect.Request[v1.CreateRolloutRequest]) (*connect.Response[v1.Rollout], error) {
	return c.createRollout.CallUnary(ctx, req)
}

// PreviewRollout calls bytebase.v1.RolloutService.PreviewRollout.
func (c *rolloutServiceClient) PreviewRollout(ctx context.Context, req *connect.Request[v1.PreviewRolloutRequest]) (*connect.Response[v1.Rollout], error) {
	return c.previewRollout.CallUnary(ctx, req)
}

// ListTaskRuns calls bytebase.v1.RolloutService.ListTaskRuns.
func (c *rolloutServiceClient) ListTaskRuns(ctx context.Context, req *connect.Request[v1.ListTaskRunsRequest]) (*connect.Response[v1.ListTaskRunsResponse], error) {
	return c.listTaskRuns.CallUnary(ctx, req)
}

// GetTaskRun calls bytebase.v1.RolloutService.GetTaskRun.
func (c *rolloutServiceClient) GetTaskRun(ctx context.Context, req *connect.Request[v1.GetTaskRunRequest]) (*connect.Response[v1.TaskRun], error) {
	return c.getTaskRun.CallUnary(ctx, req)
}

// GetTaskRunLog calls bytebase.v1.RolloutService.GetTaskRunLog.
func (c *rolloutServiceClient) GetTaskRunLog(ctx context.Context, req *connect.Request[v1.GetTaskRunLogRequest]) (*connect.Response[v1.TaskRunLog], error) {
	return c.getTaskRunLog.CallUnary(ctx, req)
}

// GetTaskRunSession calls bytebase.v1.RolloutService.GetTaskRunSession.
func (c *rolloutServiceClient) GetTaskRunSession(ctx context.Context, req *connect.Request[v1.GetTaskRunSessionRequest]) (*connect.Response[v1.TaskRunSession], error) {
	return c.getTaskRunSession.CallUnary(ctx, req)
}

// BatchRunTasks calls bytebase.v1.RolloutService.BatchRunTasks.
func (c *rolloutServiceClient) BatchRunTasks(ctx context.Context, req *connect.Request[v1.BatchRunTasksRequest]) (*connect.Response[v1.BatchRunTasksResponse], error) {
	return c.batchRunTasks.CallUnary(ctx, req)
}

// BatchSkipTasks calls bytebase.v1.RolloutService.BatchSkipTasks.
func (c *rolloutServiceClient) BatchSkipTasks(ctx context.Context, req *connect.Request[v1.BatchSkipTasksRequest]) (*connect.Response[v1.BatchSkipTasksResponse], error) {
	return c.batchSkipTasks.CallUnary(ctx, req)
}

// BatchCancelTaskRuns calls bytebase.v1.RolloutService.BatchCancelTaskRuns.
func (c *rolloutServiceClient) BatchCancelTaskRuns(ctx context.Context, req *connect.Request[v1.BatchCancelTaskRunsRequest]) (*connect.Response[v1.BatchCancelTaskRunsResponse], error) {
	return c.batchCancelTaskRuns.CallUnary(ctx, req)
}

// PreviewTaskRunRollback calls bytebase.v1.RolloutService.PreviewTaskRunRollback.
func (c *rolloutServiceClient) PreviewTaskRunRollback(ctx context.Context, req *connect.Request[v1.PreviewTaskRunRollbackRequest]) (*connect.Response[v1.PreviewTaskRunRollbackResponse], error) {
	return c.previewTaskRunRollback.CallUnary(ctx, req)
}

// RolloutServiceHandler is an implementation of the bytebase.v1.RolloutService service.
type RolloutServiceHandler interface {
	GetRollout(context.Context, *connect.Request[v1.GetRolloutRequest]) (*connect.Response[v1.Rollout], error)
	ListRollouts(context.Context, *connect.Request[v1.ListRolloutsRequest]) (*connect.Response[v1.ListRolloutsResponse], error)
	// CreateRollout can be called multiple times with the same rollout.plan but different stage_id to promote rollout stages.
	CreateRollout(context.Context, *connect.Request[v1.CreateRolloutRequest]) (*connect.Response[v1.Rollout], error)
	PreviewRollout(context.Context, *connect.Request[v1.PreviewRolloutRequest]) (*connect.Response[v1.Rollout], error)
	ListTaskRuns(context.Context, *connect.Request[v1.ListTaskRunsRequest]) (*connect.Response[v1.ListTaskRunsResponse], error)
	GetTaskRun(context.Context, *connect.Request[v1.GetTaskRunRequest]) (*connect.Response[v1.TaskRun], error)
	GetTaskRunLog(context.Context, *connect.Request[v1.GetTaskRunLogRequest]) (*connect.Response[v1.TaskRunLog], error)
	GetTaskRunSession(context.Context, *connect.Request[v1.GetTaskRunSessionRequest]) (*connect.Response[v1.TaskRunSession], error)
	// BatchRunTasks creates task runs for the specified tasks.
	// DataExport issue only allows the creator to run the task.
	// Users with "bb.taskRuns.create" permission can run the task, e.g. Workspace Admin and DBA.
	// Follow role-based rollout policy for the environment.
	BatchRunTasks(context.Context, *connect.Request[v1.BatchRunTasksRequest]) (*connect.Response[v1.BatchRunTasksResponse], error)
	// BatchSkipTasks skips the specified tasks.
	// The access is the same as BatchRunTasks().
	BatchSkipTasks(context.Context, *connect.Request[v1.BatchSkipTasksRequest]) (*connect.Response[v1.BatchSkipTasksResponse], error)
	// BatchCancelTaskRuns cancels the specified task runs in batch.
	// The access is the same as BatchRunTasks().
	BatchCancelTaskRuns(context.Context, *connect.Request[v1.BatchCancelTaskRunsRequest]) (*connect.Response[v1.BatchCancelTaskRunsResponse], error)
	PreviewTaskRunRollback(context.Context, *connect.Request[v1.PreviewTaskRunRollbackRequest]) (*connect.Response[v1.PreviewTaskRunRollbackResponse], error)
}

// NewRolloutServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRolloutServiceHandler(svc RolloutServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	rolloutServiceMethods := v1.File_v1_rollout_service_proto.Services().ByName("RolloutService").Methods()
	rolloutServiceGetRolloutHandler := connect.NewUnaryHandler(
		RolloutServiceGetRolloutProcedure,
		svc.GetRollout,
		connect.WithSchema(rolloutServiceMethods.ByName("GetRollout")),
		connect.WithHandlerOptions(opts...),
	)
	rolloutServiceListRolloutsHandler := connect.NewUnaryHandler(
		RolloutServiceListRolloutsProcedure,
		svc.ListRollouts,
		connect.WithSchema(rolloutServiceMethods.ByName("ListRollouts")),
		connect.WithHandlerOptions(opts...),
	)
	rolloutServiceCreateRolloutHandler := connect.NewUnaryHandler(
		RolloutServiceCreateRolloutProcedure,
		svc.CreateRollout,
		connect.WithSchema(rolloutServiceMethods.ByName("CreateRollout")),
		connect.WithHandlerOptions(opts...),
	)
	rolloutServicePreviewRolloutHandler := connect.NewUnaryHandler(
		RolloutServicePreviewRolloutProcedure,
		svc.PreviewRollout,
		connect.WithSchema(rolloutServiceMethods.ByName("PreviewRollout")),
		connect.WithHandlerOptions(opts...),
	)
	rolloutServiceListTaskRunsHandler := connect.NewUnaryHandler(
		RolloutServiceListTaskRunsProcedure,
		svc.ListTaskRuns,
		connect.WithSchema(rolloutServiceMethods.ByName("ListTaskRuns")),
		connect.WithHandlerOptions(opts...),
	)
	rolloutServiceGetTaskRunHandler := connect.NewUnaryHandler(
		RolloutServiceGetTaskRunProcedure,
		svc.GetTaskRun,
		connect.WithSchema(rolloutServiceMethods.ByName("GetTaskRun")),
		connect.WithHandlerOptions(opts...),
	)
	rolloutServiceGetTaskRunLogHandler := connect.NewUnaryHandler(
		RolloutServiceGetTaskRunLogProcedure,
		svc.GetTaskRunLog,
		connect.WithSchema(rolloutServiceMethods.ByName("GetTaskRunLog")),
		connect.WithHandlerOptions(opts...),
	)
	rolloutServiceGetTaskRunSessionHandler := connect.NewUnaryHandler(
		RolloutServiceGetTaskRunSessionProcedure,
		svc.GetTaskRunSession,
		connect.WithSchema(rolloutServiceMethods.ByName("GetTaskRunSession")),
		connect.WithHandlerOptions(opts...),
	)
	rolloutServiceBatchRunTasksHandler := connect.NewUnaryHandler(
		RolloutServiceBatchRunTasksProcedure,
		svc.BatchRunTasks,
		connect.WithSchema(rolloutServiceMethods.ByName("BatchRunTasks")),
		connect.WithHandlerOptions(opts...),
	)
	rolloutServiceBatchSkipTasksHandler := connect.NewUnaryHandler(
		RolloutServiceBatchSkipTasksProcedure,
		svc.BatchSkipTasks,
		connect.WithSchema(rolloutServiceMethods.ByName("BatchSkipTasks")),
		connect.WithHandlerOptions(opts...),
	)
	rolloutServiceBatchCancelTaskRunsHandler := connect.NewUnaryHandler(
		RolloutServiceBatchCancelTaskRunsProcedure,
		svc.BatchCancelTaskRuns,
		connect.WithSchema(rolloutServiceMethods.ByName("BatchCancelTaskRuns")),
		connect.WithHandlerOptions(opts...),
	)
	rolloutServicePreviewTaskRunRollbackHandler := connect.NewUnaryHandler(
		RolloutServicePreviewTaskRunRollbackProcedure,
		svc.PreviewTaskRunRollback,
		connect.WithSchema(rolloutServiceMethods.ByName("PreviewTaskRunRollback")),
		connect.WithHandlerOptions(opts...),
	)
	return "/bytebase.v1.RolloutService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RolloutServiceGetRolloutProcedure:
			rolloutServiceGetRolloutHandler.ServeHTTP(w, r)
		case RolloutServiceListRolloutsProcedure:
			rolloutServiceListRolloutsHandler.ServeHTTP(w, r)
		case RolloutServiceCreateRolloutProcedure:
			rolloutServiceCreateRolloutHandler.ServeHTTP(w, r)
		case RolloutServicePreviewRolloutProcedure:
			rolloutServicePreviewRolloutHandler.ServeHTTP(w, r)
		case RolloutServiceListTaskRunsProcedure:
			rolloutServiceListTaskRunsHandler.ServeHTTP(w, r)
		case RolloutServiceGetTaskRunProcedure:
			rolloutServiceGetTaskRunHandler.ServeHTTP(w, r)
		case RolloutServiceGetTaskRunLogProcedure:
			rolloutServiceGetTaskRunLogHandler.ServeHTTP(w, r)
		case RolloutServiceGetTaskRunSessionProcedure:
			rolloutServiceGetTaskRunSessionHandler.ServeHTTP(w, r)
		case RolloutServiceBatchRunTasksProcedure:
			rolloutServiceBatchRunTasksHandler.ServeHTTP(w, r)
		case RolloutServiceBatchSkipTasksProcedure:
			rolloutServiceBatchSkipTasksHandler.ServeHTTP(w, r)
		case RolloutServiceBatchCancelTaskRunsProcedure:
			rolloutServiceBatchCancelTaskRunsHandler.ServeHTTP(w, r)
		case RolloutServicePreviewTaskRunRollbackProcedure:
			rolloutServicePreviewTaskRunRollbackHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRolloutServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRolloutServiceHandler struct{}

func (UnimplementedRolloutServiceHandler) GetRollout(context.Context, *connect.Request[v1.GetRolloutRequest]) (*connect.Response[v1.Rollout], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.RolloutService.GetRollout is not implemented"))
}

func (UnimplementedRolloutServiceHandler) ListRollouts(context.Context, *connect.Request[v1.ListRolloutsRequest]) (*connect.Response[v1.ListRolloutsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.RolloutService.ListRollouts is not implemented"))
}

func (UnimplementedRolloutServiceHandler) CreateRollout(context.Context, *connect.Request[v1.CreateRolloutRequest]) (*connect.Response[v1.Rollout], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.RolloutService.CreateRollout is not implemented"))
}

func (UnimplementedRolloutServiceHandler) PreviewRollout(context.Context, *connect.Request[v1.PreviewRolloutRequest]) (*connect.Response[v1.Rollout], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.RolloutService.PreviewRollout is not implemented"))
}

func (UnimplementedRolloutServiceHandler) ListTaskRuns(context.Context, *connect.Request[v1.ListTaskRunsRequest]) (*connect.Response[v1.ListTaskRunsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.RolloutService.ListTaskRuns is not implemented"))
}

func (UnimplementedRolloutServiceHandler) GetTaskRun(context.Context, *connect.Request[v1.GetTaskRunRequest]) (*connect.Response[v1.TaskRun], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.RolloutService.GetTaskRun is not implemented"))
}

func (UnimplementedRolloutServiceHandler) GetTaskRunLog(context.Context, *connect.Request[v1.GetTaskRunLogRequest]) (*connect.Response[v1.TaskRunLog], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.RolloutService.GetTaskRunLog is not implemented"))
}

func (UnimplementedRolloutServiceHandler) GetTaskRunSession(context.Context, *connect.Request[v1.GetTaskRunSessionRequest]) (*connect.Response[v1.TaskRunSession], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.RolloutService.GetTaskRunSession is not implemented"))
}

func (UnimplementedRolloutServiceHandler) BatchRunTasks(context.Context, *connect.Request[v1.BatchRunTasksRequest]) (*connect.Response[v1.BatchRunTasksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.RolloutService.BatchRunTasks is not implemented"))
}

func (UnimplementedRolloutServiceHandler) BatchSkipTasks(context.Context, *connect.Request[v1.BatchSkipTasksRequest]) (*connect.Response[v1.BatchSkipTasksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.RolloutService.BatchSkipTasks is not implemented"))
}

func (UnimplementedRolloutServiceHandler) BatchCancelTaskRuns(context.Context, *connect.Request[v1.BatchCancelTaskRunsRequest]) (*connect.Response[v1.BatchCancelTaskRunsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.RolloutService.BatchCancelTaskRuns is not implemented"))
}

func (UnimplementedRolloutServiceHandler) PreviewTaskRunRollback(context.Context, *connect.Request[v1.PreviewTaskRunRollbackRequest]) (*connect.Response[v1.PreviewTaskRunRollbackResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.RolloutService.PreviewTaskRunRollback is not implemented"))
}
