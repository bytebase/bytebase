// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/database_group_service.proto

package v1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/bytebase/bytebase/proto/generated-go/v1"
	connect_go "github.com/bufbuild/connect-go"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// DatabaseGroupServiceName is the fully-qualified name of the DatabaseGroupService service.
	DatabaseGroupServiceName = "bytebase.v1.DatabaseGroupService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DatabaseGroupServiceListDatabaseGroupsProcedure is the fully-qualified name of the
	// DatabaseGroupService's ListDatabaseGroups RPC.
	DatabaseGroupServiceListDatabaseGroupsProcedure = "/bytebase.v1.DatabaseGroupService/ListDatabaseGroups"
	// DatabaseGroupServiceGetDatabaseGroupProcedure is the fully-qualified name of the
	// DatabaseGroupService's GetDatabaseGroup RPC.
	DatabaseGroupServiceGetDatabaseGroupProcedure = "/bytebase.v1.DatabaseGroupService/GetDatabaseGroup"
	// DatabaseGroupServiceCreateDatabaseGroupProcedure is the fully-qualified name of the
	// DatabaseGroupService's CreateDatabaseGroup RPC.
	DatabaseGroupServiceCreateDatabaseGroupProcedure = "/bytebase.v1.DatabaseGroupService/CreateDatabaseGroup"
	// DatabaseGroupServiceUpdateDatabaseGroupProcedure is the fully-qualified name of the
	// DatabaseGroupService's UpdateDatabaseGroup RPC.
	DatabaseGroupServiceUpdateDatabaseGroupProcedure = "/bytebase.v1.DatabaseGroupService/UpdateDatabaseGroup"
	// DatabaseGroupServiceDeleteDatabaseGroupProcedure is the fully-qualified name of the
	// DatabaseGroupService's DeleteDatabaseGroup RPC.
	DatabaseGroupServiceDeleteDatabaseGroupProcedure = "/bytebase.v1.DatabaseGroupService/DeleteDatabaseGroup"
)

// DatabaseGroupServiceClient is a client for the bytebase.v1.DatabaseGroupService service.
type DatabaseGroupServiceClient interface {
	ListDatabaseGroups(context.Context, *connect_go.Request[v1.ListDatabaseGroupsRequest]) (*connect_go.Response[v1.ListDatabaseGroupsResponse], error)
	GetDatabaseGroup(context.Context, *connect_go.Request[v1.GetDatabaseGroupRequest]) (*connect_go.Response[v1.DatabaseGroup], error)
	CreateDatabaseGroup(context.Context, *connect_go.Request[v1.CreateDatabaseGroupRequest]) (*connect_go.Response[v1.DatabaseGroup], error)
	UpdateDatabaseGroup(context.Context, *connect_go.Request[v1.UpdateDatabaseGroupRequest]) (*connect_go.Response[v1.DatabaseGroup], error)
	DeleteDatabaseGroup(context.Context, *connect_go.Request[v1.DeleteDatabaseGroupRequest]) (*connect_go.Response[emptypb.Empty], error)
}

// NewDatabaseGroupServiceClient constructs a client for the bytebase.v1.DatabaseGroupService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDatabaseGroupServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) DatabaseGroupServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &databaseGroupServiceClient{
		listDatabaseGroups: connect_go.NewClient[v1.ListDatabaseGroupsRequest, v1.ListDatabaseGroupsResponse](
			httpClient,
			baseURL+DatabaseGroupServiceListDatabaseGroupsProcedure,
			opts...,
		),
		getDatabaseGroup: connect_go.NewClient[v1.GetDatabaseGroupRequest, v1.DatabaseGroup](
			httpClient,
			baseURL+DatabaseGroupServiceGetDatabaseGroupProcedure,
			opts...,
		),
		createDatabaseGroup: connect_go.NewClient[v1.CreateDatabaseGroupRequest, v1.DatabaseGroup](
			httpClient,
			baseURL+DatabaseGroupServiceCreateDatabaseGroupProcedure,
			opts...,
		),
		updateDatabaseGroup: connect_go.NewClient[v1.UpdateDatabaseGroupRequest, v1.DatabaseGroup](
			httpClient,
			baseURL+DatabaseGroupServiceUpdateDatabaseGroupProcedure,
			opts...,
		),
		deleteDatabaseGroup: connect_go.NewClient[v1.DeleteDatabaseGroupRequest, emptypb.Empty](
			httpClient,
			baseURL+DatabaseGroupServiceDeleteDatabaseGroupProcedure,
			opts...,
		),
	}
}

// databaseGroupServiceClient implements DatabaseGroupServiceClient.
type databaseGroupServiceClient struct {
	listDatabaseGroups  *connect_go.Client[v1.ListDatabaseGroupsRequest, v1.ListDatabaseGroupsResponse]
	getDatabaseGroup    *connect_go.Client[v1.GetDatabaseGroupRequest, v1.DatabaseGroup]
	createDatabaseGroup *connect_go.Client[v1.CreateDatabaseGroupRequest, v1.DatabaseGroup]
	updateDatabaseGroup *connect_go.Client[v1.UpdateDatabaseGroupRequest, v1.DatabaseGroup]
	deleteDatabaseGroup *connect_go.Client[v1.DeleteDatabaseGroupRequest, emptypb.Empty]
}

// ListDatabaseGroups calls bytebase.v1.DatabaseGroupService.ListDatabaseGroups.
func (c *databaseGroupServiceClient) ListDatabaseGroups(ctx context.Context, req *connect_go.Request[v1.ListDatabaseGroupsRequest]) (*connect_go.Response[v1.ListDatabaseGroupsResponse], error) {
	return c.listDatabaseGroups.CallUnary(ctx, req)
}

// GetDatabaseGroup calls bytebase.v1.DatabaseGroupService.GetDatabaseGroup.
func (c *databaseGroupServiceClient) GetDatabaseGroup(ctx context.Context, req *connect_go.Request[v1.GetDatabaseGroupRequest]) (*connect_go.Response[v1.DatabaseGroup], error) {
	return c.getDatabaseGroup.CallUnary(ctx, req)
}

// CreateDatabaseGroup calls bytebase.v1.DatabaseGroupService.CreateDatabaseGroup.
func (c *databaseGroupServiceClient) CreateDatabaseGroup(ctx context.Context, req *connect_go.Request[v1.CreateDatabaseGroupRequest]) (*connect_go.Response[v1.DatabaseGroup], error) {
	return c.createDatabaseGroup.CallUnary(ctx, req)
}

// UpdateDatabaseGroup calls bytebase.v1.DatabaseGroupService.UpdateDatabaseGroup.
func (c *databaseGroupServiceClient) UpdateDatabaseGroup(ctx context.Context, req *connect_go.Request[v1.UpdateDatabaseGroupRequest]) (*connect_go.Response[v1.DatabaseGroup], error) {
	return c.updateDatabaseGroup.CallUnary(ctx, req)
}

// DeleteDatabaseGroup calls bytebase.v1.DatabaseGroupService.DeleteDatabaseGroup.
func (c *databaseGroupServiceClient) DeleteDatabaseGroup(ctx context.Context, req *connect_go.Request[v1.DeleteDatabaseGroupRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.deleteDatabaseGroup.CallUnary(ctx, req)
}

// DatabaseGroupServiceHandler is an implementation of the bytebase.v1.DatabaseGroupService service.
type DatabaseGroupServiceHandler interface {
	ListDatabaseGroups(context.Context, *connect_go.Request[v1.ListDatabaseGroupsRequest]) (*connect_go.Response[v1.ListDatabaseGroupsResponse], error)
	GetDatabaseGroup(context.Context, *connect_go.Request[v1.GetDatabaseGroupRequest]) (*connect_go.Response[v1.DatabaseGroup], error)
	CreateDatabaseGroup(context.Context, *connect_go.Request[v1.CreateDatabaseGroupRequest]) (*connect_go.Response[v1.DatabaseGroup], error)
	UpdateDatabaseGroup(context.Context, *connect_go.Request[v1.UpdateDatabaseGroupRequest]) (*connect_go.Response[v1.DatabaseGroup], error)
	DeleteDatabaseGroup(context.Context, *connect_go.Request[v1.DeleteDatabaseGroupRequest]) (*connect_go.Response[emptypb.Empty], error)
}

// NewDatabaseGroupServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDatabaseGroupServiceHandler(svc DatabaseGroupServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	databaseGroupServiceListDatabaseGroupsHandler := connect_go.NewUnaryHandler(
		DatabaseGroupServiceListDatabaseGroupsProcedure,
		svc.ListDatabaseGroups,
		opts...,
	)
	databaseGroupServiceGetDatabaseGroupHandler := connect_go.NewUnaryHandler(
		DatabaseGroupServiceGetDatabaseGroupProcedure,
		svc.GetDatabaseGroup,
		opts...,
	)
	databaseGroupServiceCreateDatabaseGroupHandler := connect_go.NewUnaryHandler(
		DatabaseGroupServiceCreateDatabaseGroupProcedure,
		svc.CreateDatabaseGroup,
		opts...,
	)
	databaseGroupServiceUpdateDatabaseGroupHandler := connect_go.NewUnaryHandler(
		DatabaseGroupServiceUpdateDatabaseGroupProcedure,
		svc.UpdateDatabaseGroup,
		opts...,
	)
	databaseGroupServiceDeleteDatabaseGroupHandler := connect_go.NewUnaryHandler(
		DatabaseGroupServiceDeleteDatabaseGroupProcedure,
		svc.DeleteDatabaseGroup,
		opts...,
	)
	return "/bytebase.v1.DatabaseGroupService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DatabaseGroupServiceListDatabaseGroupsProcedure:
			databaseGroupServiceListDatabaseGroupsHandler.ServeHTTP(w, r)
		case DatabaseGroupServiceGetDatabaseGroupProcedure:
			databaseGroupServiceGetDatabaseGroupHandler.ServeHTTP(w, r)
		case DatabaseGroupServiceCreateDatabaseGroupProcedure:
			databaseGroupServiceCreateDatabaseGroupHandler.ServeHTTP(w, r)
		case DatabaseGroupServiceUpdateDatabaseGroupProcedure:
			databaseGroupServiceUpdateDatabaseGroupHandler.ServeHTTP(w, r)
		case DatabaseGroupServiceDeleteDatabaseGroupProcedure:
			databaseGroupServiceDeleteDatabaseGroupHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDatabaseGroupServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDatabaseGroupServiceHandler struct{}

func (UnimplementedDatabaseGroupServiceHandler) ListDatabaseGroups(context.Context, *connect_go.Request[v1.ListDatabaseGroupsRequest]) (*connect_go.Response[v1.ListDatabaseGroupsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bytebase.v1.DatabaseGroupService.ListDatabaseGroups is not implemented"))
}

func (UnimplementedDatabaseGroupServiceHandler) GetDatabaseGroup(context.Context, *connect_go.Request[v1.GetDatabaseGroupRequest]) (*connect_go.Response[v1.DatabaseGroup], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bytebase.v1.DatabaseGroupService.GetDatabaseGroup is not implemented"))
}

func (UnimplementedDatabaseGroupServiceHandler) CreateDatabaseGroup(context.Context, *connect_go.Request[v1.CreateDatabaseGroupRequest]) (*connect_go.Response[v1.DatabaseGroup], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bytebase.v1.DatabaseGroupService.CreateDatabaseGroup is not implemented"))
}

func (UnimplementedDatabaseGroupServiceHandler) UpdateDatabaseGroup(context.Context, *connect_go.Request[v1.UpdateDatabaseGroupRequest]) (*connect_go.Response[v1.DatabaseGroup], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bytebase.v1.DatabaseGroupService.UpdateDatabaseGroup is not implemented"))
}

func (UnimplementedDatabaseGroupServiceHandler) DeleteDatabaseGroup(context.Context, *connect_go.Request[v1.DeleteDatabaseGroupRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bytebase.v1.DatabaseGroupService.DeleteDatabaseGroup is not implemented"))
}
