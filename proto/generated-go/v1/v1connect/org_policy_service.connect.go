// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/org_policy_service.proto

package v1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/bytebase/bytebase/proto/generated-go/v1"
	connect_go "github.com/bufbuild/connect-go"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// OrgPolicyServiceName is the fully-qualified name of the OrgPolicyService service.
	OrgPolicyServiceName = "bytebase.v1.OrgPolicyService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// OrgPolicyServiceGetPolicyProcedure is the fully-qualified name of the OrgPolicyService's
	// GetPolicy RPC.
	OrgPolicyServiceGetPolicyProcedure = "/bytebase.v1.OrgPolicyService/GetPolicy"
	// OrgPolicyServiceListPoliciesProcedure is the fully-qualified name of the OrgPolicyService's
	// ListPolicies RPC.
	OrgPolicyServiceListPoliciesProcedure = "/bytebase.v1.OrgPolicyService/ListPolicies"
	// OrgPolicyServiceCreatePolicyProcedure is the fully-qualified name of the OrgPolicyService's
	// CreatePolicy RPC.
	OrgPolicyServiceCreatePolicyProcedure = "/bytebase.v1.OrgPolicyService/CreatePolicy"
	// OrgPolicyServiceUpdatePolicyProcedure is the fully-qualified name of the OrgPolicyService's
	// UpdatePolicy RPC.
	OrgPolicyServiceUpdatePolicyProcedure = "/bytebase.v1.OrgPolicyService/UpdatePolicy"
	// OrgPolicyServiceDeletePolicyProcedure is the fully-qualified name of the OrgPolicyService's
	// DeletePolicy RPC.
	OrgPolicyServiceDeletePolicyProcedure = "/bytebase.v1.OrgPolicyService/DeletePolicy"
)

// OrgPolicyServiceClient is a client for the bytebase.v1.OrgPolicyService service.
type OrgPolicyServiceClient interface {
	GetPolicy(context.Context, *connect_go.Request[v1.GetPolicyRequest]) (*connect_go.Response[v1.Policy], error)
	ListPolicies(context.Context, *connect_go.Request[v1.ListPoliciesRequest]) (*connect_go.Response[v1.ListPoliciesResponse], error)
	CreatePolicy(context.Context, *connect_go.Request[v1.CreatePolicyRequest]) (*connect_go.Response[v1.Policy], error)
	UpdatePolicy(context.Context, *connect_go.Request[v1.UpdatePolicyRequest]) (*connect_go.Response[v1.Policy], error)
	DeletePolicy(context.Context, *connect_go.Request[v1.DeletePolicyRequest]) (*connect_go.Response[emptypb.Empty], error)
}

// NewOrgPolicyServiceClient constructs a client for the bytebase.v1.OrgPolicyService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewOrgPolicyServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) OrgPolicyServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &orgPolicyServiceClient{
		getPolicy: connect_go.NewClient[v1.GetPolicyRequest, v1.Policy](
			httpClient,
			baseURL+OrgPolicyServiceGetPolicyProcedure,
			opts...,
		),
		listPolicies: connect_go.NewClient[v1.ListPoliciesRequest, v1.ListPoliciesResponse](
			httpClient,
			baseURL+OrgPolicyServiceListPoliciesProcedure,
			opts...,
		),
		createPolicy: connect_go.NewClient[v1.CreatePolicyRequest, v1.Policy](
			httpClient,
			baseURL+OrgPolicyServiceCreatePolicyProcedure,
			opts...,
		),
		updatePolicy: connect_go.NewClient[v1.UpdatePolicyRequest, v1.Policy](
			httpClient,
			baseURL+OrgPolicyServiceUpdatePolicyProcedure,
			opts...,
		),
		deletePolicy: connect_go.NewClient[v1.DeletePolicyRequest, emptypb.Empty](
			httpClient,
			baseURL+OrgPolicyServiceDeletePolicyProcedure,
			opts...,
		),
	}
}

// orgPolicyServiceClient implements OrgPolicyServiceClient.
type orgPolicyServiceClient struct {
	getPolicy    *connect_go.Client[v1.GetPolicyRequest, v1.Policy]
	listPolicies *connect_go.Client[v1.ListPoliciesRequest, v1.ListPoliciesResponse]
	createPolicy *connect_go.Client[v1.CreatePolicyRequest, v1.Policy]
	updatePolicy *connect_go.Client[v1.UpdatePolicyRequest, v1.Policy]
	deletePolicy *connect_go.Client[v1.DeletePolicyRequest, emptypb.Empty]
}

// GetPolicy calls bytebase.v1.OrgPolicyService.GetPolicy.
func (c *orgPolicyServiceClient) GetPolicy(ctx context.Context, req *connect_go.Request[v1.GetPolicyRequest]) (*connect_go.Response[v1.Policy], error) {
	return c.getPolicy.CallUnary(ctx, req)
}

// ListPolicies calls bytebase.v1.OrgPolicyService.ListPolicies.
func (c *orgPolicyServiceClient) ListPolicies(ctx context.Context, req *connect_go.Request[v1.ListPoliciesRequest]) (*connect_go.Response[v1.ListPoliciesResponse], error) {
	return c.listPolicies.CallUnary(ctx, req)
}

// CreatePolicy calls bytebase.v1.OrgPolicyService.CreatePolicy.
func (c *orgPolicyServiceClient) CreatePolicy(ctx context.Context, req *connect_go.Request[v1.CreatePolicyRequest]) (*connect_go.Response[v1.Policy], error) {
	return c.createPolicy.CallUnary(ctx, req)
}

// UpdatePolicy calls bytebase.v1.OrgPolicyService.UpdatePolicy.
func (c *orgPolicyServiceClient) UpdatePolicy(ctx context.Context, req *connect_go.Request[v1.UpdatePolicyRequest]) (*connect_go.Response[v1.Policy], error) {
	return c.updatePolicy.CallUnary(ctx, req)
}

// DeletePolicy calls bytebase.v1.OrgPolicyService.DeletePolicy.
func (c *orgPolicyServiceClient) DeletePolicy(ctx context.Context, req *connect_go.Request[v1.DeletePolicyRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.deletePolicy.CallUnary(ctx, req)
}

// OrgPolicyServiceHandler is an implementation of the bytebase.v1.OrgPolicyService service.
type OrgPolicyServiceHandler interface {
	GetPolicy(context.Context, *connect_go.Request[v1.GetPolicyRequest]) (*connect_go.Response[v1.Policy], error)
	ListPolicies(context.Context, *connect_go.Request[v1.ListPoliciesRequest]) (*connect_go.Response[v1.ListPoliciesResponse], error)
	CreatePolicy(context.Context, *connect_go.Request[v1.CreatePolicyRequest]) (*connect_go.Response[v1.Policy], error)
	UpdatePolicy(context.Context, *connect_go.Request[v1.UpdatePolicyRequest]) (*connect_go.Response[v1.Policy], error)
	DeletePolicy(context.Context, *connect_go.Request[v1.DeletePolicyRequest]) (*connect_go.Response[emptypb.Empty], error)
}

// NewOrgPolicyServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewOrgPolicyServiceHandler(svc OrgPolicyServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	orgPolicyServiceGetPolicyHandler := connect_go.NewUnaryHandler(
		OrgPolicyServiceGetPolicyProcedure,
		svc.GetPolicy,
		opts...,
	)
	orgPolicyServiceListPoliciesHandler := connect_go.NewUnaryHandler(
		OrgPolicyServiceListPoliciesProcedure,
		svc.ListPolicies,
		opts...,
	)
	orgPolicyServiceCreatePolicyHandler := connect_go.NewUnaryHandler(
		OrgPolicyServiceCreatePolicyProcedure,
		svc.CreatePolicy,
		opts...,
	)
	orgPolicyServiceUpdatePolicyHandler := connect_go.NewUnaryHandler(
		OrgPolicyServiceUpdatePolicyProcedure,
		svc.UpdatePolicy,
		opts...,
	)
	orgPolicyServiceDeletePolicyHandler := connect_go.NewUnaryHandler(
		OrgPolicyServiceDeletePolicyProcedure,
		svc.DeletePolicy,
		opts...,
	)
	return "/bytebase.v1.OrgPolicyService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case OrgPolicyServiceGetPolicyProcedure:
			orgPolicyServiceGetPolicyHandler.ServeHTTP(w, r)
		case OrgPolicyServiceListPoliciesProcedure:
			orgPolicyServiceListPoliciesHandler.ServeHTTP(w, r)
		case OrgPolicyServiceCreatePolicyProcedure:
			orgPolicyServiceCreatePolicyHandler.ServeHTTP(w, r)
		case OrgPolicyServiceUpdatePolicyProcedure:
			orgPolicyServiceUpdatePolicyHandler.ServeHTTP(w, r)
		case OrgPolicyServiceDeletePolicyProcedure:
			orgPolicyServiceDeletePolicyHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedOrgPolicyServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedOrgPolicyServiceHandler struct{}

func (UnimplementedOrgPolicyServiceHandler) GetPolicy(context.Context, *connect_go.Request[v1.GetPolicyRequest]) (*connect_go.Response[v1.Policy], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bytebase.v1.OrgPolicyService.GetPolicy is not implemented"))
}

func (UnimplementedOrgPolicyServiceHandler) ListPolicies(context.Context, *connect_go.Request[v1.ListPoliciesRequest]) (*connect_go.Response[v1.ListPoliciesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bytebase.v1.OrgPolicyService.ListPolicies is not implemented"))
}

func (UnimplementedOrgPolicyServiceHandler) CreatePolicy(context.Context, *connect_go.Request[v1.CreatePolicyRequest]) (*connect_go.Response[v1.Policy], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bytebase.v1.OrgPolicyService.CreatePolicy is not implemented"))
}

func (UnimplementedOrgPolicyServiceHandler) UpdatePolicy(context.Context, *connect_go.Request[v1.UpdatePolicyRequest]) (*connect_go.Response[v1.Policy], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bytebase.v1.OrgPolicyService.UpdatePolicy is not implemented"))
}

func (UnimplementedOrgPolicyServiceHandler) DeletePolicy(context.Context, *connect_go.Request[v1.DeletePolicyRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bytebase.v1.OrgPolicyService.DeletePolicy is not implemented"))
}
