// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/workspace_service.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/bytebase/bytebase/proto/generated-go/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// WorkspaceServiceName is the fully-qualified name of the WorkspaceService service.
	WorkspaceServiceName = "bytebase.v1.WorkspaceService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// WorkspaceServiceGetIamPolicyProcedure is the fully-qualified name of the WorkspaceService's
	// GetIamPolicy RPC.
	WorkspaceServiceGetIamPolicyProcedure = "/bytebase.v1.WorkspaceService/GetIamPolicy"
	// WorkspaceServiceSetIamPolicyProcedure is the fully-qualified name of the WorkspaceService's
	// SetIamPolicy RPC.
	WorkspaceServiceSetIamPolicyProcedure = "/bytebase.v1.WorkspaceService/SetIamPolicy"
)

// WorkspaceServiceClient is a client for the bytebase.v1.WorkspaceService service.
type WorkspaceServiceClient interface {
	GetIamPolicy(context.Context, *connect.Request[v1.GetIamPolicyRequest]) (*connect.Response[v1.IamPolicy], error)
	SetIamPolicy(context.Context, *connect.Request[v1.SetIamPolicyRequest]) (*connect.Response[v1.IamPolicy], error)
}

// NewWorkspaceServiceClient constructs a client for the bytebase.v1.WorkspaceService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWorkspaceServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) WorkspaceServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	workspaceServiceMethods := v1.File_v1_workspace_service_proto.Services().ByName("WorkspaceService").Methods()
	return &workspaceServiceClient{
		getIamPolicy: connect.NewClient[v1.GetIamPolicyRequest, v1.IamPolicy](
			httpClient,
			baseURL+WorkspaceServiceGetIamPolicyProcedure,
			connect.WithSchema(workspaceServiceMethods.ByName("GetIamPolicy")),
			connect.WithClientOptions(opts...),
		),
		setIamPolicy: connect.NewClient[v1.SetIamPolicyRequest, v1.IamPolicy](
			httpClient,
			baseURL+WorkspaceServiceSetIamPolicyProcedure,
			connect.WithSchema(workspaceServiceMethods.ByName("SetIamPolicy")),
			connect.WithClientOptions(opts...),
		),
	}
}

// workspaceServiceClient implements WorkspaceServiceClient.
type workspaceServiceClient struct {
	getIamPolicy *connect.Client[v1.GetIamPolicyRequest, v1.IamPolicy]
	setIamPolicy *connect.Client[v1.SetIamPolicyRequest, v1.IamPolicy]
}

// GetIamPolicy calls bytebase.v1.WorkspaceService.GetIamPolicy.
func (c *workspaceServiceClient) GetIamPolicy(ctx context.Context, req *connect.Request[v1.GetIamPolicyRequest]) (*connect.Response[v1.IamPolicy], error) {
	return c.getIamPolicy.CallUnary(ctx, req)
}

// SetIamPolicy calls bytebase.v1.WorkspaceService.SetIamPolicy.
func (c *workspaceServiceClient) SetIamPolicy(ctx context.Context, req *connect.Request[v1.SetIamPolicyRequest]) (*connect.Response[v1.IamPolicy], error) {
	return c.setIamPolicy.CallUnary(ctx, req)
}

// WorkspaceServiceHandler is an implementation of the bytebase.v1.WorkspaceService service.
type WorkspaceServiceHandler interface {
	GetIamPolicy(context.Context, *connect.Request[v1.GetIamPolicyRequest]) (*connect.Response[v1.IamPolicy], error)
	SetIamPolicy(context.Context, *connect.Request[v1.SetIamPolicyRequest]) (*connect.Response[v1.IamPolicy], error)
}

// NewWorkspaceServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWorkspaceServiceHandler(svc WorkspaceServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	workspaceServiceMethods := v1.File_v1_workspace_service_proto.Services().ByName("WorkspaceService").Methods()
	workspaceServiceGetIamPolicyHandler := connect.NewUnaryHandler(
		WorkspaceServiceGetIamPolicyProcedure,
		svc.GetIamPolicy,
		connect.WithSchema(workspaceServiceMethods.ByName("GetIamPolicy")),
		connect.WithHandlerOptions(opts...),
	)
	workspaceServiceSetIamPolicyHandler := connect.NewUnaryHandler(
		WorkspaceServiceSetIamPolicyProcedure,
		svc.SetIamPolicy,
		connect.WithSchema(workspaceServiceMethods.ByName("SetIamPolicy")),
		connect.WithHandlerOptions(opts...),
	)
	return "/bytebase.v1.WorkspaceService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case WorkspaceServiceGetIamPolicyProcedure:
			workspaceServiceGetIamPolicyHandler.ServeHTTP(w, r)
		case WorkspaceServiceSetIamPolicyProcedure:
			workspaceServiceSetIamPolicyHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedWorkspaceServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedWorkspaceServiceHandler struct{}

func (UnimplementedWorkspaceServiceHandler) GetIamPolicy(context.Context, *connect.Request[v1.GetIamPolicyRequest]) (*connect.Response[v1.IamPolicy], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.WorkspaceService.GetIamPolicy is not implemented"))
}

func (UnimplementedWorkspaceServiceHandler) SetIamPolicy(context.Context, *connect.Request[v1.SetIamPolicyRequest]) (*connect.Response[v1.IamPolicy], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.WorkspaceService.SetIamPolicy is not implemented"))
}
