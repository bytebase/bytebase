// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/audit_log_service.proto

package v1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/bytebase/bytebase/proto/generated-go/v1"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// AuditLogServiceName is the fully-qualified name of the AuditLogService service.
	AuditLogServiceName = "bytebase.v1.AuditLogService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AuditLogServiceSearchAuditLogsProcedure is the fully-qualified name of the AuditLogService's
	// SearchAuditLogs RPC.
	AuditLogServiceSearchAuditLogsProcedure = "/bytebase.v1.AuditLogService/SearchAuditLogs"
	// AuditLogServiceExportAuditLogsProcedure is the fully-qualified name of the AuditLogService's
	// ExportAuditLogs RPC.
	AuditLogServiceExportAuditLogsProcedure = "/bytebase.v1.AuditLogService/ExportAuditLogs"
)

// AuditLogServiceClient is a client for the bytebase.v1.AuditLogService service.
type AuditLogServiceClient interface {
	SearchAuditLogs(context.Context, *connect_go.Request[v1.SearchAuditLogsRequest]) (*connect_go.Response[v1.SearchAuditLogsResponse], error)
	ExportAuditLogs(context.Context, *connect_go.Request[v1.ExportAuditLogsRequest]) (*connect_go.Response[v1.ExportAuditLogsResponse], error)
}

// NewAuditLogServiceClient constructs a client for the bytebase.v1.AuditLogService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuditLogServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) AuditLogServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &auditLogServiceClient{
		searchAuditLogs: connect_go.NewClient[v1.SearchAuditLogsRequest, v1.SearchAuditLogsResponse](
			httpClient,
			baseURL+AuditLogServiceSearchAuditLogsProcedure,
			opts...,
		),
		exportAuditLogs: connect_go.NewClient[v1.ExportAuditLogsRequest, v1.ExportAuditLogsResponse](
			httpClient,
			baseURL+AuditLogServiceExportAuditLogsProcedure,
			opts...,
		),
	}
}

// auditLogServiceClient implements AuditLogServiceClient.
type auditLogServiceClient struct {
	searchAuditLogs *connect_go.Client[v1.SearchAuditLogsRequest, v1.SearchAuditLogsResponse]
	exportAuditLogs *connect_go.Client[v1.ExportAuditLogsRequest, v1.ExportAuditLogsResponse]
}

// SearchAuditLogs calls bytebase.v1.AuditLogService.SearchAuditLogs.
func (c *auditLogServiceClient) SearchAuditLogs(ctx context.Context, req *connect_go.Request[v1.SearchAuditLogsRequest]) (*connect_go.Response[v1.SearchAuditLogsResponse], error) {
	return c.searchAuditLogs.CallUnary(ctx, req)
}

// ExportAuditLogs calls bytebase.v1.AuditLogService.ExportAuditLogs.
func (c *auditLogServiceClient) ExportAuditLogs(ctx context.Context, req *connect_go.Request[v1.ExportAuditLogsRequest]) (*connect_go.Response[v1.ExportAuditLogsResponse], error) {
	return c.exportAuditLogs.CallUnary(ctx, req)
}

// AuditLogServiceHandler is an implementation of the bytebase.v1.AuditLogService service.
type AuditLogServiceHandler interface {
	SearchAuditLogs(context.Context, *connect_go.Request[v1.SearchAuditLogsRequest]) (*connect_go.Response[v1.SearchAuditLogsResponse], error)
	ExportAuditLogs(context.Context, *connect_go.Request[v1.ExportAuditLogsRequest]) (*connect_go.Response[v1.ExportAuditLogsResponse], error)
}

// NewAuditLogServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuditLogServiceHandler(svc AuditLogServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	auditLogServiceSearchAuditLogsHandler := connect_go.NewUnaryHandler(
		AuditLogServiceSearchAuditLogsProcedure,
		svc.SearchAuditLogs,
		opts...,
	)
	auditLogServiceExportAuditLogsHandler := connect_go.NewUnaryHandler(
		AuditLogServiceExportAuditLogsProcedure,
		svc.ExportAuditLogs,
		opts...,
	)
	return "/bytebase.v1.AuditLogService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AuditLogServiceSearchAuditLogsProcedure:
			auditLogServiceSearchAuditLogsHandler.ServeHTTP(w, r)
		case AuditLogServiceExportAuditLogsProcedure:
			auditLogServiceExportAuditLogsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAuditLogServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuditLogServiceHandler struct{}

func (UnimplementedAuditLogServiceHandler) SearchAuditLogs(context.Context, *connect_go.Request[v1.SearchAuditLogsRequest]) (*connect_go.Response[v1.SearchAuditLogsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bytebase.v1.AuditLogService.SearchAuditLogs is not implemented"))
}

func (UnimplementedAuditLogServiceHandler) ExportAuditLogs(context.Context, *connect_go.Request[v1.ExportAuditLogsRequest]) (*connect_go.Response[v1.ExportAuditLogsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bytebase.v1.AuditLogService.ExportAuditLogs is not implemented"))
}
