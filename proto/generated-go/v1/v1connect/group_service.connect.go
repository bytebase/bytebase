// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/group_service.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/bytebase/bytebase/proto/generated-go/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// GroupServiceName is the fully-qualified name of the GroupService service.
	GroupServiceName = "bytebase.v1.GroupService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GroupServiceGetGroupProcedure is the fully-qualified name of the GroupService's GetGroup RPC.
	GroupServiceGetGroupProcedure = "/bytebase.v1.GroupService/GetGroup"
	// GroupServiceListGroupsProcedure is the fully-qualified name of the GroupService's ListGroups RPC.
	GroupServiceListGroupsProcedure = "/bytebase.v1.GroupService/ListGroups"
	// GroupServiceCreateGroupProcedure is the fully-qualified name of the GroupService's CreateGroup
	// RPC.
	GroupServiceCreateGroupProcedure = "/bytebase.v1.GroupService/CreateGroup"
	// GroupServiceUpdateGroupProcedure is the fully-qualified name of the GroupService's UpdateGroup
	// RPC.
	GroupServiceUpdateGroupProcedure = "/bytebase.v1.GroupService/UpdateGroup"
	// GroupServiceDeleteGroupProcedure is the fully-qualified name of the GroupService's DeleteGroup
	// RPC.
	GroupServiceDeleteGroupProcedure = "/bytebase.v1.GroupService/DeleteGroup"
)

// GroupServiceClient is a client for the bytebase.v1.GroupService service.
type GroupServiceClient interface {
	GetGroup(context.Context, *connect.Request[v1.GetGroupRequest]) (*connect.Response[v1.Group], error)
	ListGroups(context.Context, *connect.Request[v1.ListGroupsRequest]) (*connect.Response[v1.ListGroupsResponse], error)
	CreateGroup(context.Context, *connect.Request[v1.CreateGroupRequest]) (*connect.Response[v1.Group], error)
	// UpdateGroup updates the group.
	// Users with "bb.groups.update" permission on the workspace or the group owner can access this method.
	UpdateGroup(context.Context, *connect.Request[v1.UpdateGroupRequest]) (*connect.Response[v1.Group], error)
	DeleteGroup(context.Context, *connect.Request[v1.DeleteGroupRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewGroupServiceClient constructs a client for the bytebase.v1.GroupService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGroupServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GroupServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	groupServiceMethods := v1.File_v1_group_service_proto.Services().ByName("GroupService").Methods()
	return &groupServiceClient{
		getGroup: connect.NewClient[v1.GetGroupRequest, v1.Group](
			httpClient,
			baseURL+GroupServiceGetGroupProcedure,
			connect.WithSchema(groupServiceMethods.ByName("GetGroup")),
			connect.WithClientOptions(opts...),
		),
		listGroups: connect.NewClient[v1.ListGroupsRequest, v1.ListGroupsResponse](
			httpClient,
			baseURL+GroupServiceListGroupsProcedure,
			connect.WithSchema(groupServiceMethods.ByName("ListGroups")),
			connect.WithClientOptions(opts...),
		),
		createGroup: connect.NewClient[v1.CreateGroupRequest, v1.Group](
			httpClient,
			baseURL+GroupServiceCreateGroupProcedure,
			connect.WithSchema(groupServiceMethods.ByName("CreateGroup")),
			connect.WithClientOptions(opts...),
		),
		updateGroup: connect.NewClient[v1.UpdateGroupRequest, v1.Group](
			httpClient,
			baseURL+GroupServiceUpdateGroupProcedure,
			connect.WithSchema(groupServiceMethods.ByName("UpdateGroup")),
			connect.WithClientOptions(opts...),
		),
		deleteGroup: connect.NewClient[v1.DeleteGroupRequest, emptypb.Empty](
			httpClient,
			baseURL+GroupServiceDeleteGroupProcedure,
			connect.WithSchema(groupServiceMethods.ByName("DeleteGroup")),
			connect.WithClientOptions(opts...),
		),
	}
}

// groupServiceClient implements GroupServiceClient.
type groupServiceClient struct {
	getGroup    *connect.Client[v1.GetGroupRequest, v1.Group]
	listGroups  *connect.Client[v1.ListGroupsRequest, v1.ListGroupsResponse]
	createGroup *connect.Client[v1.CreateGroupRequest, v1.Group]
	updateGroup *connect.Client[v1.UpdateGroupRequest, v1.Group]
	deleteGroup *connect.Client[v1.DeleteGroupRequest, emptypb.Empty]
}

// GetGroup calls bytebase.v1.GroupService.GetGroup.
func (c *groupServiceClient) GetGroup(ctx context.Context, req *connect.Request[v1.GetGroupRequest]) (*connect.Response[v1.Group], error) {
	return c.getGroup.CallUnary(ctx, req)
}

// ListGroups calls bytebase.v1.GroupService.ListGroups.
func (c *groupServiceClient) ListGroups(ctx context.Context, req *connect.Request[v1.ListGroupsRequest]) (*connect.Response[v1.ListGroupsResponse], error) {
	return c.listGroups.CallUnary(ctx, req)
}

// CreateGroup calls bytebase.v1.GroupService.CreateGroup.
func (c *groupServiceClient) CreateGroup(ctx context.Context, req *connect.Request[v1.CreateGroupRequest]) (*connect.Response[v1.Group], error) {
	return c.createGroup.CallUnary(ctx, req)
}

// UpdateGroup calls bytebase.v1.GroupService.UpdateGroup.
func (c *groupServiceClient) UpdateGroup(ctx context.Context, req *connect.Request[v1.UpdateGroupRequest]) (*connect.Response[v1.Group], error) {
	return c.updateGroup.CallUnary(ctx, req)
}

// DeleteGroup calls bytebase.v1.GroupService.DeleteGroup.
func (c *groupServiceClient) DeleteGroup(ctx context.Context, req *connect.Request[v1.DeleteGroupRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteGroup.CallUnary(ctx, req)
}

// GroupServiceHandler is an implementation of the bytebase.v1.GroupService service.
type GroupServiceHandler interface {
	GetGroup(context.Context, *connect.Request[v1.GetGroupRequest]) (*connect.Response[v1.Group], error)
	ListGroups(context.Context, *connect.Request[v1.ListGroupsRequest]) (*connect.Response[v1.ListGroupsResponse], error)
	CreateGroup(context.Context, *connect.Request[v1.CreateGroupRequest]) (*connect.Response[v1.Group], error)
	// UpdateGroup updates the group.
	// Users with "bb.groups.update" permission on the workspace or the group owner can access this method.
	UpdateGroup(context.Context, *connect.Request[v1.UpdateGroupRequest]) (*connect.Response[v1.Group], error)
	DeleteGroup(context.Context, *connect.Request[v1.DeleteGroupRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewGroupServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGroupServiceHandler(svc GroupServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	groupServiceMethods := v1.File_v1_group_service_proto.Services().ByName("GroupService").Methods()
	groupServiceGetGroupHandler := connect.NewUnaryHandler(
		GroupServiceGetGroupProcedure,
		svc.GetGroup,
		connect.WithSchema(groupServiceMethods.ByName("GetGroup")),
		connect.WithHandlerOptions(opts...),
	)
	groupServiceListGroupsHandler := connect.NewUnaryHandler(
		GroupServiceListGroupsProcedure,
		svc.ListGroups,
		connect.WithSchema(groupServiceMethods.ByName("ListGroups")),
		connect.WithHandlerOptions(opts...),
	)
	groupServiceCreateGroupHandler := connect.NewUnaryHandler(
		GroupServiceCreateGroupProcedure,
		svc.CreateGroup,
		connect.WithSchema(groupServiceMethods.ByName("CreateGroup")),
		connect.WithHandlerOptions(opts...),
	)
	groupServiceUpdateGroupHandler := connect.NewUnaryHandler(
		GroupServiceUpdateGroupProcedure,
		svc.UpdateGroup,
		connect.WithSchema(groupServiceMethods.ByName("UpdateGroup")),
		connect.WithHandlerOptions(opts...),
	)
	groupServiceDeleteGroupHandler := connect.NewUnaryHandler(
		GroupServiceDeleteGroupProcedure,
		svc.DeleteGroup,
		connect.WithSchema(groupServiceMethods.ByName("DeleteGroup")),
		connect.WithHandlerOptions(opts...),
	)
	return "/bytebase.v1.GroupService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GroupServiceGetGroupProcedure:
			groupServiceGetGroupHandler.ServeHTTP(w, r)
		case GroupServiceListGroupsProcedure:
			groupServiceListGroupsHandler.ServeHTTP(w, r)
		case GroupServiceCreateGroupProcedure:
			groupServiceCreateGroupHandler.ServeHTTP(w, r)
		case GroupServiceUpdateGroupProcedure:
			groupServiceUpdateGroupHandler.ServeHTTP(w, r)
		case GroupServiceDeleteGroupProcedure:
			groupServiceDeleteGroupHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGroupServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGroupServiceHandler struct{}

func (UnimplementedGroupServiceHandler) GetGroup(context.Context, *connect.Request[v1.GetGroupRequest]) (*connect.Response[v1.Group], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.GroupService.GetGroup is not implemented"))
}

func (UnimplementedGroupServiceHandler) ListGroups(context.Context, *connect.Request[v1.ListGroupsRequest]) (*connect.Response[v1.ListGroupsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.GroupService.ListGroups is not implemented"))
}

func (UnimplementedGroupServiceHandler) CreateGroup(context.Context, *connect.Request[v1.CreateGroupRequest]) (*connect.Response[v1.Group], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.GroupService.CreateGroup is not implemented"))
}

func (UnimplementedGroupServiceHandler) UpdateGroup(context.Context, *connect.Request[v1.UpdateGroupRequest]) (*connect.Response[v1.Group], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.GroupService.UpdateGroup is not implemented"))
}

func (UnimplementedGroupServiceHandler) DeleteGroup(context.Context, *connect.Request[v1.DeleteGroupRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.GroupService.DeleteGroup is not implemented"))
}
