// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/review_config_service.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/bytebase/bytebase/proto/generated-go/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ReviewConfigServiceName is the fully-qualified name of the ReviewConfigService service.
	ReviewConfigServiceName = "bytebase.v1.ReviewConfigService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ReviewConfigServiceCreateReviewConfigProcedure is the fully-qualified name of the
	// ReviewConfigService's CreateReviewConfig RPC.
	ReviewConfigServiceCreateReviewConfigProcedure = "/bytebase.v1.ReviewConfigService/CreateReviewConfig"
	// ReviewConfigServiceListReviewConfigsProcedure is the fully-qualified name of the
	// ReviewConfigService's ListReviewConfigs RPC.
	ReviewConfigServiceListReviewConfigsProcedure = "/bytebase.v1.ReviewConfigService/ListReviewConfigs"
	// ReviewConfigServiceGetReviewConfigProcedure is the fully-qualified name of the
	// ReviewConfigService's GetReviewConfig RPC.
	ReviewConfigServiceGetReviewConfigProcedure = "/bytebase.v1.ReviewConfigService/GetReviewConfig"
	// ReviewConfigServiceUpdateReviewConfigProcedure is the fully-qualified name of the
	// ReviewConfigService's UpdateReviewConfig RPC.
	ReviewConfigServiceUpdateReviewConfigProcedure = "/bytebase.v1.ReviewConfigService/UpdateReviewConfig"
	// ReviewConfigServiceDeleteReviewConfigProcedure is the fully-qualified name of the
	// ReviewConfigService's DeleteReviewConfig RPC.
	ReviewConfigServiceDeleteReviewConfigProcedure = "/bytebase.v1.ReviewConfigService/DeleteReviewConfig"
)

// ReviewConfigServiceClient is a client for the bytebase.v1.ReviewConfigService service.
type ReviewConfigServiceClient interface {
	CreateReviewConfig(context.Context, *connect.Request[v1.CreateReviewConfigRequest]) (*connect.Response[v1.ReviewConfig], error)
	ListReviewConfigs(context.Context, *connect.Request[v1.ListReviewConfigsRequest]) (*connect.Response[v1.ListReviewConfigsResponse], error)
	GetReviewConfig(context.Context, *connect.Request[v1.GetReviewConfigRequest]) (*connect.Response[v1.ReviewConfig], error)
	UpdateReviewConfig(context.Context, *connect.Request[v1.UpdateReviewConfigRequest]) (*connect.Response[v1.ReviewConfig], error)
	DeleteReviewConfig(context.Context, *connect.Request[v1.DeleteReviewConfigRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewReviewConfigServiceClient constructs a client for the bytebase.v1.ReviewConfigService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewReviewConfigServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ReviewConfigServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	reviewConfigServiceMethods := v1.File_v1_review_config_service_proto.Services().ByName("ReviewConfigService").Methods()
	return &reviewConfigServiceClient{
		createReviewConfig: connect.NewClient[v1.CreateReviewConfigRequest, v1.ReviewConfig](
			httpClient,
			baseURL+ReviewConfigServiceCreateReviewConfigProcedure,
			connect.WithSchema(reviewConfigServiceMethods.ByName("CreateReviewConfig")),
			connect.WithClientOptions(opts...),
		),
		listReviewConfigs: connect.NewClient[v1.ListReviewConfigsRequest, v1.ListReviewConfigsResponse](
			httpClient,
			baseURL+ReviewConfigServiceListReviewConfigsProcedure,
			connect.WithSchema(reviewConfigServiceMethods.ByName("ListReviewConfigs")),
			connect.WithClientOptions(opts...),
		),
		getReviewConfig: connect.NewClient[v1.GetReviewConfigRequest, v1.ReviewConfig](
			httpClient,
			baseURL+ReviewConfigServiceGetReviewConfigProcedure,
			connect.WithSchema(reviewConfigServiceMethods.ByName("GetReviewConfig")),
			connect.WithClientOptions(opts...),
		),
		updateReviewConfig: connect.NewClient[v1.UpdateReviewConfigRequest, v1.ReviewConfig](
			httpClient,
			baseURL+ReviewConfigServiceUpdateReviewConfigProcedure,
			connect.WithSchema(reviewConfigServiceMethods.ByName("UpdateReviewConfig")),
			connect.WithClientOptions(opts...),
		),
		deleteReviewConfig: connect.NewClient[v1.DeleteReviewConfigRequest, emptypb.Empty](
			httpClient,
			baseURL+ReviewConfigServiceDeleteReviewConfigProcedure,
			connect.WithSchema(reviewConfigServiceMethods.ByName("DeleteReviewConfig")),
			connect.WithClientOptions(opts...),
		),
	}
}

// reviewConfigServiceClient implements ReviewConfigServiceClient.
type reviewConfigServiceClient struct {
	createReviewConfig *connect.Client[v1.CreateReviewConfigRequest, v1.ReviewConfig]
	listReviewConfigs  *connect.Client[v1.ListReviewConfigsRequest, v1.ListReviewConfigsResponse]
	getReviewConfig    *connect.Client[v1.GetReviewConfigRequest, v1.ReviewConfig]
	updateReviewConfig *connect.Client[v1.UpdateReviewConfigRequest, v1.ReviewConfig]
	deleteReviewConfig *connect.Client[v1.DeleteReviewConfigRequest, emptypb.Empty]
}

// CreateReviewConfig calls bytebase.v1.ReviewConfigService.CreateReviewConfig.
func (c *reviewConfigServiceClient) CreateReviewConfig(ctx context.Context, req *connect.Request[v1.CreateReviewConfigRequest]) (*connect.Response[v1.ReviewConfig], error) {
	return c.createReviewConfig.CallUnary(ctx, req)
}

// ListReviewConfigs calls bytebase.v1.ReviewConfigService.ListReviewConfigs.
func (c *reviewConfigServiceClient) ListReviewConfigs(ctx context.Context, req *connect.Request[v1.ListReviewConfigsRequest]) (*connect.Response[v1.ListReviewConfigsResponse], error) {
	return c.listReviewConfigs.CallUnary(ctx, req)
}

// GetReviewConfig calls bytebase.v1.ReviewConfigService.GetReviewConfig.
func (c *reviewConfigServiceClient) GetReviewConfig(ctx context.Context, req *connect.Request[v1.GetReviewConfigRequest]) (*connect.Response[v1.ReviewConfig], error) {
	return c.getReviewConfig.CallUnary(ctx, req)
}

// UpdateReviewConfig calls bytebase.v1.ReviewConfigService.UpdateReviewConfig.
func (c *reviewConfigServiceClient) UpdateReviewConfig(ctx context.Context, req *connect.Request[v1.UpdateReviewConfigRequest]) (*connect.Response[v1.ReviewConfig], error) {
	return c.updateReviewConfig.CallUnary(ctx, req)
}

// DeleteReviewConfig calls bytebase.v1.ReviewConfigService.DeleteReviewConfig.
func (c *reviewConfigServiceClient) DeleteReviewConfig(ctx context.Context, req *connect.Request[v1.DeleteReviewConfigRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteReviewConfig.CallUnary(ctx, req)
}

// ReviewConfigServiceHandler is an implementation of the bytebase.v1.ReviewConfigService service.
type ReviewConfigServiceHandler interface {
	CreateReviewConfig(context.Context, *connect.Request[v1.CreateReviewConfigRequest]) (*connect.Response[v1.ReviewConfig], error)
	ListReviewConfigs(context.Context, *connect.Request[v1.ListReviewConfigsRequest]) (*connect.Response[v1.ListReviewConfigsResponse], error)
	GetReviewConfig(context.Context, *connect.Request[v1.GetReviewConfigRequest]) (*connect.Response[v1.ReviewConfig], error)
	UpdateReviewConfig(context.Context, *connect.Request[v1.UpdateReviewConfigRequest]) (*connect.Response[v1.ReviewConfig], error)
	DeleteReviewConfig(context.Context, *connect.Request[v1.DeleteReviewConfigRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewReviewConfigServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewReviewConfigServiceHandler(svc ReviewConfigServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	reviewConfigServiceMethods := v1.File_v1_review_config_service_proto.Services().ByName("ReviewConfigService").Methods()
	reviewConfigServiceCreateReviewConfigHandler := connect.NewUnaryHandler(
		ReviewConfigServiceCreateReviewConfigProcedure,
		svc.CreateReviewConfig,
		connect.WithSchema(reviewConfigServiceMethods.ByName("CreateReviewConfig")),
		connect.WithHandlerOptions(opts...),
	)
	reviewConfigServiceListReviewConfigsHandler := connect.NewUnaryHandler(
		ReviewConfigServiceListReviewConfigsProcedure,
		svc.ListReviewConfigs,
		connect.WithSchema(reviewConfigServiceMethods.ByName("ListReviewConfigs")),
		connect.WithHandlerOptions(opts...),
	)
	reviewConfigServiceGetReviewConfigHandler := connect.NewUnaryHandler(
		ReviewConfigServiceGetReviewConfigProcedure,
		svc.GetReviewConfig,
		connect.WithSchema(reviewConfigServiceMethods.ByName("GetReviewConfig")),
		connect.WithHandlerOptions(opts...),
	)
	reviewConfigServiceUpdateReviewConfigHandler := connect.NewUnaryHandler(
		ReviewConfigServiceUpdateReviewConfigProcedure,
		svc.UpdateReviewConfig,
		connect.WithSchema(reviewConfigServiceMethods.ByName("UpdateReviewConfig")),
		connect.WithHandlerOptions(opts...),
	)
	reviewConfigServiceDeleteReviewConfigHandler := connect.NewUnaryHandler(
		ReviewConfigServiceDeleteReviewConfigProcedure,
		svc.DeleteReviewConfig,
		connect.WithSchema(reviewConfigServiceMethods.ByName("DeleteReviewConfig")),
		connect.WithHandlerOptions(opts...),
	)
	return "/bytebase.v1.ReviewConfigService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ReviewConfigServiceCreateReviewConfigProcedure:
			reviewConfigServiceCreateReviewConfigHandler.ServeHTTP(w, r)
		case ReviewConfigServiceListReviewConfigsProcedure:
			reviewConfigServiceListReviewConfigsHandler.ServeHTTP(w, r)
		case ReviewConfigServiceGetReviewConfigProcedure:
			reviewConfigServiceGetReviewConfigHandler.ServeHTTP(w, r)
		case ReviewConfigServiceUpdateReviewConfigProcedure:
			reviewConfigServiceUpdateReviewConfigHandler.ServeHTTP(w, r)
		case ReviewConfigServiceDeleteReviewConfigProcedure:
			reviewConfigServiceDeleteReviewConfigHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedReviewConfigServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedReviewConfigServiceHandler struct{}

func (UnimplementedReviewConfigServiceHandler) CreateReviewConfig(context.Context, *connect.Request[v1.CreateReviewConfigRequest]) (*connect.Response[v1.ReviewConfig], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.ReviewConfigService.CreateReviewConfig is not implemented"))
}

func (UnimplementedReviewConfigServiceHandler) ListReviewConfigs(context.Context, *connect.Request[v1.ListReviewConfigsRequest]) (*connect.Response[v1.ListReviewConfigsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.ReviewConfigService.ListReviewConfigs is not implemented"))
}

func (UnimplementedReviewConfigServiceHandler) GetReviewConfig(context.Context, *connect.Request[v1.GetReviewConfigRequest]) (*connect.Response[v1.ReviewConfig], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.ReviewConfigService.GetReviewConfig is not implemented"))
}

func (UnimplementedReviewConfigServiceHandler) UpdateReviewConfig(context.Context, *connect.Request[v1.UpdateReviewConfigRequest]) (*connect.Response[v1.ReviewConfig], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.ReviewConfigService.UpdateReviewConfig is not implemented"))
}

func (UnimplementedReviewConfigServiceHandler) DeleteReviewConfig(context.Context, *connect.Request[v1.DeleteReviewConfigRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.ReviewConfigService.DeleteReviewConfig is not implemented"))
}
