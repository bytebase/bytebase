// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/sheet_service.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/bytebase/bytebase/proto/generated-go/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SheetServiceName is the fully-qualified name of the SheetService service.
	SheetServiceName = "bytebase.v1.SheetService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SheetServiceCreateSheetProcedure is the fully-qualified name of the SheetService's CreateSheet
	// RPC.
	SheetServiceCreateSheetProcedure = "/bytebase.v1.SheetService/CreateSheet"
	// SheetServiceBatchCreateSheetsProcedure is the fully-qualified name of the SheetService's
	// BatchCreateSheets RPC.
	SheetServiceBatchCreateSheetsProcedure = "/bytebase.v1.SheetService/BatchCreateSheets"
	// SheetServiceGetSheetProcedure is the fully-qualified name of the SheetService's GetSheet RPC.
	SheetServiceGetSheetProcedure = "/bytebase.v1.SheetService/GetSheet"
	// SheetServiceUpdateSheetProcedure is the fully-qualified name of the SheetService's UpdateSheet
	// RPC.
	SheetServiceUpdateSheetProcedure = "/bytebase.v1.SheetService/UpdateSheet"
)

// SheetServiceClient is a client for the bytebase.v1.SheetService service.
type SheetServiceClient interface {
	CreateSheet(context.Context, *connect.Request[v1.CreateSheetRequest]) (*connect.Response[v1.Sheet], error)
	BatchCreateSheets(context.Context, *connect.Request[v1.BatchCreateSheetsRequest]) (*connect.Response[v1.BatchCreateSheetsResponse], error)
	GetSheet(context.Context, *connect.Request[v1.GetSheetRequest]) (*connect.Response[v1.Sheet], error)
	UpdateSheet(context.Context, *connect.Request[v1.UpdateSheetRequest]) (*connect.Response[v1.Sheet], error)
}

// NewSheetServiceClient constructs a client for the bytebase.v1.SheetService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSheetServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SheetServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	sheetServiceMethods := v1.File_v1_sheet_service_proto.Services().ByName("SheetService").Methods()
	return &sheetServiceClient{
		createSheet: connect.NewClient[v1.CreateSheetRequest, v1.Sheet](
			httpClient,
			baseURL+SheetServiceCreateSheetProcedure,
			connect.WithSchema(sheetServiceMethods.ByName("CreateSheet")),
			connect.WithClientOptions(opts...),
		),
		batchCreateSheets: connect.NewClient[v1.BatchCreateSheetsRequest, v1.BatchCreateSheetsResponse](
			httpClient,
			baseURL+SheetServiceBatchCreateSheetsProcedure,
			connect.WithSchema(sheetServiceMethods.ByName("BatchCreateSheets")),
			connect.WithClientOptions(opts...),
		),
		getSheet: connect.NewClient[v1.GetSheetRequest, v1.Sheet](
			httpClient,
			baseURL+SheetServiceGetSheetProcedure,
			connect.WithSchema(sheetServiceMethods.ByName("GetSheet")),
			connect.WithClientOptions(opts...),
		),
		updateSheet: connect.NewClient[v1.UpdateSheetRequest, v1.Sheet](
			httpClient,
			baseURL+SheetServiceUpdateSheetProcedure,
			connect.WithSchema(sheetServiceMethods.ByName("UpdateSheet")),
			connect.WithClientOptions(opts...),
		),
	}
}

// sheetServiceClient implements SheetServiceClient.
type sheetServiceClient struct {
	createSheet       *connect.Client[v1.CreateSheetRequest, v1.Sheet]
	batchCreateSheets *connect.Client[v1.BatchCreateSheetsRequest, v1.BatchCreateSheetsResponse]
	getSheet          *connect.Client[v1.GetSheetRequest, v1.Sheet]
	updateSheet       *connect.Client[v1.UpdateSheetRequest, v1.Sheet]
}

// CreateSheet calls bytebase.v1.SheetService.CreateSheet.
func (c *sheetServiceClient) CreateSheet(ctx context.Context, req *connect.Request[v1.CreateSheetRequest]) (*connect.Response[v1.Sheet], error) {
	return c.createSheet.CallUnary(ctx, req)
}

// BatchCreateSheets calls bytebase.v1.SheetService.BatchCreateSheets.
func (c *sheetServiceClient) BatchCreateSheets(ctx context.Context, req *connect.Request[v1.BatchCreateSheetsRequest]) (*connect.Response[v1.BatchCreateSheetsResponse], error) {
	return c.batchCreateSheets.CallUnary(ctx, req)
}

// GetSheet calls bytebase.v1.SheetService.GetSheet.
func (c *sheetServiceClient) GetSheet(ctx context.Context, req *connect.Request[v1.GetSheetRequest]) (*connect.Response[v1.Sheet], error) {
	return c.getSheet.CallUnary(ctx, req)
}

// UpdateSheet calls bytebase.v1.SheetService.UpdateSheet.
func (c *sheetServiceClient) UpdateSheet(ctx context.Context, req *connect.Request[v1.UpdateSheetRequest]) (*connect.Response[v1.Sheet], error) {
	return c.updateSheet.CallUnary(ctx, req)
}

// SheetServiceHandler is an implementation of the bytebase.v1.SheetService service.
type SheetServiceHandler interface {
	CreateSheet(context.Context, *connect.Request[v1.CreateSheetRequest]) (*connect.Response[v1.Sheet], error)
	BatchCreateSheets(context.Context, *connect.Request[v1.BatchCreateSheetsRequest]) (*connect.Response[v1.BatchCreateSheetsResponse], error)
	GetSheet(context.Context, *connect.Request[v1.GetSheetRequest]) (*connect.Response[v1.Sheet], error)
	UpdateSheet(context.Context, *connect.Request[v1.UpdateSheetRequest]) (*connect.Response[v1.Sheet], error)
}

// NewSheetServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSheetServiceHandler(svc SheetServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	sheetServiceMethods := v1.File_v1_sheet_service_proto.Services().ByName("SheetService").Methods()
	sheetServiceCreateSheetHandler := connect.NewUnaryHandler(
		SheetServiceCreateSheetProcedure,
		svc.CreateSheet,
		connect.WithSchema(sheetServiceMethods.ByName("CreateSheet")),
		connect.WithHandlerOptions(opts...),
	)
	sheetServiceBatchCreateSheetsHandler := connect.NewUnaryHandler(
		SheetServiceBatchCreateSheetsProcedure,
		svc.BatchCreateSheets,
		connect.WithSchema(sheetServiceMethods.ByName("BatchCreateSheets")),
		connect.WithHandlerOptions(opts...),
	)
	sheetServiceGetSheetHandler := connect.NewUnaryHandler(
		SheetServiceGetSheetProcedure,
		svc.GetSheet,
		connect.WithSchema(sheetServiceMethods.ByName("GetSheet")),
		connect.WithHandlerOptions(opts...),
	)
	sheetServiceUpdateSheetHandler := connect.NewUnaryHandler(
		SheetServiceUpdateSheetProcedure,
		svc.UpdateSheet,
		connect.WithSchema(sheetServiceMethods.ByName("UpdateSheet")),
		connect.WithHandlerOptions(opts...),
	)
	return "/bytebase.v1.SheetService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SheetServiceCreateSheetProcedure:
			sheetServiceCreateSheetHandler.ServeHTTP(w, r)
		case SheetServiceBatchCreateSheetsProcedure:
			sheetServiceBatchCreateSheetsHandler.ServeHTTP(w, r)
		case SheetServiceGetSheetProcedure:
			sheetServiceGetSheetHandler.ServeHTTP(w, r)
		case SheetServiceUpdateSheetProcedure:
			sheetServiceUpdateSheetHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSheetServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSheetServiceHandler struct{}

func (UnimplementedSheetServiceHandler) CreateSheet(context.Context, *connect.Request[v1.CreateSheetRequest]) (*connect.Response[v1.Sheet], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.SheetService.CreateSheet is not implemented"))
}

func (UnimplementedSheetServiceHandler) BatchCreateSheets(context.Context, *connect.Request[v1.BatchCreateSheetsRequest]) (*connect.Response[v1.BatchCreateSheetsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.SheetService.BatchCreateSheets is not implemented"))
}

func (UnimplementedSheetServiceHandler) GetSheet(context.Context, *connect.Request[v1.GetSheetRequest]) (*connect.Response[v1.Sheet], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.SheetService.GetSheet is not implemented"))
}

func (UnimplementedSheetServiceHandler) UpdateSheet(context.Context, *connect.Request[v1.UpdateSheetRequest]) (*connect.Response[v1.Sheet], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.SheetService.UpdateSheet is not implemented"))
}
