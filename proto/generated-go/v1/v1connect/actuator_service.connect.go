// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/actuator_service.proto

package v1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/bytebase/bytebase/proto/generated-go/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ActuatorServiceName is the fully-qualified name of the ActuatorService service.
	ActuatorServiceName = "bytebase.v1.ActuatorService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ActuatorServiceGetActuatorInfoProcedure is the fully-qualified name of the ActuatorService's
	// GetActuatorInfo RPC.
	ActuatorServiceGetActuatorInfoProcedure = "/bytebase.v1.ActuatorService/GetActuatorInfo"
	// ActuatorServiceUpdateActuatorInfoProcedure is the fully-qualified name of the ActuatorService's
	// UpdateActuatorInfo RPC.
	ActuatorServiceUpdateActuatorInfoProcedure = "/bytebase.v1.ActuatorService/UpdateActuatorInfo"
	// ActuatorServiceSetupSampleProcedure is the fully-qualified name of the ActuatorService's
	// SetupSample RPC.
	ActuatorServiceSetupSampleProcedure = "/bytebase.v1.ActuatorService/SetupSample"
	// ActuatorServiceDeleteCacheProcedure is the fully-qualified name of the ActuatorService's
	// DeleteCache RPC.
	ActuatorServiceDeleteCacheProcedure = "/bytebase.v1.ActuatorService/DeleteCache"
	// ActuatorServiceGetResourcePackageProcedure is the fully-qualified name of the ActuatorService's
	// GetResourcePackage RPC.
	ActuatorServiceGetResourcePackageProcedure = "/bytebase.v1.ActuatorService/GetResourcePackage"
)

// ActuatorServiceClient is a client for the bytebase.v1.ActuatorService service.
type ActuatorServiceClient interface {
	GetActuatorInfo(context.Context, *connect_go.Request[v1.GetActuatorInfoRequest]) (*connect_go.Response[v1.ActuatorInfo], error)
	UpdateActuatorInfo(context.Context, *connect_go.Request[v1.UpdateActuatorInfoRequest]) (*connect_go.Response[v1.ActuatorInfo], error)
	SetupSample(context.Context, *connect_go.Request[v1.SetupSampleRequest]) (*connect_go.Response[emptypb.Empty], error)
	DeleteCache(context.Context, *connect_go.Request[v1.DeleteCacheRequest]) (*connect_go.Response[emptypb.Empty], error)
	GetResourcePackage(context.Context, *connect_go.Request[v1.GetResourcePackageRequest]) (*connect_go.Response[v1.ResourcePackage], error)
}

// NewActuatorServiceClient constructs a client for the bytebase.v1.ActuatorService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewActuatorServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ActuatorServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &actuatorServiceClient{
		getActuatorInfo: connect_go.NewClient[v1.GetActuatorInfoRequest, v1.ActuatorInfo](
			httpClient,
			baseURL+ActuatorServiceGetActuatorInfoProcedure,
			opts...,
		),
		updateActuatorInfo: connect_go.NewClient[v1.UpdateActuatorInfoRequest, v1.ActuatorInfo](
			httpClient,
			baseURL+ActuatorServiceUpdateActuatorInfoProcedure,
			opts...,
		),
		setupSample: connect_go.NewClient[v1.SetupSampleRequest, emptypb.Empty](
			httpClient,
			baseURL+ActuatorServiceSetupSampleProcedure,
			opts...,
		),
		deleteCache: connect_go.NewClient[v1.DeleteCacheRequest, emptypb.Empty](
			httpClient,
			baseURL+ActuatorServiceDeleteCacheProcedure,
			opts...,
		),
		getResourcePackage: connect_go.NewClient[v1.GetResourcePackageRequest, v1.ResourcePackage](
			httpClient,
			baseURL+ActuatorServiceGetResourcePackageProcedure,
			opts...,
		),
	}
}

// actuatorServiceClient implements ActuatorServiceClient.
type actuatorServiceClient struct {
	getActuatorInfo    *connect_go.Client[v1.GetActuatorInfoRequest, v1.ActuatorInfo]
	updateActuatorInfo *connect_go.Client[v1.UpdateActuatorInfoRequest, v1.ActuatorInfo]
	setupSample        *connect_go.Client[v1.SetupSampleRequest, emptypb.Empty]
	deleteCache        *connect_go.Client[v1.DeleteCacheRequest, emptypb.Empty]
	getResourcePackage *connect_go.Client[v1.GetResourcePackageRequest, v1.ResourcePackage]
}

// GetActuatorInfo calls bytebase.v1.ActuatorService.GetActuatorInfo.
func (c *actuatorServiceClient) GetActuatorInfo(ctx context.Context, req *connect_go.Request[v1.GetActuatorInfoRequest]) (*connect_go.Response[v1.ActuatorInfo], error) {
	return c.getActuatorInfo.CallUnary(ctx, req)
}

// UpdateActuatorInfo calls bytebase.v1.ActuatorService.UpdateActuatorInfo.
func (c *actuatorServiceClient) UpdateActuatorInfo(ctx context.Context, req *connect_go.Request[v1.UpdateActuatorInfoRequest]) (*connect_go.Response[v1.ActuatorInfo], error) {
	return c.updateActuatorInfo.CallUnary(ctx, req)
}

// SetupSample calls bytebase.v1.ActuatorService.SetupSample.
func (c *actuatorServiceClient) SetupSample(ctx context.Context, req *connect_go.Request[v1.SetupSampleRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.setupSample.CallUnary(ctx, req)
}

// DeleteCache calls bytebase.v1.ActuatorService.DeleteCache.
func (c *actuatorServiceClient) DeleteCache(ctx context.Context, req *connect_go.Request[v1.DeleteCacheRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.deleteCache.CallUnary(ctx, req)
}

// GetResourcePackage calls bytebase.v1.ActuatorService.GetResourcePackage.
func (c *actuatorServiceClient) GetResourcePackage(ctx context.Context, req *connect_go.Request[v1.GetResourcePackageRequest]) (*connect_go.Response[v1.ResourcePackage], error) {
	return c.getResourcePackage.CallUnary(ctx, req)
}

// ActuatorServiceHandler is an implementation of the bytebase.v1.ActuatorService service.
type ActuatorServiceHandler interface {
	GetActuatorInfo(context.Context, *connect_go.Request[v1.GetActuatorInfoRequest]) (*connect_go.Response[v1.ActuatorInfo], error)
	UpdateActuatorInfo(context.Context, *connect_go.Request[v1.UpdateActuatorInfoRequest]) (*connect_go.Response[v1.ActuatorInfo], error)
	SetupSample(context.Context, *connect_go.Request[v1.SetupSampleRequest]) (*connect_go.Response[emptypb.Empty], error)
	DeleteCache(context.Context, *connect_go.Request[v1.DeleteCacheRequest]) (*connect_go.Response[emptypb.Empty], error)
	GetResourcePackage(context.Context, *connect_go.Request[v1.GetResourcePackageRequest]) (*connect_go.Response[v1.ResourcePackage], error)
}

// NewActuatorServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewActuatorServiceHandler(svc ActuatorServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	actuatorServiceGetActuatorInfoHandler := connect_go.NewUnaryHandler(
		ActuatorServiceGetActuatorInfoProcedure,
		svc.GetActuatorInfo,
		opts...,
	)
	actuatorServiceUpdateActuatorInfoHandler := connect_go.NewUnaryHandler(
		ActuatorServiceUpdateActuatorInfoProcedure,
		svc.UpdateActuatorInfo,
		opts...,
	)
	actuatorServiceSetupSampleHandler := connect_go.NewUnaryHandler(
		ActuatorServiceSetupSampleProcedure,
		svc.SetupSample,
		opts...,
	)
	actuatorServiceDeleteCacheHandler := connect_go.NewUnaryHandler(
		ActuatorServiceDeleteCacheProcedure,
		svc.DeleteCache,
		opts...,
	)
	actuatorServiceGetResourcePackageHandler := connect_go.NewUnaryHandler(
		ActuatorServiceGetResourcePackageProcedure,
		svc.GetResourcePackage,
		opts...,
	)
	return "/bytebase.v1.ActuatorService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ActuatorServiceGetActuatorInfoProcedure:
			actuatorServiceGetActuatorInfoHandler.ServeHTTP(w, r)
		case ActuatorServiceUpdateActuatorInfoProcedure:
			actuatorServiceUpdateActuatorInfoHandler.ServeHTTP(w, r)
		case ActuatorServiceSetupSampleProcedure:
			actuatorServiceSetupSampleHandler.ServeHTTP(w, r)
		case ActuatorServiceDeleteCacheProcedure:
			actuatorServiceDeleteCacheHandler.ServeHTTP(w, r)
		case ActuatorServiceGetResourcePackageProcedure:
			actuatorServiceGetResourcePackageHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedActuatorServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedActuatorServiceHandler struct{}

func (UnimplementedActuatorServiceHandler) GetActuatorInfo(context.Context, *connect_go.Request[v1.GetActuatorInfoRequest]) (*connect_go.Response[v1.ActuatorInfo], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bytebase.v1.ActuatorService.GetActuatorInfo is not implemented"))
}

func (UnimplementedActuatorServiceHandler) UpdateActuatorInfo(context.Context, *connect_go.Request[v1.UpdateActuatorInfoRequest]) (*connect_go.Response[v1.ActuatorInfo], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bytebase.v1.ActuatorService.UpdateActuatorInfo is not implemented"))
}

func (UnimplementedActuatorServiceHandler) SetupSample(context.Context, *connect_go.Request[v1.SetupSampleRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bytebase.v1.ActuatorService.SetupSample is not implemented"))
}

func (UnimplementedActuatorServiceHandler) DeleteCache(context.Context, *connect_go.Request[v1.DeleteCacheRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bytebase.v1.ActuatorService.DeleteCache is not implemented"))
}

func (UnimplementedActuatorServiceHandler) GetResourcePackage(context.Context, *connect_go.Request[v1.GetResourcePackageRequest]) (*connect_go.Response[v1.ResourcePackage], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bytebase.v1.ActuatorService.GetResourcePackage is not implemented"))
}
