// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/cel_service.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/bytebase/bytebase/proto/generated-go/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CelServiceName is the fully-qualified name of the CelService service.
	CelServiceName = "bytebase.v1.CelService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CelServiceBatchParseProcedure is the fully-qualified name of the CelService's BatchParse RPC.
	CelServiceBatchParseProcedure = "/bytebase.v1.CelService/BatchParse"
	// CelServiceBatchDeparseProcedure is the fully-qualified name of the CelService's BatchDeparse RPC.
	CelServiceBatchDeparseProcedure = "/bytebase.v1.CelService/BatchDeparse"
)

// CelServiceClient is a client for the bytebase.v1.CelService service.
type CelServiceClient interface {
	BatchParse(context.Context, *connect.Request[v1.BatchParseRequest]) (*connect.Response[v1.BatchParseResponse], error)
	BatchDeparse(context.Context, *connect.Request[v1.BatchDeparseRequest]) (*connect.Response[v1.BatchDeparseResponse], error)
}

// NewCelServiceClient constructs a client for the bytebase.v1.CelService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCelServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CelServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	celServiceMethods := v1.File_v1_cel_service_proto.Services().ByName("CelService").Methods()
	return &celServiceClient{
		batchParse: connect.NewClient[v1.BatchParseRequest, v1.BatchParseResponse](
			httpClient,
			baseURL+CelServiceBatchParseProcedure,
			connect.WithSchema(celServiceMethods.ByName("BatchParse")),
			connect.WithClientOptions(opts...),
		),
		batchDeparse: connect.NewClient[v1.BatchDeparseRequest, v1.BatchDeparseResponse](
			httpClient,
			baseURL+CelServiceBatchDeparseProcedure,
			connect.WithSchema(celServiceMethods.ByName("BatchDeparse")),
			connect.WithClientOptions(opts...),
		),
	}
}

// celServiceClient implements CelServiceClient.
type celServiceClient struct {
	batchParse   *connect.Client[v1.BatchParseRequest, v1.BatchParseResponse]
	batchDeparse *connect.Client[v1.BatchDeparseRequest, v1.BatchDeparseResponse]
}

// BatchParse calls bytebase.v1.CelService.BatchParse.
func (c *celServiceClient) BatchParse(ctx context.Context, req *connect.Request[v1.BatchParseRequest]) (*connect.Response[v1.BatchParseResponse], error) {
	return c.batchParse.CallUnary(ctx, req)
}

// BatchDeparse calls bytebase.v1.CelService.BatchDeparse.
func (c *celServiceClient) BatchDeparse(ctx context.Context, req *connect.Request[v1.BatchDeparseRequest]) (*connect.Response[v1.BatchDeparseResponse], error) {
	return c.batchDeparse.CallUnary(ctx, req)
}

// CelServiceHandler is an implementation of the bytebase.v1.CelService service.
type CelServiceHandler interface {
	BatchParse(context.Context, *connect.Request[v1.BatchParseRequest]) (*connect.Response[v1.BatchParseResponse], error)
	BatchDeparse(context.Context, *connect.Request[v1.BatchDeparseRequest]) (*connect.Response[v1.BatchDeparseResponse], error)
}

// NewCelServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCelServiceHandler(svc CelServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	celServiceMethods := v1.File_v1_cel_service_proto.Services().ByName("CelService").Methods()
	celServiceBatchParseHandler := connect.NewUnaryHandler(
		CelServiceBatchParseProcedure,
		svc.BatchParse,
		connect.WithSchema(celServiceMethods.ByName("BatchParse")),
		connect.WithHandlerOptions(opts...),
	)
	celServiceBatchDeparseHandler := connect.NewUnaryHandler(
		CelServiceBatchDeparseProcedure,
		svc.BatchDeparse,
		connect.WithSchema(celServiceMethods.ByName("BatchDeparse")),
		connect.WithHandlerOptions(opts...),
	)
	return "/bytebase.v1.CelService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CelServiceBatchParseProcedure:
			celServiceBatchParseHandler.ServeHTTP(w, r)
		case CelServiceBatchDeparseProcedure:
			celServiceBatchDeparseHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCelServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCelServiceHandler struct{}

func (UnimplementedCelServiceHandler) BatchParse(context.Context, *connect.Request[v1.BatchParseRequest]) (*connect.Response[v1.BatchParseResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.CelService.BatchParse is not implemented"))
}

func (UnimplementedCelServiceHandler) BatchDeparse(context.Context, *connect.Request[v1.BatchDeparseRequest]) (*connect.Response[v1.BatchDeparseResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.CelService.BatchDeparse is not implemented"))
}
