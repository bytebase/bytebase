// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/project_service.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/bytebase/bytebase/proto/generated-go/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// ProjectServiceName is the fully-qualified name of the ProjectService service.
	ProjectServiceName = "bytebase.v1.ProjectService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ProjectServiceGetProjectProcedure is the fully-qualified name of the ProjectService's GetProject
	// RPC.
	ProjectServiceGetProjectProcedure = "/bytebase.v1.ProjectService/GetProject"
	// ProjectServiceListProjectsProcedure is the fully-qualified name of the ProjectService's
	// ListProjects RPC.
	ProjectServiceListProjectsProcedure = "/bytebase.v1.ProjectService/ListProjects"
	// ProjectServiceSearchProjectsProcedure is the fully-qualified name of the ProjectService's
	// SearchProjects RPC.
	ProjectServiceSearchProjectsProcedure = "/bytebase.v1.ProjectService/SearchProjects"
	// ProjectServiceCreateProjectProcedure is the fully-qualified name of the ProjectService's
	// CreateProject RPC.
	ProjectServiceCreateProjectProcedure = "/bytebase.v1.ProjectService/CreateProject"
	// ProjectServiceUpdateProjectProcedure is the fully-qualified name of the ProjectService's
	// UpdateProject RPC.
	ProjectServiceUpdateProjectProcedure = "/bytebase.v1.ProjectService/UpdateProject"
	// ProjectServiceDeleteProjectProcedure is the fully-qualified name of the ProjectService's
	// DeleteProject RPC.
	ProjectServiceDeleteProjectProcedure = "/bytebase.v1.ProjectService/DeleteProject"
	// ProjectServiceUndeleteProjectProcedure is the fully-qualified name of the ProjectService's
	// UndeleteProject RPC.
	ProjectServiceUndeleteProjectProcedure = "/bytebase.v1.ProjectService/UndeleteProject"
	// ProjectServiceGetIamPolicyProcedure is the fully-qualified name of the ProjectService's
	// GetIamPolicy RPC.
	ProjectServiceGetIamPolicyProcedure = "/bytebase.v1.ProjectService/GetIamPolicy"
	// ProjectServiceBatchGetIamPolicyProcedure is the fully-qualified name of the ProjectService's
	// BatchGetIamPolicy RPC.
	ProjectServiceBatchGetIamPolicyProcedure = "/bytebase.v1.ProjectService/BatchGetIamPolicy"
	// ProjectServiceSetIamPolicyProcedure is the fully-qualified name of the ProjectService's
	// SetIamPolicy RPC.
	ProjectServiceSetIamPolicyProcedure = "/bytebase.v1.ProjectService/SetIamPolicy"
	// ProjectServiceAddWebhookProcedure is the fully-qualified name of the ProjectService's AddWebhook
	// RPC.
	ProjectServiceAddWebhookProcedure = "/bytebase.v1.ProjectService/AddWebhook"
	// ProjectServiceUpdateWebhookProcedure is the fully-qualified name of the ProjectService's
	// UpdateWebhook RPC.
	ProjectServiceUpdateWebhookProcedure = "/bytebase.v1.ProjectService/UpdateWebhook"
	// ProjectServiceRemoveWebhookProcedure is the fully-qualified name of the ProjectService's
	// RemoveWebhook RPC.
	ProjectServiceRemoveWebhookProcedure = "/bytebase.v1.ProjectService/RemoveWebhook"
	// ProjectServiceTestWebhookProcedure is the fully-qualified name of the ProjectService's
	// TestWebhook RPC.
	ProjectServiceTestWebhookProcedure = "/bytebase.v1.ProjectService/TestWebhook"
)

// ProjectServiceClient is a client for the bytebase.v1.ProjectService service.
type ProjectServiceClient interface {
	// GetProject retrieves a project by name.
	// Users with "bb.projects.get" permission on the workspace or the project owner can access this method.
	GetProject(context.Context, *connect.Request[v1.GetProjectRequest]) (*connect.Response[v1.Project], error)
	ListProjects(context.Context, *connect.Request[v1.ListProjectsRequest]) (*connect.Response[v1.ListProjectsResponse], error)
	SearchProjects(context.Context, *connect.Request[v1.SearchProjectsRequest]) (*connect.Response[v1.SearchProjectsResponse], error)
	CreateProject(context.Context, *connect.Request[v1.CreateProjectRequest]) (*connect.Response[v1.Project], error)
	UpdateProject(context.Context, *connect.Request[v1.UpdateProjectRequest]) (*connect.Response[v1.Project], error)
	DeleteProject(context.Context, *connect.Request[v1.DeleteProjectRequest]) (*connect.Response[emptypb.Empty], error)
	UndeleteProject(context.Context, *connect.Request[v1.UndeleteProjectRequest]) (*connect.Response[v1.Project], error)
	GetIamPolicy(context.Context, *connect.Request[v1.GetIamPolicyRequest]) (*connect.Response[v1.IamPolicy], error)
	// Deprecated.
	BatchGetIamPolicy(context.Context, *connect.Request[v1.BatchGetIamPolicyRequest]) (*connect.Response[v1.BatchGetIamPolicyResponse], error)
	SetIamPolicy(context.Context, *connect.Request[v1.SetIamPolicyRequest]) (*connect.Response[v1.IamPolicy], error)
	AddWebhook(context.Context, *connect.Request[v1.AddWebhookRequest]) (*connect.Response[v1.Project], error)
	UpdateWebhook(context.Context, *connect.Request[v1.UpdateWebhookRequest]) (*connect.Response[v1.Project], error)
	RemoveWebhook(context.Context, *connect.Request[v1.RemoveWebhookRequest]) (*connect.Response[v1.Project], error)
	TestWebhook(context.Context, *connect.Request[v1.TestWebhookRequest]) (*connect.Response[v1.TestWebhookResponse], error)
}

// NewProjectServiceClient constructs a client for the bytebase.v1.ProjectService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewProjectServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) ProjectServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	projectServiceMethods := v1.File_v1_project_service_proto.Services().ByName("ProjectService").Methods()
	return &projectServiceClient{
		getProject: connect.NewClient[v1.GetProjectRequest, v1.Project](
			httpClient,
			baseURL+ProjectServiceGetProjectProcedure,
			connect.WithSchema(projectServiceMethods.ByName("GetProject")),
			connect.WithClientOptions(opts...),
		),
		listProjects: connect.NewClient[v1.ListProjectsRequest, v1.ListProjectsResponse](
			httpClient,
			baseURL+ProjectServiceListProjectsProcedure,
			connect.WithSchema(projectServiceMethods.ByName("ListProjects")),
			connect.WithClientOptions(opts...),
		),
		searchProjects: connect.NewClient[v1.SearchProjectsRequest, v1.SearchProjectsResponse](
			httpClient,
			baseURL+ProjectServiceSearchProjectsProcedure,
			connect.WithSchema(projectServiceMethods.ByName("SearchProjects")),
			connect.WithClientOptions(opts...),
		),
		createProject: connect.NewClient[v1.CreateProjectRequest, v1.Project](
			httpClient,
			baseURL+ProjectServiceCreateProjectProcedure,
			connect.WithSchema(projectServiceMethods.ByName("CreateProject")),
			connect.WithClientOptions(opts...),
		),
		updateProject: connect.NewClient[v1.UpdateProjectRequest, v1.Project](
			httpClient,
			baseURL+ProjectServiceUpdateProjectProcedure,
			connect.WithSchema(projectServiceMethods.ByName("UpdateProject")),
			connect.WithClientOptions(opts...),
		),
		deleteProject: connect.NewClient[v1.DeleteProjectRequest, emptypb.Empty](
			httpClient,
			baseURL+ProjectServiceDeleteProjectProcedure,
			connect.WithSchema(projectServiceMethods.ByName("DeleteProject")),
			connect.WithClientOptions(opts...),
		),
		undeleteProject: connect.NewClient[v1.UndeleteProjectRequest, v1.Project](
			httpClient,
			baseURL+ProjectServiceUndeleteProjectProcedure,
			connect.WithSchema(projectServiceMethods.ByName("UndeleteProject")),
			connect.WithClientOptions(opts...),
		),
		getIamPolicy: connect.NewClient[v1.GetIamPolicyRequest, v1.IamPolicy](
			httpClient,
			baseURL+ProjectServiceGetIamPolicyProcedure,
			connect.WithSchema(projectServiceMethods.ByName("GetIamPolicy")),
			connect.WithClientOptions(opts...),
		),
		batchGetIamPolicy: connect.NewClient[v1.BatchGetIamPolicyRequest, v1.BatchGetIamPolicyResponse](
			httpClient,
			baseURL+ProjectServiceBatchGetIamPolicyProcedure,
			connect.WithSchema(projectServiceMethods.ByName("BatchGetIamPolicy")),
			connect.WithClientOptions(opts...),
		),
		setIamPolicy: connect.NewClient[v1.SetIamPolicyRequest, v1.IamPolicy](
			httpClient,
			baseURL+ProjectServiceSetIamPolicyProcedure,
			connect.WithSchema(projectServiceMethods.ByName("SetIamPolicy")),
			connect.WithClientOptions(opts...),
		),
		addWebhook: connect.NewClient[v1.AddWebhookRequest, v1.Project](
			httpClient,
			baseURL+ProjectServiceAddWebhookProcedure,
			connect.WithSchema(projectServiceMethods.ByName("AddWebhook")),
			connect.WithClientOptions(opts...),
		),
		updateWebhook: connect.NewClient[v1.UpdateWebhookRequest, v1.Project](
			httpClient,
			baseURL+ProjectServiceUpdateWebhookProcedure,
			connect.WithSchema(projectServiceMethods.ByName("UpdateWebhook")),
			connect.WithClientOptions(opts...),
		),
		removeWebhook: connect.NewClient[v1.RemoveWebhookRequest, v1.Project](
			httpClient,
			baseURL+ProjectServiceRemoveWebhookProcedure,
			connect.WithSchema(projectServiceMethods.ByName("RemoveWebhook")),
			connect.WithClientOptions(opts...),
		),
		testWebhook: connect.NewClient[v1.TestWebhookRequest, v1.TestWebhookResponse](
			httpClient,
			baseURL+ProjectServiceTestWebhookProcedure,
			connect.WithSchema(projectServiceMethods.ByName("TestWebhook")),
			connect.WithClientOptions(opts...),
		),
	}
}

// projectServiceClient implements ProjectServiceClient.
type projectServiceClient struct {
	getProject        *connect.Client[v1.GetProjectRequest, v1.Project]
	listProjects      *connect.Client[v1.ListProjectsRequest, v1.ListProjectsResponse]
	searchProjects    *connect.Client[v1.SearchProjectsRequest, v1.SearchProjectsResponse]
	createProject     *connect.Client[v1.CreateProjectRequest, v1.Project]
	updateProject     *connect.Client[v1.UpdateProjectRequest, v1.Project]
	deleteProject     *connect.Client[v1.DeleteProjectRequest, emptypb.Empty]
	undeleteProject   *connect.Client[v1.UndeleteProjectRequest, v1.Project]
	getIamPolicy      *connect.Client[v1.GetIamPolicyRequest, v1.IamPolicy]
	batchGetIamPolicy *connect.Client[v1.BatchGetIamPolicyRequest, v1.BatchGetIamPolicyResponse]
	setIamPolicy      *connect.Client[v1.SetIamPolicyRequest, v1.IamPolicy]
	addWebhook        *connect.Client[v1.AddWebhookRequest, v1.Project]
	updateWebhook     *connect.Client[v1.UpdateWebhookRequest, v1.Project]
	removeWebhook     *connect.Client[v1.RemoveWebhookRequest, v1.Project]
	testWebhook       *connect.Client[v1.TestWebhookRequest, v1.TestWebhookResponse]
}

// GetProject calls bytebase.v1.ProjectService.GetProject.
func (c *projectServiceClient) GetProject(ctx context.Context, req *connect.Request[v1.GetProjectRequest]) (*connect.Response[v1.Project], error) {
	return c.getProject.CallUnary(ctx, req)
}

// ListProjects calls bytebase.v1.ProjectService.ListProjects.
func (c *projectServiceClient) ListProjects(ctx context.Context, req *connect.Request[v1.ListProjectsRequest]) (*connect.Response[v1.ListProjectsResponse], error) {
	return c.listProjects.CallUnary(ctx, req)
}

// SearchProjects calls bytebase.v1.ProjectService.SearchProjects.
func (c *projectServiceClient) SearchProjects(ctx context.Context, req *connect.Request[v1.SearchProjectsRequest]) (*connect.Response[v1.SearchProjectsResponse], error) {
	return c.searchProjects.CallUnary(ctx, req)
}

// CreateProject calls bytebase.v1.ProjectService.CreateProject.
func (c *projectServiceClient) CreateProject(ctx context.Context, req *connect.Request[v1.CreateProjectRequest]) (*connect.Response[v1.Project], error) {
	return c.createProject.CallUnary(ctx, req)
}

// UpdateProject calls bytebase.v1.ProjectService.UpdateProject.
func (c *projectServiceClient) UpdateProject(ctx context.Context, req *connect.Request[v1.UpdateProjectRequest]) (*connect.Response[v1.Project], error) {
	return c.updateProject.CallUnary(ctx, req)
}

// DeleteProject calls bytebase.v1.ProjectService.DeleteProject.
func (c *projectServiceClient) DeleteProject(ctx context.Context, req *connect.Request[v1.DeleteProjectRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteProject.CallUnary(ctx, req)
}

// UndeleteProject calls bytebase.v1.ProjectService.UndeleteProject.
func (c *projectServiceClient) UndeleteProject(ctx context.Context, req *connect.Request[v1.UndeleteProjectRequest]) (*connect.Response[v1.Project], error) {
	return c.undeleteProject.CallUnary(ctx, req)
}

// GetIamPolicy calls bytebase.v1.ProjectService.GetIamPolicy.
func (c *projectServiceClient) GetIamPolicy(ctx context.Context, req *connect.Request[v1.GetIamPolicyRequest]) (*connect.Response[v1.IamPolicy], error) {
	return c.getIamPolicy.CallUnary(ctx, req)
}

// BatchGetIamPolicy calls bytebase.v1.ProjectService.BatchGetIamPolicy.
func (c *projectServiceClient) BatchGetIamPolicy(ctx context.Context, req *connect.Request[v1.BatchGetIamPolicyRequest]) (*connect.Response[v1.BatchGetIamPolicyResponse], error) {
	return c.batchGetIamPolicy.CallUnary(ctx, req)
}

// SetIamPolicy calls bytebase.v1.ProjectService.SetIamPolicy.
func (c *projectServiceClient) SetIamPolicy(ctx context.Context, req *connect.Request[v1.SetIamPolicyRequest]) (*connect.Response[v1.IamPolicy], error) {
	return c.setIamPolicy.CallUnary(ctx, req)
}

// AddWebhook calls bytebase.v1.ProjectService.AddWebhook.
func (c *projectServiceClient) AddWebhook(ctx context.Context, req *connect.Request[v1.AddWebhookRequest]) (*connect.Response[v1.Project], error) {
	return c.addWebhook.CallUnary(ctx, req)
}

// UpdateWebhook calls bytebase.v1.ProjectService.UpdateWebhook.
func (c *projectServiceClient) UpdateWebhook(ctx context.Context, req *connect.Request[v1.UpdateWebhookRequest]) (*connect.Response[v1.Project], error) {
	return c.updateWebhook.CallUnary(ctx, req)
}

// RemoveWebhook calls bytebase.v1.ProjectService.RemoveWebhook.
func (c *projectServiceClient) RemoveWebhook(ctx context.Context, req *connect.Request[v1.RemoveWebhookRequest]) (*connect.Response[v1.Project], error) {
	return c.removeWebhook.CallUnary(ctx, req)
}

// TestWebhook calls bytebase.v1.ProjectService.TestWebhook.
func (c *projectServiceClient) TestWebhook(ctx context.Context, req *connect.Request[v1.TestWebhookRequest]) (*connect.Response[v1.TestWebhookResponse], error) {
	return c.testWebhook.CallUnary(ctx, req)
}

// ProjectServiceHandler is an implementation of the bytebase.v1.ProjectService service.
type ProjectServiceHandler interface {
	// GetProject retrieves a project by name.
	// Users with "bb.projects.get" permission on the workspace or the project owner can access this method.
	GetProject(context.Context, *connect.Request[v1.GetProjectRequest]) (*connect.Response[v1.Project], error)
	ListProjects(context.Context, *connect.Request[v1.ListProjectsRequest]) (*connect.Response[v1.ListProjectsResponse], error)
	SearchProjects(context.Context, *connect.Request[v1.SearchProjectsRequest]) (*connect.Response[v1.SearchProjectsResponse], error)
	CreateProject(context.Context, *connect.Request[v1.CreateProjectRequest]) (*connect.Response[v1.Project], error)
	UpdateProject(context.Context, *connect.Request[v1.UpdateProjectRequest]) (*connect.Response[v1.Project], error)
	DeleteProject(context.Context, *connect.Request[v1.DeleteProjectRequest]) (*connect.Response[emptypb.Empty], error)
	UndeleteProject(context.Context, *connect.Request[v1.UndeleteProjectRequest]) (*connect.Response[v1.Project], error)
	GetIamPolicy(context.Context, *connect.Request[v1.GetIamPolicyRequest]) (*connect.Response[v1.IamPolicy], error)
	// Deprecated.
	BatchGetIamPolicy(context.Context, *connect.Request[v1.BatchGetIamPolicyRequest]) (*connect.Response[v1.BatchGetIamPolicyResponse], error)
	SetIamPolicy(context.Context, *connect.Request[v1.SetIamPolicyRequest]) (*connect.Response[v1.IamPolicy], error)
	AddWebhook(context.Context, *connect.Request[v1.AddWebhookRequest]) (*connect.Response[v1.Project], error)
	UpdateWebhook(context.Context, *connect.Request[v1.UpdateWebhookRequest]) (*connect.Response[v1.Project], error)
	RemoveWebhook(context.Context, *connect.Request[v1.RemoveWebhookRequest]) (*connect.Response[v1.Project], error)
	TestWebhook(context.Context, *connect.Request[v1.TestWebhookRequest]) (*connect.Response[v1.TestWebhookResponse], error)
}

// NewProjectServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewProjectServiceHandler(svc ProjectServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	projectServiceMethods := v1.File_v1_project_service_proto.Services().ByName("ProjectService").Methods()
	projectServiceGetProjectHandler := connect.NewUnaryHandler(
		ProjectServiceGetProjectProcedure,
		svc.GetProject,
		connect.WithSchema(projectServiceMethods.ByName("GetProject")),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceListProjectsHandler := connect.NewUnaryHandler(
		ProjectServiceListProjectsProcedure,
		svc.ListProjects,
		connect.WithSchema(projectServiceMethods.ByName("ListProjects")),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceSearchProjectsHandler := connect.NewUnaryHandler(
		ProjectServiceSearchProjectsProcedure,
		svc.SearchProjects,
		connect.WithSchema(projectServiceMethods.ByName("SearchProjects")),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceCreateProjectHandler := connect.NewUnaryHandler(
		ProjectServiceCreateProjectProcedure,
		svc.CreateProject,
		connect.WithSchema(projectServiceMethods.ByName("CreateProject")),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceUpdateProjectHandler := connect.NewUnaryHandler(
		ProjectServiceUpdateProjectProcedure,
		svc.UpdateProject,
		connect.WithSchema(projectServiceMethods.ByName("UpdateProject")),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceDeleteProjectHandler := connect.NewUnaryHandler(
		ProjectServiceDeleteProjectProcedure,
		svc.DeleteProject,
		connect.WithSchema(projectServiceMethods.ByName("DeleteProject")),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceUndeleteProjectHandler := connect.NewUnaryHandler(
		ProjectServiceUndeleteProjectProcedure,
		svc.UndeleteProject,
		connect.WithSchema(projectServiceMethods.ByName("UndeleteProject")),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceGetIamPolicyHandler := connect.NewUnaryHandler(
		ProjectServiceGetIamPolicyProcedure,
		svc.GetIamPolicy,
		connect.WithSchema(projectServiceMethods.ByName("GetIamPolicy")),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceBatchGetIamPolicyHandler := connect.NewUnaryHandler(
		ProjectServiceBatchGetIamPolicyProcedure,
		svc.BatchGetIamPolicy,
		connect.WithSchema(projectServiceMethods.ByName("BatchGetIamPolicy")),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceSetIamPolicyHandler := connect.NewUnaryHandler(
		ProjectServiceSetIamPolicyProcedure,
		svc.SetIamPolicy,
		connect.WithSchema(projectServiceMethods.ByName("SetIamPolicy")),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceAddWebhookHandler := connect.NewUnaryHandler(
		ProjectServiceAddWebhookProcedure,
		svc.AddWebhook,
		connect.WithSchema(projectServiceMethods.ByName("AddWebhook")),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceUpdateWebhookHandler := connect.NewUnaryHandler(
		ProjectServiceUpdateWebhookProcedure,
		svc.UpdateWebhook,
		connect.WithSchema(projectServiceMethods.ByName("UpdateWebhook")),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceRemoveWebhookHandler := connect.NewUnaryHandler(
		ProjectServiceRemoveWebhookProcedure,
		svc.RemoveWebhook,
		connect.WithSchema(projectServiceMethods.ByName("RemoveWebhook")),
		connect.WithHandlerOptions(opts...),
	)
	projectServiceTestWebhookHandler := connect.NewUnaryHandler(
		ProjectServiceTestWebhookProcedure,
		svc.TestWebhook,
		connect.WithSchema(projectServiceMethods.ByName("TestWebhook")),
		connect.WithHandlerOptions(opts...),
	)
	return "/bytebase.v1.ProjectService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ProjectServiceGetProjectProcedure:
			projectServiceGetProjectHandler.ServeHTTP(w, r)
		case ProjectServiceListProjectsProcedure:
			projectServiceListProjectsHandler.ServeHTTP(w, r)
		case ProjectServiceSearchProjectsProcedure:
			projectServiceSearchProjectsHandler.ServeHTTP(w, r)
		case ProjectServiceCreateProjectProcedure:
			projectServiceCreateProjectHandler.ServeHTTP(w, r)
		case ProjectServiceUpdateProjectProcedure:
			projectServiceUpdateProjectHandler.ServeHTTP(w, r)
		case ProjectServiceDeleteProjectProcedure:
			projectServiceDeleteProjectHandler.ServeHTTP(w, r)
		case ProjectServiceUndeleteProjectProcedure:
			projectServiceUndeleteProjectHandler.ServeHTTP(w, r)
		case ProjectServiceGetIamPolicyProcedure:
			projectServiceGetIamPolicyHandler.ServeHTTP(w, r)
		case ProjectServiceBatchGetIamPolicyProcedure:
			projectServiceBatchGetIamPolicyHandler.ServeHTTP(w, r)
		case ProjectServiceSetIamPolicyProcedure:
			projectServiceSetIamPolicyHandler.ServeHTTP(w, r)
		case ProjectServiceAddWebhookProcedure:
			projectServiceAddWebhookHandler.ServeHTTP(w, r)
		case ProjectServiceUpdateWebhookProcedure:
			projectServiceUpdateWebhookHandler.ServeHTTP(w, r)
		case ProjectServiceRemoveWebhookProcedure:
			projectServiceRemoveWebhookHandler.ServeHTTP(w, r)
		case ProjectServiceTestWebhookProcedure:
			projectServiceTestWebhookHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedProjectServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedProjectServiceHandler struct{}

func (UnimplementedProjectServiceHandler) GetProject(context.Context, *connect.Request[v1.GetProjectRequest]) (*connect.Response[v1.Project], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.ProjectService.GetProject is not implemented"))
}

func (UnimplementedProjectServiceHandler) ListProjects(context.Context, *connect.Request[v1.ListProjectsRequest]) (*connect.Response[v1.ListProjectsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.ProjectService.ListProjects is not implemented"))
}

func (UnimplementedProjectServiceHandler) SearchProjects(context.Context, *connect.Request[v1.SearchProjectsRequest]) (*connect.Response[v1.SearchProjectsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.ProjectService.SearchProjects is not implemented"))
}

func (UnimplementedProjectServiceHandler) CreateProject(context.Context, *connect.Request[v1.CreateProjectRequest]) (*connect.Response[v1.Project], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.ProjectService.CreateProject is not implemented"))
}

func (UnimplementedProjectServiceHandler) UpdateProject(context.Context, *connect.Request[v1.UpdateProjectRequest]) (*connect.Response[v1.Project], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.ProjectService.UpdateProject is not implemented"))
}

func (UnimplementedProjectServiceHandler) DeleteProject(context.Context, *connect.Request[v1.DeleteProjectRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.ProjectService.DeleteProject is not implemented"))
}

func (UnimplementedProjectServiceHandler) UndeleteProject(context.Context, *connect.Request[v1.UndeleteProjectRequest]) (*connect.Response[v1.Project], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.ProjectService.UndeleteProject is not implemented"))
}

func (UnimplementedProjectServiceHandler) GetIamPolicy(context.Context, *connect.Request[v1.GetIamPolicyRequest]) (*connect.Response[v1.IamPolicy], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.ProjectService.GetIamPolicy is not implemented"))
}

func (UnimplementedProjectServiceHandler) BatchGetIamPolicy(context.Context, *connect.Request[v1.BatchGetIamPolicyRequest]) (*connect.Response[v1.BatchGetIamPolicyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.ProjectService.BatchGetIamPolicy is not implemented"))
}

func (UnimplementedProjectServiceHandler) SetIamPolicy(context.Context, *connect.Request[v1.SetIamPolicyRequest]) (*connect.Response[v1.IamPolicy], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.ProjectService.SetIamPolicy is not implemented"))
}

func (UnimplementedProjectServiceHandler) AddWebhook(context.Context, *connect.Request[v1.AddWebhookRequest]) (*connect.Response[v1.Project], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.ProjectService.AddWebhook is not implemented"))
}

func (UnimplementedProjectServiceHandler) UpdateWebhook(context.Context, *connect.Request[v1.UpdateWebhookRequest]) (*connect.Response[v1.Project], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.ProjectService.UpdateWebhook is not implemented"))
}

func (UnimplementedProjectServiceHandler) RemoveWebhook(context.Context, *connect.Request[v1.RemoveWebhookRequest]) (*connect.Response[v1.Project], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.ProjectService.RemoveWebhook is not implemented"))
}

func (UnimplementedProjectServiceHandler) TestWebhook(context.Context, *connect.Request[v1.TestWebhookRequest]) (*connect.Response[v1.TestWebhookResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.ProjectService.TestWebhook is not implemented"))
}
