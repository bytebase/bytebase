// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/worksheet_service.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/bytebase/bytebase/proto/generated-go/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// WorksheetServiceName is the fully-qualified name of the WorksheetService service.
	WorksheetServiceName = "bytebase.v1.WorksheetService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// WorksheetServiceCreateWorksheetProcedure is the fully-qualified name of the WorksheetService's
	// CreateWorksheet RPC.
	WorksheetServiceCreateWorksheetProcedure = "/bytebase.v1.WorksheetService/CreateWorksheet"
	// WorksheetServiceGetWorksheetProcedure is the fully-qualified name of the WorksheetService's
	// GetWorksheet RPC.
	WorksheetServiceGetWorksheetProcedure = "/bytebase.v1.WorksheetService/GetWorksheet"
	// WorksheetServiceSearchWorksheetsProcedure is the fully-qualified name of the WorksheetService's
	// SearchWorksheets RPC.
	WorksheetServiceSearchWorksheetsProcedure = "/bytebase.v1.WorksheetService/SearchWorksheets"
	// WorksheetServiceUpdateWorksheetProcedure is the fully-qualified name of the WorksheetService's
	// UpdateWorksheet RPC.
	WorksheetServiceUpdateWorksheetProcedure = "/bytebase.v1.WorksheetService/UpdateWorksheet"
	// WorksheetServiceUpdateWorksheetOrganizerProcedure is the fully-qualified name of the
	// WorksheetService's UpdateWorksheetOrganizer RPC.
	WorksheetServiceUpdateWorksheetOrganizerProcedure = "/bytebase.v1.WorksheetService/UpdateWorksheetOrganizer"
	// WorksheetServiceDeleteWorksheetProcedure is the fully-qualified name of the WorksheetService's
	// DeleteWorksheet RPC.
	WorksheetServiceDeleteWorksheetProcedure = "/bytebase.v1.WorksheetService/DeleteWorksheet"
)

// WorksheetServiceClient is a client for the bytebase.v1.WorksheetService service.
type WorksheetServiceClient interface {
	// Create a personal worksheet used in SQL Editor.
	CreateWorksheet(context.Context, *connect.Request[v1.CreateWorksheetRequest]) (*connect.Response[v1.Worksheet], error)
	// Get a worksheet by name.
	// The users can access this method if,
	// - they are the creator of the worksheet;
	// - they have bb.worksheets.get permission on the workspace;
	// - the sheet is shared with them with PROJECT_READ and PROJECT_WRITE visibility, and they have bb.projects.get permission on the project.
	GetWorksheet(context.Context, *connect.Request[v1.GetWorksheetRequest]) (*connect.Response[v1.Worksheet], error)
	// Search for worksheets.
	// This is used for finding my worksheets or worksheets shared by other people.
	// The sheet accessibility is the same as GetWorksheet().
	SearchWorksheets(context.Context, *connect.Request[v1.SearchWorksheetsRequest]) (*connect.Response[v1.SearchWorksheetsResponse], error)
	// Update a worksheet.
	// The users can access this method if,
	// - they are the creator of the worksheet;
	// - they have bb.worksheets.manage permission on the workspace;
	// - the sheet is shared with them with PROJECT_WRITE visibility, and they have bb.projects.get permission on the project.
	UpdateWorksheet(context.Context, *connect.Request[v1.UpdateWorksheetRequest]) (*connect.Response[v1.Worksheet], error)
	// Update the organizer of a worksheet.
	// The access is the same as UpdateWorksheet method.
	UpdateWorksheetOrganizer(context.Context, *connect.Request[v1.UpdateWorksheetOrganizerRequest]) (*connect.Response[v1.WorksheetOrganizer], error)
	// Delete a worksheet.
	// The access is the same as UpdateWorksheet method.
	DeleteWorksheet(context.Context, *connect.Request[v1.DeleteWorksheetRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewWorksheetServiceClient constructs a client for the bytebase.v1.WorksheetService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewWorksheetServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) WorksheetServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	worksheetServiceMethods := v1.File_v1_worksheet_service_proto.Services().ByName("WorksheetService").Methods()
	return &worksheetServiceClient{
		createWorksheet: connect.NewClient[v1.CreateWorksheetRequest, v1.Worksheet](
			httpClient,
			baseURL+WorksheetServiceCreateWorksheetProcedure,
			connect.WithSchema(worksheetServiceMethods.ByName("CreateWorksheet")),
			connect.WithClientOptions(opts...),
		),
		getWorksheet: connect.NewClient[v1.GetWorksheetRequest, v1.Worksheet](
			httpClient,
			baseURL+WorksheetServiceGetWorksheetProcedure,
			connect.WithSchema(worksheetServiceMethods.ByName("GetWorksheet")),
			connect.WithClientOptions(opts...),
		),
		searchWorksheets: connect.NewClient[v1.SearchWorksheetsRequest, v1.SearchWorksheetsResponse](
			httpClient,
			baseURL+WorksheetServiceSearchWorksheetsProcedure,
			connect.WithSchema(worksheetServiceMethods.ByName("SearchWorksheets")),
			connect.WithClientOptions(opts...),
		),
		updateWorksheet: connect.NewClient[v1.UpdateWorksheetRequest, v1.Worksheet](
			httpClient,
			baseURL+WorksheetServiceUpdateWorksheetProcedure,
			connect.WithSchema(worksheetServiceMethods.ByName("UpdateWorksheet")),
			connect.WithClientOptions(opts...),
		),
		updateWorksheetOrganizer: connect.NewClient[v1.UpdateWorksheetOrganizerRequest, v1.WorksheetOrganizer](
			httpClient,
			baseURL+WorksheetServiceUpdateWorksheetOrganizerProcedure,
			connect.WithSchema(worksheetServiceMethods.ByName("UpdateWorksheetOrganizer")),
			connect.WithClientOptions(opts...),
		),
		deleteWorksheet: connect.NewClient[v1.DeleteWorksheetRequest, emptypb.Empty](
			httpClient,
			baseURL+WorksheetServiceDeleteWorksheetProcedure,
			connect.WithSchema(worksheetServiceMethods.ByName("DeleteWorksheet")),
			connect.WithClientOptions(opts...),
		),
	}
}

// worksheetServiceClient implements WorksheetServiceClient.
type worksheetServiceClient struct {
	createWorksheet          *connect.Client[v1.CreateWorksheetRequest, v1.Worksheet]
	getWorksheet             *connect.Client[v1.GetWorksheetRequest, v1.Worksheet]
	searchWorksheets         *connect.Client[v1.SearchWorksheetsRequest, v1.SearchWorksheetsResponse]
	updateWorksheet          *connect.Client[v1.UpdateWorksheetRequest, v1.Worksheet]
	updateWorksheetOrganizer *connect.Client[v1.UpdateWorksheetOrganizerRequest, v1.WorksheetOrganizer]
	deleteWorksheet          *connect.Client[v1.DeleteWorksheetRequest, emptypb.Empty]
}

// CreateWorksheet calls bytebase.v1.WorksheetService.CreateWorksheet.
func (c *worksheetServiceClient) CreateWorksheet(ctx context.Context, req *connect.Request[v1.CreateWorksheetRequest]) (*connect.Response[v1.Worksheet], error) {
	return c.createWorksheet.CallUnary(ctx, req)
}

// GetWorksheet calls bytebase.v1.WorksheetService.GetWorksheet.
func (c *worksheetServiceClient) GetWorksheet(ctx context.Context, req *connect.Request[v1.GetWorksheetRequest]) (*connect.Response[v1.Worksheet], error) {
	return c.getWorksheet.CallUnary(ctx, req)
}

// SearchWorksheets calls bytebase.v1.WorksheetService.SearchWorksheets.
func (c *worksheetServiceClient) SearchWorksheets(ctx context.Context, req *connect.Request[v1.SearchWorksheetsRequest]) (*connect.Response[v1.SearchWorksheetsResponse], error) {
	return c.searchWorksheets.CallUnary(ctx, req)
}

// UpdateWorksheet calls bytebase.v1.WorksheetService.UpdateWorksheet.
func (c *worksheetServiceClient) UpdateWorksheet(ctx context.Context, req *connect.Request[v1.UpdateWorksheetRequest]) (*connect.Response[v1.Worksheet], error) {
	return c.updateWorksheet.CallUnary(ctx, req)
}

// UpdateWorksheetOrganizer calls bytebase.v1.WorksheetService.UpdateWorksheetOrganizer.
func (c *worksheetServiceClient) UpdateWorksheetOrganizer(ctx context.Context, req *connect.Request[v1.UpdateWorksheetOrganizerRequest]) (*connect.Response[v1.WorksheetOrganizer], error) {
	return c.updateWorksheetOrganizer.CallUnary(ctx, req)
}

// DeleteWorksheet calls bytebase.v1.WorksheetService.DeleteWorksheet.
func (c *worksheetServiceClient) DeleteWorksheet(ctx context.Context, req *connect.Request[v1.DeleteWorksheetRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteWorksheet.CallUnary(ctx, req)
}

// WorksheetServiceHandler is an implementation of the bytebase.v1.WorksheetService service.
type WorksheetServiceHandler interface {
	// Create a personal worksheet used in SQL Editor.
	CreateWorksheet(context.Context, *connect.Request[v1.CreateWorksheetRequest]) (*connect.Response[v1.Worksheet], error)
	// Get a worksheet by name.
	// The users can access this method if,
	// - they are the creator of the worksheet;
	// - they have bb.worksheets.get permission on the workspace;
	// - the sheet is shared with them with PROJECT_READ and PROJECT_WRITE visibility, and they have bb.projects.get permission on the project.
	GetWorksheet(context.Context, *connect.Request[v1.GetWorksheetRequest]) (*connect.Response[v1.Worksheet], error)
	// Search for worksheets.
	// This is used for finding my worksheets or worksheets shared by other people.
	// The sheet accessibility is the same as GetWorksheet().
	SearchWorksheets(context.Context, *connect.Request[v1.SearchWorksheetsRequest]) (*connect.Response[v1.SearchWorksheetsResponse], error)
	// Update a worksheet.
	// The users can access this method if,
	// - they are the creator of the worksheet;
	// - they have bb.worksheets.manage permission on the workspace;
	// - the sheet is shared with them with PROJECT_WRITE visibility, and they have bb.projects.get permission on the project.
	UpdateWorksheet(context.Context, *connect.Request[v1.UpdateWorksheetRequest]) (*connect.Response[v1.Worksheet], error)
	// Update the organizer of a worksheet.
	// The access is the same as UpdateWorksheet method.
	UpdateWorksheetOrganizer(context.Context, *connect.Request[v1.UpdateWorksheetOrganizerRequest]) (*connect.Response[v1.WorksheetOrganizer], error)
	// Delete a worksheet.
	// The access is the same as UpdateWorksheet method.
	DeleteWorksheet(context.Context, *connect.Request[v1.DeleteWorksheetRequest]) (*connect.Response[emptypb.Empty], error)
}

// NewWorksheetServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewWorksheetServiceHandler(svc WorksheetServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	worksheetServiceMethods := v1.File_v1_worksheet_service_proto.Services().ByName("WorksheetService").Methods()
	worksheetServiceCreateWorksheetHandler := connect.NewUnaryHandler(
		WorksheetServiceCreateWorksheetProcedure,
		svc.CreateWorksheet,
		connect.WithSchema(worksheetServiceMethods.ByName("CreateWorksheet")),
		connect.WithHandlerOptions(opts...),
	)
	worksheetServiceGetWorksheetHandler := connect.NewUnaryHandler(
		WorksheetServiceGetWorksheetProcedure,
		svc.GetWorksheet,
		connect.WithSchema(worksheetServiceMethods.ByName("GetWorksheet")),
		connect.WithHandlerOptions(opts...),
	)
	worksheetServiceSearchWorksheetsHandler := connect.NewUnaryHandler(
		WorksheetServiceSearchWorksheetsProcedure,
		svc.SearchWorksheets,
		connect.WithSchema(worksheetServiceMethods.ByName("SearchWorksheets")),
		connect.WithHandlerOptions(opts...),
	)
	worksheetServiceUpdateWorksheetHandler := connect.NewUnaryHandler(
		WorksheetServiceUpdateWorksheetProcedure,
		svc.UpdateWorksheet,
		connect.WithSchema(worksheetServiceMethods.ByName("UpdateWorksheet")),
		connect.WithHandlerOptions(opts...),
	)
	worksheetServiceUpdateWorksheetOrganizerHandler := connect.NewUnaryHandler(
		WorksheetServiceUpdateWorksheetOrganizerProcedure,
		svc.UpdateWorksheetOrganizer,
		connect.WithSchema(worksheetServiceMethods.ByName("UpdateWorksheetOrganizer")),
		connect.WithHandlerOptions(opts...),
	)
	worksheetServiceDeleteWorksheetHandler := connect.NewUnaryHandler(
		WorksheetServiceDeleteWorksheetProcedure,
		svc.DeleteWorksheet,
		connect.WithSchema(worksheetServiceMethods.ByName("DeleteWorksheet")),
		connect.WithHandlerOptions(opts...),
	)
	return "/bytebase.v1.WorksheetService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case WorksheetServiceCreateWorksheetProcedure:
			worksheetServiceCreateWorksheetHandler.ServeHTTP(w, r)
		case WorksheetServiceGetWorksheetProcedure:
			worksheetServiceGetWorksheetHandler.ServeHTTP(w, r)
		case WorksheetServiceSearchWorksheetsProcedure:
			worksheetServiceSearchWorksheetsHandler.ServeHTTP(w, r)
		case WorksheetServiceUpdateWorksheetProcedure:
			worksheetServiceUpdateWorksheetHandler.ServeHTTP(w, r)
		case WorksheetServiceUpdateWorksheetOrganizerProcedure:
			worksheetServiceUpdateWorksheetOrganizerHandler.ServeHTTP(w, r)
		case WorksheetServiceDeleteWorksheetProcedure:
			worksheetServiceDeleteWorksheetHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedWorksheetServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedWorksheetServiceHandler struct{}

func (UnimplementedWorksheetServiceHandler) CreateWorksheet(context.Context, *connect.Request[v1.CreateWorksheetRequest]) (*connect.Response[v1.Worksheet], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.WorksheetService.CreateWorksheet is not implemented"))
}

func (UnimplementedWorksheetServiceHandler) GetWorksheet(context.Context, *connect.Request[v1.GetWorksheetRequest]) (*connect.Response[v1.Worksheet], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.WorksheetService.GetWorksheet is not implemented"))
}

func (UnimplementedWorksheetServiceHandler) SearchWorksheets(context.Context, *connect.Request[v1.SearchWorksheetsRequest]) (*connect.Response[v1.SearchWorksheetsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.WorksheetService.SearchWorksheets is not implemented"))
}

func (UnimplementedWorksheetServiceHandler) UpdateWorksheet(context.Context, *connect.Request[v1.UpdateWorksheetRequest]) (*connect.Response[v1.Worksheet], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.WorksheetService.UpdateWorksheet is not implemented"))
}

func (UnimplementedWorksheetServiceHandler) UpdateWorksheetOrganizer(context.Context, *connect.Request[v1.UpdateWorksheetOrganizerRequest]) (*connect.Response[v1.WorksheetOrganizer], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.WorksheetService.UpdateWorksheetOrganizer is not implemented"))
}

func (UnimplementedWorksheetServiceHandler) DeleteWorksheet(context.Context, *connect.Request[v1.DeleteWorksheetRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.WorksheetService.DeleteWorksheet is not implemented"))
}
