// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/instance_service.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/bytebase/bytebase/proto/generated-go/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// InstanceServiceName is the fully-qualified name of the InstanceService service.
	InstanceServiceName = "bytebase.v1.InstanceService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// InstanceServiceGetInstanceProcedure is the fully-qualified name of the InstanceService's
	// GetInstance RPC.
	InstanceServiceGetInstanceProcedure = "/bytebase.v1.InstanceService/GetInstance"
	// InstanceServiceListInstancesProcedure is the fully-qualified name of the InstanceService's
	// ListInstances RPC.
	InstanceServiceListInstancesProcedure = "/bytebase.v1.InstanceService/ListInstances"
	// InstanceServiceCreateInstanceProcedure is the fully-qualified name of the InstanceService's
	// CreateInstance RPC.
	InstanceServiceCreateInstanceProcedure = "/bytebase.v1.InstanceService/CreateInstance"
	// InstanceServiceUpdateInstanceProcedure is the fully-qualified name of the InstanceService's
	// UpdateInstance RPC.
	InstanceServiceUpdateInstanceProcedure = "/bytebase.v1.InstanceService/UpdateInstance"
	// InstanceServiceDeleteInstanceProcedure is the fully-qualified name of the InstanceService's
	// DeleteInstance RPC.
	InstanceServiceDeleteInstanceProcedure = "/bytebase.v1.InstanceService/DeleteInstance"
	// InstanceServiceUndeleteInstanceProcedure is the fully-qualified name of the InstanceService's
	// UndeleteInstance RPC.
	InstanceServiceUndeleteInstanceProcedure = "/bytebase.v1.InstanceService/UndeleteInstance"
	// InstanceServiceSyncInstanceProcedure is the fully-qualified name of the InstanceService's
	// SyncInstance RPC.
	InstanceServiceSyncInstanceProcedure = "/bytebase.v1.InstanceService/SyncInstance"
	// InstanceServiceListInstanceDatabaseProcedure is the fully-qualified name of the InstanceService's
	// ListInstanceDatabase RPC.
	InstanceServiceListInstanceDatabaseProcedure = "/bytebase.v1.InstanceService/ListInstanceDatabase"
	// InstanceServiceBatchSyncInstancesProcedure is the fully-qualified name of the InstanceService's
	// BatchSyncInstances RPC.
	InstanceServiceBatchSyncInstancesProcedure = "/bytebase.v1.InstanceService/BatchSyncInstances"
	// InstanceServiceBatchUpdateInstancesProcedure is the fully-qualified name of the InstanceService's
	// BatchUpdateInstances RPC.
	InstanceServiceBatchUpdateInstancesProcedure = "/bytebase.v1.InstanceService/BatchUpdateInstances"
	// InstanceServiceAddDataSourceProcedure is the fully-qualified name of the InstanceService's
	// AddDataSource RPC.
	InstanceServiceAddDataSourceProcedure = "/bytebase.v1.InstanceService/AddDataSource"
	// InstanceServiceRemoveDataSourceProcedure is the fully-qualified name of the InstanceService's
	// RemoveDataSource RPC.
	InstanceServiceRemoveDataSourceProcedure = "/bytebase.v1.InstanceService/RemoveDataSource"
	// InstanceServiceUpdateDataSourceProcedure is the fully-qualified name of the InstanceService's
	// UpdateDataSource RPC.
	InstanceServiceUpdateDataSourceProcedure = "/bytebase.v1.InstanceService/UpdateDataSource"
)

// InstanceServiceClient is a client for the bytebase.v1.InstanceService service.
type InstanceServiceClient interface {
	GetInstance(context.Context, *connect.Request[v1.GetInstanceRequest]) (*connect.Response[v1.Instance], error)
	ListInstances(context.Context, *connect.Request[v1.ListInstancesRequest]) (*connect.Response[v1.ListInstancesResponse], error)
	CreateInstance(context.Context, *connect.Request[v1.CreateInstanceRequest]) (*connect.Response[v1.Instance], error)
	UpdateInstance(context.Context, *connect.Request[v1.UpdateInstanceRequest]) (*connect.Response[v1.Instance], error)
	DeleteInstance(context.Context, *connect.Request[v1.DeleteInstanceRequest]) (*connect.Response[emptypb.Empty], error)
	UndeleteInstance(context.Context, *connect.Request[v1.UndeleteInstanceRequest]) (*connect.Response[v1.Instance], error)
	SyncInstance(context.Context, *connect.Request[v1.SyncInstanceRequest]) (*connect.Response[v1.SyncInstanceResponse], error)
	ListInstanceDatabase(context.Context, *connect.Request[v1.ListInstanceDatabaseRequest]) (*connect.Response[v1.ListInstanceDatabaseResponse], error)
	BatchSyncInstances(context.Context, *connect.Request[v1.BatchSyncInstancesRequest]) (*connect.Response[v1.BatchSyncInstancesResponse], error)
	BatchUpdateInstances(context.Context, *connect.Request[v1.BatchUpdateInstancesRequest]) (*connect.Response[v1.BatchUpdateInstancesResponse], error)
	AddDataSource(context.Context, *connect.Request[v1.AddDataSourceRequest]) (*connect.Response[v1.Instance], error)
	RemoveDataSource(context.Context, *connect.Request[v1.RemoveDataSourceRequest]) (*connect.Response[v1.Instance], error)
	UpdateDataSource(context.Context, *connect.Request[v1.UpdateDataSourceRequest]) (*connect.Response[v1.Instance], error)
}

// NewInstanceServiceClient constructs a client for the bytebase.v1.InstanceService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewInstanceServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) InstanceServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	instanceServiceMethods := v1.File_v1_instance_service_proto.Services().ByName("InstanceService").Methods()
	return &instanceServiceClient{
		getInstance: connect.NewClient[v1.GetInstanceRequest, v1.Instance](
			httpClient,
			baseURL+InstanceServiceGetInstanceProcedure,
			connect.WithSchema(instanceServiceMethods.ByName("GetInstance")),
			connect.WithClientOptions(opts...),
		),
		listInstances: connect.NewClient[v1.ListInstancesRequest, v1.ListInstancesResponse](
			httpClient,
			baseURL+InstanceServiceListInstancesProcedure,
			connect.WithSchema(instanceServiceMethods.ByName("ListInstances")),
			connect.WithClientOptions(opts...),
		),
		createInstance: connect.NewClient[v1.CreateInstanceRequest, v1.Instance](
			httpClient,
			baseURL+InstanceServiceCreateInstanceProcedure,
			connect.WithSchema(instanceServiceMethods.ByName("CreateInstance")),
			connect.WithClientOptions(opts...),
		),
		updateInstance: connect.NewClient[v1.UpdateInstanceRequest, v1.Instance](
			httpClient,
			baseURL+InstanceServiceUpdateInstanceProcedure,
			connect.WithSchema(instanceServiceMethods.ByName("UpdateInstance")),
			connect.WithClientOptions(opts...),
		),
		deleteInstance: connect.NewClient[v1.DeleteInstanceRequest, emptypb.Empty](
			httpClient,
			baseURL+InstanceServiceDeleteInstanceProcedure,
			connect.WithSchema(instanceServiceMethods.ByName("DeleteInstance")),
			connect.WithClientOptions(opts...),
		),
		undeleteInstance: connect.NewClient[v1.UndeleteInstanceRequest, v1.Instance](
			httpClient,
			baseURL+InstanceServiceUndeleteInstanceProcedure,
			connect.WithSchema(instanceServiceMethods.ByName("UndeleteInstance")),
			connect.WithClientOptions(opts...),
		),
		syncInstance: connect.NewClient[v1.SyncInstanceRequest, v1.SyncInstanceResponse](
			httpClient,
			baseURL+InstanceServiceSyncInstanceProcedure,
			connect.WithSchema(instanceServiceMethods.ByName("SyncInstance")),
			connect.WithClientOptions(opts...),
		),
		listInstanceDatabase: connect.NewClient[v1.ListInstanceDatabaseRequest, v1.ListInstanceDatabaseResponse](
			httpClient,
			baseURL+InstanceServiceListInstanceDatabaseProcedure,
			connect.WithSchema(instanceServiceMethods.ByName("ListInstanceDatabase")),
			connect.WithClientOptions(opts...),
		),
		batchSyncInstances: connect.NewClient[v1.BatchSyncInstancesRequest, v1.BatchSyncInstancesResponse](
			httpClient,
			baseURL+InstanceServiceBatchSyncInstancesProcedure,
			connect.WithSchema(instanceServiceMethods.ByName("BatchSyncInstances")),
			connect.WithClientOptions(opts...),
		),
		batchUpdateInstances: connect.NewClient[v1.BatchUpdateInstancesRequest, v1.BatchUpdateInstancesResponse](
			httpClient,
			baseURL+InstanceServiceBatchUpdateInstancesProcedure,
			connect.WithSchema(instanceServiceMethods.ByName("BatchUpdateInstances")),
			connect.WithClientOptions(opts...),
		),
		addDataSource: connect.NewClient[v1.AddDataSourceRequest, v1.Instance](
			httpClient,
			baseURL+InstanceServiceAddDataSourceProcedure,
			connect.WithSchema(instanceServiceMethods.ByName("AddDataSource")),
			connect.WithClientOptions(opts...),
		),
		removeDataSource: connect.NewClient[v1.RemoveDataSourceRequest, v1.Instance](
			httpClient,
			baseURL+InstanceServiceRemoveDataSourceProcedure,
			connect.WithSchema(instanceServiceMethods.ByName("RemoveDataSource")),
			connect.WithClientOptions(opts...),
		),
		updateDataSource: connect.NewClient[v1.UpdateDataSourceRequest, v1.Instance](
			httpClient,
			baseURL+InstanceServiceUpdateDataSourceProcedure,
			connect.WithSchema(instanceServiceMethods.ByName("UpdateDataSource")),
			connect.WithClientOptions(opts...),
		),
	}
}

// instanceServiceClient implements InstanceServiceClient.
type instanceServiceClient struct {
	getInstance          *connect.Client[v1.GetInstanceRequest, v1.Instance]
	listInstances        *connect.Client[v1.ListInstancesRequest, v1.ListInstancesResponse]
	createInstance       *connect.Client[v1.CreateInstanceRequest, v1.Instance]
	updateInstance       *connect.Client[v1.UpdateInstanceRequest, v1.Instance]
	deleteInstance       *connect.Client[v1.DeleteInstanceRequest, emptypb.Empty]
	undeleteInstance     *connect.Client[v1.UndeleteInstanceRequest, v1.Instance]
	syncInstance         *connect.Client[v1.SyncInstanceRequest, v1.SyncInstanceResponse]
	listInstanceDatabase *connect.Client[v1.ListInstanceDatabaseRequest, v1.ListInstanceDatabaseResponse]
	batchSyncInstances   *connect.Client[v1.BatchSyncInstancesRequest, v1.BatchSyncInstancesResponse]
	batchUpdateInstances *connect.Client[v1.BatchUpdateInstancesRequest, v1.BatchUpdateInstancesResponse]
	addDataSource        *connect.Client[v1.AddDataSourceRequest, v1.Instance]
	removeDataSource     *connect.Client[v1.RemoveDataSourceRequest, v1.Instance]
	updateDataSource     *connect.Client[v1.UpdateDataSourceRequest, v1.Instance]
}

// GetInstance calls bytebase.v1.InstanceService.GetInstance.
func (c *instanceServiceClient) GetInstance(ctx context.Context, req *connect.Request[v1.GetInstanceRequest]) (*connect.Response[v1.Instance], error) {
	return c.getInstance.CallUnary(ctx, req)
}

// ListInstances calls bytebase.v1.InstanceService.ListInstances.
func (c *instanceServiceClient) ListInstances(ctx context.Context, req *connect.Request[v1.ListInstancesRequest]) (*connect.Response[v1.ListInstancesResponse], error) {
	return c.listInstances.CallUnary(ctx, req)
}

// CreateInstance calls bytebase.v1.InstanceService.CreateInstance.
func (c *instanceServiceClient) CreateInstance(ctx context.Context, req *connect.Request[v1.CreateInstanceRequest]) (*connect.Response[v1.Instance], error) {
	return c.createInstance.CallUnary(ctx, req)
}

// UpdateInstance calls bytebase.v1.InstanceService.UpdateInstance.
func (c *instanceServiceClient) UpdateInstance(ctx context.Context, req *connect.Request[v1.UpdateInstanceRequest]) (*connect.Response[v1.Instance], error) {
	return c.updateInstance.CallUnary(ctx, req)
}

// DeleteInstance calls bytebase.v1.InstanceService.DeleteInstance.
func (c *instanceServiceClient) DeleteInstance(ctx context.Context, req *connect.Request[v1.DeleteInstanceRequest]) (*connect.Response[emptypb.Empty], error) {
	return c.deleteInstance.CallUnary(ctx, req)
}

// UndeleteInstance calls bytebase.v1.InstanceService.UndeleteInstance.
func (c *instanceServiceClient) UndeleteInstance(ctx context.Context, req *connect.Request[v1.UndeleteInstanceRequest]) (*connect.Response[v1.Instance], error) {
	return c.undeleteInstance.CallUnary(ctx, req)
}

// SyncInstance calls bytebase.v1.InstanceService.SyncInstance.
func (c *instanceServiceClient) SyncInstance(ctx context.Context, req *connect.Request[v1.SyncInstanceRequest]) (*connect.Response[v1.SyncInstanceResponse], error) {
	return c.syncInstance.CallUnary(ctx, req)
}

// ListInstanceDatabase calls bytebase.v1.InstanceService.ListInstanceDatabase.
func (c *instanceServiceClient) ListInstanceDatabase(ctx context.Context, req *connect.Request[v1.ListInstanceDatabaseRequest]) (*connect.Response[v1.ListInstanceDatabaseResponse], error) {
	return c.listInstanceDatabase.CallUnary(ctx, req)
}

// BatchSyncInstances calls bytebase.v1.InstanceService.BatchSyncInstances.
func (c *instanceServiceClient) BatchSyncInstances(ctx context.Context, req *connect.Request[v1.BatchSyncInstancesRequest]) (*connect.Response[v1.BatchSyncInstancesResponse], error) {
	return c.batchSyncInstances.CallUnary(ctx, req)
}

// BatchUpdateInstances calls bytebase.v1.InstanceService.BatchUpdateInstances.
func (c *instanceServiceClient) BatchUpdateInstances(ctx context.Context, req *connect.Request[v1.BatchUpdateInstancesRequest]) (*connect.Response[v1.BatchUpdateInstancesResponse], error) {
	return c.batchUpdateInstances.CallUnary(ctx, req)
}

// AddDataSource calls bytebase.v1.InstanceService.AddDataSource.
func (c *instanceServiceClient) AddDataSource(ctx context.Context, req *connect.Request[v1.AddDataSourceRequest]) (*connect.Response[v1.Instance], error) {
	return c.addDataSource.CallUnary(ctx, req)
}

// RemoveDataSource calls bytebase.v1.InstanceService.RemoveDataSource.
func (c *instanceServiceClient) RemoveDataSource(ctx context.Context, req *connect.Request[v1.RemoveDataSourceRequest]) (*connect.Response[v1.Instance], error) {
	return c.removeDataSource.CallUnary(ctx, req)
}

// UpdateDataSource calls bytebase.v1.InstanceService.UpdateDataSource.
func (c *instanceServiceClient) UpdateDataSource(ctx context.Context, req *connect.Request[v1.UpdateDataSourceRequest]) (*connect.Response[v1.Instance], error) {
	return c.updateDataSource.CallUnary(ctx, req)
}

// InstanceServiceHandler is an implementation of the bytebase.v1.InstanceService service.
type InstanceServiceHandler interface {
	GetInstance(context.Context, *connect.Request[v1.GetInstanceRequest]) (*connect.Response[v1.Instance], error)
	ListInstances(context.Context, *connect.Request[v1.ListInstancesRequest]) (*connect.Response[v1.ListInstancesResponse], error)
	CreateInstance(context.Context, *connect.Request[v1.CreateInstanceRequest]) (*connect.Response[v1.Instance], error)
	UpdateInstance(context.Context, *connect.Request[v1.UpdateInstanceRequest]) (*connect.Response[v1.Instance], error)
	DeleteInstance(context.Context, *connect.Request[v1.DeleteInstanceRequest]) (*connect.Response[emptypb.Empty], error)
	UndeleteInstance(context.Context, *connect.Request[v1.UndeleteInstanceRequest]) (*connect.Response[v1.Instance], error)
	SyncInstance(context.Context, *connect.Request[v1.SyncInstanceRequest]) (*connect.Response[v1.SyncInstanceResponse], error)
	ListInstanceDatabase(context.Context, *connect.Request[v1.ListInstanceDatabaseRequest]) (*connect.Response[v1.ListInstanceDatabaseResponse], error)
	BatchSyncInstances(context.Context, *connect.Request[v1.BatchSyncInstancesRequest]) (*connect.Response[v1.BatchSyncInstancesResponse], error)
	BatchUpdateInstances(context.Context, *connect.Request[v1.BatchUpdateInstancesRequest]) (*connect.Response[v1.BatchUpdateInstancesResponse], error)
	AddDataSource(context.Context, *connect.Request[v1.AddDataSourceRequest]) (*connect.Response[v1.Instance], error)
	RemoveDataSource(context.Context, *connect.Request[v1.RemoveDataSourceRequest]) (*connect.Response[v1.Instance], error)
	UpdateDataSource(context.Context, *connect.Request[v1.UpdateDataSourceRequest]) (*connect.Response[v1.Instance], error)
}

// NewInstanceServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewInstanceServiceHandler(svc InstanceServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	instanceServiceMethods := v1.File_v1_instance_service_proto.Services().ByName("InstanceService").Methods()
	instanceServiceGetInstanceHandler := connect.NewUnaryHandler(
		InstanceServiceGetInstanceProcedure,
		svc.GetInstance,
		connect.WithSchema(instanceServiceMethods.ByName("GetInstance")),
		connect.WithHandlerOptions(opts...),
	)
	instanceServiceListInstancesHandler := connect.NewUnaryHandler(
		InstanceServiceListInstancesProcedure,
		svc.ListInstances,
		connect.WithSchema(instanceServiceMethods.ByName("ListInstances")),
		connect.WithHandlerOptions(opts...),
	)
	instanceServiceCreateInstanceHandler := connect.NewUnaryHandler(
		InstanceServiceCreateInstanceProcedure,
		svc.CreateInstance,
		connect.WithSchema(instanceServiceMethods.ByName("CreateInstance")),
		connect.WithHandlerOptions(opts...),
	)
	instanceServiceUpdateInstanceHandler := connect.NewUnaryHandler(
		InstanceServiceUpdateInstanceProcedure,
		svc.UpdateInstance,
		connect.WithSchema(instanceServiceMethods.ByName("UpdateInstance")),
		connect.WithHandlerOptions(opts...),
	)
	instanceServiceDeleteInstanceHandler := connect.NewUnaryHandler(
		InstanceServiceDeleteInstanceProcedure,
		svc.DeleteInstance,
		connect.WithSchema(instanceServiceMethods.ByName("DeleteInstance")),
		connect.WithHandlerOptions(opts...),
	)
	instanceServiceUndeleteInstanceHandler := connect.NewUnaryHandler(
		InstanceServiceUndeleteInstanceProcedure,
		svc.UndeleteInstance,
		connect.WithSchema(instanceServiceMethods.ByName("UndeleteInstance")),
		connect.WithHandlerOptions(opts...),
	)
	instanceServiceSyncInstanceHandler := connect.NewUnaryHandler(
		InstanceServiceSyncInstanceProcedure,
		svc.SyncInstance,
		connect.WithSchema(instanceServiceMethods.ByName("SyncInstance")),
		connect.WithHandlerOptions(opts...),
	)
	instanceServiceListInstanceDatabaseHandler := connect.NewUnaryHandler(
		InstanceServiceListInstanceDatabaseProcedure,
		svc.ListInstanceDatabase,
		connect.WithSchema(instanceServiceMethods.ByName("ListInstanceDatabase")),
		connect.WithHandlerOptions(opts...),
	)
	instanceServiceBatchSyncInstancesHandler := connect.NewUnaryHandler(
		InstanceServiceBatchSyncInstancesProcedure,
		svc.BatchSyncInstances,
		connect.WithSchema(instanceServiceMethods.ByName("BatchSyncInstances")),
		connect.WithHandlerOptions(opts...),
	)
	instanceServiceBatchUpdateInstancesHandler := connect.NewUnaryHandler(
		InstanceServiceBatchUpdateInstancesProcedure,
		svc.BatchUpdateInstances,
		connect.WithSchema(instanceServiceMethods.ByName("BatchUpdateInstances")),
		connect.WithHandlerOptions(opts...),
	)
	instanceServiceAddDataSourceHandler := connect.NewUnaryHandler(
		InstanceServiceAddDataSourceProcedure,
		svc.AddDataSource,
		connect.WithSchema(instanceServiceMethods.ByName("AddDataSource")),
		connect.WithHandlerOptions(opts...),
	)
	instanceServiceRemoveDataSourceHandler := connect.NewUnaryHandler(
		InstanceServiceRemoveDataSourceProcedure,
		svc.RemoveDataSource,
		connect.WithSchema(instanceServiceMethods.ByName("RemoveDataSource")),
		connect.WithHandlerOptions(opts...),
	)
	instanceServiceUpdateDataSourceHandler := connect.NewUnaryHandler(
		InstanceServiceUpdateDataSourceProcedure,
		svc.UpdateDataSource,
		connect.WithSchema(instanceServiceMethods.ByName("UpdateDataSource")),
		connect.WithHandlerOptions(opts...),
	)
	return "/bytebase.v1.InstanceService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case InstanceServiceGetInstanceProcedure:
			instanceServiceGetInstanceHandler.ServeHTTP(w, r)
		case InstanceServiceListInstancesProcedure:
			instanceServiceListInstancesHandler.ServeHTTP(w, r)
		case InstanceServiceCreateInstanceProcedure:
			instanceServiceCreateInstanceHandler.ServeHTTP(w, r)
		case InstanceServiceUpdateInstanceProcedure:
			instanceServiceUpdateInstanceHandler.ServeHTTP(w, r)
		case InstanceServiceDeleteInstanceProcedure:
			instanceServiceDeleteInstanceHandler.ServeHTTP(w, r)
		case InstanceServiceUndeleteInstanceProcedure:
			instanceServiceUndeleteInstanceHandler.ServeHTTP(w, r)
		case InstanceServiceSyncInstanceProcedure:
			instanceServiceSyncInstanceHandler.ServeHTTP(w, r)
		case InstanceServiceListInstanceDatabaseProcedure:
			instanceServiceListInstanceDatabaseHandler.ServeHTTP(w, r)
		case InstanceServiceBatchSyncInstancesProcedure:
			instanceServiceBatchSyncInstancesHandler.ServeHTTP(w, r)
		case InstanceServiceBatchUpdateInstancesProcedure:
			instanceServiceBatchUpdateInstancesHandler.ServeHTTP(w, r)
		case InstanceServiceAddDataSourceProcedure:
			instanceServiceAddDataSourceHandler.ServeHTTP(w, r)
		case InstanceServiceRemoveDataSourceProcedure:
			instanceServiceRemoveDataSourceHandler.ServeHTTP(w, r)
		case InstanceServiceUpdateDataSourceProcedure:
			instanceServiceUpdateDataSourceHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedInstanceServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedInstanceServiceHandler struct{}

func (UnimplementedInstanceServiceHandler) GetInstance(context.Context, *connect.Request[v1.GetInstanceRequest]) (*connect.Response[v1.Instance], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.InstanceService.GetInstance is not implemented"))
}

func (UnimplementedInstanceServiceHandler) ListInstances(context.Context, *connect.Request[v1.ListInstancesRequest]) (*connect.Response[v1.ListInstancesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.InstanceService.ListInstances is not implemented"))
}

func (UnimplementedInstanceServiceHandler) CreateInstance(context.Context, *connect.Request[v1.CreateInstanceRequest]) (*connect.Response[v1.Instance], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.InstanceService.CreateInstance is not implemented"))
}

func (UnimplementedInstanceServiceHandler) UpdateInstance(context.Context, *connect.Request[v1.UpdateInstanceRequest]) (*connect.Response[v1.Instance], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.InstanceService.UpdateInstance is not implemented"))
}

func (UnimplementedInstanceServiceHandler) DeleteInstance(context.Context, *connect.Request[v1.DeleteInstanceRequest]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.InstanceService.DeleteInstance is not implemented"))
}

func (UnimplementedInstanceServiceHandler) UndeleteInstance(context.Context, *connect.Request[v1.UndeleteInstanceRequest]) (*connect.Response[v1.Instance], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.InstanceService.UndeleteInstance is not implemented"))
}

func (UnimplementedInstanceServiceHandler) SyncInstance(context.Context, *connect.Request[v1.SyncInstanceRequest]) (*connect.Response[v1.SyncInstanceResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.InstanceService.SyncInstance is not implemented"))
}

func (UnimplementedInstanceServiceHandler) ListInstanceDatabase(context.Context, *connect.Request[v1.ListInstanceDatabaseRequest]) (*connect.Response[v1.ListInstanceDatabaseResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.InstanceService.ListInstanceDatabase is not implemented"))
}

func (UnimplementedInstanceServiceHandler) BatchSyncInstances(context.Context, *connect.Request[v1.BatchSyncInstancesRequest]) (*connect.Response[v1.BatchSyncInstancesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.InstanceService.BatchSyncInstances is not implemented"))
}

func (UnimplementedInstanceServiceHandler) BatchUpdateInstances(context.Context, *connect.Request[v1.BatchUpdateInstancesRequest]) (*connect.Response[v1.BatchUpdateInstancesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.InstanceService.BatchUpdateInstances is not implemented"))
}

func (UnimplementedInstanceServiceHandler) AddDataSource(context.Context, *connect.Request[v1.AddDataSourceRequest]) (*connect.Response[v1.Instance], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.InstanceService.AddDataSource is not implemented"))
}

func (UnimplementedInstanceServiceHandler) RemoveDataSource(context.Context, *connect.Request[v1.RemoveDataSourceRequest]) (*connect.Response[v1.Instance], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.InstanceService.RemoveDataSource is not implemented"))
}

func (UnimplementedInstanceServiceHandler) UpdateDataSource(context.Context, *connect.Request[v1.UpdateDataSourceRequest]) (*connect.Response[v1.Instance], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.InstanceService.UpdateDataSource is not implemented"))
}
