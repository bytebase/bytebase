// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/instance_role_service.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/bytebase/bytebase/proto/generated-go/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// InstanceRoleServiceName is the fully-qualified name of the InstanceRoleService service.
	InstanceRoleServiceName = "bytebase.v1.InstanceRoleService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// InstanceRoleServiceGetInstanceRoleProcedure is the fully-qualified name of the
	// InstanceRoleService's GetInstanceRole RPC.
	InstanceRoleServiceGetInstanceRoleProcedure = "/bytebase.v1.InstanceRoleService/GetInstanceRole"
	// InstanceRoleServiceListInstanceRolesProcedure is the fully-qualified name of the
	// InstanceRoleService's ListInstanceRoles RPC.
	InstanceRoleServiceListInstanceRolesProcedure = "/bytebase.v1.InstanceRoleService/ListInstanceRoles"
)

// InstanceRoleServiceClient is a client for the bytebase.v1.InstanceRoleService service.
type InstanceRoleServiceClient interface {
	GetInstanceRole(context.Context, *connect.Request[v1.GetInstanceRoleRequest]) (*connect.Response[v1.InstanceRole], error)
	ListInstanceRoles(context.Context, *connect.Request[v1.ListInstanceRolesRequest]) (*connect.Response[v1.ListInstanceRolesResponse], error)
}

// NewInstanceRoleServiceClient constructs a client for the bytebase.v1.InstanceRoleService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewInstanceRoleServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) InstanceRoleServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	instanceRoleServiceMethods := v1.File_v1_instance_role_service_proto.Services().ByName("InstanceRoleService").Methods()
	return &instanceRoleServiceClient{
		getInstanceRole: connect.NewClient[v1.GetInstanceRoleRequest, v1.InstanceRole](
			httpClient,
			baseURL+InstanceRoleServiceGetInstanceRoleProcedure,
			connect.WithSchema(instanceRoleServiceMethods.ByName("GetInstanceRole")),
			connect.WithClientOptions(opts...),
		),
		listInstanceRoles: connect.NewClient[v1.ListInstanceRolesRequest, v1.ListInstanceRolesResponse](
			httpClient,
			baseURL+InstanceRoleServiceListInstanceRolesProcedure,
			connect.WithSchema(instanceRoleServiceMethods.ByName("ListInstanceRoles")),
			connect.WithClientOptions(opts...),
		),
	}
}

// instanceRoleServiceClient implements InstanceRoleServiceClient.
type instanceRoleServiceClient struct {
	getInstanceRole   *connect.Client[v1.GetInstanceRoleRequest, v1.InstanceRole]
	listInstanceRoles *connect.Client[v1.ListInstanceRolesRequest, v1.ListInstanceRolesResponse]
}

// GetInstanceRole calls bytebase.v1.InstanceRoleService.GetInstanceRole.
func (c *instanceRoleServiceClient) GetInstanceRole(ctx context.Context, req *connect.Request[v1.GetInstanceRoleRequest]) (*connect.Response[v1.InstanceRole], error) {
	return c.getInstanceRole.CallUnary(ctx, req)
}

// ListInstanceRoles calls bytebase.v1.InstanceRoleService.ListInstanceRoles.
func (c *instanceRoleServiceClient) ListInstanceRoles(ctx context.Context, req *connect.Request[v1.ListInstanceRolesRequest]) (*connect.Response[v1.ListInstanceRolesResponse], error) {
	return c.listInstanceRoles.CallUnary(ctx, req)
}

// InstanceRoleServiceHandler is an implementation of the bytebase.v1.InstanceRoleService service.
type InstanceRoleServiceHandler interface {
	GetInstanceRole(context.Context, *connect.Request[v1.GetInstanceRoleRequest]) (*connect.Response[v1.InstanceRole], error)
	ListInstanceRoles(context.Context, *connect.Request[v1.ListInstanceRolesRequest]) (*connect.Response[v1.ListInstanceRolesResponse], error)
}

// NewInstanceRoleServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewInstanceRoleServiceHandler(svc InstanceRoleServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	instanceRoleServiceMethods := v1.File_v1_instance_role_service_proto.Services().ByName("InstanceRoleService").Methods()
	instanceRoleServiceGetInstanceRoleHandler := connect.NewUnaryHandler(
		InstanceRoleServiceGetInstanceRoleProcedure,
		svc.GetInstanceRole,
		connect.WithSchema(instanceRoleServiceMethods.ByName("GetInstanceRole")),
		connect.WithHandlerOptions(opts...),
	)
	instanceRoleServiceListInstanceRolesHandler := connect.NewUnaryHandler(
		InstanceRoleServiceListInstanceRolesProcedure,
		svc.ListInstanceRoles,
		connect.WithSchema(instanceRoleServiceMethods.ByName("ListInstanceRoles")),
		connect.WithHandlerOptions(opts...),
	)
	return "/bytebase.v1.InstanceRoleService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case InstanceRoleServiceGetInstanceRoleProcedure:
			instanceRoleServiceGetInstanceRoleHandler.ServeHTTP(w, r)
		case InstanceRoleServiceListInstanceRolesProcedure:
			instanceRoleServiceListInstanceRolesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedInstanceRoleServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedInstanceRoleServiceHandler struct{}

func (UnimplementedInstanceRoleServiceHandler) GetInstanceRole(context.Context, *connect.Request[v1.GetInstanceRoleRequest]) (*connect.Response[v1.InstanceRole], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.InstanceRoleService.GetInstanceRole is not implemented"))
}

func (UnimplementedInstanceRoleServiceHandler) ListInstanceRoles(context.Context, *connect.Request[v1.ListInstanceRolesRequest]) (*connect.Response[v1.ListInstanceRolesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.InstanceRoleService.ListInstanceRoles is not implemented"))
}
