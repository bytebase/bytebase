// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/risk_service.proto

package v1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/bytebase/bytebase/proto/generated-go/v1"
	connect_go "github.com/bufbuild/connect-go"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// RiskServiceName is the fully-qualified name of the RiskService service.
	RiskServiceName = "bytebase.v1.RiskService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RiskServiceListRisksProcedure is the fully-qualified name of the RiskService's ListRisks RPC.
	RiskServiceListRisksProcedure = "/bytebase.v1.RiskService/ListRisks"
	// RiskServiceCreateRiskProcedure is the fully-qualified name of the RiskService's CreateRisk RPC.
	RiskServiceCreateRiskProcedure = "/bytebase.v1.RiskService/CreateRisk"
	// RiskServiceGetRiskProcedure is the fully-qualified name of the RiskService's GetRisk RPC.
	RiskServiceGetRiskProcedure = "/bytebase.v1.RiskService/GetRisk"
	// RiskServiceUpdateRiskProcedure is the fully-qualified name of the RiskService's UpdateRisk RPC.
	RiskServiceUpdateRiskProcedure = "/bytebase.v1.RiskService/UpdateRisk"
	// RiskServiceDeleteRiskProcedure is the fully-qualified name of the RiskService's DeleteRisk RPC.
	RiskServiceDeleteRiskProcedure = "/bytebase.v1.RiskService/DeleteRisk"
)

// RiskServiceClient is a client for the bytebase.v1.RiskService service.
type RiskServiceClient interface {
	ListRisks(context.Context, *connect_go.Request[v1.ListRisksRequest]) (*connect_go.Response[v1.ListRisksResponse], error)
	CreateRisk(context.Context, *connect_go.Request[v1.CreateRiskRequest]) (*connect_go.Response[v1.Risk], error)
	GetRisk(context.Context, *connect_go.Request[v1.GetRiskRequest]) (*connect_go.Response[v1.Risk], error)
	UpdateRisk(context.Context, *connect_go.Request[v1.UpdateRiskRequest]) (*connect_go.Response[v1.Risk], error)
	DeleteRisk(context.Context, *connect_go.Request[v1.DeleteRiskRequest]) (*connect_go.Response[emptypb.Empty], error)
}

// NewRiskServiceClient constructs a client for the bytebase.v1.RiskService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRiskServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) RiskServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &riskServiceClient{
		listRisks: connect_go.NewClient[v1.ListRisksRequest, v1.ListRisksResponse](
			httpClient,
			baseURL+RiskServiceListRisksProcedure,
			opts...,
		),
		createRisk: connect_go.NewClient[v1.CreateRiskRequest, v1.Risk](
			httpClient,
			baseURL+RiskServiceCreateRiskProcedure,
			opts...,
		),
		getRisk: connect_go.NewClient[v1.GetRiskRequest, v1.Risk](
			httpClient,
			baseURL+RiskServiceGetRiskProcedure,
			opts...,
		),
		updateRisk: connect_go.NewClient[v1.UpdateRiskRequest, v1.Risk](
			httpClient,
			baseURL+RiskServiceUpdateRiskProcedure,
			opts...,
		),
		deleteRisk: connect_go.NewClient[v1.DeleteRiskRequest, emptypb.Empty](
			httpClient,
			baseURL+RiskServiceDeleteRiskProcedure,
			opts...,
		),
	}
}

// riskServiceClient implements RiskServiceClient.
type riskServiceClient struct {
	listRisks  *connect_go.Client[v1.ListRisksRequest, v1.ListRisksResponse]
	createRisk *connect_go.Client[v1.CreateRiskRequest, v1.Risk]
	getRisk    *connect_go.Client[v1.GetRiskRequest, v1.Risk]
	updateRisk *connect_go.Client[v1.UpdateRiskRequest, v1.Risk]
	deleteRisk *connect_go.Client[v1.DeleteRiskRequest, emptypb.Empty]
}

// ListRisks calls bytebase.v1.RiskService.ListRisks.
func (c *riskServiceClient) ListRisks(ctx context.Context, req *connect_go.Request[v1.ListRisksRequest]) (*connect_go.Response[v1.ListRisksResponse], error) {
	return c.listRisks.CallUnary(ctx, req)
}

// CreateRisk calls bytebase.v1.RiskService.CreateRisk.
func (c *riskServiceClient) CreateRisk(ctx context.Context, req *connect_go.Request[v1.CreateRiskRequest]) (*connect_go.Response[v1.Risk], error) {
	return c.createRisk.CallUnary(ctx, req)
}

// GetRisk calls bytebase.v1.RiskService.GetRisk.
func (c *riskServiceClient) GetRisk(ctx context.Context, req *connect_go.Request[v1.GetRiskRequest]) (*connect_go.Response[v1.Risk], error) {
	return c.getRisk.CallUnary(ctx, req)
}

// UpdateRisk calls bytebase.v1.RiskService.UpdateRisk.
func (c *riskServiceClient) UpdateRisk(ctx context.Context, req *connect_go.Request[v1.UpdateRiskRequest]) (*connect_go.Response[v1.Risk], error) {
	return c.updateRisk.CallUnary(ctx, req)
}

// DeleteRisk calls bytebase.v1.RiskService.DeleteRisk.
func (c *riskServiceClient) DeleteRisk(ctx context.Context, req *connect_go.Request[v1.DeleteRiskRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.deleteRisk.CallUnary(ctx, req)
}

// RiskServiceHandler is an implementation of the bytebase.v1.RiskService service.
type RiskServiceHandler interface {
	ListRisks(context.Context, *connect_go.Request[v1.ListRisksRequest]) (*connect_go.Response[v1.ListRisksResponse], error)
	CreateRisk(context.Context, *connect_go.Request[v1.CreateRiskRequest]) (*connect_go.Response[v1.Risk], error)
	GetRisk(context.Context, *connect_go.Request[v1.GetRiskRequest]) (*connect_go.Response[v1.Risk], error)
	UpdateRisk(context.Context, *connect_go.Request[v1.UpdateRiskRequest]) (*connect_go.Response[v1.Risk], error)
	DeleteRisk(context.Context, *connect_go.Request[v1.DeleteRiskRequest]) (*connect_go.Response[emptypb.Empty], error)
}

// NewRiskServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRiskServiceHandler(svc RiskServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	riskServiceListRisksHandler := connect_go.NewUnaryHandler(
		RiskServiceListRisksProcedure,
		svc.ListRisks,
		opts...,
	)
	riskServiceCreateRiskHandler := connect_go.NewUnaryHandler(
		RiskServiceCreateRiskProcedure,
		svc.CreateRisk,
		opts...,
	)
	riskServiceGetRiskHandler := connect_go.NewUnaryHandler(
		RiskServiceGetRiskProcedure,
		svc.GetRisk,
		opts...,
	)
	riskServiceUpdateRiskHandler := connect_go.NewUnaryHandler(
		RiskServiceUpdateRiskProcedure,
		svc.UpdateRisk,
		opts...,
	)
	riskServiceDeleteRiskHandler := connect_go.NewUnaryHandler(
		RiskServiceDeleteRiskProcedure,
		svc.DeleteRisk,
		opts...,
	)
	return "/bytebase.v1.RiskService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RiskServiceListRisksProcedure:
			riskServiceListRisksHandler.ServeHTTP(w, r)
		case RiskServiceCreateRiskProcedure:
			riskServiceCreateRiskHandler.ServeHTTP(w, r)
		case RiskServiceGetRiskProcedure:
			riskServiceGetRiskHandler.ServeHTTP(w, r)
		case RiskServiceUpdateRiskProcedure:
			riskServiceUpdateRiskHandler.ServeHTTP(w, r)
		case RiskServiceDeleteRiskProcedure:
			riskServiceDeleteRiskHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRiskServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRiskServiceHandler struct{}

func (UnimplementedRiskServiceHandler) ListRisks(context.Context, *connect_go.Request[v1.ListRisksRequest]) (*connect_go.Response[v1.ListRisksResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bytebase.v1.RiskService.ListRisks is not implemented"))
}

func (UnimplementedRiskServiceHandler) CreateRisk(context.Context, *connect_go.Request[v1.CreateRiskRequest]) (*connect_go.Response[v1.Risk], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bytebase.v1.RiskService.CreateRisk is not implemented"))
}

func (UnimplementedRiskServiceHandler) GetRisk(context.Context, *connect_go.Request[v1.GetRiskRequest]) (*connect_go.Response[v1.Risk], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bytebase.v1.RiskService.GetRisk is not implemented"))
}

func (UnimplementedRiskServiceHandler) UpdateRisk(context.Context, *connect_go.Request[v1.UpdateRiskRequest]) (*connect_go.Response[v1.Risk], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bytebase.v1.RiskService.UpdateRisk is not implemented"))
}

func (UnimplementedRiskServiceHandler) DeleteRisk(context.Context, *connect_go.Request[v1.DeleteRiskRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bytebase.v1.RiskService.DeleteRisk is not implemented"))
}
