// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/database_catalog_service.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/bytebase/bytebase/proto/generated-go/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// DatabaseCatalogServiceName is the fully-qualified name of the DatabaseCatalogService service.
	DatabaseCatalogServiceName = "bytebase.v1.DatabaseCatalogService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// DatabaseCatalogServiceGetDatabaseCatalogProcedure is the fully-qualified name of the
	// DatabaseCatalogService's GetDatabaseCatalog RPC.
	DatabaseCatalogServiceGetDatabaseCatalogProcedure = "/bytebase.v1.DatabaseCatalogService/GetDatabaseCatalog"
	// DatabaseCatalogServiceUpdateDatabaseCatalogProcedure is the fully-qualified name of the
	// DatabaseCatalogService's UpdateDatabaseCatalog RPC.
	DatabaseCatalogServiceUpdateDatabaseCatalogProcedure = "/bytebase.v1.DatabaseCatalogService/UpdateDatabaseCatalog"
)

// DatabaseCatalogServiceClient is a client for the bytebase.v1.DatabaseCatalogService service.
type DatabaseCatalogServiceClient interface {
	GetDatabaseCatalog(context.Context, *connect.Request[v1.GetDatabaseCatalogRequest]) (*connect.Response[v1.DatabaseCatalog], error)
	UpdateDatabaseCatalog(context.Context, *connect.Request[v1.UpdateDatabaseCatalogRequest]) (*connect.Response[v1.DatabaseCatalog], error)
}

// NewDatabaseCatalogServiceClient constructs a client for the bytebase.v1.DatabaseCatalogService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewDatabaseCatalogServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) DatabaseCatalogServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	databaseCatalogServiceMethods := v1.File_v1_database_catalog_service_proto.Services().ByName("DatabaseCatalogService").Methods()
	return &databaseCatalogServiceClient{
		getDatabaseCatalog: connect.NewClient[v1.GetDatabaseCatalogRequest, v1.DatabaseCatalog](
			httpClient,
			baseURL+DatabaseCatalogServiceGetDatabaseCatalogProcedure,
			connect.WithSchema(databaseCatalogServiceMethods.ByName("GetDatabaseCatalog")),
			connect.WithClientOptions(opts...),
		),
		updateDatabaseCatalog: connect.NewClient[v1.UpdateDatabaseCatalogRequest, v1.DatabaseCatalog](
			httpClient,
			baseURL+DatabaseCatalogServiceUpdateDatabaseCatalogProcedure,
			connect.WithSchema(databaseCatalogServiceMethods.ByName("UpdateDatabaseCatalog")),
			connect.WithClientOptions(opts...),
		),
	}
}

// databaseCatalogServiceClient implements DatabaseCatalogServiceClient.
type databaseCatalogServiceClient struct {
	getDatabaseCatalog    *connect.Client[v1.GetDatabaseCatalogRequest, v1.DatabaseCatalog]
	updateDatabaseCatalog *connect.Client[v1.UpdateDatabaseCatalogRequest, v1.DatabaseCatalog]
}

// GetDatabaseCatalog calls bytebase.v1.DatabaseCatalogService.GetDatabaseCatalog.
func (c *databaseCatalogServiceClient) GetDatabaseCatalog(ctx context.Context, req *connect.Request[v1.GetDatabaseCatalogRequest]) (*connect.Response[v1.DatabaseCatalog], error) {
	return c.getDatabaseCatalog.CallUnary(ctx, req)
}

// UpdateDatabaseCatalog calls bytebase.v1.DatabaseCatalogService.UpdateDatabaseCatalog.
func (c *databaseCatalogServiceClient) UpdateDatabaseCatalog(ctx context.Context, req *connect.Request[v1.UpdateDatabaseCatalogRequest]) (*connect.Response[v1.DatabaseCatalog], error) {
	return c.updateDatabaseCatalog.CallUnary(ctx, req)
}

// DatabaseCatalogServiceHandler is an implementation of the bytebase.v1.DatabaseCatalogService
// service.
type DatabaseCatalogServiceHandler interface {
	GetDatabaseCatalog(context.Context, *connect.Request[v1.GetDatabaseCatalogRequest]) (*connect.Response[v1.DatabaseCatalog], error)
	UpdateDatabaseCatalog(context.Context, *connect.Request[v1.UpdateDatabaseCatalogRequest]) (*connect.Response[v1.DatabaseCatalog], error)
}

// NewDatabaseCatalogServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewDatabaseCatalogServiceHandler(svc DatabaseCatalogServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	databaseCatalogServiceMethods := v1.File_v1_database_catalog_service_proto.Services().ByName("DatabaseCatalogService").Methods()
	databaseCatalogServiceGetDatabaseCatalogHandler := connect.NewUnaryHandler(
		DatabaseCatalogServiceGetDatabaseCatalogProcedure,
		svc.GetDatabaseCatalog,
		connect.WithSchema(databaseCatalogServiceMethods.ByName("GetDatabaseCatalog")),
		connect.WithHandlerOptions(opts...),
	)
	databaseCatalogServiceUpdateDatabaseCatalogHandler := connect.NewUnaryHandler(
		DatabaseCatalogServiceUpdateDatabaseCatalogProcedure,
		svc.UpdateDatabaseCatalog,
		connect.WithSchema(databaseCatalogServiceMethods.ByName("UpdateDatabaseCatalog")),
		connect.WithHandlerOptions(opts...),
	)
	return "/bytebase.v1.DatabaseCatalogService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case DatabaseCatalogServiceGetDatabaseCatalogProcedure:
			databaseCatalogServiceGetDatabaseCatalogHandler.ServeHTTP(w, r)
		case DatabaseCatalogServiceUpdateDatabaseCatalogProcedure:
			databaseCatalogServiceUpdateDatabaseCatalogHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedDatabaseCatalogServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedDatabaseCatalogServiceHandler struct{}

func (UnimplementedDatabaseCatalogServiceHandler) GetDatabaseCatalog(context.Context, *connect.Request[v1.GetDatabaseCatalogRequest]) (*connect.Response[v1.DatabaseCatalog], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.DatabaseCatalogService.GetDatabaseCatalog is not implemented"))
}

func (UnimplementedDatabaseCatalogServiceHandler) UpdateDatabaseCatalog(context.Context, *connect.Request[v1.UpdateDatabaseCatalogRequest]) (*connect.Response[v1.DatabaseCatalog], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.DatabaseCatalogService.UpdateDatabaseCatalog is not implemented"))
}
