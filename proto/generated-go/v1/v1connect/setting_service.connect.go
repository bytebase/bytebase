// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/setting_service.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/bytebase/bytebase/proto/generated-go/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// SettingServiceName is the fully-qualified name of the SettingService service.
	SettingServiceName = "bytebase.v1.SettingService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// SettingServiceListSettingsProcedure is the fully-qualified name of the SettingService's
	// ListSettings RPC.
	SettingServiceListSettingsProcedure = "/bytebase.v1.SettingService/ListSettings"
	// SettingServiceGetSettingProcedure is the fully-qualified name of the SettingService's GetSetting
	// RPC.
	SettingServiceGetSettingProcedure = "/bytebase.v1.SettingService/GetSetting"
	// SettingServiceUpdateSettingProcedure is the fully-qualified name of the SettingService's
	// UpdateSetting RPC.
	SettingServiceUpdateSettingProcedure = "/bytebase.v1.SettingService/UpdateSetting"
)

// SettingServiceClient is a client for the bytebase.v1.SettingService service.
type SettingServiceClient interface {
	ListSettings(context.Context, *connect.Request[v1.ListSettingsRequest]) (*connect.Response[v1.ListSettingsResponse], error)
	GetSetting(context.Context, *connect.Request[v1.GetSettingRequest]) (*connect.Response[v1.Setting], error)
	UpdateSetting(context.Context, *connect.Request[v1.UpdateSettingRequest]) (*connect.Response[v1.Setting], error)
}

// NewSettingServiceClient constructs a client for the bytebase.v1.SettingService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSettingServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) SettingServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	settingServiceMethods := v1.File_v1_setting_service_proto.Services().ByName("SettingService").Methods()
	return &settingServiceClient{
		listSettings: connect.NewClient[v1.ListSettingsRequest, v1.ListSettingsResponse](
			httpClient,
			baseURL+SettingServiceListSettingsProcedure,
			connect.WithSchema(settingServiceMethods.ByName("ListSettings")),
			connect.WithClientOptions(opts...),
		),
		getSetting: connect.NewClient[v1.GetSettingRequest, v1.Setting](
			httpClient,
			baseURL+SettingServiceGetSettingProcedure,
			connect.WithSchema(settingServiceMethods.ByName("GetSetting")),
			connect.WithClientOptions(opts...),
		),
		updateSetting: connect.NewClient[v1.UpdateSettingRequest, v1.Setting](
			httpClient,
			baseURL+SettingServiceUpdateSettingProcedure,
			connect.WithSchema(settingServiceMethods.ByName("UpdateSetting")),
			connect.WithClientOptions(opts...),
		),
	}
}

// settingServiceClient implements SettingServiceClient.
type settingServiceClient struct {
	listSettings  *connect.Client[v1.ListSettingsRequest, v1.ListSettingsResponse]
	getSetting    *connect.Client[v1.GetSettingRequest, v1.Setting]
	updateSetting *connect.Client[v1.UpdateSettingRequest, v1.Setting]
}

// ListSettings calls bytebase.v1.SettingService.ListSettings.
func (c *settingServiceClient) ListSettings(ctx context.Context, req *connect.Request[v1.ListSettingsRequest]) (*connect.Response[v1.ListSettingsResponse], error) {
	return c.listSettings.CallUnary(ctx, req)
}

// GetSetting calls bytebase.v1.SettingService.GetSetting.
func (c *settingServiceClient) GetSetting(ctx context.Context, req *connect.Request[v1.GetSettingRequest]) (*connect.Response[v1.Setting], error) {
	return c.getSetting.CallUnary(ctx, req)
}

// UpdateSetting calls bytebase.v1.SettingService.UpdateSetting.
func (c *settingServiceClient) UpdateSetting(ctx context.Context, req *connect.Request[v1.UpdateSettingRequest]) (*connect.Response[v1.Setting], error) {
	return c.updateSetting.CallUnary(ctx, req)
}

// SettingServiceHandler is an implementation of the bytebase.v1.SettingService service.
type SettingServiceHandler interface {
	ListSettings(context.Context, *connect.Request[v1.ListSettingsRequest]) (*connect.Response[v1.ListSettingsResponse], error)
	GetSetting(context.Context, *connect.Request[v1.GetSettingRequest]) (*connect.Response[v1.Setting], error)
	UpdateSetting(context.Context, *connect.Request[v1.UpdateSettingRequest]) (*connect.Response[v1.Setting], error)
}

// NewSettingServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSettingServiceHandler(svc SettingServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	settingServiceMethods := v1.File_v1_setting_service_proto.Services().ByName("SettingService").Methods()
	settingServiceListSettingsHandler := connect.NewUnaryHandler(
		SettingServiceListSettingsProcedure,
		svc.ListSettings,
		connect.WithSchema(settingServiceMethods.ByName("ListSettings")),
		connect.WithHandlerOptions(opts...),
	)
	settingServiceGetSettingHandler := connect.NewUnaryHandler(
		SettingServiceGetSettingProcedure,
		svc.GetSetting,
		connect.WithSchema(settingServiceMethods.ByName("GetSetting")),
		connect.WithHandlerOptions(opts...),
	)
	settingServiceUpdateSettingHandler := connect.NewUnaryHandler(
		SettingServiceUpdateSettingProcedure,
		svc.UpdateSetting,
		connect.WithSchema(settingServiceMethods.ByName("UpdateSetting")),
		connect.WithHandlerOptions(opts...),
	)
	return "/bytebase.v1.SettingService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case SettingServiceListSettingsProcedure:
			settingServiceListSettingsHandler.ServeHTTP(w, r)
		case SettingServiceGetSettingProcedure:
			settingServiceGetSettingHandler.ServeHTTP(w, r)
		case SettingServiceUpdateSettingProcedure:
			settingServiceUpdateSettingHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedSettingServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSettingServiceHandler struct{}

func (UnimplementedSettingServiceHandler) ListSettings(context.Context, *connect.Request[v1.ListSettingsRequest]) (*connect.Response[v1.ListSettingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.SettingService.ListSettings is not implemented"))
}

func (UnimplementedSettingServiceHandler) GetSetting(context.Context, *connect.Request[v1.GetSettingRequest]) (*connect.Response[v1.Setting], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.SettingService.GetSetting is not implemented"))
}

func (UnimplementedSettingServiceHandler) UpdateSetting(context.Context, *connect.Request[v1.UpdateSettingRequest]) (*connect.Response[v1.Setting], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bytebase.v1.SettingService.UpdateSetting is not implemented"))
}
