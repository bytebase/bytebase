// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/issue_service.proto

package v1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/bytebase/bytebase/proto/generated-go/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// IssueServiceName is the fully-qualified name of the IssueService service.
	IssueServiceName = "bytebase.v1.IssueService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// IssueServiceGetIssueProcedure is the fully-qualified name of the IssueService's GetIssue RPC.
	IssueServiceGetIssueProcedure = "/bytebase.v1.IssueService/GetIssue"
	// IssueServiceCreateIssueProcedure is the fully-qualified name of the IssueService's CreateIssue
	// RPC.
	IssueServiceCreateIssueProcedure = "/bytebase.v1.IssueService/CreateIssue"
	// IssueServiceListIssuesProcedure is the fully-qualified name of the IssueService's ListIssues RPC.
	IssueServiceListIssuesProcedure = "/bytebase.v1.IssueService/ListIssues"
	// IssueServiceSearchIssuesProcedure is the fully-qualified name of the IssueService's SearchIssues
	// RPC.
	IssueServiceSearchIssuesProcedure = "/bytebase.v1.IssueService/SearchIssues"
	// IssueServiceUpdateIssueProcedure is the fully-qualified name of the IssueService's UpdateIssue
	// RPC.
	IssueServiceUpdateIssueProcedure = "/bytebase.v1.IssueService/UpdateIssue"
	// IssueServiceListIssueCommentsProcedure is the fully-qualified name of the IssueService's
	// ListIssueComments RPC.
	IssueServiceListIssueCommentsProcedure = "/bytebase.v1.IssueService/ListIssueComments"
	// IssueServiceCreateIssueCommentProcedure is the fully-qualified name of the IssueService's
	// CreateIssueComment RPC.
	IssueServiceCreateIssueCommentProcedure = "/bytebase.v1.IssueService/CreateIssueComment"
	// IssueServiceUpdateIssueCommentProcedure is the fully-qualified name of the IssueService's
	// UpdateIssueComment RPC.
	IssueServiceUpdateIssueCommentProcedure = "/bytebase.v1.IssueService/UpdateIssueComment"
	// IssueServiceBatchUpdateIssuesStatusProcedure is the fully-qualified name of the IssueService's
	// BatchUpdateIssuesStatus RPC.
	IssueServiceBatchUpdateIssuesStatusProcedure = "/bytebase.v1.IssueService/BatchUpdateIssuesStatus"
	// IssueServiceApproveIssueProcedure is the fully-qualified name of the IssueService's ApproveIssue
	// RPC.
	IssueServiceApproveIssueProcedure = "/bytebase.v1.IssueService/ApproveIssue"
	// IssueServiceRejectIssueProcedure is the fully-qualified name of the IssueService's RejectIssue
	// RPC.
	IssueServiceRejectIssueProcedure = "/bytebase.v1.IssueService/RejectIssue"
	// IssueServiceRequestIssueProcedure is the fully-qualified name of the IssueService's RequestIssue
	// RPC.
	IssueServiceRequestIssueProcedure = "/bytebase.v1.IssueService/RequestIssue"
)

// IssueServiceClient is a client for the bytebase.v1.IssueService service.
type IssueServiceClient interface {
	GetIssue(context.Context, *connect_go.Request[v1.GetIssueRequest]) (*connect_go.Response[v1.Issue], error)
	CreateIssue(context.Context, *connect_go.Request[v1.CreateIssueRequest]) (*connect_go.Response[v1.Issue], error)
	ListIssues(context.Context, *connect_go.Request[v1.ListIssuesRequest]) (*connect_go.Response[v1.ListIssuesResponse], error)
	// Search for issues that the caller has the bb.issues.get permission on and also satisfy the specified filter & query.
	SearchIssues(context.Context, *connect_go.Request[v1.SearchIssuesRequest]) (*connect_go.Response[v1.SearchIssuesResponse], error)
	UpdateIssue(context.Context, *connect_go.Request[v1.UpdateIssueRequest]) (*connect_go.Response[v1.Issue], error)
	ListIssueComments(context.Context, *connect_go.Request[v1.ListIssueCommentsRequest]) (*connect_go.Response[v1.ListIssueCommentsResponse], error)
	CreateIssueComment(context.Context, *connect_go.Request[v1.CreateIssueCommentRequest]) (*connect_go.Response[v1.IssueComment], error)
	UpdateIssueComment(context.Context, *connect_go.Request[v1.UpdateIssueCommentRequest]) (*connect_go.Response[v1.IssueComment], error)
	BatchUpdateIssuesStatus(context.Context, *connect_go.Request[v1.BatchUpdateIssuesStatusRequest]) (*connect_go.Response[v1.BatchUpdateIssuesStatusResponse], error)
	// ApproveIssue approves the issue.
	// The access is based on approval flow.
	ApproveIssue(context.Context, *connect_go.Request[v1.ApproveIssueRequest]) (*connect_go.Response[v1.Issue], error)
	// RejectIssue rejects the issue.
	// The access is based on approval flow.
	RejectIssue(context.Context, *connect_go.Request[v1.RejectIssueRequest]) (*connect_go.Response[v1.Issue], error)
	// RequestIssue requests the issue.
	// The access is based on approval flow.
	RequestIssue(context.Context, *connect_go.Request[v1.RequestIssueRequest]) (*connect_go.Response[v1.Issue], error)
}

// NewIssueServiceClient constructs a client for the bytebase.v1.IssueService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewIssueServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) IssueServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &issueServiceClient{
		getIssue: connect_go.NewClient[v1.GetIssueRequest, v1.Issue](
			httpClient,
			baseURL+IssueServiceGetIssueProcedure,
			opts...,
		),
		createIssue: connect_go.NewClient[v1.CreateIssueRequest, v1.Issue](
			httpClient,
			baseURL+IssueServiceCreateIssueProcedure,
			opts...,
		),
		listIssues: connect_go.NewClient[v1.ListIssuesRequest, v1.ListIssuesResponse](
			httpClient,
			baseURL+IssueServiceListIssuesProcedure,
			opts...,
		),
		searchIssues: connect_go.NewClient[v1.SearchIssuesRequest, v1.SearchIssuesResponse](
			httpClient,
			baseURL+IssueServiceSearchIssuesProcedure,
			opts...,
		),
		updateIssue: connect_go.NewClient[v1.UpdateIssueRequest, v1.Issue](
			httpClient,
			baseURL+IssueServiceUpdateIssueProcedure,
			opts...,
		),
		listIssueComments: connect_go.NewClient[v1.ListIssueCommentsRequest, v1.ListIssueCommentsResponse](
			httpClient,
			baseURL+IssueServiceListIssueCommentsProcedure,
			opts...,
		),
		createIssueComment: connect_go.NewClient[v1.CreateIssueCommentRequest, v1.IssueComment](
			httpClient,
			baseURL+IssueServiceCreateIssueCommentProcedure,
			opts...,
		),
		updateIssueComment: connect_go.NewClient[v1.UpdateIssueCommentRequest, v1.IssueComment](
			httpClient,
			baseURL+IssueServiceUpdateIssueCommentProcedure,
			opts...,
		),
		batchUpdateIssuesStatus: connect_go.NewClient[v1.BatchUpdateIssuesStatusRequest, v1.BatchUpdateIssuesStatusResponse](
			httpClient,
			baseURL+IssueServiceBatchUpdateIssuesStatusProcedure,
			opts...,
		),
		approveIssue: connect_go.NewClient[v1.ApproveIssueRequest, v1.Issue](
			httpClient,
			baseURL+IssueServiceApproveIssueProcedure,
			opts...,
		),
		rejectIssue: connect_go.NewClient[v1.RejectIssueRequest, v1.Issue](
			httpClient,
			baseURL+IssueServiceRejectIssueProcedure,
			opts...,
		),
		requestIssue: connect_go.NewClient[v1.RequestIssueRequest, v1.Issue](
			httpClient,
			baseURL+IssueServiceRequestIssueProcedure,
			opts...,
		),
	}
}

// issueServiceClient implements IssueServiceClient.
type issueServiceClient struct {
	getIssue                *connect_go.Client[v1.GetIssueRequest, v1.Issue]
	createIssue             *connect_go.Client[v1.CreateIssueRequest, v1.Issue]
	listIssues              *connect_go.Client[v1.ListIssuesRequest, v1.ListIssuesResponse]
	searchIssues            *connect_go.Client[v1.SearchIssuesRequest, v1.SearchIssuesResponse]
	updateIssue             *connect_go.Client[v1.UpdateIssueRequest, v1.Issue]
	listIssueComments       *connect_go.Client[v1.ListIssueCommentsRequest, v1.ListIssueCommentsResponse]
	createIssueComment      *connect_go.Client[v1.CreateIssueCommentRequest, v1.IssueComment]
	updateIssueComment      *connect_go.Client[v1.UpdateIssueCommentRequest, v1.IssueComment]
	batchUpdateIssuesStatus *connect_go.Client[v1.BatchUpdateIssuesStatusRequest, v1.BatchUpdateIssuesStatusResponse]
	approveIssue            *connect_go.Client[v1.ApproveIssueRequest, v1.Issue]
	rejectIssue             *connect_go.Client[v1.RejectIssueRequest, v1.Issue]
	requestIssue            *connect_go.Client[v1.RequestIssueRequest, v1.Issue]
}

// GetIssue calls bytebase.v1.IssueService.GetIssue.
func (c *issueServiceClient) GetIssue(ctx context.Context, req *connect_go.Request[v1.GetIssueRequest]) (*connect_go.Response[v1.Issue], error) {
	return c.getIssue.CallUnary(ctx, req)
}

// CreateIssue calls bytebase.v1.IssueService.CreateIssue.
func (c *issueServiceClient) CreateIssue(ctx context.Context, req *connect_go.Request[v1.CreateIssueRequest]) (*connect_go.Response[v1.Issue], error) {
	return c.createIssue.CallUnary(ctx, req)
}

// ListIssues calls bytebase.v1.IssueService.ListIssues.
func (c *issueServiceClient) ListIssues(ctx context.Context, req *connect_go.Request[v1.ListIssuesRequest]) (*connect_go.Response[v1.ListIssuesResponse], error) {
	return c.listIssues.CallUnary(ctx, req)
}

// SearchIssues calls bytebase.v1.IssueService.SearchIssues.
func (c *issueServiceClient) SearchIssues(ctx context.Context, req *connect_go.Request[v1.SearchIssuesRequest]) (*connect_go.Response[v1.SearchIssuesResponse], error) {
	return c.searchIssues.CallUnary(ctx, req)
}

// UpdateIssue calls bytebase.v1.IssueService.UpdateIssue.
func (c *issueServiceClient) UpdateIssue(ctx context.Context, req *connect_go.Request[v1.UpdateIssueRequest]) (*connect_go.Response[v1.Issue], error) {
	return c.updateIssue.CallUnary(ctx, req)
}

// ListIssueComments calls bytebase.v1.IssueService.ListIssueComments.
func (c *issueServiceClient) ListIssueComments(ctx context.Context, req *connect_go.Request[v1.ListIssueCommentsRequest]) (*connect_go.Response[v1.ListIssueCommentsResponse], error) {
	return c.listIssueComments.CallUnary(ctx, req)
}

// CreateIssueComment calls bytebase.v1.IssueService.CreateIssueComment.
func (c *issueServiceClient) CreateIssueComment(ctx context.Context, req *connect_go.Request[v1.CreateIssueCommentRequest]) (*connect_go.Response[v1.IssueComment], error) {
	return c.createIssueComment.CallUnary(ctx, req)
}

// UpdateIssueComment calls bytebase.v1.IssueService.UpdateIssueComment.
func (c *issueServiceClient) UpdateIssueComment(ctx context.Context, req *connect_go.Request[v1.UpdateIssueCommentRequest]) (*connect_go.Response[v1.IssueComment], error) {
	return c.updateIssueComment.CallUnary(ctx, req)
}

// BatchUpdateIssuesStatus calls bytebase.v1.IssueService.BatchUpdateIssuesStatus.
func (c *issueServiceClient) BatchUpdateIssuesStatus(ctx context.Context, req *connect_go.Request[v1.BatchUpdateIssuesStatusRequest]) (*connect_go.Response[v1.BatchUpdateIssuesStatusResponse], error) {
	return c.batchUpdateIssuesStatus.CallUnary(ctx, req)
}

// ApproveIssue calls bytebase.v1.IssueService.ApproveIssue.
func (c *issueServiceClient) ApproveIssue(ctx context.Context, req *connect_go.Request[v1.ApproveIssueRequest]) (*connect_go.Response[v1.Issue], error) {
	return c.approveIssue.CallUnary(ctx, req)
}

// RejectIssue calls bytebase.v1.IssueService.RejectIssue.
func (c *issueServiceClient) RejectIssue(ctx context.Context, req *connect_go.Request[v1.RejectIssueRequest]) (*connect_go.Response[v1.Issue], error) {
	return c.rejectIssue.CallUnary(ctx, req)
}

// RequestIssue calls bytebase.v1.IssueService.RequestIssue.
func (c *issueServiceClient) RequestIssue(ctx context.Context, req *connect_go.Request[v1.RequestIssueRequest]) (*connect_go.Response[v1.Issue], error) {
	return c.requestIssue.CallUnary(ctx, req)
}

// IssueServiceHandler is an implementation of the bytebase.v1.IssueService service.
type IssueServiceHandler interface {
	GetIssue(context.Context, *connect_go.Request[v1.GetIssueRequest]) (*connect_go.Response[v1.Issue], error)
	CreateIssue(context.Context, *connect_go.Request[v1.CreateIssueRequest]) (*connect_go.Response[v1.Issue], error)
	ListIssues(context.Context, *connect_go.Request[v1.ListIssuesRequest]) (*connect_go.Response[v1.ListIssuesResponse], error)
	// Search for issues that the caller has the bb.issues.get permission on and also satisfy the specified filter & query.
	SearchIssues(context.Context, *connect_go.Request[v1.SearchIssuesRequest]) (*connect_go.Response[v1.SearchIssuesResponse], error)
	UpdateIssue(context.Context, *connect_go.Request[v1.UpdateIssueRequest]) (*connect_go.Response[v1.Issue], error)
	ListIssueComments(context.Context, *connect_go.Request[v1.ListIssueCommentsRequest]) (*connect_go.Response[v1.ListIssueCommentsResponse], error)
	CreateIssueComment(context.Context, *connect_go.Request[v1.CreateIssueCommentRequest]) (*connect_go.Response[v1.IssueComment], error)
	UpdateIssueComment(context.Context, *connect_go.Request[v1.UpdateIssueCommentRequest]) (*connect_go.Response[v1.IssueComment], error)
	BatchUpdateIssuesStatus(context.Context, *connect_go.Request[v1.BatchUpdateIssuesStatusRequest]) (*connect_go.Response[v1.BatchUpdateIssuesStatusResponse], error)
	// ApproveIssue approves the issue.
	// The access is based on approval flow.
	ApproveIssue(context.Context, *connect_go.Request[v1.ApproveIssueRequest]) (*connect_go.Response[v1.Issue], error)
	// RejectIssue rejects the issue.
	// The access is based on approval flow.
	RejectIssue(context.Context, *connect_go.Request[v1.RejectIssueRequest]) (*connect_go.Response[v1.Issue], error)
	// RequestIssue requests the issue.
	// The access is based on approval flow.
	RequestIssue(context.Context, *connect_go.Request[v1.RequestIssueRequest]) (*connect_go.Response[v1.Issue], error)
}

// NewIssueServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewIssueServiceHandler(svc IssueServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	issueServiceGetIssueHandler := connect_go.NewUnaryHandler(
		IssueServiceGetIssueProcedure,
		svc.GetIssue,
		opts...,
	)
	issueServiceCreateIssueHandler := connect_go.NewUnaryHandler(
		IssueServiceCreateIssueProcedure,
		svc.CreateIssue,
		opts...,
	)
	issueServiceListIssuesHandler := connect_go.NewUnaryHandler(
		IssueServiceListIssuesProcedure,
		svc.ListIssues,
		opts...,
	)
	issueServiceSearchIssuesHandler := connect_go.NewUnaryHandler(
		IssueServiceSearchIssuesProcedure,
		svc.SearchIssues,
		opts...,
	)
	issueServiceUpdateIssueHandler := connect_go.NewUnaryHandler(
		IssueServiceUpdateIssueProcedure,
		svc.UpdateIssue,
		opts...,
	)
	issueServiceListIssueCommentsHandler := connect_go.NewUnaryHandler(
		IssueServiceListIssueCommentsProcedure,
		svc.ListIssueComments,
		opts...,
	)
	issueServiceCreateIssueCommentHandler := connect_go.NewUnaryHandler(
		IssueServiceCreateIssueCommentProcedure,
		svc.CreateIssueComment,
		opts...,
	)
	issueServiceUpdateIssueCommentHandler := connect_go.NewUnaryHandler(
		IssueServiceUpdateIssueCommentProcedure,
		svc.UpdateIssueComment,
		opts...,
	)
	issueServiceBatchUpdateIssuesStatusHandler := connect_go.NewUnaryHandler(
		IssueServiceBatchUpdateIssuesStatusProcedure,
		svc.BatchUpdateIssuesStatus,
		opts...,
	)
	issueServiceApproveIssueHandler := connect_go.NewUnaryHandler(
		IssueServiceApproveIssueProcedure,
		svc.ApproveIssue,
		opts...,
	)
	issueServiceRejectIssueHandler := connect_go.NewUnaryHandler(
		IssueServiceRejectIssueProcedure,
		svc.RejectIssue,
		opts...,
	)
	issueServiceRequestIssueHandler := connect_go.NewUnaryHandler(
		IssueServiceRequestIssueProcedure,
		svc.RequestIssue,
		opts...,
	)
	return "/bytebase.v1.IssueService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case IssueServiceGetIssueProcedure:
			issueServiceGetIssueHandler.ServeHTTP(w, r)
		case IssueServiceCreateIssueProcedure:
			issueServiceCreateIssueHandler.ServeHTTP(w, r)
		case IssueServiceListIssuesProcedure:
			issueServiceListIssuesHandler.ServeHTTP(w, r)
		case IssueServiceSearchIssuesProcedure:
			issueServiceSearchIssuesHandler.ServeHTTP(w, r)
		case IssueServiceUpdateIssueProcedure:
			issueServiceUpdateIssueHandler.ServeHTTP(w, r)
		case IssueServiceListIssueCommentsProcedure:
			issueServiceListIssueCommentsHandler.ServeHTTP(w, r)
		case IssueServiceCreateIssueCommentProcedure:
			issueServiceCreateIssueCommentHandler.ServeHTTP(w, r)
		case IssueServiceUpdateIssueCommentProcedure:
			issueServiceUpdateIssueCommentHandler.ServeHTTP(w, r)
		case IssueServiceBatchUpdateIssuesStatusProcedure:
			issueServiceBatchUpdateIssuesStatusHandler.ServeHTTP(w, r)
		case IssueServiceApproveIssueProcedure:
			issueServiceApproveIssueHandler.ServeHTTP(w, r)
		case IssueServiceRejectIssueProcedure:
			issueServiceRejectIssueHandler.ServeHTTP(w, r)
		case IssueServiceRequestIssueProcedure:
			issueServiceRequestIssueHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedIssueServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedIssueServiceHandler struct{}

func (UnimplementedIssueServiceHandler) GetIssue(context.Context, *connect_go.Request[v1.GetIssueRequest]) (*connect_go.Response[v1.Issue], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bytebase.v1.IssueService.GetIssue is not implemented"))
}

func (UnimplementedIssueServiceHandler) CreateIssue(context.Context, *connect_go.Request[v1.CreateIssueRequest]) (*connect_go.Response[v1.Issue], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bytebase.v1.IssueService.CreateIssue is not implemented"))
}

func (UnimplementedIssueServiceHandler) ListIssues(context.Context, *connect_go.Request[v1.ListIssuesRequest]) (*connect_go.Response[v1.ListIssuesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bytebase.v1.IssueService.ListIssues is not implemented"))
}

func (UnimplementedIssueServiceHandler) SearchIssues(context.Context, *connect_go.Request[v1.SearchIssuesRequest]) (*connect_go.Response[v1.SearchIssuesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bytebase.v1.IssueService.SearchIssues is not implemented"))
}

func (UnimplementedIssueServiceHandler) UpdateIssue(context.Context, *connect_go.Request[v1.UpdateIssueRequest]) (*connect_go.Response[v1.Issue], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bytebase.v1.IssueService.UpdateIssue is not implemented"))
}

func (UnimplementedIssueServiceHandler) ListIssueComments(context.Context, *connect_go.Request[v1.ListIssueCommentsRequest]) (*connect_go.Response[v1.ListIssueCommentsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bytebase.v1.IssueService.ListIssueComments is not implemented"))
}

func (UnimplementedIssueServiceHandler) CreateIssueComment(context.Context, *connect_go.Request[v1.CreateIssueCommentRequest]) (*connect_go.Response[v1.IssueComment], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bytebase.v1.IssueService.CreateIssueComment is not implemented"))
}

func (UnimplementedIssueServiceHandler) UpdateIssueComment(context.Context, *connect_go.Request[v1.UpdateIssueCommentRequest]) (*connect_go.Response[v1.IssueComment], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bytebase.v1.IssueService.UpdateIssueComment is not implemented"))
}

func (UnimplementedIssueServiceHandler) BatchUpdateIssuesStatus(context.Context, *connect_go.Request[v1.BatchUpdateIssuesStatusRequest]) (*connect_go.Response[v1.BatchUpdateIssuesStatusResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bytebase.v1.IssueService.BatchUpdateIssuesStatus is not implemented"))
}

func (UnimplementedIssueServiceHandler) ApproveIssue(context.Context, *connect_go.Request[v1.ApproveIssueRequest]) (*connect_go.Response[v1.Issue], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bytebase.v1.IssueService.ApproveIssue is not implemented"))
}

func (UnimplementedIssueServiceHandler) RejectIssue(context.Context, *connect_go.Request[v1.RejectIssueRequest]) (*connect_go.Response[v1.Issue], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bytebase.v1.IssueService.RejectIssue is not implemented"))
}

func (UnimplementedIssueServiceHandler) RequestIssue(context.Context, *connect_go.Request[v1.RequestIssueRequest]) (*connect_go.Response[v1.Issue], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bytebase.v1.IssueService.RequestIssue is not implemented"))
}
