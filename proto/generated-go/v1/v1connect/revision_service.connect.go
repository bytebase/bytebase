// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: v1/revision_service.proto

package v1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/bytebase/bytebase/proto/generated-go/v1"
	connect_go "github.com/bufbuild/connect-go"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// RevisionServiceName is the fully-qualified name of the RevisionService service.
	RevisionServiceName = "bytebase.v1.RevisionService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RevisionServiceListRevisionsProcedure is the fully-qualified name of the RevisionService's
	// ListRevisions RPC.
	RevisionServiceListRevisionsProcedure = "/bytebase.v1.RevisionService/ListRevisions"
	// RevisionServiceGetRevisionProcedure is the fully-qualified name of the RevisionService's
	// GetRevision RPC.
	RevisionServiceGetRevisionProcedure = "/bytebase.v1.RevisionService/GetRevision"
	// RevisionServiceCreateRevisionProcedure is the fully-qualified name of the RevisionService's
	// CreateRevision RPC.
	RevisionServiceCreateRevisionProcedure = "/bytebase.v1.RevisionService/CreateRevision"
	// RevisionServiceBatchCreateRevisionsProcedure is the fully-qualified name of the RevisionService's
	// BatchCreateRevisions RPC.
	RevisionServiceBatchCreateRevisionsProcedure = "/bytebase.v1.RevisionService/BatchCreateRevisions"
	// RevisionServiceDeleteRevisionProcedure is the fully-qualified name of the RevisionService's
	// DeleteRevision RPC.
	RevisionServiceDeleteRevisionProcedure = "/bytebase.v1.RevisionService/DeleteRevision"
)

// RevisionServiceClient is a client for the bytebase.v1.RevisionService service.
type RevisionServiceClient interface {
	ListRevisions(context.Context, *connect_go.Request[v1.ListRevisionsRequest]) (*connect_go.Response[v1.ListRevisionsResponse], error)
	GetRevision(context.Context, *connect_go.Request[v1.GetRevisionRequest]) (*connect_go.Response[v1.Revision], error)
	CreateRevision(context.Context, *connect_go.Request[v1.CreateRevisionRequest]) (*connect_go.Response[v1.Revision], error)
	BatchCreateRevisions(context.Context, *connect_go.Request[v1.BatchCreateRevisionsRequest]) (*connect_go.Response[v1.BatchCreateRevisionsResponse], error)
	DeleteRevision(context.Context, *connect_go.Request[v1.DeleteRevisionRequest]) (*connect_go.Response[emptypb.Empty], error)
}

// NewRevisionServiceClient constructs a client for the bytebase.v1.RevisionService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRevisionServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) RevisionServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &revisionServiceClient{
		listRevisions: connect_go.NewClient[v1.ListRevisionsRequest, v1.ListRevisionsResponse](
			httpClient,
			baseURL+RevisionServiceListRevisionsProcedure,
			opts...,
		),
		getRevision: connect_go.NewClient[v1.GetRevisionRequest, v1.Revision](
			httpClient,
			baseURL+RevisionServiceGetRevisionProcedure,
			opts...,
		),
		createRevision: connect_go.NewClient[v1.CreateRevisionRequest, v1.Revision](
			httpClient,
			baseURL+RevisionServiceCreateRevisionProcedure,
			opts...,
		),
		batchCreateRevisions: connect_go.NewClient[v1.BatchCreateRevisionsRequest, v1.BatchCreateRevisionsResponse](
			httpClient,
			baseURL+RevisionServiceBatchCreateRevisionsProcedure,
			opts...,
		),
		deleteRevision: connect_go.NewClient[v1.DeleteRevisionRequest, emptypb.Empty](
			httpClient,
			baseURL+RevisionServiceDeleteRevisionProcedure,
			opts...,
		),
	}
}

// revisionServiceClient implements RevisionServiceClient.
type revisionServiceClient struct {
	listRevisions        *connect_go.Client[v1.ListRevisionsRequest, v1.ListRevisionsResponse]
	getRevision          *connect_go.Client[v1.GetRevisionRequest, v1.Revision]
	createRevision       *connect_go.Client[v1.CreateRevisionRequest, v1.Revision]
	batchCreateRevisions *connect_go.Client[v1.BatchCreateRevisionsRequest, v1.BatchCreateRevisionsResponse]
	deleteRevision       *connect_go.Client[v1.DeleteRevisionRequest, emptypb.Empty]
}

// ListRevisions calls bytebase.v1.RevisionService.ListRevisions.
func (c *revisionServiceClient) ListRevisions(ctx context.Context, req *connect_go.Request[v1.ListRevisionsRequest]) (*connect_go.Response[v1.ListRevisionsResponse], error) {
	return c.listRevisions.CallUnary(ctx, req)
}

// GetRevision calls bytebase.v1.RevisionService.GetRevision.
func (c *revisionServiceClient) GetRevision(ctx context.Context, req *connect_go.Request[v1.GetRevisionRequest]) (*connect_go.Response[v1.Revision], error) {
	return c.getRevision.CallUnary(ctx, req)
}

// CreateRevision calls bytebase.v1.RevisionService.CreateRevision.
func (c *revisionServiceClient) CreateRevision(ctx context.Context, req *connect_go.Request[v1.CreateRevisionRequest]) (*connect_go.Response[v1.Revision], error) {
	return c.createRevision.CallUnary(ctx, req)
}

// BatchCreateRevisions calls bytebase.v1.RevisionService.BatchCreateRevisions.
func (c *revisionServiceClient) BatchCreateRevisions(ctx context.Context, req *connect_go.Request[v1.BatchCreateRevisionsRequest]) (*connect_go.Response[v1.BatchCreateRevisionsResponse], error) {
	return c.batchCreateRevisions.CallUnary(ctx, req)
}

// DeleteRevision calls bytebase.v1.RevisionService.DeleteRevision.
func (c *revisionServiceClient) DeleteRevision(ctx context.Context, req *connect_go.Request[v1.DeleteRevisionRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.deleteRevision.CallUnary(ctx, req)
}

// RevisionServiceHandler is an implementation of the bytebase.v1.RevisionService service.
type RevisionServiceHandler interface {
	ListRevisions(context.Context, *connect_go.Request[v1.ListRevisionsRequest]) (*connect_go.Response[v1.ListRevisionsResponse], error)
	GetRevision(context.Context, *connect_go.Request[v1.GetRevisionRequest]) (*connect_go.Response[v1.Revision], error)
	CreateRevision(context.Context, *connect_go.Request[v1.CreateRevisionRequest]) (*connect_go.Response[v1.Revision], error)
	BatchCreateRevisions(context.Context, *connect_go.Request[v1.BatchCreateRevisionsRequest]) (*connect_go.Response[v1.BatchCreateRevisionsResponse], error)
	DeleteRevision(context.Context, *connect_go.Request[v1.DeleteRevisionRequest]) (*connect_go.Response[emptypb.Empty], error)
}

// NewRevisionServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRevisionServiceHandler(svc RevisionServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	revisionServiceListRevisionsHandler := connect_go.NewUnaryHandler(
		RevisionServiceListRevisionsProcedure,
		svc.ListRevisions,
		opts...,
	)
	revisionServiceGetRevisionHandler := connect_go.NewUnaryHandler(
		RevisionServiceGetRevisionProcedure,
		svc.GetRevision,
		opts...,
	)
	revisionServiceCreateRevisionHandler := connect_go.NewUnaryHandler(
		RevisionServiceCreateRevisionProcedure,
		svc.CreateRevision,
		opts...,
	)
	revisionServiceBatchCreateRevisionsHandler := connect_go.NewUnaryHandler(
		RevisionServiceBatchCreateRevisionsProcedure,
		svc.BatchCreateRevisions,
		opts...,
	)
	revisionServiceDeleteRevisionHandler := connect_go.NewUnaryHandler(
		RevisionServiceDeleteRevisionProcedure,
		svc.DeleteRevision,
		opts...,
	)
	return "/bytebase.v1.RevisionService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RevisionServiceListRevisionsProcedure:
			revisionServiceListRevisionsHandler.ServeHTTP(w, r)
		case RevisionServiceGetRevisionProcedure:
			revisionServiceGetRevisionHandler.ServeHTTP(w, r)
		case RevisionServiceCreateRevisionProcedure:
			revisionServiceCreateRevisionHandler.ServeHTTP(w, r)
		case RevisionServiceBatchCreateRevisionsProcedure:
			revisionServiceBatchCreateRevisionsHandler.ServeHTTP(w, r)
		case RevisionServiceDeleteRevisionProcedure:
			revisionServiceDeleteRevisionHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRevisionServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRevisionServiceHandler struct{}

func (UnimplementedRevisionServiceHandler) ListRevisions(context.Context, *connect_go.Request[v1.ListRevisionsRequest]) (*connect_go.Response[v1.ListRevisionsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bytebase.v1.RevisionService.ListRevisions is not implemented"))
}

func (UnimplementedRevisionServiceHandler) GetRevision(context.Context, *connect_go.Request[v1.GetRevisionRequest]) (*connect_go.Response[v1.Revision], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bytebase.v1.RevisionService.GetRevision is not implemented"))
}

func (UnimplementedRevisionServiceHandler) CreateRevision(context.Context, *connect_go.Request[v1.CreateRevisionRequest]) (*connect_go.Response[v1.Revision], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bytebase.v1.RevisionService.CreateRevision is not implemented"))
}

func (UnimplementedRevisionServiceHandler) BatchCreateRevisions(context.Context, *connect_go.Request[v1.BatchCreateRevisionsRequest]) (*connect_go.Response[v1.BatchCreateRevisionsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bytebase.v1.RevisionService.BatchCreateRevisions is not implemented"))
}

func (UnimplementedRevisionServiceHandler) DeleteRevision(context.Context, *connect_go.Request[v1.DeleteRevisionRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("bytebase.v1.RevisionService.DeleteRevision is not implemented"))
}
