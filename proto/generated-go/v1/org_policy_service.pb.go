// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: v1/org_policy_service.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	expr "google.golang.org/genproto/googleapis/type/expr"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PolicyType int32

const (
	PolicyType_POLICY_TYPE_UNSPECIFIED PolicyType = 0
	PolicyType_WORKSPACE_IAM           PolicyType = 1
	PolicyType_DEPLOYMENT_APPROVAL     PolicyType = 2
	PolicyType_ROLLOUT_POLICY          PolicyType = 11
	PolicyType_BACKUP_PLAN             PolicyType = 3
	PolicyType_SQL_REVIEW              PolicyType = 4
	PolicyType_MASKING                 PolicyType = 5
	PolicyType_SLOW_QUERY              PolicyType = 7
	PolicyType_DISABLE_COPY_DATA       PolicyType = 8
	PolicyType_MASKING_RULE            PolicyType = 9
	PolicyType_MASKING_EXCEPTION       PolicyType = 10
)

// Enum value maps for PolicyType.
var (
	PolicyType_name = map[int32]string{
		0:  "POLICY_TYPE_UNSPECIFIED",
		1:  "WORKSPACE_IAM",
		2:  "DEPLOYMENT_APPROVAL",
		11: "ROLLOUT_POLICY",
		3:  "BACKUP_PLAN",
		4:  "SQL_REVIEW",
		5:  "MASKING",
		7:  "SLOW_QUERY",
		8:  "DISABLE_COPY_DATA",
		9:  "MASKING_RULE",
		10: "MASKING_EXCEPTION",
	}
	PolicyType_value = map[string]int32{
		"POLICY_TYPE_UNSPECIFIED": 0,
		"WORKSPACE_IAM":           1,
		"DEPLOYMENT_APPROVAL":     2,
		"ROLLOUT_POLICY":          11,
		"BACKUP_PLAN":             3,
		"SQL_REVIEW":              4,
		"MASKING":                 5,
		"SLOW_QUERY":              7,
		"DISABLE_COPY_DATA":       8,
		"MASKING_RULE":            9,
		"MASKING_EXCEPTION":       10,
	}
)

func (x PolicyType) Enum() *PolicyType {
	p := new(PolicyType)
	*p = x
	return p
}

func (x PolicyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PolicyType) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_org_policy_service_proto_enumTypes[0].Descriptor()
}

func (PolicyType) Type() protoreflect.EnumType {
	return &file_v1_org_policy_service_proto_enumTypes[0]
}

func (x PolicyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PolicyType.Descriptor instead.
func (PolicyType) EnumDescriptor() ([]byte, []int) {
	return file_v1_org_policy_service_proto_rawDescGZIP(), []int{0}
}

type PolicyResourceType int32

const (
	PolicyResourceType_RESOURCE_TYPE_UNSPECIFIED PolicyResourceType = 0
	PolicyResourceType_WORKSPACE                 PolicyResourceType = 1
	PolicyResourceType_ENVIRONMENT               PolicyResourceType = 2
	PolicyResourceType_PROJECT                   PolicyResourceType = 3
	PolicyResourceType_INSTANCE                  PolicyResourceType = 4
	PolicyResourceType_DATABASE                  PolicyResourceType = 5
)

// Enum value maps for PolicyResourceType.
var (
	PolicyResourceType_name = map[int32]string{
		0: "RESOURCE_TYPE_UNSPECIFIED",
		1: "WORKSPACE",
		2: "ENVIRONMENT",
		3: "PROJECT",
		4: "INSTANCE",
		5: "DATABASE",
	}
	PolicyResourceType_value = map[string]int32{
		"RESOURCE_TYPE_UNSPECIFIED": 0,
		"WORKSPACE":                 1,
		"ENVIRONMENT":               2,
		"PROJECT":                   3,
		"INSTANCE":                  4,
		"DATABASE":                  5,
	}
)

func (x PolicyResourceType) Enum() *PolicyResourceType {
	p := new(PolicyResourceType)
	*p = x
	return p
}

func (x PolicyResourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PolicyResourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_org_policy_service_proto_enumTypes[1].Descriptor()
}

func (PolicyResourceType) Type() protoreflect.EnumType {
	return &file_v1_org_policy_service_proto_enumTypes[1]
}

func (x PolicyResourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PolicyResourceType.Descriptor instead.
func (PolicyResourceType) EnumDescriptor() ([]byte, []int) {
	return file_v1_org_policy_service_proto_rawDescGZIP(), []int{1}
}

type ApprovalGroup int32

const (
	ApprovalGroup_ASSIGNEE_GROUP_UNSPECIFIED   ApprovalGroup = 0
	ApprovalGroup_APPROVAL_GROUP_DBA           ApprovalGroup = 1
	ApprovalGroup_APPROVAL_GROUP_PROJECT_OWNER ApprovalGroup = 2
)

// Enum value maps for ApprovalGroup.
var (
	ApprovalGroup_name = map[int32]string{
		0: "ASSIGNEE_GROUP_UNSPECIFIED",
		1: "APPROVAL_GROUP_DBA",
		2: "APPROVAL_GROUP_PROJECT_OWNER",
	}
	ApprovalGroup_value = map[string]int32{
		"ASSIGNEE_GROUP_UNSPECIFIED":   0,
		"APPROVAL_GROUP_DBA":           1,
		"APPROVAL_GROUP_PROJECT_OWNER": 2,
	}
)

func (x ApprovalGroup) Enum() *ApprovalGroup {
	p := new(ApprovalGroup)
	*p = x
	return p
}

func (x ApprovalGroup) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ApprovalGroup) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_org_policy_service_proto_enumTypes[2].Descriptor()
}

func (ApprovalGroup) Type() protoreflect.EnumType {
	return &file_v1_org_policy_service_proto_enumTypes[2]
}

func (x ApprovalGroup) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ApprovalGroup.Descriptor instead.
func (ApprovalGroup) EnumDescriptor() ([]byte, []int) {
	return file_v1_org_policy_service_proto_rawDescGZIP(), []int{2}
}

type ApprovalStrategy int32

const (
	ApprovalStrategy_APPROVAL_STRATEGY_UNSPECIFIED ApprovalStrategy = 0
	ApprovalStrategy_AUTOMATIC                     ApprovalStrategy = 1
	ApprovalStrategy_MANUAL                        ApprovalStrategy = 2
)

// Enum value maps for ApprovalStrategy.
var (
	ApprovalStrategy_name = map[int32]string{
		0: "APPROVAL_STRATEGY_UNSPECIFIED",
		1: "AUTOMATIC",
		2: "MANUAL",
	}
	ApprovalStrategy_value = map[string]int32{
		"APPROVAL_STRATEGY_UNSPECIFIED": 0,
		"AUTOMATIC":                     1,
		"MANUAL":                        2,
	}
)

func (x ApprovalStrategy) Enum() *ApprovalStrategy {
	p := new(ApprovalStrategy)
	*p = x
	return p
}

func (x ApprovalStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ApprovalStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_org_policy_service_proto_enumTypes[3].Descriptor()
}

func (ApprovalStrategy) Type() protoreflect.EnumType {
	return &file_v1_org_policy_service_proto_enumTypes[3]
}

func (x ApprovalStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ApprovalStrategy.Descriptor instead.
func (ApprovalStrategy) EnumDescriptor() ([]byte, []int) {
	return file_v1_org_policy_service_proto_rawDescGZIP(), []int{3}
}

type BackupPlanSchedule int32

const (
	BackupPlanSchedule_SCHEDULE_UNSPECIFIED BackupPlanSchedule = 0
	BackupPlanSchedule_UNSET                BackupPlanSchedule = 1
	BackupPlanSchedule_DAILY                BackupPlanSchedule = 2
	BackupPlanSchedule_WEEKLY               BackupPlanSchedule = 3
)

// Enum value maps for BackupPlanSchedule.
var (
	BackupPlanSchedule_name = map[int32]string{
		0: "SCHEDULE_UNSPECIFIED",
		1: "UNSET",
		2: "DAILY",
		3: "WEEKLY",
	}
	BackupPlanSchedule_value = map[string]int32{
		"SCHEDULE_UNSPECIFIED": 0,
		"UNSET":                1,
		"DAILY":                2,
		"WEEKLY":               3,
	}
)

func (x BackupPlanSchedule) Enum() *BackupPlanSchedule {
	p := new(BackupPlanSchedule)
	*p = x
	return p
}

func (x BackupPlanSchedule) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BackupPlanSchedule) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_org_policy_service_proto_enumTypes[4].Descriptor()
}

func (BackupPlanSchedule) Type() protoreflect.EnumType {
	return &file_v1_org_policy_service_proto_enumTypes[4]
}

func (x BackupPlanSchedule) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BackupPlanSchedule.Descriptor instead.
func (BackupPlanSchedule) EnumDescriptor() ([]byte, []int) {
	return file_v1_org_policy_service_proto_rawDescGZIP(), []int{4}
}

type SQLReviewRuleLevel int32

const (
	SQLReviewRuleLevel_LEVEL_UNSPECIFIED SQLReviewRuleLevel = 0
	SQLReviewRuleLevel_ERROR             SQLReviewRuleLevel = 1
	SQLReviewRuleLevel_WARNING           SQLReviewRuleLevel = 2
	SQLReviewRuleLevel_DISABLED          SQLReviewRuleLevel = 3
)

// Enum value maps for SQLReviewRuleLevel.
var (
	SQLReviewRuleLevel_name = map[int32]string{
		0: "LEVEL_UNSPECIFIED",
		1: "ERROR",
		2: "WARNING",
		3: "DISABLED",
	}
	SQLReviewRuleLevel_value = map[string]int32{
		"LEVEL_UNSPECIFIED": 0,
		"ERROR":             1,
		"WARNING":           2,
		"DISABLED":          3,
	}
)

func (x SQLReviewRuleLevel) Enum() *SQLReviewRuleLevel {
	p := new(SQLReviewRuleLevel)
	*p = x
	return p
}

func (x SQLReviewRuleLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SQLReviewRuleLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_org_policy_service_proto_enumTypes[5].Descriptor()
}

func (SQLReviewRuleLevel) Type() protoreflect.EnumType {
	return &file_v1_org_policy_service_proto_enumTypes[5]
}

func (x SQLReviewRuleLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SQLReviewRuleLevel.Descriptor instead.
func (SQLReviewRuleLevel) EnumDescriptor() ([]byte, []int) {
	return file_v1_org_policy_service_proto_rawDescGZIP(), []int{5}
}

type MaskingExceptionPolicy_MaskingException_Action int32

const (
	MaskingExceptionPolicy_MaskingException_ACTION_UNSPECIFIED MaskingExceptionPolicy_MaskingException_Action = 0
	MaskingExceptionPolicy_MaskingException_QUERY              MaskingExceptionPolicy_MaskingException_Action = 1
	MaskingExceptionPolicy_MaskingException_EXPORT             MaskingExceptionPolicy_MaskingException_Action = 2
)

// Enum value maps for MaskingExceptionPolicy_MaskingException_Action.
var (
	MaskingExceptionPolicy_MaskingException_Action_name = map[int32]string{
		0: "ACTION_UNSPECIFIED",
		1: "QUERY",
		2: "EXPORT",
	}
	MaskingExceptionPolicy_MaskingException_Action_value = map[string]int32{
		"ACTION_UNSPECIFIED": 0,
		"QUERY":              1,
		"EXPORT":             2,
	}
)

func (x MaskingExceptionPolicy_MaskingException_Action) Enum() *MaskingExceptionPolicy_MaskingException_Action {
	p := new(MaskingExceptionPolicy_MaskingException_Action)
	*p = x
	return p
}

func (x MaskingExceptionPolicy_MaskingException_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MaskingExceptionPolicy_MaskingException_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_org_policy_service_proto_enumTypes[6].Descriptor()
}

func (MaskingExceptionPolicy_MaskingException_Action) Type() protoreflect.EnumType {
	return &file_v1_org_policy_service_proto_enumTypes[6]
}

func (x MaskingExceptionPolicy_MaskingException_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MaskingExceptionPolicy_MaskingException_Action.Descriptor instead.
func (MaskingExceptionPolicy_MaskingException_Action) EnumDescriptor() ([]byte, []int) {
	return file_v1_org_policy_service_proto_rawDescGZIP(), []int{17, 0, 0}
}

type CreatePolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The parent resource where this instance will be created.
	// Workspace resource name: "".
	// Environment resource name: environments/environment-id.
	// Instance resource name: instances/instance-id.
	// Database resource name: instances/instance-id/databases/database-name.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The policy to create.
	Policy *Policy    `protobuf:"bytes,2,opt,name=policy,proto3" json:"policy,omitempty"`
	Type   PolicyType `protobuf:"varint,3,opt,name=type,proto3,enum=bytebase.v1.PolicyType" json:"type,omitempty"`
}

func (x *CreatePolicyRequest) Reset() {
	*x = CreatePolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_org_policy_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePolicyRequest) ProtoMessage() {}

func (x *CreatePolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_org_policy_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePolicyRequest.ProtoReflect.Descriptor instead.
func (*CreatePolicyRequest) Descriptor() ([]byte, []int) {
	return file_v1_org_policy_service_proto_rawDescGZIP(), []int{0}
}

func (x *CreatePolicyRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreatePolicyRequest) GetPolicy() *Policy {
	if x != nil {
		return x.Policy
	}
	return nil
}

func (x *CreatePolicyRequest) GetType() PolicyType {
	if x != nil {
		return x.Type
	}
	return PolicyType_POLICY_TYPE_UNSPECIFIED
}

type UpdatePolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The policy to update.
	//
	// The policy's `name` field is used to identify the instance to update.
	// Format: {resource name}/policies/{policy type}
	// Workspace resource name: "".
	// Environment resource name: environments/environment-id.
	// Instance resource name: instances/instance-id.
	// Database resource name: instances/instance-id/databases/database-name.
	Policy *Policy `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
	// The list of fields to update.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// If set to true, and the policy is not found, a new policy will be created.
	// In this situation, `update_mask` is ignored.
	AllowMissing bool `protobuf:"varint,3,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
}

func (x *UpdatePolicyRequest) Reset() {
	*x = UpdatePolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_org_policy_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePolicyRequest) ProtoMessage() {}

func (x *UpdatePolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_org_policy_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePolicyRequest.ProtoReflect.Descriptor instead.
func (*UpdatePolicyRequest) Descriptor() ([]byte, []int) {
	return file_v1_org_policy_service_proto_rawDescGZIP(), []int{1}
}

func (x *UpdatePolicyRequest) GetPolicy() *Policy {
	if x != nil {
		return x.Policy
	}
	return nil
}

func (x *UpdatePolicyRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdatePolicyRequest) GetAllowMissing() bool {
	if x != nil {
		return x.AllowMissing
	}
	return false
}

type DeletePolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The policy's `name` field is used to identify the instance to update.
	// Format: {resource name}/policies/{policy type}
	// Workspace resource name: "".
	// Environment resource name: environments/environment-id.
	// Instance resource name: instances/instance-id.
	// Database resource name: instances/instance-id/databases/database-name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeletePolicyRequest) Reset() {
	*x = DeletePolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_org_policy_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePolicyRequest) ProtoMessage() {}

func (x *DeletePolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_org_policy_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePolicyRequest.ProtoReflect.Descriptor instead.
func (*DeletePolicyRequest) Descriptor() ([]byte, []int) {
	return file_v1_org_policy_service_proto_rawDescGZIP(), []int{2}
}

func (x *DeletePolicyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetPolicyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the policy to retrieve.
	// Format: {resource type}/{resource id}/policies/{policy type}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *GetPolicyRequest) Reset() {
	*x = GetPolicyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_org_policy_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPolicyRequest) ProtoMessage() {}

func (x *GetPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_org_policy_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPolicyRequest.ProtoReflect.Descriptor instead.
func (*GetPolicyRequest) Descriptor() ([]byte, []int) {
	return file_v1_org_policy_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetPolicyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListPoliciesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The parent, which owns this collection of policies.
	// Format: {resource type}/{resource id}/policies/{policy type}
	Parent     string      `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	PolicyType *PolicyType `protobuf:"varint,2,opt,name=policy_type,json=policyType,proto3,enum=bytebase.v1.PolicyType,oneof" json:"policy_type,omitempty"`
	// The maximum number of policies to return. The service may return fewer than
	// this value.
	// If unspecified, at most 50 policies will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `GetPolicies` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `GetPolicies` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Show deleted policies if specified.
	ShowDeleted bool `protobuf:"varint,5,opt,name=show_deleted,json=showDeleted,proto3" json:"show_deleted,omitempty"`
}

func (x *ListPoliciesRequest) Reset() {
	*x = ListPoliciesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_org_policy_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPoliciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPoliciesRequest) ProtoMessage() {}

func (x *ListPoliciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_org_policy_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPoliciesRequest.ProtoReflect.Descriptor instead.
func (*ListPoliciesRequest) Descriptor() ([]byte, []int) {
	return file_v1_org_policy_service_proto_rawDescGZIP(), []int{4}
}

func (x *ListPoliciesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListPoliciesRequest) GetPolicyType() PolicyType {
	if x != nil && x.PolicyType != nil {
		return *x.PolicyType
	}
	return PolicyType_POLICY_TYPE_UNSPECIFIED
}

func (x *ListPoliciesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListPoliciesRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListPoliciesRequest) GetShowDeleted() bool {
	if x != nil {
		return x.ShowDeleted
	}
	return false
}

type ListPoliciesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The policies from the specified request.
	Policies []*Policy `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
}

func (x *ListPoliciesResponse) Reset() {
	*x = ListPoliciesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_org_policy_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPoliciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPoliciesResponse) ProtoMessage() {}

func (x *ListPoliciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_org_policy_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPoliciesResponse.ProtoReflect.Descriptor instead.
func (*ListPoliciesResponse) Descriptor() ([]byte, []int) {
	return file_v1_org_policy_service_proto_rawDescGZIP(), []int{5}
}

func (x *ListPoliciesResponse) GetPolicies() []*Policy {
	if x != nil {
		return x.Policies
	}
	return nil
}

func (x *ListPoliciesResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type Policy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the policy.
	// Format: {resource name}/policies/{policy type}
	// Workspace resource name: "".
	// Environment resource name: environments/environment-id.
	// Instance resource name: instances/instance-id.
	// Database resource name: instances/instance-id/databases/database-name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The system-assigned, unique identifier for a resource.
	Uid               string     `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty"`
	InheritFromParent bool       `protobuf:"varint,4,opt,name=inherit_from_parent,json=inheritFromParent,proto3" json:"inherit_from_parent,omitempty"`
	Type              PolicyType `protobuf:"varint,5,opt,name=type,proto3,enum=bytebase.v1.PolicyType" json:"type,omitempty"`
	// Types that are assignable to Policy:
	//
	//	*Policy_WorkspaceIamPolicy
	//	*Policy_DeploymentApprovalPolicy
	//	*Policy_RolloutPolicy
	//	*Policy_BackupPlanPolicy
	//	*Policy_MaskingPolicy
	//	*Policy_SqlReviewPolicy
	//	*Policy_SlowQueryPolicy
	//	*Policy_DisableCopyDataPolicy
	//	*Policy_MaskingRulePolicy
	//	*Policy_MaskingExceptionPolicy
	Policy  isPolicy_Policy `protobuf_oneof:"policy"`
	Enforce bool            `protobuf:"varint,13,opt,name=enforce,proto3" json:"enforce,omitempty"`
	// The resource type for the policy.
	ResourceType PolicyResourceType `protobuf:"varint,14,opt,name=resource_type,json=resourceType,proto3,enum=bytebase.v1.PolicyResourceType" json:"resource_type,omitempty"`
	// The system-assigned, unique identifier for the resource.
	ResourceUid string `protobuf:"bytes,15,opt,name=resource_uid,json=resourceUid,proto3" json:"resource_uid,omitempty"`
}

func (x *Policy) Reset() {
	*x = Policy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_org_policy_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy) ProtoMessage() {}

func (x *Policy) ProtoReflect() protoreflect.Message {
	mi := &file_v1_org_policy_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy.ProtoReflect.Descriptor instead.
func (*Policy) Descriptor() ([]byte, []int) {
	return file_v1_org_policy_service_proto_rawDescGZIP(), []int{6}
}

func (x *Policy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Policy) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *Policy) GetInheritFromParent() bool {
	if x != nil {
		return x.InheritFromParent
	}
	return false
}

func (x *Policy) GetType() PolicyType {
	if x != nil {
		return x.Type
	}
	return PolicyType_POLICY_TYPE_UNSPECIFIED
}

func (m *Policy) GetPolicy() isPolicy_Policy {
	if m != nil {
		return m.Policy
	}
	return nil
}

func (x *Policy) GetWorkspaceIamPolicy() *IamPolicy {
	if x, ok := x.GetPolicy().(*Policy_WorkspaceIamPolicy); ok {
		return x.WorkspaceIamPolicy
	}
	return nil
}

func (x *Policy) GetDeploymentApprovalPolicy() *DeploymentApprovalPolicy {
	if x, ok := x.GetPolicy().(*Policy_DeploymentApprovalPolicy); ok {
		return x.DeploymentApprovalPolicy
	}
	return nil
}

func (x *Policy) GetRolloutPolicy() *RolloutPolicy {
	if x, ok := x.GetPolicy().(*Policy_RolloutPolicy); ok {
		return x.RolloutPolicy
	}
	return nil
}

func (x *Policy) GetBackupPlanPolicy() *BackupPlanPolicy {
	if x, ok := x.GetPolicy().(*Policy_BackupPlanPolicy); ok {
		return x.BackupPlanPolicy
	}
	return nil
}

func (x *Policy) GetMaskingPolicy() *MaskingPolicy {
	if x, ok := x.GetPolicy().(*Policy_MaskingPolicy); ok {
		return x.MaskingPolicy
	}
	return nil
}

func (x *Policy) GetSqlReviewPolicy() *SQLReviewPolicy {
	if x, ok := x.GetPolicy().(*Policy_SqlReviewPolicy); ok {
		return x.SqlReviewPolicy
	}
	return nil
}

func (x *Policy) GetSlowQueryPolicy() *SlowQueryPolicy {
	if x, ok := x.GetPolicy().(*Policy_SlowQueryPolicy); ok {
		return x.SlowQueryPolicy
	}
	return nil
}

func (x *Policy) GetDisableCopyDataPolicy() *DisableCopyDataPolicy {
	if x, ok := x.GetPolicy().(*Policy_DisableCopyDataPolicy); ok {
		return x.DisableCopyDataPolicy
	}
	return nil
}

func (x *Policy) GetMaskingRulePolicy() *MaskingRulePolicy {
	if x, ok := x.GetPolicy().(*Policy_MaskingRulePolicy); ok {
		return x.MaskingRulePolicy
	}
	return nil
}

func (x *Policy) GetMaskingExceptionPolicy() *MaskingExceptionPolicy {
	if x, ok := x.GetPolicy().(*Policy_MaskingExceptionPolicy); ok {
		return x.MaskingExceptionPolicy
	}
	return nil
}

func (x *Policy) GetEnforce() bool {
	if x != nil {
		return x.Enforce
	}
	return false
}

func (x *Policy) GetResourceType() PolicyResourceType {
	if x != nil {
		return x.ResourceType
	}
	return PolicyResourceType_RESOURCE_TYPE_UNSPECIFIED
}

func (x *Policy) GetResourceUid() string {
	if x != nil {
		return x.ResourceUid
	}
	return ""
}

type isPolicy_Policy interface {
	isPolicy_Policy()
}

type Policy_WorkspaceIamPolicy struct {
	WorkspaceIamPolicy *IamPolicy `protobuf:"bytes,6,opt,name=workspace_iam_policy,json=workspaceIamPolicy,proto3,oneof"`
}

type Policy_DeploymentApprovalPolicy struct {
	DeploymentApprovalPolicy *DeploymentApprovalPolicy `protobuf:"bytes,7,opt,name=deployment_approval_policy,json=deploymentApprovalPolicy,proto3,oneof"`
}

type Policy_RolloutPolicy struct {
	RolloutPolicy *RolloutPolicy `protobuf:"bytes,19,opt,name=rollout_policy,json=rolloutPolicy,proto3,oneof"`
}

type Policy_BackupPlanPolicy struct {
	BackupPlanPolicy *BackupPlanPolicy `protobuf:"bytes,8,opt,name=backup_plan_policy,json=backupPlanPolicy,proto3,oneof"`
}

type Policy_MaskingPolicy struct {
	MaskingPolicy *MaskingPolicy `protobuf:"bytes,9,opt,name=masking_policy,json=maskingPolicy,proto3,oneof"`
}

type Policy_SqlReviewPolicy struct {
	SqlReviewPolicy *SQLReviewPolicy `protobuf:"bytes,11,opt,name=sql_review_policy,json=sqlReviewPolicy,proto3,oneof"`
}

type Policy_SlowQueryPolicy struct {
	SlowQueryPolicy *SlowQueryPolicy `protobuf:"bytes,12,opt,name=slow_query_policy,json=slowQueryPolicy,proto3,oneof"`
}

type Policy_DisableCopyDataPolicy struct {
	DisableCopyDataPolicy *DisableCopyDataPolicy `protobuf:"bytes,16,opt,name=disable_copy_data_policy,json=disableCopyDataPolicy,proto3,oneof"`
}

type Policy_MaskingRulePolicy struct {
	MaskingRulePolicy *MaskingRulePolicy `protobuf:"bytes,17,opt,name=masking_rule_policy,json=maskingRulePolicy,proto3,oneof"`
}

type Policy_MaskingExceptionPolicy struct {
	MaskingExceptionPolicy *MaskingExceptionPolicy `protobuf:"bytes,18,opt,name=masking_exception_policy,json=maskingExceptionPolicy,proto3,oneof"`
}

func (*Policy_WorkspaceIamPolicy) isPolicy_Policy() {}

func (*Policy_DeploymentApprovalPolicy) isPolicy_Policy() {}

func (*Policy_RolloutPolicy) isPolicy_Policy() {}

func (*Policy_BackupPlanPolicy) isPolicy_Policy() {}

func (*Policy_MaskingPolicy) isPolicy_Policy() {}

func (*Policy_SqlReviewPolicy) isPolicy_Policy() {}

func (*Policy_SlowQueryPolicy) isPolicy_Policy() {}

func (*Policy_DisableCopyDataPolicy) isPolicy_Policy() {}

func (*Policy_MaskingRulePolicy) isPolicy_Policy() {}

func (*Policy_MaskingExceptionPolicy) isPolicy_Policy() {}

type DeploymentApprovalPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DefaultStrategy              ApprovalStrategy              `protobuf:"varint,1,opt,name=default_strategy,json=defaultStrategy,proto3,enum=bytebase.v1.ApprovalStrategy" json:"default_strategy,omitempty"`
	DeploymentApprovalStrategies []*DeploymentApprovalStrategy `protobuf:"bytes,2,rep,name=deployment_approval_strategies,json=deploymentApprovalStrategies,proto3" json:"deployment_approval_strategies,omitempty"`
}

func (x *DeploymentApprovalPolicy) Reset() {
	*x = DeploymentApprovalPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_org_policy_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentApprovalPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentApprovalPolicy) ProtoMessage() {}

func (x *DeploymentApprovalPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_v1_org_policy_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentApprovalPolicy.ProtoReflect.Descriptor instead.
func (*DeploymentApprovalPolicy) Descriptor() ([]byte, []int) {
	return file_v1_org_policy_service_proto_rawDescGZIP(), []int{7}
}

func (x *DeploymentApprovalPolicy) GetDefaultStrategy() ApprovalStrategy {
	if x != nil {
		return x.DefaultStrategy
	}
	return ApprovalStrategy_APPROVAL_STRATEGY_UNSPECIFIED
}

func (x *DeploymentApprovalPolicy) GetDeploymentApprovalStrategies() []*DeploymentApprovalStrategy {
	if x != nil {
		return x.DeploymentApprovalStrategies
	}
	return nil
}

type RolloutPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Automatic      bool     `protobuf:"varint,1,opt,name=automatic,proto3" json:"automatic,omitempty"`
	WorkspaceRoles []string `protobuf:"bytes,2,rep,name=workspace_roles,json=workspaceRoles,proto3" json:"workspace_roles,omitempty"`
	ProjectRoles   []string `protobuf:"bytes,3,rep,name=project_roles,json=projectRoles,proto3" json:"project_roles,omitempty"`
	// roles/LAST_APPROVER
	// roles/CREATOR
	IssueRoles []string `protobuf:"bytes,4,rep,name=issue_roles,json=issueRoles,proto3" json:"issue_roles,omitempty"`
}

func (x *RolloutPolicy) Reset() {
	*x = RolloutPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_org_policy_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RolloutPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RolloutPolicy) ProtoMessage() {}

func (x *RolloutPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_v1_org_policy_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RolloutPolicy.ProtoReflect.Descriptor instead.
func (*RolloutPolicy) Descriptor() ([]byte, []int) {
	return file_v1_org_policy_service_proto_rawDescGZIP(), []int{8}
}

func (x *RolloutPolicy) GetAutomatic() bool {
	if x != nil {
		return x.Automatic
	}
	return false
}

func (x *RolloutPolicy) GetWorkspaceRoles() []string {
	if x != nil {
		return x.WorkspaceRoles
	}
	return nil
}

func (x *RolloutPolicy) GetProjectRoles() []string {
	if x != nil {
		return x.ProjectRoles
	}
	return nil
}

func (x *RolloutPolicy) GetIssueRoles() []string {
	if x != nil {
		return x.IssueRoles
	}
	return nil
}

type DeploymentApprovalStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeploymentType   DeploymentType   `protobuf:"varint,1,opt,name=deployment_type,json=deploymentType,proto3,enum=bytebase.v1.DeploymentType" json:"deployment_type,omitempty"`
	ApprovalGroup    ApprovalGroup    `protobuf:"varint,2,opt,name=approval_group,json=approvalGroup,proto3,enum=bytebase.v1.ApprovalGroup" json:"approval_group,omitempty"`
	ApprovalStrategy ApprovalStrategy `protobuf:"varint,3,opt,name=approval_strategy,json=approvalStrategy,proto3,enum=bytebase.v1.ApprovalStrategy" json:"approval_strategy,omitempty"`
}

func (x *DeploymentApprovalStrategy) Reset() {
	*x = DeploymentApprovalStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_org_policy_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploymentApprovalStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentApprovalStrategy) ProtoMessage() {}

func (x *DeploymentApprovalStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_v1_org_policy_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentApprovalStrategy.ProtoReflect.Descriptor instead.
func (*DeploymentApprovalStrategy) Descriptor() ([]byte, []int) {
	return file_v1_org_policy_service_proto_rawDescGZIP(), []int{9}
}

func (x *DeploymentApprovalStrategy) GetDeploymentType() DeploymentType {
	if x != nil {
		return x.DeploymentType
	}
	return DeploymentType_DEPLOYMENT_TYPE_UNSPECIFIED
}

func (x *DeploymentApprovalStrategy) GetApprovalGroup() ApprovalGroup {
	if x != nil {
		return x.ApprovalGroup
	}
	return ApprovalGroup_ASSIGNEE_GROUP_UNSPECIFIED
}

func (x *DeploymentApprovalStrategy) GetApprovalStrategy() ApprovalStrategy {
	if x != nil {
		return x.ApprovalStrategy
	}
	return ApprovalStrategy_APPROVAL_STRATEGY_UNSPECIFIED
}

type BackupPlanPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schedule          BackupPlanSchedule   `protobuf:"varint,1,opt,name=schedule,proto3,enum=bytebase.v1.BackupPlanSchedule" json:"schedule,omitempty"`
	RetentionDuration *durationpb.Duration `protobuf:"bytes,2,opt,name=retention_duration,json=retentionDuration,proto3" json:"retention_duration,omitempty"`
}

func (x *BackupPlanPolicy) Reset() {
	*x = BackupPlanPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_org_policy_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackupPlanPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackupPlanPolicy) ProtoMessage() {}

func (x *BackupPlanPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_v1_org_policy_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackupPlanPolicy.ProtoReflect.Descriptor instead.
func (*BackupPlanPolicy) Descriptor() ([]byte, []int) {
	return file_v1_org_policy_service_proto_rawDescGZIP(), []int{10}
}

func (x *BackupPlanPolicy) GetSchedule() BackupPlanSchedule {
	if x != nil {
		return x.Schedule
	}
	return BackupPlanSchedule_SCHEDULE_UNSPECIFIED
}

func (x *BackupPlanPolicy) GetRetentionDuration() *durationpb.Duration {
	if x != nil {
		return x.RetentionDuration
	}
	return nil
}

type SlowQueryPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Active bool `protobuf:"varint,1,opt,name=active,proto3" json:"active,omitempty"`
}

func (x *SlowQueryPolicy) Reset() {
	*x = SlowQueryPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_org_policy_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SlowQueryPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SlowQueryPolicy) ProtoMessage() {}

func (x *SlowQueryPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_v1_org_policy_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SlowQueryPolicy.ProtoReflect.Descriptor instead.
func (*SlowQueryPolicy) Descriptor() ([]byte, []int) {
	return file_v1_org_policy_service_proto_rawDescGZIP(), []int{11}
}

func (x *SlowQueryPolicy) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

type DisableCopyDataPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Active bool `protobuf:"varint,1,opt,name=active,proto3" json:"active,omitempty"`
}

func (x *DisableCopyDataPolicy) Reset() {
	*x = DisableCopyDataPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_org_policy_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisableCopyDataPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisableCopyDataPolicy) ProtoMessage() {}

func (x *DisableCopyDataPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_v1_org_policy_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisableCopyDataPolicy.ProtoReflect.Descriptor instead.
func (*DisableCopyDataPolicy) Descriptor() ([]byte, []int) {
	return file_v1_org_policy_service_proto_rawDescGZIP(), []int{12}
}

func (x *DisableCopyDataPolicy) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

type MaskingPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaskData []*MaskData `protobuf:"bytes,1,rep,name=mask_data,json=maskData,proto3" json:"mask_data,omitempty"`
}

func (x *MaskingPolicy) Reset() {
	*x = MaskingPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_org_policy_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaskingPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaskingPolicy) ProtoMessage() {}

func (x *MaskingPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_v1_org_policy_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaskingPolicy.ProtoReflect.Descriptor instead.
func (*MaskingPolicy) Descriptor() ([]byte, []int) {
	return file_v1_org_policy_service_proto_rawDescGZIP(), []int{13}
}

func (x *MaskingPolicy) GetMaskData() []*MaskData {
	if x != nil {
		return x.MaskData
	}
	return nil
}

type MaskData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schema                    string       `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
	Table                     string       `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
	Column                    string       `protobuf:"bytes,3,opt,name=column,proto3" json:"column,omitempty"`
	MaskingLevel              MaskingLevel `protobuf:"varint,4,opt,name=masking_level,json=maskingLevel,proto3,enum=bytebase.v1.MaskingLevel" json:"masking_level,omitempty"`
	FullMaskingAlgorithmId    string       `protobuf:"bytes,5,opt,name=full_masking_algorithm_id,json=fullMaskingAlgorithmId,proto3" json:"full_masking_algorithm_id,omitempty"`
	PartialMaskingAlgorithmId string       `protobuf:"bytes,6,opt,name=partial_masking_algorithm_id,json=partialMaskingAlgorithmId,proto3" json:"partial_masking_algorithm_id,omitempty"`
}

func (x *MaskData) Reset() {
	*x = MaskData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_org_policy_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaskData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaskData) ProtoMessage() {}

func (x *MaskData) ProtoReflect() protoreflect.Message {
	mi := &file_v1_org_policy_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaskData.ProtoReflect.Descriptor instead.
func (*MaskData) Descriptor() ([]byte, []int) {
	return file_v1_org_policy_service_proto_rawDescGZIP(), []int{14}
}

func (x *MaskData) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *MaskData) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *MaskData) GetColumn() string {
	if x != nil {
		return x.Column
	}
	return ""
}

func (x *MaskData) GetMaskingLevel() MaskingLevel {
	if x != nil {
		return x.MaskingLevel
	}
	return MaskingLevel_MASKING_LEVEL_UNSPECIFIED
}

func (x *MaskData) GetFullMaskingAlgorithmId() string {
	if x != nil {
		return x.FullMaskingAlgorithmId
	}
	return ""
}

func (x *MaskData) GetPartialMaskingAlgorithmId() string {
	if x != nil {
		return x.PartialMaskingAlgorithmId
	}
	return ""
}

type SQLReviewPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Rules []*SQLReviewRule `protobuf:"bytes,2,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *SQLReviewPolicy) Reset() {
	*x = SQLReviewPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_org_policy_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SQLReviewPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLReviewPolicy) ProtoMessage() {}

func (x *SQLReviewPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_v1_org_policy_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLReviewPolicy.ProtoReflect.Descriptor instead.
func (*SQLReviewPolicy) Descriptor() ([]byte, []int) {
	return file_v1_org_policy_service_proto_rawDescGZIP(), []int{15}
}

func (x *SQLReviewPolicy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SQLReviewPolicy) GetRules() []*SQLReviewRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

type SQLReviewRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type    string             `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Level   SQLReviewRuleLevel `protobuf:"varint,2,opt,name=level,proto3,enum=bytebase.v1.SQLReviewRuleLevel" json:"level,omitempty"`
	Payload string             `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	Engine  Engine             `protobuf:"varint,4,opt,name=engine,proto3,enum=bytebase.v1.Engine" json:"engine,omitempty"`
	Comment string             `protobuf:"bytes,5,opt,name=comment,proto3" json:"comment,omitempty"`
}

func (x *SQLReviewRule) Reset() {
	*x = SQLReviewRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_org_policy_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SQLReviewRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLReviewRule) ProtoMessage() {}

func (x *SQLReviewRule) ProtoReflect() protoreflect.Message {
	mi := &file_v1_org_policy_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLReviewRule.ProtoReflect.Descriptor instead.
func (*SQLReviewRule) Descriptor() ([]byte, []int) {
	return file_v1_org_policy_service_proto_rawDescGZIP(), []int{16}
}

func (x *SQLReviewRule) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SQLReviewRule) GetLevel() SQLReviewRuleLevel {
	if x != nil {
		return x.Level
	}
	return SQLReviewRuleLevel_LEVEL_UNSPECIFIED
}

func (x *SQLReviewRule) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

func (x *SQLReviewRule) GetEngine() Engine {
	if x != nil {
		return x.Engine
	}
	return Engine_ENGINE_UNSPECIFIED
}

func (x *SQLReviewRule) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

// MaskingExceptionPolicy is the allowlist of users who can access sensitive data.
type MaskingExceptionPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaskingExceptions []*MaskingExceptionPolicy_MaskingException `protobuf:"bytes,1,rep,name=masking_exceptions,json=maskingExceptions,proto3" json:"masking_exceptions,omitempty"`
}

func (x *MaskingExceptionPolicy) Reset() {
	*x = MaskingExceptionPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_org_policy_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaskingExceptionPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaskingExceptionPolicy) ProtoMessage() {}

func (x *MaskingExceptionPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_v1_org_policy_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaskingExceptionPolicy.ProtoReflect.Descriptor instead.
func (*MaskingExceptionPolicy) Descriptor() ([]byte, []int) {
	return file_v1_org_policy_service_proto_rawDescGZIP(), []int{17}
}

func (x *MaskingExceptionPolicy) GetMaskingExceptions() []*MaskingExceptionPolicy_MaskingException {
	if x != nil {
		return x.MaskingExceptions
	}
	return nil
}

type MaskingRulePolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rules []*MaskingRulePolicy_MaskingRule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *MaskingRulePolicy) Reset() {
	*x = MaskingRulePolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_org_policy_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaskingRulePolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaskingRulePolicy) ProtoMessage() {}

func (x *MaskingRulePolicy) ProtoReflect() protoreflect.Message {
	mi := &file_v1_org_policy_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaskingRulePolicy.ProtoReflect.Descriptor instead.
func (*MaskingRulePolicy) Descriptor() ([]byte, []int) {
	return file_v1_org_policy_service_proto_rawDescGZIP(), []int{18}
}

func (x *MaskingRulePolicy) GetRules() []*MaskingRulePolicy_MaskingRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

type MaskingExceptionPolicy_MaskingException struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// action is the action that the user can access sensitive data.
	Action MaskingExceptionPolicy_MaskingException_Action `protobuf:"varint,1,opt,name=action,proto3,enum=bytebase.v1.MaskingExceptionPolicy_MaskingException_Action" json:"action,omitempty"`
	// Level is the masking level that the user can access sensitive data.
	MaskingLevel MaskingLevel `protobuf:"varint,2,opt,name=masking_level,json=maskingLevel,proto3,enum=bytebase.v1.MaskingLevel" json:"masking_level,omitempty"`
	// Member is the principal who bind to this exception policy instance.
	//
	// * `user:{emailid}`: An email address that represents a specific Bytebase account. For example, `alice@example.com`.
	Member string `protobuf:"bytes,3,opt,name=member,proto3" json:"member,omitempty"`
	// The condition that is associated with this exception policy instance.
	Condition *expr.Expr `protobuf:"bytes,4,opt,name=condition,proto3" json:"condition,omitempty"`
}

func (x *MaskingExceptionPolicy_MaskingException) Reset() {
	*x = MaskingExceptionPolicy_MaskingException{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_org_policy_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaskingExceptionPolicy_MaskingException) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaskingExceptionPolicy_MaskingException) ProtoMessage() {}

func (x *MaskingExceptionPolicy_MaskingException) ProtoReflect() protoreflect.Message {
	mi := &file_v1_org_policy_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaskingExceptionPolicy_MaskingException.ProtoReflect.Descriptor instead.
func (*MaskingExceptionPolicy_MaskingException) Descriptor() ([]byte, []int) {
	return file_v1_org_policy_service_proto_rawDescGZIP(), []int{17, 0}
}

func (x *MaskingExceptionPolicy_MaskingException) GetAction() MaskingExceptionPolicy_MaskingException_Action {
	if x != nil {
		return x.Action
	}
	return MaskingExceptionPolicy_MaskingException_ACTION_UNSPECIFIED
}

func (x *MaskingExceptionPolicy_MaskingException) GetMaskingLevel() MaskingLevel {
	if x != nil {
		return x.MaskingLevel
	}
	return MaskingLevel_MASKING_LEVEL_UNSPECIFIED
}

func (x *MaskingExceptionPolicy_MaskingException) GetMember() string {
	if x != nil {
		return x.Member
	}
	return ""
}

func (x *MaskingExceptionPolicy_MaskingException) GetCondition() *expr.Expr {
	if x != nil {
		return x.Condition
	}
	return nil
}

type MaskingRulePolicy_MaskingRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique identifier for a node in UUID format.
	Id           string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Condition    *expr.Expr   `protobuf:"bytes,2,opt,name=condition,proto3" json:"condition,omitempty"`
	MaskingLevel MaskingLevel `protobuf:"varint,3,opt,name=masking_level,json=maskingLevel,proto3,enum=bytebase.v1.MaskingLevel" json:"masking_level,omitempty"`
}

func (x *MaskingRulePolicy_MaskingRule) Reset() {
	*x = MaskingRulePolicy_MaskingRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_org_policy_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MaskingRulePolicy_MaskingRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaskingRulePolicy_MaskingRule) ProtoMessage() {}

func (x *MaskingRulePolicy_MaskingRule) ProtoReflect() protoreflect.Message {
	mi := &file_v1_org_policy_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaskingRulePolicy_MaskingRule.ProtoReflect.Descriptor instead.
func (*MaskingRulePolicy_MaskingRule) Descriptor() ([]byte, []int) {
	return file_v1_org_policy_service_proto_rawDescGZIP(), []int{18, 0}
}

func (x *MaskingRulePolicy_MaskingRule) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MaskingRulePolicy_MaskingRule) GetCondition() *expr.Expr {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *MaskingRulePolicy_MaskingRule) GetMaskingLevel() MaskingLevel {
	if x != nil {
		return x.MaskingLevel
	}
	return MaskingLevel_MASKING_LEVEL_UNSPECIFIED
}

var File_v1_org_policy_service_proto protoreflect.FileDescriptor

var file_v1_org_policy_service_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x76, 0x31, 0x2f, 0x6f, 0x72, 0x67, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x62,
	0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x16, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x2f, 0x65,
	0x78, 0x70, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x76, 0x31, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x76, 0x31, 0x2f, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x13, 0x76, 0x31, 0x2f, 0x69, 0x61, 0x6d, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x91, 0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41,
	0x02, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x62, 0x79, 0x74, 0x65,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x03,
	0xe0, 0x41, 0x02, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x2b, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x62, 0x79, 0x74, 0x65,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xa9, 0x01, 0x0a, 0x13, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x30, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x3b, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x61, 0x73, 0x6b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12,
	0x23, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x69, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x22, 0x2e, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0x2b, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0xe0, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x02, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x62, 0x79,
	0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x77, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x6f, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x08,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x26, 0x0a,
	0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xe3, 0x08, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x69,
	0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x6e, 0x68, 0x65, 0x72, 0x69,
	0x74, 0x46, 0x72, 0x6f, 0x6d, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x2b, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x62, 0x79, 0x74, 0x65,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x14, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x61, 0x6d, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x61, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48, 0x00,
	0x52, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x61, 0x6d, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x65, 0x0a, 0x1a, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48,
	0x00, 0x52, 0x18, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x43, 0x0a, 0x0e, 0x72,
	0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48,
	0x00, 0x52, 0x0d, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x4d, 0x0a, 0x12, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x62,
	0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x50, 0x6c, 0x61, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48, 0x00, 0x52, 0x10, 0x62,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x50, 0x6c, 0x61, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x43, 0x0a, 0x0e, 0x6d, 0x61, 0x73, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x73, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x48, 0x00, 0x52, 0x0d, 0x6d, 0x61, 0x73, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x4a, 0x0a, 0x11, 0x73, 0x71, 0x6c, 0x5f, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x51,
	0x4c, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48, 0x00, 0x52,
	0x0f, 0x73, 0x71, 0x6c, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x12, 0x4a, 0x0a, 0x11, 0x73, 0x6c, 0x6f, 0x77, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x79,
	0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6c, 0x6f, 0x77, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x6c, 0x6f,
	0x77, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x5d, 0x0a, 0x18,
	0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x70, 0x79, 0x5f, 0x64, 0x61, 0x74,
	0x61, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73,
	0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x70, 0x79, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x48, 0x00, 0x52, 0x15, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x70,
	0x79, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x50, 0x0a, 0x13, 0x6d,
	0x61, 0x73, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x75, 0x6c, 0x65, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x73, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x75,
	0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48, 0x00, 0x52, 0x11, 0x6d, 0x61, 0x73, 0x6b,
	0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x5f, 0x0a,
	0x18, 0x6d, 0x61, 0x73, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61,
	0x73, 0x6b, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x48, 0x00, 0x52, 0x16, 0x6d, 0x61, 0x73, 0x6b, 0x69, 0x6e, 0x67, 0x45,
	0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x65, 0x6e, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1f, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x75, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x03, 0xe0, 0x41, 0x03, 0x52, 0x0b,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x69, 0x64, 0x42, 0x08, 0x0a, 0x06, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4a, 0x04, 0x08, 0x0a, 0x10, 0x0b, 0x22, 0xd3, 0x01, 0x0a, 0x18,
	0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76,
	0x61, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x48, 0x0a, 0x10, 0x64, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x52, 0x0f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x12, 0x6d, 0x0a, 0x1e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x62, 0x79, 0x74,
	0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x52, 0x1c, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x69, 0x65,
	0x73, 0x22, 0x9c, 0x01, 0x0a, 0x0d, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69,
	0x63, 0x12, 0x27, 0x0a, 0x0f, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x72,
	0x6f, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x73,
	0x22, 0xf1, 0x01, 0x0a, 0x1a, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41,
	0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12,
	0x44, 0x0a, 0x0f, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x61, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0d, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x76, 0x61, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x4a, 0x0a, 0x11, 0x61, 0x70, 0x70, 0x72,
	0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x52, 0x10, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x22, 0x99, 0x01, 0x0a, 0x10, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x50,
	0x6c, 0x61, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x3b, 0x0a, 0x08, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x62, 0x79,
	0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x50, 0x6c, 0x61, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x08, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x48, 0x0a, 0x12, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x72,
	0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x29, 0x0a, 0x0f, 0x53, 0x6c, 0x6f, 0x77, 0x51, 0x75, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x2f, 0x0a, 0x15, 0x44,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x70, 0x79, 0x44, 0x61, 0x74, 0x61, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x43, 0x0a, 0x0d,
	0x4d, 0x61, 0x73, 0x6b, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x32, 0x0a,
	0x09, 0x6d, 0x61, 0x73, 0x6b, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74,
	0x61, 0x22, 0x8c, 0x02, 0x0a, 0x08, 0x4d, 0x61, 0x73, 0x6b, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x3e, 0x0a, 0x0d, 0x6d, 0x61, 0x73, 0x6b, 0x69, 0x6e, 0x67, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x62, 0x79,
	0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x73, 0x6b, 0x69, 0x6e,
	0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0c, 0x6d, 0x61, 0x73, 0x6b, 0x69, 0x6e, 0x67, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x39, 0x0a, 0x19, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x66, 0x75, 0x6c, 0x6c, 0x4d, 0x61, 0x73,
	0x6b, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x49, 0x64, 0x12,
	0x3f, 0x0a, 0x1c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x69,
	0x6e, 0x67, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x4d, 0x61,
	0x73, 0x6b, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x49, 0x64,
	0x22, 0x57, 0x0a, 0x0f, 0x53, 0x51, 0x4c, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x51, 0x4c, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x75,
	0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22, 0xbb, 0x01, 0x0a, 0x0d, 0x53, 0x51,
	0x4c, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x35, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f,
	0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x51, 0x4c,
	0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52,
	0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x2b, 0x0a, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x06, 0x65, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xa9, 0x03, 0x0a, 0x16, 0x4d, 0x61, 0x73, 0x6b,
	0x69, 0x6e, 0x67, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x63, 0x0a, 0x12, 0x6d, 0x61, 0x73, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x78,
	0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x73,
	0x6b, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x4d, 0x61, 0x73, 0x6b, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x63, 0x65, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x6d, 0x61, 0x73, 0x6b, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x63,
	0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xa9, 0x02, 0x0a, 0x10, 0x4d, 0x61, 0x73, 0x6b,
	0x69, 0x6e, 0x67, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x62,
	0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x73, 0x6b, 0x69,
	0x6e, 0x67, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x4d, 0x61, 0x73, 0x6b, 0x69, 0x6e, 0x67, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3e, 0x0a, 0x0d, 0x6d, 0x61, 0x73, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x73, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x52, 0x0c, 0x6d, 0x61, 0x73, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x09, 0x63, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52,
	0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x37, 0x0a, 0x06, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x58, 0x50, 0x4f, 0x52,
	0x54, 0x10, 0x02, 0x22, 0xe6, 0x01, 0x0a, 0x11, 0x4d, 0x61, 0x73, 0x6b, 0x69, 0x6e, 0x67, 0x52,
	0x75, 0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x40, 0x0a, 0x05, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x73, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x75,
	0x6c, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4d, 0x61, 0x73, 0x6b, 0x69, 0x6e, 0x67,
	0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x1a, 0x8e, 0x01, 0x0a, 0x0b,
	0x4d, 0x61, 0x73, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x45, 0x78, 0x70,
	0x72, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0d,
	0x6d, 0x61, 0x73, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x61, 0x73, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x0c,
	0x6d, 0x61, 0x73, 0x6b, 0x69, 0x6e, 0x67, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x2a, 0xed, 0x01, 0x0a,
	0x0a, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x50,
	0x4f, 0x4c, 0x49, 0x43, 0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x57, 0x4f, 0x52, 0x4b,
	0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x49, 0x41, 0x4d, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x44,
	0x45, 0x50, 0x4c, 0x4f, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56,
	0x41, 0x4c, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x4f, 0x4c, 0x4c, 0x4f, 0x55, 0x54, 0x5f,
	0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59, 0x10, 0x0b, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x41, 0x43, 0x4b,
	0x55, 0x50, 0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x51, 0x4c,
	0x5f, 0x52, 0x45, 0x56, 0x49, 0x45, 0x57, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x41, 0x53,
	0x4b, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x4c, 0x4f, 0x57, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c,
	0x45, 0x5f, 0x43, 0x4f, 0x50, 0x59, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x08, 0x12, 0x10, 0x0a,
	0x0c, 0x4d, 0x41, 0x53, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x55, 0x4c, 0x45, 0x10, 0x09, 0x12,
	0x15, 0x0a, 0x11, 0x4d, 0x41, 0x53, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0a, 0x22, 0x04, 0x08, 0x06, 0x10, 0x06, 0x2a, 0x7c, 0x0a, 0x12,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x52, 0x45, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x4f, 0x52, 0x4b, 0x53, 0x50, 0x41, 0x43, 0x45, 0x10, 0x01,
	0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x10,
	0x02, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x03, 0x12, 0x0c,
	0x0a, 0x08, 0x49, 0x4e, 0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08,
	0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x10, 0x05, 0x2a, 0x69, 0x0a, 0x0d, 0x41, 0x70,
	0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1e, 0x0a, 0x1a, 0x41,
	0x53, 0x53, 0x49, 0x47, 0x4e, 0x45, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x41,
	0x50, 0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x44, 0x42,
	0x41, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x41, 0x4c, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x50, 0x52, 0x4f, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x4f, 0x57,
	0x4e, 0x45, 0x52, 0x10, 0x02, 0x2a, 0x50, 0x0a, 0x10, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61,
	0x6c, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x21, 0x0a, 0x1d, 0x41, 0x50, 0x50,
	0x52, 0x4f, 0x56, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x52, 0x41, 0x54, 0x45, 0x47, 0x59, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x41, 0x55, 0x54, 0x4f, 0x4d, 0x41, 0x54, 0x49, 0x43, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4d,
	0x41, 0x4e, 0x55, 0x41, 0x4c, 0x10, 0x02, 0x2a, 0x50, 0x0a, 0x12, 0x42, 0x61, 0x63, 0x6b, 0x75,
	0x70, 0x50, 0x6c, 0x61, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x18, 0x0a,
	0x14, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x4e, 0x53, 0x45, 0x54,
	0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x41, 0x49, 0x4c, 0x59, 0x10, 0x02, 0x12, 0x0a, 0x0a,
	0x06, 0x57, 0x45, 0x45, 0x4b, 0x4c, 0x59, 0x10, 0x03, 0x2a, 0x51, 0x0a, 0x12, 0x53, 0x51, 0x4c,
	0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x75, 0x6c, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x15, 0x0a, 0x11, 0x4c, 0x45, 0x56, 0x45, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0c,
	0x0a, 0x08, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x32, 0xeb, 0x0b, 0x0a,
	0x10, 0x4f, 0x72, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x89, 0x02, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12,
	0x1d, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13,
	0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x22, 0xc7, 0x01, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0xb9, 0x01, 0x5a, 0x22, 0x12, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x5a, 0x26, 0x12, 0x24, 0x2f, 0x76, 0x31, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x2a, 0x7d,
	0x5a, 0x23, 0x12, 0x21, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x5a, 0x2f, 0x12, 0x2d, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x3d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d,
	0x65, 0x3d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0x90, 0x02,
	0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x20,
	0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0xba, 0x01, 0xda, 0x41, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xb0, 0x01,
	0x5a, 0x22, 0x12, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x5a, 0x26, 0x12, 0x24, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x3d, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x2f, 0x2a, 0x7d, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x5a, 0x23, 0x12, 0x21,
	0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x5a, 0x2f, 0x12, 0x2d, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x3d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x61, 0x74,
	0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x12, 0x0c, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x12, 0xb7, 0x02, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x20, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0xef, 0x01, 0xda, 0x41, 0x0d, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x2c, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0xd8, 0x01, 0x3a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5a, 0x2a, 0x3a, 0x06, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x22, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x5a, 0x2e, 0x3a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x22, 0x24, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x5a, 0x2b, 0x3a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x22, 0x21, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x5a, 0x37, 0x3a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22, 0x2d, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73,
	0x2f, 0x2a, 0x7d, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x22, 0x0c, 0x2f, 0x76,
	0x31, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0xe8, 0x02, 0x0a, 0x0c, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x20, 0x2e, 0x62, 0x79,
	0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e,
	0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x22, 0xa0, 0x02, 0xda, 0x41, 0x12, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2c, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x84,
	0x02, 0x3a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5a, 0x31, 0x3a, 0x06, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x32, 0x27, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a,
	0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x5a, 0x35, 0x3a, 0x06,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x32, 0x2b, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x2f, 0x2a, 0x7d, 0x5a, 0x32, 0x3a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x32, 0x28, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3d,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x5a, 0x3e, 0x3a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x32, 0x34, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6e,
	0x61, 0x6d, 0x65, 0x3d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x2f,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x32, 0x1c, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0x92, 0x02, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x20, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0xc7, 0x01, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0xb9,
	0x01, 0x5a, 0x22, 0x2a, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x5a, 0x26, 0x2a, 0x24, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x3d, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2f,
	0x2a, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x5a, 0x23, 0x2a,
	0x21, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f,
	0x2a, 0x7d, 0x5a, 0x2f, 0x2a, 0x2d, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x2f, 0x2a, 0x7d, 0x2a, 0x15, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x42, 0x11, 0x5a, 0x0f, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2d, 0x67, 0x6f, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v1_org_policy_service_proto_rawDescOnce sync.Once
	file_v1_org_policy_service_proto_rawDescData = file_v1_org_policy_service_proto_rawDesc
)

func file_v1_org_policy_service_proto_rawDescGZIP() []byte {
	file_v1_org_policy_service_proto_rawDescOnce.Do(func() {
		file_v1_org_policy_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_org_policy_service_proto_rawDescData)
	})
	return file_v1_org_policy_service_proto_rawDescData
}

var file_v1_org_policy_service_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_v1_org_policy_service_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_v1_org_policy_service_proto_goTypes = []interface{}{
	(PolicyType)(0),         // 0: bytebase.v1.PolicyType
	(PolicyResourceType)(0), // 1: bytebase.v1.PolicyResourceType
	(ApprovalGroup)(0),      // 2: bytebase.v1.ApprovalGroup
	(ApprovalStrategy)(0),   // 3: bytebase.v1.ApprovalStrategy
	(BackupPlanSchedule)(0), // 4: bytebase.v1.BackupPlanSchedule
	(SQLReviewRuleLevel)(0), // 5: bytebase.v1.SQLReviewRuleLevel
	(MaskingExceptionPolicy_MaskingException_Action)(0), // 6: bytebase.v1.MaskingExceptionPolicy.MaskingException.Action
	(*CreatePolicyRequest)(nil),                         // 7: bytebase.v1.CreatePolicyRequest
	(*UpdatePolicyRequest)(nil),                         // 8: bytebase.v1.UpdatePolicyRequest
	(*DeletePolicyRequest)(nil),                         // 9: bytebase.v1.DeletePolicyRequest
	(*GetPolicyRequest)(nil),                            // 10: bytebase.v1.GetPolicyRequest
	(*ListPoliciesRequest)(nil),                         // 11: bytebase.v1.ListPoliciesRequest
	(*ListPoliciesResponse)(nil),                        // 12: bytebase.v1.ListPoliciesResponse
	(*Policy)(nil),                                      // 13: bytebase.v1.Policy
	(*DeploymentApprovalPolicy)(nil),                    // 14: bytebase.v1.DeploymentApprovalPolicy
	(*RolloutPolicy)(nil),                               // 15: bytebase.v1.RolloutPolicy
	(*DeploymentApprovalStrategy)(nil),                  // 16: bytebase.v1.DeploymentApprovalStrategy
	(*BackupPlanPolicy)(nil),                            // 17: bytebase.v1.BackupPlanPolicy
	(*SlowQueryPolicy)(nil),                             // 18: bytebase.v1.SlowQueryPolicy
	(*DisableCopyDataPolicy)(nil),                       // 19: bytebase.v1.DisableCopyDataPolicy
	(*MaskingPolicy)(nil),                               // 20: bytebase.v1.MaskingPolicy
	(*MaskData)(nil),                                    // 21: bytebase.v1.MaskData
	(*SQLReviewPolicy)(nil),                             // 22: bytebase.v1.SQLReviewPolicy
	(*SQLReviewRule)(nil),                               // 23: bytebase.v1.SQLReviewRule
	(*MaskingExceptionPolicy)(nil),                      // 24: bytebase.v1.MaskingExceptionPolicy
	(*MaskingRulePolicy)(nil),                           // 25: bytebase.v1.MaskingRulePolicy
	(*MaskingExceptionPolicy_MaskingException)(nil),     // 26: bytebase.v1.MaskingExceptionPolicy.MaskingException
	(*MaskingRulePolicy_MaskingRule)(nil),               // 27: bytebase.v1.MaskingRulePolicy.MaskingRule
	(*fieldmaskpb.FieldMask)(nil),                       // 28: google.protobuf.FieldMask
	(*IamPolicy)(nil),                                   // 29: bytebase.v1.IamPolicy
	(DeploymentType)(0),                                 // 30: bytebase.v1.DeploymentType
	(*durationpb.Duration)(nil),                         // 31: google.protobuf.Duration
	(MaskingLevel)(0),                                   // 32: bytebase.v1.MaskingLevel
	(Engine)(0),                                         // 33: bytebase.v1.Engine
	(*expr.Expr)(nil),                                   // 34: google.type.Expr
	(*emptypb.Empty)(nil),                               // 35: google.protobuf.Empty
}
var file_v1_org_policy_service_proto_depIdxs = []int32{
	13, // 0: bytebase.v1.CreatePolicyRequest.policy:type_name -> bytebase.v1.Policy
	0,  // 1: bytebase.v1.CreatePolicyRequest.type:type_name -> bytebase.v1.PolicyType
	13, // 2: bytebase.v1.UpdatePolicyRequest.policy:type_name -> bytebase.v1.Policy
	28, // 3: bytebase.v1.UpdatePolicyRequest.update_mask:type_name -> google.protobuf.FieldMask
	0,  // 4: bytebase.v1.ListPoliciesRequest.policy_type:type_name -> bytebase.v1.PolicyType
	13, // 5: bytebase.v1.ListPoliciesResponse.policies:type_name -> bytebase.v1.Policy
	0,  // 6: bytebase.v1.Policy.type:type_name -> bytebase.v1.PolicyType
	29, // 7: bytebase.v1.Policy.workspace_iam_policy:type_name -> bytebase.v1.IamPolicy
	14, // 8: bytebase.v1.Policy.deployment_approval_policy:type_name -> bytebase.v1.DeploymentApprovalPolicy
	15, // 9: bytebase.v1.Policy.rollout_policy:type_name -> bytebase.v1.RolloutPolicy
	17, // 10: bytebase.v1.Policy.backup_plan_policy:type_name -> bytebase.v1.BackupPlanPolicy
	20, // 11: bytebase.v1.Policy.masking_policy:type_name -> bytebase.v1.MaskingPolicy
	22, // 12: bytebase.v1.Policy.sql_review_policy:type_name -> bytebase.v1.SQLReviewPolicy
	18, // 13: bytebase.v1.Policy.slow_query_policy:type_name -> bytebase.v1.SlowQueryPolicy
	19, // 14: bytebase.v1.Policy.disable_copy_data_policy:type_name -> bytebase.v1.DisableCopyDataPolicy
	25, // 15: bytebase.v1.Policy.masking_rule_policy:type_name -> bytebase.v1.MaskingRulePolicy
	24, // 16: bytebase.v1.Policy.masking_exception_policy:type_name -> bytebase.v1.MaskingExceptionPolicy
	1,  // 17: bytebase.v1.Policy.resource_type:type_name -> bytebase.v1.PolicyResourceType
	3,  // 18: bytebase.v1.DeploymentApprovalPolicy.default_strategy:type_name -> bytebase.v1.ApprovalStrategy
	16, // 19: bytebase.v1.DeploymentApprovalPolicy.deployment_approval_strategies:type_name -> bytebase.v1.DeploymentApprovalStrategy
	30, // 20: bytebase.v1.DeploymentApprovalStrategy.deployment_type:type_name -> bytebase.v1.DeploymentType
	2,  // 21: bytebase.v1.DeploymentApprovalStrategy.approval_group:type_name -> bytebase.v1.ApprovalGroup
	3,  // 22: bytebase.v1.DeploymentApprovalStrategy.approval_strategy:type_name -> bytebase.v1.ApprovalStrategy
	4,  // 23: bytebase.v1.BackupPlanPolicy.schedule:type_name -> bytebase.v1.BackupPlanSchedule
	31, // 24: bytebase.v1.BackupPlanPolicy.retention_duration:type_name -> google.protobuf.Duration
	21, // 25: bytebase.v1.MaskingPolicy.mask_data:type_name -> bytebase.v1.MaskData
	32, // 26: bytebase.v1.MaskData.masking_level:type_name -> bytebase.v1.MaskingLevel
	23, // 27: bytebase.v1.SQLReviewPolicy.rules:type_name -> bytebase.v1.SQLReviewRule
	5,  // 28: bytebase.v1.SQLReviewRule.level:type_name -> bytebase.v1.SQLReviewRuleLevel
	33, // 29: bytebase.v1.SQLReviewRule.engine:type_name -> bytebase.v1.Engine
	26, // 30: bytebase.v1.MaskingExceptionPolicy.masking_exceptions:type_name -> bytebase.v1.MaskingExceptionPolicy.MaskingException
	27, // 31: bytebase.v1.MaskingRulePolicy.rules:type_name -> bytebase.v1.MaskingRulePolicy.MaskingRule
	6,  // 32: bytebase.v1.MaskingExceptionPolicy.MaskingException.action:type_name -> bytebase.v1.MaskingExceptionPolicy.MaskingException.Action
	32, // 33: bytebase.v1.MaskingExceptionPolicy.MaskingException.masking_level:type_name -> bytebase.v1.MaskingLevel
	34, // 34: bytebase.v1.MaskingExceptionPolicy.MaskingException.condition:type_name -> google.type.Expr
	34, // 35: bytebase.v1.MaskingRulePolicy.MaskingRule.condition:type_name -> google.type.Expr
	32, // 36: bytebase.v1.MaskingRulePolicy.MaskingRule.masking_level:type_name -> bytebase.v1.MaskingLevel
	10, // 37: bytebase.v1.OrgPolicyService.GetPolicy:input_type -> bytebase.v1.GetPolicyRequest
	11, // 38: bytebase.v1.OrgPolicyService.ListPolicies:input_type -> bytebase.v1.ListPoliciesRequest
	7,  // 39: bytebase.v1.OrgPolicyService.CreatePolicy:input_type -> bytebase.v1.CreatePolicyRequest
	8,  // 40: bytebase.v1.OrgPolicyService.UpdatePolicy:input_type -> bytebase.v1.UpdatePolicyRequest
	9,  // 41: bytebase.v1.OrgPolicyService.DeletePolicy:input_type -> bytebase.v1.DeletePolicyRequest
	13, // 42: bytebase.v1.OrgPolicyService.GetPolicy:output_type -> bytebase.v1.Policy
	12, // 43: bytebase.v1.OrgPolicyService.ListPolicies:output_type -> bytebase.v1.ListPoliciesResponse
	13, // 44: bytebase.v1.OrgPolicyService.CreatePolicy:output_type -> bytebase.v1.Policy
	13, // 45: bytebase.v1.OrgPolicyService.UpdatePolicy:output_type -> bytebase.v1.Policy
	35, // 46: bytebase.v1.OrgPolicyService.DeletePolicy:output_type -> google.protobuf.Empty
	42, // [42:47] is the sub-list for method output_type
	37, // [37:42] is the sub-list for method input_type
	37, // [37:37] is the sub-list for extension type_name
	37, // [37:37] is the sub-list for extension extendee
	0,  // [0:37] is the sub-list for field type_name
}

func init() { file_v1_org_policy_service_proto_init() }
func file_v1_org_policy_service_proto_init() {
	if File_v1_org_policy_service_proto != nil {
		return
	}
	file_v1_common_proto_init()
	file_v1_deployment_proto_init()
	file_v1_iam_policy_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_v1_org_policy_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_org_policy_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_org_policy_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_org_policy_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPolicyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_org_policy_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPoliciesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_org_policy_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPoliciesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_org_policy_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_org_policy_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentApprovalPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_org_policy_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RolloutPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_org_policy_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploymentApprovalStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_org_policy_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackupPlanPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_org_policy_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SlowQueryPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_org_policy_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisableCopyDataPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_org_policy_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaskingPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_org_policy_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaskData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_org_policy_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SQLReviewPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_org_policy_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SQLReviewRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_org_policy_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaskingExceptionPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_org_policy_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaskingRulePolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_org_policy_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaskingExceptionPolicy_MaskingException); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_org_policy_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MaskingRulePolicy_MaskingRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_v1_org_policy_service_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_v1_org_policy_service_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*Policy_WorkspaceIamPolicy)(nil),
		(*Policy_DeploymentApprovalPolicy)(nil),
		(*Policy_RolloutPolicy)(nil),
		(*Policy_BackupPlanPolicy)(nil),
		(*Policy_MaskingPolicy)(nil),
		(*Policy_SqlReviewPolicy)(nil),
		(*Policy_SlowQueryPolicy)(nil),
		(*Policy_DisableCopyDataPolicy)(nil),
		(*Policy_MaskingRulePolicy)(nil),
		(*Policy_MaskingExceptionPolicy)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_org_policy_service_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v1_org_policy_service_proto_goTypes,
		DependencyIndexes: file_v1_org_policy_service_proto_depIdxs,
		EnumInfos:         file_v1_org_policy_service_proto_enumTypes,
		MessageInfos:      file_v1_org_policy_service_proto_msgTypes,
	}.Build()
	File_v1_org_policy_service_proto = out.File
	file_v1_org_policy_service_proto_rawDesc = nil
	file_v1_org_policy_service_proto_goTypes = nil
	file_v1_org_policy_service_proto_depIdxs = nil
}
