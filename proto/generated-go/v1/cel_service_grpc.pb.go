// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: v1/cel_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	CelService_BatchParse_FullMethodName   = "/bytebase.v1.CelService/BatchParse"
	CelService_BatchDeparse_FullMethodName = "/bytebase.v1.CelService/BatchDeparse"
)

// CelServiceClient is the client API for CelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CelServiceClient interface {
	BatchParse(ctx context.Context, in *BatchParseRequest, opts ...grpc.CallOption) (*BatchParseResponse, error)
	BatchDeparse(ctx context.Context, in *BatchDeparseRequest, opts ...grpc.CallOption) (*BatchDeparseResponse, error)
}

type celServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCelServiceClient(cc grpc.ClientConnInterface) CelServiceClient {
	return &celServiceClient{cc}
}

func (c *celServiceClient) BatchParse(ctx context.Context, in *BatchParseRequest, opts ...grpc.CallOption) (*BatchParseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchParseResponse)
	err := c.cc.Invoke(ctx, CelService_BatchParse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *celServiceClient) BatchDeparse(ctx context.Context, in *BatchDeparseRequest, opts ...grpc.CallOption) (*BatchDeparseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchDeparseResponse)
	err := c.cc.Invoke(ctx, CelService_BatchDeparse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CelServiceServer is the server API for CelService service.
// All implementations must embed UnimplementedCelServiceServer
// for forward compatibility
type CelServiceServer interface {
	BatchParse(context.Context, *BatchParseRequest) (*BatchParseResponse, error)
	BatchDeparse(context.Context, *BatchDeparseRequest) (*BatchDeparseResponse, error)
	mustEmbedUnimplementedCelServiceServer()
}

// UnimplementedCelServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCelServiceServer struct {
}

func (UnimplementedCelServiceServer) BatchParse(context.Context, *BatchParseRequest) (*BatchParseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchParse not implemented")
}
func (UnimplementedCelServiceServer) BatchDeparse(context.Context, *BatchDeparseRequest) (*BatchDeparseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchDeparse not implemented")
}
func (UnimplementedCelServiceServer) mustEmbedUnimplementedCelServiceServer() {}

// UnsafeCelServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CelServiceServer will
// result in compilation errors.
type UnsafeCelServiceServer interface {
	mustEmbedUnimplementedCelServiceServer()
}

func RegisterCelServiceServer(s grpc.ServiceRegistrar, srv CelServiceServer) {
	s.RegisterService(&CelService_ServiceDesc, srv)
}

func _CelService_BatchParse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchParseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CelServiceServer).BatchParse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CelService_BatchParse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CelServiceServer).BatchParse(ctx, req.(*BatchParseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CelService_BatchDeparse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchDeparseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CelServiceServer).BatchDeparse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CelService_BatchDeparse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CelServiceServer).BatchDeparse(ctx, req.(*BatchDeparseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CelService_ServiceDesc is the grpc.ServiceDesc for CelService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CelService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bytebase.v1.CelService",
	HandlerType: (*CelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BatchParse",
			Handler:    _CelService_BatchParse_Handler,
		},
		{
			MethodName: "BatchDeparse",
			Handler:    _CelService_BatchDeparse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/cel_service.proto",
}
