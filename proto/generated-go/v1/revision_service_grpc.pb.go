// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: v1/revision_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RevisionService_ListRevisions_FullMethodName        = "/bytebase.v1.RevisionService/ListRevisions"
	RevisionService_GetRevision_FullMethodName          = "/bytebase.v1.RevisionService/GetRevision"
	RevisionService_CreateRevision_FullMethodName       = "/bytebase.v1.RevisionService/CreateRevision"
	RevisionService_BatchCreateRevisions_FullMethodName = "/bytebase.v1.RevisionService/BatchCreateRevisions"
	RevisionService_DeleteRevision_FullMethodName       = "/bytebase.v1.RevisionService/DeleteRevision"
)

// RevisionServiceClient is the client API for RevisionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RevisionServiceClient interface {
	ListRevisions(ctx context.Context, in *ListRevisionsRequest, opts ...grpc.CallOption) (*ListRevisionsResponse, error)
	GetRevision(ctx context.Context, in *GetRevisionRequest, opts ...grpc.CallOption) (*Revision, error)
	CreateRevision(ctx context.Context, in *CreateRevisionRequest, opts ...grpc.CallOption) (*Revision, error)
	BatchCreateRevisions(ctx context.Context, in *BatchCreateRevisionsRequest, opts ...grpc.CallOption) (*BatchCreateRevisionsResponse, error)
	DeleteRevision(ctx context.Context, in *DeleteRevisionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type revisionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRevisionServiceClient(cc grpc.ClientConnInterface) RevisionServiceClient {
	return &revisionServiceClient{cc}
}

func (c *revisionServiceClient) ListRevisions(ctx context.Context, in *ListRevisionsRequest, opts ...grpc.CallOption) (*ListRevisionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRevisionsResponse)
	err := c.cc.Invoke(ctx, RevisionService_ListRevisions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revisionServiceClient) GetRevision(ctx context.Context, in *GetRevisionRequest, opts ...grpc.CallOption) (*Revision, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Revision)
	err := c.cc.Invoke(ctx, RevisionService_GetRevision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revisionServiceClient) CreateRevision(ctx context.Context, in *CreateRevisionRequest, opts ...grpc.CallOption) (*Revision, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Revision)
	err := c.cc.Invoke(ctx, RevisionService_CreateRevision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revisionServiceClient) BatchCreateRevisions(ctx context.Context, in *BatchCreateRevisionsRequest, opts ...grpc.CallOption) (*BatchCreateRevisionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchCreateRevisionsResponse)
	err := c.cc.Invoke(ctx, RevisionService_BatchCreateRevisions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *revisionServiceClient) DeleteRevision(ctx context.Context, in *DeleteRevisionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, RevisionService_DeleteRevision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RevisionServiceServer is the server API for RevisionService service.
// All implementations must embed UnimplementedRevisionServiceServer
// for forward compatibility.
type RevisionServiceServer interface {
	ListRevisions(context.Context, *ListRevisionsRequest) (*ListRevisionsResponse, error)
	GetRevision(context.Context, *GetRevisionRequest) (*Revision, error)
	CreateRevision(context.Context, *CreateRevisionRequest) (*Revision, error)
	BatchCreateRevisions(context.Context, *BatchCreateRevisionsRequest) (*BatchCreateRevisionsResponse, error)
	DeleteRevision(context.Context, *DeleteRevisionRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedRevisionServiceServer()
}

// UnimplementedRevisionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRevisionServiceServer struct{}

func (UnimplementedRevisionServiceServer) ListRevisions(context.Context, *ListRevisionsRequest) (*ListRevisionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRevisions not implemented")
}
func (UnimplementedRevisionServiceServer) GetRevision(context.Context, *GetRevisionRequest) (*Revision, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRevision not implemented")
}
func (UnimplementedRevisionServiceServer) CreateRevision(context.Context, *CreateRevisionRequest) (*Revision, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRevision not implemented")
}
func (UnimplementedRevisionServiceServer) BatchCreateRevisions(context.Context, *BatchCreateRevisionsRequest) (*BatchCreateRevisionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCreateRevisions not implemented")
}
func (UnimplementedRevisionServiceServer) DeleteRevision(context.Context, *DeleteRevisionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRevision not implemented")
}
func (UnimplementedRevisionServiceServer) mustEmbedUnimplementedRevisionServiceServer() {}
func (UnimplementedRevisionServiceServer) testEmbeddedByValue()                         {}

// UnsafeRevisionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RevisionServiceServer will
// result in compilation errors.
type UnsafeRevisionServiceServer interface {
	mustEmbedUnimplementedRevisionServiceServer()
}

func RegisterRevisionServiceServer(s grpc.ServiceRegistrar, srv RevisionServiceServer) {
	// If the following call pancis, it indicates UnimplementedRevisionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RevisionService_ServiceDesc, srv)
}

func _RevisionService_ListRevisions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRevisionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevisionServiceServer).ListRevisions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RevisionService_ListRevisions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevisionServiceServer).ListRevisions(ctx, req.(*ListRevisionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevisionService_GetRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRevisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevisionServiceServer).GetRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RevisionService_GetRevision_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevisionServiceServer).GetRevision(ctx, req.(*GetRevisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevisionService_CreateRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRevisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevisionServiceServer).CreateRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RevisionService_CreateRevision_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevisionServiceServer).CreateRevision(ctx, req.(*CreateRevisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevisionService_BatchCreateRevisions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCreateRevisionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevisionServiceServer).BatchCreateRevisions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RevisionService_BatchCreateRevisions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevisionServiceServer).BatchCreateRevisions(ctx, req.(*BatchCreateRevisionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RevisionService_DeleteRevision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRevisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RevisionServiceServer).DeleteRevision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RevisionService_DeleteRevision_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RevisionServiceServer).DeleteRevision(ctx, req.(*DeleteRevisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RevisionService_ServiceDesc is the grpc.ServiceDesc for RevisionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RevisionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bytebase.v1.RevisionService",
	HandlerType: (*RevisionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRevisions",
			Handler:    _RevisionService_ListRevisions_Handler,
		},
		{
			MethodName: "GetRevision",
			Handler:    _RevisionService_GetRevision_Handler,
		},
		{
			MethodName: "CreateRevision",
			Handler:    _RevisionService_CreateRevision_Handler,
		},
		{
			MethodName: "BatchCreateRevisions",
			Handler:    _RevisionService_BatchCreateRevisions_Handler,
		},
		{
			MethodName: "DeleteRevision",
			Handler:    _RevisionService_DeleteRevision_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/revision_service.proto",
}
