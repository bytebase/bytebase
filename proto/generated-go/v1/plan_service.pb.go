// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: v1/plan_service.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Type is the database change type.
type Plan_ChangeDatabaseConfig_Type int32

const (
	Plan_ChangeDatabaseConfig_TYPE_UNSPECIFIED Plan_ChangeDatabaseConfig_Type = 0
	// Used for DDL changes including CREATE DATABASE.
	Plan_ChangeDatabaseConfig_MIGRATE Plan_ChangeDatabaseConfig_Type = 2
	// Used for schema changes via state-based schema migration including CREATE DATABASE.
	Plan_ChangeDatabaseConfig_MIGRATE_SDL Plan_ChangeDatabaseConfig_Type = 3
	// Used for DDL changes using gh-ost.
	Plan_ChangeDatabaseConfig_MIGRATE_GHOST Plan_ChangeDatabaseConfig_Type = 4
	// Used for DML change.
	Plan_ChangeDatabaseConfig_DATA Plan_ChangeDatabaseConfig_Type = 6
)

// Enum value maps for Plan_ChangeDatabaseConfig_Type.
var (
	Plan_ChangeDatabaseConfig_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		2: "MIGRATE",
		3: "MIGRATE_SDL",
		4: "MIGRATE_GHOST",
		6: "DATA",
	}
	Plan_ChangeDatabaseConfig_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"MIGRATE":          2,
		"MIGRATE_SDL":      3,
		"MIGRATE_GHOST":    4,
		"DATA":             6,
	}
)

func (x Plan_ChangeDatabaseConfig_Type) Enum() *Plan_ChangeDatabaseConfig_Type {
	p := new(Plan_ChangeDatabaseConfig_Type)
	*p = x
	return p
}

func (x Plan_ChangeDatabaseConfig_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Plan_ChangeDatabaseConfig_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_plan_service_proto_enumTypes[0].Descriptor()
}

func (Plan_ChangeDatabaseConfig_Type) Type() protoreflect.EnumType {
	return &file_v1_plan_service_proto_enumTypes[0]
}

func (x Plan_ChangeDatabaseConfig_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Plan_ChangeDatabaseConfig_Type.Descriptor instead.
func (Plan_ChangeDatabaseConfig_Type) EnumDescriptor() ([]byte, []int) {
	return file_v1_plan_service_proto_rawDescGZIP(), []int{7, 3, 0}
}

type PlanCheckRun_Type int32

const (
	PlanCheckRun_TYPE_UNSPECIFIED                  PlanCheckRun_Type = 0
	PlanCheckRun_DATABASE_STATEMENT_FAKE_ADVISE    PlanCheckRun_Type = 1
	PlanCheckRun_DATABASE_STATEMENT_ADVISE         PlanCheckRun_Type = 3
	PlanCheckRun_DATABASE_STATEMENT_SUMMARY_REPORT PlanCheckRun_Type = 5
	PlanCheckRun_DATABASE_CONNECT                  PlanCheckRun_Type = 6
	PlanCheckRun_DATABASE_GHOST_SYNC               PlanCheckRun_Type = 7
)

// Enum value maps for PlanCheckRun_Type.
var (
	PlanCheckRun_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "DATABASE_STATEMENT_FAKE_ADVISE",
		3: "DATABASE_STATEMENT_ADVISE",
		5: "DATABASE_STATEMENT_SUMMARY_REPORT",
		6: "DATABASE_CONNECT",
		7: "DATABASE_GHOST_SYNC",
	}
	PlanCheckRun_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED":                  0,
		"DATABASE_STATEMENT_FAKE_ADVISE":    1,
		"DATABASE_STATEMENT_ADVISE":         3,
		"DATABASE_STATEMENT_SUMMARY_REPORT": 5,
		"DATABASE_CONNECT":                  6,
		"DATABASE_GHOST_SYNC":               7,
	}
)

func (x PlanCheckRun_Type) Enum() *PlanCheckRun_Type {
	p := new(PlanCheckRun_Type)
	*p = x
	return p
}

func (x PlanCheckRun_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlanCheckRun_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_plan_service_proto_enumTypes[1].Descriptor()
}

func (PlanCheckRun_Type) Type() protoreflect.EnumType {
	return &file_v1_plan_service_proto_enumTypes[1]
}

func (x PlanCheckRun_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlanCheckRun_Type.Descriptor instead.
func (PlanCheckRun_Type) EnumDescriptor() ([]byte, []int) {
	return file_v1_plan_service_proto_rawDescGZIP(), []int{14, 0}
}

type PlanCheckRun_Status int32

const (
	PlanCheckRun_STATUS_UNSPECIFIED PlanCheckRun_Status = 0
	PlanCheckRun_RUNNING            PlanCheckRun_Status = 1
	PlanCheckRun_DONE               PlanCheckRun_Status = 2
	PlanCheckRun_FAILED             PlanCheckRun_Status = 3
	PlanCheckRun_CANCELED           PlanCheckRun_Status = 4
)

// Enum value maps for PlanCheckRun_Status.
var (
	PlanCheckRun_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "RUNNING",
		2: "DONE",
		3: "FAILED",
		4: "CANCELED",
	}
	PlanCheckRun_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"RUNNING":            1,
		"DONE":               2,
		"FAILED":             3,
		"CANCELED":           4,
	}
)

func (x PlanCheckRun_Status) Enum() *PlanCheckRun_Status {
	p := new(PlanCheckRun_Status)
	*p = x
	return p
}

func (x PlanCheckRun_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlanCheckRun_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_plan_service_proto_enumTypes[2].Descriptor()
}

func (PlanCheckRun_Status) Type() protoreflect.EnumType {
	return &file_v1_plan_service_proto_enumTypes[2]
}

func (x PlanCheckRun_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlanCheckRun_Status.Descriptor instead.
func (PlanCheckRun_Status) EnumDescriptor() ([]byte, []int) {
	return file_v1_plan_service_proto_rawDescGZIP(), []int{14, 1}
}

type PlanCheckRun_Result_Status int32

const (
	PlanCheckRun_Result_STATUS_UNSPECIFIED PlanCheckRun_Result_Status = 0
	PlanCheckRun_Result_ERROR              PlanCheckRun_Result_Status = 1
	PlanCheckRun_Result_WARNING            PlanCheckRun_Result_Status = 2
	PlanCheckRun_Result_SUCCESS            PlanCheckRun_Result_Status = 3
)

// Enum value maps for PlanCheckRun_Result_Status.
var (
	PlanCheckRun_Result_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "ERROR",
		2: "WARNING",
		3: "SUCCESS",
	}
	PlanCheckRun_Result_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"ERROR":              1,
		"WARNING":            2,
		"SUCCESS":            3,
	}
)

func (x PlanCheckRun_Result_Status) Enum() *PlanCheckRun_Result_Status {
	p := new(PlanCheckRun_Result_Status)
	*p = x
	return p
}

func (x PlanCheckRun_Result_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PlanCheckRun_Result_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_plan_service_proto_enumTypes[3].Descriptor()
}

func (PlanCheckRun_Result_Status) Type() protoreflect.EnumType {
	return &file_v1_plan_service_proto_enumTypes[3]
}

func (x PlanCheckRun_Result_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PlanCheckRun_Result_Status.Descriptor instead.
func (PlanCheckRun_Result_Status) EnumDescriptor() ([]byte, []int) {
	return file_v1_plan_service_proto_rawDescGZIP(), []int{14, 0, 0}
}

type GetPlanRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the plan to retrieve.
	// Format: projects/{project}/plans/{plan}
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPlanRequest) Reset() {
	*x = GetPlanRequest{}
	mi := &file_v1_plan_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlanRequest) ProtoMessage() {}

func (x *GetPlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_plan_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlanRequest.ProtoReflect.Descriptor instead.
func (*GetPlanRequest) Descriptor() ([]byte, []int) {
	return file_v1_plan_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetPlanRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListPlansRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The parent, which owns this collection of plans.
	// Format: projects/{project}
	// Use "projects/-" to list all plans from all projects.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The maximum number of plans to return. The service may return fewer than
	// this value.
	// If unspecified, at most 10 plans will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListPlans` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListPlans` must match
	// the call that provided the page token.
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListPlansRequest) Reset() {
	*x = ListPlansRequest{}
	mi := &file_v1_plan_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPlansRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPlansRequest) ProtoMessage() {}

func (x *ListPlansRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_plan_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPlansRequest.ProtoReflect.Descriptor instead.
func (*ListPlansRequest) Descriptor() ([]byte, []int) {
	return file_v1_plan_service_proto_rawDescGZIP(), []int{1}
}

func (x *ListPlansRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListPlansRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListPlansRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListPlansResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The plans from the specified request.
	Plans []*Plan `protobuf:"bytes,1,rep,name=plans,proto3" json:"plans,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListPlansResponse) Reset() {
	*x = ListPlansResponse{}
	mi := &file_v1_plan_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPlansResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPlansResponse) ProtoMessage() {}

func (x *ListPlansResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_plan_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPlansResponse.ProtoReflect.Descriptor instead.
func (*ListPlansResponse) Descriptor() ([]byte, []int) {
	return file_v1_plan_service_proto_rawDescGZIP(), []int{2}
}

func (x *ListPlansResponse) GetPlans() []*Plan {
	if x != nil {
		return x.Plans
	}
	return nil
}

func (x *ListPlansResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type SearchPlansRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The parent, which owns this collection of plans.
	// Format: projects/{project}
	// Use "projects/-" to list all plans from all projects.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The maximum number of plans to return. The service may return fewer than
	// this value.
	// If unspecified, at most 10 plans will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `SearchPlans` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `SearchPlans` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Filter is used to filter plans returned in the list.
	// The syntax and semantics of CEL are documented at https://github.com/google/cel-spec
	//
	// Supported filters:
	// - creator: the plan creator full name in "users/{email or id}" format, support "==" operator.
	// - create_time: issue create time in "2006-01-02T15:04:05Z07:00" format, support ">=" or "<=" operator.
	// - has_pipeline: the plan has pipeline or not, support "==" operator, the value should be "true" or "false".
	// - has_issue: the plan has issue or not, support "==" operator, the value should be "true" or "false".
	//
	// For example:
	// creator == "users/ed@bytebase.com" && create_time >= "2025-01-02T15:04:05Z07:00"
	// has_pipeline == false && has_issue == true
	Filter        string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchPlansRequest) Reset() {
	*x = SearchPlansRequest{}
	mi := &file_v1_plan_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchPlansRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchPlansRequest) ProtoMessage() {}

func (x *SearchPlansRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_plan_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchPlansRequest.ProtoReflect.Descriptor instead.
func (*SearchPlansRequest) Descriptor() ([]byte, []int) {
	return file_v1_plan_service_proto_rawDescGZIP(), []int{3}
}

func (x *SearchPlansRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *SearchPlansRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *SearchPlansRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *SearchPlansRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type SearchPlansResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The plans from the specified request.
	Plans []*Plan `protobuf:"bytes,1,rep,name=plans,proto3" json:"plans,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchPlansResponse) Reset() {
	*x = SearchPlansResponse{}
	mi := &file_v1_plan_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchPlansResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchPlansResponse) ProtoMessage() {}

func (x *SearchPlansResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_plan_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchPlansResponse.ProtoReflect.Descriptor instead.
func (*SearchPlansResponse) Descriptor() ([]byte, []int) {
	return file_v1_plan_service_proto_rawDescGZIP(), []int{4}
}

func (x *SearchPlansResponse) GetPlans() []*Plan {
	if x != nil {
		return x.Plans
	}
	return nil
}

func (x *SearchPlansResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type CreatePlanRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The parent project where this plan will be created.
	// Format: projects/{project}
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The plan to create.
	Plan          *Plan `protobuf:"bytes,2,opt,name=plan,proto3" json:"plan,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreatePlanRequest) Reset() {
	*x = CreatePlanRequest{}
	mi := &file_v1_plan_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePlanRequest) ProtoMessage() {}

func (x *CreatePlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_plan_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePlanRequest.ProtoReflect.Descriptor instead.
func (*CreatePlanRequest) Descriptor() ([]byte, []int) {
	return file_v1_plan_service_proto_rawDescGZIP(), []int{5}
}

func (x *CreatePlanRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreatePlanRequest) GetPlan() *Plan {
	if x != nil {
		return x.Plan
	}
	return nil
}

type UpdatePlanRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The plan to update.
	//
	// The plan's `name` field is used to identify the plan to update.
	// Format: projects/{project}/plans/{plan}
	Plan *Plan `protobuf:"bytes,1,opt,name=plan,proto3" json:"plan,omitempty"`
	// The list of fields to update.
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdatePlanRequest) Reset() {
	*x = UpdatePlanRequest{}
	mi := &file_v1_plan_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePlanRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePlanRequest) ProtoMessage() {}

func (x *UpdatePlanRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_plan_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePlanRequest.ProtoReflect.Descriptor instead.
func (*UpdatePlanRequest) Descriptor() ([]byte, []int) {
	return file_v1_plan_service_proto_rawDescGZIP(), []int{6}
}

func (x *UpdatePlanRequest) GetPlan() *Plan {
	if x != nil {
		return x.Plan
	}
	return nil
}

func (x *UpdatePlanRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type Plan struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the plan.
	// `plan` is a system generated ID.
	// Format: projects/{project}/plans/{plan}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The issue associated with the plan.
	// Can be empty.
	// Format: projects/{project}/issues/{issue}
	Issue string `protobuf:"bytes,3,opt,name=issue,proto3" json:"issue,omitempty"`
	// The rollout associated with the plan.
	// Can be empty.
	// Format: projects/{project}/rollouts/{rollout}
	Rollout     string       `protobuf:"bytes,15,opt,name=rollout,proto3" json:"rollout,omitempty"`
	Title       string       `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Description string       `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	Specs       []*Plan_Spec `protobuf:"bytes,14,rep,name=specs,proto3" json:"specs,omitempty"`
	// Format: users/hello@world.com
	Creator    string                 `protobuf:"bytes,8,opt,name=creator,proto3" json:"creator,omitempty"`
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// The status count of the latest plan check runs.
	// Keys are:
	// - SUCCESS
	// - WARNING
	// - ERROR
	PlanCheckRunStatusCount map[string]int32 `protobuf:"bytes,11,rep,name=plan_check_run_status_count,json=planCheckRunStatusCount,proto3" json:"plan_check_run_status_count,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Deployment              *Plan_Deployment `protobuf:"bytes,13,opt,name=deployment,proto3" json:"deployment,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *Plan) Reset() {
	*x = Plan{}
	mi := &file_v1_plan_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Plan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Plan) ProtoMessage() {}

func (x *Plan) ProtoReflect() protoreflect.Message {
	mi := &file_v1_plan_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Plan.ProtoReflect.Descriptor instead.
func (*Plan) Descriptor() ([]byte, []int) {
	return file_v1_plan_service_proto_rawDescGZIP(), []int{7}
}

func (x *Plan) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Plan) GetIssue() string {
	if x != nil {
		return x.Issue
	}
	return ""
}

func (x *Plan) GetRollout() string {
	if x != nil {
		return x.Rollout
	}
	return ""
}

func (x *Plan) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Plan) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Plan) GetSpecs() []*Plan_Spec {
	if x != nil {
		return x.Specs
	}
	return nil
}

func (x *Plan) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *Plan) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Plan) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Plan) GetPlanCheckRunStatusCount() map[string]int32 {
	if x != nil {
		return x.PlanCheckRunStatusCount
	}
	return nil
}

func (x *Plan) GetDeployment() *Plan_Deployment {
	if x != nil {
		return x.Deployment
	}
	return nil
}

type ListPlanCheckRunsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The parent, which owns this collection of plan check runs.
	// Format: projects/{project}/plans/{plan}
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Not used.
	// The maximum number of plan check runs to return. The service may return fewer than
	// this value.
	// If unspecified, at most 10 plan check runs will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Not used.
	// A page token, received from a previous `ListPlanCheckRuns` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListPlanCheckRuns` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// If set to true, only the latest plan check run will be returned.
	LatestOnly    bool `protobuf:"varint,4,opt,name=latest_only,json=latestOnly,proto3" json:"latest_only,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListPlanCheckRunsRequest) Reset() {
	*x = ListPlanCheckRunsRequest{}
	mi := &file_v1_plan_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPlanCheckRunsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPlanCheckRunsRequest) ProtoMessage() {}

func (x *ListPlanCheckRunsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_plan_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPlanCheckRunsRequest.ProtoReflect.Descriptor instead.
func (*ListPlanCheckRunsRequest) Descriptor() ([]byte, []int) {
	return file_v1_plan_service_proto_rawDescGZIP(), []int{8}
}

func (x *ListPlanCheckRunsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListPlanCheckRunsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListPlanCheckRunsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListPlanCheckRunsRequest) GetLatestOnly() bool {
	if x != nil {
		return x.LatestOnly
	}
	return false
}

type ListPlanCheckRunsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The plan check runs from the specified request.
	PlanCheckRuns []*PlanCheckRun `protobuf:"bytes,1,rep,name=plan_check_runs,json=planCheckRuns,proto3" json:"plan_check_runs,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListPlanCheckRunsResponse) Reset() {
	*x = ListPlanCheckRunsResponse{}
	mi := &file_v1_plan_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPlanCheckRunsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPlanCheckRunsResponse) ProtoMessage() {}

func (x *ListPlanCheckRunsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_plan_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPlanCheckRunsResponse.ProtoReflect.Descriptor instead.
func (*ListPlanCheckRunsResponse) Descriptor() ([]byte, []int) {
	return file_v1_plan_service_proto_rawDescGZIP(), []int{9}
}

func (x *ListPlanCheckRunsResponse) GetPlanCheckRuns() []*PlanCheckRun {
	if x != nil {
		return x.PlanCheckRuns
	}
	return nil
}

func (x *ListPlanCheckRunsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type RunPlanChecksRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The plan to run plan checks.
	// Format: projects/{project}/plans/{plan}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The UUID of the specific spec to run plan checks for.
	// This should match the spec.id field in Plan.Spec.
	// If not set, all specs in the plan will be used.
	SpecId        *string `protobuf:"bytes,2,opt,name=spec_id,json=specId,proto3,oneof" json:"spec_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunPlanChecksRequest) Reset() {
	*x = RunPlanChecksRequest{}
	mi := &file_v1_plan_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunPlanChecksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunPlanChecksRequest) ProtoMessage() {}

func (x *RunPlanChecksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_plan_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunPlanChecksRequest.ProtoReflect.Descriptor instead.
func (*RunPlanChecksRequest) Descriptor() ([]byte, []int) {
	return file_v1_plan_service_proto_rawDescGZIP(), []int{10}
}

func (x *RunPlanChecksRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RunPlanChecksRequest) GetSpecId() string {
	if x != nil && x.SpecId != nil {
		return *x.SpecId
	}
	return ""
}

type RunPlanChecksResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RunPlanChecksResponse) Reset() {
	*x = RunPlanChecksResponse{}
	mi := &file_v1_plan_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RunPlanChecksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunPlanChecksResponse) ProtoMessage() {}

func (x *RunPlanChecksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_plan_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunPlanChecksResponse.ProtoReflect.Descriptor instead.
func (*RunPlanChecksResponse) Descriptor() ([]byte, []int) {
	return file_v1_plan_service_proto_rawDescGZIP(), []int{11}
}

type BatchCancelPlanCheckRunsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the parent of the planChecks.
	// Format: projects/{project}/plans/{plan}
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// TODO(d): update this API.
	// The planCheckRuns to cancel.
	// Format: projects/{project}/plans/{plan}/planCheckRuns/{planCheckRun}
	PlanCheckRuns []string `protobuf:"bytes,2,rep,name=plan_check_runs,json=planCheckRuns,proto3" json:"plan_check_runs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchCancelPlanCheckRunsRequest) Reset() {
	*x = BatchCancelPlanCheckRunsRequest{}
	mi := &file_v1_plan_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchCancelPlanCheckRunsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCancelPlanCheckRunsRequest) ProtoMessage() {}

func (x *BatchCancelPlanCheckRunsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_plan_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCancelPlanCheckRunsRequest.ProtoReflect.Descriptor instead.
func (*BatchCancelPlanCheckRunsRequest) Descriptor() ([]byte, []int) {
	return file_v1_plan_service_proto_rawDescGZIP(), []int{12}
}

func (x *BatchCancelPlanCheckRunsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *BatchCancelPlanCheckRunsRequest) GetPlanCheckRuns() []string {
	if x != nil {
		return x.PlanCheckRuns
	}
	return nil
}

type BatchCancelPlanCheckRunsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchCancelPlanCheckRunsResponse) Reset() {
	*x = BatchCancelPlanCheckRunsResponse{}
	mi := &file_v1_plan_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchCancelPlanCheckRunsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCancelPlanCheckRunsResponse) ProtoMessage() {}

func (x *BatchCancelPlanCheckRunsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_plan_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCancelPlanCheckRunsResponse.ProtoReflect.Descriptor instead.
func (*BatchCancelPlanCheckRunsResponse) Descriptor() ([]byte, []int) {
	return file_v1_plan_service_proto_rawDescGZIP(), []int{13}
}

type PlanCheckRun struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Format: projects/{project}/plans/{plan}/planCheckRuns/{planCheckRun}
	Name   string              `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type   PlanCheckRun_Type   `protobuf:"varint,3,opt,name=type,proto3,enum=bytebase.v1.PlanCheckRun_Type" json:"type,omitempty"`
	Status PlanCheckRun_Status `protobuf:"varint,4,opt,name=status,proto3,enum=bytebase.v1.PlanCheckRun_Status" json:"status,omitempty"`
	// Format: instances/{instance}/databases/{database}
	Target string `protobuf:"bytes,5,opt,name=target,proto3" json:"target,omitempty"`
	// Format: project/{project}/sheets/{sheet}
	Sheet   string                 `protobuf:"bytes,6,opt,name=sheet,proto3" json:"sheet,omitempty"`
	Results []*PlanCheckRun_Result `protobuf:"bytes,7,rep,name=results,proto3" json:"results,omitempty"`
	// error is set if the Status is FAILED.
	Error         string                 `protobuf:"bytes,8,opt,name=error,proto3" json:"error,omitempty"`
	CreateTime    *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlanCheckRun) Reset() {
	*x = PlanCheckRun{}
	mi := &file_v1_plan_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlanCheckRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanCheckRun) ProtoMessage() {}

func (x *PlanCheckRun) ProtoReflect() protoreflect.Message {
	mi := &file_v1_plan_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanCheckRun.ProtoReflect.Descriptor instead.
func (*PlanCheckRun) Descriptor() ([]byte, []int) {
	return file_v1_plan_service_proto_rawDescGZIP(), []int{14}
}

func (x *PlanCheckRun) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PlanCheckRun) GetType() PlanCheckRun_Type {
	if x != nil {
		return x.Type
	}
	return PlanCheckRun_TYPE_UNSPECIFIED
}

func (x *PlanCheckRun) GetStatus() PlanCheckRun_Status {
	if x != nil {
		return x.Status
	}
	return PlanCheckRun_STATUS_UNSPECIFIED
}

func (x *PlanCheckRun) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *PlanCheckRun) GetSheet() string {
	if x != nil {
		return x.Sheet
	}
	return ""
}

func (x *PlanCheckRun) GetResults() []*PlanCheckRun_Result {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *PlanCheckRun) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *PlanCheckRun) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

type Plan_Spec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A UUID4 string that uniquely identifies the Spec.
	Id string `protobuf:"bytes,5,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are valid to be assigned to Config:
	//
	//	*Plan_Spec_CreateDatabaseConfig
	//	*Plan_Spec_ChangeDatabaseConfig
	//	*Plan_Spec_ExportDataConfig
	Config        isPlan_Spec_Config `protobuf_oneof:"config"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Plan_Spec) Reset() {
	*x = Plan_Spec{}
	mi := &file_v1_plan_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Plan_Spec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Plan_Spec) ProtoMessage() {}

func (x *Plan_Spec) ProtoReflect() protoreflect.Message {
	mi := &file_v1_plan_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Plan_Spec.ProtoReflect.Descriptor instead.
func (*Plan_Spec) Descriptor() ([]byte, []int) {
	return file_v1_plan_service_proto_rawDescGZIP(), []int{7, 0}
}

func (x *Plan_Spec) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Plan_Spec) GetConfig() isPlan_Spec_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Plan_Spec) GetCreateDatabaseConfig() *Plan_CreateDatabaseConfig {
	if x != nil {
		if x, ok := x.Config.(*Plan_Spec_CreateDatabaseConfig); ok {
			return x.CreateDatabaseConfig
		}
	}
	return nil
}

func (x *Plan_Spec) GetChangeDatabaseConfig() *Plan_ChangeDatabaseConfig {
	if x != nil {
		if x, ok := x.Config.(*Plan_Spec_ChangeDatabaseConfig); ok {
			return x.ChangeDatabaseConfig
		}
	}
	return nil
}

func (x *Plan_Spec) GetExportDataConfig() *Plan_ExportDataConfig {
	if x != nil {
		if x, ok := x.Config.(*Plan_Spec_ExportDataConfig); ok {
			return x.ExportDataConfig
		}
	}
	return nil
}

type isPlan_Spec_Config interface {
	isPlan_Spec_Config()
}

type Plan_Spec_CreateDatabaseConfig struct {
	CreateDatabaseConfig *Plan_CreateDatabaseConfig `protobuf:"bytes,1,opt,name=create_database_config,json=createDatabaseConfig,proto3,oneof"`
}

type Plan_Spec_ChangeDatabaseConfig struct {
	ChangeDatabaseConfig *Plan_ChangeDatabaseConfig `protobuf:"bytes,2,opt,name=change_database_config,json=changeDatabaseConfig,proto3,oneof"`
}

type Plan_Spec_ExportDataConfig struct {
	ExportDataConfig *Plan_ExportDataConfig `protobuf:"bytes,7,opt,name=export_data_config,json=exportDataConfig,proto3,oneof"`
}

func (*Plan_Spec_CreateDatabaseConfig) isPlan_Spec_Config() {}

func (*Plan_Spec_ChangeDatabaseConfig) isPlan_Spec_Config() {}

func (*Plan_Spec_ExportDataConfig) isPlan_Spec_Config() {}

type Plan_CreateDatabaseConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The resource name of the instance on which the database is created.
	// Format: instances/{instance}
	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	// The name of the database to create.
	Database string `protobuf:"bytes,2,opt,name=database,proto3" json:"database,omitempty"`
	// table is the name of the table, if it is not empty, Bytebase should create a table after creating the database.
	// For example, in MongoDB, it only creates the database when we first store data in that database.
	Table string `protobuf:"bytes,3,opt,name=table,proto3" json:"table,omitempty"`
	// character_set is the character set of the database.
	CharacterSet string `protobuf:"bytes,4,opt,name=character_set,json=characterSet,proto3" json:"character_set,omitempty"`
	// collation is the collation of the database.
	Collation string `protobuf:"bytes,5,opt,name=collation,proto3" json:"collation,omitempty"`
	// cluster is the cluster of the database. This is only applicable to ClickHouse for "ON CLUSTER <<cluster>>".
	Cluster string `protobuf:"bytes,6,opt,name=cluster,proto3" json:"cluster,omitempty"`
	// owner is the owner of the database. This is only applicable to Postgres for "WITH OWNER <<owner>>".
	Owner string `protobuf:"bytes,7,opt,name=owner,proto3" json:"owner,omitempty"`
	// The environment resource.
	// Format: environments/prod where prod is the environment resource ID.
	Environment   string `protobuf:"bytes,9,opt,name=environment,proto3" json:"environment,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Plan_CreateDatabaseConfig) Reset() {
	*x = Plan_CreateDatabaseConfig{}
	mi := &file_v1_plan_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Plan_CreateDatabaseConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Plan_CreateDatabaseConfig) ProtoMessage() {}

func (x *Plan_CreateDatabaseConfig) ProtoReflect() protoreflect.Message {
	mi := &file_v1_plan_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Plan_CreateDatabaseConfig.ProtoReflect.Descriptor instead.
func (*Plan_CreateDatabaseConfig) Descriptor() ([]byte, []int) {
	return file_v1_plan_service_proto_rawDescGZIP(), []int{7, 2}
}

func (x *Plan_CreateDatabaseConfig) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *Plan_CreateDatabaseConfig) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *Plan_CreateDatabaseConfig) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *Plan_CreateDatabaseConfig) GetCharacterSet() string {
	if x != nil {
		return x.CharacterSet
	}
	return ""
}

func (x *Plan_CreateDatabaseConfig) GetCollation() string {
	if x != nil {
		return x.Collation
	}
	return ""
}

func (x *Plan_CreateDatabaseConfig) GetCluster() string {
	if x != nil {
		return x.Cluster
	}
	return ""
}

func (x *Plan_CreateDatabaseConfig) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *Plan_CreateDatabaseConfig) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

type Plan_ChangeDatabaseConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The list of targets.
	// Multi-database format: [instances/{instance-id}/databases/{database-name}].
	// Single database group format: [projects/{project}/databaseGroups/{databaseGroup}].
	Targets []string `protobuf:"bytes,10,rep,name=targets,proto3" json:"targets,omitempty"`
	// The resource name of the sheet.
	// Format: projects/{project}/sheets/{sheet}
	Sheet string `protobuf:"bytes,2,opt,name=sheet,proto3" json:"sheet,omitempty"`
	// The resource name of the release.
	// Format: projects/{project}/releases/{release}
	Release    string                         `protobuf:"bytes,9,opt,name=release,proto3" json:"release,omitempty"`
	Type       Plan_ChangeDatabaseConfig_Type `protobuf:"varint,3,opt,name=type,proto3,enum=bytebase.v1.Plan_ChangeDatabaseConfig_Type" json:"type,omitempty"`
	GhostFlags map[string]string              `protobuf:"bytes,7,rep,name=ghost_flags,json=ghostFlags,proto3" json:"ghost_flags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// If set, a backup of the modified data will be created automatically before any changes are applied.
	EnablePriorBackup bool `protobuf:"varint,8,opt,name=enable_prior_backup,json=enablePriorBackup,proto3" json:"enable_prior_backup,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Plan_ChangeDatabaseConfig) Reset() {
	*x = Plan_ChangeDatabaseConfig{}
	mi := &file_v1_plan_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Plan_ChangeDatabaseConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Plan_ChangeDatabaseConfig) ProtoMessage() {}

func (x *Plan_ChangeDatabaseConfig) ProtoReflect() protoreflect.Message {
	mi := &file_v1_plan_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Plan_ChangeDatabaseConfig.ProtoReflect.Descriptor instead.
func (*Plan_ChangeDatabaseConfig) Descriptor() ([]byte, []int) {
	return file_v1_plan_service_proto_rawDescGZIP(), []int{7, 3}
}

func (x *Plan_ChangeDatabaseConfig) GetTargets() []string {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *Plan_ChangeDatabaseConfig) GetSheet() string {
	if x != nil {
		return x.Sheet
	}
	return ""
}

func (x *Plan_ChangeDatabaseConfig) GetRelease() string {
	if x != nil {
		return x.Release
	}
	return ""
}

func (x *Plan_ChangeDatabaseConfig) GetType() Plan_ChangeDatabaseConfig_Type {
	if x != nil {
		return x.Type
	}
	return Plan_ChangeDatabaseConfig_TYPE_UNSPECIFIED
}

func (x *Plan_ChangeDatabaseConfig) GetGhostFlags() map[string]string {
	if x != nil {
		return x.GhostFlags
	}
	return nil
}

func (x *Plan_ChangeDatabaseConfig) GetEnablePriorBackup() bool {
	if x != nil {
		return x.EnablePriorBackup
	}
	return false
}

type Plan_ExportDataConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The list of targets.
	// Multi-database format: [instances/{instance-id}/databases/{database-name}].
	// Single database group format: [projects/{project}/databaseGroups/{databaseGroup}].
	Targets []string `protobuf:"bytes,5,rep,name=targets,proto3" json:"targets,omitempty"`
	// The resource name of the sheet.
	// Format: projects/{project}/sheets/{sheet}
	Sheet string `protobuf:"bytes,2,opt,name=sheet,proto3" json:"sheet,omitempty"`
	// The format of the exported file.
	Format ExportFormat `protobuf:"varint,3,opt,name=format,proto3,enum=bytebase.v1.ExportFormat" json:"format,omitempty"`
	// The zip password provide by users.
	// Leave it empty if no needs to encrypt the zip file.
	Password      *string `protobuf:"bytes,4,opt,name=password,proto3,oneof" json:"password,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Plan_ExportDataConfig) Reset() {
	*x = Plan_ExportDataConfig{}
	mi := &file_v1_plan_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Plan_ExportDataConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Plan_ExportDataConfig) ProtoMessage() {}

func (x *Plan_ExportDataConfig) ProtoReflect() protoreflect.Message {
	mi := &file_v1_plan_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Plan_ExportDataConfig.ProtoReflect.Descriptor instead.
func (*Plan_ExportDataConfig) Descriptor() ([]byte, []int) {
	return file_v1_plan_service_proto_rawDescGZIP(), []int{7, 4}
}

func (x *Plan_ExportDataConfig) GetTargets() []string {
	if x != nil {
		return x.Targets
	}
	return nil
}

func (x *Plan_ExportDataConfig) GetSheet() string {
	if x != nil {
		return x.Sheet
	}
	return ""
}

func (x *Plan_ExportDataConfig) GetFormat() ExportFormat {
	if x != nil {
		return x.Format
	}
	return ExportFormat_FORMAT_UNSPECIFIED
}

func (x *Plan_ExportDataConfig) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

type Plan_Deployment struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The environments deploy order.
	Environments []string `protobuf:"bytes,1,rep,name=environments,proto3" json:"environments,omitempty"`
	// The database group mapping.
	DatabaseGroupMappings []*Plan_Deployment_DatabaseGroupMapping `protobuf:"bytes,2,rep,name=database_group_mappings,json=databaseGroupMappings,proto3" json:"database_group_mappings,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *Plan_Deployment) Reset() {
	*x = Plan_Deployment{}
	mi := &file_v1_plan_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Plan_Deployment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Plan_Deployment) ProtoMessage() {}

func (x *Plan_Deployment) ProtoReflect() protoreflect.Message {
	mi := &file_v1_plan_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Plan_Deployment.ProtoReflect.Descriptor instead.
func (*Plan_Deployment) Descriptor() ([]byte, []int) {
	return file_v1_plan_service_proto_rawDescGZIP(), []int{7, 5}
}

func (x *Plan_Deployment) GetEnvironments() []string {
	if x != nil {
		return x.Environments
	}
	return nil
}

func (x *Plan_Deployment) GetDatabaseGroupMappings() []*Plan_Deployment_DatabaseGroupMapping {
	if x != nil {
		return x.DatabaseGroupMappings
	}
	return nil
}

type Plan_Deployment_DatabaseGroupMapping struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Format: projects/{project}/databaseGroups/{databaseGroup}.
	DatabaseGroup string `protobuf:"bytes,1,opt,name=database_group,json=databaseGroup,proto3" json:"database_group,omitempty"`
	// Format: instances/{instance-id}/databases/{database-name}.
	Databases     []string `protobuf:"bytes,2,rep,name=databases,proto3" json:"databases,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Plan_Deployment_DatabaseGroupMapping) Reset() {
	*x = Plan_Deployment_DatabaseGroupMapping{}
	mi := &file_v1_plan_service_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Plan_Deployment_DatabaseGroupMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Plan_Deployment_DatabaseGroupMapping) ProtoMessage() {}

func (x *Plan_Deployment_DatabaseGroupMapping) ProtoReflect() protoreflect.Message {
	mi := &file_v1_plan_service_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Plan_Deployment_DatabaseGroupMapping.ProtoReflect.Descriptor instead.
func (*Plan_Deployment_DatabaseGroupMapping) Descriptor() ([]byte, []int) {
	return file_v1_plan_service_proto_rawDescGZIP(), []int{7, 5, 0}
}

func (x *Plan_Deployment_DatabaseGroupMapping) GetDatabaseGroup() string {
	if x != nil {
		return x.DatabaseGroup
	}
	return ""
}

func (x *Plan_Deployment_DatabaseGroupMapping) GetDatabases() []string {
	if x != nil {
		return x.Databases
	}
	return nil
}

type PlanCheckRun_Result struct {
	state   protoimpl.MessageState     `protogen:"open.v1"`
	Status  PlanCheckRun_Result_Status `protobuf:"varint,1,opt,name=status,proto3,enum=bytebase.v1.PlanCheckRun_Result_Status" json:"status,omitempty"`
	Title   string                     `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Content string                     `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	Code    int32                      `protobuf:"varint,4,opt,name=code,proto3" json:"code,omitempty"`
	// Types that are valid to be assigned to Report:
	//
	//	*PlanCheckRun_Result_SqlSummaryReport_
	//	*PlanCheckRun_Result_SqlReviewReport_
	Report        isPlanCheckRun_Result_Report `protobuf_oneof:"report"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlanCheckRun_Result) Reset() {
	*x = PlanCheckRun_Result{}
	mi := &file_v1_plan_service_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlanCheckRun_Result) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanCheckRun_Result) ProtoMessage() {}

func (x *PlanCheckRun_Result) ProtoReflect() protoreflect.Message {
	mi := &file_v1_plan_service_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanCheckRun_Result.ProtoReflect.Descriptor instead.
func (*PlanCheckRun_Result) Descriptor() ([]byte, []int) {
	return file_v1_plan_service_proto_rawDescGZIP(), []int{14, 0}
}

func (x *PlanCheckRun_Result) GetStatus() PlanCheckRun_Result_Status {
	if x != nil {
		return x.Status
	}
	return PlanCheckRun_Result_STATUS_UNSPECIFIED
}

func (x *PlanCheckRun_Result) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PlanCheckRun_Result) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *PlanCheckRun_Result) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *PlanCheckRun_Result) GetReport() isPlanCheckRun_Result_Report {
	if x != nil {
		return x.Report
	}
	return nil
}

func (x *PlanCheckRun_Result) GetSqlSummaryReport() *PlanCheckRun_Result_SqlSummaryReport {
	if x != nil {
		if x, ok := x.Report.(*PlanCheckRun_Result_SqlSummaryReport_); ok {
			return x.SqlSummaryReport
		}
	}
	return nil
}

func (x *PlanCheckRun_Result) GetSqlReviewReport() *PlanCheckRun_Result_SqlReviewReport {
	if x != nil {
		if x, ok := x.Report.(*PlanCheckRun_Result_SqlReviewReport_); ok {
			return x.SqlReviewReport
		}
	}
	return nil
}

type isPlanCheckRun_Result_Report interface {
	isPlanCheckRun_Result_Report()
}

type PlanCheckRun_Result_SqlSummaryReport_ struct {
	SqlSummaryReport *PlanCheckRun_Result_SqlSummaryReport `protobuf:"bytes,5,opt,name=sql_summary_report,json=sqlSummaryReport,proto3,oneof"`
}

type PlanCheckRun_Result_SqlReviewReport_ struct {
	SqlReviewReport *PlanCheckRun_Result_SqlReviewReport `protobuf:"bytes,6,opt,name=sql_review_report,json=sqlReviewReport,proto3,oneof"`
}

func (*PlanCheckRun_Result_SqlSummaryReport_) isPlanCheckRun_Result_Report() {}

func (*PlanCheckRun_Result_SqlReviewReport_) isPlanCheckRun_Result_Report() {}

type PlanCheckRun_Result_SqlSummaryReport struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// statement_types are the types of statements that are found in the sql.
	StatementTypes   []string          `protobuf:"bytes,2,rep,name=statement_types,json=statementTypes,proto3" json:"statement_types,omitempty"`
	AffectedRows     int32             `protobuf:"varint,3,opt,name=affected_rows,json=affectedRows,proto3" json:"affected_rows,omitempty"`
	ChangedResources *ChangedResources `protobuf:"bytes,4,opt,name=changed_resources,json=changedResources,proto3" json:"changed_resources,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *PlanCheckRun_Result_SqlSummaryReport) Reset() {
	*x = PlanCheckRun_Result_SqlSummaryReport{}
	mi := &file_v1_plan_service_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlanCheckRun_Result_SqlSummaryReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanCheckRun_Result_SqlSummaryReport) ProtoMessage() {}

func (x *PlanCheckRun_Result_SqlSummaryReport) ProtoReflect() protoreflect.Message {
	mi := &file_v1_plan_service_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanCheckRun_Result_SqlSummaryReport.ProtoReflect.Descriptor instead.
func (*PlanCheckRun_Result_SqlSummaryReport) Descriptor() ([]byte, []int) {
	return file_v1_plan_service_proto_rawDescGZIP(), []int{14, 0, 0}
}

func (x *PlanCheckRun_Result_SqlSummaryReport) GetStatementTypes() []string {
	if x != nil {
		return x.StatementTypes
	}
	return nil
}

func (x *PlanCheckRun_Result_SqlSummaryReport) GetAffectedRows() int32 {
	if x != nil {
		return x.AffectedRows
	}
	return 0
}

func (x *PlanCheckRun_Result_SqlSummaryReport) GetChangedResources() *ChangedResources {
	if x != nil {
		return x.ChangedResources
	}
	return nil
}

type PlanCheckRun_Result_SqlReviewReport struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Line   int32                  `protobuf:"varint,1,opt,name=line,proto3" json:"line,omitempty"`
	Column int32                  `protobuf:"varint,2,opt,name=column,proto3" json:"column,omitempty"`
	// 1-based Position of the SQL statement.
	// To supersede `line` and `column` above.
	StartPosition *Position `protobuf:"bytes,5,opt,name=start_position,json=startPosition,proto3" json:"start_position,omitempty"`
	EndPosition   *Position `protobuf:"bytes,6,opt,name=end_position,json=endPosition,proto3" json:"end_position,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PlanCheckRun_Result_SqlReviewReport) Reset() {
	*x = PlanCheckRun_Result_SqlReviewReport{}
	mi := &file_v1_plan_service_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PlanCheckRun_Result_SqlReviewReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlanCheckRun_Result_SqlReviewReport) ProtoMessage() {}

func (x *PlanCheckRun_Result_SqlReviewReport) ProtoReflect() protoreflect.Message {
	mi := &file_v1_plan_service_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlanCheckRun_Result_SqlReviewReport.ProtoReflect.Descriptor instead.
func (*PlanCheckRun_Result_SqlReviewReport) Descriptor() ([]byte, []int) {
	return file_v1_plan_service_proto_rawDescGZIP(), []int{14, 0, 1}
}

func (x *PlanCheckRun_Result_SqlReviewReport) GetLine() int32 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *PlanCheckRun_Result_SqlReviewReport) GetColumn() int32 {
	if x != nil {
		return x.Column
	}
	return 0
}

func (x *PlanCheckRun_Result_SqlReviewReport) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *PlanCheckRun_Result_SqlReviewReport) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

var File_v1_plan_service_proto protoreflect.FileDescriptor

const file_v1_plan_service_proto_rawDesc = "" +
	"\n" +
	"\x15v1/plan_service.proto\x12\vbytebase.v1\x1a\x1cgoogle/api/annotations.proto\x1a\x17google/api/client.proto\x1a\x1fgoogle/api/field_behavior.proto\x1a\x19google/api/resource.proto\x1a google/protobuf/field_mask.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x13v1/annotation.proto\x1a\x0fv1/common.proto\x1a\x19v1/database_service.proto\"@\n" +
	"\x0eGetPlanRequest\x12.\n" +
	"\x04name\x18\x01 \x01(\tB\x1a\xe2A\x01\x02\xfaA\x13\n" +
	"\x11bytebase.com/PlanR\x04name\"\x85\x01\n" +
	"\x10ListPlansRequest\x125\n" +
	"\x06parent\x18\x01 \x01(\tB\x1d\xe2A\x01\x02\xfaA\x16\n" +
	"\x14bytebase.com/ProjectR\x06parent\x12\x1b\n" +
	"\tpage_size\x18\x02 \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tR\tpageToken\"d\n" +
	"\x11ListPlansResponse\x12'\n" +
	"\x05plans\x18\x01 \x03(\v2\x11.bytebase.v1.PlanR\x05plans\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"\x86\x01\n" +
	"\x12SearchPlansRequest\x12\x1c\n" +
	"\x06parent\x18\x01 \x01(\tB\x04\xe2A\x01\x02R\x06parent\x12\x1b\n" +
	"\tpage_size\x18\x02 \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tR\tpageToken\x12\x16\n" +
	"\x06filter\x18\x04 \x01(\tR\x06filter\"f\n" +
	"\x13SearchPlansResponse\x12'\n" +
	"\x05plans\x18\x01 \x03(\v2\x11.bytebase.v1.PlanR\x05plans\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"w\n" +
	"\x11CreatePlanRequest\x125\n" +
	"\x06parent\x18\x01 \x01(\tB\x1d\xe2A\x01\x02\xfaA\x16\n" +
	"\x14bytebase.com/ProjectR\x06parent\x12+\n" +
	"\x04plan\x18\x02 \x01(\v2\x11.bytebase.v1.PlanB\x04\xe2A\x01\x02R\x04plan\"\x83\x01\n" +
	"\x11UpdatePlanRequest\x12+\n" +
	"\x04plan\x18\x01 \x01(\v2\x11.bytebase.v1.PlanB\x04\xe2A\x01\x02R\x04plan\x12A\n" +
	"\vupdate_mask\x18\x02 \x01(\v2\x1a.google.protobuf.FieldMaskB\x04\xe2A\x01\x02R\n" +
	"updateMask\"\x8b\x11\n" +
	"\x04Plan\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1a\n" +
	"\x05issue\x18\x03 \x01(\tB\x04\xe2A\x01\x03R\x05issue\x12\x1e\n" +
	"\arollout\x18\x0f \x01(\tB\x04\xe2A\x01\x03R\arollout\x12\x14\n" +
	"\x05title\x18\x04 \x01(\tR\x05title\x12 \n" +
	"\vdescription\x18\x05 \x01(\tR\vdescription\x12,\n" +
	"\x05specs\x18\x0e \x03(\v2\x16.bytebase.v1.Plan.SpecR\x05specs\x12\x1e\n" +
	"\acreator\x18\b \x01(\tB\x04\xe2A\x01\x03R\acreator\x12A\n" +
	"\vcreate_time\x18\t \x01(\v2\x1a.google.protobuf.TimestampB\x04\xe2A\x01\x03R\n" +
	"createTime\x12A\n" +
	"\vupdate_time\x18\n" +
	" \x01(\v2\x1a.google.protobuf.TimestampB\x04\xe2A\x01\x03R\n" +
	"updateTime\x12r\n" +
	"\x1bplan_check_run_status_count\x18\v \x03(\v2..bytebase.v1.Plan.PlanCheckRunStatusCountEntryB\x04\xe2A\x01\x03R\x17planCheckRunStatusCount\x12<\n" +
	"\n" +
	"deployment\x18\r \x01(\v2\x1c.bytebase.v1.Plan.DeploymentR\n" +
	"deployment\x1a\xb4\x02\n" +
	"\x04Spec\x12\x0e\n" +
	"\x02id\x18\x05 \x01(\tR\x02id\x12^\n" +
	"\x16create_database_config\x18\x01 \x01(\v2&.bytebase.v1.Plan.CreateDatabaseConfigH\x00R\x14createDatabaseConfig\x12^\n" +
	"\x16change_database_config\x18\x02 \x01(\v2&.bytebase.v1.Plan.ChangeDatabaseConfigH\x00R\x14changeDatabaseConfig\x12R\n" +
	"\x12export_data_config\x18\a \x01(\v2\".bytebase.v1.Plan.ExportDataConfigH\x00R\x10exportDataConfigB\b\n" +
	"\x06config\x1aJ\n" +
	"\x1cPlanCheckRunStatusCountEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\x1a\xa5\x02\n" +
	"\x14CreateDatabaseConfig\x12\x1c\n" +
	"\x06target\x18\x01 \x01(\tB\x04\xe2A\x01\x02R\x06target\x12 \n" +
	"\bdatabase\x18\x02 \x01(\tB\x04\xe2A\x01\x02R\bdatabase\x12\x1a\n" +
	"\x05table\x18\x03 \x01(\tB\x04\xe2A\x01\x01R\x05table\x12)\n" +
	"\rcharacter_set\x18\x04 \x01(\tB\x04\xe2A\x01\x01R\fcharacterSet\x12\"\n" +
	"\tcollation\x18\x05 \x01(\tB\x04\xe2A\x01\x01R\tcollation\x12\x1e\n" +
	"\acluster\x18\x06 \x01(\tB\x04\xe2A\x01\x01R\acluster\x12\x1a\n" +
	"\x05owner\x18\a \x01(\tB\x04\xe2A\x01\x01R\x05owner\x12&\n" +
	"\venvironment\x18\t \x01(\tB\x04\xe2A\x01\x01R\venvironment\x1a\xe9\x03\n" +
	"\x14ChangeDatabaseConfig\x12\x18\n" +
	"\atargets\x18\n" +
	" \x03(\tR\atargets\x12\x14\n" +
	"\x05sheet\x18\x02 \x01(\tR\x05sheet\x123\n" +
	"\arelease\x18\t \x01(\tB\x19\xfaA\x16\n" +
	"\x14bytebase.com/ReleaseR\arelease\x12?\n" +
	"\x04type\x18\x03 \x01(\x0e2+.bytebase.v1.Plan.ChangeDatabaseConfig.TypeR\x04type\x12W\n" +
	"\vghost_flags\x18\a \x03(\v26.bytebase.v1.Plan.ChangeDatabaseConfig.GhostFlagsEntryR\n" +
	"ghostFlags\x12.\n" +
	"\x13enable_prior_backup\x18\b \x01(\bR\x11enablePriorBackup\x1a=\n" +
	"\x0fGhostFlagsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"W\n" +
	"\x04Type\x12\x14\n" +
	"\x10TYPE_UNSPECIFIED\x10\x00\x12\v\n" +
	"\aMIGRATE\x10\x02\x12\x0f\n" +
	"\vMIGRATE_SDL\x10\x03\x12\x11\n" +
	"\rMIGRATE_GHOST\x10\x04\x12\b\n" +
	"\x04DATA\x10\x06J\x04\b\x05\x10\x06J\x04\b\x06\x10\a\x1a\xa3\x01\n" +
	"\x10ExportDataConfig\x12\x18\n" +
	"\atargets\x18\x05 \x03(\tR\atargets\x12\x14\n" +
	"\x05sheet\x18\x02 \x01(\tR\x05sheet\x121\n" +
	"\x06format\x18\x03 \x01(\x0e2\x19.bytebase.v1.ExportFormatR\x06format\x12\x1f\n" +
	"\bpassword\x18\x04 \x01(\tH\x00R\bpassword\x88\x01\x01B\v\n" +
	"\t_password\x1a\xf8\x01\n" +
	"\n" +
	"Deployment\x12\"\n" +
	"\fenvironments\x18\x01 \x03(\tR\fenvironments\x12i\n" +
	"\x17database_group_mappings\x18\x02 \x03(\v21.bytebase.v1.Plan.Deployment.DatabaseGroupMappingR\x15databaseGroupMappings\x1a[\n" +
	"\x14DatabaseGroupMapping\x12%\n" +
	"\x0edatabase_group\x18\x01 \x01(\tR\rdatabaseGroup\x12\x1c\n" +
	"\tdatabases\x18\x02 \x03(\tR\tdatabases:7\xeaA4\n" +
	"\x11bytebase.com/Plan\x12\x1fprojects/{project}/plans/{plan}J\x04\b\x02\x10\x03\"\xab\x01\n" +
	"\x18ListPlanCheckRunsRequest\x122\n" +
	"\x06parent\x18\x01 \x01(\tB\x1a\xe2A\x01\x02\xfaA\x13\n" +
	"\x11bytebase.com/PlanR\x06parent\x12\x1b\n" +
	"\tpage_size\x18\x02 \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tR\tpageToken\x12\x1f\n" +
	"\vlatest_only\x18\x04 \x01(\bR\n" +
	"latestOnly\"\x86\x01\n" +
	"\x19ListPlanCheckRunsResponse\x12A\n" +
	"\x0fplan_check_runs\x18\x01 \x03(\v2\x19.bytebase.v1.PlanCheckRunR\rplanCheckRuns\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"p\n" +
	"\x14RunPlanChecksRequest\x12.\n" +
	"\x04name\x18\x01 \x01(\tB\x1a\xe2A\x01\x02\xfaA\x13\n" +
	"\x11bytebase.com/PlanR\x04name\x12\x1c\n" +
	"\aspec_id\x18\x02 \x01(\tH\x00R\x06specId\x88\x01\x01B\n" +
	"\n" +
	"\b_spec_id\"\x17\n" +
	"\x15RunPlanChecksResponse\"}\n" +
	"\x1fBatchCancelPlanCheckRunsRequest\x122\n" +
	"\x06parent\x18\x01 \x01(\tB\x1a\xe2A\x01\x02\xfaA\x13\n" +
	"\x11bytebase.com/PlanR\x06parent\x12&\n" +
	"\x0fplan_check_runs\x18\x02 \x03(\tR\rplanCheckRuns\"\"\n" +
	" BatchCancelPlanCheckRunsResponse\"\x81\v\n" +
	"\fPlanCheckRun\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x122\n" +
	"\x04type\x18\x03 \x01(\x0e2\x1e.bytebase.v1.PlanCheckRun.TypeR\x04type\x128\n" +
	"\x06status\x18\x04 \x01(\x0e2 .bytebase.v1.PlanCheckRun.StatusR\x06status\x12\x16\n" +
	"\x06target\x18\x05 \x01(\tR\x06target\x12\x14\n" +
	"\x05sheet\x18\x06 \x01(\tR\x05sheet\x12:\n" +
	"\aresults\x18\a \x03(\v2 .bytebase.v1.PlanCheckRun.ResultR\aresults\x12\x14\n" +
	"\x05error\x18\b \x01(\tR\x05error\x12A\n" +
	"\vcreate_time\x18\t \x01(\v2\x1a.google.protobuf.TimestampB\x04\xe2A\x01\x03R\n" +
	"createTime\x1a\x9a\x06\n" +
	"\x06Result\x12?\n" +
	"\x06status\x18\x01 \x01(\x0e2'.bytebase.v1.PlanCheckRun.Result.StatusR\x06status\x12\x14\n" +
	"\x05title\x18\x02 \x01(\tR\x05title\x12\x18\n" +
	"\acontent\x18\x03 \x01(\tR\acontent\x12\x12\n" +
	"\x04code\x18\x04 \x01(\x05R\x04code\x12a\n" +
	"\x12sql_summary_report\x18\x05 \x01(\v21.bytebase.v1.PlanCheckRun.Result.SqlSummaryReportH\x00R\x10sqlSummaryReport\x12^\n" +
	"\x11sql_review_report\x18\x06 \x01(\v20.bytebase.v1.PlanCheckRun.Result.SqlReviewReportH\x00R\x0fsqlReviewReport\x1a\xb2\x01\n" +
	"\x10SqlSummaryReport\x12'\n" +
	"\x0fstatement_types\x18\x02 \x03(\tR\x0estatementTypes\x12#\n" +
	"\raffected_rows\x18\x03 \x01(\x05R\faffectedRows\x12J\n" +
	"\x11changed_resources\x18\x04 \x01(\v2\x1d.bytebase.v1.ChangedResourcesR\x10changedResourcesJ\x04\b\x01\x10\x02\x1a\xc1\x01\n" +
	"\x0fSqlReviewReport\x12\x12\n" +
	"\x04line\x18\x01 \x01(\x05R\x04line\x12\x16\n" +
	"\x06column\x18\x02 \x01(\x05R\x06column\x12<\n" +
	"\x0estart_position\x18\x05 \x01(\v2\x15.bytebase.v1.PositionR\rstartPosition\x128\n" +
	"\fend_position\x18\x06 \x01(\v2\x15.bytebase.v1.PositionR\vendPositionJ\x04\b\x03\x10\x04J\x04\b\x04\x10\x05\"E\n" +
	"\x06Status\x12\x16\n" +
	"\x12STATUS_UNSPECIFIED\x10\x00\x12\t\n" +
	"\x05ERROR\x10\x01\x12\v\n" +
	"\aWARNING\x10\x02\x12\v\n" +
	"\aSUCCESS\x10\x03B\b\n" +
	"\x06report\"\xb5\x01\n" +
	"\x04Type\x12\x14\n" +
	"\x10TYPE_UNSPECIFIED\x10\x00\x12\"\n" +
	"\x1eDATABASE_STATEMENT_FAKE_ADVISE\x10\x01\x12\x1d\n" +
	"\x19DATABASE_STATEMENT_ADVISE\x10\x03\x12%\n" +
	"!DATABASE_STATEMENT_SUMMARY_REPORT\x10\x05\x12\x14\n" +
	"\x10DATABASE_CONNECT\x10\x06\x12\x17\n" +
	"\x13DATABASE_GHOST_SYNC\x10\a\"Q\n" +
	"\x06Status\x12\x16\n" +
	"\x12STATUS_UNSPECIFIED\x10\x00\x12\v\n" +
	"\aRUNNING\x10\x01\x12\b\n" +
	"\x04DONE\x10\x02\x12\n" +
	"\n" +
	"\x06FAILED\x10\x03\x12\f\n" +
	"\bCANCELED\x10\x04J\x04\b\x02\x10\x032\xd2\n" +
	"\n" +
	"\vPlanService\x12{\n" +
	"\aGetPlan\x12\x1b.bytebase.v1.GetPlanRequest\x1a\x11.bytebase.v1.Plan\"@\xdaA\x04name\x8a\xea0\fbb.plans.get\x90\xea0\x01\x82\xd3\xe4\x93\x02\x1f\x12\x1d/v1/{name=projects/*/plans/*}\x12\x8f\x01\n" +
	"\tListPlans\x12\x1d.bytebase.v1.ListPlansRequest\x1a\x1e.bytebase.v1.ListPlansResponse\"C\xdaA\x06parent\x8a\xea0\rbb.plans.list\x90\xea0\x01\x82\xd3\xe4\x93\x02\x1f\x12\x1d/v1/{parent=projects/*}/plans\x12\x9e\x01\n" +
	"\vSearchPlans\x12\x1f.bytebase.v1.SearchPlansRequest\x1a .bytebase.v1.SearchPlansResponse\"L\xdaA\x06parent\x8a\xea0\fbb.plans.get\x90\xea0\x02\x82\xd3\xe4\x93\x02):\x01*\"$/v1/{parent=projects/*}/plans:search\x12\x95\x01\n" +
	"\n" +
	"CreatePlan\x12\x1e.bytebase.v1.CreatePlanRequest\x1a\x11.bytebase.v1.Plan\"T\xdaA\vparent,plan\x8a\xea0\x0fbb.plans.create\x90\xea0\x01\x98\xea0\x01\x82\xd3\xe4\x93\x02%:\x04plan\"\x1d/v1/{parent=projects/*}/plans\x12\x9f\x01\n" +
	"\n" +
	"UpdatePlan\x12\x1e.bytebase.v1.UpdatePlanRequest\x1a\x11.bytebase.v1.Plan\"^\xdaA\x10plan,update_mask\x8a\xea0\x0fbb.plans.update\x90\xea0\x02\x98\xea0\x01\x82\xd3\xe4\x93\x02*:\x04plan2\"/v1/{plan.name=projects/*/plans/*}\x12\xbf\x01\n" +
	"\x11ListPlanCheckRuns\x12%.bytebase.v1.ListPlanCheckRunsRequest\x1a&.bytebase.v1.ListPlanCheckRunsResponse\"[\xdaA\x06parent\x8a\xea0\x15bb.planCheckRuns.list\x90\xea0\x01\x82\xd3\xe4\x93\x02/\x12-/v1/{parent=projects/*/plans/*}/planCheckRuns\x12\xb1\x01\n" +
	"\rRunPlanChecks\x12!.bytebase.v1.RunPlanChecksRequest\x1a\".bytebase.v1.RunPlanChecksResponse\"Y\xdaA\x04name\x8a\xea0\x14bb.planCheckRuns.run\x90\xea0\x01\x82\xd3\xe4\x93\x020:\x01*\"+/v1/{name=projects/*/plans/*}:runPlanChecks\x12\xe2\x01\n" +
	"\x18BatchCancelPlanCheckRuns\x12,.bytebase.v1.BatchCancelPlanCheckRunsRequest\x1a-.bytebase.v1.BatchCancelPlanCheckRunsResponse\"i\xdaA\x06parent\x8a\xea0\x14bb.planCheckRuns.run\x90\xea0\x01\x82\xd3\xe4\x93\x02>:\x01*\"9/v1/{parent=projects/*/plans/*}/planCheckRuns:batchCancelB\x11Z\x0fgenerated-go/v1b\x06proto3"

var (
	file_v1_plan_service_proto_rawDescOnce sync.Once
	file_v1_plan_service_proto_rawDescData []byte
)

func file_v1_plan_service_proto_rawDescGZIP() []byte {
	file_v1_plan_service_proto_rawDescOnce.Do(func() {
		file_v1_plan_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_v1_plan_service_proto_rawDesc), len(file_v1_plan_service_proto_rawDesc)))
	})
	return file_v1_plan_service_proto_rawDescData
}

var file_v1_plan_service_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_v1_plan_service_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_v1_plan_service_proto_goTypes = []any{
	(Plan_ChangeDatabaseConfig_Type)(0),          // 0: bytebase.v1.Plan.ChangeDatabaseConfig.Type
	(PlanCheckRun_Type)(0),                       // 1: bytebase.v1.PlanCheckRun.Type
	(PlanCheckRun_Status)(0),                     // 2: bytebase.v1.PlanCheckRun.Status
	(PlanCheckRun_Result_Status)(0),              // 3: bytebase.v1.PlanCheckRun.Result.Status
	(*GetPlanRequest)(nil),                       // 4: bytebase.v1.GetPlanRequest
	(*ListPlansRequest)(nil),                     // 5: bytebase.v1.ListPlansRequest
	(*ListPlansResponse)(nil),                    // 6: bytebase.v1.ListPlansResponse
	(*SearchPlansRequest)(nil),                   // 7: bytebase.v1.SearchPlansRequest
	(*SearchPlansResponse)(nil),                  // 8: bytebase.v1.SearchPlansResponse
	(*CreatePlanRequest)(nil),                    // 9: bytebase.v1.CreatePlanRequest
	(*UpdatePlanRequest)(nil),                    // 10: bytebase.v1.UpdatePlanRequest
	(*Plan)(nil),                                 // 11: bytebase.v1.Plan
	(*ListPlanCheckRunsRequest)(nil),             // 12: bytebase.v1.ListPlanCheckRunsRequest
	(*ListPlanCheckRunsResponse)(nil),            // 13: bytebase.v1.ListPlanCheckRunsResponse
	(*RunPlanChecksRequest)(nil),                 // 14: bytebase.v1.RunPlanChecksRequest
	(*RunPlanChecksResponse)(nil),                // 15: bytebase.v1.RunPlanChecksResponse
	(*BatchCancelPlanCheckRunsRequest)(nil),      // 16: bytebase.v1.BatchCancelPlanCheckRunsRequest
	(*BatchCancelPlanCheckRunsResponse)(nil),     // 17: bytebase.v1.BatchCancelPlanCheckRunsResponse
	(*PlanCheckRun)(nil),                         // 18: bytebase.v1.PlanCheckRun
	(*Plan_Spec)(nil),                            // 19: bytebase.v1.Plan.Spec
	nil,                                          // 20: bytebase.v1.Plan.PlanCheckRunStatusCountEntry
	(*Plan_CreateDatabaseConfig)(nil),            // 21: bytebase.v1.Plan.CreateDatabaseConfig
	(*Plan_ChangeDatabaseConfig)(nil),            // 22: bytebase.v1.Plan.ChangeDatabaseConfig
	(*Plan_ExportDataConfig)(nil),                // 23: bytebase.v1.Plan.ExportDataConfig
	(*Plan_Deployment)(nil),                      // 24: bytebase.v1.Plan.Deployment
	nil,                                          // 25: bytebase.v1.Plan.ChangeDatabaseConfig.GhostFlagsEntry
	(*Plan_Deployment_DatabaseGroupMapping)(nil), // 26: bytebase.v1.Plan.Deployment.DatabaseGroupMapping
	(*PlanCheckRun_Result)(nil),                  // 27: bytebase.v1.PlanCheckRun.Result
	(*PlanCheckRun_Result_SqlSummaryReport)(nil), // 28: bytebase.v1.PlanCheckRun.Result.SqlSummaryReport
	(*PlanCheckRun_Result_SqlReviewReport)(nil),  // 29: bytebase.v1.PlanCheckRun.Result.SqlReviewReport
	(*fieldmaskpb.FieldMask)(nil),                // 30: google.protobuf.FieldMask
	(*timestamppb.Timestamp)(nil),                // 31: google.protobuf.Timestamp
	(ExportFormat)(0),                            // 32: bytebase.v1.ExportFormat
	(*ChangedResources)(nil),                     // 33: bytebase.v1.ChangedResources
	(*Position)(nil),                             // 34: bytebase.v1.Position
}
var file_v1_plan_service_proto_depIdxs = []int32{
	11, // 0: bytebase.v1.ListPlansResponse.plans:type_name -> bytebase.v1.Plan
	11, // 1: bytebase.v1.SearchPlansResponse.plans:type_name -> bytebase.v1.Plan
	11, // 2: bytebase.v1.CreatePlanRequest.plan:type_name -> bytebase.v1.Plan
	11, // 3: bytebase.v1.UpdatePlanRequest.plan:type_name -> bytebase.v1.Plan
	30, // 4: bytebase.v1.UpdatePlanRequest.update_mask:type_name -> google.protobuf.FieldMask
	19, // 5: bytebase.v1.Plan.specs:type_name -> bytebase.v1.Plan.Spec
	31, // 6: bytebase.v1.Plan.create_time:type_name -> google.protobuf.Timestamp
	31, // 7: bytebase.v1.Plan.update_time:type_name -> google.protobuf.Timestamp
	20, // 8: bytebase.v1.Plan.plan_check_run_status_count:type_name -> bytebase.v1.Plan.PlanCheckRunStatusCountEntry
	24, // 9: bytebase.v1.Plan.deployment:type_name -> bytebase.v1.Plan.Deployment
	18, // 10: bytebase.v1.ListPlanCheckRunsResponse.plan_check_runs:type_name -> bytebase.v1.PlanCheckRun
	1,  // 11: bytebase.v1.PlanCheckRun.type:type_name -> bytebase.v1.PlanCheckRun.Type
	2,  // 12: bytebase.v1.PlanCheckRun.status:type_name -> bytebase.v1.PlanCheckRun.Status
	27, // 13: bytebase.v1.PlanCheckRun.results:type_name -> bytebase.v1.PlanCheckRun.Result
	31, // 14: bytebase.v1.PlanCheckRun.create_time:type_name -> google.protobuf.Timestamp
	21, // 15: bytebase.v1.Plan.Spec.create_database_config:type_name -> bytebase.v1.Plan.CreateDatabaseConfig
	22, // 16: bytebase.v1.Plan.Spec.change_database_config:type_name -> bytebase.v1.Plan.ChangeDatabaseConfig
	23, // 17: bytebase.v1.Plan.Spec.export_data_config:type_name -> bytebase.v1.Plan.ExportDataConfig
	0,  // 18: bytebase.v1.Plan.ChangeDatabaseConfig.type:type_name -> bytebase.v1.Plan.ChangeDatabaseConfig.Type
	25, // 19: bytebase.v1.Plan.ChangeDatabaseConfig.ghost_flags:type_name -> bytebase.v1.Plan.ChangeDatabaseConfig.GhostFlagsEntry
	32, // 20: bytebase.v1.Plan.ExportDataConfig.format:type_name -> bytebase.v1.ExportFormat
	26, // 21: bytebase.v1.Plan.Deployment.database_group_mappings:type_name -> bytebase.v1.Plan.Deployment.DatabaseGroupMapping
	3,  // 22: bytebase.v1.PlanCheckRun.Result.status:type_name -> bytebase.v1.PlanCheckRun.Result.Status
	28, // 23: bytebase.v1.PlanCheckRun.Result.sql_summary_report:type_name -> bytebase.v1.PlanCheckRun.Result.SqlSummaryReport
	29, // 24: bytebase.v1.PlanCheckRun.Result.sql_review_report:type_name -> bytebase.v1.PlanCheckRun.Result.SqlReviewReport
	33, // 25: bytebase.v1.PlanCheckRun.Result.SqlSummaryReport.changed_resources:type_name -> bytebase.v1.ChangedResources
	34, // 26: bytebase.v1.PlanCheckRun.Result.SqlReviewReport.start_position:type_name -> bytebase.v1.Position
	34, // 27: bytebase.v1.PlanCheckRun.Result.SqlReviewReport.end_position:type_name -> bytebase.v1.Position
	4,  // 28: bytebase.v1.PlanService.GetPlan:input_type -> bytebase.v1.GetPlanRequest
	5,  // 29: bytebase.v1.PlanService.ListPlans:input_type -> bytebase.v1.ListPlansRequest
	7,  // 30: bytebase.v1.PlanService.SearchPlans:input_type -> bytebase.v1.SearchPlansRequest
	9,  // 31: bytebase.v1.PlanService.CreatePlan:input_type -> bytebase.v1.CreatePlanRequest
	10, // 32: bytebase.v1.PlanService.UpdatePlan:input_type -> bytebase.v1.UpdatePlanRequest
	12, // 33: bytebase.v1.PlanService.ListPlanCheckRuns:input_type -> bytebase.v1.ListPlanCheckRunsRequest
	14, // 34: bytebase.v1.PlanService.RunPlanChecks:input_type -> bytebase.v1.RunPlanChecksRequest
	16, // 35: bytebase.v1.PlanService.BatchCancelPlanCheckRuns:input_type -> bytebase.v1.BatchCancelPlanCheckRunsRequest
	11, // 36: bytebase.v1.PlanService.GetPlan:output_type -> bytebase.v1.Plan
	6,  // 37: bytebase.v1.PlanService.ListPlans:output_type -> bytebase.v1.ListPlansResponse
	8,  // 38: bytebase.v1.PlanService.SearchPlans:output_type -> bytebase.v1.SearchPlansResponse
	11, // 39: bytebase.v1.PlanService.CreatePlan:output_type -> bytebase.v1.Plan
	11, // 40: bytebase.v1.PlanService.UpdatePlan:output_type -> bytebase.v1.Plan
	13, // 41: bytebase.v1.PlanService.ListPlanCheckRuns:output_type -> bytebase.v1.ListPlanCheckRunsResponse
	15, // 42: bytebase.v1.PlanService.RunPlanChecks:output_type -> bytebase.v1.RunPlanChecksResponse
	17, // 43: bytebase.v1.PlanService.BatchCancelPlanCheckRuns:output_type -> bytebase.v1.BatchCancelPlanCheckRunsResponse
	36, // [36:44] is the sub-list for method output_type
	28, // [28:36] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_v1_plan_service_proto_init() }
func file_v1_plan_service_proto_init() {
	if File_v1_plan_service_proto != nil {
		return
	}
	file_v1_annotation_proto_init()
	file_v1_common_proto_init()
	file_v1_database_service_proto_init()
	file_v1_plan_service_proto_msgTypes[10].OneofWrappers = []any{}
	file_v1_plan_service_proto_msgTypes[15].OneofWrappers = []any{
		(*Plan_Spec_CreateDatabaseConfig)(nil),
		(*Plan_Spec_ChangeDatabaseConfig)(nil),
		(*Plan_Spec_ExportDataConfig)(nil),
	}
	file_v1_plan_service_proto_msgTypes[19].OneofWrappers = []any{}
	file_v1_plan_service_proto_msgTypes[23].OneofWrappers = []any{
		(*PlanCheckRun_Result_SqlSummaryReport_)(nil),
		(*PlanCheckRun_Result_SqlReviewReport_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_v1_plan_service_proto_rawDesc), len(file_v1_plan_service_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v1_plan_service_proto_goTypes,
		DependencyIndexes: file_v1_plan_service_proto_depIdxs,
		EnumInfos:         file_v1_plan_service_proto_enumTypes,
		MessageInfos:      file_v1_plan_service_proto_msgTypes,
	}.Build()
	File_v1_plan_service_proto = out.File
	file_v1_plan_service_proto_goTypes = nil
	file_v1_plan_service_proto_depIdxs = nil
}
