// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: v1/worksheet_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	WorksheetService_CreateWorksheet_FullMethodName          = "/bytebase.v1.WorksheetService/CreateWorksheet"
	WorksheetService_GetWorksheet_FullMethodName             = "/bytebase.v1.WorksheetService/GetWorksheet"
	WorksheetService_SearchWorksheets_FullMethodName         = "/bytebase.v1.WorksheetService/SearchWorksheets"
	WorksheetService_UpdateWorksheet_FullMethodName          = "/bytebase.v1.WorksheetService/UpdateWorksheet"
	WorksheetService_UpdateWorksheetOrganizer_FullMethodName = "/bytebase.v1.WorksheetService/UpdateWorksheetOrganizer"
	WorksheetService_DeleteWorksheet_FullMethodName          = "/bytebase.v1.WorksheetService/DeleteWorksheet"
)

// WorksheetServiceClient is the client API for WorksheetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WorksheetServiceClient interface {
	// Create a personal worksheet used in SQL Editor.
	CreateWorksheet(ctx context.Context, in *CreateWorksheetRequest, opts ...grpc.CallOption) (*Worksheet, error)
	// Get a worksheet by name.
	// The users can access this method if,
	// - they are the creator of the worksheet;
	// - they have bb.worksheets.get permission on the workspace;
	// - the sheet is shared with them with PROJECT_READ and PROJECT_WRITE visibility, and they have bb.projects.get permission on the project.
	GetWorksheet(ctx context.Context, in *GetWorksheetRequest, opts ...grpc.CallOption) (*Worksheet, error)
	// Search for worksheets.
	// This is used for finding my worksheets or worksheets shared by other people.
	// The sheet accessibility is the same as GetWorksheet().
	SearchWorksheets(ctx context.Context, in *SearchWorksheetsRequest, opts ...grpc.CallOption) (*SearchWorksheetsResponse, error)
	// Update a worksheet.
	// The users can access this method if,
	// - they are the creator of the worksheet;
	// - they have bb.worksheets.manage permission on the workspace;
	// - the sheet is shared with them with PROJECT_WRITE visibility, and they have bb.projects.get permission on the project.
	UpdateWorksheet(ctx context.Context, in *UpdateWorksheetRequest, opts ...grpc.CallOption) (*Worksheet, error)
	// Update the organizer of a worksheet.
	// The access is the same as UpdateWorksheet method.
	UpdateWorksheetOrganizer(ctx context.Context, in *UpdateWorksheetOrganizerRequest, opts ...grpc.CallOption) (*WorksheetOrganizer, error)
	// Delete a worksheet.
	// The access is the same as UpdateWorksheet method.
	DeleteWorksheet(ctx context.Context, in *DeleteWorksheetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type worksheetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWorksheetServiceClient(cc grpc.ClientConnInterface) WorksheetServiceClient {
	return &worksheetServiceClient{cc}
}

func (c *worksheetServiceClient) CreateWorksheet(ctx context.Context, in *CreateWorksheetRequest, opts ...grpc.CallOption) (*Worksheet, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Worksheet)
	err := c.cc.Invoke(ctx, WorksheetService_CreateWorksheet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worksheetServiceClient) GetWorksheet(ctx context.Context, in *GetWorksheetRequest, opts ...grpc.CallOption) (*Worksheet, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Worksheet)
	err := c.cc.Invoke(ctx, WorksheetService_GetWorksheet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worksheetServiceClient) SearchWorksheets(ctx context.Context, in *SearchWorksheetsRequest, opts ...grpc.CallOption) (*SearchWorksheetsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchWorksheetsResponse)
	err := c.cc.Invoke(ctx, WorksheetService_SearchWorksheets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worksheetServiceClient) UpdateWorksheet(ctx context.Context, in *UpdateWorksheetRequest, opts ...grpc.CallOption) (*Worksheet, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Worksheet)
	err := c.cc.Invoke(ctx, WorksheetService_UpdateWorksheet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worksheetServiceClient) UpdateWorksheetOrganizer(ctx context.Context, in *UpdateWorksheetOrganizerRequest, opts ...grpc.CallOption) (*WorksheetOrganizer, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WorksheetOrganizer)
	err := c.cc.Invoke(ctx, WorksheetService_UpdateWorksheetOrganizer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *worksheetServiceClient) DeleteWorksheet(ctx context.Context, in *DeleteWorksheetRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, WorksheetService_DeleteWorksheet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorksheetServiceServer is the server API for WorksheetService service.
// All implementations must embed UnimplementedWorksheetServiceServer
// for forward compatibility
type WorksheetServiceServer interface {
	// Create a personal worksheet used in SQL Editor.
	CreateWorksheet(context.Context, *CreateWorksheetRequest) (*Worksheet, error)
	// Get a worksheet by name.
	// The users can access this method if,
	// - they are the creator of the worksheet;
	// - they have bb.worksheets.get permission on the workspace;
	// - the sheet is shared with them with PROJECT_READ and PROJECT_WRITE visibility, and they have bb.projects.get permission on the project.
	GetWorksheet(context.Context, *GetWorksheetRequest) (*Worksheet, error)
	// Search for worksheets.
	// This is used for finding my worksheets or worksheets shared by other people.
	// The sheet accessibility is the same as GetWorksheet().
	SearchWorksheets(context.Context, *SearchWorksheetsRequest) (*SearchWorksheetsResponse, error)
	// Update a worksheet.
	// The users can access this method if,
	// - they are the creator of the worksheet;
	// - they have bb.worksheets.manage permission on the workspace;
	// - the sheet is shared with them with PROJECT_WRITE visibility, and they have bb.projects.get permission on the project.
	UpdateWorksheet(context.Context, *UpdateWorksheetRequest) (*Worksheet, error)
	// Update the organizer of a worksheet.
	// The access is the same as UpdateWorksheet method.
	UpdateWorksheetOrganizer(context.Context, *UpdateWorksheetOrganizerRequest) (*WorksheetOrganizer, error)
	// Delete a worksheet.
	// The access is the same as UpdateWorksheet method.
	DeleteWorksheet(context.Context, *DeleteWorksheetRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedWorksheetServiceServer()
}

// UnimplementedWorksheetServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWorksheetServiceServer struct {
}

func (UnimplementedWorksheetServiceServer) CreateWorksheet(context.Context, *CreateWorksheetRequest) (*Worksheet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorksheet not implemented")
}
func (UnimplementedWorksheetServiceServer) GetWorksheet(context.Context, *GetWorksheetRequest) (*Worksheet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorksheet not implemented")
}
func (UnimplementedWorksheetServiceServer) SearchWorksheets(context.Context, *SearchWorksheetsRequest) (*SearchWorksheetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchWorksheets not implemented")
}
func (UnimplementedWorksheetServiceServer) UpdateWorksheet(context.Context, *UpdateWorksheetRequest) (*Worksheet, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorksheet not implemented")
}
func (UnimplementedWorksheetServiceServer) UpdateWorksheetOrganizer(context.Context, *UpdateWorksheetOrganizerRequest) (*WorksheetOrganizer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorksheetOrganizer not implemented")
}
func (UnimplementedWorksheetServiceServer) DeleteWorksheet(context.Context, *DeleteWorksheetRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorksheet not implemented")
}
func (UnimplementedWorksheetServiceServer) mustEmbedUnimplementedWorksheetServiceServer() {}

// UnsafeWorksheetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WorksheetServiceServer will
// result in compilation errors.
type UnsafeWorksheetServiceServer interface {
	mustEmbedUnimplementedWorksheetServiceServer()
}

func RegisterWorksheetServiceServer(s grpc.ServiceRegistrar, srv WorksheetServiceServer) {
	s.RegisterService(&WorksheetService_ServiceDesc, srv)
}

func _WorksheetService_CreateWorksheet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWorksheetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorksheetServiceServer).CreateWorksheet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorksheetService_CreateWorksheet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorksheetServiceServer).CreateWorksheet(ctx, req.(*CreateWorksheetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorksheetService_GetWorksheet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorksheetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorksheetServiceServer).GetWorksheet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorksheetService_GetWorksheet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorksheetServiceServer).GetWorksheet(ctx, req.(*GetWorksheetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorksheetService_SearchWorksheets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchWorksheetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorksheetServiceServer).SearchWorksheets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorksheetService_SearchWorksheets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorksheetServiceServer).SearchWorksheets(ctx, req.(*SearchWorksheetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorksheetService_UpdateWorksheet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorksheetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorksheetServiceServer).UpdateWorksheet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorksheetService_UpdateWorksheet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorksheetServiceServer).UpdateWorksheet(ctx, req.(*UpdateWorksheetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorksheetService_UpdateWorksheetOrganizer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorksheetOrganizerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorksheetServiceServer).UpdateWorksheetOrganizer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorksheetService_UpdateWorksheetOrganizer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorksheetServiceServer).UpdateWorksheetOrganizer(ctx, req.(*UpdateWorksheetOrganizerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorksheetService_DeleteWorksheet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWorksheetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorksheetServiceServer).DeleteWorksheet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WorksheetService_DeleteWorksheet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorksheetServiceServer).DeleteWorksheet(ctx, req.(*DeleteWorksheetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WorksheetService_ServiceDesc is the grpc.ServiceDesc for WorksheetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WorksheetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bytebase.v1.WorksheetService",
	HandlerType: (*WorksheetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWorksheet",
			Handler:    _WorksheetService_CreateWorksheet_Handler,
		},
		{
			MethodName: "GetWorksheet",
			Handler:    _WorksheetService_GetWorksheet_Handler,
		},
		{
			MethodName: "SearchWorksheets",
			Handler:    _WorksheetService_SearchWorksheets_Handler,
		},
		{
			MethodName: "UpdateWorksheet",
			Handler:    _WorksheetService_UpdateWorksheet_Handler,
		},
		{
			MethodName: "UpdateWorksheetOrganizer",
			Handler:    _WorksheetService_UpdateWorksheetOrganizer_Handler,
		},
		{
			MethodName: "DeleteWorksheet",
			Handler:    _WorksheetService_DeleteWorksheet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/worksheet_service.proto",
}
