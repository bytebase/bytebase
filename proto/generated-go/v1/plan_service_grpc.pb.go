// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: v1/plan_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PlanService_GetPlan_FullMethodName                  = "/bytebase.v1.PlanService/GetPlan"
	PlanService_ListPlans_FullMethodName                = "/bytebase.v1.PlanService/ListPlans"
	PlanService_SearchPlans_FullMethodName              = "/bytebase.v1.PlanService/SearchPlans"
	PlanService_CreatePlan_FullMethodName               = "/bytebase.v1.PlanService/CreatePlan"
	PlanService_UpdatePlan_FullMethodName               = "/bytebase.v1.PlanService/UpdatePlan"
	PlanService_ListPlanCheckRuns_FullMethodName        = "/bytebase.v1.PlanService/ListPlanCheckRuns"
	PlanService_RunPlanChecks_FullMethodName            = "/bytebase.v1.PlanService/RunPlanChecks"
	PlanService_BatchCancelPlanCheckRuns_FullMethodName = "/bytebase.v1.PlanService/BatchCancelPlanCheckRuns"
	PlanService_PreviewPlan_FullMethodName              = "/bytebase.v1.PlanService/PreviewPlan"
)

// PlanServiceClient is the client API for PlanService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlanServiceClient interface {
	GetPlan(ctx context.Context, in *GetPlanRequest, opts ...grpc.CallOption) (*Plan, error)
	ListPlans(ctx context.Context, in *ListPlansRequest, opts ...grpc.CallOption) (*ListPlansResponse, error)
	// Search for plans that the caller has the bb.plans.get permission on and also satisfy the specified filter & query.
	SearchPlans(ctx context.Context, in *SearchPlansRequest, opts ...grpc.CallOption) (*SearchPlansResponse, error)
	CreatePlan(ctx context.Context, in *CreatePlanRequest, opts ...grpc.CallOption) (*Plan, error)
	// UpdatePlan updates the plan.
	// The plan creator and the user with bb.plans.update permission on the project can update the plan.
	UpdatePlan(ctx context.Context, in *UpdatePlanRequest, opts ...grpc.CallOption) (*Plan, error)
	ListPlanCheckRuns(ctx context.Context, in *ListPlanCheckRunsRequest, opts ...grpc.CallOption) (*ListPlanCheckRunsResponse, error)
	RunPlanChecks(ctx context.Context, in *RunPlanChecksRequest, opts ...grpc.CallOption) (*RunPlanChecksResponse, error)
	BatchCancelPlanCheckRuns(ctx context.Context, in *BatchCancelPlanCheckRunsRequest, opts ...grpc.CallOption) (*BatchCancelPlanCheckRunsResponse, error)
	PreviewPlan(ctx context.Context, in *PreviewPlanRequest, opts ...grpc.CallOption) (*PreviewPlanResponse, error)
}

type planServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlanServiceClient(cc grpc.ClientConnInterface) PlanServiceClient {
	return &planServiceClient{cc}
}

func (c *planServiceClient) GetPlan(ctx context.Context, in *GetPlanRequest, opts ...grpc.CallOption) (*Plan, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Plan)
	err := c.cc.Invoke(ctx, PlanService_GetPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planServiceClient) ListPlans(ctx context.Context, in *ListPlansRequest, opts ...grpc.CallOption) (*ListPlansResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPlansResponse)
	err := c.cc.Invoke(ctx, PlanService_ListPlans_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planServiceClient) SearchPlans(ctx context.Context, in *SearchPlansRequest, opts ...grpc.CallOption) (*SearchPlansResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchPlansResponse)
	err := c.cc.Invoke(ctx, PlanService_SearchPlans_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planServiceClient) CreatePlan(ctx context.Context, in *CreatePlanRequest, opts ...grpc.CallOption) (*Plan, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Plan)
	err := c.cc.Invoke(ctx, PlanService_CreatePlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planServiceClient) UpdatePlan(ctx context.Context, in *UpdatePlanRequest, opts ...grpc.CallOption) (*Plan, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Plan)
	err := c.cc.Invoke(ctx, PlanService_UpdatePlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planServiceClient) ListPlanCheckRuns(ctx context.Context, in *ListPlanCheckRunsRequest, opts ...grpc.CallOption) (*ListPlanCheckRunsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPlanCheckRunsResponse)
	err := c.cc.Invoke(ctx, PlanService_ListPlanCheckRuns_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planServiceClient) RunPlanChecks(ctx context.Context, in *RunPlanChecksRequest, opts ...grpc.CallOption) (*RunPlanChecksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RunPlanChecksResponse)
	err := c.cc.Invoke(ctx, PlanService_RunPlanChecks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planServiceClient) BatchCancelPlanCheckRuns(ctx context.Context, in *BatchCancelPlanCheckRunsRequest, opts ...grpc.CallOption) (*BatchCancelPlanCheckRunsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchCancelPlanCheckRunsResponse)
	err := c.cc.Invoke(ctx, PlanService_BatchCancelPlanCheckRuns_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *planServiceClient) PreviewPlan(ctx context.Context, in *PreviewPlanRequest, opts ...grpc.CallOption) (*PreviewPlanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PreviewPlanResponse)
	err := c.cc.Invoke(ctx, PlanService_PreviewPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlanServiceServer is the server API for PlanService service.
// All implementations must embed UnimplementedPlanServiceServer
// for forward compatibility.
type PlanServiceServer interface {
	GetPlan(context.Context, *GetPlanRequest) (*Plan, error)
	ListPlans(context.Context, *ListPlansRequest) (*ListPlansResponse, error)
	// Search for plans that the caller has the bb.plans.get permission on and also satisfy the specified filter & query.
	SearchPlans(context.Context, *SearchPlansRequest) (*SearchPlansResponse, error)
	CreatePlan(context.Context, *CreatePlanRequest) (*Plan, error)
	// UpdatePlan updates the plan.
	// The plan creator and the user with bb.plans.update permission on the project can update the plan.
	UpdatePlan(context.Context, *UpdatePlanRequest) (*Plan, error)
	ListPlanCheckRuns(context.Context, *ListPlanCheckRunsRequest) (*ListPlanCheckRunsResponse, error)
	RunPlanChecks(context.Context, *RunPlanChecksRequest) (*RunPlanChecksResponse, error)
	BatchCancelPlanCheckRuns(context.Context, *BatchCancelPlanCheckRunsRequest) (*BatchCancelPlanCheckRunsResponse, error)
	PreviewPlan(context.Context, *PreviewPlanRequest) (*PreviewPlanResponse, error)
	mustEmbedUnimplementedPlanServiceServer()
}

// UnimplementedPlanServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPlanServiceServer struct{}

func (UnimplementedPlanServiceServer) GetPlan(context.Context, *GetPlanRequest) (*Plan, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlan not implemented")
}
func (UnimplementedPlanServiceServer) ListPlans(context.Context, *ListPlansRequest) (*ListPlansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPlans not implemented")
}
func (UnimplementedPlanServiceServer) SearchPlans(context.Context, *SearchPlansRequest) (*SearchPlansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchPlans not implemented")
}
func (UnimplementedPlanServiceServer) CreatePlan(context.Context, *CreatePlanRequest) (*Plan, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePlan not implemented")
}
func (UnimplementedPlanServiceServer) UpdatePlan(context.Context, *UpdatePlanRequest) (*Plan, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePlan not implemented")
}
func (UnimplementedPlanServiceServer) ListPlanCheckRuns(context.Context, *ListPlanCheckRunsRequest) (*ListPlanCheckRunsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPlanCheckRuns not implemented")
}
func (UnimplementedPlanServiceServer) RunPlanChecks(context.Context, *RunPlanChecksRequest) (*RunPlanChecksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunPlanChecks not implemented")
}
func (UnimplementedPlanServiceServer) BatchCancelPlanCheckRuns(context.Context, *BatchCancelPlanCheckRunsRequest) (*BatchCancelPlanCheckRunsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchCancelPlanCheckRuns not implemented")
}
func (UnimplementedPlanServiceServer) PreviewPlan(context.Context, *PreviewPlanRequest) (*PreviewPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreviewPlan not implemented")
}
func (UnimplementedPlanServiceServer) mustEmbedUnimplementedPlanServiceServer() {}
func (UnimplementedPlanServiceServer) testEmbeddedByValue()                     {}

// UnsafePlanServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlanServiceServer will
// result in compilation errors.
type UnsafePlanServiceServer interface {
	mustEmbedUnimplementedPlanServiceServer()
}

func RegisterPlanServiceServer(s grpc.ServiceRegistrar, srv PlanServiceServer) {
	// If the following call pancis, it indicates UnimplementedPlanServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PlanService_ServiceDesc, srv)
}

func _PlanService_GetPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanServiceServer).GetPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlanService_GetPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanServiceServer).GetPlan(ctx, req.(*GetPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlanService_ListPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPlansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanServiceServer).ListPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlanService_ListPlans_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanServiceServer).ListPlans(ctx, req.(*ListPlansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlanService_SearchPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchPlansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanServiceServer).SearchPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlanService_SearchPlans_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanServiceServer).SearchPlans(ctx, req.(*SearchPlansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlanService_CreatePlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanServiceServer).CreatePlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlanService_CreatePlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanServiceServer).CreatePlan(ctx, req.(*CreatePlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlanService_UpdatePlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanServiceServer).UpdatePlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlanService_UpdatePlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanServiceServer).UpdatePlan(ctx, req.(*UpdatePlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlanService_ListPlanCheckRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPlanCheckRunsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanServiceServer).ListPlanCheckRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlanService_ListPlanCheckRuns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanServiceServer).ListPlanCheckRuns(ctx, req.(*ListPlanCheckRunsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlanService_RunPlanChecks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunPlanChecksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanServiceServer).RunPlanChecks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlanService_RunPlanChecks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanServiceServer).RunPlanChecks(ctx, req.(*RunPlanChecksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlanService_BatchCancelPlanCheckRuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchCancelPlanCheckRunsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanServiceServer).BatchCancelPlanCheckRuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlanService_BatchCancelPlanCheckRuns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanServiceServer).BatchCancelPlanCheckRuns(ctx, req.(*BatchCancelPlanCheckRunsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlanService_PreviewPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreviewPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlanServiceServer).PreviewPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlanService_PreviewPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlanServiceServer).PreviewPlan(ctx, req.(*PreviewPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PlanService_ServiceDesc is the grpc.ServiceDesc for PlanService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlanService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bytebase.v1.PlanService",
	HandlerType: (*PlanServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPlan",
			Handler:    _PlanService_GetPlan_Handler,
		},
		{
			MethodName: "ListPlans",
			Handler:    _PlanService_ListPlans_Handler,
		},
		{
			MethodName: "SearchPlans",
			Handler:    _PlanService_SearchPlans_Handler,
		},
		{
			MethodName: "CreatePlan",
			Handler:    _PlanService_CreatePlan_Handler,
		},
		{
			MethodName: "UpdatePlan",
			Handler:    _PlanService_UpdatePlan_Handler,
		},
		{
			MethodName: "ListPlanCheckRuns",
			Handler:    _PlanService_ListPlanCheckRuns_Handler,
		},
		{
			MethodName: "RunPlanChecks",
			Handler:    _PlanService_RunPlanChecks_Handler,
		},
		{
			MethodName: "BatchCancelPlanCheckRuns",
			Handler:    _PlanService_BatchCancelPlanCheckRuns_Handler,
		},
		{
			MethodName: "PreviewPlan",
			Handler:    _PlanService_PreviewPlan_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/plan_service.proto",
}
