// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        (unknown)
// source: v1/vcs_provider_service.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateVCSProviderRequest struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	VcsProvider *VCSProvider           `protobuf:"bytes,1,opt,name=vcs_provider,json=vcsProvider,proto3" json:"vcs_provider,omitempty"`
	// The ID to use for the VCS provider, which will become the final component of
	// the VCS provider's name.
	//
	// This value should be 4-63 characters, and valid characters
	// are /[a-z][0-9]-/.
	VcsProviderId string `protobuf:"bytes,2,opt,name=vcs_provider_id,json=vcsProviderId,proto3" json:"vcs_provider_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateVCSProviderRequest) Reset() {
	*x = CreateVCSProviderRequest{}
	mi := &file_v1_vcs_provider_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateVCSProviderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateVCSProviderRequest) ProtoMessage() {}

func (x *CreateVCSProviderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_vcs_provider_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateVCSProviderRequest.ProtoReflect.Descriptor instead.
func (*CreateVCSProviderRequest) Descriptor() ([]byte, []int) {
	return file_v1_vcs_provider_service_proto_rawDescGZIP(), []int{0}
}

func (x *CreateVCSProviderRequest) GetVcsProvider() *VCSProvider {
	if x != nil {
		return x.VcsProvider
	}
	return nil
}

func (x *CreateVCSProviderRequest) GetVcsProviderId() string {
	if x != nil {
		return x.VcsProviderId
	}
	return ""
}

type GetVCSProviderRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the vcs provider to retrieve.
	// Format: vcsProviders/{vcsProvider}
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetVCSProviderRequest) Reset() {
	*x = GetVCSProviderRequest{}
	mi := &file_v1_vcs_provider_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetVCSProviderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetVCSProviderRequest) ProtoMessage() {}

func (x *GetVCSProviderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_vcs_provider_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetVCSProviderRequest.ProtoReflect.Descriptor instead.
func (*GetVCSProviderRequest) Descriptor() ([]byte, []int) {
	return file_v1_vcs_provider_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetVCSProviderRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListVCSProvidersRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Not used.
	// The maximum number of vcs provider to return. The service may return fewer than this value.
	// If unspecified, at most 10 vcs provider will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Not used.
	// A page token, received from a previous `ListVCSProviders` call.
	// Provide this to retrieve the subsequent page.
	PageToken     string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListVCSProvidersRequest) Reset() {
	*x = ListVCSProvidersRequest{}
	mi := &file_v1_vcs_provider_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListVCSProvidersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVCSProvidersRequest) ProtoMessage() {}

func (x *ListVCSProvidersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_vcs_provider_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVCSProvidersRequest.ProtoReflect.Descriptor instead.
func (*ListVCSProvidersRequest) Descriptor() ([]byte, []int) {
	return file_v1_vcs_provider_service_proto_rawDescGZIP(), []int{2}
}

func (x *ListVCSProvidersRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListVCSProvidersRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListVCSProvidersResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The list of vcs providers.
	VcsProviders []*VCSProvider `protobuf:"bytes,1,rep,name=vcs_providers,json=vcsProviders,proto3" json:"vcs_providers,omitempty"`
	// Not used. A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListVCSProvidersResponse) Reset() {
	*x = ListVCSProvidersResponse{}
	mi := &file_v1_vcs_provider_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListVCSProvidersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVCSProvidersResponse) ProtoMessage() {}

func (x *ListVCSProvidersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_vcs_provider_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVCSProvidersResponse.ProtoReflect.Descriptor instead.
func (*ListVCSProvidersResponse) Descriptor() ([]byte, []int) {
	return file_v1_vcs_provider_service_proto_rawDescGZIP(), []int{3}
}

func (x *ListVCSProvidersResponse) GetVcsProviders() []*VCSProvider {
	if x != nil {
		return x.VcsProviders
	}
	return nil
}

func (x *ListVCSProvidersResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type UpdateVCSProviderRequest struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	VcsProvider *VCSProvider           `protobuf:"bytes,1,opt,name=vcs_provider,json=vcsProvider,proto3" json:"vcs_provider,omitempty"`
	// The list of fields to be updated.
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateVCSProviderRequest) Reset() {
	*x = UpdateVCSProviderRequest{}
	mi := &file_v1_vcs_provider_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateVCSProviderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateVCSProviderRequest) ProtoMessage() {}

func (x *UpdateVCSProviderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_vcs_provider_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateVCSProviderRequest.ProtoReflect.Descriptor instead.
func (*UpdateVCSProviderRequest) Descriptor() ([]byte, []int) {
	return file_v1_vcs_provider_service_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateVCSProviderRequest) GetVcsProvider() *VCSProvider {
	if x != nil {
		return x.VcsProvider
	}
	return nil
}

func (x *UpdateVCSProviderRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type DeleteVCSProviderRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the vcs provider to delete.
	// Format: vcsProviders/{vcsProvider}
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteVCSProviderRequest) Reset() {
	*x = DeleteVCSProviderRequest{}
	mi := &file_v1_vcs_provider_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteVCSProviderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteVCSProviderRequest) ProtoMessage() {}

func (x *DeleteVCSProviderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_vcs_provider_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteVCSProviderRequest.ProtoReflect.Descriptor instead.
func (*DeleteVCSProviderRequest) Descriptor() ([]byte, []int) {
	return file_v1_vcs_provider_service_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteVCSProviderRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type SearchVCSProviderRepositoriesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the vcs provider to retrieve the vcs provider repositories.
	// Format: vcsProviders/{vcsProvider}
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchVCSProviderRepositoriesRequest) Reset() {
	*x = SearchVCSProviderRepositoriesRequest{}
	mi := &file_v1_vcs_provider_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchVCSProviderRepositoriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchVCSProviderRepositoriesRequest) ProtoMessage() {}

func (x *SearchVCSProviderRepositoriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_vcs_provider_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchVCSProviderRepositoriesRequest.ProtoReflect.Descriptor instead.
func (*SearchVCSProviderRepositoriesRequest) Descriptor() ([]byte, []int) {
	return file_v1_vcs_provider_service_proto_rawDescGZIP(), []int{6}
}

func (x *SearchVCSProviderRepositoriesRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type VCSRepository struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The id of the repository in vcs provider.
	// e.g. In GitLab, this is the corresponding project id. e.g. 123
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The title of the repository in vcs provider.
	// e.g. sample-project
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// The full_path of the repository in vcs provider.
	// e.g. bytebase/sample-project
	FullPath string `protobuf:"bytes,3,opt,name=full_path,json=fullPath,proto3" json:"full_path,omitempty"`
	// Web url of the repository in vcs provider.
	// e.g. http://gitlab.bytebase.com/bytebase/sample-project
	WebUrl        string `protobuf:"bytes,4,opt,name=web_url,json=webUrl,proto3" json:"web_url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VCSRepository) Reset() {
	*x = VCSRepository{}
	mi := &file_v1_vcs_provider_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VCSRepository) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VCSRepository) ProtoMessage() {}

func (x *VCSRepository) ProtoReflect() protoreflect.Message {
	mi := &file_v1_vcs_provider_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VCSRepository.ProtoReflect.Descriptor instead.
func (*VCSRepository) Descriptor() ([]byte, []int) {
	return file_v1_vcs_provider_service_proto_rawDescGZIP(), []int{7}
}

func (x *VCSRepository) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *VCSRepository) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *VCSRepository) GetFullPath() string {
	if x != nil {
		return x.FullPath
	}
	return ""
}

func (x *VCSRepository) GetWebUrl() string {
	if x != nil {
		return x.WebUrl
	}
	return ""
}

type SearchVCSProviderRepositoriesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The list of repositories in vcs provider.
	Repositories  []*VCSRepository `protobuf:"bytes,1,rep,name=repositories,proto3" json:"repositories,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchVCSProviderRepositoriesResponse) Reset() {
	*x = SearchVCSProviderRepositoriesResponse{}
	mi := &file_v1_vcs_provider_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchVCSProviderRepositoriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchVCSProviderRepositoriesResponse) ProtoMessage() {}

func (x *SearchVCSProviderRepositoriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_vcs_provider_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchVCSProviderRepositoriesResponse.ProtoReflect.Descriptor instead.
func (*SearchVCSProviderRepositoriesResponse) Descriptor() ([]byte, []int) {
	return file_v1_vcs_provider_service_proto_rawDescGZIP(), []int{8}
}

func (x *SearchVCSProviderRepositoriesResponse) GetRepositories() []*VCSRepository {
	if x != nil {
		return x.Repositories
	}
	return nil
}

type ListVCSConnectorsInProviderRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the vcs provider to retrieve the linked projects.
	// Format: vcsProviders/{vcsProvider}
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListVCSConnectorsInProviderRequest) Reset() {
	*x = ListVCSConnectorsInProviderRequest{}
	mi := &file_v1_vcs_provider_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListVCSConnectorsInProviderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVCSConnectorsInProviderRequest) ProtoMessage() {}

func (x *ListVCSConnectorsInProviderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_vcs_provider_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVCSConnectorsInProviderRequest.ProtoReflect.Descriptor instead.
func (*ListVCSConnectorsInProviderRequest) Descriptor() ([]byte, []int) {
	return file_v1_vcs_provider_service_proto_rawDescGZIP(), []int{9}
}

func (x *ListVCSConnectorsInProviderRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListVCSConnectorsInProviderResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The vcsConnectors from the specified request.
	VcsConnectors []*VCSConnector `protobuf:"bytes,1,rep,name=vcs_connectors,json=vcsConnectors,proto3" json:"vcs_connectors,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListVCSConnectorsInProviderResponse) Reset() {
	*x = ListVCSConnectorsInProviderResponse{}
	mi := &file_v1_vcs_provider_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListVCSConnectorsInProviderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListVCSConnectorsInProviderResponse) ProtoMessage() {}

func (x *ListVCSConnectorsInProviderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_vcs_provider_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListVCSConnectorsInProviderResponse.ProtoReflect.Descriptor instead.
func (*ListVCSConnectorsInProviderResponse) Descriptor() ([]byte, []int) {
	return file_v1_vcs_provider_service_proto_rawDescGZIP(), []int{10}
}

func (x *ListVCSConnectorsInProviderResponse) GetVcsConnectors() []*VCSConnector {
	if x != nil {
		return x.VcsConnectors
	}
	return nil
}

type VCSProvider struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the vcs provider.
	// Format: vcsProviders/{vcsProvider}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The title of the vcs provider. It is used to display in the UI. Specified by the client.
	Title string  `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Type  VCSType `protobuf:"varint,3,opt,name=type,proto3,enum=bytebase.v1.VCSType" json:"type,omitempty"`
	// The url of the vcs provider. Specified by the client.
	// For example: github.com, gitlab.com, gitlab.bytebase.com.
	Url string `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	// The access token of the vcs provider.
	AccessToken   string `protobuf:"bytes,5,opt,name=access_token,json=accessToken,proto3" json:"access_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VCSProvider) Reset() {
	*x = VCSProvider{}
	mi := &file_v1_vcs_provider_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VCSProvider) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VCSProvider) ProtoMessage() {}

func (x *VCSProvider) ProtoReflect() protoreflect.Message {
	mi := &file_v1_vcs_provider_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VCSProvider.ProtoReflect.Descriptor instead.
func (*VCSProvider) Descriptor() ([]byte, []int) {
	return file_v1_vcs_provider_service_proto_rawDescGZIP(), []int{11}
}

func (x *VCSProvider) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VCSProvider) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *VCSProvider) GetType() VCSType {
	if x != nil {
		return x.Type
	}
	return VCSType_VCS_TYPE_UNSPECIFIED
}

func (x *VCSProvider) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *VCSProvider) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

var File_v1_vcs_provider_service_proto protoreflect.FileDescriptor

var file_v1_vcs_provider_service_proto_rawDesc = string([]byte{
	0x0a, 0x1d, 0x76, 0x31, 0x2f, 0x76, 0x63, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0b, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13,
	0x76, 0x31, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x76, 0x31, 0x2f, 0x76, 0x63, 0x73, 0x5f, 0x63, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x85, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56,
	0x43, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x41, 0x0a, 0x0c, 0x76, 0x63, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x43, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x0b, 0x76, 0x63, 0x73, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x76, 0x63, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x76,
	0x63, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x4e, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x56, 0x43, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x21, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x41, 0x1a, 0x0a, 0x18, 0x62, 0x79,
	0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x56, 0x43, 0x53, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x55, 0x0a, 0x17,
	0x4c, 0x69, 0x73, 0x74, 0x56, 0x43, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x81, 0x01, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x43, 0x53, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3d, 0x0a, 0x0d, 0x76, 0x63, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x43, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x52, 0x0c, 0x76, 0x63, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x12,
	0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xa0, 0x01, 0x0a, 0x18, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x56, 0x43, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0c, 0x76, 0x63, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x79, 0x74,
	0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x43, 0x53, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x0b, 0x76, 0x63, 0x73, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x22, 0x51, 0x0a, 0x18, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x56, 0x43, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x41, 0x1a, 0x0a, 0x18, 0x62,
	0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x56, 0x43, 0x53, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x5d, 0x0a,
	0x24, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x56, 0x43, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x21, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x41, 0x1a, 0x0a, 0x18, 0x62, 0x79,
	0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x56, 0x43, 0x53, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x6b, 0x0a, 0x0d,
	0x56, 0x43, 0x53, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x17, 0x0a, 0x07, 0x77, 0x65, 0x62, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x77, 0x65, 0x62, 0x55, 0x72, 0x6c, 0x22, 0x67, 0x0a, 0x25, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x56, 0x43, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x43, 0x53, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x6f, 0x72, 0x79, 0x52, 0x0c, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x22, 0x5b, 0x0a, 0x22, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x43, 0x53, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x41, 0x1a, 0x0a,
	0x18, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x56, 0x43,
	0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x67, 0x0a, 0x23, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x43, 0x53, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x76, 0x63, 0x73, 0x5f, 0x63, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x43, 0x53,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0d, 0x76, 0x63, 0x73, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x22, 0xef, 0x01, 0x0a, 0x0b, 0x56, 0x43, 0x53,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2e,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x62,
	0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x43, 0x53, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01,
	0x02, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x27, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41,
	0x01, 0x04, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x3a,
	0x39, 0xea, 0x41, 0x36, 0x0a, 0x18, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x56, 0x43, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x1a,
	0x76, 0x63, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x7b, 0x76, 0x63,
	0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x7d, 0x32, 0x95, 0x0a, 0x0a, 0x12, 0x56,
	0x43, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x93, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x56, 0x43, 0x53, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x12, 0x22, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x43, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x43, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x22, 0x43, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x8a, 0xea, 0x30, 0x13, 0x62,
	0x62, 0x2e, 0x76, 0x63, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x67,
	0x65, 0x74, 0x90, 0xea, 0x30, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x76, 0x63, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0x98, 0x01, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74,
	0x56, 0x43, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x12, 0x24, 0x2e, 0x62,
	0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56,
	0x43, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x25, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x43, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x37, 0xda, 0x41, 0x00, 0x8a, 0xea,
	0x30, 0x14, 0x62, 0x62, 0x2e, 0x76, 0x63, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x73, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x90, 0xea, 0x30, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12,
	0x12, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x63, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x12, 0xa1, 0x01, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x43, 0x53,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x25, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x43, 0x53,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x18, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x43,
	0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0x4b, 0xda, 0x41, 0x00, 0x8a, 0xea,
	0x30, 0x16, 0x62, 0x62, 0x2e, 0x76, 0x63, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x73, 0x2e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x90, 0xea, 0x30, 0x01, 0x98, 0xea, 0x30, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x0c, 0x76, 0x63, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x22, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x76, 0x63, 0x73, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x12, 0xcf, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x56, 0x43, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x25, 0x2e, 0x62,
	0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x56, 0x43, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x56, 0x43, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0x79, 0xda,
	0x41, 0x18, 0x76, 0x63, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x2c, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x8a, 0xea, 0x30, 0x16, 0x62, 0x62,
	0x2e, 0x76, 0x63, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2e, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x90, 0xea, 0x30, 0x01, 0x98, 0xea, 0x30, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x36, 0x3a, 0x0c, 0x76, 0x63, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x32, 0x26, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x76, 0x63, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x2e, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x76, 0x63, 0x73, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0x97, 0x01, 0x0a, 0x11, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x56, 0x43, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x25,
	0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x56, 0x43, 0x53, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x43, 0x8a,
	0xea, 0x30, 0x16, 0x62, 0x62, 0x2e, 0x76, 0x63, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x2e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x90, 0xea, 0x30, 0x01, 0x98, 0xea, 0x30,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x2a, 0x19, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x3d, 0x76, 0x63, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73, 0x2f,
	0x2a, 0x7d, 0x12, 0xe5, 0x01, 0x0a, 0x1d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x56, 0x43, 0x53,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x31, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x56, 0x43, 0x53, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x56, 0x43, 0x53, 0x50,
	0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5d, 0x8a, 0xea, 0x30,
	0x1e, 0x62, 0x62, 0x2e, 0x76, 0x63, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x73,
	0x2e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x90,
	0xea, 0x30, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x31, 0x3a, 0x01, 0x2a, 0x22, 0x2c, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x76, 0x63, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x73, 0x2f, 0x2a, 0x7d, 0x3a, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0xd5, 0x01, 0x0a, 0x1b, 0x4c,
	0x69, 0x73, 0x74, 0x56, 0x43, 0x53, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73,
	0x49, 0x6e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12, 0x2f, 0x2e, 0x62, 0x79, 0x74,
	0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x43, 0x53,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x76,
	0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x62, 0x79,
	0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x43,
	0x53, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x49, 0x6e, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x53, 0x8a,
	0xea, 0x30, 0x1c, 0x62, 0x62, 0x2e, 0x76, 0x63, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x73, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x90,
	0xea, 0x30, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x29, 0x12, 0x27, 0x2f, 0x76, 0x31, 0x2f, 0x7b,
	0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x76, 0x63, 0x73, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72,
	0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x76, 0x63, 0x73, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x73, 0x42, 0x11, 0x5a, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2d,
	0x67, 0x6f, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_v1_vcs_provider_service_proto_rawDescOnce sync.Once
	file_v1_vcs_provider_service_proto_rawDescData []byte
)

func file_v1_vcs_provider_service_proto_rawDescGZIP() []byte {
	file_v1_vcs_provider_service_proto_rawDescOnce.Do(func() {
		file_v1_vcs_provider_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_v1_vcs_provider_service_proto_rawDesc), len(file_v1_vcs_provider_service_proto_rawDesc)))
	})
	return file_v1_vcs_provider_service_proto_rawDescData
}

var file_v1_vcs_provider_service_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_v1_vcs_provider_service_proto_goTypes = []any{
	(*CreateVCSProviderRequest)(nil),              // 0: bytebase.v1.CreateVCSProviderRequest
	(*GetVCSProviderRequest)(nil),                 // 1: bytebase.v1.GetVCSProviderRequest
	(*ListVCSProvidersRequest)(nil),               // 2: bytebase.v1.ListVCSProvidersRequest
	(*ListVCSProvidersResponse)(nil),              // 3: bytebase.v1.ListVCSProvidersResponse
	(*UpdateVCSProviderRequest)(nil),              // 4: bytebase.v1.UpdateVCSProviderRequest
	(*DeleteVCSProviderRequest)(nil),              // 5: bytebase.v1.DeleteVCSProviderRequest
	(*SearchVCSProviderRepositoriesRequest)(nil),  // 6: bytebase.v1.SearchVCSProviderRepositoriesRequest
	(*VCSRepository)(nil),                         // 7: bytebase.v1.VCSRepository
	(*SearchVCSProviderRepositoriesResponse)(nil), // 8: bytebase.v1.SearchVCSProviderRepositoriesResponse
	(*ListVCSConnectorsInProviderRequest)(nil),    // 9: bytebase.v1.ListVCSConnectorsInProviderRequest
	(*ListVCSConnectorsInProviderResponse)(nil),   // 10: bytebase.v1.ListVCSConnectorsInProviderResponse
	(*VCSProvider)(nil),                           // 11: bytebase.v1.VCSProvider
	(*fieldmaskpb.FieldMask)(nil),                 // 12: google.protobuf.FieldMask
	(*VCSConnector)(nil),                          // 13: bytebase.v1.VCSConnector
	(VCSType)(0),                                  // 14: bytebase.v1.VCSType
	(*emptypb.Empty)(nil),                         // 15: google.protobuf.Empty
}
var file_v1_vcs_provider_service_proto_depIdxs = []int32{
	11, // 0: bytebase.v1.CreateVCSProviderRequest.vcs_provider:type_name -> bytebase.v1.VCSProvider
	11, // 1: bytebase.v1.ListVCSProvidersResponse.vcs_providers:type_name -> bytebase.v1.VCSProvider
	11, // 2: bytebase.v1.UpdateVCSProviderRequest.vcs_provider:type_name -> bytebase.v1.VCSProvider
	12, // 3: bytebase.v1.UpdateVCSProviderRequest.update_mask:type_name -> google.protobuf.FieldMask
	7,  // 4: bytebase.v1.SearchVCSProviderRepositoriesResponse.repositories:type_name -> bytebase.v1.VCSRepository
	13, // 5: bytebase.v1.ListVCSConnectorsInProviderResponse.vcs_connectors:type_name -> bytebase.v1.VCSConnector
	14, // 6: bytebase.v1.VCSProvider.type:type_name -> bytebase.v1.VCSType
	1,  // 7: bytebase.v1.VCSProviderService.GetVCSProvider:input_type -> bytebase.v1.GetVCSProviderRequest
	2,  // 8: bytebase.v1.VCSProviderService.ListVCSProviders:input_type -> bytebase.v1.ListVCSProvidersRequest
	0,  // 9: bytebase.v1.VCSProviderService.CreateVCSProvider:input_type -> bytebase.v1.CreateVCSProviderRequest
	4,  // 10: bytebase.v1.VCSProviderService.UpdateVCSProvider:input_type -> bytebase.v1.UpdateVCSProviderRequest
	5,  // 11: bytebase.v1.VCSProviderService.DeleteVCSProvider:input_type -> bytebase.v1.DeleteVCSProviderRequest
	6,  // 12: bytebase.v1.VCSProviderService.SearchVCSProviderRepositories:input_type -> bytebase.v1.SearchVCSProviderRepositoriesRequest
	9,  // 13: bytebase.v1.VCSProviderService.ListVCSConnectorsInProvider:input_type -> bytebase.v1.ListVCSConnectorsInProviderRequest
	11, // 14: bytebase.v1.VCSProviderService.GetVCSProvider:output_type -> bytebase.v1.VCSProvider
	3,  // 15: bytebase.v1.VCSProviderService.ListVCSProviders:output_type -> bytebase.v1.ListVCSProvidersResponse
	11, // 16: bytebase.v1.VCSProviderService.CreateVCSProvider:output_type -> bytebase.v1.VCSProvider
	11, // 17: bytebase.v1.VCSProviderService.UpdateVCSProvider:output_type -> bytebase.v1.VCSProvider
	15, // 18: bytebase.v1.VCSProviderService.DeleteVCSProvider:output_type -> google.protobuf.Empty
	8,  // 19: bytebase.v1.VCSProviderService.SearchVCSProviderRepositories:output_type -> bytebase.v1.SearchVCSProviderRepositoriesResponse
	10, // 20: bytebase.v1.VCSProviderService.ListVCSConnectorsInProvider:output_type -> bytebase.v1.ListVCSConnectorsInProviderResponse
	14, // [14:21] is the sub-list for method output_type
	7,  // [7:14] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_v1_vcs_provider_service_proto_init() }
func file_v1_vcs_provider_service_proto_init() {
	if File_v1_vcs_provider_service_proto != nil {
		return
	}
	file_v1_annotation_proto_init()
	file_v1_common_proto_init()
	file_v1_vcs_connector_service_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_v1_vcs_provider_service_proto_rawDesc), len(file_v1_vcs_provider_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v1_vcs_provider_service_proto_goTypes,
		DependencyIndexes: file_v1_vcs_provider_service_proto_depIdxs,
		MessageInfos:      file_v1_vcs_provider_service_proto_msgTypes,
	}.Build()
	File_v1_vcs_provider_service_proto = out.File
	file_v1_vcs_provider_service_proto_goTypes = nil
	file_v1_vcs_provider_service_proto_depIdxs = nil
}
