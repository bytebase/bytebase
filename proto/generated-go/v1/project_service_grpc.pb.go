// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: v1/project_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProjectService_GetProject_FullMethodName              = "/bytebase.v1.ProjectService/GetProject"
	ProjectService_ListProjects_FullMethodName            = "/bytebase.v1.ProjectService/ListProjects"
	ProjectService_SearchProjects_FullMethodName          = "/bytebase.v1.ProjectService/SearchProjects"
	ProjectService_CreateProject_FullMethodName           = "/bytebase.v1.ProjectService/CreateProject"
	ProjectService_UpdateProject_FullMethodName           = "/bytebase.v1.ProjectService/UpdateProject"
	ProjectService_DeleteProject_FullMethodName           = "/bytebase.v1.ProjectService/DeleteProject"
	ProjectService_UndeleteProject_FullMethodName         = "/bytebase.v1.ProjectService/UndeleteProject"
	ProjectService_GetIamPolicy_FullMethodName            = "/bytebase.v1.ProjectService/GetIamPolicy"
	ProjectService_BatchGetIamPolicy_FullMethodName       = "/bytebase.v1.ProjectService/BatchGetIamPolicy"
	ProjectService_SetIamPolicy_FullMethodName            = "/bytebase.v1.ProjectService/SetIamPolicy"
	ProjectService_GetDeploymentConfig_FullMethodName     = "/bytebase.v1.ProjectService/GetDeploymentConfig"
	ProjectService_UpdateDeploymentConfig_FullMethodName  = "/bytebase.v1.ProjectService/UpdateDeploymentConfig"
	ProjectService_AddWebhook_FullMethodName              = "/bytebase.v1.ProjectService/AddWebhook"
	ProjectService_UpdateWebhook_FullMethodName           = "/bytebase.v1.ProjectService/UpdateWebhook"
	ProjectService_RemoveWebhook_FullMethodName           = "/bytebase.v1.ProjectService/RemoveWebhook"
	ProjectService_TestWebhook_FullMethodName             = "/bytebase.v1.ProjectService/TestWebhook"
	ProjectService_UpdateProjectGitOpsInfo_FullMethodName = "/bytebase.v1.ProjectService/UpdateProjectGitOpsInfo"
	ProjectService_UnsetProjectGitOpsInfo_FullMethodName  = "/bytebase.v1.ProjectService/UnsetProjectGitOpsInfo"
	ProjectService_SetupProjectSQLReviewCI_FullMethodName = "/bytebase.v1.ProjectService/SetupProjectSQLReviewCI"
	ProjectService_GetProjectGitOpsInfo_FullMethodName    = "/bytebase.v1.ProjectService/GetProjectGitOpsInfo"
	ProjectService_ListDatabaseGroups_FullMethodName      = "/bytebase.v1.ProjectService/ListDatabaseGroups"
	ProjectService_GetDatabaseGroup_FullMethodName        = "/bytebase.v1.ProjectService/GetDatabaseGroup"
	ProjectService_CreateDatabaseGroup_FullMethodName     = "/bytebase.v1.ProjectService/CreateDatabaseGroup"
	ProjectService_UpdateDatabaseGroup_FullMethodName     = "/bytebase.v1.ProjectService/UpdateDatabaseGroup"
	ProjectService_DeleteDatabaseGroup_FullMethodName     = "/bytebase.v1.ProjectService/DeleteDatabaseGroup"
	ProjectService_ListSchemaGroups_FullMethodName        = "/bytebase.v1.ProjectService/ListSchemaGroups"
	ProjectService_GetSchemaGroup_FullMethodName          = "/bytebase.v1.ProjectService/GetSchemaGroup"
	ProjectService_CreateSchemaGroup_FullMethodName       = "/bytebase.v1.ProjectService/CreateSchemaGroup"
	ProjectService_UpdateSchemaGroup_FullMethodName       = "/bytebase.v1.ProjectService/UpdateSchemaGroup"
	ProjectService_DeleteSchemaGroup_FullMethodName       = "/bytebase.v1.ProjectService/DeleteSchemaGroup"
)

// ProjectServiceClient is the client API for ProjectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectServiceClient interface {
	GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*Project, error)
	ListProjects(ctx context.Context, in *ListProjectsRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error)
	// Search for projects that the caller has both projects.get permission on, and also satisfy the specified query.
	SearchProjects(ctx context.Context, in *SearchProjectsRequest, opts ...grpc.CallOption) (*SearchProjectsResponse, error)
	CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*Project, error)
	UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*Project, error)
	DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UndeleteProject(ctx context.Context, in *UndeleteProjectRequest, opts ...grpc.CallOption) (*Project, error)
	GetIamPolicy(ctx context.Context, in *GetIamPolicyRequest, opts ...grpc.CallOption) (*IamPolicy, error)
	BatchGetIamPolicy(ctx context.Context, in *BatchGetIamPolicyRequest, opts ...grpc.CallOption) (*BatchGetIamPolicyResponse, error)
	SetIamPolicy(ctx context.Context, in *SetIamPolicyRequest, opts ...grpc.CallOption) (*IamPolicy, error)
	GetDeploymentConfig(ctx context.Context, in *GetDeploymentConfigRequest, opts ...grpc.CallOption) (*DeploymentConfig, error)
	UpdateDeploymentConfig(ctx context.Context, in *UpdateDeploymentConfigRequest, opts ...grpc.CallOption) (*DeploymentConfig, error)
	AddWebhook(ctx context.Context, in *AddWebhookRequest, opts ...grpc.CallOption) (*Project, error)
	UpdateWebhook(ctx context.Context, in *UpdateWebhookRequest, opts ...grpc.CallOption) (*Project, error)
	RemoveWebhook(ctx context.Context, in *RemoveWebhookRequest, opts ...grpc.CallOption) (*Project, error)
	TestWebhook(ctx context.Context, in *TestWebhookRequest, opts ...grpc.CallOption) (*TestWebhookResponse, error)
	UpdateProjectGitOpsInfo(ctx context.Context, in *UpdateProjectGitOpsInfoRequest, opts ...grpc.CallOption) (*ProjectGitOpsInfo, error)
	UnsetProjectGitOpsInfo(ctx context.Context, in *UnsetProjectGitOpsInfoRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SetupProjectSQLReviewCI(ctx context.Context, in *SetupSQLReviewCIRequest, opts ...grpc.CallOption) (*SetupSQLReviewCIResponse, error)
	GetProjectGitOpsInfo(ctx context.Context, in *GetProjectGitOpsInfoRequest, opts ...grpc.CallOption) (*ProjectGitOpsInfo, error)
	ListDatabaseGroups(ctx context.Context, in *ListDatabaseGroupsRequest, opts ...grpc.CallOption) (*ListDatabaseGroupsResponse, error)
	GetDatabaseGroup(ctx context.Context, in *GetDatabaseGroupRequest, opts ...grpc.CallOption) (*DatabaseGroup, error)
	CreateDatabaseGroup(ctx context.Context, in *CreateDatabaseGroupRequest, opts ...grpc.CallOption) (*DatabaseGroup, error)
	UpdateDatabaseGroup(ctx context.Context, in *UpdateDatabaseGroupRequest, opts ...grpc.CallOption) (*DatabaseGroup, error)
	DeleteDatabaseGroup(ctx context.Context, in *DeleteDatabaseGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListSchemaGroups(ctx context.Context, in *ListSchemaGroupsRequest, opts ...grpc.CallOption) (*ListSchemaGroupsResponse, error)
	GetSchemaGroup(ctx context.Context, in *GetSchemaGroupRequest, opts ...grpc.CallOption) (*SchemaGroup, error)
	CreateSchemaGroup(ctx context.Context, in *CreateSchemaGroupRequest, opts ...grpc.CallOption) (*SchemaGroup, error)
	UpdateSchemaGroup(ctx context.Context, in *UpdateSchemaGroupRequest, opts ...grpc.CallOption) (*SchemaGroup, error)
	DeleteSchemaGroup(ctx context.Context, in *DeleteSchemaGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type projectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectServiceClient(cc grpc.ClientConnInterface) ProjectServiceClient {
	return &projectServiceClient{cc}
}

func (c *projectServiceClient) GetProject(ctx context.Context, in *GetProjectRequest, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := c.cc.Invoke(ctx, ProjectService_GetProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) ListProjects(ctx context.Context, in *ListProjectsRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error) {
	out := new(ListProjectsResponse)
	err := c.cc.Invoke(ctx, ProjectService_ListProjects_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) SearchProjects(ctx context.Context, in *SearchProjectsRequest, opts ...grpc.CallOption) (*SearchProjectsResponse, error) {
	out := new(SearchProjectsResponse)
	err := c.cc.Invoke(ctx, ProjectService_SearchProjects_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := c.cc.Invoke(ctx, ProjectService_CreateProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := c.cc.Invoke(ctx, ProjectService_UpdateProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) DeleteProject(ctx context.Context, in *DeleteProjectRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProjectService_DeleteProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) UndeleteProject(ctx context.Context, in *UndeleteProjectRequest, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := c.cc.Invoke(ctx, ProjectService_UndeleteProject_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) GetIamPolicy(ctx context.Context, in *GetIamPolicyRequest, opts ...grpc.CallOption) (*IamPolicy, error) {
	out := new(IamPolicy)
	err := c.cc.Invoke(ctx, ProjectService_GetIamPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) BatchGetIamPolicy(ctx context.Context, in *BatchGetIamPolicyRequest, opts ...grpc.CallOption) (*BatchGetIamPolicyResponse, error) {
	out := new(BatchGetIamPolicyResponse)
	err := c.cc.Invoke(ctx, ProjectService_BatchGetIamPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) SetIamPolicy(ctx context.Context, in *SetIamPolicyRequest, opts ...grpc.CallOption) (*IamPolicy, error) {
	out := new(IamPolicy)
	err := c.cc.Invoke(ctx, ProjectService_SetIamPolicy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) GetDeploymentConfig(ctx context.Context, in *GetDeploymentConfigRequest, opts ...grpc.CallOption) (*DeploymentConfig, error) {
	out := new(DeploymentConfig)
	err := c.cc.Invoke(ctx, ProjectService_GetDeploymentConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) UpdateDeploymentConfig(ctx context.Context, in *UpdateDeploymentConfigRequest, opts ...grpc.CallOption) (*DeploymentConfig, error) {
	out := new(DeploymentConfig)
	err := c.cc.Invoke(ctx, ProjectService_UpdateDeploymentConfig_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) AddWebhook(ctx context.Context, in *AddWebhookRequest, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := c.cc.Invoke(ctx, ProjectService_AddWebhook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) UpdateWebhook(ctx context.Context, in *UpdateWebhookRequest, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := c.cc.Invoke(ctx, ProjectService_UpdateWebhook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) RemoveWebhook(ctx context.Context, in *RemoveWebhookRequest, opts ...grpc.CallOption) (*Project, error) {
	out := new(Project)
	err := c.cc.Invoke(ctx, ProjectService_RemoveWebhook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) TestWebhook(ctx context.Context, in *TestWebhookRequest, opts ...grpc.CallOption) (*TestWebhookResponse, error) {
	out := new(TestWebhookResponse)
	err := c.cc.Invoke(ctx, ProjectService_TestWebhook_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) UpdateProjectGitOpsInfo(ctx context.Context, in *UpdateProjectGitOpsInfoRequest, opts ...grpc.CallOption) (*ProjectGitOpsInfo, error) {
	out := new(ProjectGitOpsInfo)
	err := c.cc.Invoke(ctx, ProjectService_UpdateProjectGitOpsInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) UnsetProjectGitOpsInfo(ctx context.Context, in *UnsetProjectGitOpsInfoRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProjectService_UnsetProjectGitOpsInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) SetupProjectSQLReviewCI(ctx context.Context, in *SetupSQLReviewCIRequest, opts ...grpc.CallOption) (*SetupSQLReviewCIResponse, error) {
	out := new(SetupSQLReviewCIResponse)
	err := c.cc.Invoke(ctx, ProjectService_SetupProjectSQLReviewCI_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) GetProjectGitOpsInfo(ctx context.Context, in *GetProjectGitOpsInfoRequest, opts ...grpc.CallOption) (*ProjectGitOpsInfo, error) {
	out := new(ProjectGitOpsInfo)
	err := c.cc.Invoke(ctx, ProjectService_GetProjectGitOpsInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) ListDatabaseGroups(ctx context.Context, in *ListDatabaseGroupsRequest, opts ...grpc.CallOption) (*ListDatabaseGroupsResponse, error) {
	out := new(ListDatabaseGroupsResponse)
	err := c.cc.Invoke(ctx, ProjectService_ListDatabaseGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) GetDatabaseGroup(ctx context.Context, in *GetDatabaseGroupRequest, opts ...grpc.CallOption) (*DatabaseGroup, error) {
	out := new(DatabaseGroup)
	err := c.cc.Invoke(ctx, ProjectService_GetDatabaseGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) CreateDatabaseGroup(ctx context.Context, in *CreateDatabaseGroupRequest, opts ...grpc.CallOption) (*DatabaseGroup, error) {
	out := new(DatabaseGroup)
	err := c.cc.Invoke(ctx, ProjectService_CreateDatabaseGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) UpdateDatabaseGroup(ctx context.Context, in *UpdateDatabaseGroupRequest, opts ...grpc.CallOption) (*DatabaseGroup, error) {
	out := new(DatabaseGroup)
	err := c.cc.Invoke(ctx, ProjectService_UpdateDatabaseGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) DeleteDatabaseGroup(ctx context.Context, in *DeleteDatabaseGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProjectService_DeleteDatabaseGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) ListSchemaGroups(ctx context.Context, in *ListSchemaGroupsRequest, opts ...grpc.CallOption) (*ListSchemaGroupsResponse, error) {
	out := new(ListSchemaGroupsResponse)
	err := c.cc.Invoke(ctx, ProjectService_ListSchemaGroups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) GetSchemaGroup(ctx context.Context, in *GetSchemaGroupRequest, opts ...grpc.CallOption) (*SchemaGroup, error) {
	out := new(SchemaGroup)
	err := c.cc.Invoke(ctx, ProjectService_GetSchemaGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) CreateSchemaGroup(ctx context.Context, in *CreateSchemaGroupRequest, opts ...grpc.CallOption) (*SchemaGroup, error) {
	out := new(SchemaGroup)
	err := c.cc.Invoke(ctx, ProjectService_CreateSchemaGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) UpdateSchemaGroup(ctx context.Context, in *UpdateSchemaGroupRequest, opts ...grpc.CallOption) (*SchemaGroup, error) {
	out := new(SchemaGroup)
	err := c.cc.Invoke(ctx, ProjectService_UpdateSchemaGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) DeleteSchemaGroup(ctx context.Context, in *DeleteSchemaGroupRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProjectService_DeleteSchemaGroup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectServiceServer is the server API for ProjectService service.
// All implementations must embed UnimplementedProjectServiceServer
// for forward compatibility
type ProjectServiceServer interface {
	GetProject(context.Context, *GetProjectRequest) (*Project, error)
	ListProjects(context.Context, *ListProjectsRequest) (*ListProjectsResponse, error)
	// Search for projects that the caller has both projects.get permission on, and also satisfy the specified query.
	SearchProjects(context.Context, *SearchProjectsRequest) (*SearchProjectsResponse, error)
	CreateProject(context.Context, *CreateProjectRequest) (*Project, error)
	UpdateProject(context.Context, *UpdateProjectRequest) (*Project, error)
	DeleteProject(context.Context, *DeleteProjectRequest) (*emptypb.Empty, error)
	UndeleteProject(context.Context, *UndeleteProjectRequest) (*Project, error)
	GetIamPolicy(context.Context, *GetIamPolicyRequest) (*IamPolicy, error)
	BatchGetIamPolicy(context.Context, *BatchGetIamPolicyRequest) (*BatchGetIamPolicyResponse, error)
	SetIamPolicy(context.Context, *SetIamPolicyRequest) (*IamPolicy, error)
	GetDeploymentConfig(context.Context, *GetDeploymentConfigRequest) (*DeploymentConfig, error)
	UpdateDeploymentConfig(context.Context, *UpdateDeploymentConfigRequest) (*DeploymentConfig, error)
	AddWebhook(context.Context, *AddWebhookRequest) (*Project, error)
	UpdateWebhook(context.Context, *UpdateWebhookRequest) (*Project, error)
	RemoveWebhook(context.Context, *RemoveWebhookRequest) (*Project, error)
	TestWebhook(context.Context, *TestWebhookRequest) (*TestWebhookResponse, error)
	UpdateProjectGitOpsInfo(context.Context, *UpdateProjectGitOpsInfoRequest) (*ProjectGitOpsInfo, error)
	UnsetProjectGitOpsInfo(context.Context, *UnsetProjectGitOpsInfoRequest) (*emptypb.Empty, error)
	SetupProjectSQLReviewCI(context.Context, *SetupSQLReviewCIRequest) (*SetupSQLReviewCIResponse, error)
	GetProjectGitOpsInfo(context.Context, *GetProjectGitOpsInfoRequest) (*ProjectGitOpsInfo, error)
	ListDatabaseGroups(context.Context, *ListDatabaseGroupsRequest) (*ListDatabaseGroupsResponse, error)
	GetDatabaseGroup(context.Context, *GetDatabaseGroupRequest) (*DatabaseGroup, error)
	CreateDatabaseGroup(context.Context, *CreateDatabaseGroupRequest) (*DatabaseGroup, error)
	UpdateDatabaseGroup(context.Context, *UpdateDatabaseGroupRequest) (*DatabaseGroup, error)
	DeleteDatabaseGroup(context.Context, *DeleteDatabaseGroupRequest) (*emptypb.Empty, error)
	ListSchemaGroups(context.Context, *ListSchemaGroupsRequest) (*ListSchemaGroupsResponse, error)
	GetSchemaGroup(context.Context, *GetSchemaGroupRequest) (*SchemaGroup, error)
	CreateSchemaGroup(context.Context, *CreateSchemaGroupRequest) (*SchemaGroup, error)
	UpdateSchemaGroup(context.Context, *UpdateSchemaGroupRequest) (*SchemaGroup, error)
	DeleteSchemaGroup(context.Context, *DeleteSchemaGroupRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedProjectServiceServer()
}

// UnimplementedProjectServiceServer must be embedded to have forward compatible implementations.
type UnimplementedProjectServiceServer struct {
}

func (UnimplementedProjectServiceServer) GetProject(context.Context, *GetProjectRequest) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProject not implemented")
}
func (UnimplementedProjectServiceServer) ListProjects(context.Context, *ListProjectsRequest) (*ListProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjects not implemented")
}
func (UnimplementedProjectServiceServer) SearchProjects(context.Context, *SearchProjectsRequest) (*SearchProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchProjects not implemented")
}
func (UnimplementedProjectServiceServer) CreateProject(context.Context, *CreateProjectRequest) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (UnimplementedProjectServiceServer) UpdateProject(context.Context, *UpdateProjectRequest) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProject not implemented")
}
func (UnimplementedProjectServiceServer) DeleteProject(context.Context, *DeleteProjectRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProject not implemented")
}
func (UnimplementedProjectServiceServer) UndeleteProject(context.Context, *UndeleteProjectRequest) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UndeleteProject not implemented")
}
func (UnimplementedProjectServiceServer) GetIamPolicy(context.Context, *GetIamPolicyRequest) (*IamPolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIamPolicy not implemented")
}
func (UnimplementedProjectServiceServer) BatchGetIamPolicy(context.Context, *BatchGetIamPolicyRequest) (*BatchGetIamPolicyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchGetIamPolicy not implemented")
}
func (UnimplementedProjectServiceServer) SetIamPolicy(context.Context, *SetIamPolicyRequest) (*IamPolicy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetIamPolicy not implemented")
}
func (UnimplementedProjectServiceServer) GetDeploymentConfig(context.Context, *GetDeploymentConfigRequest) (*DeploymentConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeploymentConfig not implemented")
}
func (UnimplementedProjectServiceServer) UpdateDeploymentConfig(context.Context, *UpdateDeploymentConfigRequest) (*DeploymentConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDeploymentConfig not implemented")
}
func (UnimplementedProjectServiceServer) AddWebhook(context.Context, *AddWebhookRequest) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWebhook not implemented")
}
func (UnimplementedProjectServiceServer) UpdateWebhook(context.Context, *UpdateWebhookRequest) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWebhook not implemented")
}
func (UnimplementedProjectServiceServer) RemoveWebhook(context.Context, *RemoveWebhookRequest) (*Project, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveWebhook not implemented")
}
func (UnimplementedProjectServiceServer) TestWebhook(context.Context, *TestWebhookRequest) (*TestWebhookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestWebhook not implemented")
}
func (UnimplementedProjectServiceServer) UpdateProjectGitOpsInfo(context.Context, *UpdateProjectGitOpsInfoRequest) (*ProjectGitOpsInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProjectGitOpsInfo not implemented")
}
func (UnimplementedProjectServiceServer) UnsetProjectGitOpsInfo(context.Context, *UnsetProjectGitOpsInfoRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnsetProjectGitOpsInfo not implemented")
}
func (UnimplementedProjectServiceServer) SetupProjectSQLReviewCI(context.Context, *SetupSQLReviewCIRequest) (*SetupSQLReviewCIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetupProjectSQLReviewCI not implemented")
}
func (UnimplementedProjectServiceServer) GetProjectGitOpsInfo(context.Context, *GetProjectGitOpsInfoRequest) (*ProjectGitOpsInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProjectGitOpsInfo not implemented")
}
func (UnimplementedProjectServiceServer) ListDatabaseGroups(context.Context, *ListDatabaseGroupsRequest) (*ListDatabaseGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDatabaseGroups not implemented")
}
func (UnimplementedProjectServiceServer) GetDatabaseGroup(context.Context, *GetDatabaseGroupRequest) (*DatabaseGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDatabaseGroup not implemented")
}
func (UnimplementedProjectServiceServer) CreateDatabaseGroup(context.Context, *CreateDatabaseGroupRequest) (*DatabaseGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDatabaseGroup not implemented")
}
func (UnimplementedProjectServiceServer) UpdateDatabaseGroup(context.Context, *UpdateDatabaseGroupRequest) (*DatabaseGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDatabaseGroup not implemented")
}
func (UnimplementedProjectServiceServer) DeleteDatabaseGroup(context.Context, *DeleteDatabaseGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDatabaseGroup not implemented")
}
func (UnimplementedProjectServiceServer) ListSchemaGroups(context.Context, *ListSchemaGroupsRequest) (*ListSchemaGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSchemaGroups not implemented")
}
func (UnimplementedProjectServiceServer) GetSchemaGroup(context.Context, *GetSchemaGroupRequest) (*SchemaGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchemaGroup not implemented")
}
func (UnimplementedProjectServiceServer) CreateSchemaGroup(context.Context, *CreateSchemaGroupRequest) (*SchemaGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSchemaGroup not implemented")
}
func (UnimplementedProjectServiceServer) UpdateSchemaGroup(context.Context, *UpdateSchemaGroupRequest) (*SchemaGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSchemaGroup not implemented")
}
func (UnimplementedProjectServiceServer) DeleteSchemaGroup(context.Context, *DeleteSchemaGroupRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSchemaGroup not implemented")
}
func (UnimplementedProjectServiceServer) mustEmbedUnimplementedProjectServiceServer() {}

// UnsafeProjectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectServiceServer will
// result in compilation errors.
type UnsafeProjectServiceServer interface {
	mustEmbedUnimplementedProjectServiceServer()
}

func RegisterProjectServiceServer(s grpc.ServiceRegistrar, srv ProjectServiceServer) {
	s.RegisterService(&ProjectService_ServiceDesc, srv)
}

func _ProjectService_GetProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).GetProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_GetProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).GetProject(ctx, req.(*GetProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_ListProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).ListProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_ListProjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).ListProjects(ctx, req.(*ListProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_SearchProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).SearchProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_SearchProjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).SearchProjects(ctx, req.(*SearchProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_CreateProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).CreateProject(ctx, req.(*CreateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_UpdateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).UpdateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_UpdateProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).UpdateProject(ctx, req.(*UpdateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_DeleteProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).DeleteProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_DeleteProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).DeleteProject(ctx, req.(*DeleteProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_UndeleteProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UndeleteProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).UndeleteProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_UndeleteProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).UndeleteProject(ctx, req.(*UndeleteProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_GetIamPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIamPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).GetIamPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_GetIamPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).GetIamPolicy(ctx, req.(*GetIamPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_BatchGetIamPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchGetIamPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).BatchGetIamPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_BatchGetIamPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).BatchGetIamPolicy(ctx, req.(*BatchGetIamPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_SetIamPolicy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetIamPolicyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).SetIamPolicy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_SetIamPolicy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).SetIamPolicy(ctx, req.(*SetIamPolicyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_GetDeploymentConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeploymentConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).GetDeploymentConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_GetDeploymentConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).GetDeploymentConfig(ctx, req.(*GetDeploymentConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_UpdateDeploymentConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDeploymentConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).UpdateDeploymentConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_UpdateDeploymentConfig_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).UpdateDeploymentConfig(ctx, req.(*UpdateDeploymentConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_AddWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).AddWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_AddWebhook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).AddWebhook(ctx, req.(*AddWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_UpdateWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).UpdateWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_UpdateWebhook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).UpdateWebhook(ctx, req.(*UpdateWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_RemoveWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).RemoveWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_RemoveWebhook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).RemoveWebhook(ctx, req.(*RemoveWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_TestWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).TestWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_TestWebhook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).TestWebhook(ctx, req.(*TestWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_UpdateProjectGitOpsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectGitOpsInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).UpdateProjectGitOpsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_UpdateProjectGitOpsInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).UpdateProjectGitOpsInfo(ctx, req.(*UpdateProjectGitOpsInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_UnsetProjectGitOpsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnsetProjectGitOpsInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).UnsetProjectGitOpsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_UnsetProjectGitOpsInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).UnsetProjectGitOpsInfo(ctx, req.(*UnsetProjectGitOpsInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_SetupProjectSQLReviewCI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetupSQLReviewCIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).SetupProjectSQLReviewCI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_SetupProjectSQLReviewCI_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).SetupProjectSQLReviewCI(ctx, req.(*SetupSQLReviewCIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_GetProjectGitOpsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProjectGitOpsInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).GetProjectGitOpsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_GetProjectGitOpsInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).GetProjectGitOpsInfo(ctx, req.(*GetProjectGitOpsInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_ListDatabaseGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDatabaseGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).ListDatabaseGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_ListDatabaseGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).ListDatabaseGroups(ctx, req.(*ListDatabaseGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_GetDatabaseGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatabaseGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).GetDatabaseGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_GetDatabaseGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).GetDatabaseGroup(ctx, req.(*GetDatabaseGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_CreateDatabaseGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDatabaseGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).CreateDatabaseGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_CreateDatabaseGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).CreateDatabaseGroup(ctx, req.(*CreateDatabaseGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_UpdateDatabaseGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDatabaseGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).UpdateDatabaseGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_UpdateDatabaseGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).UpdateDatabaseGroup(ctx, req.(*UpdateDatabaseGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_DeleteDatabaseGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDatabaseGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).DeleteDatabaseGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_DeleteDatabaseGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).DeleteDatabaseGroup(ctx, req.(*DeleteDatabaseGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_ListSchemaGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSchemaGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).ListSchemaGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_ListSchemaGroups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).ListSchemaGroups(ctx, req.(*ListSchemaGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_GetSchemaGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSchemaGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).GetSchemaGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_GetSchemaGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).GetSchemaGroup(ctx, req.(*GetSchemaGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_CreateSchemaGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSchemaGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).CreateSchemaGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_CreateSchemaGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).CreateSchemaGroup(ctx, req.(*CreateSchemaGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_UpdateSchemaGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSchemaGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).UpdateSchemaGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_UpdateSchemaGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).UpdateSchemaGroup(ctx, req.(*UpdateSchemaGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_DeleteSchemaGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSchemaGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).DeleteSchemaGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_DeleteSchemaGroup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).DeleteSchemaGroup(ctx, req.(*DeleteSchemaGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectService_ServiceDesc is the grpc.ServiceDesc for ProjectService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bytebase.v1.ProjectService",
	HandlerType: (*ProjectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProject",
			Handler:    _ProjectService_GetProject_Handler,
		},
		{
			MethodName: "ListProjects",
			Handler:    _ProjectService_ListProjects_Handler,
		},
		{
			MethodName: "SearchProjects",
			Handler:    _ProjectService_SearchProjects_Handler,
		},
		{
			MethodName: "CreateProject",
			Handler:    _ProjectService_CreateProject_Handler,
		},
		{
			MethodName: "UpdateProject",
			Handler:    _ProjectService_UpdateProject_Handler,
		},
		{
			MethodName: "DeleteProject",
			Handler:    _ProjectService_DeleteProject_Handler,
		},
		{
			MethodName: "UndeleteProject",
			Handler:    _ProjectService_UndeleteProject_Handler,
		},
		{
			MethodName: "GetIamPolicy",
			Handler:    _ProjectService_GetIamPolicy_Handler,
		},
		{
			MethodName: "BatchGetIamPolicy",
			Handler:    _ProjectService_BatchGetIamPolicy_Handler,
		},
		{
			MethodName: "SetIamPolicy",
			Handler:    _ProjectService_SetIamPolicy_Handler,
		},
		{
			MethodName: "GetDeploymentConfig",
			Handler:    _ProjectService_GetDeploymentConfig_Handler,
		},
		{
			MethodName: "UpdateDeploymentConfig",
			Handler:    _ProjectService_UpdateDeploymentConfig_Handler,
		},
		{
			MethodName: "AddWebhook",
			Handler:    _ProjectService_AddWebhook_Handler,
		},
		{
			MethodName: "UpdateWebhook",
			Handler:    _ProjectService_UpdateWebhook_Handler,
		},
		{
			MethodName: "RemoveWebhook",
			Handler:    _ProjectService_RemoveWebhook_Handler,
		},
		{
			MethodName: "TestWebhook",
			Handler:    _ProjectService_TestWebhook_Handler,
		},
		{
			MethodName: "UpdateProjectGitOpsInfo",
			Handler:    _ProjectService_UpdateProjectGitOpsInfo_Handler,
		},
		{
			MethodName: "UnsetProjectGitOpsInfo",
			Handler:    _ProjectService_UnsetProjectGitOpsInfo_Handler,
		},
		{
			MethodName: "SetupProjectSQLReviewCI",
			Handler:    _ProjectService_SetupProjectSQLReviewCI_Handler,
		},
		{
			MethodName: "GetProjectGitOpsInfo",
			Handler:    _ProjectService_GetProjectGitOpsInfo_Handler,
		},
		{
			MethodName: "ListDatabaseGroups",
			Handler:    _ProjectService_ListDatabaseGroups_Handler,
		},
		{
			MethodName: "GetDatabaseGroup",
			Handler:    _ProjectService_GetDatabaseGroup_Handler,
		},
		{
			MethodName: "CreateDatabaseGroup",
			Handler:    _ProjectService_CreateDatabaseGroup_Handler,
		},
		{
			MethodName: "UpdateDatabaseGroup",
			Handler:    _ProjectService_UpdateDatabaseGroup_Handler,
		},
		{
			MethodName: "DeleteDatabaseGroup",
			Handler:    _ProjectService_DeleteDatabaseGroup_Handler,
		},
		{
			MethodName: "ListSchemaGroups",
			Handler:    _ProjectService_ListSchemaGroups_Handler,
		},
		{
			MethodName: "GetSchemaGroup",
			Handler:    _ProjectService_GetSchemaGroup_Handler,
		},
		{
			MethodName: "CreateSchemaGroup",
			Handler:    _ProjectService_CreateSchemaGroup_Handler,
		},
		{
			MethodName: "UpdateSchemaGroup",
			Handler:    _ProjectService_UpdateSchemaGroup_Handler,
		},
		{
			MethodName: "DeleteSchemaGroup",
			Handler:    _ProjectService_DeleteSchemaGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/project_service.proto",
}
