// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: v1/rollout_service.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Task_Status int32

const (
	Task_STATUS_UNSPECIFIED Task_Status = 0
	Task_NOT_STARTED        Task_Status = 1
	Task_PENDING            Task_Status = 2
	Task_RUNNING            Task_Status = 3
	Task_DONE               Task_Status = 4
	Task_FAILED             Task_Status = 5
	Task_CANCELED           Task_Status = 6
	Task_SKIPPED            Task_Status = 7
)

// Enum value maps for Task_Status.
var (
	Task_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "NOT_STARTED",
		2: "PENDING",
		3: "RUNNING",
		4: "DONE",
		5: "FAILED",
		6: "CANCELED",
		7: "SKIPPED",
	}
	Task_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"NOT_STARTED":        1,
		"PENDING":            2,
		"RUNNING":            3,
		"DONE":               4,
		"FAILED":             5,
		"CANCELED":           6,
		"SKIPPED":            7,
	}
)

func (x Task_Status) Enum() *Task_Status {
	p := new(Task_Status)
	*p = x
	return p
}

func (x Task_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Task_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_rollout_service_proto_enumTypes[0].Descriptor()
}

func (Task_Status) Type() protoreflect.EnumType {
	return &file_v1_rollout_service_proto_enumTypes[0]
}

func (x Task_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Task_Status.Descriptor instead.
func (Task_Status) EnumDescriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{17, 0}
}

type Task_Type int32

const (
	Task_TYPE_UNSPECIFIED Task_Type = 0
	Task_GENERAL          Task_Type = 1
	// use payload DatabaseCreate
	Task_DATABASE_CREATE Task_Type = 2
	// use payload DatabaseSchemaBaseline
	Task_DATABASE_SCHEMA_BASELINE Task_Type = 3
	// use payload DatabaseSchemaUpdate
	Task_DATABASE_SCHEMA_UPDATE Task_Type = 4
	// use payload DatabaseSchemaUpdate
	Task_DATABASE_SCHEMA_UPDATE_SDL Task_Type = 5
	// use payload DatabaseSchemaUpdate
	Task_DATABASE_SCHEMA_UPDATE_GHOST Task_Type = 9
	// use payload DatabaseDataUpdate
	Task_DATABASE_DATA_UPDATE Task_Type = 8
	// use payload DatabaseDataExport
	Task_DATABASE_DATA_EXPORT Task_Type = 12
)

// Enum value maps for Task_Type.
var (
	Task_Type_name = map[int32]string{
		0:  "TYPE_UNSPECIFIED",
		1:  "GENERAL",
		2:  "DATABASE_CREATE",
		3:  "DATABASE_SCHEMA_BASELINE",
		4:  "DATABASE_SCHEMA_UPDATE",
		5:  "DATABASE_SCHEMA_UPDATE_SDL",
		9:  "DATABASE_SCHEMA_UPDATE_GHOST",
		8:  "DATABASE_DATA_UPDATE",
		12: "DATABASE_DATA_EXPORT",
	}
	Task_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED":             0,
		"GENERAL":                      1,
		"DATABASE_CREATE":              2,
		"DATABASE_SCHEMA_BASELINE":     3,
		"DATABASE_SCHEMA_UPDATE":       4,
		"DATABASE_SCHEMA_UPDATE_SDL":   5,
		"DATABASE_SCHEMA_UPDATE_GHOST": 9,
		"DATABASE_DATA_UPDATE":         8,
		"DATABASE_DATA_EXPORT":         12,
	}
)

func (x Task_Type) Enum() *Task_Type {
	p := new(Task_Type)
	*p = x
	return p
}

func (x Task_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Task_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_rollout_service_proto_enumTypes[1].Descriptor()
}

func (Task_Type) Type() protoreflect.EnumType {
	return &file_v1_rollout_service_proto_enumTypes[1]
}

func (x Task_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Task_Type.Descriptor instead.
func (Task_Type) EnumDescriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{17, 1}
}

type TaskRun_Status int32

const (
	TaskRun_STATUS_UNSPECIFIED TaskRun_Status = 0
	TaskRun_PENDING            TaskRun_Status = 1
	TaskRun_RUNNING            TaskRun_Status = 2
	TaskRun_DONE               TaskRun_Status = 3
	TaskRun_FAILED             TaskRun_Status = 4
	TaskRun_CANCELED           TaskRun_Status = 5
)

// Enum value maps for TaskRun_Status.
var (
	TaskRun_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "PENDING",
		2: "RUNNING",
		3: "DONE",
		4: "FAILED",
		5: "CANCELED",
	}
	TaskRun_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"PENDING":            1,
		"RUNNING":            2,
		"DONE":               3,
		"FAILED":             4,
		"CANCELED":           5,
	}
)

func (x TaskRun_Status) Enum() *TaskRun_Status {
	p := new(TaskRun_Status)
	*p = x
	return p
}

func (x TaskRun_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskRun_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_rollout_service_proto_enumTypes[2].Descriptor()
}

func (TaskRun_Status) Type() protoreflect.EnumType {
	return &file_v1_rollout_service_proto_enumTypes[2]
}

func (x TaskRun_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskRun_Status.Descriptor instead.
func (TaskRun_Status) EnumDescriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{18, 0}
}

type TaskRun_ExportArchiveStatus int32

const (
	TaskRun_EXPORT_ARCHIVE_STATUS_UNSPECIFIED TaskRun_ExportArchiveStatus = 0
	TaskRun_READY                             TaskRun_ExportArchiveStatus = 1
	TaskRun_EXPORTED                          TaskRun_ExportArchiveStatus = 2
)

// Enum value maps for TaskRun_ExportArchiveStatus.
var (
	TaskRun_ExportArchiveStatus_name = map[int32]string{
		0: "EXPORT_ARCHIVE_STATUS_UNSPECIFIED",
		1: "READY",
		2: "EXPORTED",
	}
	TaskRun_ExportArchiveStatus_value = map[string]int32{
		"EXPORT_ARCHIVE_STATUS_UNSPECIFIED": 0,
		"READY":                             1,
		"EXPORTED":                          2,
	}
)

func (x TaskRun_ExportArchiveStatus) Enum() *TaskRun_ExportArchiveStatus {
	p := new(TaskRun_ExportArchiveStatus)
	*p = x
	return p
}

func (x TaskRun_ExportArchiveStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskRun_ExportArchiveStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_rollout_service_proto_enumTypes[3].Descriptor()
}

func (TaskRun_ExportArchiveStatus) Type() protoreflect.EnumType {
	return &file_v1_rollout_service_proto_enumTypes[3]
}

func (x TaskRun_ExportArchiveStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskRun_ExportArchiveStatus.Descriptor instead.
func (TaskRun_ExportArchiveStatus) EnumDescriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{18, 1}
}

type TaskRunLogEntry_Type int32

const (
	TaskRunLogEntry_TYPE_UNSPECIFIED       TaskRunLogEntry_Type = 0
	TaskRunLogEntry_SCHEMA_DUMP            TaskRunLogEntry_Type = 1
	TaskRunLogEntry_COMMAND_EXECUTE        TaskRunLogEntry_Type = 2
	TaskRunLogEntry_DATABASE_SYNC          TaskRunLogEntry_Type = 3
	TaskRunLogEntry_TASK_RUN_STATUS_UPDATE TaskRunLogEntry_Type = 4
	TaskRunLogEntry_TRANSACTION_CONTROL    TaskRunLogEntry_Type = 5
	TaskRunLogEntry_PRIOR_BACKUP           TaskRunLogEntry_Type = 6
	TaskRunLogEntry_RETRY_INFO             TaskRunLogEntry_Type = 7
)

// Enum value maps for TaskRunLogEntry_Type.
var (
	TaskRunLogEntry_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "SCHEMA_DUMP",
		2: "COMMAND_EXECUTE",
		3: "DATABASE_SYNC",
		4: "TASK_RUN_STATUS_UPDATE",
		5: "TRANSACTION_CONTROL",
		6: "PRIOR_BACKUP",
		7: "RETRY_INFO",
	}
	TaskRunLogEntry_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED":       0,
		"SCHEMA_DUMP":            1,
		"COMMAND_EXECUTE":        2,
		"DATABASE_SYNC":          3,
		"TASK_RUN_STATUS_UPDATE": 4,
		"TRANSACTION_CONTROL":    5,
		"PRIOR_BACKUP":           6,
		"RETRY_INFO":             7,
	}
)

func (x TaskRunLogEntry_Type) Enum() *TaskRunLogEntry_Type {
	p := new(TaskRunLogEntry_Type)
	*p = x
	return p
}

func (x TaskRunLogEntry_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskRunLogEntry_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_rollout_service_proto_enumTypes[4].Descriptor()
}

func (TaskRunLogEntry_Type) Type() protoreflect.EnumType {
	return &file_v1_rollout_service_proto_enumTypes[4]
}

func (x TaskRunLogEntry_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskRunLogEntry_Type.Descriptor instead.
func (TaskRunLogEntry_Type) EnumDescriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{20, 0}
}

type TaskRunLogEntry_TaskRunStatusUpdate_Status int32

const (
	TaskRunLogEntry_TaskRunStatusUpdate_STATUS_UNSPECIFIED TaskRunLogEntry_TaskRunStatusUpdate_Status = 0
	// the task run is ready to be executed by the scheduler
	TaskRunLogEntry_TaskRunStatusUpdate_RUNNING_WAITING TaskRunLogEntry_TaskRunStatusUpdate_Status = 1
	// the task run is being executed by the scheduler
	TaskRunLogEntry_TaskRunStatusUpdate_RUNNING_RUNNING TaskRunLogEntry_TaskRunStatusUpdate_Status = 2
)

// Enum value maps for TaskRunLogEntry_TaskRunStatusUpdate_Status.
var (
	TaskRunLogEntry_TaskRunStatusUpdate_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "RUNNING_WAITING",
		2: "RUNNING_RUNNING",
	}
	TaskRunLogEntry_TaskRunStatusUpdate_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"RUNNING_WAITING":    1,
		"RUNNING_RUNNING":    2,
	}
)

func (x TaskRunLogEntry_TaskRunStatusUpdate_Status) Enum() *TaskRunLogEntry_TaskRunStatusUpdate_Status {
	p := new(TaskRunLogEntry_TaskRunStatusUpdate_Status)
	*p = x
	return p
}

func (x TaskRunLogEntry_TaskRunStatusUpdate_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskRunLogEntry_TaskRunStatusUpdate_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_rollout_service_proto_enumTypes[5].Descriptor()
}

func (TaskRunLogEntry_TaskRunStatusUpdate_Status) Type() protoreflect.EnumType {
	return &file_v1_rollout_service_proto_enumTypes[5]
}

func (x TaskRunLogEntry_TaskRunStatusUpdate_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskRunLogEntry_TaskRunStatusUpdate_Status.Descriptor instead.
func (TaskRunLogEntry_TaskRunStatusUpdate_Status) EnumDescriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{20, 3, 0}
}

type TaskRunLogEntry_TransactionControl_Type int32

const (
	TaskRunLogEntry_TransactionControl_TYPE_UNSPECIFIED TaskRunLogEntry_TransactionControl_Type = 0
	TaskRunLogEntry_TransactionControl_BEGIN            TaskRunLogEntry_TransactionControl_Type = 1
	TaskRunLogEntry_TransactionControl_COMMIT           TaskRunLogEntry_TransactionControl_Type = 2
	TaskRunLogEntry_TransactionControl_ROLLBACK         TaskRunLogEntry_TransactionControl_Type = 3
)

// Enum value maps for TaskRunLogEntry_TransactionControl_Type.
var (
	TaskRunLogEntry_TransactionControl_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "BEGIN",
		2: "COMMIT",
		3: "ROLLBACK",
	}
	TaskRunLogEntry_TransactionControl_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"BEGIN":            1,
		"COMMIT":           2,
		"ROLLBACK":         3,
	}
)

func (x TaskRunLogEntry_TransactionControl_Type) Enum() *TaskRunLogEntry_TransactionControl_Type {
	p := new(TaskRunLogEntry_TransactionControl_Type)
	*p = x
	return p
}

func (x TaskRunLogEntry_TransactionControl_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskRunLogEntry_TransactionControl_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_rollout_service_proto_enumTypes[6].Descriptor()
}

func (TaskRunLogEntry_TransactionControl_Type) Type() protoreflect.EnumType {
	return &file_v1_rollout_service_proto_enumTypes[6]
}

func (x TaskRunLogEntry_TransactionControl_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskRunLogEntry_TransactionControl_Type.Descriptor instead.
func (TaskRunLogEntry_TransactionControl_Type) EnumDescriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{20, 4, 0}
}

type BatchRunTasksRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the parent of the tasks.
	// Format: projects/{project}/rollouts/{rollout}/stages/{stage}
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The tasks to run.
	// Format: projects/{project}/rollouts/{rollout}/stages/{stage}/tasks/{task}
	Tasks         []string `protobuf:"bytes,2,rep,name=tasks,proto3" json:"tasks,omitempty"`
	Reason        string   `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchRunTasksRequest) Reset() {
	*x = BatchRunTasksRequest{}
	mi := &file_v1_rollout_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchRunTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchRunTasksRequest) ProtoMessage() {}

func (x *BatchRunTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchRunTasksRequest.ProtoReflect.Descriptor instead.
func (*BatchRunTasksRequest) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{0}
}

func (x *BatchRunTasksRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *BatchRunTasksRequest) GetTasks() []string {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *BatchRunTasksRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type BatchRunTasksResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchRunTasksResponse) Reset() {
	*x = BatchRunTasksResponse{}
	mi := &file_v1_rollout_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchRunTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchRunTasksResponse) ProtoMessage() {}

func (x *BatchRunTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchRunTasksResponse.ProtoReflect.Descriptor instead.
func (*BatchRunTasksResponse) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{1}
}

type BatchSkipTasksRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the parent of the tasks.
	// Format: projects/{project}/rollouts/{rollout}/stages/{stage}
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The tasks to skip.
	// Format: projects/{project}/rollouts/{rollout}/stages/{stage}/tasks/{task}
	Tasks         []string `protobuf:"bytes,2,rep,name=tasks,proto3" json:"tasks,omitempty"`
	Reason        string   `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchSkipTasksRequest) Reset() {
	*x = BatchSkipTasksRequest{}
	mi := &file_v1_rollout_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchSkipTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchSkipTasksRequest) ProtoMessage() {}

func (x *BatchSkipTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchSkipTasksRequest.ProtoReflect.Descriptor instead.
func (*BatchSkipTasksRequest) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{2}
}

func (x *BatchSkipTasksRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *BatchSkipTasksRequest) GetTasks() []string {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *BatchSkipTasksRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type BatchSkipTasksResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchSkipTasksResponse) Reset() {
	*x = BatchSkipTasksResponse{}
	mi := &file_v1_rollout_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchSkipTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchSkipTasksResponse) ProtoMessage() {}

func (x *BatchSkipTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchSkipTasksResponse.ProtoReflect.Descriptor instead.
func (*BatchSkipTasksResponse) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{3}
}

type BatchCancelTaskRunsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the parent of the taskRuns.
	// Format: projects/{project}/rollouts/{rollout}/stages/{stage}/tasks/{task}
	// Use `projects/{project}/rollouts/{rollout}/stages/{stage}/tasks/-` to cancel task runs under the same stage.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The taskRuns to cancel.
	// Format: projects/{project}/rollouts/{rollout}/stages/{stage}/tasks/{task}/taskRuns/{taskRun}
	TaskRuns      []string `protobuf:"bytes,2,rep,name=task_runs,json=taskRuns,proto3" json:"task_runs,omitempty"`
	Reason        string   `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchCancelTaskRunsRequest) Reset() {
	*x = BatchCancelTaskRunsRequest{}
	mi := &file_v1_rollout_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchCancelTaskRunsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCancelTaskRunsRequest) ProtoMessage() {}

func (x *BatchCancelTaskRunsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCancelTaskRunsRequest.ProtoReflect.Descriptor instead.
func (*BatchCancelTaskRunsRequest) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{4}
}

func (x *BatchCancelTaskRunsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *BatchCancelTaskRunsRequest) GetTaskRuns() []string {
	if x != nil {
		return x.TaskRuns
	}
	return nil
}

func (x *BatchCancelTaskRunsRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type BatchCancelTaskRunsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchCancelTaskRunsResponse) Reset() {
	*x = BatchCancelTaskRunsResponse{}
	mi := &file_v1_rollout_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchCancelTaskRunsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCancelTaskRunsResponse) ProtoMessage() {}

func (x *BatchCancelTaskRunsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCancelTaskRunsResponse.ProtoReflect.Descriptor instead.
func (*BatchCancelTaskRunsResponse) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{5}
}

type GetRolloutRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the rollout to retrieve.
	// Format: projects/{project}/rollouts/{rollout}
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRolloutRequest) Reset() {
	*x = GetRolloutRequest{}
	mi := &file_v1_rollout_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRolloutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRolloutRequest) ProtoMessage() {}

func (x *GetRolloutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRolloutRequest.ProtoReflect.Descriptor instead.
func (*GetRolloutRequest) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{6}
}

func (x *GetRolloutRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListRolloutsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The parent, which owns this collection of rollouts.
	// Format: projects/{project}
	// Use "projects/-" to list all rollouts from all projects.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The maximum number of rollouts to return. The service may return fewer than
	// this value.
	// If unspecified, at most 10 rollouts will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListRollouts` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListRollouts` must match
	// the call that provided the page token.
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRolloutsRequest) Reset() {
	*x = ListRolloutsRequest{}
	mi := &file_v1_rollout_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRolloutsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRolloutsRequest) ProtoMessage() {}

func (x *ListRolloutsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRolloutsRequest.ProtoReflect.Descriptor instead.
func (*ListRolloutsRequest) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{7}
}

func (x *ListRolloutsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListRolloutsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListRolloutsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListRolloutsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The rollouts from the specified request.
	Rollouts []*Rollout `protobuf:"bytes,1,rep,name=rollouts,proto3" json:"rollouts,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRolloutsResponse) Reset() {
	*x = ListRolloutsResponse{}
	mi := &file_v1_rollout_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRolloutsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRolloutsResponse) ProtoMessage() {}

func (x *ListRolloutsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRolloutsResponse.ProtoReflect.Descriptor instead.
func (*ListRolloutsResponse) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{8}
}

func (x *ListRolloutsResponse) GetRollouts() []*Rollout {
	if x != nil {
		return x.Rollouts
	}
	return nil
}

func (x *ListRolloutsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type CreateRolloutRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The parent project where this rollout will be created.
	// Format: projects/{project}
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The rollout to create.
	Rollout *Rollout `protobuf:"bytes,2,opt,name=rollout,proto3" json:"rollout,omitempty"`
	// Create the rollout and the stages up to the target stage.
	// Format: environments/{environment}
	// If unspecified, all stages are created.
	// If set to "", no stages are created.
	Target *string `protobuf:"bytes,3,opt,name=target,proto3,oneof" json:"target,omitempty"`
	// If set, validate the request and preview the rollout, but
	// do not actually create it.
	ValidateOnly  bool `protobuf:"varint,4,opt,name=validate_only,json=validateOnly,proto3" json:"validate_only,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateRolloutRequest) Reset() {
	*x = CreateRolloutRequest{}
	mi := &file_v1_rollout_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRolloutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRolloutRequest) ProtoMessage() {}

func (x *CreateRolloutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRolloutRequest.ProtoReflect.Descriptor instead.
func (*CreateRolloutRequest) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{9}
}

func (x *CreateRolloutRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateRolloutRequest) GetRollout() *Rollout {
	if x != nil {
		return x.Rollout
	}
	return nil
}

func (x *CreateRolloutRequest) GetTarget() string {
	if x != nil && x.Target != nil {
		return *x.Target
	}
	return ""
}

func (x *CreateRolloutRequest) GetValidateOnly() bool {
	if x != nil {
		return x.ValidateOnly
	}
	return false
}

type PreviewRolloutRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the project.
	// Format: projects/{project}
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// The plan used to preview rollout.
	Plan          *Plan `protobuf:"bytes,2,opt,name=plan,proto3" json:"plan,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PreviewRolloutRequest) Reset() {
	*x = PreviewRolloutRequest{}
	mi := &file_v1_rollout_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PreviewRolloutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewRolloutRequest) ProtoMessage() {}

func (x *PreviewRolloutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewRolloutRequest.ProtoReflect.Descriptor instead.
func (*PreviewRolloutRequest) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{10}
}

func (x *PreviewRolloutRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *PreviewRolloutRequest) GetPlan() *Plan {
	if x != nil {
		return x.Plan
	}
	return nil
}

type ListTaskRunsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The parent, which owns this collection of plans.
	// Format: projects/{project}/rollouts/{rollout}/stages/{stage}/tasks/{task}
	// Use "projects/{project}/rollouts/{rollout}/stages/-/tasks/-" to list all taskRuns from a rollout.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Not used.
	// The maximum number of taskRuns to return. The service may return fewer than
	// this value.
	// If unspecified, at most 10 taskRuns will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Not used.
	// A page token, received from a previous `ListTaskRuns` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListTaskRuns` must match
	// the call that provided the page token.
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTaskRunsRequest) Reset() {
	*x = ListTaskRunsRequest{}
	mi := &file_v1_rollout_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTaskRunsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTaskRunsRequest) ProtoMessage() {}

func (x *ListTaskRunsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTaskRunsRequest.ProtoReflect.Descriptor instead.
func (*ListTaskRunsRequest) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{11}
}

func (x *ListTaskRunsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListTaskRunsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListTaskRunsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListTaskRunsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The taskRuns from the specified request.
	TaskRuns []*TaskRun `protobuf:"bytes,1,rep,name=task_runs,json=taskRuns,proto3" json:"task_runs,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTaskRunsResponse) Reset() {
	*x = ListTaskRunsResponse{}
	mi := &file_v1_rollout_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTaskRunsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTaskRunsResponse) ProtoMessage() {}

func (x *ListTaskRunsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTaskRunsResponse.ProtoReflect.Descriptor instead.
func (*ListTaskRunsResponse) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{12}
}

func (x *ListTaskRunsResponse) GetTaskRuns() []*TaskRun {
	if x != nil {
		return x.TaskRuns
	}
	return nil
}

func (x *ListTaskRunsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type GetTaskRunRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Format: projects/{project}/rollouts/{rollout}/stages/{stage}/tasks/{task}/taskRuns/{taskRun}
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTaskRunRequest) Reset() {
	*x = GetTaskRunRequest{}
	mi := &file_v1_rollout_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTaskRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskRunRequest) ProtoMessage() {}

func (x *GetTaskRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskRunRequest.ProtoReflect.Descriptor instead.
func (*GetTaskRunRequest) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{13}
}

func (x *GetTaskRunRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetTaskRunLogRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Format: projects/{project}/rollouts/{rollout}/stages/{stage}/tasks/{task}/taskRuns/{taskRun}
	// TODO(d): check the resource_reference.
	Parent        string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTaskRunLogRequest) Reset() {
	*x = GetTaskRunLogRequest{}
	mi := &file_v1_rollout_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTaskRunLogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskRunLogRequest) ProtoMessage() {}

func (x *GetTaskRunLogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskRunLogRequest.ProtoReflect.Descriptor instead.
func (*GetTaskRunLogRequest) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{14}
}

func (x *GetTaskRunLogRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

type Rollout struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The resource name of the rollout.
	// Format: projects/{project}/rollouts/{rollout}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The plan that this rollout is based on.
	// Format: projects/{project}/plans/{plan}
	Plan  string `protobuf:"bytes,3,opt,name=plan,proto3" json:"plan,omitempty"`
	Title string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	// stages and thus tasks of the rollout.
	Stages []*Stage `protobuf:"bytes,5,rep,name=stages,proto3" json:"stages,omitempty"`
	// Format: users/hello@world.com
	Creator    string                 `protobuf:"bytes,6,opt,name=creator,proto3" json:"creator,omitempty"`
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// The issue associated with the rollout. Could be empty.
	// Format: projects/{project}/issues/{issue}
	Issue         string `protobuf:"bytes,9,opt,name=issue,proto3" json:"issue,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Rollout) Reset() {
	*x = Rollout{}
	mi := &file_v1_rollout_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Rollout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rollout) ProtoMessage() {}

func (x *Rollout) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rollout.ProtoReflect.Descriptor instead.
func (*Rollout) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{15}
}

func (x *Rollout) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Rollout) GetPlan() string {
	if x != nil {
		return x.Plan
	}
	return ""
}

func (x *Rollout) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Rollout) GetStages() []*Stage {
	if x != nil {
		return x.Stages
	}
	return nil
}

func (x *Rollout) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *Rollout) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Rollout) GetIssue() string {
	if x != nil {
		return x.Issue
	}
	return ""
}

type Stage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Format: projects/{project}/rollouts/{rollout}/stages/{stage}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The id comes from the deployment config.
	// Format: UUID
	// Empty for legacy stages.
	Id            string  `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Environment   string  `protobuf:"bytes,4,opt,name=environment,proto3" json:"environment,omitempty"`
	Tasks         []*Task `protobuf:"bytes,5,rep,name=tasks,proto3" json:"tasks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Stage) Reset() {
	*x = Stage{}
	mi := &file_v1_rollout_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Stage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stage) ProtoMessage() {}

func (x *Stage) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stage.ProtoReflect.Descriptor instead.
func (*Stage) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{16}
}

func (x *Stage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Stage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Stage) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *Stage) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

type Task struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Format: projects/{project}/rollouts/{rollout}/stages/{stage}/tasks/{task}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// A UUID4 string that uniquely identifies the Spec.
	// Could be empty if the rollout of the task does not have an associating plan.
	SpecId string `protobuf:"bytes,4,opt,name=spec_id,json=specId,proto3" json:"spec_id,omitempty"`
	// Status is the status of the task.
	Status        Task_Status `protobuf:"varint,5,opt,name=status,proto3,enum=bytebase.v1.Task_Status" json:"status,omitempty"`
	SkippedReason string      `protobuf:"bytes,15,opt,name=skipped_reason,json=skippedReason,proto3" json:"skipped_reason,omitempty"`
	Type          Task_Type   `protobuf:"varint,6,opt,name=type,proto3,enum=bytebase.v1.Task_Type" json:"type,omitempty"`
	// Format: instances/{instance} if the task is DatabaseCreate.
	// Format: instances/{instance}/databases/{database}
	Target string `protobuf:"bytes,8,opt,name=target,proto3" json:"target,omitempty"`
	// Types that are valid to be assigned to Payload:
	//
	//	*Task_DatabaseCreate_
	//	*Task_DatabaseSchemaBaseline_
	//	*Task_DatabaseSchemaUpdate_
	//	*Task_DatabaseDataUpdate_
	//	*Task_DatabaseDataExport_
	Payload       isTask_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Task) Reset() {
	*x = Task{}
	mi := &file_v1_rollout_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{17}
}

func (x *Task) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Task) GetSpecId() string {
	if x != nil {
		return x.SpecId
	}
	return ""
}

func (x *Task) GetStatus() Task_Status {
	if x != nil {
		return x.Status
	}
	return Task_STATUS_UNSPECIFIED
}

func (x *Task) GetSkippedReason() string {
	if x != nil {
		return x.SkippedReason
	}
	return ""
}

func (x *Task) GetType() Task_Type {
	if x != nil {
		return x.Type
	}
	return Task_TYPE_UNSPECIFIED
}

func (x *Task) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *Task) GetPayload() isTask_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *Task) GetDatabaseCreate() *Task_DatabaseCreate {
	if x != nil {
		if x, ok := x.Payload.(*Task_DatabaseCreate_); ok {
			return x.DatabaseCreate
		}
	}
	return nil
}

func (x *Task) GetDatabaseSchemaBaseline() *Task_DatabaseSchemaBaseline {
	if x != nil {
		if x, ok := x.Payload.(*Task_DatabaseSchemaBaseline_); ok {
			return x.DatabaseSchemaBaseline
		}
	}
	return nil
}

func (x *Task) GetDatabaseSchemaUpdate() *Task_DatabaseSchemaUpdate {
	if x != nil {
		if x, ok := x.Payload.(*Task_DatabaseSchemaUpdate_); ok {
			return x.DatabaseSchemaUpdate
		}
	}
	return nil
}

func (x *Task) GetDatabaseDataUpdate() *Task_DatabaseDataUpdate {
	if x != nil {
		if x, ok := x.Payload.(*Task_DatabaseDataUpdate_); ok {
			return x.DatabaseDataUpdate
		}
	}
	return nil
}

func (x *Task) GetDatabaseDataExport() *Task_DatabaseDataExport {
	if x != nil {
		if x, ok := x.Payload.(*Task_DatabaseDataExport_); ok {
			return x.DatabaseDataExport
		}
	}
	return nil
}

type isTask_Payload interface {
	isTask_Payload()
}

type Task_DatabaseCreate_ struct {
	DatabaseCreate *Task_DatabaseCreate `protobuf:"bytes,9,opt,name=database_create,json=databaseCreate,proto3,oneof"`
}

type Task_DatabaseSchemaBaseline_ struct {
	DatabaseSchemaBaseline *Task_DatabaseSchemaBaseline `protobuf:"bytes,10,opt,name=database_schema_baseline,json=databaseSchemaBaseline,proto3,oneof"`
}

type Task_DatabaseSchemaUpdate_ struct {
	DatabaseSchemaUpdate *Task_DatabaseSchemaUpdate `protobuf:"bytes,11,opt,name=database_schema_update,json=databaseSchemaUpdate,proto3,oneof"`
}

type Task_DatabaseDataUpdate_ struct {
	DatabaseDataUpdate *Task_DatabaseDataUpdate `protobuf:"bytes,12,opt,name=database_data_update,json=databaseDataUpdate,proto3,oneof"`
}

type Task_DatabaseDataExport_ struct {
	DatabaseDataExport *Task_DatabaseDataExport `protobuf:"bytes,16,opt,name=database_data_export,json=databaseDataExport,proto3,oneof"`
}

func (*Task_DatabaseCreate_) isTask_Payload() {}

func (*Task_DatabaseSchemaBaseline_) isTask_Payload() {}

func (*Task_DatabaseSchemaUpdate_) isTask_Payload() {}

func (*Task_DatabaseDataUpdate_) isTask_Payload() {}

func (*Task_DatabaseDataExport_) isTask_Payload() {}

type TaskRun struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Format: projects/{project}/rollouts/{rollout}/stages/{stage}/tasks/{task}/taskRuns/{taskRun}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Format: user/hello@world.com
	Creator    string                 `protobuf:"bytes,3,opt,name=creator,proto3" json:"creator,omitempty"`
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Status     TaskRun_Status         `protobuf:"varint,8,opt,name=status,proto3,enum=bytebase.v1.TaskRun_Status" json:"status,omitempty"`
	// Below are the results of a task run.
	Detail string `protobuf:"bytes,9,opt,name=detail,proto3" json:"detail,omitempty"`
	// The resource name of the changelog.
	// Format: instances/{instance}/databases/{database}/changelogs/{changelog}
	Changelog           string                      `protobuf:"bytes,20,opt,name=changelog,proto3" json:"changelog,omitempty"`
	SchemaVersion       string                      `protobuf:"bytes,11,opt,name=schema_version,json=schemaVersion,proto3" json:"schema_version,omitempty"`
	StartTime           *timestamppb.Timestamp      `protobuf:"bytes,14,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	ExportArchiveStatus TaskRun_ExportArchiveStatus `protobuf:"varint,16,opt,name=export_archive_status,json=exportArchiveStatus,proto3,enum=bytebase.v1.TaskRun_ExportArchiveStatus" json:"export_archive_status,omitempty"`
	// The prior backup detail that will be used to rollback the task run.
	PriorBackupDetail *TaskRun_PriorBackupDetail `protobuf:"bytes,17,opt,name=prior_backup_detail,json=priorBackupDetail,proto3" json:"prior_backup_detail,omitempty"`
	SchedulerInfo     *TaskRun_SchedulerInfo     `protobuf:"bytes,18,opt,name=scheduler_info,json=schedulerInfo,proto3" json:"scheduler_info,omitempty"`
	// Format: projects/{project}/sheets/{sheet}
	Sheet         string `protobuf:"bytes,19,opt,name=sheet,proto3" json:"sheet,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskRun) Reset() {
	*x = TaskRun{}
	mi := &file_v1_rollout_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRun) ProtoMessage() {}

func (x *TaskRun) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRun.ProtoReflect.Descriptor instead.
func (*TaskRun) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{18}
}

func (x *TaskRun) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskRun) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *TaskRun) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *TaskRun) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *TaskRun) GetStatus() TaskRun_Status {
	if x != nil {
		return x.Status
	}
	return TaskRun_STATUS_UNSPECIFIED
}

func (x *TaskRun) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

func (x *TaskRun) GetChangelog() string {
	if x != nil {
		return x.Changelog
	}
	return ""
}

func (x *TaskRun) GetSchemaVersion() string {
	if x != nil {
		return x.SchemaVersion
	}
	return ""
}

func (x *TaskRun) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *TaskRun) GetExportArchiveStatus() TaskRun_ExportArchiveStatus {
	if x != nil {
		return x.ExportArchiveStatus
	}
	return TaskRun_EXPORT_ARCHIVE_STATUS_UNSPECIFIED
}

func (x *TaskRun) GetPriorBackupDetail() *TaskRun_PriorBackupDetail {
	if x != nil {
		return x.PriorBackupDetail
	}
	return nil
}

func (x *TaskRun) GetSchedulerInfo() *TaskRun_SchedulerInfo {
	if x != nil {
		return x.SchedulerInfo
	}
	return nil
}

func (x *TaskRun) GetSheet() string {
	if x != nil {
		return x.Sheet
	}
	return ""
}

type TaskRunLog struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Format: projects/{project}/rollouts/{rollout}/stages/{stage}/tasks/{task}/taskRuns/{taskRun}/log
	Name          string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Entries       []*TaskRunLogEntry `protobuf:"bytes,2,rep,name=entries,proto3" json:"entries,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskRunLog) Reset() {
	*x = TaskRunLog{}
	mi := &file_v1_rollout_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskRunLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRunLog) ProtoMessage() {}

func (x *TaskRunLog) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRunLog.ProtoReflect.Descriptor instead.
func (*TaskRunLog) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{19}
}

func (x *TaskRunLog) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskRunLog) GetEntries() []*TaskRunLogEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type TaskRunLogEntry struct {
	state               protoimpl.MessageState               `protogen:"open.v1"`
	Type                TaskRunLogEntry_Type                 `protobuf:"varint,1,opt,name=type,proto3,enum=bytebase.v1.TaskRunLogEntry_Type" json:"type,omitempty"`
	LogTime             *timestamppb.Timestamp               `protobuf:"bytes,6,opt,name=log_time,json=logTime,proto3" json:"log_time,omitempty"`
	DeployId            string                               `protobuf:"bytes,12,opt,name=deploy_id,json=deployId,proto3" json:"deploy_id,omitempty"`
	SchemaDump          *TaskRunLogEntry_SchemaDump          `protobuf:"bytes,2,opt,name=schema_dump,json=schemaDump,proto3" json:"schema_dump,omitempty"`
	CommandExecute      *TaskRunLogEntry_CommandExecute      `protobuf:"bytes,3,opt,name=command_execute,json=commandExecute,proto3" json:"command_execute,omitempty"`
	DatabaseSync        *TaskRunLogEntry_DatabaseSync        `protobuf:"bytes,4,opt,name=database_sync,json=databaseSync,proto3" json:"database_sync,omitempty"`
	TaskRunStatusUpdate *TaskRunLogEntry_TaskRunStatusUpdate `protobuf:"bytes,5,opt,name=task_run_status_update,json=taskRunStatusUpdate,proto3" json:"task_run_status_update,omitempty"`
	TransactionControl  *TaskRunLogEntry_TransactionControl  `protobuf:"bytes,7,opt,name=transaction_control,json=transactionControl,proto3" json:"transaction_control,omitempty"`
	PriorBackup         *TaskRunLogEntry_PriorBackup         `protobuf:"bytes,8,opt,name=prior_backup,json=priorBackup,proto3" json:"prior_backup,omitempty"`
	RetryInfo           *TaskRunLogEntry_RetryInfo           `protobuf:"bytes,9,opt,name=retry_info,json=retryInfo,proto3" json:"retry_info,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *TaskRunLogEntry) Reset() {
	*x = TaskRunLogEntry{}
	mi := &file_v1_rollout_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskRunLogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRunLogEntry) ProtoMessage() {}

func (x *TaskRunLogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRunLogEntry.ProtoReflect.Descriptor instead.
func (*TaskRunLogEntry) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{20}
}

func (x *TaskRunLogEntry) GetType() TaskRunLogEntry_Type {
	if x != nil {
		return x.Type
	}
	return TaskRunLogEntry_TYPE_UNSPECIFIED
}

func (x *TaskRunLogEntry) GetLogTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LogTime
	}
	return nil
}

func (x *TaskRunLogEntry) GetDeployId() string {
	if x != nil {
		return x.DeployId
	}
	return ""
}

func (x *TaskRunLogEntry) GetSchemaDump() *TaskRunLogEntry_SchemaDump {
	if x != nil {
		return x.SchemaDump
	}
	return nil
}

func (x *TaskRunLogEntry) GetCommandExecute() *TaskRunLogEntry_CommandExecute {
	if x != nil {
		return x.CommandExecute
	}
	return nil
}

func (x *TaskRunLogEntry) GetDatabaseSync() *TaskRunLogEntry_DatabaseSync {
	if x != nil {
		return x.DatabaseSync
	}
	return nil
}

func (x *TaskRunLogEntry) GetTaskRunStatusUpdate() *TaskRunLogEntry_TaskRunStatusUpdate {
	if x != nil {
		return x.TaskRunStatusUpdate
	}
	return nil
}

func (x *TaskRunLogEntry) GetTransactionControl() *TaskRunLogEntry_TransactionControl {
	if x != nil {
		return x.TransactionControl
	}
	return nil
}

func (x *TaskRunLogEntry) GetPriorBackup() *TaskRunLogEntry_PriorBackup {
	if x != nil {
		return x.PriorBackup
	}
	return nil
}

func (x *TaskRunLogEntry) GetRetryInfo() *TaskRunLogEntry_RetryInfo {
	if x != nil {
		return x.RetryInfo
	}
	return nil
}

type GetTaskRunSessionRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Format: projects/{project}/rollouts/{rollout}/stages/{stage}/tasks/{task}/taskRuns/{taskRun}
	Parent        string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTaskRunSessionRequest) Reset() {
	*x = GetTaskRunSessionRequest{}
	mi := &file_v1_rollout_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTaskRunSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskRunSessionRequest) ProtoMessage() {}

func (x *GetTaskRunSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskRunSessionRequest.ProtoReflect.Descriptor instead.
func (*GetTaskRunSessionRequest) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{21}
}

func (x *GetTaskRunSessionRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

type TaskRunSession struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Format: projects/{project}/rollouts/{rollout}/stages/{stage}/tasks/{task}/taskRuns/{taskRun}/session
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are valid to be assigned to Session:
	//
	//	*TaskRunSession_Postgres_
	Session       isTaskRunSession_Session `protobuf_oneof:"session"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskRunSession) Reset() {
	*x = TaskRunSession{}
	mi := &file_v1_rollout_service_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskRunSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRunSession) ProtoMessage() {}

func (x *TaskRunSession) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRunSession.ProtoReflect.Descriptor instead.
func (*TaskRunSession) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{22}
}

func (x *TaskRunSession) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskRunSession) GetSession() isTaskRunSession_Session {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *TaskRunSession) GetPostgres() *TaskRunSession_Postgres {
	if x != nil {
		if x, ok := x.Session.(*TaskRunSession_Postgres_); ok {
			return x.Postgres
		}
	}
	return nil
}

type isTaskRunSession_Session interface {
	isTaskRunSession_Session()
}

type TaskRunSession_Postgres_ struct {
	Postgres *TaskRunSession_Postgres `protobuf:"bytes,2,opt,name=postgres,proto3,oneof"`
}

func (*TaskRunSession_Postgres_) isTaskRunSession_Session() {}

type PreviewTaskRunRollbackRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Format: projects/{project}/rollouts/{rollout}/stages/{stage}/tasks/{task}/taskRuns/{taskRun}
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PreviewTaskRunRollbackRequest) Reset() {
	*x = PreviewTaskRunRollbackRequest{}
	mi := &file_v1_rollout_service_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PreviewTaskRunRollbackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewTaskRunRollbackRequest) ProtoMessage() {}

func (x *PreviewTaskRunRollbackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewTaskRunRollbackRequest.ProtoReflect.Descriptor instead.
func (*PreviewTaskRunRollbackRequest) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{23}
}

func (x *PreviewTaskRunRollbackRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type PreviewTaskRunRollbackResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Statement     string                 `protobuf:"bytes,1,opt,name=statement,proto3" json:"statement,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PreviewTaskRunRollbackResponse) Reset() {
	*x = PreviewTaskRunRollbackResponse{}
	mi := &file_v1_rollout_service_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PreviewTaskRunRollbackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewTaskRunRollbackResponse) ProtoMessage() {}

func (x *PreviewTaskRunRollbackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewTaskRunRollbackResponse.ProtoReflect.Descriptor instead.
func (*PreviewTaskRunRollbackResponse) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{24}
}

func (x *PreviewTaskRunRollbackResponse) GetStatement() string {
	if x != nil {
		return x.Statement
	}
	return ""
}

type Task_DatabaseCreate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The project owning the database.
	// Format: projects/{project}
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// database name
	Database string `protobuf:"bytes,2,opt,name=database,proto3" json:"database,omitempty"`
	// table name
	Table string `protobuf:"bytes,3,opt,name=table,proto3" json:"table,omitempty"`
	// Format: projects/{project}/sheets/{sheet}
	Sheet         string `protobuf:"bytes,4,opt,name=sheet,proto3" json:"sheet,omitempty"`
	CharacterSet  string `protobuf:"bytes,5,opt,name=character_set,json=characterSet,proto3" json:"character_set,omitempty"`
	Collation     string `protobuf:"bytes,6,opt,name=collation,proto3" json:"collation,omitempty"`
	Environment   string `protobuf:"bytes,7,opt,name=environment,proto3" json:"environment,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Task_DatabaseCreate) Reset() {
	*x = Task_DatabaseCreate{}
	mi := &file_v1_rollout_service_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Task_DatabaseCreate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task_DatabaseCreate) ProtoMessage() {}

func (x *Task_DatabaseCreate) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task_DatabaseCreate.ProtoReflect.Descriptor instead.
func (*Task_DatabaseCreate) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{17, 0}
}

func (x *Task_DatabaseCreate) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *Task_DatabaseCreate) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *Task_DatabaseCreate) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *Task_DatabaseCreate) GetSheet() string {
	if x != nil {
		return x.Sheet
	}
	return ""
}

func (x *Task_DatabaseCreate) GetCharacterSet() string {
	if x != nil {
		return x.CharacterSet
	}
	return ""
}

func (x *Task_DatabaseCreate) GetCollation() string {
	if x != nil {
		return x.Collation
	}
	return ""
}

func (x *Task_DatabaseCreate) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

type Task_DatabaseSchemaBaseline struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SchemaVersion string                 `protobuf:"bytes,1,opt,name=schema_version,json=schemaVersion,proto3" json:"schema_version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Task_DatabaseSchemaBaseline) Reset() {
	*x = Task_DatabaseSchemaBaseline{}
	mi := &file_v1_rollout_service_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Task_DatabaseSchemaBaseline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task_DatabaseSchemaBaseline) ProtoMessage() {}

func (x *Task_DatabaseSchemaBaseline) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task_DatabaseSchemaBaseline.ProtoReflect.Descriptor instead.
func (*Task_DatabaseSchemaBaseline) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{17, 1}
}

func (x *Task_DatabaseSchemaBaseline) GetSchemaVersion() string {
	if x != nil {
		return x.SchemaVersion
	}
	return ""
}

type Task_DatabaseSchemaUpdate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Format: projects/{project}/sheets/{sheet}
	Sheet         string `protobuf:"bytes,1,opt,name=sheet,proto3" json:"sheet,omitempty"`
	SchemaVersion string `protobuf:"bytes,2,opt,name=schema_version,json=schemaVersion,proto3" json:"schema_version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Task_DatabaseSchemaUpdate) Reset() {
	*x = Task_DatabaseSchemaUpdate{}
	mi := &file_v1_rollout_service_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Task_DatabaseSchemaUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task_DatabaseSchemaUpdate) ProtoMessage() {}

func (x *Task_DatabaseSchemaUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task_DatabaseSchemaUpdate.ProtoReflect.Descriptor instead.
func (*Task_DatabaseSchemaUpdate) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{17, 2}
}

func (x *Task_DatabaseSchemaUpdate) GetSheet() string {
	if x != nil {
		return x.Sheet
	}
	return ""
}

func (x *Task_DatabaseSchemaUpdate) GetSchemaVersion() string {
	if x != nil {
		return x.SchemaVersion
	}
	return ""
}

type Task_DatabaseDataUpdate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Format: projects/{project}/sheets/{sheet}
	Sheet         string `protobuf:"bytes,1,opt,name=sheet,proto3" json:"sheet,omitempty"`
	SchemaVersion string `protobuf:"bytes,2,opt,name=schema_version,json=schemaVersion,proto3" json:"schema_version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Task_DatabaseDataUpdate) Reset() {
	*x = Task_DatabaseDataUpdate{}
	mi := &file_v1_rollout_service_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Task_DatabaseDataUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task_DatabaseDataUpdate) ProtoMessage() {}

func (x *Task_DatabaseDataUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task_DatabaseDataUpdate.ProtoReflect.Descriptor instead.
func (*Task_DatabaseDataUpdate) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{17, 3}
}

func (x *Task_DatabaseDataUpdate) GetSheet() string {
	if x != nil {
		return x.Sheet
	}
	return ""
}

func (x *Task_DatabaseDataUpdate) GetSchemaVersion() string {
	if x != nil {
		return x.SchemaVersion
	}
	return ""
}

type Task_DatabaseDataExport struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The resource name of the target.
	// Format: instances/{instance-id}/databases/{database-name}
	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	// The resource name of the sheet.
	// Format: projects/{project}/sheets/{sheet}
	Sheet string `protobuf:"bytes,2,opt,name=sheet,proto3" json:"sheet,omitempty"`
	// The format of the exported file.
	Format ExportFormat `protobuf:"varint,3,opt,name=format,proto3,enum=bytebase.v1.ExportFormat" json:"format,omitempty"`
	// The zip password provide by users.
	// Leave it empty if no needs to encrypt the zip file.
	Password      *string `protobuf:"bytes,4,opt,name=password,proto3,oneof" json:"password,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Task_DatabaseDataExport) Reset() {
	*x = Task_DatabaseDataExport{}
	mi := &file_v1_rollout_service_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Task_DatabaseDataExport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task_DatabaseDataExport) ProtoMessage() {}

func (x *Task_DatabaseDataExport) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task_DatabaseDataExport.ProtoReflect.Descriptor instead.
func (*Task_DatabaseDataExport) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{17, 4}
}

func (x *Task_DatabaseDataExport) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *Task_DatabaseDataExport) GetSheet() string {
	if x != nil {
		return x.Sheet
	}
	return ""
}

func (x *Task_DatabaseDataExport) GetFormat() ExportFormat {
	if x != nil {
		return x.Format
	}
	return ExportFormat_FORMAT_UNSPECIFIED
}

func (x *Task_DatabaseDataExport) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

type TaskRun_PriorBackupDetail struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	Items         []*TaskRun_PriorBackupDetail_Item `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskRun_PriorBackupDetail) Reset() {
	*x = TaskRun_PriorBackupDetail{}
	mi := &file_v1_rollout_service_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskRun_PriorBackupDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRun_PriorBackupDetail) ProtoMessage() {}

func (x *TaskRun_PriorBackupDetail) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRun_PriorBackupDetail.ProtoReflect.Descriptor instead.
func (*TaskRun_PriorBackupDetail) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{18, 0}
}

func (x *TaskRun_PriorBackupDetail) GetItems() []*TaskRun_PriorBackupDetail_Item {
	if x != nil {
		return x.Items
	}
	return nil
}

type TaskRun_SchedulerInfo struct {
	state         protoimpl.MessageState              `protogen:"open.v1"`
	ReportTime    *timestamppb.Timestamp              `protobuf:"bytes,1,opt,name=report_time,json=reportTime,proto3" json:"report_time,omitempty"`
	WaitingCause  *TaskRun_SchedulerInfo_WaitingCause `protobuf:"bytes,2,opt,name=waiting_cause,json=waitingCause,proto3" json:"waiting_cause,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskRun_SchedulerInfo) Reset() {
	*x = TaskRun_SchedulerInfo{}
	mi := &file_v1_rollout_service_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskRun_SchedulerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRun_SchedulerInfo) ProtoMessage() {}

func (x *TaskRun_SchedulerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRun_SchedulerInfo.ProtoReflect.Descriptor instead.
func (*TaskRun_SchedulerInfo) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{18, 1}
}

func (x *TaskRun_SchedulerInfo) GetReportTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ReportTime
	}
	return nil
}

func (x *TaskRun_SchedulerInfo) GetWaitingCause() *TaskRun_SchedulerInfo_WaitingCause {
	if x != nil {
		return x.WaitingCause
	}
	return nil
}

type TaskRun_PriorBackupDetail_Item struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The original table information.
	SourceTable *TaskRun_PriorBackupDetail_Item_Table `protobuf:"bytes,1,opt,name=source_table,json=sourceTable,proto3" json:"source_table,omitempty"`
	// The target backup table information.
	TargetTable   *TaskRun_PriorBackupDetail_Item_Table `protobuf:"bytes,2,opt,name=target_table,json=targetTable,proto3" json:"target_table,omitempty"`
	StartPosition *Position                             `protobuf:"bytes,3,opt,name=start_position,json=startPosition,proto3" json:"start_position,omitempty"`
	EndPosition   *Position                             `protobuf:"bytes,4,opt,name=end_position,json=endPosition,proto3" json:"end_position,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskRun_PriorBackupDetail_Item) Reset() {
	*x = TaskRun_PriorBackupDetail_Item{}
	mi := &file_v1_rollout_service_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskRun_PriorBackupDetail_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRun_PriorBackupDetail_Item) ProtoMessage() {}

func (x *TaskRun_PriorBackupDetail_Item) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRun_PriorBackupDetail_Item.ProtoReflect.Descriptor instead.
func (*TaskRun_PriorBackupDetail_Item) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{18, 0, 0}
}

func (x *TaskRun_PriorBackupDetail_Item) GetSourceTable() *TaskRun_PriorBackupDetail_Item_Table {
	if x != nil {
		return x.SourceTable
	}
	return nil
}

func (x *TaskRun_PriorBackupDetail_Item) GetTargetTable() *TaskRun_PriorBackupDetail_Item_Table {
	if x != nil {
		return x.TargetTable
	}
	return nil
}

func (x *TaskRun_PriorBackupDetail_Item) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *TaskRun_PriorBackupDetail_Item) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

type TaskRun_PriorBackupDetail_Item_Table struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The database information.
	// Format: instances/{instance}/databases/{database}
	Database      string `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"`
	Schema        string `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
	Table         string `protobuf:"bytes,3,opt,name=table,proto3" json:"table,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskRun_PriorBackupDetail_Item_Table) Reset() {
	*x = TaskRun_PriorBackupDetail_Item_Table{}
	mi := &file_v1_rollout_service_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskRun_PriorBackupDetail_Item_Table) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRun_PriorBackupDetail_Item_Table) ProtoMessage() {}

func (x *TaskRun_PriorBackupDetail_Item_Table) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRun_PriorBackupDetail_Item_Table.ProtoReflect.Descriptor instead.
func (*TaskRun_PriorBackupDetail_Item_Table) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{18, 0, 0, 0}
}

func (x *TaskRun_PriorBackupDetail_Item_Table) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *TaskRun_PriorBackupDetail_Item_Table) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *TaskRun_PriorBackupDetail_Item_Table) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

type TaskRun_SchedulerInfo_WaitingCause struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Cause:
	//
	//	*TaskRun_SchedulerInfo_WaitingCause_ConnectionLimit
	//	*TaskRun_SchedulerInfo_WaitingCause_Task_
	//	*TaskRun_SchedulerInfo_WaitingCause_ParallelTasksLimit
	Cause         isTaskRun_SchedulerInfo_WaitingCause_Cause `protobuf_oneof:"cause"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskRun_SchedulerInfo_WaitingCause) Reset() {
	*x = TaskRun_SchedulerInfo_WaitingCause{}
	mi := &file_v1_rollout_service_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskRun_SchedulerInfo_WaitingCause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRun_SchedulerInfo_WaitingCause) ProtoMessage() {}

func (x *TaskRun_SchedulerInfo_WaitingCause) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRun_SchedulerInfo_WaitingCause.ProtoReflect.Descriptor instead.
func (*TaskRun_SchedulerInfo_WaitingCause) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{18, 1, 0}
}

func (x *TaskRun_SchedulerInfo_WaitingCause) GetCause() isTaskRun_SchedulerInfo_WaitingCause_Cause {
	if x != nil {
		return x.Cause
	}
	return nil
}

func (x *TaskRun_SchedulerInfo_WaitingCause) GetConnectionLimit() bool {
	if x != nil {
		if x, ok := x.Cause.(*TaskRun_SchedulerInfo_WaitingCause_ConnectionLimit); ok {
			return x.ConnectionLimit
		}
	}
	return false
}

func (x *TaskRun_SchedulerInfo_WaitingCause) GetTask() *TaskRun_SchedulerInfo_WaitingCause_Task {
	if x != nil {
		if x, ok := x.Cause.(*TaskRun_SchedulerInfo_WaitingCause_Task_); ok {
			return x.Task
		}
	}
	return nil
}

func (x *TaskRun_SchedulerInfo_WaitingCause) GetParallelTasksLimit() bool {
	if x != nil {
		if x, ok := x.Cause.(*TaskRun_SchedulerInfo_WaitingCause_ParallelTasksLimit); ok {
			return x.ParallelTasksLimit
		}
	}
	return false
}

type isTaskRun_SchedulerInfo_WaitingCause_Cause interface {
	isTaskRun_SchedulerInfo_WaitingCause_Cause()
}

type TaskRun_SchedulerInfo_WaitingCause_ConnectionLimit struct {
	ConnectionLimit bool `protobuf:"varint,1,opt,name=connection_limit,json=connectionLimit,proto3,oneof"`
}

type TaskRun_SchedulerInfo_WaitingCause_Task_ struct {
	Task *TaskRun_SchedulerInfo_WaitingCause_Task `protobuf:"bytes,2,opt,name=task,proto3,oneof"`
}

type TaskRun_SchedulerInfo_WaitingCause_ParallelTasksLimit struct {
	ParallelTasksLimit bool `protobuf:"varint,3,opt,name=parallel_tasks_limit,json=parallelTasksLimit,proto3,oneof"`
}

func (*TaskRun_SchedulerInfo_WaitingCause_ConnectionLimit) isTaskRun_SchedulerInfo_WaitingCause_Cause() {
}

func (*TaskRun_SchedulerInfo_WaitingCause_Task_) isTaskRun_SchedulerInfo_WaitingCause_Cause() {}

func (*TaskRun_SchedulerInfo_WaitingCause_ParallelTasksLimit) isTaskRun_SchedulerInfo_WaitingCause_Cause() {
}

type TaskRun_SchedulerInfo_WaitingCause_Task struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Format: projects/{project}/rollouts/{rollout}/stages/{stage}/tasks/{task}
	Task string `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	// Format: projects/{project}/issues/{issue}
	Issue         string `protobuf:"bytes,2,opt,name=issue,proto3" json:"issue,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskRun_SchedulerInfo_WaitingCause_Task) Reset() {
	*x = TaskRun_SchedulerInfo_WaitingCause_Task{}
	mi := &file_v1_rollout_service_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskRun_SchedulerInfo_WaitingCause_Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRun_SchedulerInfo_WaitingCause_Task) ProtoMessage() {}

func (x *TaskRun_SchedulerInfo_WaitingCause_Task) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRun_SchedulerInfo_WaitingCause_Task.ProtoReflect.Descriptor instead.
func (*TaskRun_SchedulerInfo_WaitingCause_Task) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{18, 1, 0, 0}
}

func (x *TaskRun_SchedulerInfo_WaitingCause_Task) GetTask() string {
	if x != nil {
		return x.Task
	}
	return ""
}

func (x *TaskRun_SchedulerInfo_WaitingCause_Task) GetIssue() string {
	if x != nil {
		return x.Issue
	}
	return ""
}

type TaskRunLogEntry_SchemaDump struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StartTime     *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime       *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Error         string                 `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskRunLogEntry_SchemaDump) Reset() {
	*x = TaskRunLogEntry_SchemaDump{}
	mi := &file_v1_rollout_service_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskRunLogEntry_SchemaDump) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRunLogEntry_SchemaDump) ProtoMessage() {}

func (x *TaskRunLogEntry_SchemaDump) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRunLogEntry_SchemaDump.ProtoReflect.Descriptor instead.
func (*TaskRunLogEntry_SchemaDump) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{20, 0}
}

func (x *TaskRunLogEntry_SchemaDump) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *TaskRunLogEntry_SchemaDump) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *TaskRunLogEntry_SchemaDump) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type TaskRunLogEntry_CommandExecute struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	LogTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=log_time,json=logTime,proto3" json:"log_time,omitempty"`
	// The indexes of the executed commands.
	CommandIndexes []int32                                         `protobuf:"varint,2,rep,packed,name=command_indexes,json=commandIndexes,proto3" json:"command_indexes,omitempty"`
	Response       *TaskRunLogEntry_CommandExecute_CommandResponse `protobuf:"bytes,3,opt,name=response,proto3" json:"response,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TaskRunLogEntry_CommandExecute) Reset() {
	*x = TaskRunLogEntry_CommandExecute{}
	mi := &file_v1_rollout_service_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskRunLogEntry_CommandExecute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRunLogEntry_CommandExecute) ProtoMessage() {}

func (x *TaskRunLogEntry_CommandExecute) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRunLogEntry_CommandExecute.ProtoReflect.Descriptor instead.
func (*TaskRunLogEntry_CommandExecute) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{20, 1}
}

func (x *TaskRunLogEntry_CommandExecute) GetLogTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LogTime
	}
	return nil
}

func (x *TaskRunLogEntry_CommandExecute) GetCommandIndexes() []int32 {
	if x != nil {
		return x.CommandIndexes
	}
	return nil
}

func (x *TaskRunLogEntry_CommandExecute) GetResponse() *TaskRunLogEntry_CommandExecute_CommandResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

type TaskRunLogEntry_DatabaseSync struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StartTime     *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime       *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Error         string                 `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskRunLogEntry_DatabaseSync) Reset() {
	*x = TaskRunLogEntry_DatabaseSync{}
	mi := &file_v1_rollout_service_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskRunLogEntry_DatabaseSync) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRunLogEntry_DatabaseSync) ProtoMessage() {}

func (x *TaskRunLogEntry_DatabaseSync) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRunLogEntry_DatabaseSync.ProtoReflect.Descriptor instead.
func (*TaskRunLogEntry_DatabaseSync) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{20, 2}
}

func (x *TaskRunLogEntry_DatabaseSync) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *TaskRunLogEntry_DatabaseSync) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *TaskRunLogEntry_DatabaseSync) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type TaskRunLogEntry_TaskRunStatusUpdate struct {
	state         protoimpl.MessageState                     `protogen:"open.v1"`
	Status        TaskRunLogEntry_TaskRunStatusUpdate_Status `protobuf:"varint,1,opt,name=status,proto3,enum=bytebase.v1.TaskRunLogEntry_TaskRunStatusUpdate_Status" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskRunLogEntry_TaskRunStatusUpdate) Reset() {
	*x = TaskRunLogEntry_TaskRunStatusUpdate{}
	mi := &file_v1_rollout_service_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskRunLogEntry_TaskRunStatusUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRunLogEntry_TaskRunStatusUpdate) ProtoMessage() {}

func (x *TaskRunLogEntry_TaskRunStatusUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRunLogEntry_TaskRunStatusUpdate.ProtoReflect.Descriptor instead.
func (*TaskRunLogEntry_TaskRunStatusUpdate) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{20, 3}
}

func (x *TaskRunLogEntry_TaskRunStatusUpdate) GetStatus() TaskRunLogEntry_TaskRunStatusUpdate_Status {
	if x != nil {
		return x.Status
	}
	return TaskRunLogEntry_TaskRunStatusUpdate_STATUS_UNSPECIFIED
}

type TaskRunLogEntry_TransactionControl struct {
	state         protoimpl.MessageState                  `protogen:"open.v1"`
	Type          TaskRunLogEntry_TransactionControl_Type `protobuf:"varint,1,opt,name=type,proto3,enum=bytebase.v1.TaskRunLogEntry_TransactionControl_Type" json:"type,omitempty"`
	Error         string                                  `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskRunLogEntry_TransactionControl) Reset() {
	*x = TaskRunLogEntry_TransactionControl{}
	mi := &file_v1_rollout_service_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskRunLogEntry_TransactionControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRunLogEntry_TransactionControl) ProtoMessage() {}

func (x *TaskRunLogEntry_TransactionControl) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRunLogEntry_TransactionControl.ProtoReflect.Descriptor instead.
func (*TaskRunLogEntry_TransactionControl) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{20, 4}
}

func (x *TaskRunLogEntry_TransactionControl) GetType() TaskRunLogEntry_TransactionControl_Type {
	if x != nil {
		return x.Type
	}
	return TaskRunLogEntry_TransactionControl_TYPE_UNSPECIFIED
}

func (x *TaskRunLogEntry_TransactionControl) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type TaskRunLogEntry_PriorBackup struct {
	state             protoimpl.MessageState     `protogen:"open.v1"`
	StartTime         *timestamppb.Timestamp     `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime           *timestamppb.Timestamp     `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	PriorBackupDetail *TaskRun_PriorBackupDetail `protobuf:"bytes,3,opt,name=prior_backup_detail,json=priorBackupDetail,proto3" json:"prior_backup_detail,omitempty"`
	Error             string                     `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *TaskRunLogEntry_PriorBackup) Reset() {
	*x = TaskRunLogEntry_PriorBackup{}
	mi := &file_v1_rollout_service_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskRunLogEntry_PriorBackup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRunLogEntry_PriorBackup) ProtoMessage() {}

func (x *TaskRunLogEntry_PriorBackup) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRunLogEntry_PriorBackup.ProtoReflect.Descriptor instead.
func (*TaskRunLogEntry_PriorBackup) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{20, 5}
}

func (x *TaskRunLogEntry_PriorBackup) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *TaskRunLogEntry_PriorBackup) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *TaskRunLogEntry_PriorBackup) GetPriorBackupDetail() *TaskRun_PriorBackupDetail {
	if x != nil {
		return x.PriorBackupDetail
	}
	return nil
}

func (x *TaskRunLogEntry_PriorBackup) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type TaskRunLogEntry_RetryInfo struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Error          string                 `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	RetryCount     int32                  `protobuf:"varint,2,opt,name=retry_count,json=retryCount,proto3" json:"retry_count,omitempty"`
	MaximumRetries int32                  `protobuf:"varint,3,opt,name=maximum_retries,json=maximumRetries,proto3" json:"maximum_retries,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TaskRunLogEntry_RetryInfo) Reset() {
	*x = TaskRunLogEntry_RetryInfo{}
	mi := &file_v1_rollout_service_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskRunLogEntry_RetryInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRunLogEntry_RetryInfo) ProtoMessage() {}

func (x *TaskRunLogEntry_RetryInfo) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRunLogEntry_RetryInfo.ProtoReflect.Descriptor instead.
func (*TaskRunLogEntry_RetryInfo) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{20, 6}
}

func (x *TaskRunLogEntry_RetryInfo) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *TaskRunLogEntry_RetryInfo) GetRetryCount() int32 {
	if x != nil {
		return x.RetryCount
	}
	return 0
}

func (x *TaskRunLogEntry_RetryInfo) GetMaximumRetries() int32 {
	if x != nil {
		return x.MaximumRetries
	}
	return 0
}

type TaskRunLogEntry_CommandExecute_CommandResponse struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	LogTime      *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=log_time,json=logTime,proto3" json:"log_time,omitempty"`
	Error        string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	AffectedRows int32                  `protobuf:"varint,3,opt,name=affected_rows,json=affectedRows,proto3" json:"affected_rows,omitempty"`
	// `all_affected_rows` is the affected rows of each command.
	// `all_affected_rows` may be unavailable if the database driver doesn't support it. Caller should fallback to `affected_rows` in that case.
	AllAffectedRows []int32 `protobuf:"varint,4,rep,packed,name=all_affected_rows,json=allAffectedRows,proto3" json:"all_affected_rows,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TaskRunLogEntry_CommandExecute_CommandResponse) Reset() {
	*x = TaskRunLogEntry_CommandExecute_CommandResponse{}
	mi := &file_v1_rollout_service_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskRunLogEntry_CommandExecute_CommandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRunLogEntry_CommandExecute_CommandResponse) ProtoMessage() {}

func (x *TaskRunLogEntry_CommandExecute_CommandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRunLogEntry_CommandExecute_CommandResponse.ProtoReflect.Descriptor instead.
func (*TaskRunLogEntry_CommandExecute_CommandResponse) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{20, 1, 0}
}

func (x *TaskRunLogEntry_CommandExecute_CommandResponse) GetLogTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LogTime
	}
	return nil
}

func (x *TaskRunLogEntry_CommandExecute_CommandResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *TaskRunLogEntry_CommandExecute_CommandResponse) GetAffectedRows() int32 {
	if x != nil {
		return x.AffectedRows
	}
	return 0
}

func (x *TaskRunLogEntry_CommandExecute_CommandResponse) GetAllAffectedRows() []int32 {
	if x != nil {
		return x.AllAffectedRows
	}
	return nil
}

type TaskRunSession_Postgres struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// `session` is the session of the task run executing commands.
	Session *TaskRunSession_Postgres_Session `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	// `blocking_sessions` block `session`.
	BlockingSessions []*TaskRunSession_Postgres_Session `protobuf:"bytes,2,rep,name=blocking_sessions,json=blockingSessions,proto3" json:"blocking_sessions,omitempty"`
	// `blocked_sessions` are blocked by `session`.
	BlockedSessions []*TaskRunSession_Postgres_Session `protobuf:"bytes,3,rep,name=blocked_sessions,json=blockedSessions,proto3" json:"blocked_sessions,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TaskRunSession_Postgres) Reset() {
	*x = TaskRunSession_Postgres{}
	mi := &file_v1_rollout_service_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskRunSession_Postgres) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRunSession_Postgres) ProtoMessage() {}

func (x *TaskRunSession_Postgres) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRunSession_Postgres.ProtoReflect.Descriptor instead.
func (*TaskRunSession_Postgres) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{22, 0}
}

func (x *TaskRunSession_Postgres) GetSession() *TaskRunSession_Postgres_Session {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *TaskRunSession_Postgres) GetBlockingSessions() []*TaskRunSession_Postgres_Session {
	if x != nil {
		return x.BlockingSessions
	}
	return nil
}

func (x *TaskRunSession_Postgres) GetBlockedSessions() []*TaskRunSession_Postgres_Session {
	if x != nil {
		return x.BlockedSessions
	}
	return nil
}

// Read from `pg_stat_activity`
type TaskRunSession_Postgres_Session struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Pid             string                 `protobuf:"bytes,1,opt,name=pid,proto3" json:"pid,omitempty"`
	BlockedByPids   []string               `protobuf:"bytes,2,rep,name=blocked_by_pids,json=blockedByPids,proto3" json:"blocked_by_pids,omitempty"`
	Query           string                 `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
	State           *string                `protobuf:"bytes,4,opt,name=state,proto3,oneof" json:"state,omitempty"`
	WaitEventType   *string                `protobuf:"bytes,5,opt,name=wait_event_type,json=waitEventType,proto3,oneof" json:"wait_event_type,omitempty"`
	WaitEvent       *string                `protobuf:"bytes,6,opt,name=wait_event,json=waitEvent,proto3,oneof" json:"wait_event,omitempty"`
	Datname         *string                `protobuf:"bytes,7,opt,name=datname,proto3,oneof" json:"datname,omitempty"`
	Usename         *string                `protobuf:"bytes,8,opt,name=usename,proto3,oneof" json:"usename,omitempty"`
	ApplicationName string                 `protobuf:"bytes,9,opt,name=application_name,json=applicationName,proto3" json:"application_name,omitempty"`
	ClientAddr      *string                `protobuf:"bytes,10,opt,name=client_addr,json=clientAddr,proto3,oneof" json:"client_addr,omitempty"`
	ClientPort      *string                `protobuf:"bytes,11,opt,name=client_port,json=clientPort,proto3,oneof" json:"client_port,omitempty"`
	BackendStart    *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=backend_start,json=backendStart,proto3" json:"backend_start,omitempty"`
	XactStart       *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=xact_start,json=xactStart,proto3,oneof" json:"xact_start,omitempty"`
	QueryStart      *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=query_start,json=queryStart,proto3,oneof" json:"query_start,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TaskRunSession_Postgres_Session) Reset() {
	*x = TaskRunSession_Postgres_Session{}
	mi := &file_v1_rollout_service_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskRunSession_Postgres_Session) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRunSession_Postgres_Session) ProtoMessage() {}

func (x *TaskRunSession_Postgres_Session) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRunSession_Postgres_Session.ProtoReflect.Descriptor instead.
func (*TaskRunSession_Postgres_Session) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{22, 0, 0}
}

func (x *TaskRunSession_Postgres_Session) GetPid() string {
	if x != nil {
		return x.Pid
	}
	return ""
}

func (x *TaskRunSession_Postgres_Session) GetBlockedByPids() []string {
	if x != nil {
		return x.BlockedByPids
	}
	return nil
}

func (x *TaskRunSession_Postgres_Session) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *TaskRunSession_Postgres_Session) GetState() string {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ""
}

func (x *TaskRunSession_Postgres_Session) GetWaitEventType() string {
	if x != nil && x.WaitEventType != nil {
		return *x.WaitEventType
	}
	return ""
}

func (x *TaskRunSession_Postgres_Session) GetWaitEvent() string {
	if x != nil && x.WaitEvent != nil {
		return *x.WaitEvent
	}
	return ""
}

func (x *TaskRunSession_Postgres_Session) GetDatname() string {
	if x != nil && x.Datname != nil {
		return *x.Datname
	}
	return ""
}

func (x *TaskRunSession_Postgres_Session) GetUsename() string {
	if x != nil && x.Usename != nil {
		return *x.Usename
	}
	return ""
}

func (x *TaskRunSession_Postgres_Session) GetApplicationName() string {
	if x != nil {
		return x.ApplicationName
	}
	return ""
}

func (x *TaskRunSession_Postgres_Session) GetClientAddr() string {
	if x != nil && x.ClientAddr != nil {
		return *x.ClientAddr
	}
	return ""
}

func (x *TaskRunSession_Postgres_Session) GetClientPort() string {
	if x != nil && x.ClientPort != nil {
		return *x.ClientPort
	}
	return ""
}

func (x *TaskRunSession_Postgres_Session) GetBackendStart() *timestamppb.Timestamp {
	if x != nil {
		return x.BackendStart
	}
	return nil
}

func (x *TaskRunSession_Postgres_Session) GetXactStart() *timestamppb.Timestamp {
	if x != nil {
		return x.XactStart
	}
	return nil
}

func (x *TaskRunSession_Postgres_Session) GetQueryStart() *timestamppb.Timestamp {
	if x != nil {
		return x.QueryStart
	}
	return nil
}

var File_v1_rollout_service_proto protoreflect.FileDescriptor

const file_v1_rollout_service_proto_rawDesc = "" +
	"\n" +
	"\x18v1/rollout_service.proto\x12\vbytebase.v1\x1a\x1cgoogle/api/annotations.proto\x1a\x17google/api/client.proto\x1a\x1fgoogle/api/field_behavior.proto\x1a\x19google/api/resource.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x13v1/annotation.proto\x1a\x0fv1/common.proto\x1a\x15v1/plan_service.proto\"\\\n" +
	"\x14BatchRunTasksRequest\x12\x16\n" +
	"\x06parent\x18\x01 \x01(\tR\x06parent\x12\x14\n" +
	"\x05tasks\x18\x02 \x03(\tR\x05tasks\x12\x16\n" +
	"\x06reason\x18\x03 \x01(\tR\x06reason\"\x17\n" +
	"\x15BatchRunTasksResponse\"]\n" +
	"\x15BatchSkipTasksRequest\x12\x16\n" +
	"\x06parent\x18\x01 \x01(\tR\x06parent\x12\x14\n" +
	"\x05tasks\x18\x02 \x03(\tR\x05tasks\x12\x16\n" +
	"\x06reason\x18\x03 \x01(\tR\x06reason\"\x18\n" +
	"\x16BatchSkipTasksResponse\"i\n" +
	"\x1aBatchCancelTaskRunsRequest\x12\x16\n" +
	"\x06parent\x18\x01 \x01(\tR\x06parent\x12\x1b\n" +
	"\ttask_runs\x18\x02 \x03(\tR\btaskRuns\x12\x16\n" +
	"\x06reason\x18\x03 \x01(\tR\x06reason\"\x1d\n" +
	"\x1bBatchCancelTaskRunsResponse\"F\n" +
	"\x11GetRolloutRequest\x121\n" +
	"\x04name\x18\x01 \x01(\tB\x1d\xe2A\x01\x02\xfaA\x16\n" +
	"\x14bytebase.com/RolloutR\x04name\"\x88\x01\n" +
	"\x13ListRolloutsRequest\x125\n" +
	"\x06parent\x18\x01 \x01(\tB\x1d\xe2A\x01\x02\xfaA\x16\n" +
	"\x14bytebase.com/ProjectR\x06parent\x12\x1b\n" +
	"\tpage_size\x18\x02 \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tR\tpageToken\"p\n" +
	"\x14ListRolloutsResponse\x120\n" +
	"\brollouts\x18\x01 \x03(\v2\x14.bytebase.v1.RolloutR\brollouts\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"\xd0\x01\n" +
	"\x14CreateRolloutRequest\x125\n" +
	"\x06parent\x18\x01 \x01(\tB\x1d\xe2A\x01\x02\xfaA\x16\n" +
	"\x14bytebase.com/ProjectR\x06parent\x124\n" +
	"\arollout\x18\x02 \x01(\v2\x14.bytebase.v1.RolloutB\x04\xe2A\x01\x02R\arollout\x12\x1b\n" +
	"\x06target\x18\x03 \x01(\tH\x00R\x06target\x88\x01\x01\x12#\n" +
	"\rvalidate_only\x18\x04 \x01(\bR\fvalidateOnlyB\t\n" +
	"\a_target\"w\n" +
	"\x15PreviewRolloutRequest\x127\n" +
	"\aproject\x18\x01 \x01(\tB\x1d\xe2A\x01\x02\xfaA\x16\n" +
	"\x14bytebase.com/ProjectR\aproject\x12%\n" +
	"\x04plan\x18\x02 \x01(\v2\x11.bytebase.v1.PlanR\x04plan\"\x85\x01\n" +
	"\x13ListTaskRunsRequest\x122\n" +
	"\x06parent\x18\x01 \x01(\tB\x1a\xe2A\x01\x02\xfaA\x13\n" +
	"\x11bytebase.com/TaskR\x06parent\x12\x1b\n" +
	"\tpage_size\x18\x02 \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tR\tpageToken\"q\n" +
	"\x14ListTaskRunsResponse\x121\n" +
	"\ttask_runs\x18\x01 \x03(\v2\x14.bytebase.v1.TaskRunR\btaskRuns\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"F\n" +
	"\x11GetTaskRunRequest\x121\n" +
	"\x04name\x18\x01 \x01(\tB\x1d\xe2A\x01\x02\xfaA\x16\n" +
	"\x14bytebase.com/TaskRunR\x04name\"M\n" +
	"\x14GetTaskRunLogRequest\x125\n" +
	"\x06parent\x18\x01 \x01(\tB\x1d\xe2A\x01\x02\xfaA\x16\n" +
	"\x14bytebase.com/TaskRunR\x06parent\"\xc0\x02\n" +
	"\aRollout\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x18\n" +
	"\x04plan\x18\x03 \x01(\tB\x04\xe2A\x01\x02R\x04plan\x12\x14\n" +
	"\x05title\x18\x04 \x01(\tR\x05title\x12*\n" +
	"\x06stages\x18\x05 \x03(\v2\x12.bytebase.v1.StageR\x06stages\x12\x1e\n" +
	"\acreator\x18\x06 \x01(\tB\x04\xe2A\x01\x03R\acreator\x12A\n" +
	"\vcreate_time\x18\a \x01(\v2\x1a.google.protobuf.TimestampB\x04\xe2A\x01\x03R\n" +
	"createTime\x12\x1a\n" +
	"\x05issue\x18\t \x01(\tB\x04\xe2A\x01\x03R\x05issue:@\xeaA=\n" +
	"\x14bytebase.com/Rollout\x12%projects/{project}/rollouts/{rollout}J\x04\b\x02\x10\x03\"\xd1\x01\n" +
	"\x05Stage\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x14\n" +
	"\x02id\x18\x03 \x01(\tB\x04\xe2A\x01\x03R\x02id\x12 \n" +
	"\venvironment\x18\x04 \x01(\tR\venvironment\x12'\n" +
	"\x05tasks\x18\x05 \x03(\v2\x11.bytebase.v1.TaskR\x05tasks:M\xeaAJ\n" +
	"\x12bytebase.com/Stage\x124projects/{project}/rollouts/{rollout}/stages/{stage}J\x04\b\x02\x10\x03\"\xdb\r\n" +
	"\x04Task\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x17\n" +
	"\aspec_id\x18\x04 \x01(\tR\x06specId\x120\n" +
	"\x06status\x18\x05 \x01(\x0e2\x18.bytebase.v1.Task.StatusR\x06status\x12%\n" +
	"\x0eskipped_reason\x18\x0f \x01(\tR\rskippedReason\x12*\n" +
	"\x04type\x18\x06 \x01(\x0e2\x16.bytebase.v1.Task.TypeR\x04type\x12\x16\n" +
	"\x06target\x18\b \x01(\tR\x06target\x12K\n" +
	"\x0fdatabase_create\x18\t \x01(\v2 .bytebase.v1.Task.DatabaseCreateH\x00R\x0edatabaseCreate\x12d\n" +
	"\x18database_schema_baseline\x18\n" +
	" \x01(\v2(.bytebase.v1.Task.DatabaseSchemaBaselineH\x00R\x16databaseSchemaBaseline\x12^\n" +
	"\x16database_schema_update\x18\v \x01(\v2&.bytebase.v1.Task.DatabaseSchemaUpdateH\x00R\x14databaseSchemaUpdate\x12X\n" +
	"\x14database_data_update\x18\f \x01(\v2$.bytebase.v1.Task.DatabaseDataUpdateH\x00R\x12databaseDataUpdate\x12X\n" +
	"\x14database_data_export\x18\x10 \x01(\v2$.bytebase.v1.Task.DatabaseDataExportH\x00R\x12databaseDataExport\x1a\xd7\x01\n" +
	"\x0eDatabaseCreate\x12\x18\n" +
	"\aproject\x18\x01 \x01(\tR\aproject\x12\x1a\n" +
	"\bdatabase\x18\x02 \x01(\tR\bdatabase\x12\x14\n" +
	"\x05table\x18\x03 \x01(\tR\x05table\x12\x14\n" +
	"\x05sheet\x18\x04 \x01(\tR\x05sheet\x12#\n" +
	"\rcharacter_set\x18\x05 \x01(\tR\fcharacterSet\x12\x1c\n" +
	"\tcollation\x18\x06 \x01(\tR\tcollation\x12 \n" +
	"\venvironment\x18\a \x01(\tR\venvironment\x1a?\n" +
	"\x16DatabaseSchemaBaseline\x12%\n" +
	"\x0eschema_version\x18\x01 \x01(\tR\rschemaVersion\x1aS\n" +
	"\x14DatabaseSchemaUpdate\x12\x14\n" +
	"\x05sheet\x18\x01 \x01(\tR\x05sheet\x12%\n" +
	"\x0eschema_version\x18\x02 \x01(\tR\rschemaVersion\x1aQ\n" +
	"\x12DatabaseDataUpdate\x12\x14\n" +
	"\x05sheet\x18\x01 \x01(\tR\x05sheet\x12%\n" +
	"\x0eschema_version\x18\x02 \x01(\tR\rschemaVersion\x1a\xa3\x01\n" +
	"\x12DatabaseDataExport\x12\x16\n" +
	"\x06target\x18\x01 \x01(\tR\x06target\x12\x14\n" +
	"\x05sheet\x18\x02 \x01(\tR\x05sheet\x121\n" +
	"\x06format\x18\x03 \x01(\x0e2\x19.bytebase.v1.ExportFormatR\x06format\x12\x1f\n" +
	"\bpassword\x18\x04 \x01(\tH\x00R\bpassword\x88\x01\x01B\v\n" +
	"\t_password\"|\n" +
	"\x06Status\x12\x16\n" +
	"\x12STATUS_UNSPECIFIED\x10\x00\x12\x0f\n" +
	"\vNOT_STARTED\x10\x01\x12\v\n" +
	"\aPENDING\x10\x02\x12\v\n" +
	"\aRUNNING\x10\x03\x12\b\n" +
	"\x04DONE\x10\x04\x12\n" +
	"\n" +
	"\x06FAILED\x10\x05\x12\f\n" +
	"\bCANCELED\x10\x06\x12\v\n" +
	"\aSKIPPED\x10\a\"\xee\x01\n" +
	"\x04Type\x12\x14\n" +
	"\x10TYPE_UNSPECIFIED\x10\x00\x12\v\n" +
	"\aGENERAL\x10\x01\x12\x13\n" +
	"\x0fDATABASE_CREATE\x10\x02\x12\x1c\n" +
	"\x18DATABASE_SCHEMA_BASELINE\x10\x03\x12\x1a\n" +
	"\x16DATABASE_SCHEMA_UPDATE\x10\x04\x12\x1e\n" +
	"\x1aDATABASE_SCHEMA_UPDATE_SDL\x10\x05\x12 \n" +
	"\x1cDATABASE_SCHEMA_UPDATE_GHOST\x10\t\x12\x18\n" +
	"\x14DATABASE_DATA_UPDATE\x10\b\x12\x18\n" +
	"\x14DATABASE_DATA_EXPORT\x10\f:Y\xeaAV\n" +
	"\x11bytebase.com/Task\x12Aprojects/{project}/rollouts/{rollout}/stages/{stage}/tasks/{task}B\t\n" +
	"\apayloadJ\x04\b\x02\x10\x03\"\xea\x0e\n" +
	"\aTaskRun\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x18\n" +
	"\acreator\x18\x03 \x01(\tR\acreator\x12A\n" +
	"\vcreate_time\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampB\x04\xe2A\x01\x03R\n" +
	"createTime\x12A\n" +
	"\vupdate_time\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampB\x04\xe2A\x01\x03R\n" +
	"updateTime\x123\n" +
	"\x06status\x18\b \x01(\x0e2\x1b.bytebase.v1.TaskRun.StatusR\x06status\x12\x16\n" +
	"\x06detail\x18\t \x01(\tR\x06detail\x12\"\n" +
	"\tchangelog\x18\x14 \x01(\tB\x04\xe2A\x01\x03R\tchangelog\x12%\n" +
	"\x0eschema_version\x18\v \x01(\tR\rschemaVersion\x12?\n" +
	"\n" +
	"start_time\x18\x0e \x01(\v2\x1a.google.protobuf.TimestampB\x04\xe2A\x01\x03R\tstartTime\x12\\\n" +
	"\x15export_archive_status\x18\x10 \x01(\x0e2(.bytebase.v1.TaskRun.ExportArchiveStatusR\x13exportArchiveStatus\x12V\n" +
	"\x13prior_backup_detail\x18\x11 \x01(\v2&.bytebase.v1.TaskRun.PriorBackupDetailR\x11priorBackupDetail\x12O\n" +
	"\x0escheduler_info\x18\x12 \x01(\v2\".bytebase.v1.TaskRun.SchedulerInfoB\x04\xe2A\x01\x03R\rschedulerInfo\x12\x1a\n" +
	"\x05sheet\x18\x13 \x01(\tB\x04\xe2A\x01\x03R\x05sheet\x1a\xd6\x03\n" +
	"\x11PriorBackupDetail\x12A\n" +
	"\x05items\x18\x01 \x03(\v2+.bytebase.v1.TaskRun.PriorBackupDetail.ItemR\x05items\x1a\xfd\x02\n" +
	"\x04Item\x12T\n" +
	"\fsource_table\x18\x01 \x01(\v21.bytebase.v1.TaskRun.PriorBackupDetail.Item.TableR\vsourceTable\x12T\n" +
	"\ftarget_table\x18\x02 \x01(\v21.bytebase.v1.TaskRun.PriorBackupDetail.Item.TableR\vtargetTable\x12<\n" +
	"\x0estart_position\x18\x03 \x01(\v2\x15.bytebase.v1.PositionR\rstartPosition\x128\n" +
	"\fend_position\x18\x04 \x01(\v2\x15.bytebase.v1.PositionR\vendPosition\x1aQ\n" +
	"\x05Table\x12\x1a\n" +
	"\bdatabase\x18\x01 \x01(\tR\bdatabase\x12\x16\n" +
	"\x06schema\x18\x02 \x01(\tR\x06schema\x12\x14\n" +
	"\x05table\x18\x03 \x01(\tR\x05table\x1a\x9b\x03\n" +
	"\rSchedulerInfo\x12;\n" +
	"\vreport_time\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"reportTime\x12T\n" +
	"\rwaiting_cause\x18\x02 \x01(\v2/.bytebase.v1.TaskRun.SchedulerInfo.WaitingCauseR\fwaitingCause\x1a\xf6\x01\n" +
	"\fWaitingCause\x12+\n" +
	"\x10connection_limit\x18\x01 \x01(\bH\x00R\x0fconnectionLimit\x12J\n" +
	"\x04task\x18\x02 \x01(\v24.bytebase.v1.TaskRun.SchedulerInfo.WaitingCause.TaskH\x00R\x04task\x122\n" +
	"\x14parallel_tasks_limit\x18\x03 \x01(\bH\x00R\x12parallelTasksLimit\x1a0\n" +
	"\x04Task\x12\x12\n" +
	"\x04task\x18\x01 \x01(\tR\x04task\x12\x14\n" +
	"\x05issue\x18\x02 \x01(\tR\x05issueB\a\n" +
	"\x05cause\"^\n" +
	"\x06Status\x12\x16\n" +
	"\x12STATUS_UNSPECIFIED\x10\x00\x12\v\n" +
	"\aPENDING\x10\x01\x12\v\n" +
	"\aRUNNING\x10\x02\x12\b\n" +
	"\x04DONE\x10\x03\x12\n" +
	"\n" +
	"\x06FAILED\x10\x04\x12\f\n" +
	"\bCANCELED\x10\x05\"U\n" +
	"\x13ExportArchiveStatus\x12%\n" +
	"!EXPORT_ARCHIVE_STATUS_UNSPECIFIED\x10\x00\x12\t\n" +
	"\x05READY\x10\x01\x12\f\n" +
	"\bEXPORTED\x10\x02:o\xeaAl\n" +
	"\x14bytebase.com/TaskRun\x12Tprojects/{project}/rollouts/{rollout}/stages/{stage}/tasks/{task}/taskRuns/{taskRun}J\x04\b\x02\x10\x03J\x04\b\f\x10\rJ\x04\b\x0f\x10\x10\"\xd0\x01\n" +
	"\n" +
	"TaskRunLog\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x126\n" +
	"\aentries\x18\x02 \x03(\v2\x1c.bytebase.v1.TaskRunLogEntryR\aentries:v\xeaAs\n" +
	"\x17bytebase.com/TaskRunLog\x12Xprojects/{project}/rollouts/{rollout}/stages/{stage}/tasks/{task}/taskRuns/{taskRun}/log\"\x92\x12\n" +
	"\x0fTaskRunLogEntry\x125\n" +
	"\x04type\x18\x01 \x01(\x0e2!.bytebase.v1.TaskRunLogEntry.TypeR\x04type\x125\n" +
	"\blog_time\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\alogTime\x12\x1b\n" +
	"\tdeploy_id\x18\f \x01(\tR\bdeployId\x12H\n" +
	"\vschema_dump\x18\x02 \x01(\v2'.bytebase.v1.TaskRunLogEntry.SchemaDumpR\n" +
	"schemaDump\x12T\n" +
	"\x0fcommand_execute\x18\x03 \x01(\v2+.bytebase.v1.TaskRunLogEntry.CommandExecuteR\x0ecommandExecute\x12N\n" +
	"\rdatabase_sync\x18\x04 \x01(\v2).bytebase.v1.TaskRunLogEntry.DatabaseSyncR\fdatabaseSync\x12e\n" +
	"\x16task_run_status_update\x18\x05 \x01(\v20.bytebase.v1.TaskRunLogEntry.TaskRunStatusUpdateR\x13taskRunStatusUpdate\x12`\n" +
	"\x13transaction_control\x18\a \x01(\v2/.bytebase.v1.TaskRunLogEntry.TransactionControlR\x12transactionControl\x12K\n" +
	"\fprior_backup\x18\b \x01(\v2(.bytebase.v1.TaskRunLogEntry.PriorBackupR\vpriorBackup\x12E\n" +
	"\n" +
	"retry_info\x18\t \x01(\v2&.bytebase.v1.TaskRunLogEntry.RetryInfoR\tretryInfo\x1a\x94\x01\n" +
	"\n" +
	"SchemaDump\x129\n" +
	"\n" +
	"start_time\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\tstartTime\x125\n" +
	"\bend_time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\aendTime\x12\x14\n" +
	"\x05error\x18\x03 \x01(\tR\x05error\x1a\xfb\x02\n" +
	"\x0eCommandExecute\x125\n" +
	"\blog_time\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\alogTime\x12'\n" +
	"\x0fcommand_indexes\x18\x02 \x03(\x05R\x0ecommandIndexes\x12W\n" +
	"\bresponse\x18\x03 \x01(\v2;.bytebase.v1.TaskRunLogEntry.CommandExecute.CommandResponseR\bresponse\x1a\xaf\x01\n" +
	"\x0fCommandResponse\x125\n" +
	"\blog_time\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\alogTime\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\x12#\n" +
	"\raffected_rows\x18\x03 \x01(\x05R\faffectedRows\x12*\n" +
	"\x11all_affected_rows\x18\x04 \x03(\x05R\x0fallAffectedRows\x1a\x96\x01\n" +
	"\fDatabaseSync\x129\n" +
	"\n" +
	"start_time\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\tstartTime\x125\n" +
	"\bend_time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\aendTime\x12\x14\n" +
	"\x05error\x18\x03 \x01(\tR\x05error\x1a\xb2\x01\n" +
	"\x13TaskRunStatusUpdate\x12O\n" +
	"\x06status\x18\x01 \x01(\x0e27.bytebase.v1.TaskRunLogEntry.TaskRunStatusUpdate.StatusR\x06status\"J\n" +
	"\x06Status\x12\x16\n" +
	"\x12STATUS_UNSPECIFIED\x10\x00\x12\x13\n" +
	"\x0fRUNNING_WAITING\x10\x01\x12\x13\n" +
	"\x0fRUNNING_RUNNING\x10\x02\x1a\xb7\x01\n" +
	"\x12TransactionControl\x12H\n" +
	"\x04type\x18\x01 \x01(\x0e24.bytebase.v1.TaskRunLogEntry.TransactionControl.TypeR\x04type\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\"A\n" +
	"\x04Type\x12\x14\n" +
	"\x10TYPE_UNSPECIFIED\x10\x00\x12\t\n" +
	"\x05BEGIN\x10\x01\x12\n" +
	"\n" +
	"\x06COMMIT\x10\x02\x12\f\n" +
	"\bROLLBACK\x10\x03\x1a\xed\x01\n" +
	"\vPriorBackup\x129\n" +
	"\n" +
	"start_time\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampR\tstartTime\x125\n" +
	"\bend_time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\aendTime\x12V\n" +
	"\x13prior_backup_detail\x18\x03 \x01(\v2&.bytebase.v1.TaskRun.PriorBackupDetailR\x11priorBackupDetail\x12\x14\n" +
	"\x05error\x18\x04 \x01(\tR\x05error\x1ak\n" +
	"\tRetryInfo\x12\x14\n" +
	"\x05error\x18\x01 \x01(\tR\x05error\x12\x1f\n" +
	"\vretry_count\x18\x02 \x01(\x05R\n" +
	"retryCount\x12'\n" +
	"\x0fmaximum_retries\x18\x03 \x01(\x05R\x0emaximumRetries\"\xac\x01\n" +
	"\x04Type\x12\x14\n" +
	"\x10TYPE_UNSPECIFIED\x10\x00\x12\x0f\n" +
	"\vSCHEMA_DUMP\x10\x01\x12\x13\n" +
	"\x0fCOMMAND_EXECUTE\x10\x02\x12\x11\n" +
	"\rDATABASE_SYNC\x10\x03\x12\x1a\n" +
	"\x16TASK_RUN_STATUS_UPDATE\x10\x04\x12\x17\n" +
	"\x13TRANSACTION_CONTROL\x10\x05\x12\x10\n" +
	"\fPRIOR_BACKUP\x10\x06\x12\x0e\n" +
	"\n" +
	"RETRY_INFO\x10\a\"Q\n" +
	"\x18GetTaskRunSessionRequest\x125\n" +
	"\x06parent\x18\x01 \x01(\tB\x1d\xe2A\x01\x02\xfaA\x16\n" +
	"\x14bytebase.com/TaskRunR\x06parent\"\xc0\t\n" +
	"\x0eTaskRunSession\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12B\n" +
	"\bpostgres\x18\x02 \x01(\v2$.bytebase.v1.TaskRunSession.PostgresH\x00R\bpostgres\x1a\xca\a\n" +
	"\bPostgres\x12F\n" +
	"\asession\x18\x01 \x01(\v2,.bytebase.v1.TaskRunSession.Postgres.SessionR\asession\x12Y\n" +
	"\x11blocking_sessions\x18\x02 \x03(\v2,.bytebase.v1.TaskRunSession.Postgres.SessionR\x10blockingSessions\x12W\n" +
	"\x10blocked_sessions\x18\x03 \x03(\v2,.bytebase.v1.TaskRunSession.Postgres.SessionR\x0fblockedSessions\x1a\xc1\x05\n" +
	"\aSession\x12\x10\n" +
	"\x03pid\x18\x01 \x01(\tR\x03pid\x12&\n" +
	"\x0fblocked_by_pids\x18\x02 \x03(\tR\rblockedByPids\x12\x14\n" +
	"\x05query\x18\x03 \x01(\tR\x05query\x12\x19\n" +
	"\x05state\x18\x04 \x01(\tH\x00R\x05state\x88\x01\x01\x12+\n" +
	"\x0fwait_event_type\x18\x05 \x01(\tH\x01R\rwaitEventType\x88\x01\x01\x12\"\n" +
	"\n" +
	"wait_event\x18\x06 \x01(\tH\x02R\twaitEvent\x88\x01\x01\x12\x1d\n" +
	"\adatname\x18\a \x01(\tH\x03R\adatname\x88\x01\x01\x12\x1d\n" +
	"\ausename\x18\b \x01(\tH\x04R\ausename\x88\x01\x01\x12)\n" +
	"\x10application_name\x18\t \x01(\tR\x0fapplicationName\x12$\n" +
	"\vclient_addr\x18\n" +
	" \x01(\tH\x05R\n" +
	"clientAddr\x88\x01\x01\x12$\n" +
	"\vclient_port\x18\v \x01(\tH\x06R\n" +
	"clientPort\x88\x01\x01\x12?\n" +
	"\rbackend_start\x18\f \x01(\v2\x1a.google.protobuf.TimestampR\fbackendStart\x12>\n" +
	"\n" +
	"xact_start\x18\r \x01(\v2\x1a.google.protobuf.TimestampH\aR\txactStart\x88\x01\x01\x12@\n" +
	"\vquery_start\x18\x0e \x01(\v2\x1a.google.protobuf.TimestampH\bR\n" +
	"queryStart\x88\x01\x01B\b\n" +
	"\x06_stateB\x12\n" +
	"\x10_wait_event_typeB\r\n" +
	"\v_wait_eventB\n" +
	"\n" +
	"\b_datnameB\n" +
	"\n" +
	"\b_usenameB\x0e\n" +
	"\f_client_addrB\x0e\n" +
	"\f_client_portB\r\n" +
	"\v_xact_startB\x0e\n" +
	"\f_query_start:~\xeaA{\n" +
	"\x1bbytebase.com/TaskRunSession\x12\\projects/{project}/rollouts/{rollout}/stages/{stage}/tasks/{task}/taskRuns/{taskRun}/sessionB\t\n" +
	"\asession\"R\n" +
	"\x1dPreviewTaskRunRollbackRequest\x121\n" +
	"\x04name\x18\x01 \x01(\tB\x1d\xe2A\x01\x02\xfaA\x16\n" +
	"\x14bytebase.com/TaskRunR\x04name\">\n" +
	"\x1ePreviewTaskRunRollbackResponse\x12\x1c\n" +
	"\tstatement\x18\x01 \x01(\tR\tstatement2\x92\x11\n" +
	"\x0eRolloutService\x12\x8a\x01\n" +
	"\n" +
	"GetRollout\x12\x1e.bytebase.v1.GetRolloutRequest\x1a\x14.bytebase.v1.Rollout\"F\xdaA\x04name\x8a\xea0\x0fbb.rollouts.get\x90\xea0\x01\x82\xd3\xe4\x93\x02\"\x12 /v1/{name=projects/*/rollouts/*}\x12\x9e\x01\n" +
	"\fListRollouts\x12 .bytebase.v1.ListRolloutsRequest\x1a!.bytebase.v1.ListRolloutsResponse\"I\xdaA\x06parent\x8a\xea0\x10bb.rollouts.list\x90\xea0\x01\x82\xd3\xe4\x93\x02\"\x12 /v1/{parent=projects/*}/rollouts\x12\xaa\x01\n" +
	"\rCreateRollout\x12!.bytebase.v1.CreateRolloutRequest\x1a\x14.bytebase.v1.Rollout\"`\xdaA\x0eparent,rollout\x8a\xea0\x12bb.rollouts.create\x90\xea0\x01\x98\xea0\x01\x82\xd3\xe4\x93\x02+:\arollout\" /v1/{parent=projects/*}/rollouts\x12\xa0\x01\n" +
	"\x0ePreviewRollout\x12\".bytebase.v1.PreviewRolloutRequest\x1a\x14.bytebase.v1.Rollout\"T\xdaA\x04name\x8a\xea0\x13bb.rollouts.preview\x90\xea0\x01\x82\xd3\xe4\x93\x02,:\x01*\"'/v1/{project=projects/*}:previewRollout\x12\xba\x01\n" +
	"\fListTaskRuns\x12 .bytebase.v1.ListTaskRunsRequest\x1a!.bytebase.v1.ListTaskRunsResponse\"e\xdaA\x06parent\x8a\xea0\x10bb.taskRuns.list\x90\xea0\x01\x82\xd3\xe4\x93\x02>\x12</v1/{parent=projects/*/rollouts/*/stages/*/tasks/*}/taskRuns\x12\xa7\x01\n" +
	"\n" +
	"GetTaskRun\x12\x1e.bytebase.v1.GetTaskRunRequest\x1a\x14.bytebase.v1.TaskRun\"c\xdaA\x04name\x8a\xea0\x10bb.taskRuns.list\x90\xea0\x01\x82\xd3\xe4\x93\x02>\x12</v1/{name=projects/*/rollouts/*/stages/*/tasks/*/taskRuns/*}\x12\xb8\x01\n" +
	"\rGetTaskRunLog\x12!.bytebase.v1.GetTaskRunLogRequest\x1a\x17.bytebase.v1.TaskRunLog\"k\xdaA\x06parent\x8a\xea0\x10bb.taskRuns.list\x90\xea0\x01\x82\xd3\xe4\x93\x02D\x12B/v1/{parent=projects/*/rollouts/*/stages/*/tasks/*/taskRuns/*}/log\x12\xc8\x01\n" +
	"\x11GetTaskRunSession\x12%.bytebase.v1.GetTaskRunSessionRequest\x1a\x1b.bytebase.v1.TaskRunSession\"o\xdaA\x06parent\x8a\xea0\x10bb.taskRuns.list\x90\xea0\x01\x82\xd3\xe4\x93\x02H\x12F/v1/{parent=projects/*/rollouts/*/stages/*/tasks/*/taskRuns/*}/session\x12\xaa\x01\n" +
	"\rBatchRunTasks\x12!.bytebase.v1.BatchRunTasksRequest\x1a\".bytebase.v1.BatchRunTasksResponse\"R\xdaA\x06parent\x90\xea0\x02\x82\xd3\xe4\x93\x02?:\x01*\":/v1/{parent=projects/*/rollouts/*/stages/*}/tasks:batchRun\x12\xae\x01\n" +
	"\x0eBatchSkipTasks\x12\".bytebase.v1.BatchSkipTasksRequest\x1a#.bytebase.v1.BatchSkipTasksResponse\"S\xdaA\x06parent\x90\xea0\x02\x82\xd3\xe4\x93\x02@:\x01*\";/v1/{parent=projects/*/rollouts/*/stages/*}/tasks:batchSkip\x12\xca\x01\n" +
	"\x13BatchCancelTaskRuns\x12'.bytebase.v1.BatchCancelTaskRunsRequest\x1a(.bytebase.v1.BatchCancelTaskRunsResponse\"`\xdaA\x06parent\x90\xea0\x02\x82\xd3\xe4\x93\x02M:\x01*\"H/v1/{parent=projects/*/rollouts/*/stages/*/tasks/*}/taskRuns:batchCancel\x12\xe9\x01\n" +
	"\x16PreviewTaskRunRollback\x12*.bytebase.v1.PreviewTaskRunRollbackRequest\x1a+.bytebase.v1.PreviewTaskRunRollbackResponse\"v\xdaA\x04name\x8a\xea0\x10bb.taskRuns.list\x90\xea0\x01\x82\xd3\xe4\x93\x02Q:\x01*\"L/v1/{name=projects/*/rollouts/*/stages/*/tasks/*/taskRuns/*}:previewRollbackB\x11Z\x0fgenerated-go/v1b\x06proto3"

var (
	file_v1_rollout_service_proto_rawDescOnce sync.Once
	file_v1_rollout_service_proto_rawDescData []byte
)

func file_v1_rollout_service_proto_rawDescGZIP() []byte {
	file_v1_rollout_service_proto_rawDescOnce.Do(func() {
		file_v1_rollout_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_v1_rollout_service_proto_rawDesc), len(file_v1_rollout_service_proto_rawDesc)))
	})
	return file_v1_rollout_service_proto_rawDescData
}

var file_v1_rollout_service_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_v1_rollout_service_proto_msgTypes = make([]protoimpl.MessageInfo, 46)
var file_v1_rollout_service_proto_goTypes = []any{
	(Task_Status)(0),                                       // 0: bytebase.v1.Task.Status
	(Task_Type)(0),                                         // 1: bytebase.v1.Task.Type
	(TaskRun_Status)(0),                                    // 2: bytebase.v1.TaskRun.Status
	(TaskRun_ExportArchiveStatus)(0),                       // 3: bytebase.v1.TaskRun.ExportArchiveStatus
	(TaskRunLogEntry_Type)(0),                              // 4: bytebase.v1.TaskRunLogEntry.Type
	(TaskRunLogEntry_TaskRunStatusUpdate_Status)(0),        // 5: bytebase.v1.TaskRunLogEntry.TaskRunStatusUpdate.Status
	(TaskRunLogEntry_TransactionControl_Type)(0),           // 6: bytebase.v1.TaskRunLogEntry.TransactionControl.Type
	(*BatchRunTasksRequest)(nil),                           // 7: bytebase.v1.BatchRunTasksRequest
	(*BatchRunTasksResponse)(nil),                          // 8: bytebase.v1.BatchRunTasksResponse
	(*BatchSkipTasksRequest)(nil),                          // 9: bytebase.v1.BatchSkipTasksRequest
	(*BatchSkipTasksResponse)(nil),                         // 10: bytebase.v1.BatchSkipTasksResponse
	(*BatchCancelTaskRunsRequest)(nil),                     // 11: bytebase.v1.BatchCancelTaskRunsRequest
	(*BatchCancelTaskRunsResponse)(nil),                    // 12: bytebase.v1.BatchCancelTaskRunsResponse
	(*GetRolloutRequest)(nil),                              // 13: bytebase.v1.GetRolloutRequest
	(*ListRolloutsRequest)(nil),                            // 14: bytebase.v1.ListRolloutsRequest
	(*ListRolloutsResponse)(nil),                           // 15: bytebase.v1.ListRolloutsResponse
	(*CreateRolloutRequest)(nil),                           // 16: bytebase.v1.CreateRolloutRequest
	(*PreviewRolloutRequest)(nil),                          // 17: bytebase.v1.PreviewRolloutRequest
	(*ListTaskRunsRequest)(nil),                            // 18: bytebase.v1.ListTaskRunsRequest
	(*ListTaskRunsResponse)(nil),                           // 19: bytebase.v1.ListTaskRunsResponse
	(*GetTaskRunRequest)(nil),                              // 20: bytebase.v1.GetTaskRunRequest
	(*GetTaskRunLogRequest)(nil),                           // 21: bytebase.v1.GetTaskRunLogRequest
	(*Rollout)(nil),                                        // 22: bytebase.v1.Rollout
	(*Stage)(nil),                                          // 23: bytebase.v1.Stage
	(*Task)(nil),                                           // 24: bytebase.v1.Task
	(*TaskRun)(nil),                                        // 25: bytebase.v1.TaskRun
	(*TaskRunLog)(nil),                                     // 26: bytebase.v1.TaskRunLog
	(*TaskRunLogEntry)(nil),                                // 27: bytebase.v1.TaskRunLogEntry
	(*GetTaskRunSessionRequest)(nil),                       // 28: bytebase.v1.GetTaskRunSessionRequest
	(*TaskRunSession)(nil),                                 // 29: bytebase.v1.TaskRunSession
	(*PreviewTaskRunRollbackRequest)(nil),                  // 30: bytebase.v1.PreviewTaskRunRollbackRequest
	(*PreviewTaskRunRollbackResponse)(nil),                 // 31: bytebase.v1.PreviewTaskRunRollbackResponse
	(*Task_DatabaseCreate)(nil),                            // 32: bytebase.v1.Task.DatabaseCreate
	(*Task_DatabaseSchemaBaseline)(nil),                    // 33: bytebase.v1.Task.DatabaseSchemaBaseline
	(*Task_DatabaseSchemaUpdate)(nil),                      // 34: bytebase.v1.Task.DatabaseSchemaUpdate
	(*Task_DatabaseDataUpdate)(nil),                        // 35: bytebase.v1.Task.DatabaseDataUpdate
	(*Task_DatabaseDataExport)(nil),                        // 36: bytebase.v1.Task.DatabaseDataExport
	(*TaskRun_PriorBackupDetail)(nil),                      // 37: bytebase.v1.TaskRun.PriorBackupDetail
	(*TaskRun_SchedulerInfo)(nil),                          // 38: bytebase.v1.TaskRun.SchedulerInfo
	(*TaskRun_PriorBackupDetail_Item)(nil),                 // 39: bytebase.v1.TaskRun.PriorBackupDetail.Item
	(*TaskRun_PriorBackupDetail_Item_Table)(nil),           // 40: bytebase.v1.TaskRun.PriorBackupDetail.Item.Table
	(*TaskRun_SchedulerInfo_WaitingCause)(nil),             // 41: bytebase.v1.TaskRun.SchedulerInfo.WaitingCause
	(*TaskRun_SchedulerInfo_WaitingCause_Task)(nil),        // 42: bytebase.v1.TaskRun.SchedulerInfo.WaitingCause.Task
	(*TaskRunLogEntry_SchemaDump)(nil),                     // 43: bytebase.v1.TaskRunLogEntry.SchemaDump
	(*TaskRunLogEntry_CommandExecute)(nil),                 // 44: bytebase.v1.TaskRunLogEntry.CommandExecute
	(*TaskRunLogEntry_DatabaseSync)(nil),                   // 45: bytebase.v1.TaskRunLogEntry.DatabaseSync
	(*TaskRunLogEntry_TaskRunStatusUpdate)(nil),            // 46: bytebase.v1.TaskRunLogEntry.TaskRunStatusUpdate
	(*TaskRunLogEntry_TransactionControl)(nil),             // 47: bytebase.v1.TaskRunLogEntry.TransactionControl
	(*TaskRunLogEntry_PriorBackup)(nil),                    // 48: bytebase.v1.TaskRunLogEntry.PriorBackup
	(*TaskRunLogEntry_RetryInfo)(nil),                      // 49: bytebase.v1.TaskRunLogEntry.RetryInfo
	(*TaskRunLogEntry_CommandExecute_CommandResponse)(nil), // 50: bytebase.v1.TaskRunLogEntry.CommandExecute.CommandResponse
	(*TaskRunSession_Postgres)(nil),                        // 51: bytebase.v1.TaskRunSession.Postgres
	(*TaskRunSession_Postgres_Session)(nil),                // 52: bytebase.v1.TaskRunSession.Postgres.Session
	(*Plan)(nil),                                           // 53: bytebase.v1.Plan
	(*timestamppb.Timestamp)(nil),                          // 54: google.protobuf.Timestamp
	(ExportFormat)(0),                                      // 55: bytebase.v1.ExportFormat
	(*Position)(nil),                                       // 56: bytebase.v1.Position
}
var file_v1_rollout_service_proto_depIdxs = []int32{
	22, // 0: bytebase.v1.ListRolloutsResponse.rollouts:type_name -> bytebase.v1.Rollout
	22, // 1: bytebase.v1.CreateRolloutRequest.rollout:type_name -> bytebase.v1.Rollout
	53, // 2: bytebase.v1.PreviewRolloutRequest.plan:type_name -> bytebase.v1.Plan
	25, // 3: bytebase.v1.ListTaskRunsResponse.task_runs:type_name -> bytebase.v1.TaskRun
	23, // 4: bytebase.v1.Rollout.stages:type_name -> bytebase.v1.Stage
	54, // 5: bytebase.v1.Rollout.create_time:type_name -> google.protobuf.Timestamp
	24, // 6: bytebase.v1.Stage.tasks:type_name -> bytebase.v1.Task
	0,  // 7: bytebase.v1.Task.status:type_name -> bytebase.v1.Task.Status
	1,  // 8: bytebase.v1.Task.type:type_name -> bytebase.v1.Task.Type
	32, // 9: bytebase.v1.Task.database_create:type_name -> bytebase.v1.Task.DatabaseCreate
	33, // 10: bytebase.v1.Task.database_schema_baseline:type_name -> bytebase.v1.Task.DatabaseSchemaBaseline
	34, // 11: bytebase.v1.Task.database_schema_update:type_name -> bytebase.v1.Task.DatabaseSchemaUpdate
	35, // 12: bytebase.v1.Task.database_data_update:type_name -> bytebase.v1.Task.DatabaseDataUpdate
	36, // 13: bytebase.v1.Task.database_data_export:type_name -> bytebase.v1.Task.DatabaseDataExport
	54, // 14: bytebase.v1.TaskRun.create_time:type_name -> google.protobuf.Timestamp
	54, // 15: bytebase.v1.TaskRun.update_time:type_name -> google.protobuf.Timestamp
	2,  // 16: bytebase.v1.TaskRun.status:type_name -> bytebase.v1.TaskRun.Status
	54, // 17: bytebase.v1.TaskRun.start_time:type_name -> google.protobuf.Timestamp
	3,  // 18: bytebase.v1.TaskRun.export_archive_status:type_name -> bytebase.v1.TaskRun.ExportArchiveStatus
	37, // 19: bytebase.v1.TaskRun.prior_backup_detail:type_name -> bytebase.v1.TaskRun.PriorBackupDetail
	38, // 20: bytebase.v1.TaskRun.scheduler_info:type_name -> bytebase.v1.TaskRun.SchedulerInfo
	27, // 21: bytebase.v1.TaskRunLog.entries:type_name -> bytebase.v1.TaskRunLogEntry
	4,  // 22: bytebase.v1.TaskRunLogEntry.type:type_name -> bytebase.v1.TaskRunLogEntry.Type
	54, // 23: bytebase.v1.TaskRunLogEntry.log_time:type_name -> google.protobuf.Timestamp
	43, // 24: bytebase.v1.TaskRunLogEntry.schema_dump:type_name -> bytebase.v1.TaskRunLogEntry.SchemaDump
	44, // 25: bytebase.v1.TaskRunLogEntry.command_execute:type_name -> bytebase.v1.TaskRunLogEntry.CommandExecute
	45, // 26: bytebase.v1.TaskRunLogEntry.database_sync:type_name -> bytebase.v1.TaskRunLogEntry.DatabaseSync
	46, // 27: bytebase.v1.TaskRunLogEntry.task_run_status_update:type_name -> bytebase.v1.TaskRunLogEntry.TaskRunStatusUpdate
	47, // 28: bytebase.v1.TaskRunLogEntry.transaction_control:type_name -> bytebase.v1.TaskRunLogEntry.TransactionControl
	48, // 29: bytebase.v1.TaskRunLogEntry.prior_backup:type_name -> bytebase.v1.TaskRunLogEntry.PriorBackup
	49, // 30: bytebase.v1.TaskRunLogEntry.retry_info:type_name -> bytebase.v1.TaskRunLogEntry.RetryInfo
	51, // 31: bytebase.v1.TaskRunSession.postgres:type_name -> bytebase.v1.TaskRunSession.Postgres
	55, // 32: bytebase.v1.Task.DatabaseDataExport.format:type_name -> bytebase.v1.ExportFormat
	39, // 33: bytebase.v1.TaskRun.PriorBackupDetail.items:type_name -> bytebase.v1.TaskRun.PriorBackupDetail.Item
	54, // 34: bytebase.v1.TaskRun.SchedulerInfo.report_time:type_name -> google.protobuf.Timestamp
	41, // 35: bytebase.v1.TaskRun.SchedulerInfo.waiting_cause:type_name -> bytebase.v1.TaskRun.SchedulerInfo.WaitingCause
	40, // 36: bytebase.v1.TaskRun.PriorBackupDetail.Item.source_table:type_name -> bytebase.v1.TaskRun.PriorBackupDetail.Item.Table
	40, // 37: bytebase.v1.TaskRun.PriorBackupDetail.Item.target_table:type_name -> bytebase.v1.TaskRun.PriorBackupDetail.Item.Table
	56, // 38: bytebase.v1.TaskRun.PriorBackupDetail.Item.start_position:type_name -> bytebase.v1.Position
	56, // 39: bytebase.v1.TaskRun.PriorBackupDetail.Item.end_position:type_name -> bytebase.v1.Position
	42, // 40: bytebase.v1.TaskRun.SchedulerInfo.WaitingCause.task:type_name -> bytebase.v1.TaskRun.SchedulerInfo.WaitingCause.Task
	54, // 41: bytebase.v1.TaskRunLogEntry.SchemaDump.start_time:type_name -> google.protobuf.Timestamp
	54, // 42: bytebase.v1.TaskRunLogEntry.SchemaDump.end_time:type_name -> google.protobuf.Timestamp
	54, // 43: bytebase.v1.TaskRunLogEntry.CommandExecute.log_time:type_name -> google.protobuf.Timestamp
	50, // 44: bytebase.v1.TaskRunLogEntry.CommandExecute.response:type_name -> bytebase.v1.TaskRunLogEntry.CommandExecute.CommandResponse
	54, // 45: bytebase.v1.TaskRunLogEntry.DatabaseSync.start_time:type_name -> google.protobuf.Timestamp
	54, // 46: bytebase.v1.TaskRunLogEntry.DatabaseSync.end_time:type_name -> google.protobuf.Timestamp
	5,  // 47: bytebase.v1.TaskRunLogEntry.TaskRunStatusUpdate.status:type_name -> bytebase.v1.TaskRunLogEntry.TaskRunStatusUpdate.Status
	6,  // 48: bytebase.v1.TaskRunLogEntry.TransactionControl.type:type_name -> bytebase.v1.TaskRunLogEntry.TransactionControl.Type
	54, // 49: bytebase.v1.TaskRunLogEntry.PriorBackup.start_time:type_name -> google.protobuf.Timestamp
	54, // 50: bytebase.v1.TaskRunLogEntry.PriorBackup.end_time:type_name -> google.protobuf.Timestamp
	37, // 51: bytebase.v1.TaskRunLogEntry.PriorBackup.prior_backup_detail:type_name -> bytebase.v1.TaskRun.PriorBackupDetail
	54, // 52: bytebase.v1.TaskRunLogEntry.CommandExecute.CommandResponse.log_time:type_name -> google.protobuf.Timestamp
	52, // 53: bytebase.v1.TaskRunSession.Postgres.session:type_name -> bytebase.v1.TaskRunSession.Postgres.Session
	52, // 54: bytebase.v1.TaskRunSession.Postgres.blocking_sessions:type_name -> bytebase.v1.TaskRunSession.Postgres.Session
	52, // 55: bytebase.v1.TaskRunSession.Postgres.blocked_sessions:type_name -> bytebase.v1.TaskRunSession.Postgres.Session
	54, // 56: bytebase.v1.TaskRunSession.Postgres.Session.backend_start:type_name -> google.protobuf.Timestamp
	54, // 57: bytebase.v1.TaskRunSession.Postgres.Session.xact_start:type_name -> google.protobuf.Timestamp
	54, // 58: bytebase.v1.TaskRunSession.Postgres.Session.query_start:type_name -> google.protobuf.Timestamp
	13, // 59: bytebase.v1.RolloutService.GetRollout:input_type -> bytebase.v1.GetRolloutRequest
	14, // 60: bytebase.v1.RolloutService.ListRollouts:input_type -> bytebase.v1.ListRolloutsRequest
	16, // 61: bytebase.v1.RolloutService.CreateRollout:input_type -> bytebase.v1.CreateRolloutRequest
	17, // 62: bytebase.v1.RolloutService.PreviewRollout:input_type -> bytebase.v1.PreviewRolloutRequest
	18, // 63: bytebase.v1.RolloutService.ListTaskRuns:input_type -> bytebase.v1.ListTaskRunsRequest
	20, // 64: bytebase.v1.RolloutService.GetTaskRun:input_type -> bytebase.v1.GetTaskRunRequest
	21, // 65: bytebase.v1.RolloutService.GetTaskRunLog:input_type -> bytebase.v1.GetTaskRunLogRequest
	28, // 66: bytebase.v1.RolloutService.GetTaskRunSession:input_type -> bytebase.v1.GetTaskRunSessionRequest
	7,  // 67: bytebase.v1.RolloutService.BatchRunTasks:input_type -> bytebase.v1.BatchRunTasksRequest
	9,  // 68: bytebase.v1.RolloutService.BatchSkipTasks:input_type -> bytebase.v1.BatchSkipTasksRequest
	11, // 69: bytebase.v1.RolloutService.BatchCancelTaskRuns:input_type -> bytebase.v1.BatchCancelTaskRunsRequest
	30, // 70: bytebase.v1.RolloutService.PreviewTaskRunRollback:input_type -> bytebase.v1.PreviewTaskRunRollbackRequest
	22, // 71: bytebase.v1.RolloutService.GetRollout:output_type -> bytebase.v1.Rollout
	15, // 72: bytebase.v1.RolloutService.ListRollouts:output_type -> bytebase.v1.ListRolloutsResponse
	22, // 73: bytebase.v1.RolloutService.CreateRollout:output_type -> bytebase.v1.Rollout
	22, // 74: bytebase.v1.RolloutService.PreviewRollout:output_type -> bytebase.v1.Rollout
	19, // 75: bytebase.v1.RolloutService.ListTaskRuns:output_type -> bytebase.v1.ListTaskRunsResponse
	25, // 76: bytebase.v1.RolloutService.GetTaskRun:output_type -> bytebase.v1.TaskRun
	26, // 77: bytebase.v1.RolloutService.GetTaskRunLog:output_type -> bytebase.v1.TaskRunLog
	29, // 78: bytebase.v1.RolloutService.GetTaskRunSession:output_type -> bytebase.v1.TaskRunSession
	8,  // 79: bytebase.v1.RolloutService.BatchRunTasks:output_type -> bytebase.v1.BatchRunTasksResponse
	10, // 80: bytebase.v1.RolloutService.BatchSkipTasks:output_type -> bytebase.v1.BatchSkipTasksResponse
	12, // 81: bytebase.v1.RolloutService.BatchCancelTaskRuns:output_type -> bytebase.v1.BatchCancelTaskRunsResponse
	31, // 82: bytebase.v1.RolloutService.PreviewTaskRunRollback:output_type -> bytebase.v1.PreviewTaskRunRollbackResponse
	71, // [71:83] is the sub-list for method output_type
	59, // [59:71] is the sub-list for method input_type
	59, // [59:59] is the sub-list for extension type_name
	59, // [59:59] is the sub-list for extension extendee
	0,  // [0:59] is the sub-list for field type_name
}

func init() { file_v1_rollout_service_proto_init() }
func file_v1_rollout_service_proto_init() {
	if File_v1_rollout_service_proto != nil {
		return
	}
	file_v1_annotation_proto_init()
	file_v1_common_proto_init()
	file_v1_plan_service_proto_init()
	file_v1_rollout_service_proto_msgTypes[9].OneofWrappers = []any{}
	file_v1_rollout_service_proto_msgTypes[17].OneofWrappers = []any{
		(*Task_DatabaseCreate_)(nil),
		(*Task_DatabaseSchemaBaseline_)(nil),
		(*Task_DatabaseSchemaUpdate_)(nil),
		(*Task_DatabaseDataUpdate_)(nil),
		(*Task_DatabaseDataExport_)(nil),
	}
	file_v1_rollout_service_proto_msgTypes[22].OneofWrappers = []any{
		(*TaskRunSession_Postgres_)(nil),
	}
	file_v1_rollout_service_proto_msgTypes[29].OneofWrappers = []any{}
	file_v1_rollout_service_proto_msgTypes[34].OneofWrappers = []any{
		(*TaskRun_SchedulerInfo_WaitingCause_ConnectionLimit)(nil),
		(*TaskRun_SchedulerInfo_WaitingCause_Task_)(nil),
		(*TaskRun_SchedulerInfo_WaitingCause_ParallelTasksLimit)(nil),
	}
	file_v1_rollout_service_proto_msgTypes[45].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_v1_rollout_service_proto_rawDesc), len(file_v1_rollout_service_proto_rawDesc)),
			NumEnums:      7,
			NumMessages:   46,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v1_rollout_service_proto_goTypes,
		DependencyIndexes: file_v1_rollout_service_proto_depIdxs,
		EnumInfos:         file_v1_rollout_service_proto_enumTypes,
		MessageInfos:      file_v1_rollout_service_proto_msgTypes,
	}.Build()
	File_v1_rollout_service_proto = out.File
	file_v1_rollout_service_proto_goTypes = nil
	file_v1_rollout_service_proto_depIdxs = nil
}
