// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        (unknown)
// source: v1/rollout_service.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Task_Status int32

const (
	Task_STATUS_UNSPECIFIED Task_Status = 0
	Task_NOT_STARTED        Task_Status = 1
	Task_PENDING            Task_Status = 2
	Task_RUNNING            Task_Status = 3
	Task_DONE               Task_Status = 4
	Task_FAILED             Task_Status = 5
	Task_CANCELED           Task_Status = 6
	Task_SKIPPED            Task_Status = 7
)

// Enum value maps for Task_Status.
var (
	Task_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "NOT_STARTED",
		2: "PENDING",
		3: "RUNNING",
		4: "DONE",
		5: "FAILED",
		6: "CANCELED",
		7: "SKIPPED",
	}
	Task_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"NOT_STARTED":        1,
		"PENDING":            2,
		"RUNNING":            3,
		"DONE":               4,
		"FAILED":             5,
		"CANCELED":           6,
		"SKIPPED":            7,
	}
)

func (x Task_Status) Enum() *Task_Status {
	p := new(Task_Status)
	*p = x
	return p
}

func (x Task_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Task_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_rollout_service_proto_enumTypes[0].Descriptor()
}

func (Task_Status) Type() protoreflect.EnumType {
	return &file_v1_rollout_service_proto_enumTypes[0]
}

func (x Task_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Task_Status.Descriptor instead.
func (Task_Status) EnumDescriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{17, 0}
}

type Task_Type int32

const (
	Task_TYPE_UNSPECIFIED Task_Type = 0
	Task_GENERAL          Task_Type = 1
	// use payload DatabaseCreate
	Task_DATABASE_CREATE Task_Type = 2
	// use payload DatabaseSchemaBaseline
	Task_DATABASE_SCHEMA_BASELINE Task_Type = 3
	// use payload DatabaseSchemaUpdate
	Task_DATABASE_SCHEMA_UPDATE Task_Type = 4
	// use payload DatabaseSchemaUpdate
	Task_DATABASE_SCHEMA_UPDATE_SDL Task_Type = 5
	// use payload DatabaseSchemaUpdate
	Task_DATABASE_SCHEMA_UPDATE_GHOST_SYNC Task_Type = 6
	// use payload nil
	Task_DATABASE_SCHEMA_UPDATE_GHOST_CUTOVER Task_Type = 7
	// use payload DatabaseDataUpdate
	Task_DATABASE_DATA_UPDATE Task_Type = 8
	// use payload DatabaseDataExport
	Task_DATABASE_DATA_EXPORT Task_Type = 12
)

// Enum value maps for Task_Type.
var (
	Task_Type_name = map[int32]string{
		0:  "TYPE_UNSPECIFIED",
		1:  "GENERAL",
		2:  "DATABASE_CREATE",
		3:  "DATABASE_SCHEMA_BASELINE",
		4:  "DATABASE_SCHEMA_UPDATE",
		5:  "DATABASE_SCHEMA_UPDATE_SDL",
		6:  "DATABASE_SCHEMA_UPDATE_GHOST_SYNC",
		7:  "DATABASE_SCHEMA_UPDATE_GHOST_CUTOVER",
		8:  "DATABASE_DATA_UPDATE",
		12: "DATABASE_DATA_EXPORT",
	}
	Task_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED":                     0,
		"GENERAL":                              1,
		"DATABASE_CREATE":                      2,
		"DATABASE_SCHEMA_BASELINE":             3,
		"DATABASE_SCHEMA_UPDATE":               4,
		"DATABASE_SCHEMA_UPDATE_SDL":           5,
		"DATABASE_SCHEMA_UPDATE_GHOST_SYNC":    6,
		"DATABASE_SCHEMA_UPDATE_GHOST_CUTOVER": 7,
		"DATABASE_DATA_UPDATE":                 8,
		"DATABASE_DATA_EXPORT":                 12,
	}
)

func (x Task_Type) Enum() *Task_Type {
	p := new(Task_Type)
	*p = x
	return p
}

func (x Task_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Task_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_rollout_service_proto_enumTypes[1].Descriptor()
}

func (Task_Type) Type() protoreflect.EnumType {
	return &file_v1_rollout_service_proto_enumTypes[1]
}

func (x Task_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Task_Type.Descriptor instead.
func (Task_Type) EnumDescriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{17, 1}
}

type TaskRun_Status int32

const (
	TaskRun_STATUS_UNSPECIFIED TaskRun_Status = 0
	TaskRun_PENDING            TaskRun_Status = 1
	TaskRun_RUNNING            TaskRun_Status = 2
	TaskRun_DONE               TaskRun_Status = 3
	TaskRun_FAILED             TaskRun_Status = 4
	TaskRun_CANCELED           TaskRun_Status = 5
)

// Enum value maps for TaskRun_Status.
var (
	TaskRun_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "PENDING",
		2: "RUNNING",
		3: "DONE",
		4: "FAILED",
		5: "CANCELED",
	}
	TaskRun_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"PENDING":            1,
		"RUNNING":            2,
		"DONE":               3,
		"FAILED":             4,
		"CANCELED":           5,
	}
)

func (x TaskRun_Status) Enum() *TaskRun_Status {
	p := new(TaskRun_Status)
	*p = x
	return p
}

func (x TaskRun_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskRun_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_rollout_service_proto_enumTypes[2].Descriptor()
}

func (TaskRun_Status) Type() protoreflect.EnumType {
	return &file_v1_rollout_service_proto_enumTypes[2]
}

func (x TaskRun_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskRun_Status.Descriptor instead.
func (TaskRun_Status) EnumDescriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{18, 0}
}

type TaskRun_ExportArchiveStatus int32

const (
	TaskRun_EXPORT_ARCHIVE_STATUS_UNSPECIFIED TaskRun_ExportArchiveStatus = 0
	TaskRun_READY                             TaskRun_ExportArchiveStatus = 1
	TaskRun_EXPORTED                          TaskRun_ExportArchiveStatus = 2
)

// Enum value maps for TaskRun_ExportArchiveStatus.
var (
	TaskRun_ExportArchiveStatus_name = map[int32]string{
		0: "EXPORT_ARCHIVE_STATUS_UNSPECIFIED",
		1: "READY",
		2: "EXPORTED",
	}
	TaskRun_ExportArchiveStatus_value = map[string]int32{
		"EXPORT_ARCHIVE_STATUS_UNSPECIFIED": 0,
		"READY":                             1,
		"EXPORTED":                          2,
	}
)

func (x TaskRun_ExportArchiveStatus) Enum() *TaskRun_ExportArchiveStatus {
	p := new(TaskRun_ExportArchiveStatus)
	*p = x
	return p
}

func (x TaskRun_ExportArchiveStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskRun_ExportArchiveStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_rollout_service_proto_enumTypes[3].Descriptor()
}

func (TaskRun_ExportArchiveStatus) Type() protoreflect.EnumType {
	return &file_v1_rollout_service_proto_enumTypes[3]
}

func (x TaskRun_ExportArchiveStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskRun_ExportArchiveStatus.Descriptor instead.
func (TaskRun_ExportArchiveStatus) EnumDescriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{18, 1}
}

type TaskRunLogEntry_Type int32

const (
	TaskRunLogEntry_TYPE_UNSPECIFIED       TaskRunLogEntry_Type = 0
	TaskRunLogEntry_SCHEMA_DUMP            TaskRunLogEntry_Type = 1
	TaskRunLogEntry_COMMAND_EXECUTE        TaskRunLogEntry_Type = 2
	TaskRunLogEntry_DATABASE_SYNC          TaskRunLogEntry_Type = 3
	TaskRunLogEntry_TASK_RUN_STATUS_UPDATE TaskRunLogEntry_Type = 4
	TaskRunLogEntry_TRANSACTION_CONTROL    TaskRunLogEntry_Type = 5
	TaskRunLogEntry_PRIOR_BACKUP           TaskRunLogEntry_Type = 6
)

// Enum value maps for TaskRunLogEntry_Type.
var (
	TaskRunLogEntry_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "SCHEMA_DUMP",
		2: "COMMAND_EXECUTE",
		3: "DATABASE_SYNC",
		4: "TASK_RUN_STATUS_UPDATE",
		5: "TRANSACTION_CONTROL",
		6: "PRIOR_BACKUP",
	}
	TaskRunLogEntry_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED":       0,
		"SCHEMA_DUMP":            1,
		"COMMAND_EXECUTE":        2,
		"DATABASE_SYNC":          3,
		"TASK_RUN_STATUS_UPDATE": 4,
		"TRANSACTION_CONTROL":    5,
		"PRIOR_BACKUP":           6,
	}
)

func (x TaskRunLogEntry_Type) Enum() *TaskRunLogEntry_Type {
	p := new(TaskRunLogEntry_Type)
	*p = x
	return p
}

func (x TaskRunLogEntry_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskRunLogEntry_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_rollout_service_proto_enumTypes[4].Descriptor()
}

func (TaskRunLogEntry_Type) Type() protoreflect.EnumType {
	return &file_v1_rollout_service_proto_enumTypes[4]
}

func (x TaskRunLogEntry_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskRunLogEntry_Type.Descriptor instead.
func (TaskRunLogEntry_Type) EnumDescriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{20, 0}
}

type TaskRunLogEntry_TaskRunStatusUpdate_Status int32

const (
	TaskRunLogEntry_TaskRunStatusUpdate_STATUS_UNSPECIFIED TaskRunLogEntry_TaskRunStatusUpdate_Status = 0
	// the task run is ready to be executed by the scheduler
	TaskRunLogEntry_TaskRunStatusUpdate_RUNNING_WAITING TaskRunLogEntry_TaskRunStatusUpdate_Status = 1
	// the task run is being executed by the scheduler
	TaskRunLogEntry_TaskRunStatusUpdate_RUNNING_RUNNING TaskRunLogEntry_TaskRunStatusUpdate_Status = 2
)

// Enum value maps for TaskRunLogEntry_TaskRunStatusUpdate_Status.
var (
	TaskRunLogEntry_TaskRunStatusUpdate_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "RUNNING_WAITING",
		2: "RUNNING_RUNNING",
	}
	TaskRunLogEntry_TaskRunStatusUpdate_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"RUNNING_WAITING":    1,
		"RUNNING_RUNNING":    2,
	}
)

func (x TaskRunLogEntry_TaskRunStatusUpdate_Status) Enum() *TaskRunLogEntry_TaskRunStatusUpdate_Status {
	p := new(TaskRunLogEntry_TaskRunStatusUpdate_Status)
	*p = x
	return p
}

func (x TaskRunLogEntry_TaskRunStatusUpdate_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskRunLogEntry_TaskRunStatusUpdate_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_rollout_service_proto_enumTypes[5].Descriptor()
}

func (TaskRunLogEntry_TaskRunStatusUpdate_Status) Type() protoreflect.EnumType {
	return &file_v1_rollout_service_proto_enumTypes[5]
}

func (x TaskRunLogEntry_TaskRunStatusUpdate_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskRunLogEntry_TaskRunStatusUpdate_Status.Descriptor instead.
func (TaskRunLogEntry_TaskRunStatusUpdate_Status) EnumDescriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{20, 3, 0}
}

type TaskRunLogEntry_TransactionControl_Type int32

const (
	TaskRunLogEntry_TransactionControl_TYPE_UNSPECIFIED TaskRunLogEntry_TransactionControl_Type = 0
	TaskRunLogEntry_TransactionControl_BEGIN            TaskRunLogEntry_TransactionControl_Type = 1
	TaskRunLogEntry_TransactionControl_COMMIT           TaskRunLogEntry_TransactionControl_Type = 2
	TaskRunLogEntry_TransactionControl_ROLLBACK         TaskRunLogEntry_TransactionControl_Type = 3
)

// Enum value maps for TaskRunLogEntry_TransactionControl_Type.
var (
	TaskRunLogEntry_TransactionControl_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "BEGIN",
		2: "COMMIT",
		3: "ROLLBACK",
	}
	TaskRunLogEntry_TransactionControl_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"BEGIN":            1,
		"COMMIT":           2,
		"ROLLBACK":         3,
	}
)

func (x TaskRunLogEntry_TransactionControl_Type) Enum() *TaskRunLogEntry_TransactionControl_Type {
	p := new(TaskRunLogEntry_TransactionControl_Type)
	*p = x
	return p
}

func (x TaskRunLogEntry_TransactionControl_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskRunLogEntry_TransactionControl_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_rollout_service_proto_enumTypes[6].Descriptor()
}

func (TaskRunLogEntry_TransactionControl_Type) Type() protoreflect.EnumType {
	return &file_v1_rollout_service_proto_enumTypes[6]
}

func (x TaskRunLogEntry_TransactionControl_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskRunLogEntry_TransactionControl_Type.Descriptor instead.
func (TaskRunLogEntry_TransactionControl_Type) EnumDescriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{20, 4, 0}
}

type BatchRunTasksRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the parent of the tasks.
	// Format: projects/{project}/rollouts/{rollout}/stages/{stage}
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The tasks to run.
	// Format: projects/{project}/rollouts/{rollout}/stages/{stage}/tasks/{task}
	Tasks         []string `protobuf:"bytes,2,rep,name=tasks,proto3" json:"tasks,omitempty"`
	Reason        string   `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchRunTasksRequest) Reset() {
	*x = BatchRunTasksRequest{}
	mi := &file_v1_rollout_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchRunTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchRunTasksRequest) ProtoMessage() {}

func (x *BatchRunTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchRunTasksRequest.ProtoReflect.Descriptor instead.
func (*BatchRunTasksRequest) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{0}
}

func (x *BatchRunTasksRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *BatchRunTasksRequest) GetTasks() []string {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *BatchRunTasksRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type BatchRunTasksResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchRunTasksResponse) Reset() {
	*x = BatchRunTasksResponse{}
	mi := &file_v1_rollout_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchRunTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchRunTasksResponse) ProtoMessage() {}

func (x *BatchRunTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchRunTasksResponse.ProtoReflect.Descriptor instead.
func (*BatchRunTasksResponse) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{1}
}

type BatchSkipTasksRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the parent of the tasks.
	// Format: projects/{project}/rollouts/{rollout}/stages/{stage}
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The tasks to skip.
	// Format: projects/{project}/rollouts/{rollout}/stages/{stage}/tasks/{task}
	Tasks         []string `protobuf:"bytes,2,rep,name=tasks,proto3" json:"tasks,omitempty"`
	Reason        string   `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchSkipTasksRequest) Reset() {
	*x = BatchSkipTasksRequest{}
	mi := &file_v1_rollout_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchSkipTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchSkipTasksRequest) ProtoMessage() {}

func (x *BatchSkipTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchSkipTasksRequest.ProtoReflect.Descriptor instead.
func (*BatchSkipTasksRequest) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{2}
}

func (x *BatchSkipTasksRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *BatchSkipTasksRequest) GetTasks() []string {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *BatchSkipTasksRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type BatchSkipTasksResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchSkipTasksResponse) Reset() {
	*x = BatchSkipTasksResponse{}
	mi := &file_v1_rollout_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchSkipTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchSkipTasksResponse) ProtoMessage() {}

func (x *BatchSkipTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchSkipTasksResponse.ProtoReflect.Descriptor instead.
func (*BatchSkipTasksResponse) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{3}
}

type BatchCancelTaskRunsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the parent of the taskRuns.
	// Format: projects/{project}/rollouts/{rollout}/stages/{stage}/tasks/{task}
	// Use `projects/{project}/rollouts/{rollout}/stages/{stage}/tasks/-` to cancel task runs under the same stage.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The taskRuns to cancel.
	// Format: projects/{project}/rollouts/{rollout}/stages/{stage}/tasks/{task}/taskRuns/{taskRun}
	TaskRuns      []string `protobuf:"bytes,2,rep,name=task_runs,json=taskRuns,proto3" json:"task_runs,omitempty"`
	Reason        string   `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchCancelTaskRunsRequest) Reset() {
	*x = BatchCancelTaskRunsRequest{}
	mi := &file_v1_rollout_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchCancelTaskRunsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCancelTaskRunsRequest) ProtoMessage() {}

func (x *BatchCancelTaskRunsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCancelTaskRunsRequest.ProtoReflect.Descriptor instead.
func (*BatchCancelTaskRunsRequest) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{4}
}

func (x *BatchCancelTaskRunsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *BatchCancelTaskRunsRequest) GetTaskRuns() []string {
	if x != nil {
		return x.TaskRuns
	}
	return nil
}

func (x *BatchCancelTaskRunsRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type BatchCancelTaskRunsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchCancelTaskRunsResponse) Reset() {
	*x = BatchCancelTaskRunsResponse{}
	mi := &file_v1_rollout_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchCancelTaskRunsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchCancelTaskRunsResponse) ProtoMessage() {}

func (x *BatchCancelTaskRunsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchCancelTaskRunsResponse.ProtoReflect.Descriptor instead.
func (*BatchCancelTaskRunsResponse) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{5}
}

type GetRolloutRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the rollout to retrieve.
	// Format: projects/{project}/rollouts/{rollout}
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRolloutRequest) Reset() {
	*x = GetRolloutRequest{}
	mi := &file_v1_rollout_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRolloutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRolloutRequest) ProtoMessage() {}

func (x *GetRolloutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRolloutRequest.ProtoReflect.Descriptor instead.
func (*GetRolloutRequest) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{6}
}

func (x *GetRolloutRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListRolloutsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The parent, which owns this collection of rollouts.
	// Format: projects/{project}
	// Use "projects/-" to list all rollouts from all projects.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The maximum number of rollouts to return. The service may return fewer than
	// this value.
	// If unspecified, at most 10 rollouts will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListRollouts` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListRollouts` must match
	// the call that provided the page token.
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRolloutsRequest) Reset() {
	*x = ListRolloutsRequest{}
	mi := &file_v1_rollout_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRolloutsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRolloutsRequest) ProtoMessage() {}

func (x *ListRolloutsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRolloutsRequest.ProtoReflect.Descriptor instead.
func (*ListRolloutsRequest) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{7}
}

func (x *ListRolloutsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListRolloutsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListRolloutsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListRolloutsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The rollouts from the specified request.
	Rollouts []*Rollout `protobuf:"bytes,1,rep,name=rollouts,proto3" json:"rollouts,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRolloutsResponse) Reset() {
	*x = ListRolloutsResponse{}
	mi := &file_v1_rollout_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRolloutsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRolloutsResponse) ProtoMessage() {}

func (x *ListRolloutsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRolloutsResponse.ProtoReflect.Descriptor instead.
func (*ListRolloutsResponse) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{8}
}

func (x *ListRolloutsResponse) GetRollouts() []*Rollout {
	if x != nil {
		return x.Rollouts
	}
	return nil
}

func (x *ListRolloutsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type CreateRolloutRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The parent project where this rollout will be created.
	// Format: projects/{project}
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The rollout to create.
	Rollout *Rollout `protobuf:"bytes,2,opt,name=rollout,proto3" json:"rollout,omitempty"`
	// stage_id is the id in the plan deployment_config_snapshot.
	// The rollout is created according to the plan and the
	// stages are created up to the stage_id.
	// If unspecified, all stages are created.
	// If set to "", no stages are created.
	StageId *string `protobuf:"bytes,3,opt,name=stage_id,json=stageId,proto3,oneof" json:"stage_id,omitempty"`
	// If set, validate the request and preview the rollout, but
	// do not actually create it.
	ValidateOnly  bool `protobuf:"varint,4,opt,name=validate_only,json=validateOnly,proto3" json:"validate_only,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateRolloutRequest) Reset() {
	*x = CreateRolloutRequest{}
	mi := &file_v1_rollout_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateRolloutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRolloutRequest) ProtoMessage() {}

func (x *CreateRolloutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRolloutRequest.ProtoReflect.Descriptor instead.
func (*CreateRolloutRequest) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{9}
}

func (x *CreateRolloutRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreateRolloutRequest) GetRollout() *Rollout {
	if x != nil {
		return x.Rollout
	}
	return nil
}

func (x *CreateRolloutRequest) GetStageId() string {
	if x != nil && x.StageId != nil {
		return *x.StageId
	}
	return ""
}

func (x *CreateRolloutRequest) GetValidateOnly() bool {
	if x != nil {
		return x.ValidateOnly
	}
	return false
}

type PreviewRolloutRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the project.
	// Format: projects/{project}
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// The plan used to preview rollout.
	Plan          *Plan `protobuf:"bytes,2,opt,name=plan,proto3" json:"plan,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PreviewRolloutRequest) Reset() {
	*x = PreviewRolloutRequest{}
	mi := &file_v1_rollout_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PreviewRolloutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewRolloutRequest) ProtoMessage() {}

func (x *PreviewRolloutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewRolloutRequest.ProtoReflect.Descriptor instead.
func (*PreviewRolloutRequest) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{10}
}

func (x *PreviewRolloutRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *PreviewRolloutRequest) GetPlan() *Plan {
	if x != nil {
		return x.Plan
	}
	return nil
}

type ListTaskRunsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The parent, which owns this collection of plans.
	// Format: projects/{project}/rollouts/{rollout}/stages/{stage}/tasks/{task}
	// Use "projects/{project}/rollouts/{rollout}/stages/-/tasks/-" to list all taskRuns from a rollout.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Not used.
	// The maximum number of taskRuns to return. The service may return fewer than
	// this value.
	// If unspecified, at most 10 taskRuns will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Not used.
	// A page token, received from a previous `ListTaskRuns` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListTaskRuns` must match
	// the call that provided the page token.
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTaskRunsRequest) Reset() {
	*x = ListTaskRunsRequest{}
	mi := &file_v1_rollout_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTaskRunsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTaskRunsRequest) ProtoMessage() {}

func (x *ListTaskRunsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTaskRunsRequest.ProtoReflect.Descriptor instead.
func (*ListTaskRunsRequest) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{11}
}

func (x *ListTaskRunsRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListTaskRunsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListTaskRunsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListTaskRunsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The taskRuns from the specified request.
	TaskRuns []*TaskRun `protobuf:"bytes,1,rep,name=task_runs,json=taskRuns,proto3" json:"task_runs,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTaskRunsResponse) Reset() {
	*x = ListTaskRunsResponse{}
	mi := &file_v1_rollout_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTaskRunsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTaskRunsResponse) ProtoMessage() {}

func (x *ListTaskRunsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTaskRunsResponse.ProtoReflect.Descriptor instead.
func (*ListTaskRunsResponse) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{12}
}

func (x *ListTaskRunsResponse) GetTaskRuns() []*TaskRun {
	if x != nil {
		return x.TaskRuns
	}
	return nil
}

func (x *ListTaskRunsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type GetTaskRunRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Format: projects/{project}/rollouts/{rollout}/stages/{stage}/tasks/{task}/taskRuns/{taskRun}
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTaskRunRequest) Reset() {
	*x = GetTaskRunRequest{}
	mi := &file_v1_rollout_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTaskRunRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskRunRequest) ProtoMessage() {}

func (x *GetTaskRunRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskRunRequest.ProtoReflect.Descriptor instead.
func (*GetTaskRunRequest) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{13}
}

func (x *GetTaskRunRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetTaskRunLogRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Format: projects/{project}/rollouts/{rollout}/stages/{stage}/tasks/{task}/taskRuns/{taskRun}
	// TODO(d): check the resource_reference.
	Parent        string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTaskRunLogRequest) Reset() {
	*x = GetTaskRunLogRequest{}
	mi := &file_v1_rollout_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTaskRunLogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskRunLogRequest) ProtoMessage() {}

func (x *GetTaskRunLogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskRunLogRequest.ProtoReflect.Descriptor instead.
func (*GetTaskRunLogRequest) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{14}
}

func (x *GetTaskRunLogRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

type Rollout struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The resource name of the rollout.
	// Format: projects/{project}/rollouts/{rollout}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The plan that this rollout is based on.
	// Format: projects/{project}/plans/{plan}
	Plan  string `protobuf:"bytes,3,opt,name=plan,proto3" json:"plan,omitempty"`
	Title string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	// stages and thus tasks of the rollout.
	Stages []*Stage `protobuf:"bytes,5,rep,name=stages,proto3" json:"stages,omitempty"`
	// Format: users/hello@world.com
	Creator    string                 `protobuf:"bytes,6,opt,name=creator,proto3" json:"creator,omitempty"`
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	// The issue associated with the rollout. Could be empty.
	// Format: projects/{project}/issues/{issue}
	Issue         string `protobuf:"bytes,9,opt,name=issue,proto3" json:"issue,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Rollout) Reset() {
	*x = Rollout{}
	mi := &file_v1_rollout_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Rollout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rollout) ProtoMessage() {}

func (x *Rollout) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rollout.ProtoReflect.Descriptor instead.
func (*Rollout) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{15}
}

func (x *Rollout) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Rollout) GetPlan() string {
	if x != nil {
		return x.Plan
	}
	return ""
}

func (x *Rollout) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Rollout) GetStages() []*Stage {
	if x != nil {
		return x.Stages
	}
	return nil
}

func (x *Rollout) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *Rollout) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Rollout) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Rollout) GetIssue() string {
	if x != nil {
		return x.Issue
	}
	return ""
}

type Stage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Format: projects/{project}/rollouts/{rollout}/stages/{stage}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The id comes from the deployment config.
	// Format: UUID
	// Empty for legacy stages.
	Id            string  `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Title         string  `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Tasks         []*Task `protobuf:"bytes,5,rep,name=tasks,proto3" json:"tasks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Stage) Reset() {
	*x = Stage{}
	mi := &file_v1_rollout_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Stage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stage) ProtoMessage() {}

func (x *Stage) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stage.ProtoReflect.Descriptor instead.
func (*Stage) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{16}
}

func (x *Stage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Stage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Stage) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Stage) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

type Task struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Format: projects/{project}/rollouts/{rollout}/stages/{stage}/tasks/{task}
	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	// A UUID4 string that uniquely identifies the Spec.
	// Could be empty if the rollout of the task does not have an associating plan.
	SpecId string `protobuf:"bytes,4,opt,name=spec_id,json=specId,proto3" json:"spec_id,omitempty"`
	// Status is the status of the task.
	Status        Task_Status `protobuf:"varint,5,opt,name=status,proto3,enum=bytebase.v1.Task_Status" json:"status,omitempty"`
	SkippedReason string      `protobuf:"bytes,15,opt,name=skipped_reason,json=skippedReason,proto3" json:"skipped_reason,omitempty"`
	Type          Task_Type   `protobuf:"varint,6,opt,name=type,proto3,enum=bytebase.v1.Task_Type" json:"type,omitempty"`
	// Format: projects/{project}/rollouts/{rollout}/stages/{stage}/tasks/{task}
	DependsOnTasks []string `protobuf:"bytes,7,rep,name=depends_on_tasks,json=dependsOnTasks,proto3" json:"depends_on_tasks,omitempty"`
	// Format: instances/{instance} if the task is DatabaseCreate.
	// Format: instances/{instance}/databases/{database}
	Target string `protobuf:"bytes,8,opt,name=target,proto3" json:"target,omitempty"`
	// Types that are valid to be assigned to Payload:
	//
	//	*Task_DatabaseCreate_
	//	*Task_DatabaseSchemaBaseline_
	//	*Task_DatabaseSchemaUpdate_
	//	*Task_DatabaseDataUpdate_
	//	*Task_DatabaseDataExport_
	Payload       isTask_Payload `protobuf_oneof:"payload"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Task) Reset() {
	*x = Task{}
	mi := &file_v1_rollout_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{17}
}

func (x *Task) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Task) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Task) GetSpecId() string {
	if x != nil {
		return x.SpecId
	}
	return ""
}

func (x *Task) GetStatus() Task_Status {
	if x != nil {
		return x.Status
	}
	return Task_STATUS_UNSPECIFIED
}

func (x *Task) GetSkippedReason() string {
	if x != nil {
		return x.SkippedReason
	}
	return ""
}

func (x *Task) GetType() Task_Type {
	if x != nil {
		return x.Type
	}
	return Task_TYPE_UNSPECIFIED
}

func (x *Task) GetDependsOnTasks() []string {
	if x != nil {
		return x.DependsOnTasks
	}
	return nil
}

func (x *Task) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *Task) GetPayload() isTask_Payload {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *Task) GetDatabaseCreate() *Task_DatabaseCreate {
	if x != nil {
		if x, ok := x.Payload.(*Task_DatabaseCreate_); ok {
			return x.DatabaseCreate
		}
	}
	return nil
}

func (x *Task) GetDatabaseSchemaBaseline() *Task_DatabaseSchemaBaseline {
	if x != nil {
		if x, ok := x.Payload.(*Task_DatabaseSchemaBaseline_); ok {
			return x.DatabaseSchemaBaseline
		}
	}
	return nil
}

func (x *Task) GetDatabaseSchemaUpdate() *Task_DatabaseSchemaUpdate {
	if x != nil {
		if x, ok := x.Payload.(*Task_DatabaseSchemaUpdate_); ok {
			return x.DatabaseSchemaUpdate
		}
	}
	return nil
}

func (x *Task) GetDatabaseDataUpdate() *Task_DatabaseDataUpdate {
	if x != nil {
		if x, ok := x.Payload.(*Task_DatabaseDataUpdate_); ok {
			return x.DatabaseDataUpdate
		}
	}
	return nil
}

func (x *Task) GetDatabaseDataExport() *Task_DatabaseDataExport {
	if x != nil {
		if x, ok := x.Payload.(*Task_DatabaseDataExport_); ok {
			return x.DatabaseDataExport
		}
	}
	return nil
}

type isTask_Payload interface {
	isTask_Payload()
}

type Task_DatabaseCreate_ struct {
	DatabaseCreate *Task_DatabaseCreate `protobuf:"bytes,9,opt,name=database_create,json=databaseCreate,proto3,oneof"`
}

type Task_DatabaseSchemaBaseline_ struct {
	DatabaseSchemaBaseline *Task_DatabaseSchemaBaseline `protobuf:"bytes,10,opt,name=database_schema_baseline,json=databaseSchemaBaseline,proto3,oneof"`
}

type Task_DatabaseSchemaUpdate_ struct {
	DatabaseSchemaUpdate *Task_DatabaseSchemaUpdate `protobuf:"bytes,11,opt,name=database_schema_update,json=databaseSchemaUpdate,proto3,oneof"`
}

type Task_DatabaseDataUpdate_ struct {
	DatabaseDataUpdate *Task_DatabaseDataUpdate `protobuf:"bytes,12,opt,name=database_data_update,json=databaseDataUpdate,proto3,oneof"`
}

type Task_DatabaseDataExport_ struct {
	DatabaseDataExport *Task_DatabaseDataExport `protobuf:"bytes,16,opt,name=database_data_export,json=databaseDataExport,proto3,oneof"`
}

func (*Task_DatabaseCreate_) isTask_Payload() {}

func (*Task_DatabaseSchemaBaseline_) isTask_Payload() {}

func (*Task_DatabaseSchemaUpdate_) isTask_Payload() {}

func (*Task_DatabaseDataUpdate_) isTask_Payload() {}

func (*Task_DatabaseDataExport_) isTask_Payload() {}

type TaskRun struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Format: projects/{project}/rollouts/{rollout}/stages/{stage}/tasks/{task}/taskRuns/{taskRun}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Format: user/hello@world.com
	Creator string `protobuf:"bytes,3,opt,name=creator,proto3" json:"creator,omitempty"`
	// Format: user/hello@world.com
	Updater    string                 `protobuf:"bytes,4,opt,name=updater,proto3" json:"updater,omitempty"`
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=update_time,json=updateTime,proto3" json:"update_time,omitempty"`
	Title      string                 `protobuf:"bytes,7,opt,name=title,proto3" json:"title,omitempty"`
	Status     TaskRun_Status         `protobuf:"varint,8,opt,name=status,proto3,enum=bytebase.v1.TaskRun_Status" json:"status,omitempty"`
	// Below are the results of a task run.
	Detail string `protobuf:"bytes,9,opt,name=detail,proto3" json:"detail,omitempty"`
	// The resource name of the changelog.
	// Format: instances/{instance}/databases/{database}/changelogs/{changelog}
	Changelog           string                      `protobuf:"bytes,20,opt,name=changelog,proto3" json:"changelog,omitempty"`
	SchemaVersion       string                      `protobuf:"bytes,11,opt,name=schema_version,json=schemaVersion,proto3" json:"schema_version,omitempty"`
	StartTime           *timestamppb.Timestamp      `protobuf:"bytes,14,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	ExportArchiveStatus TaskRun_ExportArchiveStatus `protobuf:"varint,16,opt,name=export_archive_status,json=exportArchiveStatus,proto3,enum=bytebase.v1.TaskRun_ExportArchiveStatus" json:"export_archive_status,omitempty"`
	// The prior backup detail that will be used to rollback the task run.
	PriorBackupDetail *TaskRun_PriorBackupDetail `protobuf:"bytes,17,opt,name=prior_backup_detail,json=priorBackupDetail,proto3" json:"prior_backup_detail,omitempty"`
	SchedulerInfo     *TaskRun_SchedulerInfo     `protobuf:"bytes,18,opt,name=scheduler_info,json=schedulerInfo,proto3" json:"scheduler_info,omitempty"`
	// Format: projects/{project}/sheets/{sheet}
	Sheet         string `protobuf:"bytes,19,opt,name=sheet,proto3" json:"sheet,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskRun) Reset() {
	*x = TaskRun{}
	mi := &file_v1_rollout_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskRun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRun) ProtoMessage() {}

func (x *TaskRun) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRun.ProtoReflect.Descriptor instead.
func (*TaskRun) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{18}
}

func (x *TaskRun) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskRun) GetCreator() string {
	if x != nil {
		return x.Creator
	}
	return ""
}

func (x *TaskRun) GetUpdater() string {
	if x != nil {
		return x.Updater
	}
	return ""
}

func (x *TaskRun) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *TaskRun) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *TaskRun) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *TaskRun) GetStatus() TaskRun_Status {
	if x != nil {
		return x.Status
	}
	return TaskRun_STATUS_UNSPECIFIED
}

func (x *TaskRun) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

func (x *TaskRun) GetChangelog() string {
	if x != nil {
		return x.Changelog
	}
	return ""
}

func (x *TaskRun) GetSchemaVersion() string {
	if x != nil {
		return x.SchemaVersion
	}
	return ""
}

func (x *TaskRun) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *TaskRun) GetExportArchiveStatus() TaskRun_ExportArchiveStatus {
	if x != nil {
		return x.ExportArchiveStatus
	}
	return TaskRun_EXPORT_ARCHIVE_STATUS_UNSPECIFIED
}

func (x *TaskRun) GetPriorBackupDetail() *TaskRun_PriorBackupDetail {
	if x != nil {
		return x.PriorBackupDetail
	}
	return nil
}

func (x *TaskRun) GetSchedulerInfo() *TaskRun_SchedulerInfo {
	if x != nil {
		return x.SchedulerInfo
	}
	return nil
}

func (x *TaskRun) GetSheet() string {
	if x != nil {
		return x.Sheet
	}
	return ""
}

type TaskRunLog struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Format: projects/{project}/rollouts/{rollout}/stages/{stage}/tasks/{task}/taskRuns/{taskRun}/log
	Name          string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Entries       []*TaskRunLogEntry `protobuf:"bytes,2,rep,name=entries,proto3" json:"entries,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskRunLog) Reset() {
	*x = TaskRunLog{}
	mi := &file_v1_rollout_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskRunLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRunLog) ProtoMessage() {}

func (x *TaskRunLog) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRunLog.ProtoReflect.Descriptor instead.
func (*TaskRunLog) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{19}
}

func (x *TaskRunLog) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskRunLog) GetEntries() []*TaskRunLogEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type TaskRunLogEntry struct {
	state               protoimpl.MessageState               `protogen:"open.v1"`
	Type                TaskRunLogEntry_Type                 `protobuf:"varint,1,opt,name=type,proto3,enum=bytebase.v1.TaskRunLogEntry_Type" json:"type,omitempty"`
	LogTime             *timestamppb.Timestamp               `protobuf:"bytes,6,opt,name=log_time,json=logTime,proto3" json:"log_time,omitempty"`
	DeployId            string                               `protobuf:"bytes,12,opt,name=deploy_id,json=deployId,proto3" json:"deploy_id,omitempty"`
	SchemaDump          *TaskRunLogEntry_SchemaDump          `protobuf:"bytes,2,opt,name=schema_dump,json=schemaDump,proto3" json:"schema_dump,omitempty"`
	CommandExecute      *TaskRunLogEntry_CommandExecute      `protobuf:"bytes,3,opt,name=command_execute,json=commandExecute,proto3" json:"command_execute,omitempty"`
	DatabaseSync        *TaskRunLogEntry_DatabaseSync        `protobuf:"bytes,4,opt,name=database_sync,json=databaseSync,proto3" json:"database_sync,omitempty"`
	TaskRunStatusUpdate *TaskRunLogEntry_TaskRunStatusUpdate `protobuf:"bytes,5,opt,name=task_run_status_update,json=taskRunStatusUpdate,proto3" json:"task_run_status_update,omitempty"`
	TransactionControl  *TaskRunLogEntry_TransactionControl  `protobuf:"bytes,7,opt,name=transaction_control,json=transactionControl,proto3" json:"transaction_control,omitempty"`
	PriorBackup         *TaskRunLogEntry_PriorBackup         `protobuf:"bytes,8,opt,name=prior_backup,json=priorBackup,proto3" json:"prior_backup,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *TaskRunLogEntry) Reset() {
	*x = TaskRunLogEntry{}
	mi := &file_v1_rollout_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskRunLogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRunLogEntry) ProtoMessage() {}

func (x *TaskRunLogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRunLogEntry.ProtoReflect.Descriptor instead.
func (*TaskRunLogEntry) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{20}
}

func (x *TaskRunLogEntry) GetType() TaskRunLogEntry_Type {
	if x != nil {
		return x.Type
	}
	return TaskRunLogEntry_TYPE_UNSPECIFIED
}

func (x *TaskRunLogEntry) GetLogTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LogTime
	}
	return nil
}

func (x *TaskRunLogEntry) GetDeployId() string {
	if x != nil {
		return x.DeployId
	}
	return ""
}

func (x *TaskRunLogEntry) GetSchemaDump() *TaskRunLogEntry_SchemaDump {
	if x != nil {
		return x.SchemaDump
	}
	return nil
}

func (x *TaskRunLogEntry) GetCommandExecute() *TaskRunLogEntry_CommandExecute {
	if x != nil {
		return x.CommandExecute
	}
	return nil
}

func (x *TaskRunLogEntry) GetDatabaseSync() *TaskRunLogEntry_DatabaseSync {
	if x != nil {
		return x.DatabaseSync
	}
	return nil
}

func (x *TaskRunLogEntry) GetTaskRunStatusUpdate() *TaskRunLogEntry_TaskRunStatusUpdate {
	if x != nil {
		return x.TaskRunStatusUpdate
	}
	return nil
}

func (x *TaskRunLogEntry) GetTransactionControl() *TaskRunLogEntry_TransactionControl {
	if x != nil {
		return x.TransactionControl
	}
	return nil
}

func (x *TaskRunLogEntry) GetPriorBackup() *TaskRunLogEntry_PriorBackup {
	if x != nil {
		return x.PriorBackup
	}
	return nil
}

type GetTaskRunSessionRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Format: projects/{project}/rollouts/{rollout}/stages/{stage}/tasks/{task}/taskRuns/{taskRun}
	Parent        string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTaskRunSessionRequest) Reset() {
	*x = GetTaskRunSessionRequest{}
	mi := &file_v1_rollout_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTaskRunSessionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTaskRunSessionRequest) ProtoMessage() {}

func (x *GetTaskRunSessionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTaskRunSessionRequest.ProtoReflect.Descriptor instead.
func (*GetTaskRunSessionRequest) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{21}
}

func (x *GetTaskRunSessionRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

type TaskRunSession struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Format: projects/{project}/rollouts/{rollout}/stages/{stage}/tasks/{task}/taskRuns/{taskRun}/session
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are valid to be assigned to Session:
	//
	//	*TaskRunSession_Postgres_
	Session       isTaskRunSession_Session `protobuf_oneof:"session"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskRunSession) Reset() {
	*x = TaskRunSession{}
	mi := &file_v1_rollout_service_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskRunSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRunSession) ProtoMessage() {}

func (x *TaskRunSession) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRunSession.ProtoReflect.Descriptor instead.
func (*TaskRunSession) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{22}
}

func (x *TaskRunSession) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskRunSession) GetSession() isTaskRunSession_Session {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *TaskRunSession) GetPostgres() *TaskRunSession_Postgres {
	if x != nil {
		if x, ok := x.Session.(*TaskRunSession_Postgres_); ok {
			return x.Postgres
		}
	}
	return nil
}

type isTaskRunSession_Session interface {
	isTaskRunSession_Session()
}

type TaskRunSession_Postgres_ struct {
	Postgres *TaskRunSession_Postgres `protobuf:"bytes,2,opt,name=postgres,proto3,oneof"`
}

func (*TaskRunSession_Postgres_) isTaskRunSession_Session() {}

type PreviewTaskRunRollbackRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Format: projects/{project}/rollouts/{rollout}/stages/{stage}/tasks/{task}/taskRuns/{taskRun}
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PreviewTaskRunRollbackRequest) Reset() {
	*x = PreviewTaskRunRollbackRequest{}
	mi := &file_v1_rollout_service_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PreviewTaskRunRollbackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewTaskRunRollbackRequest) ProtoMessage() {}

func (x *PreviewTaskRunRollbackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewTaskRunRollbackRequest.ProtoReflect.Descriptor instead.
func (*PreviewTaskRunRollbackRequest) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{23}
}

func (x *PreviewTaskRunRollbackRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type PreviewTaskRunRollbackResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Statement     string                 `protobuf:"bytes,1,opt,name=statement,proto3" json:"statement,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PreviewTaskRunRollbackResponse) Reset() {
	*x = PreviewTaskRunRollbackResponse{}
	mi := &file_v1_rollout_service_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PreviewTaskRunRollbackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewTaskRunRollbackResponse) ProtoMessage() {}

func (x *PreviewTaskRunRollbackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewTaskRunRollbackResponse.ProtoReflect.Descriptor instead.
func (*PreviewTaskRunRollbackResponse) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{24}
}

func (x *PreviewTaskRunRollbackResponse) GetStatement() string {
	if x != nil {
		return x.Statement
	}
	return ""
}

type Task_DatabaseCreate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The project owning the database.
	// Format: projects/{project}
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// database name
	Database string `protobuf:"bytes,2,opt,name=database,proto3" json:"database,omitempty"`
	// table name
	Table string `protobuf:"bytes,3,opt,name=table,proto3" json:"table,omitempty"`
	// Format: projects/{project}/sheets/{sheet}
	Sheet         string            `protobuf:"bytes,4,opt,name=sheet,proto3" json:"sheet,omitempty"`
	CharacterSet  string            `protobuf:"bytes,5,opt,name=character_set,json=characterSet,proto3" json:"character_set,omitempty"`
	Collation     string            `protobuf:"bytes,6,opt,name=collation,proto3" json:"collation,omitempty"`
	Environment   string            `protobuf:"bytes,7,opt,name=environment,proto3" json:"environment,omitempty"`
	Labels        map[string]string `protobuf:"bytes,8,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Task_DatabaseCreate) Reset() {
	*x = Task_DatabaseCreate{}
	mi := &file_v1_rollout_service_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Task_DatabaseCreate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task_DatabaseCreate) ProtoMessage() {}

func (x *Task_DatabaseCreate) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task_DatabaseCreate.ProtoReflect.Descriptor instead.
func (*Task_DatabaseCreate) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{17, 0}
}

func (x *Task_DatabaseCreate) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *Task_DatabaseCreate) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *Task_DatabaseCreate) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *Task_DatabaseCreate) GetSheet() string {
	if x != nil {
		return x.Sheet
	}
	return ""
}

func (x *Task_DatabaseCreate) GetCharacterSet() string {
	if x != nil {
		return x.CharacterSet
	}
	return ""
}

func (x *Task_DatabaseCreate) GetCollation() string {
	if x != nil {
		return x.Collation
	}
	return ""
}

func (x *Task_DatabaseCreate) GetEnvironment() string {
	if x != nil {
		return x.Environment
	}
	return ""
}

func (x *Task_DatabaseCreate) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

type Task_DatabaseSchemaBaseline struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SchemaVersion string                 `protobuf:"bytes,1,opt,name=schema_version,json=schemaVersion,proto3" json:"schema_version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Task_DatabaseSchemaBaseline) Reset() {
	*x = Task_DatabaseSchemaBaseline{}
	mi := &file_v1_rollout_service_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Task_DatabaseSchemaBaseline) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task_DatabaseSchemaBaseline) ProtoMessage() {}

func (x *Task_DatabaseSchemaBaseline) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task_DatabaseSchemaBaseline.ProtoReflect.Descriptor instead.
func (*Task_DatabaseSchemaBaseline) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{17, 1}
}

func (x *Task_DatabaseSchemaBaseline) GetSchemaVersion() string {
	if x != nil {
		return x.SchemaVersion
	}
	return ""
}

type Task_DatabaseSchemaUpdate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Format: projects/{project}/sheets/{sheet}
	Sheet         string `protobuf:"bytes,1,opt,name=sheet,proto3" json:"sheet,omitempty"`
	SchemaVersion string `protobuf:"bytes,2,opt,name=schema_version,json=schemaVersion,proto3" json:"schema_version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Task_DatabaseSchemaUpdate) Reset() {
	*x = Task_DatabaseSchemaUpdate{}
	mi := &file_v1_rollout_service_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Task_DatabaseSchemaUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task_DatabaseSchemaUpdate) ProtoMessage() {}

func (x *Task_DatabaseSchemaUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task_DatabaseSchemaUpdate.ProtoReflect.Descriptor instead.
func (*Task_DatabaseSchemaUpdate) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{17, 2}
}

func (x *Task_DatabaseSchemaUpdate) GetSheet() string {
	if x != nil {
		return x.Sheet
	}
	return ""
}

func (x *Task_DatabaseSchemaUpdate) GetSchemaVersion() string {
	if x != nil {
		return x.SchemaVersion
	}
	return ""
}

type Task_DatabaseDataUpdate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Format: projects/{project}/sheets/{sheet}
	Sheet         string `protobuf:"bytes,1,opt,name=sheet,proto3" json:"sheet,omitempty"`
	SchemaVersion string `protobuf:"bytes,2,opt,name=schema_version,json=schemaVersion,proto3" json:"schema_version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Task_DatabaseDataUpdate) Reset() {
	*x = Task_DatabaseDataUpdate{}
	mi := &file_v1_rollout_service_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Task_DatabaseDataUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task_DatabaseDataUpdate) ProtoMessage() {}

func (x *Task_DatabaseDataUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task_DatabaseDataUpdate.ProtoReflect.Descriptor instead.
func (*Task_DatabaseDataUpdate) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{17, 3}
}

func (x *Task_DatabaseDataUpdate) GetSheet() string {
	if x != nil {
		return x.Sheet
	}
	return ""
}

func (x *Task_DatabaseDataUpdate) GetSchemaVersion() string {
	if x != nil {
		return x.SchemaVersion
	}
	return ""
}

type Task_DatabaseDataExport struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The resource name of the target.
	// Format: instances/{instance-id}/databases/{database-name}
	Target string `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	// The resource name of the sheet.
	// Format: projects/{project}/sheets/{sheet}
	Sheet string `protobuf:"bytes,2,opt,name=sheet,proto3" json:"sheet,omitempty"`
	// The format of the exported file.
	Format ExportFormat `protobuf:"varint,3,opt,name=format,proto3,enum=bytebase.v1.ExportFormat" json:"format,omitempty"`
	// The zip password provide by users.
	// Leave it empty if no needs to encrypt the zip file.
	Password      *string `protobuf:"bytes,4,opt,name=password,proto3,oneof" json:"password,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Task_DatabaseDataExport) Reset() {
	*x = Task_DatabaseDataExport{}
	mi := &file_v1_rollout_service_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Task_DatabaseDataExport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task_DatabaseDataExport) ProtoMessage() {}

func (x *Task_DatabaseDataExport) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task_DatabaseDataExport.ProtoReflect.Descriptor instead.
func (*Task_DatabaseDataExport) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{17, 4}
}

func (x *Task_DatabaseDataExport) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *Task_DatabaseDataExport) GetSheet() string {
	if x != nil {
		return x.Sheet
	}
	return ""
}

func (x *Task_DatabaseDataExport) GetFormat() ExportFormat {
	if x != nil {
		return x.Format
	}
	return ExportFormat_FORMAT_UNSPECIFIED
}

func (x *Task_DatabaseDataExport) GetPassword() string {
	if x != nil && x.Password != nil {
		return *x.Password
	}
	return ""
}

type TaskRun_PriorBackupDetail struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	Items         []*TaskRun_PriorBackupDetail_Item `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskRun_PriorBackupDetail) Reset() {
	*x = TaskRun_PriorBackupDetail{}
	mi := &file_v1_rollout_service_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskRun_PriorBackupDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRun_PriorBackupDetail) ProtoMessage() {}

func (x *TaskRun_PriorBackupDetail) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRun_PriorBackupDetail.ProtoReflect.Descriptor instead.
func (*TaskRun_PriorBackupDetail) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{18, 0}
}

func (x *TaskRun_PriorBackupDetail) GetItems() []*TaskRun_PriorBackupDetail_Item {
	if x != nil {
		return x.Items
	}
	return nil
}

type TaskRun_SchedulerInfo struct {
	state         protoimpl.MessageState              `protogen:"open.v1"`
	ReportTime    *timestamppb.Timestamp              `protobuf:"bytes,1,opt,name=report_time,json=reportTime,proto3" json:"report_time,omitempty"`
	WaitingCause  *TaskRun_SchedulerInfo_WaitingCause `protobuf:"bytes,2,opt,name=waiting_cause,json=waitingCause,proto3" json:"waiting_cause,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskRun_SchedulerInfo) Reset() {
	*x = TaskRun_SchedulerInfo{}
	mi := &file_v1_rollout_service_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskRun_SchedulerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRun_SchedulerInfo) ProtoMessage() {}

func (x *TaskRun_SchedulerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRun_SchedulerInfo.ProtoReflect.Descriptor instead.
func (*TaskRun_SchedulerInfo) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{18, 1}
}

func (x *TaskRun_SchedulerInfo) GetReportTime() *timestamppb.Timestamp {
	if x != nil {
		return x.ReportTime
	}
	return nil
}

func (x *TaskRun_SchedulerInfo) GetWaitingCause() *TaskRun_SchedulerInfo_WaitingCause {
	if x != nil {
		return x.WaitingCause
	}
	return nil
}

type TaskRun_PriorBackupDetail_Item struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The original table information.
	SourceTable *TaskRun_PriorBackupDetail_Item_Table `protobuf:"bytes,1,opt,name=source_table,json=sourceTable,proto3" json:"source_table,omitempty"`
	// The target backup table information.
	TargetTable   *TaskRun_PriorBackupDetail_Item_Table `protobuf:"bytes,2,opt,name=target_table,json=targetTable,proto3" json:"target_table,omitempty"`
	StartPosition *Position                             `protobuf:"bytes,3,opt,name=start_position,json=startPosition,proto3" json:"start_position,omitempty"`
	EndPosition   *Position                             `protobuf:"bytes,4,opt,name=end_position,json=endPosition,proto3" json:"end_position,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskRun_PriorBackupDetail_Item) Reset() {
	*x = TaskRun_PriorBackupDetail_Item{}
	mi := &file_v1_rollout_service_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskRun_PriorBackupDetail_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRun_PriorBackupDetail_Item) ProtoMessage() {}

func (x *TaskRun_PriorBackupDetail_Item) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRun_PriorBackupDetail_Item.ProtoReflect.Descriptor instead.
func (*TaskRun_PriorBackupDetail_Item) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{18, 0, 0}
}

func (x *TaskRun_PriorBackupDetail_Item) GetSourceTable() *TaskRun_PriorBackupDetail_Item_Table {
	if x != nil {
		return x.SourceTable
	}
	return nil
}

func (x *TaskRun_PriorBackupDetail_Item) GetTargetTable() *TaskRun_PriorBackupDetail_Item_Table {
	if x != nil {
		return x.TargetTable
	}
	return nil
}

func (x *TaskRun_PriorBackupDetail_Item) GetStartPosition() *Position {
	if x != nil {
		return x.StartPosition
	}
	return nil
}

func (x *TaskRun_PriorBackupDetail_Item) GetEndPosition() *Position {
	if x != nil {
		return x.EndPosition
	}
	return nil
}

type TaskRun_PriorBackupDetail_Item_Table struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The database information.
	// Format: instances/{instance}/databases/{database}
	Database      string `protobuf:"bytes,1,opt,name=database,proto3" json:"database,omitempty"`
	Schema        string `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
	Table         string `protobuf:"bytes,3,opt,name=table,proto3" json:"table,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskRun_PriorBackupDetail_Item_Table) Reset() {
	*x = TaskRun_PriorBackupDetail_Item_Table{}
	mi := &file_v1_rollout_service_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskRun_PriorBackupDetail_Item_Table) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRun_PriorBackupDetail_Item_Table) ProtoMessage() {}

func (x *TaskRun_PriorBackupDetail_Item_Table) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRun_PriorBackupDetail_Item_Table.ProtoReflect.Descriptor instead.
func (*TaskRun_PriorBackupDetail_Item_Table) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{18, 0, 0, 0}
}

func (x *TaskRun_PriorBackupDetail_Item_Table) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *TaskRun_PriorBackupDetail_Item_Table) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *TaskRun_PriorBackupDetail_Item_Table) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

type TaskRun_SchedulerInfo_WaitingCause struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Cause:
	//
	//	*TaskRun_SchedulerInfo_WaitingCause_ConnectionLimit
	//	*TaskRun_SchedulerInfo_WaitingCause_Task_
	Cause         isTaskRun_SchedulerInfo_WaitingCause_Cause `protobuf_oneof:"cause"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskRun_SchedulerInfo_WaitingCause) Reset() {
	*x = TaskRun_SchedulerInfo_WaitingCause{}
	mi := &file_v1_rollout_service_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskRun_SchedulerInfo_WaitingCause) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRun_SchedulerInfo_WaitingCause) ProtoMessage() {}

func (x *TaskRun_SchedulerInfo_WaitingCause) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRun_SchedulerInfo_WaitingCause.ProtoReflect.Descriptor instead.
func (*TaskRun_SchedulerInfo_WaitingCause) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{18, 1, 0}
}

func (x *TaskRun_SchedulerInfo_WaitingCause) GetCause() isTaskRun_SchedulerInfo_WaitingCause_Cause {
	if x != nil {
		return x.Cause
	}
	return nil
}

func (x *TaskRun_SchedulerInfo_WaitingCause) GetConnectionLimit() bool {
	if x != nil {
		if x, ok := x.Cause.(*TaskRun_SchedulerInfo_WaitingCause_ConnectionLimit); ok {
			return x.ConnectionLimit
		}
	}
	return false
}

func (x *TaskRun_SchedulerInfo_WaitingCause) GetTask() *TaskRun_SchedulerInfo_WaitingCause_Task {
	if x != nil {
		if x, ok := x.Cause.(*TaskRun_SchedulerInfo_WaitingCause_Task_); ok {
			return x.Task
		}
	}
	return nil
}

type isTaskRun_SchedulerInfo_WaitingCause_Cause interface {
	isTaskRun_SchedulerInfo_WaitingCause_Cause()
}

type TaskRun_SchedulerInfo_WaitingCause_ConnectionLimit struct {
	ConnectionLimit bool `protobuf:"varint,1,opt,name=connection_limit,json=connectionLimit,proto3,oneof"`
}

type TaskRun_SchedulerInfo_WaitingCause_Task_ struct {
	Task *TaskRun_SchedulerInfo_WaitingCause_Task `protobuf:"bytes,2,opt,name=task,proto3,oneof"`
}

func (*TaskRun_SchedulerInfo_WaitingCause_ConnectionLimit) isTaskRun_SchedulerInfo_WaitingCause_Cause() {
}

func (*TaskRun_SchedulerInfo_WaitingCause_Task_) isTaskRun_SchedulerInfo_WaitingCause_Cause() {}

type TaskRun_SchedulerInfo_WaitingCause_Task struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Format: projects/{project}/rollouts/{rollout}/stages/{stage}/tasks/{task}
	Task string `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	// Format: projects/{project}/issues/{issue}
	Issue         string `protobuf:"bytes,2,opt,name=issue,proto3" json:"issue,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskRun_SchedulerInfo_WaitingCause_Task) Reset() {
	*x = TaskRun_SchedulerInfo_WaitingCause_Task{}
	mi := &file_v1_rollout_service_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskRun_SchedulerInfo_WaitingCause_Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRun_SchedulerInfo_WaitingCause_Task) ProtoMessage() {}

func (x *TaskRun_SchedulerInfo_WaitingCause_Task) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRun_SchedulerInfo_WaitingCause_Task.ProtoReflect.Descriptor instead.
func (*TaskRun_SchedulerInfo_WaitingCause_Task) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{18, 1, 0, 0}
}

func (x *TaskRun_SchedulerInfo_WaitingCause_Task) GetTask() string {
	if x != nil {
		return x.Task
	}
	return ""
}

func (x *TaskRun_SchedulerInfo_WaitingCause_Task) GetIssue() string {
	if x != nil {
		return x.Issue
	}
	return ""
}

type TaskRunLogEntry_SchemaDump struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StartTime     *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime       *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Error         string                 `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskRunLogEntry_SchemaDump) Reset() {
	*x = TaskRunLogEntry_SchemaDump{}
	mi := &file_v1_rollout_service_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskRunLogEntry_SchemaDump) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRunLogEntry_SchemaDump) ProtoMessage() {}

func (x *TaskRunLogEntry_SchemaDump) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRunLogEntry_SchemaDump.ProtoReflect.Descriptor instead.
func (*TaskRunLogEntry_SchemaDump) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{20, 0}
}

func (x *TaskRunLogEntry_SchemaDump) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *TaskRunLogEntry_SchemaDump) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *TaskRunLogEntry_SchemaDump) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type TaskRunLogEntry_CommandExecute struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	LogTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=log_time,json=logTime,proto3" json:"log_time,omitempty"`
	// The indexes of the executed commands.
	CommandIndexes []int32                                         `protobuf:"varint,2,rep,packed,name=command_indexes,json=commandIndexes,proto3" json:"command_indexes,omitempty"`
	Response       *TaskRunLogEntry_CommandExecute_CommandResponse `protobuf:"bytes,3,opt,name=response,proto3" json:"response,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TaskRunLogEntry_CommandExecute) Reset() {
	*x = TaskRunLogEntry_CommandExecute{}
	mi := &file_v1_rollout_service_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskRunLogEntry_CommandExecute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRunLogEntry_CommandExecute) ProtoMessage() {}

func (x *TaskRunLogEntry_CommandExecute) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRunLogEntry_CommandExecute.ProtoReflect.Descriptor instead.
func (*TaskRunLogEntry_CommandExecute) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{20, 1}
}

func (x *TaskRunLogEntry_CommandExecute) GetLogTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LogTime
	}
	return nil
}

func (x *TaskRunLogEntry_CommandExecute) GetCommandIndexes() []int32 {
	if x != nil {
		return x.CommandIndexes
	}
	return nil
}

func (x *TaskRunLogEntry_CommandExecute) GetResponse() *TaskRunLogEntry_CommandExecute_CommandResponse {
	if x != nil {
		return x.Response
	}
	return nil
}

type TaskRunLogEntry_DatabaseSync struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StartTime     *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime       *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	Error         string                 `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskRunLogEntry_DatabaseSync) Reset() {
	*x = TaskRunLogEntry_DatabaseSync{}
	mi := &file_v1_rollout_service_proto_msgTypes[39]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskRunLogEntry_DatabaseSync) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRunLogEntry_DatabaseSync) ProtoMessage() {}

func (x *TaskRunLogEntry_DatabaseSync) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[39]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRunLogEntry_DatabaseSync.ProtoReflect.Descriptor instead.
func (*TaskRunLogEntry_DatabaseSync) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{20, 2}
}

func (x *TaskRunLogEntry_DatabaseSync) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *TaskRunLogEntry_DatabaseSync) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *TaskRunLogEntry_DatabaseSync) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type TaskRunLogEntry_TaskRunStatusUpdate struct {
	state         protoimpl.MessageState                     `protogen:"open.v1"`
	Status        TaskRunLogEntry_TaskRunStatusUpdate_Status `protobuf:"varint,1,opt,name=status,proto3,enum=bytebase.v1.TaskRunLogEntry_TaskRunStatusUpdate_Status" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskRunLogEntry_TaskRunStatusUpdate) Reset() {
	*x = TaskRunLogEntry_TaskRunStatusUpdate{}
	mi := &file_v1_rollout_service_proto_msgTypes[40]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskRunLogEntry_TaskRunStatusUpdate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRunLogEntry_TaskRunStatusUpdate) ProtoMessage() {}

func (x *TaskRunLogEntry_TaskRunStatusUpdate) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[40]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRunLogEntry_TaskRunStatusUpdate.ProtoReflect.Descriptor instead.
func (*TaskRunLogEntry_TaskRunStatusUpdate) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{20, 3}
}

func (x *TaskRunLogEntry_TaskRunStatusUpdate) GetStatus() TaskRunLogEntry_TaskRunStatusUpdate_Status {
	if x != nil {
		return x.Status
	}
	return TaskRunLogEntry_TaskRunStatusUpdate_STATUS_UNSPECIFIED
}

type TaskRunLogEntry_TransactionControl struct {
	state         protoimpl.MessageState                  `protogen:"open.v1"`
	Type          TaskRunLogEntry_TransactionControl_Type `protobuf:"varint,1,opt,name=type,proto3,enum=bytebase.v1.TaskRunLogEntry_TransactionControl_Type" json:"type,omitempty"`
	Error         string                                  `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskRunLogEntry_TransactionControl) Reset() {
	*x = TaskRunLogEntry_TransactionControl{}
	mi := &file_v1_rollout_service_proto_msgTypes[41]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskRunLogEntry_TransactionControl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRunLogEntry_TransactionControl) ProtoMessage() {}

func (x *TaskRunLogEntry_TransactionControl) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[41]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRunLogEntry_TransactionControl.ProtoReflect.Descriptor instead.
func (*TaskRunLogEntry_TransactionControl) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{20, 4}
}

func (x *TaskRunLogEntry_TransactionControl) GetType() TaskRunLogEntry_TransactionControl_Type {
	if x != nil {
		return x.Type
	}
	return TaskRunLogEntry_TransactionControl_TYPE_UNSPECIFIED
}

func (x *TaskRunLogEntry_TransactionControl) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type TaskRunLogEntry_PriorBackup struct {
	state             protoimpl.MessageState     `protogen:"open.v1"`
	StartTime         *timestamppb.Timestamp     `protobuf:"bytes,1,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime           *timestamppb.Timestamp     `protobuf:"bytes,2,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
	PriorBackupDetail *TaskRun_PriorBackupDetail `protobuf:"bytes,3,opt,name=prior_backup_detail,json=priorBackupDetail,proto3" json:"prior_backup_detail,omitempty"`
	Error             string                     `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *TaskRunLogEntry_PriorBackup) Reset() {
	*x = TaskRunLogEntry_PriorBackup{}
	mi := &file_v1_rollout_service_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskRunLogEntry_PriorBackup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRunLogEntry_PriorBackup) ProtoMessage() {}

func (x *TaskRunLogEntry_PriorBackup) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRunLogEntry_PriorBackup.ProtoReflect.Descriptor instead.
func (*TaskRunLogEntry_PriorBackup) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{20, 5}
}

func (x *TaskRunLogEntry_PriorBackup) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *TaskRunLogEntry_PriorBackup) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *TaskRunLogEntry_PriorBackup) GetPriorBackupDetail() *TaskRun_PriorBackupDetail {
	if x != nil {
		return x.PriorBackupDetail
	}
	return nil
}

func (x *TaskRunLogEntry_PriorBackup) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type TaskRunLogEntry_CommandExecute_CommandResponse struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	LogTime      *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=log_time,json=logTime,proto3" json:"log_time,omitempty"`
	Error        string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	AffectedRows int32                  `protobuf:"varint,3,opt,name=affected_rows,json=affectedRows,proto3" json:"affected_rows,omitempty"`
	// `all_affected_rows` is the affected rows of each command.
	// `all_affected_rows` may be unavailable if the database driver doesn't support it. Caller should fallback to `affected_rows` in that case.
	AllAffectedRows []int32 `protobuf:"varint,4,rep,packed,name=all_affected_rows,json=allAffectedRows,proto3" json:"all_affected_rows,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TaskRunLogEntry_CommandExecute_CommandResponse) Reset() {
	*x = TaskRunLogEntry_CommandExecute_CommandResponse{}
	mi := &file_v1_rollout_service_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskRunLogEntry_CommandExecute_CommandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRunLogEntry_CommandExecute_CommandResponse) ProtoMessage() {}

func (x *TaskRunLogEntry_CommandExecute_CommandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRunLogEntry_CommandExecute_CommandResponse.ProtoReflect.Descriptor instead.
func (*TaskRunLogEntry_CommandExecute_CommandResponse) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{20, 1, 0}
}

func (x *TaskRunLogEntry_CommandExecute_CommandResponse) GetLogTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LogTime
	}
	return nil
}

func (x *TaskRunLogEntry_CommandExecute_CommandResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *TaskRunLogEntry_CommandExecute_CommandResponse) GetAffectedRows() int32 {
	if x != nil {
		return x.AffectedRows
	}
	return 0
}

func (x *TaskRunLogEntry_CommandExecute_CommandResponse) GetAllAffectedRows() []int32 {
	if x != nil {
		return x.AllAffectedRows
	}
	return nil
}

type TaskRunSession_Postgres struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// `session` is the session of the task run executing commands.
	Session *TaskRunSession_Postgres_Session `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	// `blocking_sessions` block `session`.
	BlockingSessions []*TaskRunSession_Postgres_Session `protobuf:"bytes,2,rep,name=blocking_sessions,json=blockingSessions,proto3" json:"blocking_sessions,omitempty"`
	// `blocked_sessions` are blocked by `session`.
	BlockedSessions []*TaskRunSession_Postgres_Session `protobuf:"bytes,3,rep,name=blocked_sessions,json=blockedSessions,proto3" json:"blocked_sessions,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TaskRunSession_Postgres) Reset() {
	*x = TaskRunSession_Postgres{}
	mi := &file_v1_rollout_service_proto_msgTypes[44]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskRunSession_Postgres) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRunSession_Postgres) ProtoMessage() {}

func (x *TaskRunSession_Postgres) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[44]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRunSession_Postgres.ProtoReflect.Descriptor instead.
func (*TaskRunSession_Postgres) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{22, 0}
}

func (x *TaskRunSession_Postgres) GetSession() *TaskRunSession_Postgres_Session {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *TaskRunSession_Postgres) GetBlockingSessions() []*TaskRunSession_Postgres_Session {
	if x != nil {
		return x.BlockingSessions
	}
	return nil
}

func (x *TaskRunSession_Postgres) GetBlockedSessions() []*TaskRunSession_Postgres_Session {
	if x != nil {
		return x.BlockedSessions
	}
	return nil
}

// Read from `pg_stat_activity`
type TaskRunSession_Postgres_Session struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Pid             string                 `protobuf:"bytes,1,opt,name=pid,proto3" json:"pid,omitempty"`
	BlockedByPids   []string               `protobuf:"bytes,2,rep,name=blocked_by_pids,json=blockedByPids,proto3" json:"blocked_by_pids,omitempty"`
	Query           string                 `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
	State           *string                `protobuf:"bytes,4,opt,name=state,proto3,oneof" json:"state,omitempty"`
	WaitEventType   *string                `protobuf:"bytes,5,opt,name=wait_event_type,json=waitEventType,proto3,oneof" json:"wait_event_type,omitempty"`
	WaitEvent       *string                `protobuf:"bytes,6,opt,name=wait_event,json=waitEvent,proto3,oneof" json:"wait_event,omitempty"`
	Datname         *string                `protobuf:"bytes,7,opt,name=datname,proto3,oneof" json:"datname,omitempty"`
	Usename         *string                `protobuf:"bytes,8,opt,name=usename,proto3,oneof" json:"usename,omitempty"`
	ApplicationName string                 `protobuf:"bytes,9,opt,name=application_name,json=applicationName,proto3" json:"application_name,omitempty"`
	ClientAddr      *string                `protobuf:"bytes,10,opt,name=client_addr,json=clientAddr,proto3,oneof" json:"client_addr,omitempty"`
	ClientPort      *string                `protobuf:"bytes,11,opt,name=client_port,json=clientPort,proto3,oneof" json:"client_port,omitempty"`
	BackendStart    *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=backend_start,json=backendStart,proto3" json:"backend_start,omitempty"`
	XactStart       *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=xact_start,json=xactStart,proto3,oneof" json:"xact_start,omitempty"`
	QueryStart      *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=query_start,json=queryStart,proto3,oneof" json:"query_start,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TaskRunSession_Postgres_Session) Reset() {
	*x = TaskRunSession_Postgres_Session{}
	mi := &file_v1_rollout_service_proto_msgTypes[45]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskRunSession_Postgres_Session) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskRunSession_Postgres_Session) ProtoMessage() {}

func (x *TaskRunSession_Postgres_Session) ProtoReflect() protoreflect.Message {
	mi := &file_v1_rollout_service_proto_msgTypes[45]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskRunSession_Postgres_Session.ProtoReflect.Descriptor instead.
func (*TaskRunSession_Postgres_Session) Descriptor() ([]byte, []int) {
	return file_v1_rollout_service_proto_rawDescGZIP(), []int{22, 0, 0}
}

func (x *TaskRunSession_Postgres_Session) GetPid() string {
	if x != nil {
		return x.Pid
	}
	return ""
}

func (x *TaskRunSession_Postgres_Session) GetBlockedByPids() []string {
	if x != nil {
		return x.BlockedByPids
	}
	return nil
}

func (x *TaskRunSession_Postgres_Session) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *TaskRunSession_Postgres_Session) GetState() string {
	if x != nil && x.State != nil {
		return *x.State
	}
	return ""
}

func (x *TaskRunSession_Postgres_Session) GetWaitEventType() string {
	if x != nil && x.WaitEventType != nil {
		return *x.WaitEventType
	}
	return ""
}

func (x *TaskRunSession_Postgres_Session) GetWaitEvent() string {
	if x != nil && x.WaitEvent != nil {
		return *x.WaitEvent
	}
	return ""
}

func (x *TaskRunSession_Postgres_Session) GetDatname() string {
	if x != nil && x.Datname != nil {
		return *x.Datname
	}
	return ""
}

func (x *TaskRunSession_Postgres_Session) GetUsename() string {
	if x != nil && x.Usename != nil {
		return *x.Usename
	}
	return ""
}

func (x *TaskRunSession_Postgres_Session) GetApplicationName() string {
	if x != nil {
		return x.ApplicationName
	}
	return ""
}

func (x *TaskRunSession_Postgres_Session) GetClientAddr() string {
	if x != nil && x.ClientAddr != nil {
		return *x.ClientAddr
	}
	return ""
}

func (x *TaskRunSession_Postgres_Session) GetClientPort() string {
	if x != nil && x.ClientPort != nil {
		return *x.ClientPort
	}
	return ""
}

func (x *TaskRunSession_Postgres_Session) GetBackendStart() *timestamppb.Timestamp {
	if x != nil {
		return x.BackendStart
	}
	return nil
}

func (x *TaskRunSession_Postgres_Session) GetXactStart() *timestamppb.Timestamp {
	if x != nil {
		return x.XactStart
	}
	return nil
}

func (x *TaskRunSession_Postgres_Session) GetQueryStart() *timestamppb.Timestamp {
	if x != nil {
		return x.QueryStart
	}
	return nil
}

var File_v1_rollout_service_proto protoreflect.FileDescriptor

var file_v1_rollout_service_proto_rawDesc = string([]byte{
	0x0a, 0x18, 0x76, 0x31, 0x2f, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x62, 0x79, 0x74, 0x65,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x76, 0x31, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x15, 0x76, 0x31, 0x2f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5c, 0x0a, 0x14, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x75, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x73, 0x6b,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x17, 0x0a, 0x15, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x75, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x5d, 0x0a, 0x15, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x6b, 0x69, 0x70, 0x54, 0x61, 0x73, 0x6b,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x18,
	0x0a, 0x16, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53, 0x6b, 0x69, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x69, 0x0a, 0x1a, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x75, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x22, 0x1d, 0x0a, 0x1b, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x46, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x41, 0x16, 0x0a, 0x14,
	0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x6f, 0x6c,
	0x6c, 0x6f, 0x75, 0x74, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x88, 0x01, 0x0a, 0x13, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x35, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1d, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x41, 0x16, 0x0a, 0x14, 0x62, 0x79, 0x74,
	0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x70, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6c,
	0x6c, 0x6f, 0x75, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a,
	0x08, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f,
	0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x52, 0x08, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x73, 0x12,
	0x26, 0x0a, 0x0f, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61,
	0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xd5, 0x01, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x35, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1d, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x41, 0x16, 0x0a, 0x14, 0x62, 0x79, 0x74, 0x65, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x07, 0x72, 0x6f, 0x6c, 0x6c, 0x6f,
	0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x42, 0x04,
	0xe2, 0x41, 0x01, 0x02, 0x52, 0x07, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x12, 0x1e, 0x0a,
	0x08, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x07, 0x73, 0x74, 0x61, 0x67, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a,
	0x0d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x4f, 0x6e,
	0x6c, 0x79, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x22,
	0x77, 0x0a, 0x15, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xe2, 0x41, 0x01, 0x02, 0xfa,
	0x41, 0x16, 0x0a, 0x14, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x25, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c,
	0x61, 0x6e, 0x52, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x22, 0x85, 0x01, 0x0a, 0x13, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x32, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x1a, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x41, 0x13, 0x0a, 0x11, 0x62, 0x79, 0x74, 0x65, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x71, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x72, 0x75, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x62, 0x79,
	0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75,
	0x6e, 0x52, 0x08, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0x46, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x41, 0x16, 0x0a,
	0x14, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x75, 0x6e, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4d, 0x0a, 0x14, 0x47,
	0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x1d, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x41, 0x16, 0x0a, 0x14, 0x62, 0x79,
	0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x75, 0x6e, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0x83, 0x03, 0x0a, 0x07, 0x52,
	0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x04, 0x70, 0x6c,
	0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x04,
	0x70, 0x6c, 0x61, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x62, 0x79, 0x74,
	0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x07, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03,
	0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x05,
	0x69, 0x73, 0x73, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01,
	0x03, 0x52, 0x05, 0x69, 0x73, 0x73, 0x75, 0x65, 0x3a, 0x40, 0xea, 0x41, 0x3d, 0x0a, 0x14, 0x62,
	0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x52, 0x6f, 0x6c, 0x6c,
	0x6f, 0x75, 0x74, 0x12, 0x25, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x73,
	0x2f, 0x7b, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x7d, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03,
	0x22, 0xc5, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x74, 0x61,
	0x73, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x62, 0x79, 0x74, 0x65,
	0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x05, 0x74, 0x61,
	0x73, 0x6b, 0x73, 0x3a, 0x4d, 0xea, 0x41, 0x4a, 0x0a, 0x12, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x34, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d,
	0x2f, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x73, 0x2f, 0x7b, 0x72, 0x6f, 0x6c, 0x6c, 0x6f,
	0x75, 0x74, 0x7d, 0x2f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x7d, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0xcb, 0x0f, 0x0a, 0x04, 0x54, 0x61, 0x73,
	0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x73,
	0x70, 0x65, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x70,
	0x65, 0x63, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65,
	0x64, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2a, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x62, 0x79,
	0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x65, 0x70,
	0x65, 0x6e, 0x64, 0x73, 0x5f, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0e, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x73, 0x4f, 0x6e, 0x54, 0x61,
	0x73, 0x6b, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x4b, 0x0a, 0x0f, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x64, 0x0a, 0x18, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x62, 0x61, 0x73, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x79, 0x74,
	0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x42, 0x61, 0x73, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x16, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x42, 0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x5e,
	0x0a, 0x16, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x14, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x58,
	0x0a, 0x14, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62,
	0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x48, 0x00, 0x52, 0x12, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x44, 0x61,
	0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x58, 0x0a, 0x14, 0x64, 0x61, 0x74, 0x61,
	0x62, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x48, 0x00, 0x52, 0x12,
	0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x1a, 0xd8, 0x02, 0x0a, 0x0e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x65, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x68, 0x65, 0x65, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x53, 0x65, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x6e,
	0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x44, 0x0a, 0x06,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x62,
	0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x2e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a,
	0x16, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x42,
	0x61, 0x73, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x53,
	0x0a, 0x14, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x65, 0x65, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x68, 0x65, 0x65, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x1a, 0x51, 0x0a, 0x12, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x65,
	0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x68, 0x65, 0x65, 0x74, 0x12,
	0x25, 0x0a, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0xa3, 0x01, 0x0a, 0x12, 0x44, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x61, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x68, 0x65, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x68, 0x65, 0x65, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x62, 0x79,
	0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x1f,
	0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x88, 0x01, 0x01, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x7c, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f,
	0x0a, 0x0b, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07,
	0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x4f, 0x4e,
	0x45, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12,
	0x0c, 0x0a, 0x08, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x12, 0x0b, 0x0a,
	0x07, 0x53, 0x4b, 0x49, 0x50, 0x50, 0x45, 0x44, 0x10, 0x07, 0x22, 0x9d, 0x02, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x45, 0x4e,
	0x45, 0x52, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41,
	0x53, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x44,
	0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x5f, 0x42,
	0x41, 0x53, 0x45, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x41, 0x54,
	0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x5f, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x10, 0x04, 0x12, 0x1e, 0x0a, 0x1a, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53,
	0x45, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f,
	0x53, 0x44, 0x4c, 0x10, 0x05, 0x12, 0x25, 0x0a, 0x21, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53,
	0x45, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f,
	0x47, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x06, 0x12, 0x28, 0x0a, 0x24,
	0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x47, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x43, 0x55, 0x54,
	0x4f, 0x56, 0x45, 0x52, 0x10, 0x07, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41,
	0x53, 0x45, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x08,
	0x12, 0x18, 0x0a, 0x14, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x0c, 0x3a, 0x59, 0xea, 0x41, 0x56, 0x0a,
	0x11, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x54, 0x61,
	0x73, 0x6b, 0x12, 0x41, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x73, 0x2f,
	0x7b, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x7d, 0x2f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73,
	0x2f, 0x7b, 0x73, 0x74, 0x61, 0x67, 0x65, 0x7d, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2f, 0x7b,
	0x74, 0x61, 0x73, 0x6b, 0x7d, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0xe6, 0x0e, 0x0a, 0x07, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x75, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x6f, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x0b, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04, 0xe2, 0x41, 0x01,
	0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04,
	0xe2, 0x41, 0x01, 0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x22, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x6c, 0x6f, 0x67,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x09, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x6c, 0x6f, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3f,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x04,
	0xe2, 0x41, 0x01, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x5c, 0x0a, 0x15, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28,
	0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x75, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x41, 0x72, 0x63, 0x68, 0x69,
	0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x13, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x56, 0x0a,
	0x13, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x79, 0x74,
	0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e,
	0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x11, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x4f, 0x0a, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x75, 0x6e, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x05, 0x73, 0x68, 0x65, 0x65, 0x74, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x05, 0x73, 0x68, 0x65,
	0x65, 0x74, 0x1a, 0xd6, 0x03, 0x0a, 0x11, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x41, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x2e, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x1a, 0xfd, 0x02, 0x0a, 0x04,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x54, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x62, 0x79, 0x74,
	0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e,
	0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x0b, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x54, 0x0a, 0x0c, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x31, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x2e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x3c, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38,
	0x0a, 0x0c, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x65, 0x6e, 0x64,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x51, 0x0a, 0x05, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0xe7, 0x02, 0x0a, 0x0d,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3b, 0x0a,
	0x0b, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x54, 0x0a, 0x0d, 0x77, 0x61,
	0x69, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x75, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x75,
	0x73, 0x65, 0x52, 0x0c, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x75, 0x73, 0x65,
	0x1a, 0xc2, 0x01, 0x0a, 0x0c, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x75, 0x73,
	0x65, 0x12, 0x2b, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0f, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x4a,
	0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x62,
	0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x75, 0x6e, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x2e, 0x57, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x75, 0x73, 0x65, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x48, 0x00, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x1a, 0x30, 0x0a, 0x04, 0x54, 0x61,
	0x73, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x73, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x73, 0x73, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05,
	0x63, 0x61, 0x75, 0x73, 0x65, 0x22, 0x5e, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49,
	0x4e, 0x47, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10,
	0x02, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x46,
	0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x41, 0x4e, 0x43, 0x45,
	0x4c, 0x45, 0x44, 0x10, 0x05, 0x22, 0x55, 0x0a, 0x13, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x41,
	0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x21,
	0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x5f, 0x41, 0x52, 0x43, 0x48, 0x49, 0x56, 0x45, 0x5f, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x01, 0x12, 0x0c,
	0x0a, 0x08, 0x45, 0x58, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x02, 0x3a, 0x6f, 0xea, 0x41,
	0x6c, 0x0a, 0x14, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x12, 0x54, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x72, 0x6f, 0x6c, 0x6c,
	0x6f, 0x75, 0x74, 0x73, 0x2f, 0x7b, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x7d, 0x2f, 0x73,
	0x74, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x74, 0x61, 0x67, 0x65, 0x7d, 0x2f, 0x74, 0x61,
	0x73, 0x6b, 0x73, 0x2f, 0x7b, 0x74, 0x61, 0x73, 0x6b, 0x7d, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x52,
	0x75, 0x6e, 0x73, 0x2f, 0x7b, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x7d, 0x4a, 0x04, 0x08,
	0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x0c, 0x10, 0x0d, 0x4a, 0x04, 0x08, 0x0f, 0x10, 0x10, 0x22,
	0xd0, 0x01, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x3a, 0x76, 0xea, 0x41, 0x73, 0x0a,
	0x17, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x75, 0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x58, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f, 0x72, 0x6f, 0x6c,
	0x6c, 0x6f, 0x75, 0x74, 0x73, 0x2f, 0x7b, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x7d, 0x2f,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x7b, 0x73, 0x74, 0x61, 0x67, 0x65, 0x7d, 0x2f, 0x74,
	0x61, 0x73, 0x6b, 0x73, 0x2f, 0x7b, 0x74, 0x61, 0x73, 0x6b, 0x7d, 0x2f, 0x74, 0x61, 0x73, 0x6b,
	0x52, 0x75, 0x6e, 0x73, 0x2f, 0x7b, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x7d, 0x2f, 0x6c,
	0x6f, 0x67, 0x22, 0xce, 0x10, 0x0a, 0x0f, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x4c, 0x6f,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a,
	0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x6c, 0x6f, 0x67,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x49,
	0x64, 0x12, 0x48, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x64, 0x75, 0x6d, 0x70,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x4c, 0x6f, 0x67, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x44, 0x75, 0x6d, 0x70, 0x52,
	0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x44, 0x75, 0x6d, 0x70, 0x12, 0x54, 0x0a, 0x0f, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x12, 0x4e, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x79,
	0x6e, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62,
	0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x4c, 0x6f,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53,
	0x79, 0x6e, 0x63, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x79, 0x6e,
	0x63, 0x12, 0x65, 0x0a, 0x16, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x13, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x60, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x4c, 0x6f, 0x67, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x12, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x4b, 0x0a, 0x0c, 0x70, 0x72,
	0x69, 0x6f, 0x72, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x6f,
	0x72, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x1a, 0x94, 0x01, 0x0a, 0x0a, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x44, 0x75, 0x6d, 0x70, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0xfb,
	0x02, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x12, 0x35, 0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x07, 0x6c, 0x6f, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x65,
	0x73, 0x12, 0x57, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0xaf, 0x01, 0x0a, 0x0f, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35,
	0x0a, 0x08, 0x6c, 0x6f, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x6c, 0x6f,
	0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x23, 0x0a, 0x0d, 0x61,
	0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x77, 0x73,
	0x12, 0x2a, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x5f, 0x61, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64,
	0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0f, 0x61, 0x6c, 0x6c,
	0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x77, 0x73, 0x1a, 0x96, 0x01, 0x0a,
	0x0c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x39, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x1a, 0xb2, 0x01, 0x0a, 0x13, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x4f, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e,
	0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x75, 0x6e, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x4a,
	0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x13, 0x0a, 0x0f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x5f, 0x57, 0x41, 0x49, 0x54,
	0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47,
	0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x1a, 0xb7, 0x01, 0x0a, 0x12, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x12, 0x48, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x34, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x75, 0x6e, 0x4c, 0x6f, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0x41, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x42, 0x45, 0x47, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4f,
	0x4d, 0x4d, 0x49, 0x54, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x4f, 0x4c, 0x4c, 0x42, 0x41,
	0x43, 0x4b, 0x10, 0x03, 0x1a, 0xed, 0x01, 0x0a, 0x0b, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x35, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x56, 0x0a, 0x13, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x5f,
	0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x42,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x11, 0x70, 0x72, 0x69,
	0x6f, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0x9c, 0x01, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x10, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x5f, 0x44, 0x55,
	0x4d, 0x50, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44, 0x5f,
	0x45, 0x58, 0x45, 0x43, 0x55, 0x54, 0x45, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x41, 0x54,
	0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x59, 0x4e, 0x43, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16,
	0x54, 0x41, 0x53, 0x4b, 0x5f, 0x52, 0x55, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x10,
	0x05, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x52, 0x49, 0x4f, 0x52, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x55,
	0x50, 0x10, 0x06, 0x22, 0x51, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75,
	0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x35, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1d, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x41, 0x16, 0x0a, 0x14, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x22, 0xc0, 0x09, 0x0a, 0x0e, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x75, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a,
	0x08, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x75, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x73,
	0x74, 0x67, 0x72, 0x65, 0x73, 0x48, 0x00, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65,
	0x73, 0x1a, 0xca, 0x07, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x12, 0x46,
	0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x75, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x73,
	0x74, 0x67, 0x72, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x59, 0x0a, 0x11, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x50,
	0x6f, 0x73, 0x74, 0x67, 0x72, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x10, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x57, 0x0a, 0x10, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x62, 0x79,
	0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75,
	0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65,
	0x73, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0xc1, 0x05, 0x0a, 0x07, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x70, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0d, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x42, 0x79, 0x50, 0x69, 0x64, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x19, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x2b, 0x0a, 0x0f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0d, 0x77, 0x61,
	0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x02, 0x52, 0x09, 0x77, 0x61, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x07, 0x64, 0x61, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1d, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x04, 0x52, 0x07, 0x75, 0x73, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x29, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0b, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x05, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x64, 0x64, 0x72, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x50, 0x6f, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x78, 0x61, 0x63, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x07, 0x52, 0x09, 0x78, 0x61, 0x63, 0x74,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x0b, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x08, 0x52, 0x0a, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x77, 0x61, 0x69,
	0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x64, 0x61, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x42,
	0x0d, 0x0a, 0x0b, 0x5f, 0x78, 0x61, 0x63, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x3a, 0x7e,
	0xea, 0x41, 0x7b, 0x0a, 0x1b, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x5c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x7d, 0x2f, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x73, 0x2f, 0x7b, 0x72,
	0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x7d, 0x2f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x7b,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x7d, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2f, 0x7b, 0x74, 0x61,
	0x73, 0x6b, 0x7d, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x73, 0x2f, 0x7b, 0x74, 0x61,
	0x73, 0x6b, 0x52, 0x75, 0x6e, 0x7d, 0x2f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x09,
	0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x52, 0x0a, 0x1d, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x52, 0x6f, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x41,
	0x16, 0x0a, 0x14, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3e, 0x0a,
	0x1e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x52,
	0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x32, 0x92, 0x11,
	0x0a, 0x0e, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x8a, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x12,
	0x1e, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x14, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f,
	0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x22, 0x46, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x8a, 0xea,
	0x30, 0x0f, 0x62, 0x62, 0x2e, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x67, 0x65,
	0x74, 0x90, 0xea, 0x30, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x76, 0x31,
	0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f,
	0x2a, 0x2f, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0x9e, 0x01,
	0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x73, 0x12, 0x20,
	0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x49, 0xda, 0x41, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x8a, 0xea,
	0x30, 0x10, 0x62, 0x62, 0x2e, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x6c, 0x69,
	0x73, 0x74, 0x90, 0xea, 0x30, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x12, 0x20, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x73, 0x12, 0xaa,
	0x01, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74,
	0x12, 0x21, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x22, 0x60, 0xda, 0x41, 0x0e, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x2c, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x8a, 0xea, 0x30, 0x12,
	0x62, 0x62, 0x2e, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x73, 0x2e, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x90, 0xea, 0x30, 0x01, 0x98, 0xea, 0x30, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x2b,
	0x3a, 0x07, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x22, 0x20, 0x2f, 0x76, 0x31, 0x2f, 0x7b,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f,
	0x2a, 0x7d, 0x2f, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x73, 0x12, 0xa0, 0x01, 0x0a, 0x0e,
	0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x12, 0x22,
	0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x14, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x22, 0x54, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x8a, 0xea, 0x30, 0x13, 0x62, 0x62, 0x2e, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x73,
	0x2e, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x90, 0xea, 0x30, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x2c, 0x3a, 0x01, 0x2a, 0x22, 0x27, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x7d, 0x3a,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x12, 0xba,
	0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x73, 0x12,
	0x20, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x21, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x65, 0xda, 0x41, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x8a,
	0xea, 0x30, 0x10, 0x62, 0x62, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x73, 0x2e, 0x6c,
	0x69, 0x73, 0x74, 0x90, 0xea, 0x30, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3e, 0x12, 0x3c, 0x2f,
	0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x73, 0x2f, 0x2a,
	0x2f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2f,
	0x2a, 0x7d, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x73, 0x12, 0xa7, 0x01, 0x0a, 0x0a,
	0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x12, 0x1e, 0x2e, 0x62, 0x79, 0x74,
	0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x75, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x62, 0x79, 0x74,
	0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e,
	0x22, 0x63, 0xda, 0x41, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x8a, 0xea, 0x30, 0x10, 0x62, 0x62, 0x2e,
	0x74, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x73, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x90, 0xea, 0x30,
	0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3e, 0x12, 0x3c, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61,
	0x6d, 0x65, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x6f,
	0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x2f,
	0x2a, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2f, 0x2a, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x75,
	0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x12, 0xb8, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73,
	0x6b, 0x52, 0x75, 0x6e, 0x4c, 0x6f, 0x67, 0x12, 0x21, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61,
	0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e,
	0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x62, 0x79, 0x74,
	0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e,
	0x4c, 0x6f, 0x67, 0x22, 0x6b, 0xda, 0x41, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x8a, 0xea,
	0x30, 0x10, 0x62, 0x62, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x73, 0x2e, 0x6c, 0x69,
	0x73, 0x74, 0x90, 0xea, 0x30, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x44, 0x12, 0x42, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x73, 0x2f, 0x2a, 0x2f,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2f, 0x2a,
	0x2f, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x6c, 0x6f, 0x67,
	0x12, 0xc8, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e,
	0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x75, 0x6e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x6f, 0xda, 0x41, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x8a, 0xea, 0x30, 0x10, 0x62, 0x62, 0x2e, 0x74, 0x61, 0x73, 0x6b,
	0x52, 0x75, 0x6e, 0x73, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x90, 0xea, 0x30, 0x01, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x48, 0x12, 0x46, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x6f, 0x6c, 0x6c,
	0x6f, 0x75, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x2a, 0x2f,
	0x74, 0x61, 0x73, 0x6b, 0x73, 0x2f, 0x2a, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x73,
	0x2f, 0x2a, 0x7d, 0x2f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0xaa, 0x01, 0x0a, 0x0d,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x75, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x21, 0x2e,
	0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x52, 0x75, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x22, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x75, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x52, 0xda, 0x41, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x90,
	0xea, 0x30, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x3f, 0x3a, 0x01, 0x2a, 0x22, 0x3a, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x73, 0x2f, 0x2a, 0x2f,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x3a,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x52, 0x75, 0x6e, 0x12, 0xae, 0x01, 0x0a, 0x0e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x53, 0x6b, 0x69, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x22, 0x2e, 0x62, 0x79,
	0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x6b, 0x69, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x23, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x53, 0x6b, 0x69, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x53, 0xda, 0x41, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x90,
	0xea, 0x30, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x40, 0x3a, 0x01, 0x2a, 0x22, 0x3b, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x73, 0x2f, 0x2a, 0x2f,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x2a, 0x7d, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x3a,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x6b, 0x69, 0x70, 0x12, 0xca, 0x01, 0x0a, 0x13, 0x42, 0x61,
	0x74, 0x63, 0x68, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e,
	0x73, 0x12, 0x27, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x75, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x62, 0x79, 0x74,
	0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x60, 0xda, 0x41, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x90,
	0xea, 0x30, 0x02, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x4d, 0x3a, 0x01, 0x2a, 0x22, 0x48, 0x2f, 0x76,
	0x31, 0x2f, 0x7b, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x3d, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x6f, 0x6c, 0x6c, 0x6f, 0x75, 0x74, 0x73, 0x2f, 0x2a, 0x2f,
	0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x2f, 0x2a,
	0x7d, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x73, 0x3a, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0xe9, 0x01, 0x0a, 0x16, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x12, 0x2a, 0x2e, 0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x52, 0x6f,
	0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e,
	0x62, 0x79, 0x74, 0x65, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x76, 0xda, 0x41, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x8a, 0xea, 0x30, 0x10, 0x62, 0x62, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x75,
	0x6e, 0x73, 0x2e, 0x6c, 0x69, 0x73, 0x74, 0x90, 0xea, 0x30, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x51, 0x3a, 0x01, 0x2a, 0x22, 0x4c, 0x2f, 0x76, 0x31, 0x2f, 0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x3d,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x72, 0x6f, 0x6c, 0x6c, 0x6f,
	0x75, 0x74, 0x73, 0x2f, 0x2a, 0x2f, 0x73, 0x74, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x2a, 0x2f, 0x74,
	0x61, 0x73, 0x6b, 0x73, 0x2f, 0x2a, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x75, 0x6e, 0x73, 0x2f,
	0x2a, 0x7d, 0x3a, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x52, 0x6f, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x42, 0x11, 0x5a, 0x0f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2d,
	0x67, 0x6f, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_v1_rollout_service_proto_rawDescOnce sync.Once
	file_v1_rollout_service_proto_rawDescData []byte
)

func file_v1_rollout_service_proto_rawDescGZIP() []byte {
	file_v1_rollout_service_proto_rawDescOnce.Do(func() {
		file_v1_rollout_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_v1_rollout_service_proto_rawDesc), len(file_v1_rollout_service_proto_rawDesc)))
	})
	return file_v1_rollout_service_proto_rawDescData
}

var file_v1_rollout_service_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_v1_rollout_service_proto_msgTypes = make([]protoimpl.MessageInfo, 46)
var file_v1_rollout_service_proto_goTypes = []any{
	(Task_Status)(0),                                       // 0: bytebase.v1.Task.Status
	(Task_Type)(0),                                         // 1: bytebase.v1.Task.Type
	(TaskRun_Status)(0),                                    // 2: bytebase.v1.TaskRun.Status
	(TaskRun_ExportArchiveStatus)(0),                       // 3: bytebase.v1.TaskRun.ExportArchiveStatus
	(TaskRunLogEntry_Type)(0),                              // 4: bytebase.v1.TaskRunLogEntry.Type
	(TaskRunLogEntry_TaskRunStatusUpdate_Status)(0),        // 5: bytebase.v1.TaskRunLogEntry.TaskRunStatusUpdate.Status
	(TaskRunLogEntry_TransactionControl_Type)(0),           // 6: bytebase.v1.TaskRunLogEntry.TransactionControl.Type
	(*BatchRunTasksRequest)(nil),                           // 7: bytebase.v1.BatchRunTasksRequest
	(*BatchRunTasksResponse)(nil),                          // 8: bytebase.v1.BatchRunTasksResponse
	(*BatchSkipTasksRequest)(nil),                          // 9: bytebase.v1.BatchSkipTasksRequest
	(*BatchSkipTasksResponse)(nil),                         // 10: bytebase.v1.BatchSkipTasksResponse
	(*BatchCancelTaskRunsRequest)(nil),                     // 11: bytebase.v1.BatchCancelTaskRunsRequest
	(*BatchCancelTaskRunsResponse)(nil),                    // 12: bytebase.v1.BatchCancelTaskRunsResponse
	(*GetRolloutRequest)(nil),                              // 13: bytebase.v1.GetRolloutRequest
	(*ListRolloutsRequest)(nil),                            // 14: bytebase.v1.ListRolloutsRequest
	(*ListRolloutsResponse)(nil),                           // 15: bytebase.v1.ListRolloutsResponse
	(*CreateRolloutRequest)(nil),                           // 16: bytebase.v1.CreateRolloutRequest
	(*PreviewRolloutRequest)(nil),                          // 17: bytebase.v1.PreviewRolloutRequest
	(*ListTaskRunsRequest)(nil),                            // 18: bytebase.v1.ListTaskRunsRequest
	(*ListTaskRunsResponse)(nil),                           // 19: bytebase.v1.ListTaskRunsResponse
	(*GetTaskRunRequest)(nil),                              // 20: bytebase.v1.GetTaskRunRequest
	(*GetTaskRunLogRequest)(nil),                           // 21: bytebase.v1.GetTaskRunLogRequest
	(*Rollout)(nil),                                        // 22: bytebase.v1.Rollout
	(*Stage)(nil),                                          // 23: bytebase.v1.Stage
	(*Task)(nil),                                           // 24: bytebase.v1.Task
	(*TaskRun)(nil),                                        // 25: bytebase.v1.TaskRun
	(*TaskRunLog)(nil),                                     // 26: bytebase.v1.TaskRunLog
	(*TaskRunLogEntry)(nil),                                // 27: bytebase.v1.TaskRunLogEntry
	(*GetTaskRunSessionRequest)(nil),                       // 28: bytebase.v1.GetTaskRunSessionRequest
	(*TaskRunSession)(nil),                                 // 29: bytebase.v1.TaskRunSession
	(*PreviewTaskRunRollbackRequest)(nil),                  // 30: bytebase.v1.PreviewTaskRunRollbackRequest
	(*PreviewTaskRunRollbackResponse)(nil),                 // 31: bytebase.v1.PreviewTaskRunRollbackResponse
	(*Task_DatabaseCreate)(nil),                            // 32: bytebase.v1.Task.DatabaseCreate
	(*Task_DatabaseSchemaBaseline)(nil),                    // 33: bytebase.v1.Task.DatabaseSchemaBaseline
	(*Task_DatabaseSchemaUpdate)(nil),                      // 34: bytebase.v1.Task.DatabaseSchemaUpdate
	(*Task_DatabaseDataUpdate)(nil),                        // 35: bytebase.v1.Task.DatabaseDataUpdate
	(*Task_DatabaseDataExport)(nil),                        // 36: bytebase.v1.Task.DatabaseDataExport
	nil,                                                    // 37: bytebase.v1.Task.DatabaseCreate.LabelsEntry
	(*TaskRun_PriorBackupDetail)(nil),                      // 38: bytebase.v1.TaskRun.PriorBackupDetail
	(*TaskRun_SchedulerInfo)(nil),                          // 39: bytebase.v1.TaskRun.SchedulerInfo
	(*TaskRun_PriorBackupDetail_Item)(nil),                 // 40: bytebase.v1.TaskRun.PriorBackupDetail.Item
	(*TaskRun_PriorBackupDetail_Item_Table)(nil),           // 41: bytebase.v1.TaskRun.PriorBackupDetail.Item.Table
	(*TaskRun_SchedulerInfo_WaitingCause)(nil),             // 42: bytebase.v1.TaskRun.SchedulerInfo.WaitingCause
	(*TaskRun_SchedulerInfo_WaitingCause_Task)(nil),        // 43: bytebase.v1.TaskRun.SchedulerInfo.WaitingCause.Task
	(*TaskRunLogEntry_SchemaDump)(nil),                     // 44: bytebase.v1.TaskRunLogEntry.SchemaDump
	(*TaskRunLogEntry_CommandExecute)(nil),                 // 45: bytebase.v1.TaskRunLogEntry.CommandExecute
	(*TaskRunLogEntry_DatabaseSync)(nil),                   // 46: bytebase.v1.TaskRunLogEntry.DatabaseSync
	(*TaskRunLogEntry_TaskRunStatusUpdate)(nil),            // 47: bytebase.v1.TaskRunLogEntry.TaskRunStatusUpdate
	(*TaskRunLogEntry_TransactionControl)(nil),             // 48: bytebase.v1.TaskRunLogEntry.TransactionControl
	(*TaskRunLogEntry_PriorBackup)(nil),                    // 49: bytebase.v1.TaskRunLogEntry.PriorBackup
	(*TaskRunLogEntry_CommandExecute_CommandResponse)(nil), // 50: bytebase.v1.TaskRunLogEntry.CommandExecute.CommandResponse
	(*TaskRunSession_Postgres)(nil),                        // 51: bytebase.v1.TaskRunSession.Postgres
	(*TaskRunSession_Postgres_Session)(nil),                // 52: bytebase.v1.TaskRunSession.Postgres.Session
	(*Plan)(nil),                                           // 53: bytebase.v1.Plan
	(*timestamppb.Timestamp)(nil),                          // 54: google.protobuf.Timestamp
	(ExportFormat)(0),                                      // 55: bytebase.v1.ExportFormat
	(*Position)(nil),                                       // 56: bytebase.v1.Position
}
var file_v1_rollout_service_proto_depIdxs = []int32{
	22, // 0: bytebase.v1.ListRolloutsResponse.rollouts:type_name -> bytebase.v1.Rollout
	22, // 1: bytebase.v1.CreateRolloutRequest.rollout:type_name -> bytebase.v1.Rollout
	53, // 2: bytebase.v1.PreviewRolloutRequest.plan:type_name -> bytebase.v1.Plan
	25, // 3: bytebase.v1.ListTaskRunsResponse.task_runs:type_name -> bytebase.v1.TaskRun
	23, // 4: bytebase.v1.Rollout.stages:type_name -> bytebase.v1.Stage
	54, // 5: bytebase.v1.Rollout.create_time:type_name -> google.protobuf.Timestamp
	54, // 6: bytebase.v1.Rollout.update_time:type_name -> google.protobuf.Timestamp
	24, // 7: bytebase.v1.Stage.tasks:type_name -> bytebase.v1.Task
	0,  // 8: bytebase.v1.Task.status:type_name -> bytebase.v1.Task.Status
	1,  // 9: bytebase.v1.Task.type:type_name -> bytebase.v1.Task.Type
	32, // 10: bytebase.v1.Task.database_create:type_name -> bytebase.v1.Task.DatabaseCreate
	33, // 11: bytebase.v1.Task.database_schema_baseline:type_name -> bytebase.v1.Task.DatabaseSchemaBaseline
	34, // 12: bytebase.v1.Task.database_schema_update:type_name -> bytebase.v1.Task.DatabaseSchemaUpdate
	35, // 13: bytebase.v1.Task.database_data_update:type_name -> bytebase.v1.Task.DatabaseDataUpdate
	36, // 14: bytebase.v1.Task.database_data_export:type_name -> bytebase.v1.Task.DatabaseDataExport
	54, // 15: bytebase.v1.TaskRun.create_time:type_name -> google.protobuf.Timestamp
	54, // 16: bytebase.v1.TaskRun.update_time:type_name -> google.protobuf.Timestamp
	2,  // 17: bytebase.v1.TaskRun.status:type_name -> bytebase.v1.TaskRun.Status
	54, // 18: bytebase.v1.TaskRun.start_time:type_name -> google.protobuf.Timestamp
	3,  // 19: bytebase.v1.TaskRun.export_archive_status:type_name -> bytebase.v1.TaskRun.ExportArchiveStatus
	38, // 20: bytebase.v1.TaskRun.prior_backup_detail:type_name -> bytebase.v1.TaskRun.PriorBackupDetail
	39, // 21: bytebase.v1.TaskRun.scheduler_info:type_name -> bytebase.v1.TaskRun.SchedulerInfo
	27, // 22: bytebase.v1.TaskRunLog.entries:type_name -> bytebase.v1.TaskRunLogEntry
	4,  // 23: bytebase.v1.TaskRunLogEntry.type:type_name -> bytebase.v1.TaskRunLogEntry.Type
	54, // 24: bytebase.v1.TaskRunLogEntry.log_time:type_name -> google.protobuf.Timestamp
	44, // 25: bytebase.v1.TaskRunLogEntry.schema_dump:type_name -> bytebase.v1.TaskRunLogEntry.SchemaDump
	45, // 26: bytebase.v1.TaskRunLogEntry.command_execute:type_name -> bytebase.v1.TaskRunLogEntry.CommandExecute
	46, // 27: bytebase.v1.TaskRunLogEntry.database_sync:type_name -> bytebase.v1.TaskRunLogEntry.DatabaseSync
	47, // 28: bytebase.v1.TaskRunLogEntry.task_run_status_update:type_name -> bytebase.v1.TaskRunLogEntry.TaskRunStatusUpdate
	48, // 29: bytebase.v1.TaskRunLogEntry.transaction_control:type_name -> bytebase.v1.TaskRunLogEntry.TransactionControl
	49, // 30: bytebase.v1.TaskRunLogEntry.prior_backup:type_name -> bytebase.v1.TaskRunLogEntry.PriorBackup
	51, // 31: bytebase.v1.TaskRunSession.postgres:type_name -> bytebase.v1.TaskRunSession.Postgres
	37, // 32: bytebase.v1.Task.DatabaseCreate.labels:type_name -> bytebase.v1.Task.DatabaseCreate.LabelsEntry
	55, // 33: bytebase.v1.Task.DatabaseDataExport.format:type_name -> bytebase.v1.ExportFormat
	40, // 34: bytebase.v1.TaskRun.PriorBackupDetail.items:type_name -> bytebase.v1.TaskRun.PriorBackupDetail.Item
	54, // 35: bytebase.v1.TaskRun.SchedulerInfo.report_time:type_name -> google.protobuf.Timestamp
	42, // 36: bytebase.v1.TaskRun.SchedulerInfo.waiting_cause:type_name -> bytebase.v1.TaskRun.SchedulerInfo.WaitingCause
	41, // 37: bytebase.v1.TaskRun.PriorBackupDetail.Item.source_table:type_name -> bytebase.v1.TaskRun.PriorBackupDetail.Item.Table
	41, // 38: bytebase.v1.TaskRun.PriorBackupDetail.Item.target_table:type_name -> bytebase.v1.TaskRun.PriorBackupDetail.Item.Table
	56, // 39: bytebase.v1.TaskRun.PriorBackupDetail.Item.start_position:type_name -> bytebase.v1.Position
	56, // 40: bytebase.v1.TaskRun.PriorBackupDetail.Item.end_position:type_name -> bytebase.v1.Position
	43, // 41: bytebase.v1.TaskRun.SchedulerInfo.WaitingCause.task:type_name -> bytebase.v1.TaskRun.SchedulerInfo.WaitingCause.Task
	54, // 42: bytebase.v1.TaskRunLogEntry.SchemaDump.start_time:type_name -> google.protobuf.Timestamp
	54, // 43: bytebase.v1.TaskRunLogEntry.SchemaDump.end_time:type_name -> google.protobuf.Timestamp
	54, // 44: bytebase.v1.TaskRunLogEntry.CommandExecute.log_time:type_name -> google.protobuf.Timestamp
	50, // 45: bytebase.v1.TaskRunLogEntry.CommandExecute.response:type_name -> bytebase.v1.TaskRunLogEntry.CommandExecute.CommandResponse
	54, // 46: bytebase.v1.TaskRunLogEntry.DatabaseSync.start_time:type_name -> google.protobuf.Timestamp
	54, // 47: bytebase.v1.TaskRunLogEntry.DatabaseSync.end_time:type_name -> google.protobuf.Timestamp
	5,  // 48: bytebase.v1.TaskRunLogEntry.TaskRunStatusUpdate.status:type_name -> bytebase.v1.TaskRunLogEntry.TaskRunStatusUpdate.Status
	6,  // 49: bytebase.v1.TaskRunLogEntry.TransactionControl.type:type_name -> bytebase.v1.TaskRunLogEntry.TransactionControl.Type
	54, // 50: bytebase.v1.TaskRunLogEntry.PriorBackup.start_time:type_name -> google.protobuf.Timestamp
	54, // 51: bytebase.v1.TaskRunLogEntry.PriorBackup.end_time:type_name -> google.protobuf.Timestamp
	38, // 52: bytebase.v1.TaskRunLogEntry.PriorBackup.prior_backup_detail:type_name -> bytebase.v1.TaskRun.PriorBackupDetail
	54, // 53: bytebase.v1.TaskRunLogEntry.CommandExecute.CommandResponse.log_time:type_name -> google.protobuf.Timestamp
	52, // 54: bytebase.v1.TaskRunSession.Postgres.session:type_name -> bytebase.v1.TaskRunSession.Postgres.Session
	52, // 55: bytebase.v1.TaskRunSession.Postgres.blocking_sessions:type_name -> bytebase.v1.TaskRunSession.Postgres.Session
	52, // 56: bytebase.v1.TaskRunSession.Postgres.blocked_sessions:type_name -> bytebase.v1.TaskRunSession.Postgres.Session
	54, // 57: bytebase.v1.TaskRunSession.Postgres.Session.backend_start:type_name -> google.protobuf.Timestamp
	54, // 58: bytebase.v1.TaskRunSession.Postgres.Session.xact_start:type_name -> google.protobuf.Timestamp
	54, // 59: bytebase.v1.TaskRunSession.Postgres.Session.query_start:type_name -> google.protobuf.Timestamp
	13, // 60: bytebase.v1.RolloutService.GetRollout:input_type -> bytebase.v1.GetRolloutRequest
	14, // 61: bytebase.v1.RolloutService.ListRollouts:input_type -> bytebase.v1.ListRolloutsRequest
	16, // 62: bytebase.v1.RolloutService.CreateRollout:input_type -> bytebase.v1.CreateRolloutRequest
	17, // 63: bytebase.v1.RolloutService.PreviewRollout:input_type -> bytebase.v1.PreviewRolloutRequest
	18, // 64: bytebase.v1.RolloutService.ListTaskRuns:input_type -> bytebase.v1.ListTaskRunsRequest
	20, // 65: bytebase.v1.RolloutService.GetTaskRun:input_type -> bytebase.v1.GetTaskRunRequest
	21, // 66: bytebase.v1.RolloutService.GetTaskRunLog:input_type -> bytebase.v1.GetTaskRunLogRequest
	28, // 67: bytebase.v1.RolloutService.GetTaskRunSession:input_type -> bytebase.v1.GetTaskRunSessionRequest
	7,  // 68: bytebase.v1.RolloutService.BatchRunTasks:input_type -> bytebase.v1.BatchRunTasksRequest
	9,  // 69: bytebase.v1.RolloutService.BatchSkipTasks:input_type -> bytebase.v1.BatchSkipTasksRequest
	11, // 70: bytebase.v1.RolloutService.BatchCancelTaskRuns:input_type -> bytebase.v1.BatchCancelTaskRunsRequest
	30, // 71: bytebase.v1.RolloutService.PreviewTaskRunRollback:input_type -> bytebase.v1.PreviewTaskRunRollbackRequest
	22, // 72: bytebase.v1.RolloutService.GetRollout:output_type -> bytebase.v1.Rollout
	15, // 73: bytebase.v1.RolloutService.ListRollouts:output_type -> bytebase.v1.ListRolloutsResponse
	22, // 74: bytebase.v1.RolloutService.CreateRollout:output_type -> bytebase.v1.Rollout
	22, // 75: bytebase.v1.RolloutService.PreviewRollout:output_type -> bytebase.v1.Rollout
	19, // 76: bytebase.v1.RolloutService.ListTaskRuns:output_type -> bytebase.v1.ListTaskRunsResponse
	25, // 77: bytebase.v1.RolloutService.GetTaskRun:output_type -> bytebase.v1.TaskRun
	26, // 78: bytebase.v1.RolloutService.GetTaskRunLog:output_type -> bytebase.v1.TaskRunLog
	29, // 79: bytebase.v1.RolloutService.GetTaskRunSession:output_type -> bytebase.v1.TaskRunSession
	8,  // 80: bytebase.v1.RolloutService.BatchRunTasks:output_type -> bytebase.v1.BatchRunTasksResponse
	10, // 81: bytebase.v1.RolloutService.BatchSkipTasks:output_type -> bytebase.v1.BatchSkipTasksResponse
	12, // 82: bytebase.v1.RolloutService.BatchCancelTaskRuns:output_type -> bytebase.v1.BatchCancelTaskRunsResponse
	31, // 83: bytebase.v1.RolloutService.PreviewTaskRunRollback:output_type -> bytebase.v1.PreviewTaskRunRollbackResponse
	72, // [72:84] is the sub-list for method output_type
	60, // [60:72] is the sub-list for method input_type
	60, // [60:60] is the sub-list for extension type_name
	60, // [60:60] is the sub-list for extension extendee
	0,  // [0:60] is the sub-list for field type_name
}

func init() { file_v1_rollout_service_proto_init() }
func file_v1_rollout_service_proto_init() {
	if File_v1_rollout_service_proto != nil {
		return
	}
	file_v1_annotation_proto_init()
	file_v1_common_proto_init()
	file_v1_plan_service_proto_init()
	file_v1_rollout_service_proto_msgTypes[9].OneofWrappers = []any{}
	file_v1_rollout_service_proto_msgTypes[17].OneofWrappers = []any{
		(*Task_DatabaseCreate_)(nil),
		(*Task_DatabaseSchemaBaseline_)(nil),
		(*Task_DatabaseSchemaUpdate_)(nil),
		(*Task_DatabaseDataUpdate_)(nil),
		(*Task_DatabaseDataExport_)(nil),
	}
	file_v1_rollout_service_proto_msgTypes[22].OneofWrappers = []any{
		(*TaskRunSession_Postgres_)(nil),
	}
	file_v1_rollout_service_proto_msgTypes[29].OneofWrappers = []any{}
	file_v1_rollout_service_proto_msgTypes[35].OneofWrappers = []any{
		(*TaskRun_SchedulerInfo_WaitingCause_ConnectionLimit)(nil),
		(*TaskRun_SchedulerInfo_WaitingCause_Task_)(nil),
	}
	file_v1_rollout_service_proto_msgTypes[45].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_v1_rollout_service_proto_rawDesc), len(file_v1_rollout_service_proto_rawDesc)),
			NumEnums:      7,
			NumMessages:   46,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v1_rollout_service_proto_goTypes,
		DependencyIndexes: file_v1_rollout_service_proto_depIdxs,
		EnumInfos:         file_v1_rollout_service_proto_enumTypes,
		MessageInfos:      file_v1_rollout_service_proto_msgTypes,
	}.Build()
	File_v1_rollout_service_proto = out.File
	file_v1_rollout_service_proto_goTypes = nil
	file_v1_rollout_service_proto_depIdxs = nil
}
