// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: api/v1alpha/project_service.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Webhook_Type int32

const (
	Webhook_TYPE_UNSPECIFIED Webhook_Type = 0
	Webhook_SLACK            Webhook_Type = 1
	Webhook_DISCORD          Webhook_Type = 2
	Webhook_TEAMS            Webhook_Type = 3
	Webhook_DINGTALK         Webhook_Type = 4
	Webhook_FEISHU           Webhook_Type = 5
	Webhook_WECOM            Webhook_Type = 6
	Webhook_LARK             Webhook_Type = 8
)

// Enum value maps for Webhook_Type.
var (
	Webhook_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "SLACK",
		2: "DISCORD",
		3: "TEAMS",
		4: "DINGTALK",
		5: "FEISHU",
		6: "WECOM",
		8: "LARK",
	}
	Webhook_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"SLACK":            1,
		"DISCORD":          2,
		"TEAMS":            3,
		"DINGTALK":         4,
		"FEISHU":           5,
		"WECOM":            6,
		"LARK":             8,
	}
)

func (x Webhook_Type) Enum() *Webhook_Type {
	p := new(Webhook_Type)
	*p = x
	return p
}

func (x Webhook_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Webhook_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v1alpha_project_service_proto_enumTypes[0].Descriptor()
}

func (Webhook_Type) Type() protoreflect.EnumType {
	return &file_api_v1alpha_project_service_proto_enumTypes[0]
}

func (x Webhook_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Webhook_Type.Descriptor instead.
func (Webhook_Type) EnumDescriptor() ([]byte, []int) {
	return file_api_v1alpha_project_service_proto_rawDescGZIP(), []int{18, 0}
}

type Activity_Type int32

const (
	Activity_TYPE_UNSPECIFIED Activity_Type = 0
	// Notifications via webhooks.
	//
	// TYPE_NOTIFY_ISSUE_APPROVED represents the issue approved notification.
	Activity_TYPE_NOTIFY_ISSUE_APPROVED Activity_Type = 23
	// TYPE_NOTIFY_PIPELINE_ROLLOUT represents the pipeline rollout notification.
	Activity_TYPE_NOTIFY_PIPELINE_ROLLOUT Activity_Type = 24
	// Issue related activity types.
	//
	// TYPE_ISSUE_CREATE represents creating an issue.
	Activity_TYPE_ISSUE_CREATE Activity_Type = 1
	// TYPE_ISSUE_COMMENT_CREATE represents commenting on an issue.
	Activity_TYPE_ISSUE_COMMENT_CREATE Activity_Type = 2
	// TYPE_ISSUE_FIELD_UPDATE represents updating the issue field, likes title, description, etc.
	Activity_TYPE_ISSUE_FIELD_UPDATE Activity_Type = 3
	// TYPE_ISSUE_STATUS_UPDATE represents the issue status change, including OPEN, CLOSE, CANCEL fow now.
	Activity_TYPE_ISSUE_STATUS_UPDATE Activity_Type = 4
	// TYPE_ISSUE_APPROVAL_NOTIFY is the type for notifying issue approval.
	Activity_TYPE_ISSUE_APPROVAL_NOTIFY Activity_Type = 21
	// TYPE_ISSUE_PIPELINE_STAGE_STATUS_UPDATE represents the pipeline stage status change, including BEGIN, END for now.
	Activity_TYPE_ISSUE_PIPELINE_STAGE_STATUS_UPDATE Activity_Type = 5
	// TYPE_ISSUE_PIPELINE_TASK_STATUS_UPDATE represents the pipeline task status change, including PENDING, PENDING_APPROVAL, RUNNING, SUCCESS, FAILURE, CANCELED for now.
	Activity_TYPE_ISSUE_PIPELINE_TASK_STATUS_UPDATE Activity_Type = 6
	// TYPE_ISSUE_PIPELINE_TASK_RUN_STATUS_UPDATE represents the pipeline task run status change, including PENDING, RUNNING, DONE, FAILED, CANCELED.
	Activity_TYPE_ISSUE_PIPELINE_TASK_RUN_STATUS_UPDATE Activity_Type = 22
	// TYPE_ISSUE_PIPELINE_TASK_STATEMENT_UPDATE represents the manual update of the task statement.
	Activity_TYPE_ISSUE_PIPELINE_TASK_STATEMENT_UPDATE Activity_Type = 8
	// TYPE_ISSUE_PIPELINE_TASK_EARLIEST_ALLOWED_TIME_UPDATE represents the manual update of the task earliest allowed time.
	Activity_TYPE_ISSUE_PIPELINE_TASK_EARLIEST_ALLOWED_TIME_UPDATE Activity_Type = 9
	// Member related activity types.
	//
	// TYPE_MEMBER_CREATE represents creating a members.
	Activity_TYPE_MEMBER_CREATE Activity_Type = 10
	// TYPE_MEMBER_ROLE_UPDATE represents updating the member role, for example, from ADMIN to MEMBER.
	Activity_TYPE_MEMBER_ROLE_UPDATE Activity_Type = 11
	// TYPE_MEMBER_ACTIVATE represents activating a deactivated member.
	Activity_TYPE_MEMBER_ACTIVATE Activity_Type = 12
	// TYPE_MEMBER_DEACTIVATE represents deactivating an active member.
	Activity_TYPE_MEMBER_DEACTIVATE Activity_Type = 13
	// Project related activity types.
	//
	// TYPE_PROJECT_REPOSITORY_PUSH represents Bytebase receiving a push event from the project repository.
	Activity_TYPE_PROJECT_REPOSITORY_PUSH Activity_Type = 14
	// TYPE_PROJECT_DATABASE_TRANFER represents transfering the database from one project to another.
	Activity_TYPE_PROJECT_DATABASE_TRANSFER Activity_Type = 15
	// TYPE_PROJECT_MEMBER_CREATE represents adding a member to the project.
	Activity_TYPE_PROJECT_MEMBER_CREATE Activity_Type = 16
	// TYPE_PROJECT_MEMBER_DELETE represents removing a member from the project.
	Activity_TYPE_PROJECT_MEMBER_DELETE Activity_Type = 17
	// SQL Editor related activity types.
	// TYPE_SQL_EDITOR_QUERY represents executing query in SQL Editor.
	Activity_TYPE_SQL_EDITOR_QUERY Activity_Type = 19
)

// Enum value maps for Activity_Type.
var (
	Activity_Type_name = map[int32]string{
		0:  "TYPE_UNSPECIFIED",
		23: "TYPE_NOTIFY_ISSUE_APPROVED",
		24: "TYPE_NOTIFY_PIPELINE_ROLLOUT",
		1:  "TYPE_ISSUE_CREATE",
		2:  "TYPE_ISSUE_COMMENT_CREATE",
		3:  "TYPE_ISSUE_FIELD_UPDATE",
		4:  "TYPE_ISSUE_STATUS_UPDATE",
		21: "TYPE_ISSUE_APPROVAL_NOTIFY",
		5:  "TYPE_ISSUE_PIPELINE_STAGE_STATUS_UPDATE",
		6:  "TYPE_ISSUE_PIPELINE_TASK_STATUS_UPDATE",
		22: "TYPE_ISSUE_PIPELINE_TASK_RUN_STATUS_UPDATE",
		8:  "TYPE_ISSUE_PIPELINE_TASK_STATEMENT_UPDATE",
		9:  "TYPE_ISSUE_PIPELINE_TASK_EARLIEST_ALLOWED_TIME_UPDATE",
		10: "TYPE_MEMBER_CREATE",
		11: "TYPE_MEMBER_ROLE_UPDATE",
		12: "TYPE_MEMBER_ACTIVATE",
		13: "TYPE_MEMBER_DEACTIVATE",
		14: "TYPE_PROJECT_REPOSITORY_PUSH",
		15: "TYPE_PROJECT_DATABASE_TRANSFER",
		16: "TYPE_PROJECT_MEMBER_CREATE",
		17: "TYPE_PROJECT_MEMBER_DELETE",
		19: "TYPE_SQL_EDITOR_QUERY",
	}
	Activity_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED":                                      0,
		"TYPE_NOTIFY_ISSUE_APPROVED":                            23,
		"TYPE_NOTIFY_PIPELINE_ROLLOUT":                          24,
		"TYPE_ISSUE_CREATE":                                     1,
		"TYPE_ISSUE_COMMENT_CREATE":                             2,
		"TYPE_ISSUE_FIELD_UPDATE":                               3,
		"TYPE_ISSUE_STATUS_UPDATE":                              4,
		"TYPE_ISSUE_APPROVAL_NOTIFY":                            21,
		"TYPE_ISSUE_PIPELINE_STAGE_STATUS_UPDATE":               5,
		"TYPE_ISSUE_PIPELINE_TASK_STATUS_UPDATE":                6,
		"TYPE_ISSUE_PIPELINE_TASK_RUN_STATUS_UPDATE":            22,
		"TYPE_ISSUE_PIPELINE_TASK_STATEMENT_UPDATE":             8,
		"TYPE_ISSUE_PIPELINE_TASK_EARLIEST_ALLOWED_TIME_UPDATE": 9,
		"TYPE_MEMBER_CREATE":                                    10,
		"TYPE_MEMBER_ROLE_UPDATE":                               11,
		"TYPE_MEMBER_ACTIVATE":                                  12,
		"TYPE_MEMBER_DEACTIVATE":                                13,
		"TYPE_PROJECT_REPOSITORY_PUSH":                          14,
		"TYPE_PROJECT_DATABASE_TRANSFER":                        15,
		"TYPE_PROJECT_MEMBER_CREATE":                            16,
		"TYPE_PROJECT_MEMBER_DELETE":                            17,
		"TYPE_SQL_EDITOR_QUERY":                                 19,
	}
)

func (x Activity_Type) Enum() *Activity_Type {
	p := new(Activity_Type)
	*p = x
	return p
}

func (x Activity_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Activity_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_api_v1alpha_project_service_proto_enumTypes[1].Descriptor()
}

func (Activity_Type) Type() protoreflect.EnumType {
	return &file_api_v1alpha_project_service_proto_enumTypes[1]
}

func (x Activity_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Activity_Type.Descriptor instead.
func (Activity_Type) EnumDescriptor() ([]byte, []int) {
	return file_api_v1alpha_project_service_proto_rawDescGZIP(), []int{19, 0}
}

type GetProjectRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the project to retrieve.
	// Format: projects/{project}
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetProjectRequest) Reset() {
	*x = GetProjectRequest{}
	mi := &file_api_v1alpha_project_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProjectRequest) ProtoMessage() {}

func (x *GetProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha_project_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProjectRequest.ProtoReflect.Descriptor instead.
func (*GetProjectRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha_project_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetProjectRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListProjectsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The maximum number of projects to return. The service may return fewer than
	// this value.
	// If unspecified, at most 10 projects will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,1,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `ListProjects` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `ListProjects` must match
	// the call that provided the page token.
	PageToken string `protobuf:"bytes,2,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Show deleted projects if specified.
	ShowDeleted bool `protobuf:"varint,3,opt,name=show_deleted,json=showDeleted,proto3" json:"show_deleted,omitempty"`
	// Filter the project.
	// Check filter for SearchProjectsRequest for details.
	Filter        string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListProjectsRequest) Reset() {
	*x = ListProjectsRequest{}
	mi := &file_api_v1alpha_project_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListProjectsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProjectsRequest) ProtoMessage() {}

func (x *ListProjectsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha_project_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProjectsRequest.ProtoReflect.Descriptor instead.
func (*ListProjectsRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha_project_service_proto_rawDescGZIP(), []int{1}
}

func (x *ListProjectsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListProjectsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

func (x *ListProjectsRequest) GetShowDeleted() bool {
	if x != nil {
		return x.ShowDeleted
	}
	return false
}

func (x *ListProjectsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type ListProjectsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The projects from the specified request.
	Projects []*Project `protobuf:"bytes,1,rep,name=projects,proto3" json:"projects,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListProjectsResponse) Reset() {
	*x = ListProjectsResponse{}
	mi := &file_api_v1alpha_project_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListProjectsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListProjectsResponse) ProtoMessage() {}

func (x *ListProjectsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha_project_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListProjectsResponse.ProtoReflect.Descriptor instead.
func (*ListProjectsResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha_project_service_proto_rawDescGZIP(), []int{2}
}

func (x *ListProjectsResponse) GetProjects() []*Project {
	if x != nil {
		return x.Projects
	}
	return nil
}

func (x *ListProjectsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type SearchProjectsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Show deleted projects if specified.
	ShowDeleted bool `protobuf:"varint,1,opt,name=show_deleted,json=showDeleted,proto3" json:"show_deleted,omitempty"`
	// Filter the project.
	// Supported filters:
	// - name
	// - resource_id
	// - exclude_default: if not include the default project.
	// - state
	//
	// For example:
	// name = "project name"
	// name.matches("project name")
	// resource_id = "project id"
	// resource_id.matches("project id")
	// exclude_default == true
	// state == "DELETED"
	// You can combine filter conditions like:
	// name = "project name" && resource_id.matches("project id")
	// name.matches("project name") || resource_id = "project id"
	Filter string `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	// The maximum number of projects to return. The service may return fewer than
	// this value.
	// If unspecified, at most 10 projects will be returned.
	// The maximum value is 1000; values above 1000 will be coerced to 1000.
	PageSize int32 `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// A page token, received from a previous `SearchProjects` call.
	// Provide this to retrieve the subsequent page.
	//
	// When paginating, all other parameters provided to `SearchProjects` must match
	// the call that provided the page token.
	PageToken     string `protobuf:"bytes,4,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchProjectsRequest) Reset() {
	*x = SearchProjectsRequest{}
	mi := &file_api_v1alpha_project_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchProjectsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchProjectsRequest) ProtoMessage() {}

func (x *SearchProjectsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha_project_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchProjectsRequest.ProtoReflect.Descriptor instead.
func (*SearchProjectsRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha_project_service_proto_rawDescGZIP(), []int{3}
}

func (x *SearchProjectsRequest) GetShowDeleted() bool {
	if x != nil {
		return x.ShowDeleted
	}
	return false
}

func (x *SearchProjectsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

func (x *SearchProjectsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *SearchProjectsRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type SearchProjectsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The projects from the specified request.
	Projects []*Project `protobuf:"bytes,1,rep,name=projects,proto3" json:"projects,omitempty"`
	// A token, which can be sent as `page_token` to retrieve the next page.
	// If this field is omitted, there are no subsequent pages.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SearchProjectsResponse) Reset() {
	*x = SearchProjectsResponse{}
	mi := &file_api_v1alpha_project_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SearchProjectsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchProjectsResponse) ProtoMessage() {}

func (x *SearchProjectsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha_project_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchProjectsResponse.ProtoReflect.Descriptor instead.
func (*SearchProjectsResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha_project_service_proto_rawDescGZIP(), []int{4}
}

func (x *SearchProjectsResponse) GetProjects() []*Project {
	if x != nil {
		return x.Projects
	}
	return nil
}

func (x *SearchProjectsResponse) GetNextPageToken() string {
	if x != nil {
		return x.NextPageToken
	}
	return ""
}

type CreateProjectRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The project to create.
	Project *Project `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// The ID to use for the project, which will become the final component of
	// the project's resource name.
	//
	// This value should be 4-63 characters, and valid characters
	// are /[a-z][0-9]-/.
	ProjectId     string `protobuf:"bytes,2,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateProjectRequest) Reset() {
	*x = CreateProjectRequest{}
	mi := &file_api_v1alpha_project_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateProjectRequest) ProtoMessage() {}

func (x *CreateProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha_project_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateProjectRequest.ProtoReflect.Descriptor instead.
func (*CreateProjectRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha_project_service_proto_rawDescGZIP(), []int{5}
}

func (x *CreateProjectRequest) GetProject() *Project {
	if x != nil {
		return x.Project
	}
	return nil
}

func (x *CreateProjectRequest) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

type UpdateProjectRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The project to update.
	//
	// The project's `name` field is used to identify the project to update.
	// Format: projects/{project}
	Project *Project `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// The list of fields to update.
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateProjectRequest) Reset() {
	*x = UpdateProjectRequest{}
	mi := &file_api_v1alpha_project_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateProjectRequest) ProtoMessage() {}

func (x *UpdateProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha_project_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateProjectRequest.ProtoReflect.Descriptor instead.
func (*UpdateProjectRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha_project_service_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateProjectRequest) GetProject() *Project {
	if x != nil {
		return x.Project
	}
	return nil
}

func (x *UpdateProjectRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type DeleteProjectRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the project to delete.
	// Format: projects/{project}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// If set to true, any databases and sheets from this project will also be moved to default project, and all open issues will be closed.
	Force         bool `protobuf:"varint,2,opt,name=force,proto3" json:"force,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteProjectRequest) Reset() {
	*x = DeleteProjectRequest{}
	mi := &file_api_v1alpha_project_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteProjectRequest) ProtoMessage() {}

func (x *DeleteProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha_project_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteProjectRequest.ProtoReflect.Descriptor instead.
func (*DeleteProjectRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha_project_service_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteProjectRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteProjectRequest) GetForce() bool {
	if x != nil {
		return x.Force
	}
	return false
}

type UndeleteProjectRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the deleted project.
	// Format: projects/{project}
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UndeleteProjectRequest) Reset() {
	*x = UndeleteProjectRequest{}
	mi := &file_api_v1alpha_project_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UndeleteProjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UndeleteProjectRequest) ProtoMessage() {}

func (x *UndeleteProjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha_project_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UndeleteProjectRequest.ProtoReflect.Descriptor instead.
func (*UndeleteProjectRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha_project_service_proto_rawDescGZIP(), []int{8}
}

func (x *UndeleteProjectRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type BatchGetIamPolicyRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The scope of the batch get. Typically it's "projects/-".
	Scope         string   `protobuf:"bytes,1,opt,name=scope,proto3" json:"scope,omitempty"`
	Names         []string `protobuf:"bytes,2,rep,name=names,proto3" json:"names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchGetIamPolicyRequest) Reset() {
	*x = BatchGetIamPolicyRequest{}
	mi := &file_api_v1alpha_project_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchGetIamPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetIamPolicyRequest) ProtoMessage() {}

func (x *BatchGetIamPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha_project_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetIamPolicyRequest.ProtoReflect.Descriptor instead.
func (*BatchGetIamPolicyRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha_project_service_proto_rawDescGZIP(), []int{9}
}

func (x *BatchGetIamPolicyRequest) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *BatchGetIamPolicyRequest) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

type BatchGetIamPolicyResponse struct {
	state         protoimpl.MessageState                    `protogen:"open.v1"`
	PolicyResults []*BatchGetIamPolicyResponse_PolicyResult `protobuf:"bytes,1,rep,name=policy_results,json=policyResults,proto3" json:"policy_results,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchGetIamPolicyResponse) Reset() {
	*x = BatchGetIamPolicyResponse{}
	mi := &file_api_v1alpha_project_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchGetIamPolicyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetIamPolicyResponse) ProtoMessage() {}

func (x *BatchGetIamPolicyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha_project_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetIamPolicyResponse.ProtoReflect.Descriptor instead.
func (*BatchGetIamPolicyResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha_project_service_proto_rawDescGZIP(), []int{10}
}

func (x *BatchGetIamPolicyResponse) GetPolicyResults() []*BatchGetIamPolicyResponse_PolicyResult {
	if x != nil {
		return x.PolicyResults
	}
	return nil
}

type Label struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Value         string                 `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Color         string                 `protobuf:"bytes,2,opt,name=color,proto3" json:"color,omitempty"`
	Group         string                 `protobuf:"bytes,3,opt,name=group,proto3" json:"group,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Label) Reset() {
	*x = Label{}
	mi := &file_api_v1alpha_project_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Label) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Label) ProtoMessage() {}

func (x *Label) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha_project_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Label.ProtoReflect.Descriptor instead.
func (*Label) Descriptor() ([]byte, []int) {
	return file_api_v1alpha_project_service_proto_rawDescGZIP(), []int{11}
}

func (x *Label) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Label) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *Label) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

type Project struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the project.
	// Format: projects/{project}
	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	State State  `protobuf:"varint,3,opt,name=state,proto3,enum=bytebase.api.v1alpha.State" json:"state,omitempty"`
	// The title or name of a project. It's not unique within the workspace.
	Title                      string     `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	Webhooks                   []*Webhook `protobuf:"bytes,11,rep,name=webhooks,proto3" json:"webhooks,omitempty"`
	DataClassificationConfigId string     `protobuf:"bytes,12,opt,name=data_classification_config_id,json=dataClassificationConfigId,proto3" json:"data_classification_config_id,omitempty"`
	IssueLabels                []*Label   `protobuf:"bytes,13,rep,name=issue_labels,json=issueLabels,proto3" json:"issue_labels,omitempty"`
	// Force issue labels to be used when creating an issue.
	ForceIssueLabels bool `protobuf:"varint,14,opt,name=force_issue_labels,json=forceIssueLabels,proto3" json:"force_issue_labels,omitempty"`
	// Allow modifying statement after issue is created.
	AllowModifyStatement bool `protobuf:"varint,15,opt,name=allow_modify_statement,json=allowModifyStatement,proto3" json:"allow_modify_statement,omitempty"`
	// Enable auto resolve issue.
	AutoResolveIssue bool `protobuf:"varint,16,opt,name=auto_resolve_issue,json=autoResolveIssue,proto3" json:"auto_resolve_issue,omitempty"`
	// Enforce issue title created by user instead of generated by Bytebase.
	EnforceIssueTitle bool `protobuf:"varint,17,opt,name=enforce_issue_title,json=enforceIssueTitle,proto3" json:"enforce_issue_title,omitempty"`
	// Whether to automatically enable backup.
	AutoEnableBackup bool `protobuf:"varint,18,opt,name=auto_enable_backup,json=autoEnableBackup,proto3" json:"auto_enable_backup,omitempty"`
	// Whether to skip backup errors and continue the data migration.
	SkipBackupErrors bool `protobuf:"varint,19,opt,name=skip_backup_errors,json=skipBackupErrors,proto3" json:"skip_backup_errors,omitempty"`
	// Whether to enable the database tenant mode for PostgreSQL.
	// If enabled, the issue will be created with the pre-appended "set role <db_owner>" statement.
	PostgresDatabaseTenantMode bool `protobuf:"varint,20,opt,name=postgres_database_tenant_mode,json=postgresDatabaseTenantMode,proto3" json:"postgres_database_tenant_mode,omitempty"`
	// Whether to allow the issue creator to self-approve the issue.
	AllowSelfApproval bool `protobuf:"varint,21,opt,name=allow_self_approval,json=allowSelfApproval,proto3" json:"allow_self_approval,omitempty"`
	// Execution retry policy for the task run.
	ExecutionRetryPolicy *Project_ExecutionRetryPolicy `protobuf:"bytes,22,opt,name=execution_retry_policy,json=executionRetryPolicy,proto3" json:"execution_retry_policy,omitempty"`
	// The maximum databases of rows to sample during CI data validation.
	// Without specification, sampling is disabled, resulting in a full validation.
	CiSamplingSize int32 `protobuf:"varint,23,opt,name=ci_sampling_size,json=ciSamplingSize,proto3" json:"ci_sampling_size,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Project) Reset() {
	*x = Project{}
	mi := &file_api_v1alpha_project_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Project) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Project) ProtoMessage() {}

func (x *Project) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha_project_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Project.ProtoReflect.Descriptor instead.
func (*Project) Descriptor() ([]byte, []int) {
	return file_api_v1alpha_project_service_proto_rawDescGZIP(), []int{12}
}

func (x *Project) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Project) GetState() State {
	if x != nil {
		return x.State
	}
	return State_STATE_UNSPECIFIED
}

func (x *Project) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Project) GetWebhooks() []*Webhook {
	if x != nil {
		return x.Webhooks
	}
	return nil
}

func (x *Project) GetDataClassificationConfigId() string {
	if x != nil {
		return x.DataClassificationConfigId
	}
	return ""
}

func (x *Project) GetIssueLabels() []*Label {
	if x != nil {
		return x.IssueLabels
	}
	return nil
}

func (x *Project) GetForceIssueLabels() bool {
	if x != nil {
		return x.ForceIssueLabels
	}
	return false
}

func (x *Project) GetAllowModifyStatement() bool {
	if x != nil {
		return x.AllowModifyStatement
	}
	return false
}

func (x *Project) GetAutoResolveIssue() bool {
	if x != nil {
		return x.AutoResolveIssue
	}
	return false
}

func (x *Project) GetEnforceIssueTitle() bool {
	if x != nil {
		return x.EnforceIssueTitle
	}
	return false
}

func (x *Project) GetAutoEnableBackup() bool {
	if x != nil {
		return x.AutoEnableBackup
	}
	return false
}

func (x *Project) GetSkipBackupErrors() bool {
	if x != nil {
		return x.SkipBackupErrors
	}
	return false
}

func (x *Project) GetPostgresDatabaseTenantMode() bool {
	if x != nil {
		return x.PostgresDatabaseTenantMode
	}
	return false
}

func (x *Project) GetAllowSelfApproval() bool {
	if x != nil {
		return x.AllowSelfApproval
	}
	return false
}

func (x *Project) GetExecutionRetryPolicy() *Project_ExecutionRetryPolicy {
	if x != nil {
		return x.ExecutionRetryPolicy
	}
	return nil
}

func (x *Project) GetCiSamplingSize() int32 {
	if x != nil {
		return x.CiSamplingSize
	}
	return 0
}

type AddWebhookRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the project to add the webhook to.
	// Format: projects/{project}
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// The webhook to add.
	Webhook       *Webhook `protobuf:"bytes,2,opt,name=webhook,proto3" json:"webhook,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddWebhookRequest) Reset() {
	*x = AddWebhookRequest{}
	mi := &file_api_v1alpha_project_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddWebhookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddWebhookRequest) ProtoMessage() {}

func (x *AddWebhookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha_project_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddWebhookRequest.ProtoReflect.Descriptor instead.
func (*AddWebhookRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha_project_service_proto_rawDescGZIP(), []int{13}
}

func (x *AddWebhookRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *AddWebhookRequest) GetWebhook() *Webhook {
	if x != nil {
		return x.Webhook
	}
	return nil
}

type UpdateWebhookRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The webhook to modify.
	Webhook *Webhook `protobuf:"bytes,1,opt,name=webhook,proto3" json:"webhook,omitempty"`
	// The list of fields to update.
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateWebhookRequest) Reset() {
	*x = UpdateWebhookRequest{}
	mi := &file_api_v1alpha_project_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateWebhookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateWebhookRequest) ProtoMessage() {}

func (x *UpdateWebhookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha_project_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateWebhookRequest.ProtoReflect.Descriptor instead.
func (*UpdateWebhookRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha_project_service_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateWebhookRequest) GetWebhook() *Webhook {
	if x != nil {
		return x.Webhook
	}
	return nil
}

func (x *UpdateWebhookRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

type RemoveWebhookRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The webhook to remove. Identified by its url.
	Webhook       *Webhook `protobuf:"bytes,1,opt,name=webhook,proto3" json:"webhook,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RemoveWebhookRequest) Reset() {
	*x = RemoveWebhookRequest{}
	mi := &file_api_v1alpha_project_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RemoveWebhookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveWebhookRequest) ProtoMessage() {}

func (x *RemoveWebhookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha_project_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveWebhookRequest.ProtoReflect.Descriptor instead.
func (*RemoveWebhookRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha_project_service_proto_rawDescGZIP(), []int{15}
}

func (x *RemoveWebhookRequest) GetWebhook() *Webhook {
	if x != nil {
		return x.Webhook
	}
	return nil
}

type TestWebhookRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the project which owns the webhook to test.
	// Format: projects/{project}
	Project string `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	// The webhook to test. Identified by its url.
	Webhook       *Webhook `protobuf:"bytes,2,opt,name=webhook,proto3" json:"webhook,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestWebhookRequest) Reset() {
	*x = TestWebhookRequest{}
	mi := &file_api_v1alpha_project_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestWebhookRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestWebhookRequest) ProtoMessage() {}

func (x *TestWebhookRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha_project_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestWebhookRequest.ProtoReflect.Descriptor instead.
func (*TestWebhookRequest) Descriptor() ([]byte, []int) {
	return file_api_v1alpha_project_service_proto_rawDescGZIP(), []int{16}
}

func (x *TestWebhookRequest) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *TestWebhookRequest) GetWebhook() *Webhook {
	if x != nil {
		return x.Webhook
	}
	return nil
}

type TestWebhookResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The result of the test, empty if the test is successful.
	Error         string `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestWebhookResponse) Reset() {
	*x = TestWebhookResponse{}
	mi := &file_api_v1alpha_project_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestWebhookResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestWebhookResponse) ProtoMessage() {}

func (x *TestWebhookResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha_project_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestWebhookResponse.ProtoReflect.Descriptor instead.
func (*TestWebhookResponse) Descriptor() ([]byte, []int) {
	return file_api_v1alpha_project_service_proto_rawDescGZIP(), []int{17}
}

func (x *TestWebhookResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type Webhook struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// name is the name of the webhook, generated by the server.
	// format: projects/{project}/webhooks/{webhook}
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// type is the type of the webhook.
	Type Webhook_Type `protobuf:"varint,2,opt,name=type,proto3,enum=bytebase.api.v1alpha.Webhook_Type" json:"type,omitempty"`
	// title is the title of the webhook.
	Title string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	// url is the url of the webhook, should be unique within the project.
	Url string `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	// if direct_message is set, the notification is sent directly
	// to the persons and url will be ignored.
	// IM integration setting should be set for this function to work.
	DirectMessage bool `protobuf:"varint,6,opt,name=direct_message,json=directMessage,proto3" json:"direct_message,omitempty"`
	// notification_types is the list of activities types that the webhook is interested in.
	// Bytebase will only send notifications to the webhook if the activity type is in the list.
	// It should not be empty, and should be a subset of the following:
	// - TYPE_ISSUE_CREATED
	// - TYPE_ISSUE_STATUS_UPDATE
	// - TYPE_ISSUE_PIPELINE_STAGE_UPDATE
	// - TYPE_ISSUE_PIPELINE_TASK_STATUS_UPDATE
	// - TYPE_ISSUE_FIELD_UPDATE
	// - TYPE_ISSUE_COMMENT_CREATE
	NotificationTypes []Activity_Type `protobuf:"varint,5,rep,packed,name=notification_types,json=notificationTypes,proto3,enum=bytebase.api.v1alpha.Activity_Type" json:"notification_types,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *Webhook) Reset() {
	*x = Webhook{}
	mi := &file_api_v1alpha_project_service_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Webhook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Webhook) ProtoMessage() {}

func (x *Webhook) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha_project_service_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Webhook.ProtoReflect.Descriptor instead.
func (*Webhook) Descriptor() ([]byte, []int) {
	return file_api_v1alpha_project_service_proto_rawDescGZIP(), []int{18}
}

func (x *Webhook) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Webhook) GetType() Webhook_Type {
	if x != nil {
		return x.Type
	}
	return Webhook_TYPE_UNSPECIFIED
}

func (x *Webhook) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Webhook) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Webhook) GetDirectMessage() bool {
	if x != nil {
		return x.DirectMessage
	}
	return false
}

func (x *Webhook) GetNotificationTypes() []Activity_Type {
	if x != nil {
		return x.NotificationTypes
	}
	return nil
}

// TODO(zp): move to activity later.
type Activity struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Activity) Reset() {
	*x = Activity{}
	mi := &file_api_v1alpha_project_service_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Activity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Activity) ProtoMessage() {}

func (x *Activity) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha_project_service_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Activity.ProtoReflect.Descriptor instead.
func (*Activity) Descriptor() ([]byte, []int) {
	return file_api_v1alpha_project_service_proto_rawDescGZIP(), []int{19}
}

type BatchGetIamPolicyResponse_PolicyResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Project       string                 `protobuf:"bytes,1,opt,name=project,proto3" json:"project,omitempty"`
	Policy        *IamPolicy             `protobuf:"bytes,2,opt,name=policy,proto3" json:"policy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchGetIamPolicyResponse_PolicyResult) Reset() {
	*x = BatchGetIamPolicyResponse_PolicyResult{}
	mi := &file_api_v1alpha_project_service_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchGetIamPolicyResponse_PolicyResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchGetIamPolicyResponse_PolicyResult) ProtoMessage() {}

func (x *BatchGetIamPolicyResponse_PolicyResult) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha_project_service_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchGetIamPolicyResponse_PolicyResult.ProtoReflect.Descriptor instead.
func (*BatchGetIamPolicyResponse_PolicyResult) Descriptor() ([]byte, []int) {
	return file_api_v1alpha_project_service_proto_rawDescGZIP(), []int{10, 0}
}

func (x *BatchGetIamPolicyResponse_PolicyResult) GetProject() string {
	if x != nil {
		return x.Project
	}
	return ""
}

func (x *BatchGetIamPolicyResponse_PolicyResult) GetPolicy() *IamPolicy {
	if x != nil {
		return x.Policy
	}
	return nil
}

type Project_ExecutionRetryPolicy struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The maximum number of retries for the lock timeout issue.
	MaximumRetries int32 `protobuf:"varint,1,opt,name=maximum_retries,json=maximumRetries,proto3" json:"maximum_retries,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *Project_ExecutionRetryPolicy) Reset() {
	*x = Project_ExecutionRetryPolicy{}
	mi := &file_api_v1alpha_project_service_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Project_ExecutionRetryPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Project_ExecutionRetryPolicy) ProtoMessage() {}

func (x *Project_ExecutionRetryPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1alpha_project_service_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Project_ExecutionRetryPolicy.ProtoReflect.Descriptor instead.
func (*Project_ExecutionRetryPolicy) Descriptor() ([]byte, []int) {
	return file_api_v1alpha_project_service_proto_rawDescGZIP(), []int{12, 0}
}

func (x *Project_ExecutionRetryPolicy) GetMaximumRetries() int32 {
	if x != nil {
		return x.MaximumRetries
	}
	return 0
}

var File_api_v1alpha_project_service_proto protoreflect.FileDescriptor

const file_api_v1alpha_project_service_proto_rawDesc = "" +
	"\n" +
	"!api/v1alpha/project_service.proto\x12\x14bytebase.api.v1alpha\x1a\x1cgoogle/api/annotations.proto\x1a\x17google/api/client.proto\x1a\x1fgoogle/api/field_behavior.proto\x1a\x19google/api/resource.proto\x1a\x1bgoogle/protobuf/empty.proto\x1a google/protobuf/field_mask.proto\x1a\x1capi/v1alpha/annotation.proto\x1a\x18api/v1alpha/common.proto\x1a\x1capi/v1alpha/iam_policy.proto\"F\n" +
	"\x11GetProjectRequest\x121\n" +
	"\x04name\x18\x01 \x01(\tB\x1d\xe2A\x01\x02\xfaA\x16\n" +
	"\x14bytebase.com/ProjectR\x04name\"\x8c\x01\n" +
	"\x13ListProjectsRequest\x12\x1b\n" +
	"\tpage_size\x18\x01 \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"page_token\x18\x02 \x01(\tR\tpageToken\x12!\n" +
	"\fshow_deleted\x18\x03 \x01(\bR\vshowDeleted\x12\x16\n" +
	"\x06filter\x18\x04 \x01(\tR\x06filter\"y\n" +
	"\x14ListProjectsResponse\x129\n" +
	"\bprojects\x18\x01 \x03(\v2\x1d.bytebase.api.v1alpha.ProjectR\bprojects\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"\x8e\x01\n" +
	"\x15SearchProjectsRequest\x12!\n" +
	"\fshow_deleted\x18\x01 \x01(\bR\vshowDeleted\x12\x16\n" +
	"\x06filter\x18\x02 \x01(\tR\x06filter\x12\x1b\n" +
	"\tpage_size\x18\x03 \x01(\x05R\bpageSize\x12\x1d\n" +
	"\n" +
	"page_token\x18\x04 \x01(\tR\tpageToken\"{\n" +
	"\x16SearchProjectsResponse\x129\n" +
	"\bprojects\x18\x01 \x03(\v2\x1d.bytebase.api.v1alpha.ProjectR\bprojects\x12&\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tR\rnextPageToken\"t\n" +
	"\x14CreateProjectRequest\x12=\n" +
	"\aproject\x18\x01 \x01(\v2\x1d.bytebase.api.v1alpha.ProjectB\x04\xe2A\x01\x02R\aproject\x12\x1d\n" +
	"\n" +
	"project_id\x18\x02 \x01(\tR\tprojectId\"\x92\x01\n" +
	"\x14UpdateProjectRequest\x12=\n" +
	"\aproject\x18\x01 \x01(\v2\x1d.bytebase.api.v1alpha.ProjectB\x04\xe2A\x01\x02R\aproject\x12;\n" +
	"\vupdate_mask\x18\x02 \x01(\v2\x1a.google.protobuf.FieldMaskR\n" +
	"updateMask\"_\n" +
	"\x14DeleteProjectRequest\x121\n" +
	"\x04name\x18\x01 \x01(\tB\x1d\xe2A\x01\x02\xfaA\x16\n" +
	"\x14bytebase.com/ProjectR\x04name\x12\x14\n" +
	"\x05force\x18\x02 \x01(\bR\x05force\"K\n" +
	"\x16UndeleteProjectRequest\x121\n" +
	"\x04name\x18\x01 \x01(\tB\x1d\xe2A\x01\x02\xfaA\x16\n" +
	"\x14bytebase.com/ProjectR\x04name\"L\n" +
	"\x18BatchGetIamPolicyRequest\x12\x1a\n" +
	"\x05scope\x18\x01 \x01(\tB\x04\xe2A\x01\x02R\x05scope\x12\x14\n" +
	"\x05names\x18\x02 \x03(\tR\x05names\"\xe3\x01\n" +
	"\x19BatchGetIamPolicyResponse\x12c\n" +
	"\x0epolicy_results\x18\x01 \x03(\v2<.bytebase.api.v1alpha.BatchGetIamPolicyResponse.PolicyResultR\rpolicyResults\x1aa\n" +
	"\fPolicyResult\x12\x18\n" +
	"\aproject\x18\x01 \x01(\tR\aproject\x127\n" +
	"\x06policy\x18\x02 \x01(\v2\x1f.bytebase.api.v1alpha.IamPolicyR\x06policy\"I\n" +
	"\x05Label\x12\x14\n" +
	"\x05value\x18\x01 \x01(\tR\x05value\x12\x14\n" +
	"\x05color\x18\x02 \x01(\tR\x05color\x12\x14\n" +
	"\x05group\x18\x03 \x01(\tR\x05group\"\xbf\a\n" +
	"\aProject\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x121\n" +
	"\x05state\x18\x03 \x01(\x0e2\x1b.bytebase.api.v1alpha.StateR\x05state\x12\x14\n" +
	"\x05title\x18\x04 \x01(\tR\x05title\x129\n" +
	"\bwebhooks\x18\v \x03(\v2\x1d.bytebase.api.v1alpha.WebhookR\bwebhooks\x12A\n" +
	"\x1ddata_classification_config_id\x18\f \x01(\tR\x1adataClassificationConfigId\x12>\n" +
	"\fissue_labels\x18\r \x03(\v2\x1b.bytebase.api.v1alpha.LabelR\vissueLabels\x12,\n" +
	"\x12force_issue_labels\x18\x0e \x01(\bR\x10forceIssueLabels\x124\n" +
	"\x16allow_modify_statement\x18\x0f \x01(\bR\x14allowModifyStatement\x12,\n" +
	"\x12auto_resolve_issue\x18\x10 \x01(\bR\x10autoResolveIssue\x12.\n" +
	"\x13enforce_issue_title\x18\x11 \x01(\bR\x11enforceIssueTitle\x12,\n" +
	"\x12auto_enable_backup\x18\x12 \x01(\bR\x10autoEnableBackup\x12,\n" +
	"\x12skip_backup_errors\x18\x13 \x01(\bR\x10skipBackupErrors\x12A\n" +
	"\x1dpostgres_database_tenant_mode\x18\x14 \x01(\bR\x1apostgresDatabaseTenantMode\x12.\n" +
	"\x13allow_self_approval\x18\x15 \x01(\bR\x11allowSelfApproval\x12h\n" +
	"\x16execution_retry_policy\x18\x16 \x01(\v22.bytebase.api.v1alpha.Project.ExecutionRetryPolicyR\x14executionRetryPolicy\x12(\n" +
	"\x10ci_sampling_size\x18\x17 \x01(\x05R\x0eciSamplingSize\x1a?\n" +
	"\x14ExecutionRetryPolicy\x12'\n" +
	"\x0fmaximum_retries\x18\x01 \x01(\x05R\x0emaximumRetries:-\xeaA*\n" +
	"\x14bytebase.com/Project\x12\x12projects/{project}J\x04\b\x02\x10\x03\"\x8b\x01\n" +
	"\x11AddWebhookRequest\x127\n" +
	"\aproject\x18\x01 \x01(\tB\x1d\xe2A\x01\x02\xfaA\x16\n" +
	"\x14bytebase.com/ProjectR\aproject\x12=\n" +
	"\awebhook\x18\x02 \x01(\v2\x1d.bytebase.api.v1alpha.WebhookB\x04\xe2A\x01\x02R\awebhook\"\x92\x01\n" +
	"\x14UpdateWebhookRequest\x12=\n" +
	"\awebhook\x18\x01 \x01(\v2\x1d.bytebase.api.v1alpha.WebhookB\x04\xe2A\x01\x02R\awebhook\x12;\n" +
	"\vupdate_mask\x18\x02 \x01(\v2\x1a.google.protobuf.FieldMaskR\n" +
	"updateMask\"U\n" +
	"\x14RemoveWebhookRequest\x12=\n" +
	"\awebhook\x18\x01 \x01(\v2\x1d.bytebase.api.v1alpha.WebhookB\x04\xe2A\x01\x02R\awebhook\"\x8c\x01\n" +
	"\x12TestWebhookRequest\x127\n" +
	"\aproject\x18\x01 \x01(\tB\x1d\xe2A\x01\x02\xfaA\x16\n" +
	"\x14bytebase.com/ProjectR\aproject\x12=\n" +
	"\awebhook\x18\x02 \x01(\v2\x1d.bytebase.api.v1alpha.WebhookB\x04\xe2A\x01\x02R\awebhook\"+\n" +
	"\x13TestWebhookResponse\x12\x14\n" +
	"\x05error\x18\x01 \x01(\tR\x05error\"\xc2\x03\n" +
	"\aWebhook\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12<\n" +
	"\x04type\x18\x02 \x01(\x0e2\".bytebase.api.v1alpha.Webhook.TypeB\x04\xe2A\x01\x02R\x04type\x12\x1a\n" +
	"\x05title\x18\x03 \x01(\tB\x04\xe2A\x01\x02R\x05title\x12\x16\n" +
	"\x03url\x18\x04 \x01(\tB\x04\xe2A\x01\x02R\x03url\x12%\n" +
	"\x0edirect_message\x18\x06 \x01(\bR\rdirectMessage\x12X\n" +
	"\x12notification_types\x18\x05 \x03(\x0e2#.bytebase.api.v1alpha.Activity.TypeB\x04\xe2A\x01\x06R\x11notificationTypes\"n\n" +
	"\x04Type\x12\x14\n" +
	"\x10TYPE_UNSPECIFIED\x10\x00\x12\t\n" +
	"\x05SLACK\x10\x01\x12\v\n" +
	"\aDISCORD\x10\x02\x12\t\n" +
	"\x05TEAMS\x10\x03\x12\f\n" +
	"\bDINGTALK\x10\x04\x12\n" +
	"\n" +
	"\x06FEISHU\x10\x05\x12\t\n" +
	"\x05WECOM\x10\x06\x12\b\n" +
	"\x04LARK\x10\b:@\xeaA=\n" +
	"\x14bytebase.com/Webhook\x12%projects/{project}/webhooks/{webhook}\"\xfb\x05\n" +
	"\bActivity\"\xee\x05\n" +
	"\x04Type\x12\x14\n" +
	"\x10TYPE_UNSPECIFIED\x10\x00\x12\x1e\n" +
	"\x1aTYPE_NOTIFY_ISSUE_APPROVED\x10\x17\x12 \n" +
	"\x1cTYPE_NOTIFY_PIPELINE_ROLLOUT\x10\x18\x12\x15\n" +
	"\x11TYPE_ISSUE_CREATE\x10\x01\x12\x1d\n" +
	"\x19TYPE_ISSUE_COMMENT_CREATE\x10\x02\x12\x1b\n" +
	"\x17TYPE_ISSUE_FIELD_UPDATE\x10\x03\x12\x1c\n" +
	"\x18TYPE_ISSUE_STATUS_UPDATE\x10\x04\x12\x1e\n" +
	"\x1aTYPE_ISSUE_APPROVAL_NOTIFY\x10\x15\x12+\n" +
	"'TYPE_ISSUE_PIPELINE_STAGE_STATUS_UPDATE\x10\x05\x12*\n" +
	"&TYPE_ISSUE_PIPELINE_TASK_STATUS_UPDATE\x10\x06\x12.\n" +
	"*TYPE_ISSUE_PIPELINE_TASK_RUN_STATUS_UPDATE\x10\x16\x12-\n" +
	")TYPE_ISSUE_PIPELINE_TASK_STATEMENT_UPDATE\x10\b\x129\n" +
	"5TYPE_ISSUE_PIPELINE_TASK_EARLIEST_ALLOWED_TIME_UPDATE\x10\t\x12\x16\n" +
	"\x12TYPE_MEMBER_CREATE\x10\n" +
	"\x12\x1b\n" +
	"\x17TYPE_MEMBER_ROLE_UPDATE\x10\v\x12\x18\n" +
	"\x14TYPE_MEMBER_ACTIVATE\x10\f\x12\x1a\n" +
	"\x16TYPE_MEMBER_DEACTIVATE\x10\r\x12 \n" +
	"\x1cTYPE_PROJECT_REPOSITORY_PUSH\x10\x0e\x12\"\n" +
	"\x1eTYPE_PROJECT_DATABASE_TRANSFER\x10\x0f\x12\x1e\n" +
	"\x1aTYPE_PROJECT_MEMBER_CREATE\x10\x10\x12\x1e\n" +
	"\x1aTYPE_PROJECT_MEMBER_DELETE\x10\x11\x12\x19\n" +
	"\x15TYPE_SQL_EDITOR_QUERY\x10\x132\xe7\x12\n" +
	"\x0eProjectService\x12\x91\x01\n" +
	"\n" +
	"GetProject\x12'.bytebase.api.v1alpha.GetProjectRequest\x1a\x1d.bytebase.api.v1alpha.Project\";\xdaA\x04name\x8a\xea0\x0fbb.projects.get\x90\xea0\x01\x82\xd3\xe4\x93\x02\x17\x12\x15/v1/{name=projects/*}\x12\x96\x01\n" +
	"\fListProjects\x12).bytebase.api.v1alpha.ListProjectsRequest\x1a*.bytebase.api.v1alpha.ListProjectsResponse\"/\xdaA\x00\x8a\xea0\x10bb.projects.list\x90\xea0\x01\x82\xd3\xe4\x93\x02\x0e\x12\f/v1/projects\x12\x92\x01\n" +
	"\x0eSearchProjects\x12+.bytebase.api.v1alpha.SearchProjectsRequest\x1a,.bytebase.api.v1alpha.SearchProjectsResponse\"%\xdaA\x00\x90\xea0\x02\x82\xd3\xe4\x93\x02\x18:\x01*\"\x13/v1/projects:search\x12\x96\x01\n" +
	"\rCreateProject\x12*.bytebase.api.v1alpha.CreateProjectRequest\x1a\x1d.bytebase.api.v1alpha.Project\":\xdaA\x00\x8a\xea0\x12bb.projects.create\x90\xea0\x01\x82\xd3\xe4\x93\x02\x17:\aproject\"\f/v1/projects\x12\xba\x01\n" +
	"\rUpdateProject\x12*.bytebase.api.v1alpha.UpdateProjectRequest\x1a\x1d.bytebase.api.v1alpha.Project\"^\xdaA\x13project,update_mask\x8a\xea0\x12bb.projects.update\x90\xea0\x01\x82\xd3\xe4\x93\x02(:\aproject2\x1d/v1/{project.name=projects/*}\x12\x93\x01\n" +
	"\rDeleteProject\x12*.bytebase.api.v1alpha.DeleteProjectRequest\x1a\x16.google.protobuf.Empty\">\xdaA\x04name\x8a\xea0\x12bb.projects.delete\x90\xea0\x01\x82\xd3\xe4\x93\x02\x17*\x15/v1/{name=projects/*}\x12\xa5\x01\n" +
	"\x0fUndeleteProject\x12,.bytebase.api.v1alpha.UndeleteProjectRequest\x1a\x1d.bytebase.api.v1alpha.Project\"E\x8a\xea0\x14bb.projects.undelete\x90\xea0\x01\x82\xd3\xe4\x93\x02#:\x01*\"\x1e/v1/{name=projects/*}:undelete\x12\xaa\x01\n" +
	"\fGetIamPolicy\x12).bytebase.api.v1alpha.GetIamPolicyRequest\x1a\x1f.bytebase.api.v1alpha.IamPolicy\"N\x8a\xea0\x18bb.projects.getIamPolicy\x90\xea0\x01\x82\xd3\xe4\x93\x02(\x12&/v1/{resource=projects/*}:getIamPolicy\x12\xc2\x01\n" +
	"\x11BatchGetIamPolicy\x12..bytebase.api.v1alpha.BatchGetIamPolicyRequest\x1a/.bytebase.api.v1alpha.BatchGetIamPolicyResponse\"L\x8a\xea0\x18bb.projects.getIamPolicy\x90\xea0\x02\x82\xd3\xe4\x93\x02&\x12$/v1/{scope=*/*}/iamPolicies:batchGet\x12\xb1\x01\n" +
	"\fSetIamPolicy\x12).bytebase.api.v1alpha.SetIamPolicyRequest\x1a\x1f.bytebase.api.v1alpha.IamPolicy\"U\x8a\xea0\x18bb.projects.setIamPolicy\x90\xea0\x01\x98\xea0\x01\x82\xd3\xe4\x93\x02+:\x01*\"&/v1/{resource=projects/*}:setIamPolicy\x12\x9e\x01\n" +
	"\n" +
	"AddWebhook\x12'.bytebase.api.v1alpha.AddWebhookRequest\x1a\x1d.bytebase.api.v1alpha.Project\"H\x8a\xea0\x12bb.projects.update\x90\xea0\x01\x82\xd3\xe4\x93\x02(:\x01*\"#/v1/{project=projects/*}:addWebhook\x12\xcd\x01\n" +
	"\rUpdateWebhook\x12*.bytebase.api.v1alpha.UpdateWebhookRequest\x1a\x1d.bytebase.api.v1alpha.Project\"q\xdaA\x13webhook,update_mask\x8a\xea0\x12bb.projects.update\x90\xea0\x01\x82\xd3\xe4\x93\x02;:\x01*\"6/v1/{webhook.name=projects/*/webhooks/*}:updateWebhook\x12\xb7\x01\n" +
	"\rRemoveWebhook\x12*.bytebase.api.v1alpha.RemoveWebhookRequest\x1a\x1d.bytebase.api.v1alpha.Project\"[\x8a\xea0\x12bb.projects.update\x90\xea0\x01\x82\xd3\xe4\x93\x02;:\x01*\"6/v1/{webhook.name=projects/*/webhooks/*}:removeWebhook\x12\xad\x01\n" +
	"\vTestWebhook\x12(.bytebase.api.v1alpha.TestWebhookRequest\x1a).bytebase.api.v1alpha.TestWebhookResponse\"I\x8a\xea0\x12bb.projects.update\x90\xea0\x01\x82\xd3\xe4\x93\x02):\x01*\"$/v1/{project=projects/*}:testWebhookB\x11Z\x0fgenerated-go/v1b\x06proto3"

var (
	file_api_v1alpha_project_service_proto_rawDescOnce sync.Once
	file_api_v1alpha_project_service_proto_rawDescData []byte
)

func file_api_v1alpha_project_service_proto_rawDescGZIP() []byte {
	file_api_v1alpha_project_service_proto_rawDescOnce.Do(func() {
		file_api_v1alpha_project_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_v1alpha_project_service_proto_rawDesc), len(file_api_v1alpha_project_service_proto_rawDesc)))
	})
	return file_api_v1alpha_project_service_proto_rawDescData
}

var file_api_v1alpha_project_service_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_api_v1alpha_project_service_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_api_v1alpha_project_service_proto_goTypes = []any{
	(Webhook_Type)(0),                              // 0: bytebase.api.v1alpha.Webhook.Type
	(Activity_Type)(0),                             // 1: bytebase.api.v1alpha.Activity.Type
	(*GetProjectRequest)(nil),                      // 2: bytebase.api.v1alpha.GetProjectRequest
	(*ListProjectsRequest)(nil),                    // 3: bytebase.api.v1alpha.ListProjectsRequest
	(*ListProjectsResponse)(nil),                   // 4: bytebase.api.v1alpha.ListProjectsResponse
	(*SearchProjectsRequest)(nil),                  // 5: bytebase.api.v1alpha.SearchProjectsRequest
	(*SearchProjectsResponse)(nil),                 // 6: bytebase.api.v1alpha.SearchProjectsResponse
	(*CreateProjectRequest)(nil),                   // 7: bytebase.api.v1alpha.CreateProjectRequest
	(*UpdateProjectRequest)(nil),                   // 8: bytebase.api.v1alpha.UpdateProjectRequest
	(*DeleteProjectRequest)(nil),                   // 9: bytebase.api.v1alpha.DeleteProjectRequest
	(*UndeleteProjectRequest)(nil),                 // 10: bytebase.api.v1alpha.UndeleteProjectRequest
	(*BatchGetIamPolicyRequest)(nil),               // 11: bytebase.api.v1alpha.BatchGetIamPolicyRequest
	(*BatchGetIamPolicyResponse)(nil),              // 12: bytebase.api.v1alpha.BatchGetIamPolicyResponse
	(*Label)(nil),                                  // 13: bytebase.api.v1alpha.Label
	(*Project)(nil),                                // 14: bytebase.api.v1alpha.Project
	(*AddWebhookRequest)(nil),                      // 15: bytebase.api.v1alpha.AddWebhookRequest
	(*UpdateWebhookRequest)(nil),                   // 16: bytebase.api.v1alpha.UpdateWebhookRequest
	(*RemoveWebhookRequest)(nil),                   // 17: bytebase.api.v1alpha.RemoveWebhookRequest
	(*TestWebhookRequest)(nil),                     // 18: bytebase.api.v1alpha.TestWebhookRequest
	(*TestWebhookResponse)(nil),                    // 19: bytebase.api.v1alpha.TestWebhookResponse
	(*Webhook)(nil),                                // 20: bytebase.api.v1alpha.Webhook
	(*Activity)(nil),                               // 21: bytebase.api.v1alpha.Activity
	(*BatchGetIamPolicyResponse_PolicyResult)(nil), // 22: bytebase.api.v1alpha.BatchGetIamPolicyResponse.PolicyResult
	(*Project_ExecutionRetryPolicy)(nil),           // 23: bytebase.api.v1alpha.Project.ExecutionRetryPolicy
	(*fieldmaskpb.FieldMask)(nil),                  // 24: google.protobuf.FieldMask
	(State)(0),                                     // 25: bytebase.api.v1alpha.State
	(*IamPolicy)(nil),                              // 26: bytebase.api.v1alpha.IamPolicy
	(*GetIamPolicyRequest)(nil),                    // 27: bytebase.api.v1alpha.GetIamPolicyRequest
	(*SetIamPolicyRequest)(nil),                    // 28: bytebase.api.v1alpha.SetIamPolicyRequest
	(*emptypb.Empty)(nil),                          // 29: google.protobuf.Empty
}
var file_api_v1alpha_project_service_proto_depIdxs = []int32{
	14, // 0: bytebase.api.v1alpha.ListProjectsResponse.projects:type_name -> bytebase.api.v1alpha.Project
	14, // 1: bytebase.api.v1alpha.SearchProjectsResponse.projects:type_name -> bytebase.api.v1alpha.Project
	14, // 2: bytebase.api.v1alpha.CreateProjectRequest.project:type_name -> bytebase.api.v1alpha.Project
	14, // 3: bytebase.api.v1alpha.UpdateProjectRequest.project:type_name -> bytebase.api.v1alpha.Project
	24, // 4: bytebase.api.v1alpha.UpdateProjectRequest.update_mask:type_name -> google.protobuf.FieldMask
	22, // 5: bytebase.api.v1alpha.BatchGetIamPolicyResponse.policy_results:type_name -> bytebase.api.v1alpha.BatchGetIamPolicyResponse.PolicyResult
	25, // 6: bytebase.api.v1alpha.Project.state:type_name -> bytebase.api.v1alpha.State
	20, // 7: bytebase.api.v1alpha.Project.webhooks:type_name -> bytebase.api.v1alpha.Webhook
	13, // 8: bytebase.api.v1alpha.Project.issue_labels:type_name -> bytebase.api.v1alpha.Label
	23, // 9: bytebase.api.v1alpha.Project.execution_retry_policy:type_name -> bytebase.api.v1alpha.Project.ExecutionRetryPolicy
	20, // 10: bytebase.api.v1alpha.AddWebhookRequest.webhook:type_name -> bytebase.api.v1alpha.Webhook
	20, // 11: bytebase.api.v1alpha.UpdateWebhookRequest.webhook:type_name -> bytebase.api.v1alpha.Webhook
	24, // 12: bytebase.api.v1alpha.UpdateWebhookRequest.update_mask:type_name -> google.protobuf.FieldMask
	20, // 13: bytebase.api.v1alpha.RemoveWebhookRequest.webhook:type_name -> bytebase.api.v1alpha.Webhook
	20, // 14: bytebase.api.v1alpha.TestWebhookRequest.webhook:type_name -> bytebase.api.v1alpha.Webhook
	0,  // 15: bytebase.api.v1alpha.Webhook.type:type_name -> bytebase.api.v1alpha.Webhook.Type
	1,  // 16: bytebase.api.v1alpha.Webhook.notification_types:type_name -> bytebase.api.v1alpha.Activity.Type
	26, // 17: bytebase.api.v1alpha.BatchGetIamPolicyResponse.PolicyResult.policy:type_name -> bytebase.api.v1alpha.IamPolicy
	2,  // 18: bytebase.api.v1alpha.ProjectService.GetProject:input_type -> bytebase.api.v1alpha.GetProjectRequest
	3,  // 19: bytebase.api.v1alpha.ProjectService.ListProjects:input_type -> bytebase.api.v1alpha.ListProjectsRequest
	5,  // 20: bytebase.api.v1alpha.ProjectService.SearchProjects:input_type -> bytebase.api.v1alpha.SearchProjectsRequest
	7,  // 21: bytebase.api.v1alpha.ProjectService.CreateProject:input_type -> bytebase.api.v1alpha.CreateProjectRequest
	8,  // 22: bytebase.api.v1alpha.ProjectService.UpdateProject:input_type -> bytebase.api.v1alpha.UpdateProjectRequest
	9,  // 23: bytebase.api.v1alpha.ProjectService.DeleteProject:input_type -> bytebase.api.v1alpha.DeleteProjectRequest
	10, // 24: bytebase.api.v1alpha.ProjectService.UndeleteProject:input_type -> bytebase.api.v1alpha.UndeleteProjectRequest
	27, // 25: bytebase.api.v1alpha.ProjectService.GetIamPolicy:input_type -> bytebase.api.v1alpha.GetIamPolicyRequest
	11, // 26: bytebase.api.v1alpha.ProjectService.BatchGetIamPolicy:input_type -> bytebase.api.v1alpha.BatchGetIamPolicyRequest
	28, // 27: bytebase.api.v1alpha.ProjectService.SetIamPolicy:input_type -> bytebase.api.v1alpha.SetIamPolicyRequest
	15, // 28: bytebase.api.v1alpha.ProjectService.AddWebhook:input_type -> bytebase.api.v1alpha.AddWebhookRequest
	16, // 29: bytebase.api.v1alpha.ProjectService.UpdateWebhook:input_type -> bytebase.api.v1alpha.UpdateWebhookRequest
	17, // 30: bytebase.api.v1alpha.ProjectService.RemoveWebhook:input_type -> bytebase.api.v1alpha.RemoveWebhookRequest
	18, // 31: bytebase.api.v1alpha.ProjectService.TestWebhook:input_type -> bytebase.api.v1alpha.TestWebhookRequest
	14, // 32: bytebase.api.v1alpha.ProjectService.GetProject:output_type -> bytebase.api.v1alpha.Project
	4,  // 33: bytebase.api.v1alpha.ProjectService.ListProjects:output_type -> bytebase.api.v1alpha.ListProjectsResponse
	6,  // 34: bytebase.api.v1alpha.ProjectService.SearchProjects:output_type -> bytebase.api.v1alpha.SearchProjectsResponse
	14, // 35: bytebase.api.v1alpha.ProjectService.CreateProject:output_type -> bytebase.api.v1alpha.Project
	14, // 36: bytebase.api.v1alpha.ProjectService.UpdateProject:output_type -> bytebase.api.v1alpha.Project
	29, // 37: bytebase.api.v1alpha.ProjectService.DeleteProject:output_type -> google.protobuf.Empty
	14, // 38: bytebase.api.v1alpha.ProjectService.UndeleteProject:output_type -> bytebase.api.v1alpha.Project
	26, // 39: bytebase.api.v1alpha.ProjectService.GetIamPolicy:output_type -> bytebase.api.v1alpha.IamPolicy
	12, // 40: bytebase.api.v1alpha.ProjectService.BatchGetIamPolicy:output_type -> bytebase.api.v1alpha.BatchGetIamPolicyResponse
	26, // 41: bytebase.api.v1alpha.ProjectService.SetIamPolicy:output_type -> bytebase.api.v1alpha.IamPolicy
	14, // 42: bytebase.api.v1alpha.ProjectService.AddWebhook:output_type -> bytebase.api.v1alpha.Project
	14, // 43: bytebase.api.v1alpha.ProjectService.UpdateWebhook:output_type -> bytebase.api.v1alpha.Project
	14, // 44: bytebase.api.v1alpha.ProjectService.RemoveWebhook:output_type -> bytebase.api.v1alpha.Project
	19, // 45: bytebase.api.v1alpha.ProjectService.TestWebhook:output_type -> bytebase.api.v1alpha.TestWebhookResponse
	32, // [32:46] is the sub-list for method output_type
	18, // [18:32] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_api_v1alpha_project_service_proto_init() }
func file_api_v1alpha_project_service_proto_init() {
	if File_api_v1alpha_project_service_proto != nil {
		return
	}
	file_api_v1alpha_annotation_proto_init()
	file_api_v1alpha_common_proto_init()
	file_api_v1alpha_iam_policy_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_v1alpha_project_service_proto_rawDesc), len(file_api_v1alpha_project_service_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_v1alpha_project_service_proto_goTypes,
		DependencyIndexes: file_api_v1alpha_project_service_proto_depIdxs,
		EnumInfos:         file_api_v1alpha_project_service_proto_enumTypes,
		MessageInfos:      file_api_v1alpha_project_service_proto_msgTypes,
	}.Build()
	File_api_v1alpha_project_service_proto = out.File
	file_api_v1alpha_project_service_proto_goTypes = nil
	file_api_v1alpha_project_service_proto_depIdxs = nil
}
