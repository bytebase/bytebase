syntax = "proto3";

package bytebase.store;

import "google/type/expr.proto";
import "store/common.proto";

option go_package = "generated-go/store";

message RolloutPolicy {
  bool automatic = 1;
  repeated string workspace_roles = 2;
  repeated string project_roles = 3;
  // roles/LAST_APPROVER
  // roles/CREATOR
  repeated string issue_roles = 4;
}

message MaskingPolicy {
  repeated MaskData mask_data = 1;
}

message MaskData {
  string schema = 1;
  string table = 2;
  string column = 3;
  MaskingLevel masking_level = 4;
  string full_masking_algorithm_id = 5;
  string partial_masking_algorithm_id = 6;
}

// MaskingExceptionPolicy is the allowlist of users who can access sensitive data.
message MaskingExceptionPolicy {
  message MaskingException {
    enum Action {
      ACTION_UNSPECIFIED = 0;
      QUERY = 1;
      EXPORT = 2;
    }
    // action is the action that the user can access sensitive data.
    Action action = 1;

    // Member is the principal who bind to this exception policy instance.
    //
    // Format: users/{userUID} or groups/{group email}
    string member = 4;

    // The condition that is associated with this exception policy instance.
    google.type.Expr condition = 5;
  }

  repeated MaskingException masking_exceptions = 1;
}

message MaskingRulePolicy {
  message MaskingRule {
    // A unique identifier for a node in UUID format.
    string id = 1;

    google.type.Expr condition = 2;

    MaskingLevel masking_level = 3;
  }
  repeated MaskingRule rules = 1;
}

message SQLReviewRule {
  string type = 1;
  SQLReviewRuleLevel level = 2;
  string payload = 3;
  Engine engine = 4;
  string comment = 5;
}

enum SQLReviewRuleLevel {
  LEVEL_UNSPECIFIED = 0;
  ERROR = 1;
  WARNING = 2;
  DISABLED = 3;
}

message TagPolicy {
  // tags is the key - value map for resources.
  // for example, the environment resource can have the sql review config tag, like "bb.tag.review_config": "reviewConfigs/{review config resource id}"
  map<string, string> tags = 1;
}

message Binding {
  // The role that is assigned to the members.
  // Format: roles/{role}
  string role = 1;

  // Specifies the principals requesting access for a Bytebase resource.
  // For users, the member should be: users/{userUID}
  // For groups, the member should be: groups/{email}
  repeated string members = 2;

  // The condition that is associated with this binding.
  // If the condition evaluates to true, then this binding applies to the current request.
  // If the condition evaluates to false, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding.
  google.type.Expr condition = 3;
}

message IamPolicy {
  // Collection of binding.
  // A binding binds one or more members or groups to a single role.
  repeated Binding bindings = 1;
}

// EnvironmentTierPolicy is the tier of an environment.
message EnvironmentTierPolicy {
  enum EnvironmentTier {
    ENVIRONMENT_TIER_UNSPECIFIED = 0;
    PROTECTED = 1;
    UNPROTECTED = 2;
  }

  EnvironmentTier environment_tier = 1;
  string color = 2;
}

// SlowQueryPolicy is the policy configuration for slow query.
message SlowQueryPolicy {
  bool active = 1;
}

// DisableCopyDataPolicy is the policy configuration for disabling copying data.
message DisableCopyDataPolicy {
  bool active = 1;
}

// ExportDataPolicy is the policy configuration for export data.
message ExportDataPolicy {
  bool disable = 1;
}

// RestrictIssueCreationForSQLReviewPolicy is the policy configuration for restricting issue creation for SQL review.
message RestrictIssueCreationForSQLReviewPolicy {
  bool disallow = 1;
}

// DataSourceQueryPolicy is the policy configuration for running statements in the SQL editor.
message DataSourceQueryPolicy {
  enum Restriction {
    RESTRICTION_UNSPECIFIED = 0;
    // Allow to query admin data sources when there is no read-only data source.
    FALLBACK = 1;
    // Disallow to query admin data sources.
    DISALLOW = 2;
  }
  Restriction admin_data_source_restriction = 1;

  // Disallow running DDL statements in the SQL editor.
  bool disallow_ddl = 2;
  // Disallow running DML statements in the SQL editor.
  bool disallow_dml = 3;
}
