syntax = "proto3";

package bytebase.store;

import "google/type/expr.proto";
import "store/common.proto";

option go_package = "generated-go/store";

message IamPolicy {
  // Collection of binding.
  repeated Binding bindings = 1;
}

// Reference: https://cloud.google.com/pubsub/docs/reference/rpc/google.iam.v1#binding
message Binding {
  // Role that is assigned to the list of members.
  // Format: roles/{role}
  string role = 1;

  // Specifies the principals requesting access for a Bytebase resource.
  // `members` can have the following values:
  //
  // * `allUsers`: A special identifier that represents anyone.
  // * `user:{emailid}`: An email address that represents a specific Bytebase account. For example, `alice@example.com`.
  repeated string members = 2;

  // The condition that is associated with this binding.
  // If the condition evaluates to true, then this binding applies to the current request.
  // If the condition evaluates to false, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding.
  google.type.Expr condition = 3;
}

message MaskingPolicy {
  repeated MaskData mask_data = 1;
}

message MaskData {
  string schema = 1;
  string table = 2;
  string column = 3;
  string semantic_type_id = 4;
  // The full masking algorithm id applied to the column, it will overwrite the algorithm in semantic category.
  string full_masking_algorithm_id = 5;
  // The partial masking algorithm id applied to the column, it will overwrite the algorithm in semantic category.
  string partial_masking_algorithm_id = 6;
  MaskingLevel masking_level = 7;
}

// MaskingExceptionPolicy is the allowlist of users who can access sensitive data.
message MaskingExceptionPolicy {
  message MaskingException {
    enum Action {
      ACTION_UNSPECIFIED = 0;
      QUERY = 1;
      EXPORT = 2;
    }
    // action is the action that the user can access sensitive data.
    Action action = 1;

    // Level is the masking level that the user can access sensitive data.
    MaskingLevel masking_level = 2;

    // Member is the principal who bind to this exception policy instance.
    //
    // * `user:{emailid}`: An email address that represents a specific Bytebase account. For example, `alice@example.com`.
    string member = 4;

    // The condition that is associated with this exception policy instance.
    google.type.Expr condition = 5;
  }

  repeated MaskingException masking_exceptions = 1;
}

message MaskingRulePolicy {
  message MaskingRule {
    // A unique identifier for a node in UUID format.
    string id = 1;

    google.type.Expr condition = 2;

    MaskingLevel masking_level = 3;
  }
  repeated MaskingRule rules = 1;
}
