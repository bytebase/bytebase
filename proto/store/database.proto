syntax = "proto3";

package bytebase.store;

import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

option go_package = "generated-go/store";

// DatabaseMetadata is the metadata for databases.
message DatabaseMetadata {
  map<string, string> labels = 1;
  google.protobuf.Timestamp last_sync_time = 2;
}

// DatabaseSchemaMetadata is the schema metadata for databases.
message DatabaseSchemaMetadata {
  string name = 1;

  // The schemas is the list of schemas in a database.
  repeated SchemaMetadata schemas = 2;

  // The character_set is the character set of a database.
  string character_set = 3;

  // The collation is the collation of a database.
  string collation = 4;

  // The extensions is the list of extensions in a database.
  repeated ExtensionMetadata extensions = 5;

  // The database belongs to a datashare.
  bool datashare = 6;

  // The service name of the database. It's the Oracle specific concept.
  string service_name = 7;
}

// SchemaMetadata is the metadata for schemas.
// This is the concept of schema in Postgres, but it's a no-op for MySQL.
message SchemaMetadata {
  // The name is the schema name.
  // It is an empty string for databases without such concept such as MySQL.
  string name = 1;

  // The tables is the list of tables in a schema.
  repeated TableMetadata tables = 2;

  // The views is the list of views in a schema.
  repeated ViewMetadata views = 3;

  // The functions is the list of functions in a schema.
  repeated FunctionMetadata functions = 4;

  // The streams is the list of streams in a schema, currently, only used for Snowflake.
  repeated StreamMetadata streams = 5;

  // The routines is the list of routines in a schema, currently, only used for Snowflake.
  repeated TaskMetadata tasks = 6;
}

message TaskMetadata {
  // The name is the name of a task.
  string name = 1;

  // The id is the snowflake-generated id of a task.
  // Example: 01ad32a0-1bb6-5e93-0000-000000000001
  string id = 2;

  // The owner of the task.
  string owner = 3;

  // The comment of the task.
  string comment = 4;

  // The warehouse of the task.
  string warehouse = 5;

  // The schedule interval of the task.
  string schedule = 6;

  // The predecessor tasks of the task.
  repeated string predecessors = 7;

  enum State {
    STATE_UNSPECIFIED = 0;
    STATE_STARTED = 1;
    STATE_SUSPENDED = 2;
  }
  // The state of the task.
  State state = 8;

  // The condition of the task.
  string condition = 9;

  // The definition of the task.
  string definition = 10;
}

message StreamMetadata {
  // The name is the name of a stream.
  string name = 1;

  // The table_name is the name of the table/view that the stream is created on.
  string table_name = 2;

  // The owner of the stream.
  string owner = 3;

  // The comment of the stream.
  string comment = 4;

  enum Type {
    TYPE_UNSPECIFIED = 0;
    TYPE_DELTA = 1;
  }
  // The type of the stream.
  Type type = 5;

  // Indicates whether the stream was last read before the `stale_after` time.
  bool stale = 6;

  enum Mode {
    MODE_UNSPECIFIED = 0;
    MODE_DEFAULT = 1;
    MODE_APPEND_ONLY = 2;
    MODE_INSERT_ONLY = 3;
  }
  // The mode of the stream.
  Mode mode = 7;

  // The definition of the stream.
  string definition = 8;
}

// TableMetadata is the metadata for tables.
message TableMetadata {
  // The name is the name of a table.
  string name = 1;

  // The columns is the ordered list of columns in a table.
  repeated ColumnMetadata columns = 2;

  // The indexes is the list of indexes in a table.
  repeated IndexMetadata indexes = 3;

  // TODO(d): figure out whether we need to store table type such as "BASE TABLE".

  // The engine is the engine of a table.
  string engine = 4;

  // The collation is the collation of a table.
  string collation = 5;

  // The row_count is the estimated number of rows of a table.
  int64 row_count = 6;

  // The data_size is the estimated data size of a table.
  int64 data_size = 7;

  // The index_size is the estimated index size of a table.
  int64 index_size = 8;

  // The data_free is the estimated free data size of a table.
  int64 data_free = 9;

  // The create_options is the create option of a table.
  string create_options = 10;

  // The comment is the comment of a table.
  // classification and user_comment is parsed from the comment.
  string comment = 11;

  // The classification is the classification of a table parsed from the comment.
  string classification = 13;

  // The user_comment is the user comment of a table parsed from the comment.
  string user_comment = 14;

  // The foreign_keys is the list of foreign keys in a table.
  repeated ForeignKeyMetadata foreign_keys = 12;
}

// ColumnMetadata is the metadata for columns.
message ColumnMetadata {
  // The name is the name of a column.
  string name = 1;

  // The position is the position in columns.
  int32 position = 2;

  // The default_value is the default value of a column.
  oneof default_value {
    // The default is the default of a column. Use google.protobuf.StringValue to distinguish between an empty string default value or no default.
    google.protobuf.StringValue default = 3;
    bool default_null = 4;
    string default_expression = 5;
  }

  // The nullable is the nullable of a column.
  bool nullable = 6;

  // The type is the type of a column.
  string type = 7;

  // The character_set is the character_set of a column.
  string character_set = 8;

  // The collation is the collation of a column.
  string collation = 9;

  // The comment is the comment of a column.
  // classification and user_comment is parsed from the comment.
  string comment = 10;

  // The classification is the classification of a table parsed from the comment.
  string classification = 11;

  // The user_comment is the user comment of a table parsed from the comment.
  string user_comment = 12;
}

// ViewMetadata is the metadata for views.
message ViewMetadata {
  // The name is the name of a view.
  string name = 1;

  // The definition is the definition of a view.
  string definition = 2;

  // The comment is the comment of a view.
  string comment = 3;

  // The dependent_columns is the list of dependent columns of a view.
  repeated DependentColumn dependent_columns = 4;
}

// DependentColumn is the metadata for dependent columns.
message DependentColumn {
  // The schema is the schema of a reference column.
  string schema = 1;

  // The table is the table of a reference column.
  string table = 2;

  // The column is the name of a reference column.
  string column = 3;
}

// FunctionMetadata is the metadata for functions.
message FunctionMetadata {
  // The name is the name of a view.
  string name = 1;

  // The definition is the definition of a view.
  string definition = 2;
}

// IndexMetadata is the metadata for indexes.
message IndexMetadata {
  // The name is the name of an index.
  string name = 1;

  // The expressions are the ordered columns or expressions of an index.
  // This could refer to a column or an expression.
  repeated string expressions = 2;

  // The type is the type of an index.
  string type = 3;

  // The unique is whether the index is unique.
  bool unique = 4;

  // The primary is whether the index is a primary key index.
  bool primary = 5;

  // The visible is whether the index is visible.
  bool visible = 6;

  // The comment is the comment of an index.
  string comment = 7;
}

// ExtensionMetadata is the metadata for extensions.
message ExtensionMetadata {
  // The name is the name of an extension.
  string name = 1;

  // The schema is the extension that is installed to. But the extension usage is not limited to the schema.
  string schema = 2;

  // The version is the version of an extension.
  string version = 3;

  // The description is the description of an extension.
  string description = 4;
}

// ForeignKeyMetadata is the metadata for foreign keys.
message ForeignKeyMetadata {
  // The name is the name of a foreign key.
  string name = 1;

  // The columns are the ordered referencing columns of a foreign key.
  repeated string columns = 2;

  // The referenced_schema is the referenced schema name of a foreign key.
  // It is an empty string for databases without such concept such as MySQL.
  string referenced_schema = 3;

  // The referenced_table is the referenced table name of a foreign key.
  string referenced_table = 4;

  // The referenced_columns are the ordered referenced columns of a foreign key.
  repeated string referenced_columns = 5;

  // The on_delete is the on delete action of a foreign key.
  string on_delete = 6;

  // The on_update is the on update action of a foreign key.
  string on_update = 7;

  // The match_type is the match type of a foreign key.
  // The match_type is the PostgreSQL specific field.
  // It's empty string for other databases.
  string match_type = 8;
}

// InstanceRoleMetadata is the message for instance role.
message InstanceRoleMetadata {
  // The role name. It's unique within the instance.
  string name = 2;

  // The grant display string on the instance. It's generated by database engine.
  string grant = 7;
}

message Secrets {
  // The list of secrets.
  repeated SecretItem items = 1;
}

message SecretItem {
  // The name is the name of the secret.
  string name = 1;

  // The value is the value of the secret.
  string value = 2;

  // The description is the description of the secret.
  string description = 3;
}

message DatabaseConfig {
  string name = 1;

  // The schema_configs is the list of configs for schemas in a database.
  repeated SchemaConfig schema_configs = 2;
}

message SchemaConfig {
  // The name is the schema name.
  // It is an empty string for databases without such concept such as MySQL.
  string name = 1;

  // The table_configs is the list of configs for tables in a schema.
  repeated TableConfig table_configs = 2;
}

message TableConfig {
  // The name is the name of a table.
  string name = 1;

  // The column_configs is the ordered list of configs for columns in a table.
  repeated ColumnConfig column_configs = 2;
}

message ColumnConfig {
  // The name is the name of a column.
  string name = 1;

  string semantic_type_id = 2;

  // The user labels for a column.
  map<string, string> labels = 3;
}
