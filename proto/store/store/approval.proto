syntax = "proto3";

package bytebase.store;

import "store/common.proto";

option go_package = "generated-go/store";

// IssuePayloadApproval records the approval template used and approval history for an issue.
message IssuePayloadApproval {
  // Approver represents a user who can approve or reject an issue.
  message Approver {
    // Status represents the approver's decision state.
    enum Status {
      STATUS_UNSPECIFIED = 0;
      // Approval is pending from this approver.
      PENDING = 1;
      // Approver has approved the issue.
      APPROVED = 2;
      // Approver has rejected the issue.
      REJECTED = 3;
    }
    // The current approval status.
    Status status = 1;

    // The ID of the principal who is the approver.
    int32 principal_id = 2;
  }

  // The approval template being used for this issue.
  ApprovalTemplate approval_template = 1;
  // List of approvers and their current status.
  repeated Approver approvers = 2;

  // Whether the system has finished finding a matching approval template.
  // False means the backend is still searching for matching templates.
  bool approval_finding_done = 3;

  // Error message if approval template finding failed.
  string approval_finding_error = 4;

  // The assessed risk level for this issue.
  RiskLevel risk_level = 5;
}

// ApprovalTemplate defines the approval workflow and requirements for an issue.
message ApprovalTemplate {
  // The unique identifier for the approval template.
  // Built-in templates use "bb." prefix (e.g., "bb.project-owner", "bb.workspace-dba").
  // Custom templates use a UUID or other unique identifier.
  string id = 4;
  // The approval workflow specification.
  ApprovalFlow flow = 1;
  // Human-readable title of the approval template.
  string title = 2;
  // Detailed description of when this template applies.
  string description = 3;
}

// ApprovalFlow defines the sequence of approvals required.
message ApprovalFlow {
  // List of role names that must approve, in order.
  repeated string roles = 1;
}
