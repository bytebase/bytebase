syntax = "proto3";

package bytebase.store;

option go_package = "generated-go/store";

// PageToken is used internally for obfuscating pagination tokens.
message PageToken {
  // Maximum number of items to return.
  int32 limit = 1;
  // Number of items to skip before starting to return results.
  int32 offset = 2;
}

// Engine represents the type of database system.
enum Engine {
  ENGINE_UNSPECIFIED = 0;
  CLICKHOUSE = 1;
  MYSQL = 2;
  POSTGRES = 3;
  SNOWFLAKE = 4;
  SQLITE = 5;
  TIDB = 6;
  MONGODB = 7;
  REDIS = 8;
  ORACLE = 9;
  SPANNER = 10;
  MSSQL = 11;
  REDSHIFT = 12;
  MARIADB = 13;
  OCEANBASE = 14;
  STARROCKS = 18;
  DORIS = 19;
  HIVE = 20;
  ELASTICSEARCH = 21;
  BIGQUERY = 22;
  DYNAMODB = 23;
  DATABRICKS = 24;
  COCKROACHDB = 25;
  COSMOSDB = 26;
  TRINO = 27;
  CASSANDRA = 28;
}

// VCSType represents the type of version control system.
enum VCSType {
  VCS_TYPE_UNSPECIFIED = 0;
  GITHUB = 1;
  GITLAB = 2;
  BITBUCKET = 3;
  AZURE_DEVOPS = 4;
}

// MaskingLevel represents the level of data masking applied to sensitive information.
enum MaskingLevel {
  MASKING_LEVEL_UNSPECIFIED = 0;
  // No masking applied.
  NONE = 1;
  // Partial masking (e.g., showing first/last characters).
  PARTIAL = 2;
  // Full masking (all characters masked).
  FULL = 3;
}

// ExportFormat represents the file format for exported data.
enum ExportFormat {
  FORMAT_UNSPECIFIED = 0;
  CSV = 1;
  JSON = 2;
  SQL = 3;
  XLSX = 4;
}

// RiskLevel represents the assessed risk level of a database operation.
enum RiskLevel {
  RISK_LEVEL_UNSPECIFIED = 0;
  LOW = 1;
  MODERATE = 2;
  HIGH = 3;
}

// MigrationType represents the type of database migration.
enum MigrationType {
  MIGRATION_TYPE_UNSPECIFIED = 0;
  // DDL changes (Data Definition Language) for schema modifications.
  DDL = 1;
  // DML changes (Data Manipulation Language) for data modifications.
  DML = 2;
  // Online schema migration using gh-ost tool.
  GHOST = 3;
}

// SchemaChangeType represents the strategy for schema changes.
enum SchemaChangeType {
  SCHEMA_CHANGE_TYPE_UNSPECIFIED = 0;
  // Versioned migration with explicit migration scripts.
  VERSIONED = 1;
  // Declarative schema definition (state-based).
  DECLARATIVE = 2;
}

// Position in a text expressed as one-based line and one-based column.
// We use 1-based numbering to match the majority of industry standards:
// - Monaco Editor uses 1-based (https://microsoft.github.io/monaco-editor/typedoc/interfaces/IPosition.html)
// - GitHub Actions uses 1-based (https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-error-message)
// - Most text editors display 1-based positions to users
// Note: LSP uses 0-based (https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#position),
// but we follow the canonical user-facing standards.
//
// Handling unknown positions:
// - If the entire position is unknown, leave this field as nil/undefined
// - If only line is known, set line and leave column as 0 (e.g., line=5, column=0)
// - If only column is known (rare), set column and leave line as 0
// Frontends should check for nil/undefined/zero values and handle them appropriately.
message Position {
  // Line position in a text (one-based).
  // First line of the text is line 1.
  // A value of 0 indicates the line information is unknown.
  int32 line = 1;
  // Column position in a text (one-based).
  // Column is measured in Unicode code points (characters/runes), not bytes or grapheme clusters.
  // First character of the line is column 1.
  // A value of 0 indicates the column information is unknown.
  //
  // Examples:
  // - "SELECT * FROM t" - column 8 is '*'
  // - "SELECT ä½ å¥½ FROM t" - column 8 is 'ä½ ' (even though it's at byte offset 7)
  // - "SELECT ðŸ˜€ FROM t" - column 8 is 'ðŸ˜€' (even though it's 4 bytes in UTF-8)
  int32 column = 2;
}

// Range represents a span within a text or sequence.
message Range {
  // Start index (inclusive).
  int32 start = 1;
  // End index (exclusive).
  int32 end = 2;
}
