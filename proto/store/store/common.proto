syntax = "proto3";

package bytebase.store;

option go_package = "generated-go/store";

// PageToken is used internally for obfuscating pagination tokens.
message PageToken {
  // Maximum number of items to return.
  int32 limit = 1;
  // Number of items to skip before starting to return results.
  int32 offset = 2;
}

// Engine represents the type of database system.
enum Engine {
  ENGINE_UNSPECIFIED = 0;
  CLICKHOUSE = 1;
  MYSQL = 2;
  POSTGRES = 3;
  SNOWFLAKE = 4;
  SQLITE = 5;
  TIDB = 6;
  MONGODB = 7;
  REDIS = 8;
  ORACLE = 9;
  SPANNER = 10;
  MSSQL = 11;
  REDSHIFT = 12;
  MARIADB = 13;
  OCEANBASE = 14;
  STARROCKS = 18;
  DORIS = 19;
  HIVE = 20;
  ELASTICSEARCH = 21;
  BIGQUERY = 22;
  DYNAMODB = 23;
  DATABRICKS = 24;
  COCKROACHDB = 25;
  COSMOSDB = 26;
  TRINO = 27;
  CASSANDRA = 28;
}

// VCSType represents the type of version control system.
enum VCSType {
  VCS_TYPE_UNSPECIFIED = 0;
  GITHUB = 1;
  GITLAB = 2;
  BITBUCKET = 3;
  AZURE_DEVOPS = 4;
}

// MaskingLevel represents the level of data masking applied to sensitive information.
enum MaskingLevel {
  MASKING_LEVEL_UNSPECIFIED = 0;
  // No masking applied.
  NONE = 1;
  // Partial masking (e.g., showing first/last characters).
  PARTIAL = 2;
  // Full masking (all characters masked).
  FULL = 3;
}

// ExportFormat represents the file format for exported data.
enum ExportFormat {
  FORMAT_UNSPECIFIED = 0;
  CSV = 1;
  JSON = 2;
  SQL = 3;
  XLSX = 4;
}

// RiskLevel represents the assessed risk level of a database operation.
enum RiskLevel {
  RISK_LEVEL_UNSPECIFIED = 0;
  LOW = 1;
  MODERATE = 2;
  HIGH = 3;
}

// MigrationType represents the type of database migration.
enum MigrationType {
  MIGRATION_TYPE_UNSPECIFIED = 0;
  // DDL changes (Data Definition Language) for schema modifications.
  DDL = 1;
  // DML changes (Data Manipulation Language) for data modifications.
  DML = 2;
  // Online schema migration using gh-ost tool.
  GHOST = 3;
}

// SchemaChangeType represents the strategy for schema changes.
enum SchemaChangeType {
  SCHEMA_CHANGE_TYPE_UNSPECIFIED = 0;
  // Versioned migration with explicit migration scripts.
  VERSIONED = 1;
  // Declarative schema definition (state-based).
  DECLARATIVE = 2;
}

// Position in a text expressed as one-based line and one-based column.
message Position {
  // Line position in a text (one-based).
  int32 line = 1;
  // Column position in a text (one-based).
  int32 column = 2;
}

// Range represents a span within a text or sequence.
message Range {
  // Start index (inclusive).
  int32 start = 1;
  // End index (exclusive).
  int32 end = 2;
}
