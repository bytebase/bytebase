syntax = "proto3";

package bytebase.store;

option go_package = "generated-go/store";

enum IdentityProviderType {
  IDENTITY_PROVIDER_TYPE_UNSPECIFIED = 0;
  OAUTH2 = 1;
  OIDC = 2;
  LDAP = 3;
}

message IdentityProviderConfig {
  oneof config {
    OAuth2IdentityProviderConfig oauth2_config = 1;
    OIDCIdentityProviderConfig oidc_config = 2;
    LDAPIdentityProviderConfig ldap_config = 3;
  }
}

// OAuth2IdentityProviderConfig is the structure for OAuth2 identity provider config.
message OAuth2IdentityProviderConfig {
  string auth_url = 1;

  string token_url = 2;

  string user_info_url = 3;

  string client_id = 4;

  string client_secret = 5;

  repeated string scopes = 6;

  FieldMapping field_mapping = 7;

  bool skip_tls_verify = 8;

  OAuth2AuthStyle auth_style = 9;
}

// OIDCIdentityProviderConfig is the structure for OIDC identity provider config.
message OIDCIdentityProviderConfig {
  string issuer = 1;

  string client_id = 2;

  string client_secret = 3;

  FieldMapping field_mapping = 4;

  bool skip_tls_verify = 5;

  OAuth2AuthStyle auth_style = 6;

  repeated string scopes = 7;
}

// LDAPIdentityProviderConfig is the structure for LDAP identity provider config.
message LDAPIdentityProviderConfig {
  // Host is the hostname or IP address of the LDAP server, e.g.
  // "ldap.example.com".
  string host = 1;
  // Port is the port number of the LDAP server, e.g. 389. When not set, the
  // default port of the corresponding security protocol will be used, i.e. 389
  // for StartTLS and 636 for LDAPS.
  int32 port = 2;
  // SkipTLSVerify controls whether to skip TLS certificate verification.
  bool skip_tls_verify = 3;
  // BindDN is the DN of the user to bind as a service account to perform
  // search requests.
  string bind_dn = 4;
  // BindPassword is the password of the user to bind as a service account.
  string bind_password = 5;
  // BaseDN is the base DN to search for users, e.g. "ou=users,dc=example,dc=com".
  string base_dn = 6;
  // UserFilter is the filter to search for users, e.g. "(uid=%s)".
  string user_filter = 7;
  // SecurityProtocol is the security protocol to be used for establishing
  // connections with the LDAP server. It should be either StartTLS or LDAPS, and
  // cannot be empty.
  string security_protocol = 8;
  // FieldMapping is the mapping of the user attributes returned by the LDAP
  // server.
  FieldMapping field_mapping = 9;
}

// FieldMapping saves the field names from user info API of identity provider.
// As we save all raw json string of user info response data into `principal.idp_user_info`,
// we can extract the relevant data based with `FieldMapping`.
message FieldMapping {
  reserved 3;

  // Identifier is the field name of the unique identifier in 3rd-party idp user info. Required.
  string identifier = 1;

  // DisplayName is the field name of display name in 3rd-party idp user info. Optional.
  string display_name = 2;

  // Phone is the field name of primary phone in 3rd-party idp user info. Optional.
  string phone = 4;

  // Groups is the field name of groups in 3rd-party idp user info. Optional.
  // Mainly used for OIDC: https://developer.okta.com/docs/guides/customize-tokens-groups-claim/main/
  string groups = 5;
}

message IdentityProviderUserInfo {
  reserved 3;

  // Identifier is the value of the unique identifier in 3rd-party idp user info.
  string identifier = 1;

  // DisplayName is the value of display name in 3rd-party idp user info.
  string display_name = 2;

  // Phone is the value of primary phone in 3rd-party idp user info.
  string phone = 4;

  // Groups is the value of groups in 3rd-party idp user info.
  // Mainly used for OIDC: https://developer.okta.com/docs/guides/customize-tokens-groups-claim/main/
  repeated string groups = 5;

  bool has_groups = 6;
}

enum OAuth2AuthStyle {
  OAUTH2_AUTH_STYLE_UNSPECIFIED = 0;
  // IN_PARAMS sends the "client_id" and "client_secret" in the POST body
  // as application/x-www-form-urlencoded parameters.
  IN_PARAMS = 1;
  // IN_HEADER sends the client_id and client_password using HTTP Basic Authorization.
  // This is an optional style described in the OAuth2 RFC 6749 section 2.3.1.
  IN_HEADER = 2;
}
