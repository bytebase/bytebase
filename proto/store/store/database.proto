syntax = "proto3";

package bytebase.store;

import "google/protobuf/timestamp.proto";
import "store/common.proto";

option go_package = "generated-go/store";

// DatabaseMetadata is the metadata for databases.
message DatabaseMetadata {
  map<string, string> labels = 1;
  google.protobuf.Timestamp last_sync_time = 2;
  bool backup_available = 3;
  bool datashare = 4;
  // The schema is drifted from the source of truth.
  bool drifted = 6;
  // The version of database schema.
  string version = 7;
}

// DatabaseSchemaMetadata is the schema metadata for databases.
message DatabaseSchemaMetadata {
  string name = 1;

  // The schemas is the list of schemas in a database.
  repeated SchemaMetadata schemas = 2;

  // The character_set is the character set of a database.
  string character_set = 3;

  // The collation is the collation of a database.
  string collation = 4;

  // The extensions is the list of extensions in a database.
  repeated ExtensionMetadata extensions = 5;

  // The database belongs to a datashare.
  bool datashare = 6;

  // The service name of the database. It's the Oracle specific concept.
  string service_name = 7;

  repeated LinkedDatabaseMetadata linked_databases = 8;

  string owner = 9;

  // The search_path is the search path of a PostgreSQL database.
  string search_path = 10;
}

message LinkedDatabaseMetadata {
  string name = 1;

  string username = 2;

  string host = 3;
}

// SchemaMetadata is the metadata for schemas.
// This is the concept of schema in Postgres, but it's a no-op for MySQL.
message SchemaMetadata {
  // The name is the schema name.
  // It is an empty string for databases without such concept such as MySQL.
  string name = 1;

  // The tables is the list of tables in a schema.
  repeated TableMetadata tables = 2;

  // The external_tables is the list of external tables in a schema.
  repeated ExternalTableMetadata external_tables = 3;

  // The views is the list of views in a schema.
  repeated ViewMetadata views = 4;

  // The functions is the list of functions in a schema.
  repeated FunctionMetadata functions = 5;

  // The procedures is the list of procedures in a schema.
  repeated ProcedureMetadata procedures = 6;

  // The streams is the list of streams in a schema, currently, only used for
  // Snowflake.
  repeated StreamMetadata streams = 7;

  // The routines is the list of routines in a schema, currently, only used for
  // Snowflake.
  repeated TaskMetadata tasks = 8;

  // The materialized_views is the list of materialized views in a schema.
  repeated MaterializedViewMetadata materialized_views = 9;

  // The sequences is the list of sequences in a schema.
  repeated SequenceMetadata sequences = 10;

  // The packages is the list of packages in a schema.
  repeated PackageMetadata packages = 11;

  string owner = 12;

  string comment = 13;

  repeated EventMetadata events = 14;

  repeated EnumTypeMetadata enum_types = 15;

  bool skip_dump = 16;
}

message EnumTypeMetadata {
  // The name of a type.
  string name = 1;

  // The enum values of a type.
  repeated string values = 2;

  string comment = 3;

  bool skip_dump = 4;
}

message EventMetadata {
  // The name of the event.
  string name = 1;

  // The schedule of the event.
  string definition = 2;

  // The time zone of the event.
  string time_zone = 3;

  string sql_mode = 4;

  string character_set_client = 5;

  string collation_connection = 6;

  string comment = 7;
}

message SequenceMetadata {
  // The name of a sequence.
  string name = 1;

  // The data type of a sequence.
  string data_type = 2;

  // The start value of a sequence.
  string start = 3;

  // The minimum value of a sequence.
  string min_value = 4;

  // The maximum value of a sequence.
  string max_value = 5;

  // Increment value of a sequence.
  string increment = 6;

  // Cycle is whether the sequence cycles.
  bool cycle = 7;

  // Cache size of a sequence.
  string cache_size = 8;

  // Last value of a sequence.
  string last_value = 9;

  // The owner table of the sequence.
  string owner_table = 10;

  // The owner column of the sequence.
  string owner_column = 11;

  string comment = 12;

  bool skip_dump = 13;
}

message TriggerMetadata {
  // The name is the name of the trigger.
  string name = 1;

  // The event is the event of the trigger, such as INSERT, UPDATE, DELETE,
  // TRUNCATE.
  string event = 3;

  // The timing is the timing of the trigger, such as BEFORE, AFTER.
  string timing = 4;

  // The body is the body of the trigger.
  string body = 5;

  string sql_mode = 6;

  string character_set_client = 7;

  string collation_connection = 8;

  string comment = 9;

  bool skip_dump = 10;
}

message TaskMetadata {
  // The name is the name of a task.
  string name = 1;

  // The id is the snowflake-generated id of a task.
  // Example: 01ad32a0-1bb6-5e93-0000-000000000001
  string id = 2;

  // The owner of the task.
  string owner = 3;

  // The comment of the task.
  string comment = 4;

  // The warehouse of the task.
  string warehouse = 5;

  // The schedule interval of the task.
  string schedule = 6;

  // The predecessor tasks of the task.
  repeated string predecessors = 7;

  enum State {
    STATE_UNSPECIFIED = 0;
    STATE_STARTED = 1;
    STATE_SUSPENDED = 2;
  }
  // The state of the task.
  State state = 8;

  // The condition of the task.
  string condition = 9;

  // The definition of the task.
  string definition = 10;
}

message StreamMetadata {
  // The name is the name of a stream.
  string name = 1;

  // The table_name is the name of the table/view that the stream is created on.
  string table_name = 2;

  // The owner of the stream.
  string owner = 3;

  // The comment of the stream.
  string comment = 4;

  enum Type {
    TYPE_UNSPECIFIED = 0;
    TYPE_DELTA = 1;
  }
  // The type of the stream.
  Type type = 5;

  // Indicates whether the stream was last read before the `stale_after` time.
  bool stale = 6;

  enum Mode {
    MODE_UNSPECIFIED = 0;
    MODE_DEFAULT = 1;
    MODE_APPEND_ONLY = 2;
    MODE_INSERT_ONLY = 3;
  }
  // The mode of the stream.
  Mode mode = 7;

  // The definition of the stream.
  string definition = 8;
}

// TableMetadata is the metadata for tables.
message TableMetadata {
  // The name is the name of a table.
  string name = 1;

  // The columns is the ordered list of columns in a table.
  repeated ColumnMetadata columns = 2;

  // The indexes is the list of indexes in a table.
  repeated IndexMetadata indexes = 3;

  // TODO(d): figure out whether we need to store table type such as "BASE
  // TABLE".

  // The engine is the engine of a table.
  string engine = 4;

  // The collation is the collation of a table.
  string collation = 5;

  // The character set of table.
  string charset = 17;

  // The row_count is the estimated number of rows of a table.
  int64 row_count = 6;

  // The data_size is the estimated data size of a table.
  int64 data_size = 7;

  // The index_size is the estimated index size of a table.
  int64 index_size = 8;

  // The data_free is the estimated free data size of a table.
  int64 data_free = 9;

  // The create_options is the create option of a table.
  string create_options = 10;

  // The comment is the comment of a table.
  // classification and user_comment is parsed from the comment.
  string comment = 11;

  // The user_comment is the user comment of a table parsed from the comment.
  string user_comment = 14;

  // The foreign_keys is the list of foreign keys in a table.
  repeated ForeignKeyMetadata foreign_keys = 12;

  // The partitions is the list of partitions in a table.
  repeated TablePartitionMetadata partitions = 15;

  // The check_constraints is the list of check constraints in a table.
  repeated CheckConstraintMetadata check_constraints = 16;

  string owner = 18;

  // The sorting_keys is a tuple of column names or arbitrary expressions. ClickHouse specific field.
  // Reference: https://clickhouse.com/docs/en/engines/table-engines/mergetree-family/mergetree#order_by
  repeated string sorting_keys = 19;

  repeated TriggerMetadata triggers = 20;

  bool skip_dump = 21;

  // https://docs.pingcap.com/tidb/stable/information-schema-tables/
  string sharding_info = 22;

  // https://docs.pingcap.com/tidb/stable/clustered-indexes/#clustered-indexes
  // CLUSTERED or NONCLUSTERED.
  string primary_key_type = 23;
}

message CheckConstraintMetadata {
  // The name is the name of a check constraint.
  string name = 1;

  // The expression is the expression of a check constraint.
  string expression = 2;
}

message ExternalTableMetadata {
  // The name is the name of a external table.
  string name = 1;

  // The external_server_name is the name of the external server.
  string external_server_name = 2;

  // The external_database_name is the name of the external database.
  string external_database_name = 3;

  // The columns is the ordered list of columns in a foreign table.
  repeated ColumnMetadata columns = 4;
}

// TablePartitionMetadata is the metadata for table partitions.
message TablePartitionMetadata {
  // The name is the name of a table partition.
  string name = 1;

  // Type is the type of a table partition, some database engines may not
  // support all types. Only avilable for the following database engines now:
  // MySQL: RANGE, RANGE COLUMNS, LIST, LIST COLUMNS, HASH, LINEAR HASH, KEY,
  // LINEAR_KEY
  // (https://dev.mysql.com/doc/refman/8.0/en/partitioning-types.html) TiDB:
  // RANGE, RANGE COLUMNS, LIST, LIST COLUMNS, HASH, KEY PostgreSQL: RANGE,
  // LIST, HASH (https://www.postgresql.org/docs/current/ddl-partitioning.html)
  enum Type {
    TYPE_UNSPECIFIED = 0;
    RANGE = 1;
    RANGE_COLUMNS = 2;
    LIST = 3;
    LIST_COLUMNS = 4;
    HASH = 5;
    LINEAR_HASH = 6;
    KEY = 7;
    LINEAR_KEY = 8;
  }

  // The type of a table partition.
  Type type = 2;

  // The expression is the expression of a table partition.
  // For PostgreSQL, the expression is the text of {FOR VALUES
  // partition_bound_spec}, see
  // https://www.postgresql.org/docs/current/sql-createtable.html. For MySQL,
  // the expression is the `expr` or `column_list` of the following syntax.
  // PARTITION BY
  //    { [LINEAR] HASH(expr)
  //    | [LINEAR] KEY [ALGORITHM={1 | 2}] (column_list)
  //    | RANGE{(expr) | COLUMNS(column_list)}
  //    | LIST{(expr) | COLUMNS(column_list)} }.
  string expression = 3;

  // The value is the value of a table partition.
  // For MySQL, the value is for RANGE and LIST partition types,
  // - For a RANGE partition, it contains the value set in the partition's
  // VALUES LESS THAN clause, which can be either an integer or MAXVALUE.
  // - For a LIST partition, this column contains the values defined in the
  // partition's VALUES IN clause, which is a list of comma-separated integer
  // values.
  // - For others, it's an empty string.
  string value = 4;

  // The use_default is whether the users use the default partition, it stores
  // the different value for different database engines. For MySQL, it's [INT]
  // type, 0 means not use default partition, otherwise, it's equals to number
  // in syntax [SUB]PARTITION {number}.
  string use_default = 5;

  // The subpartitions is the list of subpartitions in a table partition.
  repeated TablePartitionMetadata subpartitions = 6;

  repeated IndexMetadata indexes = 7;

  repeated CheckConstraintMetadata check_constraints = 8;
}

// ColumnMetadata is the metadata for columns.
message ColumnMetadata {
  // The name is the name of a column.
  string name = 1;

  // The position is the position in columns.
  int32 position = 2;

  // The default value of column.
  string default = 3;
  // Deprecated.
  bool default_null = 4;
  // Deprecated.
  string default_expression = 5;

  // Oracle specific metadata.
  // The default_on_null is the default on null of a column.
  bool default_on_null = 16;

  // The on_update is the on update action of a column.
  // For MySQL like databases, it's only supported for TIMESTAMP columns with
  // CURRENT_TIMESTAMP as on update value.
  string on_update = 13;

  // The nullable is the nullable of a column.
  bool nullable = 6;

  // The type is the type of a column.
  string type = 7;

  // The character_set is the character_set of a column.
  string character_set = 8;

  // The collation is the collation of a column.
  string collation = 9;

  // The comment is the comment of a column.
  // classification and user_comment is parsed from the comment.
  string comment = 10;

  // The user_comment is the user comment of a table parsed from the comment.
  string user_comment = 12;

  // The generation is for generated columns.
  GenerationMetadata generation = 14;

  bool is_identity = 17;

  enum IdentityGeneration {
    IDENTITY_GENERATION_UNSPECIFIED = 0;
    ALWAYS = 1;
    BY_DEFAULT = 2;
  }

  // The identity_generation is for identity columns, PG only.
  IdentityGeneration identity_generation = 15;

  // The identity_seed is for identity columns, MSSQL only.
  int64 identity_seed = 18;

  // The identity_increment is for identity columns, MSSQL only.
  int64 identity_increment = 19;

  // The default_constraint_name is the name of the default constraint, MSSQL only.
  // In MSSQL, default values are implemented as named constraints. When modifying or
  // dropping a column's default value, you must reference the constraint by name.
  // This field stores the actual constraint name from the database.
  //
  // Example: A column definition like:
  //   CREATE TABLE employees (
  //     status NVARCHAR(20) DEFAULT 'active'
  //   )
  //
  // Will create a constraint with an auto-generated name like 'DF__employees__statu__3B75D760'
  // or a user-defined name if specified:
  //   ALTER TABLE employees ADD CONSTRAINT DF_employees_status DEFAULT 'active' FOR status
  //
  // To modify the default, you must first drop the existing constraint by name:
  //   ALTER TABLE employees DROP CONSTRAINT DF__employees__statu__3B75D760
  //   ALTER TABLE employees ADD CONSTRAINT DF_employees_status DEFAULT 'inactive' FOR status
  //
  // This field is populated when syncing from the database. When empty (e.g., when parsing
  // from SQL files), the system cannot automatically drop the constraint.
  string default_constraint_name = 20;
}

message GenerationMetadata {
  enum Type {
    TYPE_UNSPECIFIED = 0;
    TYPE_VIRTUAL = 1;
    TYPE_STORED = 2;
  }

  Type type = 1;
  string expression = 2;
}

// ViewMetadata is the metadata for views.
message ViewMetadata {
  // The name is the name of a view.
  string name = 1;

  // The definition is the definition of a view.
  string definition = 2;

  // The comment is the comment of a view.
  string comment = 3;

  // The dependency_columns is the list of dependency columns of a view.
  repeated DependencyColumn dependency_columns = 4;

  // The columns is the ordered list of columns in a table.
  repeated ColumnMetadata columns = 5;

  // The triggers is the list of triggers in a view.
  repeated TriggerMetadata triggers = 6;

  bool skip_dump = 7;
}

// DependencyColumn is the metadata for dependency columns.
message DependencyColumn {
  // The schema is the schema of a reference column.
  string schema = 1;

  // The table is the table of a reference column.
  string table = 2;

  // The column is the name of a reference column.
  string column = 3;
}

// MaterializedViewMetadata is the metadata for materialized views.
message MaterializedViewMetadata {
  // The name is the name of a view.
  string name = 1;

  // The definition is the definition of a view.
  string definition = 2;

  // The comment is the comment of a view.
  string comment = 3;

  // The dependency_columns is the list of dependency columns of a view.
  repeated DependencyColumn dependency_columns = 4;

  // The columns is the ordered list of columns in a table.
  repeated TriggerMetadata triggers = 5;

  // The indexes is the list of indexes in a table.
  repeated IndexMetadata indexes = 6;

  bool skip_dump = 7;
}

message DependencyTable {
  // The schema is the schema of a reference table.
  string schema = 1;

  // The table is the name of a reference table.
  string table = 2;
}

// FunctionMetadata is the metadata for functions.
message FunctionMetadata {
  // The name is the name of a function.
  string name = 1;

  // The definition is the definition of a function.
  string definition = 2;

  // The signature is the name with the number and type of input arguments the
  // function takes.
  string signature = 3;

  // MySQL specific metadata.
  string character_set_client = 4;

  string collation_connection = 5;

  string database_collation = 6;

  string sql_mode = 7;

  string comment = 8;

  // The dependency_tables is the list of dependency tables of a function.
  // For PostgreSQL, it's the list of tables that the function depends on the return type definition.
  repeated DependencyTable dependency_tables = 9;

  bool skip_dump = 10;
}

// ProcedureMetadata is the metadata for procedures.
message ProcedureMetadata {
  // The name is the name of a procedure.
  string name = 1;

  // The definition is the definition of a procedure.
  string definition = 2;

  // The signature is the name with the number and type of input arguments the
  // function takes.
  string signature = 3;

  // MySQL specific metadata.
  string character_set_client = 4;

  string collation_connection = 5;

  string database_collation = 6;

  string sql_mode = 7;

  string comment = 9;

  bool skip_dump = 8;
}

// PackageMetadata is the metadata for packages.
message PackageMetadata {
  // The name is the name of a package.
  string name = 1;

  // The definition is the definition of a package.
  string definition = 2;
}

// IndexMetadata is the metadata for indexes.
message IndexMetadata {
  // The name is the name of an index.
  string name = 1;

  // The expressions are the ordered columns or expressions of an index.
  // This could refer to a column or an expression.
  repeated string expressions = 2;

  // The key_lengths are the ordered key lengths of an index.
  // If the key length is not specified, it's -1.
  repeated int64 key_length = 9;

  // The descending is the ordered descending of an index.
  repeated bool descending = 10;

  // The type is the type of an index.
  string type = 3;

  // The unique is whether the index is unique.
  bool unique = 4;

  // The primary is whether the index is a primary key index.
  bool primary = 5;

  // The visible is whether the index is visible.
  bool visible = 6;

  // The comment is the comment of an index.
  string comment = 7;

  // The definition of an index.
  string definition = 8;

  // The schema name of the parent index.
  string parent_index_schema = 11;

  // The index name of the parent index.
  string parent_index_name = 12;

  // The number of granules in the block. It's a ClickHouse specific field.
  int64 granularity = 13;

  // It's a PostgreSQL specific field.
  // The unique constraint and unique index are not the same thing in PostgreSQL.
  bool is_constraint = 14;

  // Spatial index specific configuration
  SpatialIndexConfig spatial_config = 15;
}

// SpatialIndexConfig is the configuration for spatial indexes across different database engines.
message SpatialIndexConfig {
  // Index method/type (database-specific)
  // Examples: "SPATIAL" (MySQL/SQL Server), "GIST"/"SPGIST" (PostgreSQL), "MDSYS.SPATIAL_INDEX_V2" (Oracle)
  string method = 1;

  // Tessellation configuration (primarily SQL Server)
  TessellationConfig tessellation = 2;

  // Storage and performance parameters
  StorageConfig storage = 3;

  // Dimensional and constraint parameters
  DimensionalConfig dimensional = 4;

  // Database-specific parameters (stored as key-value pairs for extensibility)
  map<string, string> engine_specific = 5;
}

// TessellationConfig defines tessellation parameters for spatial indexes.
message TessellationConfig {
  // Tessellation scheme
  // Examples: GEOMETRY_GRID, GEOGRAPHY_GRID, GEOMETRY_AUTO_GRID, GEOGRAPHY_AUTO_GRID
  string scheme = 1;

  // Bounding box for GEOMETRY indexes (SQL Server)
  BoundingBox bounding_box = 2;

  // Grid level configuration (SQL Server)
  repeated GridLevel grid_levels = 3;

  // Cells per object (SQL Server)
  int32 cells_per_object = 4;
}

// BoundingBox defines the bounding box for spatial indexes.
message BoundingBox {
  double xmin = 1;
  double ymin = 2;
  double xmax = 3;
  double ymax = 4;
}

// GridLevel defines a grid level for spatial tessellation.
message GridLevel {
  int32 level = 1; // 1-4 for SQL Server
  string density = 2; // LOW, MEDIUM, HIGH
}

// StorageConfig defines storage and performance parameters for spatial indexes.
message StorageConfig {
  // PostgreSQL parameters
  int32 fillfactor = 1; // 10-100
  string buffering = 2; // auto, on, off

  // Oracle parameters
  string tablespace = 3;
  string work_tablespace = 4;
  int32 sdo_level = 5;
  int32 commit_interval = 6;

  // SQL Server parameters
  bool pad_index = 7;
  string sort_in_tempdb = 8; // ON, OFF
  bool drop_existing = 9;
  bool online = 10;
  bool allow_row_locks = 11;
  bool allow_page_locks = 12;
  int32 maxdop = 13;
  string data_compression = 14; // NONE, ROW, PAGE
}

// DimensionalConfig defines dimensional and constraint parameters for spatial indexes.
message DimensionalConfig {
  // Number of dimensions (2-4, default 2)
  int32 dimensions = 1;

  // Spatial data type
  // Examples: GEOMETRY, GEOGRAPHY, POINT, POLYGON, etc.
  string data_type = 2;

  // PostgreSQL operator class
  // Examples: gist_geometry_ops_2d, gist_geometry_ops_nd, etc.
  string operator_class = 3;

  // Oracle geometry type constraint
  // Examples: POINT, LINE, POLYGON, COLLECTION
  string layer_gtype = 4;

  // Parallel index creation
  bool parallel_build = 5;
}

// ExtensionMetadata is the metadata for extensions.
message ExtensionMetadata {
  // The name is the name of an extension.
  string name = 1;

  // The schema is the extension that is installed to. But the extension usage
  // is not limited to the schema.
  string schema = 2;

  // The version is the version of an extension.
  string version = 3;

  // The description is the description of an extension.
  string description = 4;
}

// ForeignKeyMetadata is the metadata for foreign keys.
message ForeignKeyMetadata {
  // The name is the name of a foreign key.
  string name = 1;

  // The columns are the ordered referencing columns of a foreign key.
  repeated string columns = 2;

  // The referenced_schema is the referenced schema name of a foreign key.
  // It is an empty string for databases without such concept such as MySQL.
  string referenced_schema = 3;

  // The referenced_table is the referenced table name of a foreign key.
  string referenced_table = 4;

  // The referenced_columns are the ordered referenced columns of a foreign key.
  repeated string referenced_columns = 5;

  // The on_delete is the on delete action of a foreign key.
  string on_delete = 6;

  // The on_update is the on update action of a foreign key.
  string on_update = 7;

  // The match_type is the match type of a foreign key.
  // The match_type is the PostgreSQL specific field.
  // It's empty string for other databases.
  string match_type = 8;
}

// InstanceRoleMetadata is the message for instance role.
message InstanceRoleMetadata {
  // The role name. It's unique within the instance.
  string name = 2;

  // The grant display string on the instance. It's generated by database
  // engine.
  string grant = 7;
}

message DatabaseConfig {
  reserved 3;

  string name = 1;

  // The schema_configs is the list of configs for schemas in a database.
  repeated SchemaCatalog schemas = 2;
}

message SchemaCatalog {
  // The name is the schema name.
  // It is an empty string for databases without such concept such as MySQL.
  string name = 1;

  // The table_configs is the list of configs for tables in a schema.
  repeated TableCatalog tables = 2;
}

message TableCatalog {
  // The name is the name of a table.
  string name = 1;

  // The column_configs is the ordered list of configs for columns in a table.
  repeated ColumnCatalog columns = 2;

  optional ObjectSchema object_schema = 7;

  string classification = 3;
}

message ColumnCatalog {
  // The name is the name of a column.
  string name = 1;

  string semantic_type = 2;

  // The user labels for a column.
  map<string, string> labels = 3;

  string classification = 4;

  optional ObjectSchema object_schema = 5;

  // Deprecated.
  MaskingLevel masking_level = 6;
  // Deprecated.
  string full_masking_algorithm_id = 7;
  // Deprecated.
  string partial_masking_algorithm_id = 8;
}

message ObjectSchema {
  enum Type {
    TYPE_UNSPECIFIED = 0;
    STRING = 1;
    NUMBER = 2;
    BOOLEAN = 3;
    OBJECT = 4;
    ARRAY = 5;
  }
  Type type = 1;

  message StructKind {
    map<string, ObjectSchema> properties = 1;
  }
  message ArrayKind {
    ObjectSchema kind = 1;
  }
  oneof kind {
    StructKind struct_kind = 2;
    ArrayKind array_kind = 3;
  }

  string semantic_type = 4;
}
