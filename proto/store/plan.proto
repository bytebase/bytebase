syntax = "proto3";

package bytebase.store;

import "google/api/field_behavior.proto";
import "google/protobuf/timestamp.proto";

option go_package = "generated-go/store";

message PlanConfig {
  repeated Step steps = 1;

  message Step {
    repeated Spec specs = 1;
  }
  message Spec {
    // earliest_allowed_time the earliest execution time of the change.
    google.protobuf.Timestamp earliest_allowed_time = 4;
    // A UUID4 string that uniquely identifies the Spec.
    string id = 5;

    oneof config {
      CreateDatabaseConfig create_database_config = 1;
      ChangeDatabaseConfig change_database_config = 2;
      RestoreDatabaseConfig restore_database_config = 3;
    }
  }

  message CreateDatabaseConfig {
    // The resource name of the instance on which the database is created.
    // Format: instances/{instance}
    string target = 1 [(google.api.field_behavior) = REQUIRED];
    // The name of the database to create.
    string database = 2 [(google.api.field_behavior) = REQUIRED];
    // table is the name of the table, if it is not empty, Bytebase should create a table after creating the database.
    // For example, in MongoDB, it only creates the database when we first store data in that database.
    string table = 3 [(google.api.field_behavior) = OPTIONAL];
    // character_set is the character set of the database.
    string character_set = 4 [(google.api.field_behavior) = OPTIONAL];
    // collation is the collation of the database.
    string collation = 5 [(google.api.field_behavior) = OPTIONAL];
    // cluster is the cluster of the database. This is only applicable to ClickHouse for "ON CLUSTER <<cluster>>".
    string cluster = 6 [(google.api.field_behavior) = OPTIONAL];
    // owner is the owner of the database. This is only applicable to Postgres for "WITH OWNER <<owner>>".
    string owner = 7 [(google.api.field_behavior) = OPTIONAL];
    // backup is the resource name of the backup.
    // Format: instances/{instance}/databases/{database}/backups/{backup-name}
    string backup = 8 [(google.api.field_behavior) = OPTIONAL];
    // The environment resource.
    // Format: environments/prod where prod is the environment resource ID.
    string environment = 9 [(google.api.field_behavior) = OPTIONAL];
    // labels of the database.
    map<string, string> labels = 10 [(google.api.field_behavior) = OPTIONAL];
  }

  message ChangeDatabaseConfig {
    // The resource name of the target.
    // Format: instances/{instance-id}/databases/{database-name}.
    // Format: projects/{project}/databaseGroups/{databaseGroup}.
    // Format: projects/{project}/deploymentConfigs/default. The plan should
    // have a single step and single spec for the deployment configuration type.
    string target = 1;
    // The resource name of the sheet.
    // Format: projects/{project}/sheets/{sheet}
    string sheet = 2;
    // Type is the database change type.
    enum Type {
      TYPE_UNSPECIFIED = 0;
      // Used for establishing schema baseline, this is used when
      // 1. Onboard the database into Bytebase since Bytebase needs to know the current database schema.
      // 2. Had schema drift and need to re-establish the baseline.
      BASELINE = 1;
      // Used for DDL changes including CREATE DATABASE.
      MIGRATE = 2;
      // Used for schema changes via state-based schema migration including CREATE DATABASE.
      MIGRATE_SDL = 3;
      // Used for DDL changes using gh-ost.
      MIGRATE_GHOST = 4;
      // Used when restoring from a backup (the restored database branched from the original backup).
      BRANCH = 5;
      // Used for DML change.
      DATA = 6;
    }
    Type type = 3;
    // schema_version is parsed from VCS file name.
    // It is automatically generated in the UI workflow.
    string schema_version = 4;

    // If RollbackEnabled, build the RollbackSheetID of the task after the task is completed.
    bool rollback_enabled = 5;

    message RollbackDetail {
      // rollback_from_task is the task from which the rollback SQL statement is generated for this task.
      // Format: projects/{project}/rollouts/{rollout}/stages/{stage}/tasks/{task}
      string rollback_from_task = 1;
      // rollback_from_issue is the issue containing the original task from which the rollback SQL statement is generated for this task.
      // Format: projects/{project}/issues/{issue}
      string rollback_from_issue = 2;
    }
    optional RollbackDetail rollback_detail = 6;

    map<string, string> ghost_flags = 7;

    message PreUpdateBackupDetail {
      // The database for keeping the backup data.
      // Format: instances/{instance}/databases/{database}
      string database = 1;
    }
    // If set, a backup of the modified data will be created automatically before any changes are applied.
    optional PreUpdateBackupDetail pre_update_backup_detail = 8;
  }

  message RestoreDatabaseConfig {
    // The resource name of the target to restore.
    // Format: instances/{instance}/databases/{database}
    string target = 1;
    // create_database_config is present if the user wants to restore to a new database.
    optional CreateDatabaseConfig create_database_config = 2;
    // source determines how to restore the database.
    // 1. from a backup
    // 2. from a point in time
    oneof source {
      // Restore from a backup.
      // Format: instances/{instance}/databases/{database}/backups/{backup-name}
      string backup = 3;
      // After the PITR operations, the database will be recovered to the state at this time.
      google.protobuf.Timestamp point_in_time = 4;
    }
  }
}
