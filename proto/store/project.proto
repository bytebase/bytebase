syntax = "proto3";

package bytebase.store;

import "google/type/expr.proto";

option go_package = "generated-go/store";

message Label {
  string value = 1;
  string color = 2;
  string group = 3;
}

message Project {
  repeated ProtectionRule protection_rules = 1;
  repeated Label issue_labels = 2;
  // Force issue labels to be used when creating an issue.
  bool force_issue_labels = 3;
  // Allow modifying statement after issue is created.
  bool allow_modify_statement = 4;
  // Enable auto resolve issue.
  bool auto_resolve_issue = 5;
}

message ProtectionRule {
  // A unique identifier for a node in UUID format.
  string id = 1;

  // The type of target.
  enum Target {
    PROTECTION_TARGET_UNSPECIFIED = 0;
    BRANCH = 1;
    CHANGELIST = 2;
  }

  Target target = 2;

  // The name of the branch/changelist or wildcard.
  string name_filter = 3;

  // The roles allowed to create branches or changelists, rebase branches, delete branches.
  // Format: roles/projectOwner.
  repeated string allowed_roles = 4;

  enum BranchSource {
    BRANCH_SOURCE_UNSPECIFIED = 0;
    DATABASE = 1;
  }
  BranchSource branch_source = 5;
}

message Binding {
  // The role that is assigned to the members.
  // Format: roles/{role}
  string role = 1;

  // Specifies the principals requesting access for a Bytebase resource.
  // For users, the member should be: users/{userUID}
  // For groups, the member should be: groups/{email}
  repeated string members = 2;

  // The condition that is associated with this binding.
  // If the condition evaluates to true, then this binding applies to the current request.
  // If the condition evaluates to false, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding.
  google.type.Expr condition = 3;
}

message ProjectIamPolicy {
  // Collection of binding.
  // A binding binds one or more members or groups to a single project role.
  repeated Binding bindings = 1;
}
