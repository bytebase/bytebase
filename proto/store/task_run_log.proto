syntax = "proto3";

package bytebase.store;

import "store/task_run.proto";

option go_package = "generated-go/store";

message TaskRunLog {
  enum Type {
    TYPE_UNSPECIFIED = 0;
    SCHEMA_DUMP_START = 1;
    SCHEMA_DUMP_END = 2;
    COMMAND_EXECUTE = 3;
    COMMAND_RESPONSE = 4;
    DATABASE_SYNC_START = 5;
    DATABASE_SYNC_END = 6;
    TASK_RUN_STATUS_UPDATE = 7;
    TRANSACTION_CONTROL = 8;
    PRIOR_BACKUP_START = 9;
    PRIOR_BACKUP_END = 10;
  }
  Type type = 1;
  string deploy_id = 12;
  SchemaDumpStart schema_dump_start = 2;
  SchemaDumpEnd schema_dump_end = 3;
  CommandExecute command_execute = 4;
  CommandResponse command_response = 5;
  DatabaseSyncStart database_sync_start = 6;
  DatabaseSyncEnd database_sync_end = 7;
  TaskRunStatusUpdate task_run_status_update = 8;
  TransactionControl transaction_control = 9;
  PriorBackupStart prior_backup_start = 10;
  PriorBackupEnd prior_backup_end = 11;

  message SchemaDumpStart {}
  message SchemaDumpEnd {
    string error = 1;
  }
  message CommandExecute {
    // The indexes of the executed commands.
    repeated int32 command_indexes = 1;
  }
  message CommandResponse {
    // The indexes of the executed commands.
    repeated int32 command_indexes = 1;
    string error = 2;
    int32 affected_rows = 3;
    // `all_affected_rows` is the affected rows of each command.
    // `all_affected_rows` may be unavailable if the database driver doesn't support it. Caller should fallback to `affected_rows` in that case.
    repeated int32 all_affected_rows = 4;
  }
  message DatabaseSyncStart {}
  message DatabaseSyncEnd {
    string error = 1;
  }
  message TaskRunStatusUpdate {
    Status status = 1;
    enum Status {
      STATUS_UNSPECIFIED = 0;
      // the task run is ready to be executed by the scheduler
      RUNNING_WAITING = 1;
      // the task run is being executed by the scheduler
      RUNNING_RUNNING = 2;
    }
  }
  message TransactionControl {
    enum Type {
      TYPE_UNSPECIFIED = 0;
      BEGIN = 1;
      COMMIT = 2;
      ROLLBACK = 3;
    }
    Type type = 1;
    string error = 2;
  }
  message PriorBackupStart {}
  message PriorBackupEnd {
    PriorBackupDetail prior_backup_detail = 1;
    string error = 2;
  }
}
