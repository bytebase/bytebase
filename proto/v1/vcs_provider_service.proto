syntax = "proto3";

package bytebase.v1;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "v1/annotation.proto";
import "v1/common.proto";
import "v1/vcs_connector_service.proto";

option go_package = "generated-go/v1";

service VCSProviderService {
  rpc GetVCSProvider(GetVCSProviderRequest) returns (VCSProvider) {
    option (google.api.http) = {get: "/v1/{name=vcsProviders/*}"};
    option (google.api.method_signature) = "name";
    option (bytebase.v1.permission) = "bb.vcsProviders.get";
  }

  rpc ListVCSProviders(ListVCSProvidersRequest) returns (ListVCSProvidersResponse) {
    option (google.api.http) = {get: "/v1/vcsProviders"};
    option (google.api.method_signature) = "";
    option (bytebase.v1.permission) = "bb.vcsProviders.list";
  }

  rpc CreateVCSProvider(CreateVCSProviderRequest) returns (VCSProvider) {
    option (google.api.http) = {
      post: "/v1/vcsProviders"
      body: "vcs_provider"
    };
    option (google.api.method_signature) = "";
    option (bytebase.v1.permission) = "bb.vcsProviders.create";
  }

  rpc UpdateVCSProvider(UpdateVCSProviderRequest) returns (VCSProvider) {
    option (google.api.http) = {
      patch: "/v1/{vcs_provider.name=vcsProviders/*}"
      body: "vcs_provider"
    };
    option (google.api.method_signature) = "vcs_provider,update_mask";
    option (bytebase.v1.permission) = "bb.vcsProviders.update";
  }

  rpc DeleteVCSProvider(DeleteVCSProviderRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {delete: "/v1/{name=vcsProviders/*}"};
    option (bytebase.v1.permission) = "bb.vcsProviders.delete";
  }

  rpc SearchVCSProviderRepositories(SearchVCSProviderRepositoriesRequest) returns (SearchVCSProviderRepositoriesResponse) {
    option (google.api.http) = {
      post: "/v1/{name=vcsProviders/*}:searchRepositories"
      body: "*"
    };
    option (bytebase.v1.permission) = "bb.vcsProviders.searchProjects";
  }

  rpc ListVCSConnectorsInProvider(ListVCSConnectorsInProviderRequest) returns (ListVCSConnectorsInProviderResponse) {
    option (google.api.http) = {get: "/v1/{name=vcsProviders/*}/vcsConnectors"};
    option (bytebase.v1.permission) = "bb.vcsProviders.listProjects";
  }
}

message CreateVCSProviderRequest {
  VCSProvider vcs_provider = 1 [(google.api.field_behavior) = REQUIRED];

  // The ID to use for the VCS provider, which will become the final component of
  // the VCS provider's name.
  //
  // This value should be 4-63 characters, and valid characters
  // are /[a-z][0-9]-/.
  string vcs_provider_id = 2;
}

message GetVCSProviderRequest {
  // The name of the vcs provider to retrieve.
  // Format: vcsProviders/{vcsProvider}
  string name = 1 [(google.api.field_behavior) = REQUIRED];
}

message ListVCSProvidersRequest {
  // Not used. The maximum number of vcs provider to return. The service may return fewer than this value.
  // If unspecified, at most 100 vcs provider will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  int32 page_size = 1;

  // Not used. A page token, received from a previous `ListVCSProviders` call.
  // Provide this to retrieve the subsequent page.
  string page_token = 2;
}

message ListVCSProvidersResponse {
  // The list of vcs providers.
  repeated VCSProvider vcs_providers = 1;

  // Not used. A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

message UpdateVCSProviderRequest {
  VCSProvider vcs_provider = 1 [(google.api.field_behavior) = REQUIRED];

  // The list of fields to be updated.
  google.protobuf.FieldMask update_mask = 2 [(google.api.field_behavior) = REQUIRED];
}

message DeleteVCSProviderRequest {
  // The name of the vcs provider to delete.
  // Format: vcsProviders/{vcsProvider}
  string name = 1 [(google.api.field_behavior) = REQUIRED];
}

message SearchVCSProviderRepositoriesRequest {
  // The name of the vcs provider to retrieve the vcs provider repositories.
  // Format: vcsProviders/{vcsProvider}
  string name = 1 [(google.api.field_behavior) = REQUIRED];
}

message VCSRepository {
  // The id of the repository in vcs provider.
  // e.g. In GitLab, this is the corresponding project id. e.g. 123
  string id = 1;
  // The title of the repository in vcs provider.
  // e.g. sample-project
  string title = 2;
  // The full_path of the repository in vcs provider.
  // e.g. bytebase/sample-project
  string full_path = 3;
  // Web url of the repository in vcs provider.
  // e.g. http://gitlab.bytebase.com/bytebase/sample-project
  string web_url = 4;
}

message SearchVCSProviderRepositoriesResponse {
  // The list of repositories in vcs provider.
  repeated VCSRepository repositories = 1;
}

message ListVCSConnectorsInProviderRequest {
  // The name of the vcs provider to retrieve the linked projects.
  // Format: vcsProviders/{vcsProvider}
  string name = 1 [(google.api.field_behavior) = REQUIRED];
}

message ListVCSConnectorsInProviderResponse {
  // The vcsConnectors from the specified request.
  repeated VCSConnector vcs_connectors = 1;
}

message VCSProvider {
  // The name of the vcs provider.
  // Format: vcsProviders/{vcsProvider}
  string name = 1 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The title of the vcs provider. It is used to display in the UI. Specified by the client.
  string title = 2 [(google.api.field_behavior) = REQUIRED];

  VCSType type = 3 [(google.api.field_behavior) = REQUIRED];

  // The url of the vcs provider. Specified by the client.
  // For example: github.com, gitlab.com, gitlab.bytebase.com.
  string url = 4 [(google.api.field_behavior) = REQUIRED];

  // The access token of the vcs provider.
  string access_token = 5 [(google.api.field_behavior) = INPUT_ONLY];
}
