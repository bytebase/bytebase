syntax = "proto3";

package bytebase.v1;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/type/expr.proto";
import "v1/annotation.proto";
import "v1/common.proto";
import "v1/iam_policy.proto";

option go_package = "generated-go/v1";

service ProjectService {
  rpc GetProject(GetProjectRequest) returns (Project) {
    option (google.api.http) = {get: "/v1/{name=projects/*}"};
    option (google.api.method_signature) = "name";
    option (bytebase.v1.permission) = "bb.projects.get";
    option (bytebase.v1.auth_method) = CUSTOM;
  }

  rpc ListProjects(ListProjectsRequest) returns (ListProjectsResponse) {
    option (google.api.http) = {get: "/v1/projects"};
    option (google.api.method_signature) = "";
    option (bytebase.v1.permission) = "bb.projects.list";
  }

  rpc SearchProjects(SearchProjectsRequest) returns (SearchProjectsResponse) {
    option (google.api.http) = {get: "/v1/projects:search"};
    option (google.api.method_signature) = "";
    // TODO(d): secure it.
  }

  rpc CreateProject(CreateProjectRequest) returns (Project) {
    option (google.api.http) = {
      post: "/v1/projects"
      body: "project"
    };
    option (google.api.method_signature) = "";
    option (bytebase.v1.permission) = "bb.projects.create";
  }

  rpc UpdateProject(UpdateProjectRequest) returns (Project) {
    option (google.api.http) = {
      patch: "/v1/{project.name=projects/*}"
      body: "project"
    };
    option (google.api.method_signature) = "project,update_mask";
    option (bytebase.v1.permission) = "bb.projects.update";
  }

  rpc DeleteProject(DeleteProjectRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {delete: "/v1/{name=projects/*}"};
    option (google.api.method_signature) = "name";
    option (bytebase.v1.permission) = "bb.projects.delete";
  }

  rpc UndeleteProject(UndeleteProjectRequest) returns (Project) {
    option (google.api.http) = {
      post: "/v1/{name=projects/*}:undelete"
      body: "*"
    };
    option (bytebase.v1.permission) = "bb.projects.undelete";
  }

  rpc GetIamPolicy(GetIamPolicyRequest) returns (IamPolicy) {
    option (google.api.http) = {get: "/v1/{resource=projects/*}:getIamPolicy"};
    option (bytebase.v1.permission) = "bb.projects.getIamPolicy";
  }

  rpc BatchGetIamPolicy(BatchGetIamPolicyRequest) returns (BatchGetIamPolicyResponse) {
    option (google.api.http) = {get: "/v1/{scope=*/*}/iamPolicies:batchGet"};
    option (bytebase.v1.permission) = "bb.projects.getIamPolicy";
  }

  rpc SetIamPolicy(SetIamPolicyRequest) returns (IamPolicy) {
    option (google.api.http) = {
      post: "/v1/{resource=projects/*}:setIamPolicy"
      body: "*"
    };
    option (bytebase.v1.permission) = "bb.projects.setIamPolicy";
  }

  rpc GetDeploymentConfig(GetDeploymentConfigRequest) returns (DeploymentConfig) {
    option (google.api.http) = {get: "/v1/{name=projects/*/deploymentConfigs/*}"};
    option (bytebase.v1.permission) = "bb.projects.get";
  }

  rpc UpdateDeploymentConfig(UpdateDeploymentConfigRequest) returns (DeploymentConfig) {
    option (google.api.http) = {
      patch: "/v1/{config.name=projects/*/deploymentConfigs/*}"
      body: "config"
    };
    option (bytebase.v1.permission) = "bb.projects.update";
  }

  rpc AddWebhook(AddWebhookRequest) returns (Project) {
    option (google.api.http) = {
      post: "/v1/{project=projects/*}:addWebhook"
      body: "*"
    };
    option (bytebase.v1.permission) = "bb.projects.update";
  }

  rpc UpdateWebhook(UpdateWebhookRequest) returns (Project) {
    option (google.api.http) = {
      post: "/v1/{webhook.name=projects/*/webhooks/*}:updateWebhook"
      body: "*"
    };
    option (google.api.method_signature) = "webhook,update_mask";
    option (bytebase.v1.permission) = "bb.projects.update";
  }

  rpc RemoveWebhook(RemoveWebhookRequest) returns (Project) {
    option (google.api.http) = {
      post: "/v1/{webhook.name=projects/*/webhooks/*}:removeWebhook"
      body: "*"
    };
    option (bytebase.v1.permission) = "bb.projects.update";
  }

  rpc TestWebhook(TestWebhookRequest) returns (TestWebhookResponse) {
    option (google.api.http) = {
      post: "/v1/{project=projects/*}:testWebhook"
      body: "*"
    };
    option (bytebase.v1.permission) = "bb.projects.update";
  }

  rpc ListDatabaseGroups(ListDatabaseGroupsRequest) returns (ListDatabaseGroupsResponse) {
    option (google.api.http) = {get: "/v1/{parent=projects/*}/databaseGroups"};
    option (google.api.method_signature) = "parent";
    option (bytebase.v1.permission) = "bb.projects.get";
    // TODO(d): move around.
  }

  rpc GetDatabaseGroup(GetDatabaseGroupRequest) returns (DatabaseGroup) {
    option (google.api.http) = {get: "/v1/{name=projects/*/databaseGroups/*}"};
    option (google.api.method_signature) = "name";
    option (bytebase.v1.permission) = "bb.projects.get";
    // TODO(d): move around.
  }

  rpc CreateDatabaseGroup(CreateDatabaseGroupRequest) returns (DatabaseGroup) {
    option (google.api.http) = {
      post: "/v1/{parent=projects/*}/databaseGroups"
      body: "database_group"
    };
    option (google.api.method_signature) = "parent,databaseGroup";
    option (bytebase.v1.permission) = "bb.projects.update";
    // TODO(d): move around.
  }

  rpc UpdateDatabaseGroup(UpdateDatabaseGroupRequest) returns (DatabaseGroup) {
    option (google.api.http) = {
      patch: "/v1/{database_group.name=projects/*/databaseGroups/*}"
      body: "database_group"
    };
    option (google.api.method_signature) = "database_group,update_mask";
    option (bytebase.v1.permission) = "bb.projects.update";
    // TODO(d): move around.
  }

  rpc DeleteDatabaseGroup(DeleteDatabaseGroupRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {delete: "/v1/{name=projects/*/databaseGroups/*}"};
    option (google.api.method_signature) = "name";
    option (bytebase.v1.permission) = "bb.projects.update";
    // TODO(d): move around.
  }

  rpc GetProjectProtectionRules(GetProjectProtectionRulesRequest) returns (ProtectionRules) {
    option (google.api.http) = {get: "/v1/{name=projects/*/protectionRules}"};
    option (bytebase.v1.permission) = "bb.projects.get";
  }

  rpc UpdateProjectProtectionRules(UpdateProjectProtectionRulesRequest) returns (ProtectionRules) {
    option (google.api.http) = {
      patch: "/v1/{protection_rules.name=projects/*/protectionRules}"
      body: "*"
    };
    option (bytebase.v1.permission) = "bb.projects.update";
  }
}

message GetProjectRequest {
  // The name of the project to retrieve.
  // Format: projects/{project}
  string name = 1 [(google.api.field_behavior) = REQUIRED];
}

message ListProjectsRequest {
  // The maximum number of projects to return. The service may return fewer than
  // this value.
  // If unspecified, at most 50 projects will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  int32 page_size = 1;

  // A page token, received from a previous `ListProjects` call.
  // Provide this to retrieve the subsequent page.
  //
  // When paginating, all other parameters provided to `ListProjects` must match
  // the call that provided the page token.
  string page_token = 2;

  // Show deleted projects if specified.
  bool show_deleted = 3;
}

message ListProjectsResponse {
  // The projects from the specified request.
  repeated Project projects = 1;

  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

message SearchProjectsRequest {
  // Show deleted projects if specified.
  bool show_deleted = 1;
}

message SearchProjectsResponse {
  // The projects from the specified request.
  repeated Project projects = 1;
}

message CreateProjectRequest {
  // The project to create.
  Project project = 1 [(google.api.field_behavior) = REQUIRED];

  // The ID to use for the project, which will become the final component of
  // the project's resource name.
  //
  // This value should be 4-63 characters, and valid characters
  // are /[a-z][0-9]-/.
  string project_id = 2;
}

message UpdateProjectRequest {
  // The project to update.
  //
  // The project's `name` field is used to identify the project to update.
  // Format: projects/{project}
  Project project = 1 [(google.api.field_behavior) = REQUIRED];

  // The list of fields to update.
  google.protobuf.FieldMask update_mask = 2;
}

message DeleteProjectRequest {
  // The name of the project to delete.
  // Format: projects/{project}
  string name = 1 [(google.api.field_behavior) = REQUIRED];

  // If set to true, any databases and sheets from this project will also be moved to default project, and all open issues will be closed.
  bool force = 2;
}

message UndeleteProjectRequest {
  // The name of the deleted project.
  // Format: projects/{project}
  string name = 1 [(google.api.field_behavior) = REQUIRED];
}

message BatchGetIamPolicyRequest {
  // The scope of the batch get. Typically it's "projects/-".
  string scope = 1 [(google.api.field_behavior) = REQUIRED];

  repeated string names = 2;
}

message BatchGetIamPolicyResponse {
  message PolicyResult {
    string project = 1;

    IamPolicy policy = 2;
  }
  repeated PolicyResult policy_results = 1;
}

message GetDeploymentConfigRequest {
  // The name of the resource.
  // Format: projects/{project}/deploymentConfigs/default.
  string name = 1 [(google.api.field_behavior) = REQUIRED];
}

message UpdateDeploymentConfigRequest {
  DeploymentConfig config = 1 [(google.api.field_behavior) = REQUIRED];
}

message Label {
  string value = 1;
  string color = 2;
  string group = 3;
}

message Project {
  reserved 8;

  // The name of the project.
  // Format: projects/{project}
  string name = 1;

  // The system-assigned, unique identifier for a resource.
  string uid = 2 [(google.api.field_behavior) = OUTPUT_ONLY];

  State state = 3;

  // The title or name of a project. It's not unique within the workspace.
  string title = 4;

  // The key is a short and upper-case identifier for a project. It's unique within the workspace.
  string key = 5;

  Workflow workflow = 6;

  repeated Webhook webhooks = 11;

  string data_classification_config_id = 12;

  repeated Label issue_labels = 13;

  // Force issue labels to be used when creating an issue.
  bool force_issue_labels = 14;
  // Allow modifying statement after issue is created.
  bool allow_modify_statement = 15;
  // Enable auto resolve issue.
  bool auto_resolve_issue = 16;
}

enum Workflow {
  WORKFLOW_UNSPECIFIED = 0;
  UI = 1;
  VCS = 2;
}

message AddWebhookRequest {
  // The name of the project to add the webhook to.
  // Format: projects/{project}
  string project = 1 [(google.api.field_behavior) = REQUIRED];

  // The webhook to add.
  Webhook webhook = 2 [(google.api.field_behavior) = REQUIRED];
}

message UpdateWebhookRequest {
  // The webhook to modify.
  Webhook webhook = 1 [(google.api.field_behavior) = REQUIRED];

  // The list of fields to update.
  google.protobuf.FieldMask update_mask = 2;
}

message RemoveWebhookRequest {
  // The webhook to remove. Identified by its url.
  Webhook webhook = 1 [(google.api.field_behavior) = REQUIRED];
}

message TestWebhookRequest {
  // The name of the project which owns the webhook to test.
  // Format: projects/{project}
  string project = 1 [(google.api.field_behavior) = REQUIRED];

  // The webhook to test. Identified by its url.
  Webhook webhook = 2 [(google.api.field_behavior) = REQUIRED];
}

message TestWebhookResponse {
  // The result of the test, empty if the test is successful.
  string error = 1;
}

message Webhook {
  // name is the name of the webhook, generated by the server.
  // format: projects/{project}/webhooks/{webhook}
  string name = 1;

  enum Type {
    TYPE_UNSPECIFIED = 0;
    TYPE_SLACK = 1;
    TYPE_DISCORD = 2;
    TYPE_TEAMS = 3;
    TYPE_DINGTALK = 4;
    TYPE_FEISHU = 5;
    TYPE_WECOM = 6;
    TYPE_CUSTOM = 7;
  }
  // type is the type of the webhook.
  Type type = 2 [(google.api.field_behavior) = REQUIRED];

  // title is the title of the webhook.
  string title = 3 [(google.api.field_behavior) = REQUIRED];

  // url is the url of the webhook, should be unique within the project.
  string url = 4 [(google.api.field_behavior) = REQUIRED];

  // if direct_message is set, the notification is sent directly
  // to the persons and url will be ignored.
  // IM integration setting should be set for this function to work.
  bool direct_message = 6;

  // notification_types is the list of activities types that the webhook is interested in.
  // Bytebase will only send notifications to the webhook if the activity type is in the list.
  // It should not be empty, and should be a subset of the following:
  // - TYPE_ISSUE_CREATED
  // - TYPE_ISSUE_STATUS_UPDATE
  // - TYPE_ISSUE_PIPELINE_STAGE_UPDATE
  // - TYPE_ISSUE_PIPELINE_TASK_STATUS_UPDATE
  // - TYPE_ISSUE_FIELD_UPDATE
  // - TYPE_ISSUE_COMMENT_CREATE
  repeated Activity.Type notification_types = 5 [(google.api.field_behavior) = UNORDERED_LIST];
}

message DeploymentConfig {
  // The name of the resource.
  // Format: projects/{project}/deploymentConfigs/default.
  string name = 1;

  // The title of the deployment config.
  string title = 2;

  Schedule schedule = 3;
}

message Schedule {
  repeated ScheduleDeployment deployments = 1;
}

message ScheduleDeployment {
  // The title of the deployment (stage) in a schedule.
  string title = 1;
  DeploymentSpec spec = 2;
}

message DeploymentSpec {
  LabelSelector label_selector = 1;
}

message LabelSelector {
  repeated LabelSelectorRequirement match_expressions = 1;
}

message LabelSelectorRequirement {
  string key = 1;
  OperatorType operator = 2;
  repeated string values = 3;
}

enum OperatorType {
  // The operator is not specified.
  OPERATOR_TYPE_UNSPECIFIED = 0;
  // The operator is "In".
  OPERATOR_TYPE_IN = 1;
  // The operator is "Exists".
  OPERATOR_TYPE_EXISTS = 2;
  // The operator is "Not In".
  OPERATOR_TYPE_NOT_IN = 3;
}

// TODO(zp): move to activity later.
message Activity {
  enum Type {
    TYPE_UNSPECIFIED = 0;
    // Notifications via webhooks.
    //
    // TYPE_NOTIFY_ISSUE_APPROVED represents the issue approved notification.
    TYPE_NOTIFY_ISSUE_APPROVED = 23;
    // TYPE_NOTIFY_PIPELINE_ROLLOUT represents the pipeline rollout notification.
    TYPE_NOTIFY_PIPELINE_ROLLOUT = 24;
    // Issue related activity types.
    //
    // TYPE_ISSUE_CREATE represents creating an issue.
    TYPE_ISSUE_CREATE = 1;
    // TYPE_ISSUE_COMMENT_CREATE represents commenting on an issue.
    TYPE_ISSUE_COMMENT_CREATE = 2;
    // TYPE_ISSUE_FIELD_UPDATE represents updating the issue field, likes title, description, assignee, etc.
    TYPE_ISSUE_FIELD_UPDATE = 3;
    // TYPE_ISSUE_STATUS_UPDATE represents the issue status change, including OPEN, CLOSE, CANCEL fow now.
    TYPE_ISSUE_STATUS_UPDATE = 4;
    // TYPE_ISSUE_APPROVAL_NOTIFY is the type for notifying issue approval.
    TYPE_ISSUE_APPROVAL_NOTIFY = 21;
    // TYPE_ISSUE_PIPELINE_STAGE_STATUS_UPDATE represents the pipeline stage status change, including BEGIN, END for now.
    TYPE_ISSUE_PIPELINE_STAGE_STATUS_UPDATE = 5;
    // TYPE_ISSUE_PIPELINE_TASK_STATUS_UPDATE represents the pipeline task status change, including PENDING, PENDING_APPROVAL, RUNNING, SUCCESS, FAILURE, CANCELED for now.
    TYPE_ISSUE_PIPELINE_TASK_STATUS_UPDATE = 6;
    // TYPE_ISSUE_PIPELINE_TASK_RUN_STATUS_UPDATE represents the pipeline task run status change, including PENDING, RUNNING, DONE, FAILED, CANCELED.
    TYPE_ISSUE_PIPELINE_TASK_RUN_STATUS_UPDATE = 22;
    // TYPE_ISSUE_PIPELINE_TASK_STATEMENT_UPDATE represents the manual update of the task statement.
    TYPE_ISSUE_PIPELINE_TASK_STATEMENT_UPDATE = 8;
    // TYPE_ISSUE_PIPELINE_TASK_EARLIEST_ALLOWED_TIME_UPDATE represents the manual update of the task earliest allowed time.
    TYPE_ISSUE_PIPELINE_TASK_EARLIEST_ALLOWED_TIME_UPDATE = 9;

    // Member related activity types.
    //
    // TYPE_MEMBER_CREATE represents creating a members.
    TYPE_MEMBER_CREATE = 10;
    // TYPE_MEMBER_ROLE_UPDATE represents updating the member role, for example, from ADMIN to MEMBER.
    TYPE_MEMBER_ROLE_UPDATE = 11;
    // TYPE_MEMBER_ACTIVATE represents activating a deactivated member.
    TYPE_MEMBER_ACTIVATE = 12;
    // TYPE_MEMBER_DEACTIVATE represents deactivating an active member.
    TYPE_MEMBER_DEACTIVATE = 13;

    // Project related activity types.
    //
    // TYPE_PROJECT_REPOSITORY_PUSH represents Bytebase receiving a push event from the project repository.
    TYPE_PROJECT_REPOSITORY_PUSH = 14;
    // TYPE_PROJECT_DATABASE_TRANFER represents transfering the database from one project to another.
    TYPE_PROJECT_DATABASE_TRANSFER = 15;
    // TYPE_PROJECT_MEMBER_CREATE represents adding a member to the project.
    TYPE_PROJECT_MEMBER_CREATE = 16;
    // TYPE_PROJECT_MEMBER_DELETE represents removing a member from the project.
    TYPE_PROJECT_MEMBER_DELETE = 17;

    // SQL Editor related activity types.
    // TYPE_SQL_EDITOR_QUERY represents executing query in SQL Editor.
    TYPE_SQL_EDITOR_QUERY = 19;
  }
}

message ListDatabaseGroupsRequest {
  // The parent resource whose database groups are to be listed.
  // Format: projects/{project}
  string parent = 1 [(google.api.field_behavior) = REQUIRED];

  // Not used. The maximum number of anomalies to return. The service may return fewer than
  // this value.
  // If unspecified, at most 50 anomalies will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  int32 page_size = 2;

  // Not used. A page token, received from a previous `ListDatabaseGroups` call.
  // Provide this to retrieve the subsequent page.
  //
  // When paginating, all other parameters provided to `ListDatabaseGroups` must match
  // the call that provided the page token.
  string page_token = 3;
}

message ListDatabaseGroupsResponse {
  // database_groups is the list of database groups.
  repeated DatabaseGroup database_groups = 1;

  // Not used. A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

message GetDatabaseGroupRequest {
  // The name of the database group to retrieve.
  // Format: projects/{project}/databaseGroups/{databaseGroup}
  string name = 1 [(google.api.field_behavior) = REQUIRED];

  // The view to return. Defaults to DATABASE_GROUP_VIEW_BASIC.
  DatabaseGroupView view = 2;
}

message CreateDatabaseGroupRequest {
  // The parent resource where this database group will be created.
  // Format: projects/{project}
  string parent = 1 [(google.api.field_behavior) = REQUIRED];

  // The database group to create.
  DatabaseGroup database_group = 2 [(google.api.field_behavior) = REQUIRED];

  // The ID to use for the database group, which will become the final component of
  // the database group's resource name.
  //
  // This value should be 4-63 characters, and valid characters
  // are /[a-z][0-9]-/.
  string database_group_id = 3;

  // If set, validate the create request and preview the full database group response, but do not actually create it.
  bool validate_only = 4;
}

message UpdateDatabaseGroupRequest {
  // The database group to update.
  //
  // The database group's `name` field is used to identify the database group to update.
  // Format: projects/{project}/databaseGroups/{databaseGroup}
  DatabaseGroup database_group = 1 [(google.api.field_behavior) = REQUIRED];

  // The list of fields to update.
  google.protobuf.FieldMask update_mask = 2;
}

message DeleteDatabaseGroupRequest {
  // The name of the database group to delete.
  // Format: projects/{project}/databaseGroups/{databaseGroup}
  string name = 1 [(google.api.field_behavior) = REQUIRED];
}

enum DatabaseGroupView {
  // The default / unset value.
  // The API will default to the BASIC view.
  DATABASE_GROUP_VIEW_UNSPECIFIED = 0;

  // Include basic information about the database group, but exclude the list of matched databases and unmatched databases.
  DATABASE_GROUP_VIEW_BASIC = 1;

  // Include everything.
  DATABASE_GROUP_VIEW_FULL = 2;
}

message DatabaseGroup {
  // The name of the database group.
  // Format: projects/{project}/databaseGroups/{databaseGroup}
  string name = 1;

  // The short name used in actual databases specified by users.
  // For example, the placeholder for db1_2010, db1_2021, db1_2023 will be "db1".
  string database_placeholder = 2;

  // The condition that is associated with this database group.
  google.type.Expr database_expr = 3;

  message Database {
    // The resource name of the database.
    // Format: instances/{instance}/databases/{database}
    string name = 1;
  }
  // The list of databases that match the database group condition.
  repeated Database matched_databases = 4 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The list of databases that match the database group condition.
  repeated Database unmatched_databases = 5 [(google.api.field_behavior) = OUTPUT_ONLY];

  bool multitenancy = 6;
}

message GetProjectProtectionRulesRequest {
  // The name of the protection rules.
  // Format: projects/{project}/protectionRules
  string name = 1 [(google.api.field_behavior) = REQUIRED];
}

message UpdateProjectProtectionRulesRequest {
  ProtectionRules protection_rules = 2 [(google.api.field_behavior) = REQUIRED];
}

message ProtectionRules {
  // The name of the protection rules.
  // Format: projects/{project}/protectionRules
  string name = 1;

  repeated ProtectionRule rules = 2;
}

message ProtectionRule {
  // A unique identifier for a node in UUID format.
  string id = 1;

  // The type of target.
  enum Target {
    PROTECTION_TARGET_UNSPECIFIED = 0;
    BRANCH = 1;
    CHANGELIST = 2;
  }

  Target target = 2;

  // The name of the branch/changelist or wildcard.
  string name_filter = 3;

  // The roles allowed to create branches or changelists, rebase branches, delete branches.
  // Format: roles/projectOwner.
  repeated string allowed_roles = 4;

  enum BranchSource {
    BRANCH_SOURCE_UNSPECIFIED = 0;
    DATABASE = 1;
  }
  BranchSource branch_source = 5;
}
