syntax = "proto3";

package bytebase.v1;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/type/expr.proto";
import "v1/annotation.proto";
import "v1/common.proto";

option go_package = "github.com/bytebase/bytebase/backend/generated-go/v1";

// OrgPolicyService manages organizational policies at various resource levels.
service OrgPolicyService {
  // Retrieves a policy by name.
  // Permissions required: bb.policies.get
  rpc GetPolicy(GetPolicyRequest) returns (Policy) {
    option (google.api.http) = {
      get: "/v1/{name=policies/*}"

      additional_bindings: {get: "/v1/{name=projects/*/policies/*}"}
      additional_bindings: {get: "/v1/{name=environments/*/policies/*}"}
      additional_bindings: {get: "/v1/{name=instances/*/policies/*}"}
      additional_bindings: {get: "/v1/{name=instances/*/databases/*/policies/*}"}
    };
    option (google.api.method_signature) = "name";
    option (bytebase.v1.permission) = "bb.policies.get";
    option (bytebase.v1.auth_method) = IAM;
  }

  // Lists policies at a specified resource level.
  // Permissions required: bb.policies.list
  rpc ListPolicies(ListPoliciesRequest) returns (ListPoliciesResponse) {
    option (google.api.http) = {
      get: "/v1/policies"

      additional_bindings: {get: "/v1/{parent=projects/*}/policies"}
      additional_bindings: {get: "/v1/{parent=environments/*}/policies"}
      additional_bindings: {get: "/v1/{parent=instances/*}/policies"}
      additional_bindings: {get: "/v1/{parent=instances/*/databases/*}/policies"}
    };
    option (google.api.method_signature) = "";
    option (bytebase.v1.permission) = "bb.policies.list";
    option (bytebase.v1.auth_method) = IAM;
  }

  // Creates a new organizational policy.
  // Permissions required: bb.policies.create
  rpc CreatePolicy(CreatePolicyRequest) returns (Policy) {
    option (google.api.http) = {
      post: "/v1/policies"
      body: "policy"

      additional_bindings: {
        post: "/v1/{parent=projects/*}/policies"
        body: "policy"
      }
      additional_bindings: {
        post: "/v1/{parent=environments/*}/policies"
        body: "policy"
      }
      additional_bindings: {
        post: "/v1/{parent=instances/*}/policies"
        body: "policy"
      }
      additional_bindings: {
        post: "/v1/{parent=instances/*/databases/*}/policies"
        body: "policy"
      }
    };
    option (google.api.method_signature) = "parent,policy";
    option (bytebase.v1.permission) = "bb.policies.create";
    option (bytebase.v1.auth_method) = IAM;
    option (bytebase.v1.audit) = true;
  }

  // Updates an existing organizational policy.
  // Permissions required: bb.policies.update
  rpc UpdatePolicy(UpdatePolicyRequest) returns (Policy) {
    option (google.api.http) = {
      patch: "/v1/{policy.name=policies/*}"
      body: "policy"

      additional_bindings: {
        patch: "/v1/{policy.name=projects/*/policies/*}"
        body: "policy"
      }
      additional_bindings: {
        patch: "/v1/{policy.name=environments/*/policies/*}"
        body: "policy"
      }
      additional_bindings: {
        patch: "/v1/{policy.name=instances/*/policies/*}"
        body: "policy"
      }
      additional_bindings: {
        patch: "/v1/{policy.name=instances/*/databases/*/policies/*}"
        body: "policy"
      }
    };
    option (google.api.method_signature) = "policy,update_mask";
    option (bytebase.v1.permission) = "bb.policies.update";
    option (bytebase.v1.auth_method) = IAM;
    option (bytebase.v1.audit) = true;
  }

  // Deletes an organizational policy.
  // Permissions required: bb.policies.delete
  rpc DeletePolicy(DeletePolicyRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/{name=policies/*}"

      additional_bindings: {delete: "/v1/{name=projects/*/policies/*}"}
      additional_bindings: {delete: "/v1/{name=environments/*/policies/*}"}
      additional_bindings: {delete: "/v1/{name=instances/*/policies/*}"}
      additional_bindings: {delete: "/v1/{name=instances/*/databases/*/policies/*}"}
    };
    option (google.api.method_signature) = "name";
    option (bytebase.v1.permission) = "bb.policies.delete";
    option (bytebase.v1.auth_method) = IAM;
    option (bytebase.v1.audit) = true;
  }
}

message CreatePolicyRequest {
  // The parent resource where this instance will be created.
  // Workspace resource name: "".
  // Environment resource name: environments/environment-id.
  // Instance resource name: instances/instance-id.
  // Database resource name: instances/instance-id/databases/database-name.
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {child_type: "bytebase.com/Policy"}
  ];

  // The policy to create.
  Policy policy = 2 [(google.api.field_behavior) = REQUIRED];

  // The type of policy to create.
  PolicyType type = 3;
}

message UpdatePolicyRequest {
  // The policy to update.
  //
  // The policy's `name` field is used to identify the instance to update.
  // Format: {resource name}/policies/{policy type}
  // Workspace resource name: "".
  // Environment resource name: environments/environment-id.
  // Instance resource name: instances/instance-id.
  // Database resource name: instances/instance-id/databases/database-name.
  Policy policy = 1 [(google.api.field_behavior) = REQUIRED];

  // The list of fields to update.
  google.protobuf.FieldMask update_mask = 2;

  // If set to true, and the policy is not found, a new policy will be created.
  // In this situation, `update_mask` is ignored.
  bool allow_missing = 3;
}

message DeletePolicyRequest {
  // The policy's `name` field is used to identify the instance to update.
  // Format: {resource name}/policies/{policy type}
  // Workspace resource name: "".
  // Environment resource name: environments/environment-id.
  // Instance resource name: instances/instance-id.
  // Database resource name: instances/instance-id/databases/database-name.
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "bytebase.com/Policy"}
  ];
}

message GetPolicyRequest {
  // The name of the policy to retrieve.
  // Format: {resource type}/{resource id}/policies/{policy type}
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "bytebase.com/Policy"}
  ];
}

message ListPoliciesRequest {
  // The parent, which owns this collection of policies.
  // Format: {resource type}/{resource id}
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {child_type: "bytebase.com/Policy"}
  ];

  // Filter by specific policy type.
  optional PolicyType policy_type = 2;

  // Pagination is not currently implemented. This field is reserved for future use.
  // The maximum number of policies to return. The service may return fewer than
  // this value.
  // If unspecified, at most 10 policies will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  int32 page_size = 3;

  // Pagination is not currently implemented. This field is reserved for future use.
  // A page token, received from a previous `ListPolicies` call.
  // Provide this to retrieve the subsequent page.
  //
  // When paginating, all other parameters provided to `ListPolicies` must match
  // the call that provided the page token.
  string page_token = 4;

  // Show deleted policies if specified.
  bool show_deleted = 5;
}

message ListPoliciesResponse {
  // The policies from the specified request.
  repeated Policy policies = 1;

  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

message Policy {
  reserved 2, 23;

  option (google.api.resource) = {
    type: "bytebase.com/Policy"
    pattern: "policies/{policy}"
    pattern: "projects/{project}/policies/{policy}"
    pattern: "environments/{environment}/policies/{policy}"
    pattern: "instances/{instance}/policies/{policy}"
    pattern: "instances/{instance}/databases/{database}/policies/{policy}"
  };

  // The name of the policy.
  // Format: {resource name}/policies/{policy type}
  // Workspace resource name: "".
  // Environment resource name: environments/environment-id.
  // Instance resource name: instances/instance-id.
  // Database resource name: instances/instance-id/databases/database-name.
  string name = 1;

  // Whether this policy inherits from its parent resource.
  bool inherit_from_parent = 4;

  // The type of policy.
  PolicyType type = 5;

  // The policy configuration.
  oneof policy {
    RolloutPolicy rollout_policy = 19;
    MaskingRulePolicy masking_rule_policy = 17;
    MaskingExceptionPolicy masking_exception_policy = 18;
    TagPolicy tag_policy = 21;
    DataSourceQueryPolicy data_source_query_policy = 22;
    QueryDataPolicy query_data_policy = 24;
  }

  // Whether the policy is enforced.
  bool enforce = 13;

  // The resource type for the policy.
  PolicyResourceType resource_type = 14 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// The type of organizational policy.
enum PolicyType {
  reserved 2, 4, 6, 5, 7, 12, 15;

  // Unspecified policy type.
  POLICY_TYPE_UNSPECIFIED = 0;
  // Rollout deployment policy.
  ROLLOUT_POLICY = 11;
  // Data masking rule policy.
  MASKING_RULE = 9;
  // Data masking exception policy.
  MASKING_EXCEPTION = 10;
  // Resource tag policy.
  TAG = 13;
  // Data source query restrictions policy.
  DATA_SOURCE_QUERY = 14;
  // Query data access policy.
  DATA_QUERY = 16;
}

// The resource type that a policy can be attached to.
enum PolicyResourceType {
  // Unspecified resource type.
  RESOURCE_TYPE_UNSPECIFIED = 0;
  // Workspace-level policy.
  WORKSPACE = 1;
  // Environment-level policy.
  ENVIRONMENT = 2;
  // Project-level policy.
  PROJECT = 3;
}

// Rollout policy configuration.
message RolloutPolicy {
  // Whether rollout is automatic without manual approval.
  bool automatic = 1;
  // The roles that can approve rollout execution.
  repeated string roles = 2;
  // Checkers that must pass before rollout execution.
  // These checks are performed in UI workflows only.
  Checkers checkers = 4;

  message Checkers {
    // Whether issue approval is required before proceeding with rollout.
    bool required_issue_approval = 1;

    // Status checks that must pass before rollout can be executed.
    RequiredStatusChecks required_status_checks = 2;

    message RequiredStatusChecks {
      // Enforcement level for plan check results during rollout validation.
      PlanCheckEnforcement plan_check_enforcement = 1;
    }

    enum PlanCheckEnforcement {
      // Allow rollout regardless of plan check results (no enforcement).
      PLAN_CHECK_ENFORCEMENT_UNSPECIFIED = 0;

      // Block rollout only when plan check finds errors.
      ERROR_ONLY = 1;

      // Block rollout when plan check finds errors or warnings.
      STRICT = 2;
    }
  }
}

// QueryDataPolicy is the policy configuration for querying data.
message QueryDataPolicy {
  // The query timeout duration.
  google.protobuf.Duration timeout = 1;

  // Disable data export in the SQL editor.
  bool disable_export = 2;

  // The maximum result size limit in bytes.
  // The default value is 100MB, we will use the default value if the setting not exists, or the limit <= 0.
  int64 maximum_result_size = 3;

  // The maximum number of rows to return.
  // The default value is -1, means no limit.
  int32 maximum_result_rows = 4;

  // Disable copying query results.
  bool disable_copy_data = 5;
}

// SQL review rule configuration. Check the SQL_REVIEW_RULES_DOCUMENTATION.md for details.
message SQLReviewRule {
  // The type of SQL review rule.
  string type = 1;
  // The severity level of the rule.
  SQLReviewRuleLevel level = 2;

  // The payload is a JSON string that varies by rule type.
  string payload = 3;
  // The database engine this rule applies to.
  Engine engine = 4;
  // Additional comment for the rule.
  string comment = 5;
}

// The severity level for SQL review rules.
enum SQLReviewRuleLevel {
  // Unspecified level.
  LEVEL_UNSPECIFIED = 0;
  // Rule violation is an error.
  ERROR = 1;
  // Rule violation is a warning.
  WARNING = 2;
}

// MaskingExceptionPolicy is the allowlist of users who can access sensitive data.
message MaskingExceptionPolicy {
  // An exception allowing specific users to access masked data.
  message MaskingException {
    // The action that the exception permits.
    enum Action {
      // Unspecified action.
      ACTION_UNSPECIFIED = 0;
      // Allow querying sensitive data.
      QUERY = 1;
      // Allow exporting sensitive data.
      EXPORT = 2;
    }
    // The action that the user can perform on sensitive data.
    Action action = 1;

    // Member is the principal who bind to this exception policy instance.
    //
    // - `user:{email}`: An email address that represents a specific Bytebase account. For example, `alice@example.com`.
    // - `group:{email}`: An email address for group.
    string member = 3;

    // The condition that is associated with this exception policy instance.
    // The syntax and semantics of CEL are documented at https://github.com/google/cel-spec
    // If the condition is empty, means the user can access all databases without expiration.
    //
    // Support variables:
    // resource.instance_id: the instance resource id. Only support "==" operation.
    // resource.database_name: the database name. Only support "==" operation.
    // resource.schema_name: the schema name. Only support "==" operation.
    // resource.table_name: the table name. Only support "==" operation.
    // resource.column_name: the column name. Only support "==" operation.
    // request.time: the expiration. Only support "<" operation in `request.time < timestamp("{ISO datetime string format}")`
    // All variables should join with "&&" condition.
    //
    // For example:
    // resource.instance_id == "local" && resource.database_name == "employee" && request.time < timestamp("2025-04-30T11:10:39.000Z")
    // resource.instance_id == "local" && resource.database_name == "employee"
    google.type.Expr condition = 4;
  }

  // The list of masking exceptions.
  repeated MaskingException masking_exceptions = 1;
}

// Policy for configuring data masking rules.
message MaskingRulePolicy {
  // A rule that defines when and how to mask data.
  message MaskingRule {
    // A unique identifier for the rule in UUID format.
    string id = 1;

    // The condition for the masking rule.
    // The syntax and semantics of CEL are documented at https://github.com/google/cel-spec
    //
    // Support variables:
    // resource.environment_id: the environment resource id.
    // resource.project_id: the project resource id.
    // resource.instance_id: the instance resource id.
    // resource.database_name: the database name.
    // resource.table_name: the table name.
    // resource.column_name: the column name.
    // resource.classification_level: the classification level.
    //
    // Each variable support following operations:
    // ==: the value equals the target.
    // !=: the value not equals the target.
    // in: the value matches one of the targets.
    // !(in): the value not matches any of the targets.
    //
    // For example:
    // resource.environment_id == "test" && resource.project_id == "sample-project"
    // resource.instance_id == "sample-instance" && resource.database_name == "employee" && resource.table_name in ["table1", "table2"]
    // resource.environment_id != "test" || !(resource.project_id in ["poject1", "prject2"])
    // resource.instance_id == "sample-instance" && (resource.database_name == "db1" || resource.database_name == "db2")
    google.type.Expr condition = 2;

    // The semantic type of data to mask (e.g., "SSN", "EMAIL").
    string semantic_type = 3;
  }
  // The list of masking rules.
  repeated MaskingRule rules = 1;
}

// Policy for tagging resources with metadata.
message TagPolicy {
  // tags is the key - value map for resources.
  // for example, the environment resource can have the sql review config tag, like "bb.tag.review_config": "reviewConfigs/{review config resource id}"
  map<string, string> tags = 1;
}

// Policy for controlling which data sources can be queried in the SQL editor.
message DataSourceQueryPolicy {
  // Restriction level for admin data source access.
  enum Restriction {
    // Unspecified restriction.
    RESTRICTION_UNSPECIFIED = 0;
    // Allow querying admin data sources when there is no read-only data source.
    FALLBACK = 1;
    // Disallow querying admin data sources.
    DISALLOW = 2;
  }
  // Restriction for admin data source queries.
  Restriction admin_data_source_restriction = 1;

  // Disallow running DDL statements in the SQL editor.
  bool disallow_ddl = 2;
  // Disallow running DML statements in the SQL editor.
  bool disallow_dml = 3;
}
