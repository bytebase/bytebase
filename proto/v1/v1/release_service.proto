syntax = "proto3";

package bytebase.v1;

import "buf/validate/validate.proto";
import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "v1/annotation.proto";
import "v1/common.proto";
import "v1/sql_service.proto";

option go_package = "github.com/bytebase/bytebase/backend/generated-go/v1";

// ReleaseService manages releases for coordinating deployments.
service ReleaseService {
  // Retrieves a release by name.
  // Permissions required: bb.releases.get
  rpc GetRelease(GetReleaseRequest) returns (Release) {
    option (google.api.http) = {get: "/v1/{name=projects/*/releases/*}"};
    option (google.api.method_signature) = "name";
    option (bytebase.v1.permission) = "bb.releases.get";
    option (bytebase.v1.auth_method) = IAM;
  }

  // Lists releases in a project.
  // Permissions required: bb.releases.list
  rpc ListReleases(ListReleasesRequest) returns (ListReleasesResponse) {
    option (google.api.http) = {get: "/v1/{parent=projects/*}/releases"};
    option (google.api.method_signature) = "parent";
    option (bytebase.v1.permission) = "bb.releases.list";
    option (bytebase.v1.auth_method) = IAM;
  }

  // Searches releases by digest or other criteria.
  // Permissions required: bb.releases.get
  rpc SearchReleases(SearchReleasesRequest) returns (SearchReleasesResponse) {
    option (google.api.http) = {get: "/v1/{parent=projects/*}/releases:search"};
    option (google.api.method_signature) = "parent";
    option (bytebase.v1.permission) = "bb.releases.get";
    option (bytebase.v1.auth_method) = IAM;
  }

  // Creates a new release with SQL files.
  // Permissions required: bb.releases.create
  rpc CreateRelease(CreateReleaseRequest) returns (Release) {
    option (google.api.http) = {
      post: "/v1/{parent=projects/*}/releases"
      body: "release"
    };
    option (google.api.method_signature) = "parent,release";
    option (bytebase.v1.permission) = "bb.releases.create";
    option (bytebase.v1.auth_method) = IAM;
  }

  // Updates an existing release.
  // Permissions required: bb.releases.update
  // When allow_missing=true, also requires: bb.releases.create
  rpc UpdateRelease(UpdateReleaseRequest) returns (Release) {
    option (google.api.http) = {
      patch: "/v1/{release.name=projects/*/releases/*}"
      body: "release"
    };
    option (google.api.method_signature) = "release,update_mask";
    option (bytebase.v1.permission) = "bb.releases.update";
    option (bytebase.v1.allow_missing_requires) = "bb.releases.create";
    option (bytebase.v1.auth_method) = IAM;
  }

  // Deletes a release.
  // Permissions required: bb.releases.delete
  rpc DeleteRelease(DeleteReleaseRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {delete: "/v1/{name=projects/*/releases/*}"};
    option (google.api.method_signature) = "name";
    option (bytebase.v1.permission) = "bb.releases.delete";
    option (bytebase.v1.auth_method) = IAM;
  }

  // Restores a deleted release.
  // Permissions required: bb.releases.undelete
  rpc UndeleteRelease(UndeleteReleaseRequest) returns (Release) {
    option (google.api.http) = {post: "/v1/{name=projects/*/releases/*}:undelete"};
    option (bytebase.v1.permission) = "bb.releases.undelete";
    option (bytebase.v1.auth_method) = IAM;
  }

  // Validates a release by dry-running checks on target databases.
  // Permissions required: bb.releases.check
  rpc CheckRelease(CheckReleaseRequest) returns (CheckReleaseResponse) {
    option (google.api.http) = {
      post: "/v1/{parent=projects/*}/releases:check"
      body: "*"
    };
    option (bytebase.v1.permission) = "bb.releases.check";
    option (bytebase.v1.auth_method) = IAM;
  }
}

message GetReleaseRequest {
  // Format: projects/{project}/releases/{release}
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "bytebase.com/Release"}
  ];
}

message ListReleasesRequest {
  // Format: projects/{project}
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "bytebase.com/Project"}
  ];

  // The maximum number of releases to return. The service may return fewer than this value.
  // If unspecified, at most 10 releases will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  int32 page_size = 2;

  // A page token, received from a previous `ListReleases` call.
  // Provide this to retrieve the subsequent page.
  //
  // When paginating, all other parameters provided to `ListReleases` must match
  // the call that provided the page token.
  string page_token = 3;

  // Show deleted releases if specified.
  bool show_deleted = 4;
}

message ListReleasesResponse {
  // The releases from the specified request.
  repeated Release releases = 1;

  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

message SearchReleasesRequest {
  // Format: projects/{project}
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "bytebase.com/Project"}
  ];

  // The maximum number of releases to return. The service may return fewer than this value.
  // If unspecified, at most 10 releases will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  int32 page_size = 2;

  // A page token, received from a previous `ListReleases` call.
  // Provide this to retrieve the subsequent page.
  //
  // When paginating, all other parameters provided to `ListReleases` must match
  // the call that provided the page token.
  string page_token = 3;

  // Search by the digest of the release.
  optional string digest = 4;
}

message SearchReleasesResponse {
  // The releases matching the search criteria.
  repeated Release releases = 1;

  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

message CreateReleaseRequest {
  // Format: projects/{project}
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "bytebase.com/Project"}
  ];

  // The release to create.
  Release release = 2 [(google.api.field_behavior) = REQUIRED];
}

message UpdateReleaseRequest {
  // The release to update.
  Release release = 1 [(google.api.field_behavior) = REQUIRED];

  // The list of fields to be updated.
  google.protobuf.FieldMask update_mask = 2;

  // If set to true, and the release is not found, a new release will be created.
  // In this situation, `update_mask` is ignored.
  bool allow_missing = 3;
}

message DeleteReleaseRequest {
  // The name of the release to delete.
  // Format: projects/{project}/releases/{release}
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "bytebase.com/Release"}
  ];
}

message UndeleteReleaseRequest {
  // The name of the deleted release.
  // Format: projects/{project}/releases/{release}
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "bytebase.com/Release"}
  ];
}

message CheckReleaseRequest {
  // Format: projects/{project}
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "bytebase.com/Project"}
  ];

  // The release to check.
  Release release = 2 [(google.api.field_behavior) = REQUIRED];

  // The targets to dry-run the release.
  // Can be database or databaseGroup.
  // Format:
  // projects/{project}/databaseGroups/{databaseGroup}
  // instances/{instance}/databases/{database}
  repeated string targets = 3;
}

message CheckReleaseResponse {
  // Check result for a single release file on a target database.
  message CheckResult {
    // The file path that is being checked.
    string file = 1;

    // The target that the check is performed on.
    // Should be a database. Format: instances/{instance}/databases/{database}
    string target = 2;

    // The list of advice for the file and the target.
    repeated Advice advices = 3;

    // The count of affected rows of the statement on the target.
    int64 affected_rows = 4;

    // The risk level of the statement on the target.
    RiskLevel risk_level = 5;
  }

  // The check results for each file and target combination.
  repeated CheckResult results = 1;

  // The total affected rows across all checks.
  int64 affected_rows = 2;

  // The aggregated risk level of the check.
  RiskLevel risk_level = 3;
}

message Release {
  option (google.api.resource) = {
    type: "bytebase.com/Release"
    pattern: "projects/{project}/releases/{release}"
  };

  // Format: projects/{project}/releases/{release}
  string name = 1 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The title of the release.
  string title = 2 [(buf.validate.field).string.max_len = 200];

  // The SQL files included in the release.
  repeated File files = 3;

  // The version control source of the release.
  VCSSource vcs_source = 4;

  // Format: users/hello@world.com
  string creator = 5 [(google.api.field_behavior) = OUTPUT_ONLY];

  google.protobuf.Timestamp create_time = 6 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The lifecycle state of the release.
  State state = 7 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The digest of the release.
  // The user can provide the digest of the release. It can be used later to retrieve the release in GetRelease.
  // Whether to provide digest and how to generate it is up to the user.
  // If the digest is not empty, it must be unique in the project. Otherwise, an ALREADY_EXISTS error will be returned.
  string digest = 8;

  // A SQL file in a release.
  message File {
    // The unique identifier for the file.
    string id = 1;
    // The path of the file. e.g., `2.2/V0001_create_table.sql`.
    string path = 2;
    // The type of the file.
    Type type = 5;
    // The version identifier for the file.
    string version = 6;
    // The migration type of the file.
    // For versioned files, it is the migration type of the file.
    // For declarative files, this field is always DDL, thus meaningless.
    MigrationType migration_type = 9;

    // For inputs, we must either use `sheet` or `statement`.
    // For outputs, we always use `sheet`. `statement` is the preview of the sheet content.
    //
    // The sheet that holds the content.
    // Format: projects/{project}/sheets/{sheet}
    string sheet = 3 [(google.api.resource_reference) = {type: "bytebase.com/Sheet"}];
    // The raw SQL statement content.
    bytes statement = 7;
    // The SHA256 hash value of the sheet content or the statement.
    string sheet_sha256 = 4 [(google.api.field_behavior) = OUTPUT_ONLY];
    // The size of the statement in bytes.
    int64 statement_size = 8 [(google.api.field_behavior) = OUTPUT_ONLY];

    // The type of migration file.
    enum Type {
      // Unspecified type.
      TYPE_UNSPECIFIED = 0;
      // Versioned migration file with sequential version numbers.
      VERSIONED = 1;
      // Declarative schema definition file describing desired state.
      DECLARATIVE = 2;
    }

    // The migration type for versioned files.
    enum MigrationType {
      // Unspecified migration type.
      MIGRATION_TYPE_UNSPECIFIED = 0;
      // DDL (Data Definition Language) migration.
      DDL = 1;
      // DDL migration using gh-ost for online schema changes.
      DDL_GHOST = 2;
      // DML (Data Manipulation Language) migration.
      DML = 3;
    }
  }

  // Version control system source information.
  message VCSSource {
    // The type of VCS.
    VCSType vcs_type = 1;
    // The url link to the e.g., GitHub commit or pull request.
    string url = 2;
  }
}
