syntax = "proto3";

package bytebase.v1;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "v1/annotation.proto";
import "v1/user_service.proto";

option go_package = "github.com/bytebase/bytebase/backend/generated-go/v1";

// AuthService handles user authentication operations.
service AuthService {
  // Authenticates a user and returns access tokens.
  // Permissions required: None
  rpc Login(LoginRequest) returns (LoginResponse) {
    option (google.api.http) = {
      post: "/v1/auth/login"
      body: "*"
    };
    option (bytebase.v1.allow_without_credential) = true;
    option (bytebase.v1.audit) = true;
  }

  // Logs out the current user session.
  // Permissions required: None
  rpc Logout(LogoutRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/auth/logout"
      body: "*"
    };
    option (bytebase.v1.allow_without_credential) = true;
    option (bytebase.v1.audit) = true;
  }
}

message LoginRequest {
  // User's email address.
  string email = 1;

  // User's password for authentication.
  string password = 2;

  // If web is set, we will set access token, refresh token, and user to the cookie.
  bool web = 3;

  // The name of the identity provider.
  // Format: idps/{idp}
  string idp_name = 4;

  // The idp_context is using to get the user information from identity provider.
  IdentityProviderContext idp_context = 5;

  // The otp_code is used to verify the user's identity by MFA.
  optional string otp_code = 6;

  // The recovery_code is used to recovery the user's identity with MFA.
  optional string recovery_code = 7;

  // The mfa_temp_token is used to verify the user's identity by MFA.
  optional string mfa_temp_token = 8;
}

// Context for identity provider authentication.
message IdentityProviderContext {
  oneof context {
    // OAuth2 authentication context.
    OAuth2IdentityProviderContext oauth2_context = 1;
    // OpenID Connect authentication context.
    OIDCIdentityProviderContext oidc_context = 2;
  }
}

// OAuth2 authentication context.
message OAuth2IdentityProviderContext {
  // Authorization code from OAuth2 provider.
  string code = 1;
}

// OpenID Connect authentication context.
message OIDCIdentityProviderContext {}

message LoginResponse {
  // Access token for authenticated requests.
  string token = 1;

  // Temporary token for MFA verification.
  optional string mfa_temp_token = 2;

  // Whether user must reset password before continuing.
  bool require_reset_password = 3;

  // The user of successful login.
  User user = 4;
}

// Request to logout current user session.
message LogoutRequest {}
