syntax = "proto3";

package bytebase.v1;

import "buf/validate/validate.proto";
import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "v1/annotation.proto";

option go_package = "github.com/bytebase/bytebase/backend/generated-go/v1";

// ChangelistService manages changelists for grouping and organizing database changes.
service ChangelistService {
  // Creates a new changelist in a project.
  // Permissions required: bb.changelists.create
  rpc CreateChangelist(CreateChangelistRequest) returns (Changelist) {
    option (google.api.http) = {
      post: "/v1/{parent=projects/*}/changelists"
      body: "changelist"
    };
    option (google.api.method_signature) = "parent,changelist";
    option (bytebase.v1.permission) = "bb.changelists.create";
    option (bytebase.v1.auth_method) = IAM;
  }

  // Gets a changelist by name.
  // Permissions required: bb.changelists.get
  rpc GetChangelist(GetChangelistRequest) returns (Changelist) {
    option (google.api.http) = {get: "/v1/{name=projects/*/changelists/*}"};
    option (google.api.method_signature) = "name";
    option (bytebase.v1.permission) = "bb.changelists.get";
    option (bytebase.v1.auth_method) = IAM;
  }

  // Lists changelists in a project.
  // Permissions required: bb.changelists.list
  rpc ListChangelists(ListChangelistsRequest) returns (ListChangelistsResponse) {
    option (google.api.http) = {get: "/v1/{parent=projects/*}/changelists"};
    option (google.api.method_signature) = "parent";
    option (bytebase.v1.permission) = "bb.changelists.list";
    option (bytebase.v1.auth_method) = IAM;
  }

  // Updates a changelist.
  // Permissions required: bb.changelists.update
  // When allow_missing=true, also requires: bb.changelists.create
  rpc UpdateChangelist(UpdateChangelistRequest) returns (Changelist) {
    option (google.api.http) = {
      patch: "/v1/{changelist.name=projects/*/changelists/*}"
      body: "changelist"
    };
    option (google.api.method_signature) = "changelist,update_mask";
    option (bytebase.v1.permission) = "bb.changelists.update";
    option (bytebase.v1.allow_missing_requires) = "bb.changelists.create";
    option (bytebase.v1.auth_method) = IAM;
  }

  // Deletes a changelist.
  // Permissions required: bb.changelists.delete
  rpc DeleteChangelist(DeleteChangelistRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {delete: "/v1/{name=projects/*/changelists/*}"};
    option (google.api.method_signature) = "name";
    option (bytebase.v1.permission) = "bb.changelists.delete";
    option (bytebase.v1.auth_method) = IAM;
  }
}

// Request message for creating a changelist.
message CreateChangelistRequest {
  // The parent resource where this changelist will be created.
  // Format: projects/{project}
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "bytebase.com/Project"}
  ];

  // The changelist to create.
  Changelist changelist = 2 [(google.api.field_behavior) = REQUIRED];

  // The ID to use for the changelist, which will become the final component of
  // the changelist's resource name.
  //
  // This value should be 4-63 characters, and valid characters
  // are /[a-z][0-9]-/.
  string changelist_id = 3 [(google.api.field_behavior) = REQUIRED];
}

// Request message for getting a changelist.
message GetChangelistRequest {
  // The name of the changelist to retrieve.
  // Format: projects/{project}/changelists/{changelist}
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "bytebase.com/Changelist"}
  ];
}

// Request message for listing changelists.
message ListChangelistsRequest {
  // The parent, which owns this collection of changelists.
  // Format: projects/{project}
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "bytebase.com/Project"}
  ];
}

// Response message for listing changelists.
message ListChangelistsResponse {
  // The changelists from the specified request.
  repeated Changelist changelists = 1;
}

// Request message for updating a changelist.
message UpdateChangelistRequest {
  // The changelist to update.
  //
  // The changelist's `name` field is used to identify the changelist to update.
  // Format: projects/{project}/changelists/{changelist}
  Changelist changelist = 1 [(google.api.field_behavior) = REQUIRED];

  // The list of fields to be updated.
  google.protobuf.FieldMask update_mask = 2;

  // If set to true, and the changelist is not found, a new changelist will be created.
  // In this situation, `update_mask` is ignored.
  bool allow_missing = 3;
}

// Request message for deleting a changelist.
message DeleteChangelistRequest {
  // The name of the changelist to delete.
  // Format: projects/{project}/changelists/{changelist}
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "bytebase.com/Changelist"}
  ];
}

// A changelist groups multiple database changes together.
message Changelist {
  option (google.api.resource) = {
    type: "bytebase.com/Changelist"
    pattern: "projects/{project}/changelists/{changelist}"
  };

  // The name of the changelist resource.
  // Canonical parent is project.
  // Format: projects/{project}/changelists/{changelist}
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.field_behavior) = IMMUTABLE
  ];

  // The description of the changelist.
  string description = 2 [(buf.validate.field).string.max_len = 1000];

  // The creator of the changelist.
  // Format: users/{email}
  string creator = 3 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The last time the changelist was updated.
  google.protobuf.Timestamp update_time = 6 [(google.api.field_behavior) = OUTPUT_ONLY];

  // A single change in a changelist.
  message Change {
    // The sheet containing the SQL statement.
    // Format: projects/{project}/sheets/{sheet}
    string sheet = 1;
    // The source of this change.
    // Format: instances/{instance}/databases/{database}/changelogs/{changelog}
    // If empty, the change is from raw SQL.
    string source = 2;
  }
  // The list of changes in this changelist.
  repeated Change changes = 7;
}
