syntax = "proto3";

package bytebase.v1;

import "buf/validate/validate.proto";
import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "google/type/expr.proto";
import "v1/annotation.proto";
import "v1/common.proto";

option go_package = "github.com/bytebase/bytebase/backend/generated-go/v1";

// IssueService manages issues for tracking database changes and tasks.
service IssueService {
  // Retrieves an issue by name.
  // Permissions required: bb.issues.get
  rpc GetIssue(GetIssueRequest) returns (Issue) {
    option (google.api.http) = {get: "/v1/{name=projects/*/issues/*}"};
    option (google.api.method_signature) = "name";
    option (bytebase.v1.permission) = "bb.issues.get";
    option (bytebase.v1.auth_method) = IAM;
  }

  // Creates a new issue for database changes or tasks.
  // Permissions required: bb.issues.create
  rpc CreateIssue(CreateIssueRequest) returns (Issue) {
    option (google.api.http) = {
      post: "/v1/{parent=projects/*}/issues"
      body: "issue"
    };
    option (google.api.method_signature) = "parent,issue";
    // XXX: issues.action needs respective plans.action and rollouts.action permissions if the issue type is change database.
    option (bytebase.v1.permission) = "bb.issues.create";
    option (bytebase.v1.auth_method) = IAM;
    option (bytebase.v1.audit) = true;
  }

  // Lists issues in a project.
  // Permissions required: bb.issues.list
  rpc ListIssues(ListIssuesRequest) returns (ListIssuesResponse) {
    option (google.api.http) = {get: "/v1/{parent=projects/*}/issues"};
    option (google.api.method_signature) = "parent";
    option (bytebase.v1.permission) = "bb.issues.list";
    option (bytebase.v1.auth_method) = IAM;
  }

  // Search for issues that the caller has the bb.issues.get permission on and also satisfy the specified filter & query.
  // Permissions required: bb.issues.get
  rpc SearchIssues(SearchIssuesRequest) returns (SearchIssuesResponse) {
    option (google.api.http) = {
      post: "/v1/{parent=projects/*}/issues:search"
      body: "*"
    };
    option (bytebase.v1.permission) = "bb.issues.get";
    option (bytebase.v1.auth_method) = CUSTOM;
  }

  // Updates an issue's properties such as title, description, or labels.
  // Permissions required: bb.issues.update
  rpc UpdateIssue(UpdateIssueRequest) returns (Issue) {
    option (google.api.http) = {
      patch: "/v1/{issue.name=projects/*/issues/*}"
      body: "issue"
    };
    option (google.api.method_signature) = "issue,update_mask";
    option (bytebase.v1.permission) = "bb.issues.update";
    option (bytebase.v1.auth_method) = IAM;
    option (bytebase.v1.audit) = true;
  }

  // Lists comments on an issue.
  // Permissions required: bb.issueComments.list
  rpc ListIssueComments(ListIssueCommentsRequest) returns (ListIssueCommentsResponse) {
    option (google.api.http) = {get: "/v1/{parent=projects/*/issues/*}/issueComments"};
    option (google.api.method_signature) = "parent";
    option (bytebase.v1.permission) = "bb.issueComments.list";
    option (bytebase.v1.auth_method) = IAM;
  }

  // Adds a comment to an issue.
  // Permissions required: bb.issueComments.create
  rpc CreateIssueComment(CreateIssueCommentRequest) returns (IssueComment) {
    option (google.api.http) = {
      post: "/v1/{parent=projects/*/issues/*}:comment"
      body: "issue_comment"
    };
    option (google.api.method_signature) = "parent,issue_comment";
    option (bytebase.v1.permission) = "bb.issueComments.create";
    option (bytebase.v1.auth_method) = IAM;
    option (bytebase.v1.audit) = true;
  }

  // Updates an existing issue comment.
  // Permissions required: bb.issueComments.update
  rpc UpdateIssueComment(UpdateIssueCommentRequest) returns (IssueComment) {
    option (google.api.http) = {
      patch: "/v1/{parent=projects/*/issues/*}:comment"
      body: "issue_comment"
    };
    option (google.api.method_signature) = "parent,issue_comment,update_mask";
    option (bytebase.v1.permission) = "bb.issueComments.update";
    option (bytebase.v1.auth_method) = IAM;
    option (bytebase.v1.audit) = true;
  }

  // Updates the status of multiple issues in a single operation.
  // Permissions required: bb.issues.update
  rpc BatchUpdateIssuesStatus(BatchUpdateIssuesStatusRequest) returns (BatchUpdateIssuesStatusResponse) {
    option (google.api.http) = {
      post: "/v1/{parent=projects/*}/issues:batchUpdateStatus"
      body: "*"
    };
    option (bytebase.v1.permission) = "bb.issues.update";
    option (bytebase.v1.auth_method) = IAM;
    option (bytebase.v1.audit) = true;
  }

  // Approves an issue. Access determined by approval flow configuration - caller must be a designated approver for the current approval step.
  // Permissions required: None (determined by approval flow)
  rpc ApproveIssue(ApproveIssueRequest) returns (Issue) {
    option (google.api.http) = {
      post: "/v1/{name=projects/*/issues/*}:approve"
      body: "*"
    };
    option (bytebase.v1.auth_method) = CUSTOM;
    option (bytebase.v1.audit) = true;
  }

  // Rejects an issue. Access determined by approval flow configuration - caller must be a designated approver for the current approval step.
  // Permissions required: None (determined by approval flow)
  rpc RejectIssue(RejectIssueRequest) returns (Issue) {
    option (google.api.http) = {
      post: "/v1/{name=projects/*/issues/*}:reject"
      body: "*"
    };
    option (bytebase.v1.auth_method) = CUSTOM;
    option (bytebase.v1.audit) = true;
  }

  // Requests changes on an issue. Access determined by approval flow configuration - caller must be a designated approver for the current approval step.
  // Permissions required: None (determined by approval flow)
  rpc RequestIssue(RequestIssueRequest) returns (Issue) {
    option (google.api.http) = {
      post: "/v1/{name=projects/*/issues/*}:request"
      body: "*"
    };
    option (bytebase.v1.auth_method) = CUSTOM;
    option (bytebase.v1.audit) = true;
  }
}

message GetIssueRequest {
  // The name of the issue to retrieve.
  // Format: projects/{project}/issues/{issue}
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "bytebase.com/Issue"}
  ];

  // If set to true, bypass cache and fetch the latest data.
  bool force = 2;
}

message CreateIssueRequest {
  // The parent, which owns this collection of issues.
  // Format: projects/{project}
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "bytebase.com/Project"}
  ];

  // The issue to create.
  Issue issue = 2 [(google.api.field_behavior) = REQUIRED];
}

message ListIssuesRequest {
  // The parent, which owns this collection of issues.
  // Format: projects/{project}
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "bytebase.com/Project"}
  ];

  // The maximum number of issues to return. The service may return fewer than
  // this value.
  // If unspecified, at most 10 issues will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  int32 page_size = 2;

  // A page token, received from a previous `ListIssues` call.
  // Provide this to retrieve the subsequent page.
  //
  // When paginating, all other parameters provided to `ListIssues` must match
  // the call that provided the page token.
  string page_token = 3;

  // Filter is used to filter issues returned in the list.
  // The syntax and semantics of CEL are documented at https://github.com/google/cel-spec
  //
  // Supported filters:
  // - creator: issue creator full name in "users/{email or id}" format, support "==" operator.
  // - status: the issue status, support "==" and "in" operator, check the IssueStatus enum for the values.
  // - create_time: issue create time in "2006-01-02T15:04:05Z07:00" format, support ">=" or "<=" operator.
  // - type: the issue type, support "==" and "in" operator, check the Type enum in the Issue message for the values.
  // - task_type: support "==" operator, the value can be "DDL", "DML" or "DATA_EXPORT"
  // - instance: the instance full name in the "instances/{id}" format, support "==" operator.
  // - database: the database full name in the "instances/{id}/databases/{name}" format, support "==" operator.
  // - environment: the database full name in the "environments/{name}" format, support "==" operator.
  // - labels: the issue labels, support "==" and "in" operator.
  //
  // For example:
  // creator == "users/ed@bytebase.com" && status in ["OPEN", "DONE"]
  // status == "CANCELED" && type == "DATABASE_CHANGE"
  // instance == "instances/sample" && labels in ["label1", "label2"]
  // create_time >= "2025-01-02T15:04:05Z07:00"
  // environment == "environments/test"
  string filter = 4;

  // Query is the query statement.
  string query = 5;
}

message ListIssuesResponse {
  // The issues from the specified request.
  repeated Issue issues = 1;

  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

message SearchIssuesRequest {
  // The parent, which owns this collection of issues.
  // Format: projects/{project}
  // Use "projects/-" to list all issues from all projects.
  string parent = 1 [(google.api.field_behavior) = REQUIRED];

  // The maximum number of issues to return. The service may return fewer than
  // this value.
  // If unspecified, at most 10 issues will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  int32 page_size = 2;

  // A page token, received from a previous `SearchIssues` call.
  // Provide this to retrieve the subsequent page.
  //
  // When paginating, all other parameters provided to `SearchIssues` must match
  // the call that provided the page token.
  string page_token = 3;

  // Filter is used to filter issues returned in the list.
  // Check the filter field in the ListIssuesRequest message.
  string filter = 4;

  // Query is the query statement.
  string query = 5;
}

message SearchIssuesResponse {
  // The issues from the specified request.
  repeated Issue issues = 1;

  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

message UpdateIssueRequest {
  // The issue to update.
  //
  // The issue's `name` field is used to identify the issue to update.
  // Format: projects/{project}/issues/{issue}
  Issue issue = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "bytebase.com/Issue"}
  ];

  // The list of fields to update.
  google.protobuf.FieldMask update_mask = 2 [(google.api.field_behavior) = REQUIRED];

  // If set to true, and the issue is not found, a new issue will be created.
  // In this situation, `update_mask` is ignored.
  bool allow_missing = 3;
}

message BatchUpdateIssuesStatusRequest {
  // The parent resource shared by all issues being updated.
  // Format: projects/{project}
  // If the operation spans parents, a dash (-) may be accepted as a wildcard.
  // We only support updating the status of databases for now.
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "bytebase.com/Project"}
  ];

  // The list of issues to update.
  // Format: projects/{project}/issues/{issue}
  repeated string issues = 2;

  // The new status.
  IssueStatus status = 3;

  // The reason for the status change.
  string reason = 4;
}

message BatchUpdateIssuesStatusResponse {}

message ApproveIssueRequest {
  // The name of the issue to add an approver.
  // Format: projects/{project}/issues/{issue}
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "bytebase.com/Issue"}
  ];
  // The comment explaining the approval decision.
  string comment = 2;
}

message RejectIssueRequest {
  // The name of the issue to add a rejection.
  // Format: projects/{project}/issues/{issue}
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "bytebase.com/Issue"}
  ];
  // The comment explaining the rejection decision.
  string comment = 2;
}

message RequestIssueRequest {
  // The name of the issue to request a issue.
  // Format: projects/{project}/issues/{issue}
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "bytebase.com/Issue"}
  ];
  // The comment explaining the request.
  string comment = 2;
}

message Issue {
  option (google.api.resource) = {
    type: "bytebase.com/Issue"
    pattern: "projects/{project}/issues/{issue}"
  };

  reserved 2, 7, 8;

  // The name of the issue.
  // Format: projects/{project}/issues/{issue}
  string name = 1;

  // The title of the issue.
  string title = 3 [(buf.validate.field).string.max_len = 200];

  // The description of the issue.
  string description = 4 [(buf.validate.field).string.max_len = 10000];

  // The type of issue.
  enum Type {
    // Unspecified issue type.
    TYPE_UNSPECIFIED = 0;
    // Database schema or data change.
    DATABASE_CHANGE = 1;
    // Database access grant request.
    GRANT_REQUEST = 2;
    // Database data export request.
    DATABASE_EXPORT = 3;
  }
  Type type = 5;

  // The status of the issue.
  IssueStatus status = 6;

  // Approvers and their approval status for the issue.
  message Approver {
    // The approval status of an approver.
    enum Status {
      // Unspecified status.
      STATUS_UNSPECIFIED = 0;
      // Awaiting approval.
      PENDING = 1;
      // Approved.
      APPROVED = 2;
      // Rejected.
      REJECTED = 3;
    }
    // The new status.
    Status status = 1;

    // Format: users/hello@world.com
    string principal = 2;
  }
  repeated Approver approvers = 9;

  // The approval template for the issue.
  ApprovalTemplate approval_template = 10;

  reserved 11, 12;

  // Format: users/hello@world.com
  string creator = 14 [(google.api.field_behavior) = OUTPUT_ONLY];

  google.protobuf.Timestamp create_time = 15 [(google.api.field_behavior) = OUTPUT_ONLY];

  google.protobuf.Timestamp update_time = 16 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The plan associated with the issue.
  // Can be empty.
  // Format: projects/{project}/plans/{plan}
  string plan = 17;

  // The rollout associated with the issue.
  // Can be empty.
  // Format: projects/{project}/rollouts/{rollout}
  string rollout = 18;

  // Used if the issue type is GRANT_REQUEST.
  GrantRequest grant_request = 19;

  // The releasers of the pending stage of the issue rollout, judging
  // from the rollout policy.
  // Format:
  // - roles/workspaceOwner
  // - roles/workspaceDBA
  // - roles/projectOwner
  // - roles/projectReleaser
  // - users/{email}
  repeated string releasers = 20;

  // The risk level of the issue.
  RiskLevel risk_level = 21;

  // The status count of the issue.
  // Keys are the following:
  // - NOT_STARTED
  // - SKIPPED
  // - PENDING
  // - RUNNING
  // - DONE
  // - FAILED
  // - CANCELED
  map<string, int32> task_status_count = 22;

  // Labels attached to the issue for categorization and filtering.
  repeated string labels = 23;

  // The overall approval status for the issue.
  enum ApprovalStatus {
    // Unspecified approval status.
    APPROVAL_STATUS_UNSPECIFIED = 0;
    // Approval checks are being evaluated.
    CHECKING = 1;
    // Approval is pending.
    PENDING = 2;
    // Issue has been approved.
    APPROVED = 3;
    // Issue has been rejected.
    REJECTED = 4;
    // Approval was skipped.
    SKIPPED = 5;
    // Error occurred during approval evaluation.
    ERROR = 6;
  }
  ApprovalStatus approval_status = 24 [(google.api.field_behavior) = OUTPUT_ONLY];
  // Only populated when approval_status == ERROR
  string approval_status_error = 25 [(google.api.field_behavior) = OUTPUT_ONLY];
}

message GrantRequest {
  // The requested role.
  // Format: roles/EXPORTER.
  string role = 1;
  // The user to be granted.
  // Format: users/{email}.
  string user = 2;
  // The condition for the role. Same as the condition in IAM Binding message.
  google.type.Expr condition = 3;
  // The duration for which the grant is valid.
  google.protobuf.Duration expiration = 4;
}

// The status of an issue.
enum IssueStatus {
  // Unspecified status.
  ISSUE_STATUS_UNSPECIFIED = 0;
  // Issue is open and active.
  OPEN = 1;
  // Issue is completed.
  DONE = 2;
  // Issue is canceled.
  CANCELED = 3;
}

message ApprovalTemplate {
  // The unique identifier for the approval template.
  // For built-in templates, use "bb." prefix (e.g., "bb.project-owner", "bb.workspace-dba").
  // For custom templates, use a UUID or other unique identifier.
  string id = 4;
  // The approval flow definition.
  ApprovalFlow flow = 1;
  // The title of the approval template.
  string title = 2;
  // The description of the approval template.
  string description = 3;
}

message ApprovalFlow {
  // The roles required for approval in order.
  repeated string roles = 1;
}

message ListIssueCommentsRequest {
  // Format: projects/{projects}/issues/{issue}
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "bytebase.com/Issue"}
  ];

  // The maximum number of issue comments to return. The service may return fewer than
  // this value.
  // If unspecified, at most 10 issue comments will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  int32 page_size = 2;

  // A page token, received from a previous `ListIssueComments` call.
  // Provide this to retrieve the subsequent page.
  //
  // When paginating, all other parameters provided to `ListIssueComments` must match
  // the call that provided the page token.
  string page_token = 3;
}

message ListIssueCommentsResponse {
  // The issue comments from the specified request.
  repeated IssueComment issue_comments = 1;

  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

message CreateIssueCommentRequest {
  // The issue name
  // Format: projects/{project}/issues/{issue}
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "bytebase.com/Issue"}
  ];

  // The comment to create.
  IssueComment issue_comment = 2;
}

message UpdateIssueCommentRequest {
  // The issue name
  // Format: projects/{project}/issues/{issue}
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "bytebase.com/Issue"}
  ];

  // The comment to update.
  IssueComment issue_comment = 2;

  // The list of fields to update.
  google.protobuf.FieldMask update_mask = 3 [(google.api.field_behavior) = REQUIRED];

  // If set to true, and the issue comment is not found, a new issue comment will be created.
  // In this situation, `update_mask` is ignored.
  bool allow_missing = 4;
}

// A comment on an issue.
message IssueComment {
  reserved 6;

  // Format: projects/{project}/issues/{issue}/issueComments/{issueComment-uid}
  string name = 1;

  // The text content of the comment.
  string comment = 2 [(buf.validate.field).string.max_len = 65536];

  // TODO: use struct message instead.
  string payload = 3;

  google.protobuf.Timestamp create_time = 4 [(google.api.field_behavior) = OUTPUT_ONLY];

  google.protobuf.Timestamp update_time = 5 [(google.api.field_behavior) = OUTPUT_ONLY];

  // Format: users/{email}
  string creator = 7 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The event associated with this comment.
  oneof event {
    // Approval event.
    Approval approval = 8;
    // Issue update event.
    IssueUpdate issue_update = 9;
    // Stage end event.
    StageEnd stage_end = 10;
    // Task update event.
    TaskUpdate task_update = 11;
    // Task prior backup event.
    TaskPriorBackup task_prior_backup = 12;
  }

  // Approval event information.
  message Approval {
    // The approval status.
    Status status = 1;

    // Approval status values.
    enum Status {
      // Unspecified status.
      STATUS_UNSPECIFIED = 0;
      // Approval pending.
      PENDING = 1;
      // Approved.
      APPROVED = 2;
      // Rejected.
      REJECTED = 3;
    }
  }

  // Issue update event information.
  message IssueUpdate {
    reserved 7, 8;

    optional string from_title = 1;
    optional string to_title = 2;
    optional string from_description = 3;
    optional string to_description = 4;
    optional IssueStatus from_status = 5;
    optional IssueStatus to_status = 6;

    repeated string from_labels = 9;
    repeated string to_labels = 10;
  }

  // Stage end event information.
  message StageEnd {
    // The stage that ended.
    string stage = 1;
  }

  // Task update event information.
  message TaskUpdate {
    // The tasks that were updated.
    repeated string tasks = 1;
    // Format: projects/{project}/sheets/{sheet}
    optional string from_sheet = 2;
    // Format: projects/{project}/sheets/{sheet}
    optional string to_sheet = 3;
    optional Status to_status = 6;

    // Task status values.
    enum Status {
      // Unspecified status.
      STATUS_UNSPECIFIED = 0;
      // Task is pending.
      PENDING = 1;
      // Task is running.
      RUNNING = 2;
      // Task is done.
      DONE = 3;
      // Task failed.
      FAILED = 4;
      // Task was skipped.
      SKIPPED = 5;
      // Task was canceled.
      CANCELED = 6;
    }
  }

  // Task prior backup event information.
  message TaskPriorBackup {
    // The task for which backup was performed.
    string task = 1;
    // The tables that were backed up.
    repeated Table tables = 2;
    // The original line number in the statement.
    optional int32 original_line = 3;
    // The database that was backed up.
    string database = 4;
    // Error message if backup failed.
    string error = 5;

    // Table identification.
    message Table {
      // The schema name.
      string schema = 1;
      // The table name.
      string table = 2;
    }
  }
}
