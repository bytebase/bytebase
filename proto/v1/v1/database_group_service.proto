syntax = "proto3";

package bytebase.v1;

import "buf/validate/validate.proto";
import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/type/expr.proto";
import "v1/annotation.proto";

option go_package = "github.com/bytebase/bytebase/backend/generated-go/v1";

// DatabaseGroupService manages database groups for organizing databases by criteria.
service DatabaseGroupService {
  // Lists database groups in a project.
  // Permissions required: bb.projects.get
  rpc ListDatabaseGroups(ListDatabaseGroupsRequest) returns (ListDatabaseGroupsResponse) {
    option (google.api.http) = {get: "/v1/{parent=projects/*}/databaseGroups"};
    option (google.api.method_signature) = "parent";
    option (bytebase.v1.permission) = "bb.projects.get";
    option (bytebase.v1.auth_method) = IAM;
  }

  // Gets a database group by name.
  // Permissions required: bb.projects.get
  rpc GetDatabaseGroup(GetDatabaseGroupRequest) returns (DatabaseGroup) {
    option (google.api.http) = {get: "/v1/{name=projects/*/databaseGroups/*}"};
    option (google.api.method_signature) = "name";
    option (bytebase.v1.permission) = "bb.projects.get";
    option (bytebase.v1.auth_method) = IAM;
  }

  // Creates a new database group.
  // Permissions required: bb.projects.update
  rpc CreateDatabaseGroup(CreateDatabaseGroupRequest) returns (DatabaseGroup) {
    option (google.api.http) = {
      post: "/v1/{parent=projects/*}/databaseGroups"
      body: "database_group"
    };
    option (google.api.method_signature) = "parent,databaseGroup";
    option (bytebase.v1.permission) = "bb.projects.update";
    option (bytebase.v1.auth_method) = CUSTOM;
    option (bytebase.v1.audit) = true;
  }

  // Updates a database group.
  // Permissions required: bb.projects.update
  // When allow_missing=true, also requires: bb.projects.update
  rpc UpdateDatabaseGroup(UpdateDatabaseGroupRequest) returns (DatabaseGroup) {
    option (google.api.http) = {
      patch: "/v1/{database_group.name=projects/*/databaseGroups/*}"
      body: "database_group"
    };
    option (google.api.method_signature) = "database_group,update_mask";
    option (bytebase.v1.permission) = "bb.projects.update";
    option (bytebase.v1.allow_missing_requires) = "bb.projects.update";
    option (bytebase.v1.auth_method) = IAM;
    option (bytebase.v1.audit) = true;
  }

  // Deletes a database group.
  // Permissions required: bb.projects.update
  rpc DeleteDatabaseGroup(DeleteDatabaseGroupRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {delete: "/v1/{name=projects/*/databaseGroups/*}"};
    option (google.api.method_signature) = "name";
    option (bytebase.v1.permission) = "bb.projects.update";
    option (bytebase.v1.auth_method) = IAM;
    option (bytebase.v1.audit) = true;
  }
}

// Request message for listing database groups.
message ListDatabaseGroupsRequest {
  // The parent resource whose database groups are to be listed.
  // Format: projects/{project}
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "bytebase.com/Project"}
  ];

  // The view to return. Defaults to DATABASE_GROUP_VIEW_BASIC.
  DatabaseGroupView view = 2;
}

// Response message for listing database groups.
message ListDatabaseGroupsResponse {
  // The database groups from the specified request.
  repeated DatabaseGroup database_groups = 1;
}

// Request message for getting a database group.
message GetDatabaseGroupRequest {
  // The name of the database group to retrieve.
  // Format: projects/{project}/databaseGroups/{databaseGroup}
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "bytebase.com/DatabaseGroup"}
  ];

  // The view to return. Defaults to DATABASE_GROUP_VIEW_BASIC.
  DatabaseGroupView view = 2;
}

// Request message for creating a database group.
message CreateDatabaseGroupRequest {
  // The parent resource where this database group will be created.
  // Format: projects/{project}
  string parent = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "bytebase.com/Project"}
  ];

  // The database group to create.
  DatabaseGroup database_group = 2 [(google.api.field_behavior) = REQUIRED];

  // The ID to use for the database group, which will become the final component of
  // the database group's resource name.
  //
  // This value should be 4-63 characters, and valid characters
  // are /[a-z][0-9]-/.
  string database_group_id = 3;

  // If set, validate the create request and preview the full database group response, but do not actually create it.
  bool validate_only = 4;
}

// Request message for updating a database group.
message UpdateDatabaseGroupRequest {
  // The database group to update.
  //
  // The database group's `name` field is used to identify the database group to update.
  // Format: projects/{project}/databaseGroups/{databaseGroup}
  DatabaseGroup database_group = 1 [(google.api.field_behavior) = REQUIRED];

  // The list of fields to update.
  google.protobuf.FieldMask update_mask = 2;

  // If set to true, and the database group is not found, a new database group will be created.
  // In this situation, `update_mask` is ignored.
  bool allow_missing = 3;
}

// Request message for deleting a database group.
message DeleteDatabaseGroupRequest {
  // The name of the database group to delete.
  // Format: projects/{project}/databaseGroups/{databaseGroup}
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "bytebase.com/DatabaseGroup"}
  ];
}

// View options for database group responses.
enum DatabaseGroupView {
  // The default / unset value.
  // The API will default to the BASIC view.
  DATABASE_GROUP_VIEW_UNSPECIFIED = 0;

  // Include basic information about the database group, but exclude the list of matched databases and unmatched databases.
  DATABASE_GROUP_VIEW_BASIC = 1;

  // Include everything.
  DATABASE_GROUP_VIEW_FULL = 2;
}

// A group of databases matched by expressions.
message DatabaseGroup {
  option (google.api.resource) = {
    type: "bytebase.com/DatabaseGroup"
    pattern: "projects/{project}/databaseGroups/{databaseGroup}"
  };

  // The name of the database group.
  // Format: projects/{project}/databaseGroups/{databaseGroup}
  string name = 1;

  // The short name used in actual databases specified by users.
  string title = 2 [
    (google.api.field_behavior) = REQUIRED,
    (buf.validate.field).string.min_len = 1,
    (buf.validate.field).string.max_len = 200
  ];

  // The condition that is associated with this database group.
  // The syntax and semantics of CEL are documented at https://github.com/google/cel-spec
  //
  // Support variables:
  // resource.environment_id: the environment resource id. Support "==", "!=", "in [XX]", "!(in [xx])" operations.
  // resource.instance_id: the instance resource id. Support "==", "!=", "in [XX]", "!(in [xx])", "contains", "matches", "startsWith", "endsWith" operations.
  // resource.database_name: the database name. Support "==", "!=", "in [XX]", "!(in [xx])", "contains", "matches", "startsWith", "endsWith" operations.
  // resource.database_labels: the database labels. Support map access operations.
  // All variables should join with "&&" condition.
  //
  // For example:
  // resource.environment_id == "test" && resource.database_name.startsWith("sample_")
  // resource.database_labels["tenant"] == "tenant1"
  google.type.Expr database_expr = 3;

  // A database within a database group.
  message Database {
    // The resource name of the database.
    // Format: instances/{instance}/databases/{database}
    string name = 1;
  }
  // The list of databases that match the database group condition.
  repeated Database matched_databases = 4 [(google.api.field_behavior) = OUTPUT_ONLY];
}
