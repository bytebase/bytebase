syntax = "proto3";

package bytebase.v1;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "v1/annotation.proto";

option go_package = "github.com/bytebase/bytebase/backend/generated-go/v1";

// DatabaseCatalogService manages database schema metadata and classification.
service DatabaseCatalogService {
  // Gets the catalog metadata for a database.
  // Permissions required: bb.databaseCatalogs.get
  rpc GetDatabaseCatalog(GetDatabaseCatalogRequest) returns (DatabaseCatalog) {
    option (google.api.http) = {get: "/v1/{name=instances/*/databases/*/catalog}"};
    option (google.api.method_signature) = "name";
    option (bytebase.v1.permission) = "bb.databaseCatalogs.get";
    option (bytebase.v1.auth_method) = IAM;
  }

  // Updates catalog metadata such as classifications and labels.
  // Permissions required: bb.databaseCatalogs.update
  rpc UpdateDatabaseCatalog(UpdateDatabaseCatalogRequest) returns (DatabaseCatalog) {
    option (google.api.http) = {
      patch: "/v1/{catalog.name=instances/*/databases/*/catalog}"
      body: "catalog"
    };
    option (google.api.method_signature) = "catalog,update_mask";
    option (bytebase.v1.permission) = "bb.databaseCatalogs.update";
    option (bytebase.v1.auth_method) = IAM;
    option (bytebase.v1.audit) = true;
  }
}

// Request message for getting a database catalog.
message GetDatabaseCatalogRequest {
  // The name of the database catalog to retrieve.
  // Format: instances/{instance}/databases/{database}/catalog
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "bytebase.com/DatabaseCatalog"}
  ];
}

// Request message for updating a database catalog.
message UpdateDatabaseCatalogRequest {
  // The database catalog to update.
  //
  // The catalog's `name` field is used to identify the database catalog to update.
  // Format: instances/{instance}/databases/{database}/catalog
  DatabaseCatalog catalog = 1 [(google.api.field_behavior) = REQUIRED];

  // If set to true, and the database catalog is not found, a new database catalog will be created.
  // In this situation, `update_mask` is ignored.
  bool allow_missing = 2;
}

// Catalog metadata for a database including schemas, tables, and columns.
message DatabaseCatalog {
  option (google.api.resource) = {
    type: "bytebase.com/DatabaseCatalog"
    pattern: "instances/{instance}/databases/{database}/catalog"
  };

  // The name of the database catalog.
  // Format: instances/{instance}/databases/{database}/catalog
  string name = 1;

  // The schemas in the database.
  repeated SchemaCatalog schemas = 2;
}

// Schema metadata within a database.
message SchemaCatalog {
  // The schema name.
  string name = 1;

  // The tables in the schema.
  repeated TableCatalog tables = 2;
}

// Table metadata within a schema.
message TableCatalog {
  // The table name.
  string name = 1;

  // Column list for regular tables.
  message Columns {
    // The columns in the table.
    repeated ColumnCatalog columns = 1;
  }
  oneof kind {
    // Regular table columns.
    Columns columns = 2;
    // Object schema for JSON/XML columns.
    ObjectSchema object_schema = 3;
  }

  // The data classification level for this table.
  string classification = 4;
}

// Column metadata within a table.
message ColumnCatalog {
  // The column name.
  string name = 1;

  // The semantic type describing the data purpose.
  string semantic_type = 2;

  // User-defined labels for this column.
  map<string, string> labels = 3;

  // The data classification level for this column.
  string classification = 4;

  // Object schema for complex column types like JSON.
  optional ObjectSchema object_schema = 5;
}

// Schema definition for object-type columns.
message ObjectSchema {
  // Object schema data types.
  enum Type {
    // Unspecified type.
    TYPE_UNSPECIFIED = 0;
    // String type.
    STRING = 1;
    // Number type.
    NUMBER = 2;
    // Boolean type.
    BOOLEAN = 3;
    // Object/struct type.
    OBJECT = 4;
    // Array type.
    ARRAY = 5;
  }
  // The data type of this object.
  Type type = 1;

  // Structure type with named properties.
  message StructKind {
    // Properties of the struct.
    map<string, ObjectSchema> properties = 1;
  }
  // Array type with element schema.
  message ArrayKind {
    // The schema of array elements.
    ObjectSchema kind = 1;
  }
  oneof kind {
    // Struct schema.
    StructKind struct_kind = 2;
    // Array schema.
    ArrayKind array_kind = 3;
  }

  // The semantic type of this object.
  string semantic_type = 4;
}
