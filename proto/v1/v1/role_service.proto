syntax = "proto3";

package bytebase.v1;

import "buf/validate/validate.proto";
import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "v1/annotation.proto";

option go_package = "github.com/bytebase/bytebase/backend/generated-go/v1";

// RoleService manages workspace roles and permissions.
service RoleService {
  // Lists roles in the workspace.
  // Permissions required: bb.roles.list
  rpc ListRoles(ListRolesRequest) returns (ListRolesResponse) {
    option (google.api.http) = {get: "/v1/roles"};
    option (bytebase.v1.permission) = "bb.roles.list";
    option (bytebase.v1.auth_method) = IAM;
  }

  // Retrieves a role by name.
  // Permissions required: bb.roles.get
  rpc GetRole(GetRoleRequest) returns (Role) {
    option (google.api.http) = {get: "/v1/{name=roles/*}"};
    option (google.api.method_signature) = "name";
    option (bytebase.v1.permission) = "bb.roles.get";
    option (bytebase.v1.auth_method) = IAM;
  }

  // Creates a new custom role.
  // Permissions required: bb.roles.create
  rpc CreateRole(CreateRoleRequest) returns (Role) {
    option (google.api.http) = {
      post: "/v1/roles"
      body: "role"
    };
    option (bytebase.v1.permission) = "bb.roles.create";
    option (bytebase.v1.auth_method) = IAM;
    option (bytebase.v1.audit) = true;
  }

  // Updates a role's properties.
  // Permissions required: bb.roles.update
  // When allow_missing=true, also requires: bb.roles.create
  rpc UpdateRole(UpdateRoleRequest) returns (Role) {
    option (google.api.http) = {
      patch: "/v1/{role.name=roles/*}"
      body: "role"
    };
    option (google.api.method_signature) = "role,update_mask";
    option (bytebase.v1.permission) = "bb.roles.update";
    option (bytebase.v1.allow_missing_requires) = "bb.roles.create";
    option (bytebase.v1.auth_method) = IAM;
    option (bytebase.v1.audit) = true;
  }

  // Deletes a custom role.
  // Permissions required: bb.roles.delete
  rpc DeleteRole(DeleteRoleRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {delete: "/v1/{name=roles/*}"};
    option (google.api.method_signature) = "name";
    option (bytebase.v1.permission) = "bb.roles.delete";
    option (bytebase.v1.auth_method) = IAM;
    option (bytebase.v1.audit) = true;
  }
}

message ListRolesRequest {}

message ListRolesResponse {
  // The roles from the specified request.
  repeated Role roles = 1;
}

message CreateRoleRequest {
  // The role to create.
  Role role = 1 [(google.api.field_behavior) = REQUIRED];

  // The ID to use for the role, which will become the final component
  // of the role's resource name.
  //
  // This value should be 4-63 characters, and valid characters
  // are /[a-z][A-Z][0-9]/.
  string role_id = 2 [(google.api.field_behavior) = REQUIRED];
}

message GetRoleRequest {
  // The name of the role to retrieve.
  // Format: roles/{role}
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "bytebase.com/Role"}
  ];
}

message UpdateRoleRequest {
  // The role to update.
  Role role = 1 [(google.api.field_behavior) = REQUIRED];
  // The list of fields to update.
  google.protobuf.FieldMask update_mask = 2;
  // If set to true, and the role is not found, a new role will be created.
  // In this situation, `update_mask` is ignored.
  bool allow_missing = 3;
}

message DeleteRoleRequest {
  // The name of the role to delete.
  // Format: roles/{role}
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "bytebase.com/Role"}
  ];
}

// Role defines a set of permissions that can be assigned to users.
message Role {
  option (google.api.resource) = {
    type: "bytebase.com/Role"
    pattern: "roles/{role}"
  };

  // Resource name. Format: roles/{role}
  string name = 1;
  // Human-readable title.
  string title = 2 [(buf.validate.field).string.max_len = 200];
  // Optional description of the role.
  string description = 3 [(buf.validate.field).string.max_len = 1000];
  // List of permission identifiers granted by this role.
  repeated string permissions = 4;

  enum Type {
    TYPE_UNSPECIFIED = 0;
    // System-defined role that cannot be modified.
    BUILT_IN = 1;
    // User-defined role that can be modified.
    CUSTOM = 2;
  }

  // Role type indicating if it's built-in or custom.
  Type type = 5;
}
