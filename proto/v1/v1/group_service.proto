syntax = "proto3";

package bytebase.v1;

import "buf/validate/validate.proto";
import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "v1/annotation.proto";

option go_package = "github.com/bytebase/bytebase/backend/generated-go/v1";

// GroupService manages user groups for organizing users and permissions.
service GroupService {
  // Gets a group by name.
  // Permissions required: bb.groups.get
  rpc GetGroup(GetGroupRequest) returns (Group) {
    option (google.api.http) = {get: "/v1/{name=groups/*}"};
    option (google.api.method_signature) = "name";
    option (bytebase.v1.permission) = "bb.groups.get";
    option (bytebase.v1.auth_method) = IAM;
  }

  // Gets multiple groups in a single request.
  // Permissions required: bb.groups.get
  rpc BatchGetGroups(BatchGetGroupsRequest) returns (BatchGetGroupsResponse) {
    option (google.api.http) = {get: "/v1/groups:batchGet"};
    option (bytebase.v1.permission) = "bb.groups.get";
    option (bytebase.v1.auth_method) = IAM;
  }

  // Lists all groups in the workspace.
  // Permissions required: bb.groups.list
  rpc ListGroups(ListGroupsRequest) returns (ListGroupsResponse) {
    option (google.api.http) = {get: "/v1/groups"};
    option (google.api.method_signature) = "";
    option (bytebase.v1.permission) = "bb.groups.list";
    option (bytebase.v1.auth_method) = IAM;
  }

  // Creates a new group.
  // Permissions required: bb.groups.create
  rpc CreateGroup(CreateGroupRequest) returns (Group) {
    option (google.api.http) = {
      post: "/v1/groups"
      body: "group"
    };
    option (google.api.method_signature) = "group";
    option (bytebase.v1.permission) = "bb.groups.create";
    option (bytebase.v1.auth_method) = IAM;
    option (bytebase.v1.audit) = true;
  }

  // Updates a group. Group owners or users with bb.groups.update permission can update.
  // Permissions required: bb.groups.update OR caller is group owner
  // When allow_missing=true, also requires: bb.groups.create
  rpc UpdateGroup(UpdateGroupRequest) returns (Group) {
    option (google.api.http) = {
      patch: "/v1/{group.name=groups/*}"
      body: "group"
    };
    option (google.api.method_signature) = "group,update_mask";
    option (bytebase.v1.permission) = "bb.groups.update";
    option (bytebase.v1.allow_missing_requires) = "bb.groups.create";
    option (bytebase.v1.auth_method) = CUSTOM;
    option (bytebase.v1.audit) = true;
  }

  // Deletes a group. Group owners or users with bb.groups.delete permission can delete.
  // Permissions required: bb.groups.delete OR caller is group owner
  rpc DeleteGroup(DeleteGroupRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {delete: "/v1/{name=groups/*}"};
    option (google.api.method_signature) = "name";
    option (bytebase.v1.permission) = "bb.groups.delete";
    option (bytebase.v1.auth_method) = CUSTOM;
    option (bytebase.v1.audit) = true;
  }
}

// Request message for getting a group.
message GetGroupRequest {
  // The name of the group to retrieve.
  // Format: groups/{email}
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "bytebase.com/Group"}
  ];
}

// Request message for batch getting groups.
message BatchGetGroupsRequest {
  // The group names to retrieve.
  // Format: groups/{email}
  repeated string names = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "bytebase.com/Group"}
  ];
}

// Response message for batch getting groups.
message BatchGetGroupsResponse {
  // The groups from the specified request.
  repeated Group groups = 1;
}

// Request message for listing groups.
message ListGroupsRequest {
  // The maximum number of groups to return. The service may return fewer than
  // this value.
  // If unspecified, at most 10 groups will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  int32 page_size = 1;

  // A page token, received from a previous `ListGroups` call.
  // Provide this to retrieve the subsequent page.
  //
  // When paginating, all other parameters provided to `ListGroups` must match
  // the call that provided the page token.
  string page_token = 2;

  // Filter is used to filter groups returned in the list.
  // The syntax and semantics of CEL are documented at https://github.com/google/cel-spec
  //
  // Supported filter:
  // - title: the group title, support "==" and ".matches()" operator.
  // - email: the group email, support "==" and ".matches()" operator.
  // - project: the project full name in "projects/{id}" format, support "==" operator.
  //
  // For example:
  // title == "dba"
  // email == "dba@bytebase.com"
  // title.matches("dba")
  // email.matches("dba")
  // project == "projects/sample-project"
  // You can combine filter conditions like:
  // title.matches("dba") || email.matches("dba")
  string filter = 3;
}

// Response message for listing groups.
message ListGroupsResponse {
  // The groups from the specified request.
  repeated Group groups = 1;

  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

// Request message for creating a group.
message CreateGroupRequest {
  // The group to create.
  Group group = 1 [(google.api.field_behavior) = REQUIRED];

  // The email to use for the group, which will become the final component
  // of the group's resource name.
  string group_email = 2 [(google.api.field_behavior) = REQUIRED];
}

// Request message for updating a group.
message UpdateGroupRequest {
  // The group to update.
  //
  // The group's `name` field is used to identify the group to update.
  // Format: groups/{email}
  Group group = 1 [(google.api.field_behavior) = REQUIRED];

  // The list of fields to update.
  google.protobuf.FieldMask update_mask = 2;

  // If set to true, and the group is not found, a new group will be created.
  // In this situation, `update_mask` is ignored.
  bool allow_missing = 3;
}

// Request message for deleting a group.
message DeleteGroupRequest {
  // The name of the group to delete.
  // Format: groups/{email}
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "bytebase.com/Group"}
  ];
}

// A member of a group with a role.
message GroupMember {
  // Member is the principal who belong to this group.
  //
  // Format: users/hello@world.com
  string member = 1;

  // The role of a group member.
  enum Role {
    // Unspecified role.
    ROLE_UNSPECIFIED = 0;
    // Group owner.
    OWNER = 1;
    // Group member.
    MEMBER = 2;
  }

  // The member's role in the group.
  Role role = 2;
}

// A group of users within the workspace.
message Group {
  option (google.api.resource) = {
    type: "bytebase.com/Group"
    pattern: "groups/{group}"
  };

  // The name of the group to retrieve.
  // Format: groups/{group}, group is an email.
  string name = 1 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The display title of the group.
  string title = 2 [(buf.validate.field).string.max_len = 200];

  // The description of the group.
  string description = 3 [(buf.validate.field).string.max_len = 1000];

  // The members of the group.
  repeated GroupMember members = 5;

  // The source system where the group originated (e.g., Entra ID for SCIM sync).
  string source = 7;
}
