syntax = "proto3";

package bytebase.v1;

import "buf/validate/validate.proto";
import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "v1/annotation.proto";
import "v1/common.proto";

option go_package = "github.com/bytebase/bytebase/backend/generated-go/v1";

// UserService manages user accounts and authentication.
service UserService {
  // Get the user.
  // Any authenticated user can get the user.
  // Permissions required: bb.users.get
  rpc GetUser(GetUserRequest) returns (User) {
    option (google.api.http) = {get: "/v1/{name=users/*}"};
    option (google.api.method_signature) = "name";
    option (bytebase.v1.permission) = "bb.users.get";
    option (bytebase.v1.auth_method) = IAM;
  }

  // Get the users in batch.
  // Any authenticated user can batch get users.
  // Permissions required: bb.users.get
  rpc BatchGetUsers(BatchGetUsersRequest) returns (BatchGetUsersResponse) {
    option (google.api.http) = {get: "/v1/users:batchGet"};
    option (bytebase.v1.permission) = "bb.users.get";
    option (bytebase.v1.auth_method) = IAM;
  }

  // Get the current authenticated user.
  // Permissions required: None
  rpc GetCurrentUser(google.protobuf.Empty) returns (User) {
    option (google.api.http) = {get: "/v1/users/me"};
    option (bytebase.v1.allow_without_credential) = true;
    option (bytebase.v1.auth_method) = CUSTOM;
  }

  // List all users.
  // Any authenticated user can list users.
  // Permissions required: bb.users.list
  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse) {
    option (google.api.http) = {get: "/v1/users"};
    option (google.api.method_signature) = "parent";
    option (bytebase.v1.permission) = "bb.users.list";
    option (bytebase.v1.auth_method) = IAM;
  }

  // Creates a user. When Disallow Signup is enabled, requires bb.users.create permission; otherwise any user can sign up.
  // Permissions required: bb.users.create (only when Disallow Signup is enabled)
  rpc CreateUser(CreateUserRequest) returns (User) {
    option (google.api.http) = {
      post: "/v1/users"
      body: "user"
    };
    option (google.api.method_signature) = "user";
    option (bytebase.v1.allow_without_credential) = true;
    option (bytebase.v1.auth_method) = CUSTOM;
    option (bytebase.v1.audit) = true;
  }

  // Updates a user. Users can update their own profile, or users with bb.users.update permission can update any user.
  // Permissions required: bb.users.update (or self)
  rpc UpdateUser(UpdateUserRequest) returns (User) {
    option (google.api.http) = {
      patch: "/v1/{user.name=users/*}"
      body: "user"
    };
    option (google.api.method_signature) = "user,update_mask";
    option (bytebase.v1.auth_method) = CUSTOM;
    option (bytebase.v1.audit) = true;
  }

  // Deletes a user. Requires bb.users.delete permission with additional validation: the last remaining workspace admin cannot be deleted.
  // Permissions required: bb.users.delete
  rpc DeleteUser(DeleteUserRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {delete: "/v1/{name=users/*}"};
    option (google.api.method_signature) = "name";
    option (bytebase.v1.auth_method) = CUSTOM;
    option (bytebase.v1.audit) = true;
  }

  // Restores a deleted user.
  // Permissions required: bb.users.undelete
  rpc UndeleteUser(UndeleteUserRequest) returns (User) {
    option (google.api.http) = {
      post: "/v1/{name=users/*}:undelete"
      body: "*"
    };
    option (bytebase.v1.auth_method) = CUSTOM;
    option (bytebase.v1.audit) = true;
  }
}

message GetUserRequest {
  // The name of the user to retrieve.
  // Format: users/{user uid or user email}
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "bytebase.com/User"}
  ];
}

message BatchGetUsersRequest {
  // The user names to retrieve.
  // Format: users/{user uid or user email}
  repeated string names = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "bytebase.com/User"}
  ];
}

message BatchGetUsersResponse {
  // The users from the specified request.
  repeated User users = 1;
}

message ListUsersRequest {
  // The maximum number of users to return. The service may return fewer than
  // this value.
  // If unspecified, at most 10 users will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  int32 page_size = 1;

  // A page token, received from a previous `ListUsers` call.
  // Provide this to retrieve the subsequent page.
  //
  // When paginating, all other parameters provided to `ListUsers` must match
  // the call that provided the page token.
  string page_token = 2;

  // Show deleted users if specified.
  bool show_deleted = 3;

  // Filter is used to filter users returned in the list.
  // The syntax and semantics of CEL are documented at https://github.com/google/cel-spec
  //
  // Supported filter:
  // - name: the user name, support "==" and ".matches()" operator.
  // - email: the user email, support "==" and ".matches()" operator.
  // - user_type: the type, check UserType enum for values, support "==", "in [xx]", "!(in [xx])" operator.
  // - state: check State enum for values, support "==" operator.
  // - project: the project full name in "projects/{id}" format, support "==" operator.
  //
  // For example:
  // name == "ed"
  // name.matches("ed")
  // email == "ed@bytebase.com"
  // email.matches("ed")
  // user_type == "SERVICE_ACCOUNT"
  // user_type in ["SERVICE_ACCOUNT", "USER"]
  // !(user_type in ["SERVICE_ACCOUNT", "USER"])
  // state == "DELETED"
  // project == "projects/sample-project"
  // You can combine filter conditions like:
  // name.matches("ed") && project == "projects/sample-project"
  // (name == "ed" || email == "ed@bytebase.com") && project == "projects/sample-project"
  string filter = 4;
}

message ListUsersResponse {
  // The users from the specified request.
  repeated User users = 1;

  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

message CreateUserRequest {
  // The user to create.
  User user = 1 [(google.api.field_behavior) = REQUIRED];
}

message UpdateUserRequest {
  // The user to update.
  //
  // The user's `name` field is used to identify the user to update.
  // Format: users/{user}
  User user = 1 [(google.api.field_behavior) = REQUIRED];

  // The list of fields to update.
  google.protobuf.FieldMask update_mask = 2;

  // The otp_code is used to verify the user's identity by MFA.
  optional string otp_code = 3;

  // The regenerate_temp_mfa_secret flag means to regenerate temporary MFA secret for user.
  // This is used for MFA setup. The temporary MFA secret and recovery codes will be returned in the response.
  bool regenerate_temp_mfa_secret = 4;

  // The regenerate_recovery_codes flag means to regenerate recovery codes for user.
  bool regenerate_recovery_codes = 5;

  // If set to true, and the user is not found, a new user will be created.
  // In this situation, `update_mask` is ignored.
  bool allow_missing = 6;
}

message DeleteUserRequest {
  // The name of the user to delete.
  // Format: users/{user}
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "bytebase.com/User"}
  ];
}

message UndeleteUserRequest {
  // The name of the deleted user.
  // Format: users/{user}
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "bytebase.com/User"}
  ];
}

message User {
  option (google.api.resource) = {
    type: "bytebase.com/User"
    pattern: "users/{user}"
  };

  // The name of the user.
  // Format: users/{user}. {user} is a system-generated unique ID.
  string name = 1 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The lifecycle state of the user account.
  State state = 2;

  // The email address of the user, used for login and notifications.
  string email = 3;

  // The display title or full name of the user.
  string title = 4 [(buf.validate.field).string.max_len = 200];

  // The type of user account.
  UserType user_type = 5;

  // The password for authentication. Only used during user creation or password updates.
  string password = 7 [(google.api.field_behavior) = INPUT_ONLY];

  // The service key for service account authentication. Only used for service accounts.
  string service_key = 8 [(google.api.field_behavior) = INPUT_ONLY];

  // The mfa_enabled flag means if the user has enabled MFA.
  bool mfa_enabled = 9;

  // Temporary OTP secret used during MFA setup and regeneration.
  string temp_otp_secret = 10;

  // Temporary recovery codes used during MFA setup and regeneration.
  repeated string temp_recovery_codes = 11;

  // Timestamp when temp_otp_secret was created. Used by frontend to show countdown timer.
  google.protobuf.Timestamp temp_otp_secret_created_time = 15;

  // Should be a valid E.164 compliant phone number.
  // Could be empty.
  string phone = 12;

  message Profile {
    // The last time the user successfully logged in.
    google.protobuf.Timestamp last_login_time = 1;
    // The last time the user changed their password.
    google.protobuf.Timestamp last_change_password_time = 2;
    // source means where the user comes from. For now we support Entra ID SCIM sync, so the source could be Entra ID.
    string source = 3;
  }

  // User profile metadata.
  Profile profile = 13;

  // The groups for the user.
  // Format: groups/{email}
  repeated string groups = 14 [(google.api.field_behavior) = OUTPUT_ONLY];
}

enum UserType {
  // Unspecified user type.
  USER_TYPE_UNSPECIFIED = 0;
  // Regular human user account.
  USER = 1;
  // System-managed bot account for automated operations.
  SYSTEM_BOT = 2;
  // Service account for API integrations.
  SERVICE_ACCOUNT = 3;
}
