syntax = "proto3";

package bytebase.v1;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/timestamp.proto";
import "v1/annotation.proto";

option go_package = "generated-go/v1";

service SubscriptionService {
  rpc GetSubscription(GetSubscriptionRequest) returns (Subscription) {
    option (google.api.http) = {get: "/v1/subscription"};
    option (google.api.method_signature) = "";
    option (bytebase.v1.allow_without_credential) = true;
  }

  rpc GetFeatureMatrix(GetFeatureMatrixRequest) returns (FeatureMatrix) {
    option (google.api.http) = {get: "/v1/feature"};
    option (google.api.method_signature) = "";
    option (bytebase.v1.allow_without_credential) = true;
  }

  rpc UpdateSubscription(UpdateSubscriptionRequest) returns (Subscription) {
    option (google.api.http) = {
      patch: "/v1/subscription"
      body: "patch"
    };
    option (google.api.method_signature) = "patch";
    option (bytebase.v1.permission) = "bb.settings.set";
    option (bytebase.v1.auth_method) = IAM;
  }
}

message GetSubscriptionRequest {}

message GetFeatureMatrixRequest {}

message UpdateSubscriptionRequest {
  PatchSubscription patch = 1;
}

enum PlanType {
  PLAN_TYPE_UNSPECIFIED = 0;

  FREE = 1;

  TEAM = 2;

  ENTERPRISE = 3;
}

message PatchSubscription {
  string license = 1;
}

message Subscription {
  int32 seat_count = 1 [(google.api.field_behavior) = OUTPUT_ONLY];

  int32 instance_count = 2 [(google.api.field_behavior) = OUTPUT_ONLY];

  google.protobuf.Timestamp expires_time = 3 [(google.api.field_behavior) = OUTPUT_ONLY];

  google.protobuf.Timestamp started_time = 4 [(google.api.field_behavior) = OUTPUT_ONLY];

  PlanType plan = 5 [(google.api.field_behavior) = OUTPUT_ONLY];

  bool trialing = 6 [(google.api.field_behavior) = OUTPUT_ONLY];

  string org_id = 7 [(google.api.field_behavior) = OUTPUT_ONLY];

  string org_name = 8 [(google.api.field_behavior) = OUTPUT_ONLY];
}

message FeatureMatrix {
  repeated Feature features = 1;
}

message Feature {
  // Name is the feature name.
  string name = 1;

  // Matrix is the feature matrix for different plan. The key is the plan enum in string value.
  map<string, bool> matrix = 2;
}

// PlanConfig represents the configuration for all plans loaded from plan.yaml
message PlanConfig {
  repeated PlanLimitConfig plans = 1;
}

// PlanLimitConfig represents a single plan's configuration
message PlanLimitConfig {
  // Feature represents the available features in Bytebase
  enum Feature {
    FEATURE_UNSPECIFIED = 0;

    // Database Change Management
    DATABASE_CHANGE = 1;
    GIT_BASED_SCHEMA_VERSION_CONTROL = 2;
    DECLARATIVE_SCHEMA_MIGRATION = 3;
    COMPARE_AND_SYNC_SCHEMA = 4;
    ONLINE_SCHEMA_CHANGE = 5;
    PRE_DEPLOYMENT_SQL_REVIEW = 6;
    AUTOMATIC_BACKUP_BEFORE_DATA_CHANGES = 7;
    ONE_CLICK_DATA_ROLLBACK = 8;
    MULTI_DATABASE_BATCH_CHANGES = 9;
    PROGRESSIVE_ENVIRONMENT_DEPLOYMENT = 10;
    SCHEDULED_ROLLOUT_TIME = 11;
    DATABASE_CHANGELOG = 12;
    SCHEMA_DRIFT_DETECTION = 13;
    CHANGELIST = 14;
    SCHEMA_TEMPLATE = 15;
    ROLLOUT_POLICY = 16;

    // SQL Editor & Development
    WEB_BASED_SQL_EDITOR = 17;
    SQL_EDITOR_ADMIN_MODE = 18;
    NATURAL_LANGUAGE_TO_SQL = 19;
    AI_QUERY_EXPLANATION = 20;
    AI_QUERY_SUGGESTIONS = 21;
    AUTO_COMPLETE = 22;
    SCHEMA_DIAGRAM = 23;
    SCHEMA_EDITOR = 24;
    DATA_EXPORT = 25;
    QUERY_HISTORY = 26;
    SAVED_AND_SHARED_SQL_SCRIPTS = 27;
    SQL_EDITOR_DDL_DML_RESTRICTION = 28;
    BATCH_QUERY = 29;
    INSTANCE_READ_ONLY_CONNECTION = 30;
    RESTRICT_COPYING_DATA = 31;

    // Security & Compliance
    IAM = 32;
    INSTANCE_SSL_CONNECTION = 33;
    INSTANCE_CONNECTION_OVER_SSH_TUNNEL = 34;
    INSTANCE_CONNECTION_IAM_AUTHENTICATION = 35;
    GOOGLE_AND_GITHUB_SSO = 36;
    USER_GROUPS = 37;
    DISALLOW_SELF_SERVICE_SIGNUP = 38;
    DATABASE_SECRET_VARIABLES = 39;
    QUERY_DATASOURCE_RESTRICTION = 40;
    CUSTOM_INSTANCE_SYNC_TIME = 41;
    CUSTOM_INSTANCE_CONNECTION_LIMIT = 42;
    RISK_ASSESSMENT = 43;
    APPROVAL_WORKFLOW = 44;
    AUDIT_LOG = 45;
    ENTERPRISE_SSO = 46;
    TWO_FA = 47;
    PASSWORD_RESTRICTIONS = 48;
    CUSTOM_ROLES = 49;
    REQUEST_ROLE_WORKFLOW = 50;
    DATA_MASKING = 51;
    DATA_CLASSIFICATION = 52;
    SCIM = 53;
    DIRECTORY_SYNC_ENTRA_ID = 54;
    DIRECTORY_SYNC_OKTA = 55;
    SIGN_IN_FREQUENCY_CONTROL = 56;
    EXTERNAL_SECRET_MANAGER = 57;
    USER_EMAIL_DOMAIN_RESTRICTION = 58;

    // Administration & Support
    ENVIRONMENT_MANAGEMENT = 59;
    IM_NOTIFICATIONS = 60;
    TERRAFORM_PROVIDER = 61;
    DATABASE_GROUPS = 62;
    ENVIRONMENT_TIERS = 63;
    DASHBOARD_ANNOUNCEMENT = 64;
    API_INTEGRATION_GUIDANCE = 65;
    CUSTOM_LOGO = 66;
    WATERMARK = 67;
    ROADMAP_PRIORITIZATION = 68;
    CUSTOM_MSA = 69;
    COMMUNITY_SUPPORT = 70;
    EMAIL_SUPPORT = 71;
    DEDICATED_SUPPORT_WITH_SLA = 72;
  }

  PlanType type = 1;
  int32 maximum_instance_count = 2;
  int32 maximum_seat_count = 3;
  repeated Feature features = 4;
}
