syntax = "proto3";

package bytebase.v1;

option go_package = "github.com/bytebase/bytebase/backend/generated-go/v1";

// Resource lifecycle state.
enum State {
  STATE_UNSPECIFIED = 0;
  // Resource is active and operational.
  ACTIVE = 1;
  // Resource is soft-deleted but may be recoverable.
  DELETED = 2;
}

// Database engine type.
enum Engine {
  // Unspecified database engine.
  ENGINE_UNSPECIFIED = 0;
  // ClickHouse columnar database.
  CLICKHOUSE = 1;
  // MySQL relational database.
  MYSQL = 2;
  // PostgreSQL relational database.
  POSTGRES = 3;
  // Snowflake cloud data warehouse.
  SNOWFLAKE = 4;
  // SQLite embedded database.
  SQLITE = 5;
  // TiDB distributed SQL database.
  TIDB = 6;
  // MongoDB document database.
  MONGODB = 7;
  // Redis key-value store.
  REDIS = 8;
  // Oracle relational database.
  ORACLE = 9;
  // Google Cloud Spanner distributed database.
  SPANNER = 10;
  // Microsoft SQL Server relational database.
  MSSQL = 11;
  // Amazon Redshift data warehouse.
  REDSHIFT = 12;
  // MariaDB relational database.
  MARIADB = 13;
  // OceanBase distributed database.
  OCEANBASE = 14;
  // StarRocks analytics database.
  STARROCKS = 18;
  // Apache Doris analytics database.
  DORIS = 19;
  // Apache Hive data warehouse.
  HIVE = 20;
  // Elasticsearch search engine.
  ELASTICSEARCH = 21;
  // Google BigQuery data warehouse.
  BIGQUERY = 22;
  // Amazon DynamoDB NoSQL database.
  DYNAMODB = 23;
  // Databricks lakehouse platform.
  DATABRICKS = 24;
  // CockroachDB distributed SQL database.
  COCKROACHDB = 25;
  // Azure Cosmos DB multi-model database.
  COSMOSDB = 26;
  // Trino distributed SQL query engine.
  TRINO = 27;
  // Apache Cassandra NoSQL database.
  CASSANDRA = 28;
}

// Version control system type.
enum VCSType {
  // Unspecified VCS type.
  VCS_TYPE_UNSPECIFIED = 0;
  // GitHub version control platform.
  GITHUB = 1;
  // GitLab version control platform.
  GITLAB = 2;
  // Bitbucket version control platform.
  BITBUCKET = 3;
  // Azure DevOps version control platform.
  AZURE_DEVOPS = 4;
}

// Data export format.
enum ExportFormat {
  // Unspecified export format.
  FORMAT_UNSPECIFIED = 0;
  // Comma-separated values format.
  CSV = 1;
  // JavaScript Object Notation format.
  JSON = 2;
  // SQL statements format.
  SQL = 3;
  // Microsoft Excel spreadsheet format.
  XLSX = 4;
}

// Position in a text expressed as one-based line and one-based column.
// We use 1-based numbering to match the majority of industry standards:
// - Monaco Editor uses 1-based (https://microsoft.github.io/monaco-editor/typedoc/interfaces/IPosition.html)
// - GitHub Actions uses 1-based (https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-error-message)
// - Most text editors display 1-based positions to users
// Note: LSP uses 0-based (https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#position),
// but we follow the canonical user-facing standards.
//
// Handling unknown positions:
// - If the entire position is unknown, leave this field as nil/undefined
// - If only line is known, set line and leave column as 0 (e.g., line=5, column=0)
// - If only column is known (rare), set column and leave line as 0
// Frontends should check for nil/undefined/zero values and handle them appropriately.
message Position {
  // Line position in a text (one-based).
  // First line of the text is line 1.
  // A value of 0 indicates the line information is unknown.
  int32 line = 1;
  // Column position in a text (one-based).
  // Column is measured in Unicode code points (characters/runes), not bytes or grapheme clusters.
  // First character of the line is column 1.
  // A value of 0 indicates the column information is unknown.
  //
  // Examples:
  // - "SELECT * FROM t" - column 8 is '*'
  // - "SELECT ä½ å¥½ FROM t" - column 8 is 'ä½ ' (even though it's at byte offset 7)
  // - "SELECT ðŸ˜€ FROM t" - column 8 is 'ðŸ˜€' (even though it's 4 bytes in UTF-8)
  int32 column = 2;
}

// Range of positions in text or sequence.
message Range {
  // Start position (inclusive).
  int32 start = 1;
  // End position (exclusive).
  int32 end = 2;
}

// DatabaseChangeType is the database change type.
enum DatabaseChangeType {
  DATABASE_CHANGE_TYPE_UNSPECIFIED = 0;
  // Used for imperative schema migration including CREATE DATABASE.
  MIGRATE = 2;
  // Used for state-based declarative schema migration including CREATE DATABASE.
  SDL = 3;
}

// MigrationType is the type for imperative schema migration.
enum MigrationType {
  MIGRATION_TYPE_UNSPECIFIED = 0;
  // Used for DDL changes.
  DDL = 1;
  // Used for DML changes.
  DML = 2;
  // Used for DDL changes using gh-ost.
  GHOST = 3;
}

// RiskLevel is the risk level.
enum RiskLevel {
  // Unspecified risk level.
  RISK_LEVEL_UNSPECIFIED = 0;
  // Low risk operation.
  LOW = 1;
  // Moderate risk operation.
  MODERATE = 2;
  // High risk operation.
  HIGH = 3;
}
