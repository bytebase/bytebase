syntax = "proto3";

package bytebase.v1;

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/protobuf/any.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "google/rpc/status.proto";
import "v1/annotation.proto";
import "v1/common.proto";
import "v1/iam_policy.proto";

option go_package = "github.com/bytebase/bytebase/backend/generated-go/v1";

// AuditLogService manages audit logs for system activities and API calls.
service AuditLogService {
  // Searches audit logs with optional filtering and pagination.
  // Permissions required: bb.auditLogs.search
  rpc SearchAuditLogs(SearchAuditLogsRequest) returns (SearchAuditLogsResponse) {
    option (google.api.http) = {
      post: "/v1/{parent=projects/*}/auditLogs:search"
      body: "*"
      additional_bindings: {
        post: "/v1/auditLogs:search"
        body: "*"
      }
    };
    option (bytebase.v1.permission) = "bb.auditLogs.search";
    option (bytebase.v1.auth_method) = IAM;
  }

  // Exports audit logs in a specified format for external analysis.
  // Permissions required: bb.auditLogs.export
  rpc ExportAuditLogs(ExportAuditLogsRequest) returns (ExportAuditLogsResponse) {
    option (google.api.http) = {
      post: "/v1/{parent=projects/*}/auditLogs:export"
      body: "*"
      additional_bindings: {
        post: "/v1/auditLogs:export"
        body: "*"
      }
    };
    option (bytebase.v1.permission) = "bb.auditLogs.export";
    option (bytebase.v1.auth_method) = IAM;
  }
}

// Request message for searching audit logs.
message SearchAuditLogsRequest {
  string parent = 5 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {child_type: "bytebase.com/AuditLog"}
  ];

  // The filter of the log. It should be a valid CEL expression.
  // The syntax and semantics of CEL are documented at https://github.com/google/cel-spec
  //
  // Supported filter:
  // - method: the API name, can be found in the docs, should start with "/bytebase.v1." prefix. For example "/bytebase.v1.UserService/CreateUser". Support "==" operator.
  // - severity: support "==" operator, check Severity enum in AuditLog message for values.
  // - user: the actor, should in "users/{email}" format, support "==" operator.
  // - create_time: support ">=" and "<=" operator.
  //
  // For example:
  //  - filter = "method == '/bytebase.v1.SQLService/Query'"
  //  - filter = "method == '/bytebase.v1.SQLService/Query' && severity == 'ERROR'"
  //  - filter = "method == '/bytebase.v1.SQLService/Query' && severity == 'ERROR' && user == 'users/bb@bytebase.com'"
  //  - filter = "method == '/bytebase.v1.SQLService/Query' && severity == 'ERROR' && create_time <= '2021-01-01T00:00:00Z' && create_time >= '2020-01-01T00:00:00Z'"
  string filter = 1;

  // The order by of the log.
  // Only support order by create_time.
  // For example:
  //  - order_by = "create_time asc"
  //  - order_by = "create_time desc"
  string order_by = 2;

  // The maximum number of logs to return.
  // The service may return fewer than this value.
  // If unspecified, at most 10 log entries will be returned.
  // The maximum value is 5000; values above 5000 will be coerced to 5000.
  int32 page_size = 3;

  // A page token, received from a previous `SearchLogs` call.
  // Provide this to retrieve the subsequent page.
  string page_token = 4;
}

// Response message for searching audit logs.
message SearchAuditLogsResponse {
  repeated AuditLog audit_logs = 1;

  // A token to retrieve next page of log entities.
  // Pass this value in the page_token field in the subsequent call
  // to retrieve the next page of log entities.
  string next_page_token = 2;
}

// Request message for exporting audit logs.
message ExportAuditLogsRequest {
  string parent = 4 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {child_type: "bytebase.com/AuditLog"}
  ];

  // The filter of the log. It should be a valid CEL expression.
  // Check the filter field in the SearchAuditLogsRequest message.
  string filter = 1;

  // The order by of the log.
  // Only support order by create_time.
  // For example:
  //  - order_by = "create_time asc"
  //  - order_by = "create_time desc"
  string order_by = 2;

  // The export format.
  ExportFormat format = 3;

  // The maximum number of logs to return.
  // The service may return fewer than this value.
  // If unspecified, at most 10 log entries will be returned.
  // The maximum value is 5000; values above 5000 will be coerced to 5000.
  int32 page_size = 5;

  // A page token, received from a previous `ExportAuditLogs` call.
  // Provide this to retrieve the subsequent page.
  string page_token = 6;
}

// Response message for exporting audit logs.
message ExportAuditLogsResponse {
  // The exported audit log content in the requested format.
  bytes content = 1;

  // A token to retrieve next page of log entities.
  // Pass this value in the page_token field in the subsequent call
  // to retrieve the next page of log entities.
  string next_page_token = 2;
}

// Audit log entry recording system activity or API call.
message AuditLog {
  // The name of the log.
  // Formats:
  // - projects/{project}/auditLogs/{uid}
  // - workspaces/{workspace}/auditLogs/{uid}
  string name = 1 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The timestamp when the audit log was created.
  google.protobuf.Timestamp create_time = 2 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The user who performed the action.
  // Format: users/{email}
  string user = 3;

  // The method or action being audited.
  // For example: /bytebase.v1.SQLService/Query or bb.project.repository.push
  string method = 4;

  // The severity level of this audit log entry.
  Severity severity = 5;

  // The resource associated with this audit log.
  string resource = 6;

  // The request payload in JSON format.
  string request = 7;

  // The response payload in JSON format.
  // Some fields may be omitted if they are too large or contain sensitive information.
  string response = 8;

  // The status of the operation.
  google.rpc.Status status = 9;

  // The duration of the operation.
  google.protobuf.Duration latency = 10;

  // Service-specific metadata about the request, response, and activities.
  google.protobuf.Any service_data = 11;

  // Metadata about the request context.
  RequestMetadata request_metadata = 12;

  // Severity level for audit log entries.
  enum Severity {
    // Default severity level.
    DEFAULT = 0;
    // Debug-level information.
    DEBUG = 1;
    // Informational messages.
    INFO = 2;
    // Notable events.
    NOTICE = 3;
    // Warning conditions.
    WARNING = 4;
    // Error conditions.
    ERROR = 5;
    // Critical conditions.
    CRITICAL = 6;
    // Action must be taken immediately.
    ALERT = 7;
    // System is unusable.
    EMERGENCY = 8;
  }
}

// Additional audit data specific to certain operations.
message AuditData {
  // Changes to IAM policies.
  PolicyDelta policy_delta = 1;
}

// Metadata about the incoming request.
message RequestMetadata {
  // The IP address of the request originator.
  string caller_ip = 1;

  // The user agent string provided by the caller.
  // This is supplied by the client and is not authenticated.
  string caller_supplied_user_agent = 2;
}
