syntax = "proto3";

package bytebase.v1;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";

option go_package = "generated-go/v1";

service ActuatorService {
  rpc GetActuatorInfo(GetActuatorInfoRequest) returns (ActuatorInfo) {
    option (google.api.http) = {get: "/v1/actuator/info"};
    option (google.api.method_signature) = "";
  }

  rpc UpdateActuatorInfo(UpdateActuatorInfoRequest) returns (ActuatorInfo) {
    option (google.api.http) = {
      patch: "/v1/actuator/info"
      body: "actuator"
    };
    option (google.api.method_signature) = "actuator,update_mask";
  }

  rpc DeleteCache(DeleteCacheRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {delete: "/v1/actuator/cache"};
  }

  rpc ListDebugLog(ListDebugLogRequest) returns (ListDebugLogResponse) {
    option (google.api.http) = {get: "/v1/actuator/debug"};
    option (google.api.method_signature) = "";
  }
}

message GetActuatorInfoRequest {}

message UpdateActuatorInfoRequest {
  // The actuator to update.
  ActuatorInfo actuator = 1 [(google.api.field_behavior) = REQUIRED];

  // The list of fields to update.
  google.protobuf.FieldMask update_mask = 2 [(google.api.field_behavior) = REQUIRED];
}

message ListDebugLogRequest {
  // The maximum number of logs to return. The service may return fewer than
  // this value.
  // If unspecified, at most 50 logs will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  int32 page_size = 1;

  // A page token, received from a previous `ListDebugLog` call.
  // Provide this to retrieve the subsequent page.
  //
  // When paginating, all other parameters provided to `ListDebugLog` must match
  // the call that provided the page token.
  string page_token = 2;
}

message ListDebugLogResponse {
  // The logs from the specified request.
  repeated DebugLog logs = 1;

  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

message DebugLog {
  google.protobuf.Timestamp record_time = 1;

  string request_path = 2;

  string role = 3;

  string error = 4;

  string stack_trace = 5;
}

message DeleteCacheRequest {}

// ServerInfo is the API message for server info.
// Actuator concept is similar to the Spring Boot Actuator.
message ActuatorInfo {
  // version is the bytebase's server version
  string version = 1 [(google.api.field_behavior) = OUTPUT_ONLY];

  // git_commit is the git commit hash of the build
  string git_commit = 2 [(google.api.field_behavior) = OUTPUT_ONLY];

  // readonly flag means if the Bytebase is running in readonly mode.
  bool readonly = 3 [(google.api.field_behavior) = OUTPUT_ONLY];

  // saas flag means if the Bytebase is running in SaaS mode, some features are not allowed to edit by users.
  bool saas = 4 [(google.api.field_behavior) = OUTPUT_ONLY];

  // demo_name specifies the demo name, empty string means no demo.
  string demo_name = 5 [(google.api.field_behavior) = OUTPUT_ONLY];

  // host is the Bytebase instance host.
  string host = 6 [(google.api.field_behavior) = OUTPUT_ONLY];

  // port is the Bytebase instance port.
  string port = 7 [(google.api.field_behavior) = OUTPUT_ONLY];

  // external_url is the URL where user or webhook callback visits Bytebase.
  string external_url = 8 [(google.api.field_behavior) = OUTPUT_ONLY];

  // need_admin_setup flag means the Bytebase instance doesn't have any end users.
  bool need_admin_setup = 9 [(google.api.field_behavior) = OUTPUT_ONLY];

  // disallow_signup is the flag to disable self-service signup.
  bool disallow_signup = 10 [(google.api.field_behavior) = OUTPUT_ONLY];

  // last_active_time is the service last active time in UTC Time Format, any API calls will refresh this value.
  google.protobuf.Timestamp last_active_time = 11 [(google.api.field_behavior) = OUTPUT_ONLY];

  // require_2fa is the flag to require 2FA for all users.
  bool require_2fa = 12 [(google.api.field_behavior) = OUTPUT_ONLY];

  // workspace_id is the identifier for the workspace.
  string workspace_id = 13 [(google.api.field_behavior) = OUTPUT_ONLY];

  // gitops_webhook_url is the webhook URL for GitOps.
  string gitops_webhook_url = 14 [(google.api.field_behavior) = OUTPUT_ONLY];

  // debug flag means if the debug mode is enabled.
  bool debug = 15;

  // lsp is the enablement of lsp in SQL Editor.
  bool lsp = 16;

  // lsp is the enablement of data backup prior to data update.
  bool pre_update_backup = 17;
}
