syntax = "proto3";

package bytebase.v1;

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/struct.proto";
import "v1/common.proto";

option go_package = "generated-go/v1";

service SQLService {
  rpc Pretty(PrettyRequest) returns (PrettyResponse) {
    option (google.api.http) = {
      post: "/v1/sql/pretty"
      body: "*"
    };
  }
  rpc Query(QueryRequest) returns (QueryResponse) {
    option (google.api.http) = {
      post: "/v1/{name=instances/*}:query"
      body: "*"
    };
  }
  rpc Export(ExportRequest) returns (ExportResponse) {
    option (google.api.http) = {
      post: "/v1/{name=instances/*}:export"
      body: "*"
    };
  }
  rpc AdminExecute(stream AdminExecuteRequest) returns (stream AdminExecuteResponse) {
    option (google.api.http) = {get: "/v1:adminExecute"};
  }
}

message AdminExecuteRequest {
  // The name is the instance name to execute the query against.
  // Format: instances/{instance}
  string name = 1;

  // The connection database name to execute the query against.
  // For PostgreSQL, it's required.
  // For other database engines, it's optional. Use empty string to execute against without specifying a database.
  string connection_database = 2;

  // The SQL statement to execute.
  string statement = 3;

  // The maximum number of rows to return.
  int32 limit = 4;

  // The timeout for the request.
  google.protobuf.Duration timeout = 5;
}

message AdminExecuteResponse {
  // The query results.
  repeated QueryResult results = 1;
}

message ExportRequest {
  enum Format {
    FORMAT_UNSPECIFIED = 0;
    CSV = 1;
    JSON = 2;
    SQL = 3;
    XLSX = 4;
  }
  // The name is the instance name to execute the query against.
  // Format: instances/{instance}
  string name = 1 [(google.api.field_behavior) = REQUIRED];

  // The connection database name to execute the query against.
  // For PostgreSQL, it's required.
  // For other database engines, it's optional. Use empty string to execute against without specifying a database.
  string connection_database = 2;

  // The SQL statement to execute.
  string statement = 3;

  // The maximum number of rows to return.
  int32 limit = 4;

  // The export format.
  Format format = 5;

  // The admin is used for workspace owner and DBA for exporting data from SQL Editor Admin mode.
  // The exported data is not masked.
  bool admin = 6;
}

message ExportResponse {
  // The export file content.
  bytes content = 1;
}

message QueryRequest {
  // The name is the instance name to execute the query against.
  // Format: instances/{instance}
  string name = 1 [(google.api.field_behavior) = REQUIRED];

  // The connection database name to execute the query against.
  // For PostgreSQL, it's required.
  // For other database engines, it's optional. Use empty string to execute against without specifying a database.
  string connection_database = 2;

  // The SQL statement to execute.
  string statement = 3;

  // The maximum number of rows to return.
  int32 limit = 4;

  // The timeout for the request.
  google.protobuf.Duration timeout = 5;
}

message QueryResponse {
  // The query results.
  repeated QueryResult results = 1;

  // The query advices.
  repeated Advice advices = 2;
}

message QueryResult {
  // Column names of the query result.
  repeated string column_names = 1;

  // Column types of the query result.
  // The types come from the Golang SQL driver.
  repeated string column_type_names = 2;

  // Rows of the query result.
  repeated QueryRow rows = 3;

  // Columns are masked or not.
  repeated bool masked = 4;

  // Columns are sensitive or not.
  repeated bool sensitive = 5;

  // The error message if the query failed.
  string error = 6;

  // The time it takes to execute the query.
  google.protobuf.Duration latency = 7;

  // The query statement for the result.
  string statement = 8;
}

message QueryRow {
  // Row values of the query result.
  repeated RowValue values = 1;
}

message RowValue {
  oneof kind {
    google.protobuf.NullValue null_value = 1;
    bool bool_value = 2;
    bytes bytes_value = 3;
    double double_value = 4;
    float float_value = 5;
    int32 int32_value = 6;
    int64 int64_value = 7;
    string string_value = 8;
    uint32 uint32_value = 9;
    uint64 uint64_value = 10;
    // value_value is used for Spanner and TUPLE ARRAY MAP in Clickhouse only.
    google.protobuf.Value value_value = 11;
  }
}

message Advice {
  enum Status {
    // Unspecified.
    STATUS_UNSPECIFIED = 0;
    SUCCESS = 1;
    WARNING = 2;
    ERROR = 3;
  }
  // The advice status.
  Status status = 1;

  // The advice code.
  int32 code = 2;

  // The advice title.
  string title = 3;

  // The advice content.
  string content = 4;

  // The advice line number in the SQL statement.
  int32 line = 5;

  // The advice detail.
  string detail = 6;
}

message PrettyRequest {
  Engine engine = 1;

  // The SDL format SQL schema information that was dumped from a database engine.
  // This information will be sorted to match the order of statements in the userSchema.
  string current_schema = 2;

  // The expected SDL schema. This schema will be checked for correctness and normalized.
  string expected_schema = 3;
}

message PrettyResponse {
  // The pretty-formatted version of current schema.
  string current_schema = 1;

  // The expected SDL schema after normalizing.
  string expected_schema = 2;
}
