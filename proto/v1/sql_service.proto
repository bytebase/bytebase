syntax = "proto3";

package bytebase.v1;

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "v1/common.proto";
import "v1/database_service.proto";

option go_package = "generated-go/v1";

service SQLService {
  rpc Query(QueryRequest) returns (QueryResponse) {
    option (google.api.http) = {
      post: "/v1/{name=instances/*/databases/*}:query"
      body: "*"

      additional_bindings: {
        post: "/v1/{name=instances/*}:query"
        body: "*"
      }
    };
  }

  rpc Execute(ExecuteRequest) returns (ExecuteResponse) {
    option (google.api.http) = {
      post: "/v1/{name=instances/*/databases/*}:execute"
      body: "*"

      additional_bindings: {
        post: "/v1/{name=instances/*}:execute"
        body: "*"
      }
    };
  }

  rpc AdminExecute(stream AdminExecuteRequest) returns (stream AdminExecuteResponse) {
    option (google.api.http) = {get: "/v1:adminExecute"};
  }

  rpc SearchQueryHistories(SearchQueryHistoriesRequest) returns (SearchQueryHistoriesResponse) {
    option (google.api.http) = {get: "/v1/queryHistories:search"};
  }

  rpc Export(ExportRequest) returns (ExportResponse) {
    option (google.api.http) = {
      post: "/v1/{name=instances/*/databases/*}:export"
      body: "*"

      additional_bindings: {
        post: "/v1/{name=instances/*}:export"
        body: "*"
      }
      additional_bindings: {
        post: "/v1/{name=projects/*/issues/*}:export"
        body: "*"
      }
    };
  }

  rpc DifferPreview(DifferPreviewRequest) returns (DifferPreviewResponse) {
    option (google.api.http) = {
      post: "/v1/sql/differPreview"
      body: "*"
    };
  }

  rpc Check(CheckRequest) returns (CheckResponse) {
    option (google.api.http) = {
      post: "/v1/sql/check"
      body: "*"
    };
  }

  rpc ParseMyBatisMapper(ParseMyBatisMapperRequest) returns (ParseMyBatisMapperResponse) {
    option (google.api.http) = {
      post: "/v1/sql/parseMyBatisMapper"
      body: "*"
    };
  }

  rpc Pretty(PrettyRequest) returns (PrettyResponse) {
    option (google.api.http) = {
      post: "/v1/sql/pretty"
      body: "*"
    };
  }

  rpc StringifyMetadata(StringifyMetadataRequest) returns (StringifyMetadataResponse) {
    option (google.api.http) = {
      post: "/v1/schemaDesign:stringifyMetadata"
      body: "*"
    };
  }

  rpc GenerateRestoreSQL(GenerateRestoreSQLRequest) returns (GenerateRestoreSQLResponse) {
    option (google.api.http) = {
      post: "/v1/{name=instances/*/databases/*}:generateRestoreSQL"
      body: "*"
    };
  }
}

message ExecuteRequest {
  // The name is the instance name to execute the query against.
  // Format: instances/{instance}/databases/{databaseName}
  string name = 1;

  // The SQL statement to execute.
  string statement = 2;

  // The maximum number of rows to return.
  int32 limit = 3;

  // The timeout for the request.
  google.protobuf.Duration timeout = 4;
}

message ExecuteResponse {
  // The execute results.
  repeated QueryResult results = 1;

  // The execute advices.
  repeated Advice advices = 2;
}

message AdminExecuteRequest {
  // The name is the instance name to execute the query against.
  // Format: instances/{instance}/databases/{databaseName}
  string name = 1;

  string connection_database = 2 [deprecated = true];

  // The SQL statement to execute.
  string statement = 3;

  // The maximum number of rows to return.
  int32 limit = 4;

  // The timeout for the request.
  google.protobuf.Duration timeout = 5;
}

message AdminExecuteResponse {
  // The query results.
  repeated QueryResult results = 1;
}

message QueryRequest {
  // The name is the instance name to execute the query against.
  // Format: instances/{instance}/databases/{databaseName}
  string name = 1 [(google.api.field_behavior) = REQUIRED];

  string connection_database = 2 [deprecated = true];

  // The SQL statement to execute.
  string statement = 3;

  // The maximum number of rows to return.
  int32 limit = 4;

  // The timeout for the request.
  optional google.protobuf.Duration timeout = 5;

  // The id of data source.
  // It is used for querying admin data source even if the instance has read-only data sources.
  // Or it can be used to query a specific read-only data source.
  string data_source_id = 6;

  // Explain the statement.
  bool explain = 7;
}

message QueryResponse {
  // The query results.
  repeated QueryResult results = 1;

  // The query advices.
  repeated Advice advices = 2;

  // The query is allowed to be exported or not.
  bool allow_export = 3;
}

message QueryResult {
  // Column names of the query result.
  repeated string column_names = 1;

  // Column types of the query result.
  // The types come from the Golang SQL driver.
  repeated string column_type_names = 2;

  // Rows of the query result.
  repeated QueryRow rows = 3;

  // Columns are masked or not.
  repeated bool masked = 4;

  // Columns are sensitive or not.
  repeated bool sensitive = 5;

  // The error message if the query failed.
  string error = 6;

  // The time it takes to execute the query.
  google.protobuf.Duration latency = 7;

  // The query statement for the result.
  string statement = 8;
}

message QueryRow {
  // Row values of the query result.
  repeated RowValue values = 1;
}

message RowValue {
  oneof kind {
    google.protobuf.NullValue null_value = 1;
    bool bool_value = 2;
    bytes bytes_value = 3;
    double double_value = 4;
    float float_value = 5;
    int32 int32_value = 6;
    int64 int64_value = 7;
    string string_value = 8;
    uint32 uint32_value = 9;
    uint64 uint64_value = 10;
    // value_value is used for Spanner and TUPLE ARRAY MAP in Clickhouse only.
    google.protobuf.Value value_value = 11;
  }
}

message Advice {
  enum Status {
    // Unspecified.
    STATUS_UNSPECIFIED = 0;
    SUCCESS = 1;
    WARNING = 2;
    ERROR = 3;
  }
  // The advice status.
  Status status = 1;

  // The advice code.
  int32 code = 2;

  // The advice title.
  string title = 3;

  // The advice content.
  string content = 4;

  // The advice line number in the SQL statement.
  int32 line = 5;

  // The advice column number in the SQL statement.
  int32 column = 6;

  // The advice detail.
  string detail = 7;
}

message ExportRequest {
  // The name is the instance name to execute the query against.
  // Format: instances/{instance}/databases/{databaseName}
  // Format: projects/{project}/issues/{issue} for data export issue.
  string name = 1 [(google.api.field_behavior) = REQUIRED];

  string connection_database = 2 [deprecated = true];

  // The SQL statement to execute.
  string statement = 3;

  // The maximum number of rows to return.
  int32 limit = 4;

  // The export format.
  ExportFormat format = 5;

  // The admin is used for workspace owner and DBA for exporting data from SQL Editor Admin mode.
  // The exported data is not masked.
  bool admin = 6;

  // The zip password provide by users.
  string password = 7;
}

message ExportResponse {
  // The export file content.
  bytes content = 1;
}

message DifferPreviewRequest {
  Engine engine = 1;

  string old_schema = 2;

  DatabaseMetadata new_metadata = 3;
}

message DifferPreviewResponse {
  string schema = 1;
}

message PrettyRequest {
  Engine engine = 1;

  // The SDL format SQL schema information that was dumped from a database engine.
  // This information will be sorted to match the order of statements in the userSchema.
  string current_schema = 2;

  // The expected SDL schema. This schema will be checked for correctness and normalized.
  string expected_schema = 3;
}

message PrettyResponse {
  // The pretty-formatted version of current schema.
  string current_schema = 1;

  // The expected SDL schema after normalizing.
  string expected_schema = 2;
}

message CheckRequest {
  string statement = 1;

  // The database name to check against.
  // Format: instances/{instance}/databases/{databaseName}
  string database = 2 [(google.api.field_behavior) = REQUIRED];

  // The database metadata to check against. It can be used to check against an uncommitted metadata.
  // If not provided, the database metadata will be fetched from the database.
  DatabaseMetadata metadata = 3 [(google.api.field_behavior) = OPTIONAL];

  enum ChangeType {
    CHANGE_TYPE_UNSPECIFIED = 0;
    DDL = 1;
    DDL_GHOST = 2;
    DML = 3;
  }
  ChangeType change_type = 4;
}

message CheckResponse {
  repeated Advice advices = 1;
}

message ParseMyBatisMapperRequest {
  bytes content = 1;
}

message ParseMyBatisMapperResponse {
  repeated string statements = 1;
}

message StringifyMetadataRequest {
  DatabaseMetadata metadata = 1 [(google.api.field_behavior) = REQUIRED];
  // The database engine of the schema string.
  Engine engine = 2;
}

message StringifyMetadataResponse {
  string schema = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
}

message SearchQueryHistoriesRequest {
  // Not used. The maximum number of histories to return.
  // The service may return fewer than this value.
  // If unspecified, at most 100 history entries will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  int32 page_size = 1;

  // Not used. A page token, received from a previous `ListQueryHistory` call.
  // Provide this to retrieve the subsequent page.
  string page_token = 2;

  // filter is the filter to apply on the search query history,
  // follow the [ebnf](https://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_form) syntax.
  // Support filter by:
  // - database, for example:
  //    database = "instances/{instance}/databases/{database}"
  // - instance, for example:
  //    instance = "instance/{instance}"
  // - type, for example:
  //    type = "QUERY"
  string filter = 3;
}

message SearchQueryHistoriesResponse {
  // The list of history.
  repeated QueryHistory query_histories = 1 [(google.api.field_behavior) = OUTPUT_ONLY];

  // A token to retrieve next page of history.
  // Pass this value in the page_token field in the subsequent call to `ListQueryHistory` method
  // to retrieve the next page of history.
  string next_page_token = 2;
}

message QueryHistory {
  // The name for the query history.
  // Format: queryHistories/{uid}
  string name = 1 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The database name to execute the query.
  // Format: instances/{instance}/databases/{databaseName}
  string database = 2 [(google.api.field_behavior) = OUTPUT_ONLY];

  string creator = 3 [(google.api.field_behavior) = OUTPUT_ONLY];

  google.protobuf.Timestamp create_time = 4 [(google.api.field_behavior) = OUTPUT_ONLY];

  string statement = 5 [(google.api.field_behavior) = OUTPUT_ONLY];

  optional string error = 6 [(google.api.field_behavior) = OUTPUT_ONLY];

  google.protobuf.Duration duration = 7 [(google.api.field_behavior) = OUTPUT_ONLY];

  enum Type {
    TYPE_UNSPECIFIED = 0;
    QUERY = 1;
    EXPORT = 2;
  }

  Type type = 8;
}

message GenerateRestoreSQLRequest {
  // The name is the instance name to execute the query against.
  // Format: instances/{instance}/databases/{databaseName}
  string name = 1 [(google.api.field_behavior) = REQUIRED];

  // The original SQL statement.
  string statement = 2;

  // The data source to restore from.
  // Format: instances/{instance}/databases/{databaseName}, for general engines.
  // Or instances/{instance}/databases/{databaseName}/schemas/{schemaName}, for PG only.
  string backup_data_source = 3;

  // The backup table name.
  string backup_table = 4;
}

message GenerateRestoreSQLResponse {
  // The restore SQL statement.
  string statement = 1;
}
