syntax = "proto3";

package bytebase.v1;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";

option go_package = "generated-go/v1";

service ExternalVersionControlService {
  rpc GetExternalVersionControl(GetExternalVersionControlRequest) returns (ExternalVersionControl) {
    option (google.api.http) = {get: "/v1/{name=externalVersionControls/*}"};
    option (google.api.method_signature) = "name";
  }

  rpc ListExternalVersionControls(ListExternalVersionControlsRequest) returns (ListExternalVersionControlsResponse) {
    option (google.api.http) = {get: "/v1/externalVersionControls"};
    option (google.api.method_signature) = "";
  }

  rpc CreateExternalVersionControl(CreateExternalVersionControlRequest) returns (ExternalVersionControl) {
    option (google.api.http) = {
      post: "/v1/externalVersionControls"
      body: "external_version_control"
    };
    option (google.api.method_signature) = "";
  }

  rpc UpdateExternalVersionControl(UpdateExternalVersionControlRequest) returns (ExternalVersionControl) {
    option (google.api.http) = {
      patch: "/v1/{external_version_control.name=externalVersionControls/*}"
      body: "external_version_control"
    };
    option (google.api.method_signature) = "external_version_control,update_mask";
  }

  rpc ExchangeToken(ExchangeTokenRequest) returns (OAuthToken) {
    option (google.api.http) = {
      post: "/v1/{exchange_token.name=externalVersionControls/*}:exchangeToken"
      body: "exchange_token"
    };
    option (google.api.method_signature) = "";
  }

  rpc DeleteExternalVersionControl(DeleteExternalVersionControlRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {delete: "/v1/{name=externalVersionControls/*}"};
  }

  rpc SearchExternalVersionControlProjects(SearchExternalVersionControlProjectsRequest) returns (SearchExternalVersionControlProjectsResponse) {
    option (google.api.http) = {
      post: "/v1/{name=externalVersionControls/*}:searchProjects"
      body: "*"
    };
  }

  rpc ListProjectGitOpsInfo(ListProjectGitOpsInfoRequest) returns (ListProjectGitOpsInfoResponse) {
    option (google.api.http) = {get: "/v1/{name=externalVersionControls/*}/projects"};
  }
}

message CreateExternalVersionControlRequest {
  ExternalVersionControl external_version_control = 1 [(google.api.field_behavior) = REQUIRED];
}

message GetExternalVersionControlRequest {
  // The name of the external version control to retrieve.
  // Format: externalVersionControls/{externalVersionControl}
  string name = 1 [(google.api.field_behavior) = REQUIRED];
}

message ListExternalVersionControlsRequest {
  // Not used. The maximum number of external version control to return. The service may return fewer than this value.
  // If unspecified, at most 100 external version control will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  int32 page_size = 1;

  // Not used. A page token, received from a previous `ListExternalVersionControls` call.
  // Provide this to retrieve the subsequent page.
  string page_token = 2;
}

message ListExternalVersionControlsResponse {
  // The list of external version control.
  repeated ExternalVersionControl external_version_controls = 1;

  // Not used. A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

message UpdateExternalVersionControlRequest {
  ExternalVersionControl external_version_control = 1 [(google.api.field_behavior) = REQUIRED];

  // The list of fields to be updated.
  google.protobuf.FieldMask update_mask = 2 [(google.api.field_behavior) = REQUIRED];
}

message DeleteExternalVersionControlRequest {
  // The name of the external version control to delete.
  // Format: externalVersionControls/{externalVersionControl}
  string name = 1 [(google.api.field_behavior) = REQUIRED];
}

message SearchExternalVersionControlProjectsRequest {
  // The name of the external version control to retrieve the external version control repositories.
  // Format: externalVersionControls/{externalVersionControl}
  string name = 1 [(google.api.field_behavior) = REQUIRED];

  string access_token = 2 [(google.api.field_behavior) = REQUIRED];

  string refresh_token = 3 [(google.api.field_behavior) = REQUIRED];
}

message SearchExternalVersionControlProjectsResponse {
  message Project {
    // The id of the project in external version control.
    string id = 1;
    // The title of the project in external version control.
    string title = 2;
    // The fullpath of the project in external version control.
    string fullpath = 3;
    // Web url of the project in external version control.
    string web_url = 4;
  }
  // The list of project in external version control.
  repeated Project projects = 1;
}

message ListProjectGitOpsInfoRequest {
  // The name of the external version control to retrieve the linked projects.
  // Format: externalVersionControls/{externalVersionControl}
  string name = 1 [(google.api.field_behavior) = REQUIRED];
}

message ListProjectGitOpsInfoResponse {
  // The binding between external version control and project.
  repeated ProjectGitOpsInfo project_gitops_info = 1;
}

message ExternalVersionControl {
  // The name of the external version control, generated by the server, and also is the unique identifier.
  // Format: externalVersionControls/{externalVersionControl}
  string name = 1 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The title of the external version control. It is used to display in the UI. Specified by the client.
  string title = 2 [(google.api.field_behavior) = REQUIRED];

  enum Type {
    TYPE_UNSPECIFIED = 0;
    // GitHub type. Using for GitHub community edition(ce).
    GITHUB = 1;
    // GitLab type. Using for GitLab community edition(ce) and enterprise edition(ee).
    GITLAB = 2;
    // BitBucket type. Using for BitBucket cloud or BitBucket server.
    BITBUCKET = 3;
  }

  Type type = 3 [(google.api.field_behavior) = REQUIRED];

  // The url of the external version control. Specified by the client.
  // For example: github.com, gitlab.com, gitlab.bytebase.com.
  string url = 4 [(google.api.field_behavior) = REQUIRED];

  // The API url of the external version control. Derived from the url.
  string api_url = 5 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The application ID of the external version control. Specified by the client.
  string application_id = 6 [(google.api.field_behavior) = REQUIRED];

  // The application secret of the external version control. Specified by the client.
  string secret = 7 [(google.api.field_behavior) = INPUT_ONLY];
}

message ProjectGitOpsInfo {
  // The name of the linked repository, generated by the server, and also is the unique identifier.
  // Format: projects/{project}/gitOpsInfo
  string name = 1 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The uid for related VCS.
  string vcs_uid = 2;

  // The title of the repository. For axample: sample.
  string title = 3;

  // The full_path of the repository. For example: bytebase/sample.
  string full_path = 4;

  // The web url of the repository. For axample: https://gitlab.bytebase.com/bytebase/sample.
  string web_url = 5;

  // The branch Bytebase listens to for changes. For example: main.
  string branch_filter = 6;

  // The root directory where Bytebase observes the file change. If empty, then it observes the entire repository.
  string base_directory = 7;

  // Bytebase only observes the file path name matching the template pattern **relative** to the base directory.
  // Required Placeholder: {{DB_NAME}}, {{VERSION}}, {{TYPE]}.
  // Optional Placeholder: {{ENV_ID}}, {{DESCRIPTION}}.
  // Optional Directory Wildcard: '*', '**'.
  string file_path_template = 8 [(google.api.field_behavior) = REQUIRED];

  // The file path template for storing the latest schema auto-generated by Bytebase after migration.
  // If empty, then Bytebase won't auto generate it.
  // If specified, required placeholder: {{DB_NAME}}, optional placeholder: {{ENV_ID}}.
  string schema_path_template = 9;

  // The file path template for matching the sql files for sheet.
  // If specified, required Placeholder: {{NAME}}, optional Placeholder: {{ENV_ID}}, {{DB_NAME}}.
  string sheet_path_template = 10;

  // The reposition external id in target VCS.
  string external_id = 11;

  // Set to true to enable SQL review CI for all PR/MRs.
  bool enable_sql_review_ci = 12;

  // The webhook endpoint ID of the repository.
  string webhook_endpoint_id = 13 [(google.api.field_behavior) = OUTPUT_ONLY];

  string access_token = 14 [(google.api.field_behavior) = INPUT_ONLY];

  google.protobuf.Timestamp expires_time = 15 [(google.api.field_behavior) = INPUT_ONLY];

  string refresh_token = 16 [(google.api.field_behavior) = INPUT_ONLY];
}

message ExchangeTokenRequest {
  ExchangeToken exchange_token = 1;
}

message ExchangeToken {
  // The name of the external version control to retrieve the linked projects.
  // Format: externalVersionControls/{externalVersionControl}
  string name = 1;

  string code = 2;

  ExternalVersionControl.Type type = 3;

  string instance_url = 4;

  string client_id = 5;

  string client_secret = 6;
}

message OAuthToken {
  string access_token = 1 [(google.api.field_behavior) = OUTPUT_ONLY];

  string refresh_token = 2 [(google.api.field_behavior) = OUTPUT_ONLY];

  google.protobuf.Timestamp expires_time = 15 [(google.api.field_behavior) = OUTPUT_ONLY];
}
