syntax = "proto3";

package bytebase.v1;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/timestamp.proto";
import "google/type/expr.proto";
import "v1/issue_service.proto";
import "v1/subscription_service.proto";

option go_package = "generated-go/v1";

service SettingService {
  rpc ListSettings(ListSettingsRequest) returns (ListSettingsResponse) {
    option (google.api.http) = {get: "/v1/settings"};
    option (google.api.method_signature) = "";
  }

  rpc GetSetting(GetSettingRequest) returns (Setting) {
    option (google.api.http) = {get: "/v1/{name=settings/*}"};
    option (google.api.method_signature) = "name";
  }

  rpc SetSetting(SetSettingRequest) returns (Setting) {
    option (google.api.http) = {
      patch: "/v1/{setting.name=settings/*}"
      body: "setting"
    };
  }
}

message ListSettingsRequest {
  // The maximum number of settings to return. The service may return fewer than
  // this value.
  // If unspecified, at most 50 settings will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  int32 page_size = 1;

  // A page token, received from a previous `ListSettings` call.
  // Provide this to retrieve the subsequent page.
  //
  // When paginating, all other parameters provided to `ListSettings` must match
  // the call that provided the page token.
  string page_token = 2;
}

message ListSettingsResponse {
  // The settings from the specified request.
  repeated Setting settings = 1;

  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

// The request message for getting a setting.
message GetSettingRequest {
  // The resource name of the setting.
  string name = 1 [(google.api.field_behavior) = REQUIRED];
}

// The response message for getting a setting.
message GetSettingResponse {
  Setting setting = 1;
}

// The request message for updating a setting.
message SetSettingRequest {
  // The setting to update.
  Setting setting = 1 [(google.api.field_behavior) = REQUIRED];

  // validate_only is a flag to indicate whether to validate the setting value,
  // server would not persist the setting value if it is true.
  bool validate_only = 2;
}

// The schema of setting.
message Setting {
  // The resource name of the setting. Must be one of the following forms:
  //
  // - `setting/{setting_name}`
  // For example, "settings/bb.branding.logo"
  string name = 1;

  // The value of the setting.
  Value value = 2;
}

// The data in setting value.
message Value {
  // Value is a oneof field for setting value.
  oneof value {
    // Defines this value as being a string value.
    string string_value = 1;
    SMTPMailDeliverySettingValue smtp_mail_delivery_setting_value = 2;
    AppIMSetting app_im_setting_value = 3;
    AgentPluginSetting agent_plugin_setting_value = 4;
    WorkspaceProfileSetting workspace_profile_setting_value = 5;
    WorkspaceApprovalSetting workspace_approval_setting_value = 6;
    WorkspaceTrialSetting workspace_trial_setting_value = 7;
    ExternalApprovalSetting external_approval_setting_value = 8;
  }
}

message SMTPMailDeliverySettingValue {
  // The SMTP server address.
  string server = 1;

  // The SMTP server port.
  int32 port = 2;

  // We support three types of SMTP encryption: NONE, STARTTLS, and SSL/TLS.
  enum Encryption {
    ENCRYPTION_UNSPECIFIED = 0;
    ENCRYPTION_NONE = 1;
    ENCRYPTION_STARTTLS = 2;
    ENCRYPTION_SSL_TLS = 3;
  }

  // The SMTP server encryption.
  Encryption encryption = 3;

  // The CA, KEY, and CERT for the SMTP server.
  // Not used.
  optional string ca = 4;
  optional string key = 5;
  optional string cert = 6;

  // We support four types of SMTP authentication: NONE, PLAIN, LOGIN, and CRAM-MD5.
  enum Authentication {
    AUTHENTICATION_UNSPECIFIED = 0;
    AUTHENTICATION_NONE = 1;
    AUTHENTICATION_PLAIN = 2;
    AUTHENTICATION_LOGIN = 3;
    AUTHENTICATION_CRAM_MD5 = 4;
  }
  Authentication authentication = 7;
  string username = 8;
  // If not specified, server will use the existed password.
  optional string password = 9;

  // The sender email address.
  string from = 10;

  // The recipient email address, used with validate_only to send test email.
  string to = 11;
}

message AppIMSetting {
  enum IMType {
    IM_TYPE_UNSPECIFIED = 0;
    FEISHU = 1;
  }
  IMType im_type = 1;

  string app_id = 2;

  string app_secret = 3;

  message ExternalApproval {
    bool enabled = 1;
    string approval_definition_id = 2;
  }
  ExternalApproval external_approval = 4;
}

message AgentPluginSetting {
  // The URL for the agent API.
  string url = 1;

  // The token for the agent.
  string token = 2;
}

message WorkspaceProfileSetting {
  // The URL user visits Bytebase.
  //
  // The external URL is used for:
  // 1. Constructing the correct callback URL when configuring the VCS provider. The callback URL points to the frontend.
  // 2. Creating the correct webhook endpoint when configuring the project GitOps workflow. The webhook endpoint points to the backend.
  string external_url = 1;

  // Disallow self-service signup, users can only be invited by the owner.
  bool disallow_signup = 2;

  // Require 2FA for all users.
  bool require_2fa = 3;

  // outbound_ip_list is the outbound IP for Bytebase instance in SaaS mode.
  repeated string outbound_ip_list = 4;

  // The webhook URL for the GitOps workflow.
  string gitops_webhook_url = 5;
}

message WorkspaceApprovalSetting {
  message Rule {
    ApprovalTemplate template = 2;
    google.type.Expr condition = 3;
  }
  repeated Rule rules = 1;
}

message ExternalApprovalSetting {
  message Node {
    // A unique identifier for a node in UUID format.
    // We will also include the id in the message sending to the external relay service to identify the node.
    string id = 1;
    // The title of the node.
    string title = 2;
    // The external endpoint for the relay service, e.g. "http://hello:1234".
    string endpoint = 3;
  }
  repeated Node nodes = 1;
}

message WorkspaceTrialSetting {
  int32 instance_count = 1;

  google.protobuf.Timestamp expire_time = 2;

  google.protobuf.Timestamp issued_time = 3;

  string subject = 4;

  string org_name = 5;

  PlanType plan = 6;
}
