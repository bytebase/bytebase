syntax = "proto3";

package bytebase.v1;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";

option go_package = "generated-go/v1";

service SettingService {
  rpc GetSetting(GetSettingRequest) returns (Setting) {
    option (google.api.http) = {get: "/v1/{name=settings/*}"};
    option (google.api.method_signature) = "name";
  }

  rpc SetSetting(SetSettingRequest) returns (Setting) {
    option (google.api.http) = {
      patch: "/v1/{setting.name=settings/*}"
      body: "setting"
    };
  }
}

// The request message for getting a setting.
message GetSettingRequest {
  // The resource name of the setting.
  string name = 1 [(google.api.field_behavior) = REQUIRED];
}

// The response message for getting a setting.
message GetSettingResponse {
  Setting setting = 1;
}

// The request message for updating a setting.
message SetSettingRequest {
  // The setting to update.
  Setting setting = 1 [(google.api.field_behavior) = REQUIRED];

  // validate_only is a flag to indicate whether to validate the setting value,
  // server would not persist the setting value if it is true.
  bool validate_only = 2;
}

// The schema of setting.
message Setting {
  // The resource name of the setting. Must be one of the following forms:
  //
  // - `setting/{setting_name}`
  // For example, "settings/bb.branding.logo"
  string name = 1;

  // The value of the setting.
  Value value = 2;
}

// The data in setting value.
message Value {
  // Value is a oneof field for setting value.
  oneof value {
    // Defines this value as being a string value.
    string string_value = 1;
    SMTPMailDeliverySettingValue smtp_mail_delivery_setting_value = 2;
  }
}

message SMTPMailDeliverySettingValue {
  // The SMTP server address.
  string server = 1;

  // The SMTP server port.
  int32 port = 2;

  // We support three types of SMTP encryption: NONE, STARTTLS, and SSL/TLS.
  enum Encryption {
    ENCRYPTION_UNSPECIFIED = 0;
    ENCRYPTION_NONE = 1;
    ENCRYPTION_STARTTLS = 2;
    ENCRYPTION_SSL_TLS = 3;
  }

  // The SMTP server encryption.
  Encryption encryption = 3;

  // The CA, KEY, and CERT for the SMTP server.
  // Not used.
  optional string ca = 4;
  optional string key = 5;
  optional string cert = 6;

  // We support four types of SMTP authentication: NONE, PLAIN, LOGIN, and CRAM-MD5.
  enum Authentication {
    AUTHENTICATION_UNSPECIFIED = 0;
    AUTHENTICATION_NONE = 1;
    AUTHENTICATION_PLAIN = 2;
    AUTHENTICATION_LOGIN = 3;
    AUTHENTICATION_CRAM_MD5 = 4;
  }
  Authentication authentication = 7;
  string username = 8;
  // If not specified, server will use the existed password.
  optional string password = 9;

  // The sender email address.
  string from = 10;

  // The recipient email address, used with validate_only to send test email.
  string to = 11;
}
