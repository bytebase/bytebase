syntax = "proto3";

package bytebase.v1;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/empty.proto";

import "v1/common.proto";

option go_package = "generated-go/v1";

service AuthService {
  rpc CreateUser(CreateUserRequest) returns (User) {
    option (google.api.http) = {
      post: "/v1/users"
      body: "user"
    };
    option (google.api.method_signature) = "user";
  }
  rpc Login(LoginRequest) returns (LoginResponse) {
    option (google.api.http) = {
      post: "/v1/auth/login"
      body: "*"
    };
  }
  rpc Logout(LogoutRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/auth/logout"
      body: "*"
    };
  }
}

message CreateUserRequest {
  // The user to create.
  User user = 1 [(google.api.field_behavior) = REQUIRED];
}

message LoginRequest {
  string email = 1;

  string password = 2;

  // If web is set, we will set access token, refresh token, and user to the cookie.
  bool web = 3;
}

message LoginResponse {
  string token = 1;
}

message LogoutRequest {
}

message User {
  // The name of the user.
  // Format: users/{user}. {user} is a system-generated unique ID.
  string name = 1 [(google.api.field_behavior) = OUTPUT_ONLY];

  State state = 2;

  string email = 3;

  string title = 4;

  string password = 5 [(google.api.field_behavior) = INPUT_ONLY];

  // The user role will not be respected in the create user request, because the role is controlled by workspace owner.
  UserRole user_role = 6;
}


enum UserRole {
  USER_ROLE_UNSPECIFIED = 0;
  USER_ROLE_OWNER = 1;
  USER_ROLE_DBA = 2;
  USER_ROLE_DEVELOPER = 3;
}
