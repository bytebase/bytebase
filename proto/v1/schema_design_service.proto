syntax = "proto3";

package bytebase.v1;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "v1/common.proto";
import "v1/database_service.proto";

option go_package = "generated-go/v1";

service SchemaDesignService {
  rpc GetSchemaDesign(GetSchemaDesignRequest) returns (SchemaDesign) {
    option (google.api.http) = {get: "/v1/{name=projects/*/schemaDesigns/*}"};
    option (google.api.method_signature) = "name";
  }

  rpc ListSchemaDesigns(ListSchemaDesignsRequest) returns (ListSchemaDesignsResponse) {
    option (google.api.http) = {get: "/v1/{parent=projects/*}/schemaDesigns"};
    option (google.api.method_signature) = "";
  }

  rpc CreateSchemaDesign(CreateSchemaDesignRequest) returns (SchemaDesign) {
    option (google.api.http) = {
      post: "/v1/{parent=projects/*}/schemaDesign"
      body: "schema_design"
    };
    option (google.api.method_signature) = "parent,schemaDesign";
  }

  rpc UpdateSchemaDesign(UpdateSchemaDesignRequest) returns (SchemaDesign) {
    option (google.api.http) = {
      patch: "/v1/{schema_design.name=projects/*/schemaDesigns/*}"
      body: "schema_design"
    };
    option (google.api.method_signature) = "schemaDesign,update_mask";
  }

  rpc ParseSchemaString(ParseSchemaStringRequest) returns (ParseSchemaStringResponse) {
    option (google.api.http) = {
      post: "/v1/schemaDesign:parseSchemaString"
      body: "*"
    };
  }

  rpc DeleteSchemaDesign(DeleteSchemaDesignRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {delete: "/v1/{name=projects/*/schemaDesigns/*}"};
    option (google.api.method_signature) = "name";
  }
}

message SchemaDesign {
  // The name of the schema design.
  // Format: projects/{project}/schemaDesigns/{schemaDesign}
  // {schemaDesign} should be the id of a sheet.
  string name = 1;

  // The title of schema design. AKA sheet's name.
  string title = 2;

  // The schema of schema design. AKA sheet's statement.
  string schema = 3 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The metadata of the current editing schema.
  DatabaseMetadata schema_metadata = 4;

  // The baseline schema.
  string baseline_schema = 5 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The metadata of the baseline schema.
  DatabaseMetadata baseline_schema_metadata = 6 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The database engine of the schema design.
  Engine engine = 7;

  // The name of the baseline database.
  // Format: instances/{instance}/databases/{database}
  string baseline_database = 8 [(google.api.field_behavior) = IMMUTABLE];

  // The selected schema version of the baseline database.
  // If not specified, the latest schema of database will be used as baseline schema.
  string schema_version = 9 [(google.api.field_behavior) = IMMUTABLE];

  // The creator of the schema design.
  // Format: users/{email}
  string creator = 10 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The updater of the schema design.
  // Format: users/{email}
  string updater = 11 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The timestamp when the schema design was created.
  google.protobuf.Timestamp create_time = 12 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The timestamp when the schema design was last updated.
  google.protobuf.Timestamp update_time = 13 [(google.api.field_behavior) = OUTPUT_ONLY];
}

message GetSchemaDesignRequest {
  // The name of the schema design to retrieve.
  // Format: projects/{project}/schemaDesigns/{schemaDesign}
  string name = 1 [(google.api.field_behavior) = REQUIRED];
}

message ListSchemaDesignsRequest {
  // The parent resource of the schema design.
  // Foramt: projects/{project}
  string parent = 1 [(google.api.field_behavior) = REQUIRED];

  // To filter the search result.
  // Format: only support the following spec for now:
  // - `creator = users/{email}`, `creator != users/{email}`
  // - `starred = true`, `starred = false`.
  // Not support empty filter for now.
  string filter = 2;

  // The maximum number of schema designs to return. The service may return fewer than
  // this value.
  // If unspecified, at most 50 schema designs will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  int32 page_size = 3;

  // A page token, received from a previous `ListSchemaDesigns` call.
  // Provide this to retrieve the subsequent page.
  //
  // When paginating, all other parameters provided to `ListSchemaDesigns` must match
  // the call that provided the page token.
  string page_token = 4;
}

message ListSchemaDesignsResponse {
  // The schema designs from the specified request.
  repeated SchemaDesign schema_designs = 1;

  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

message CreateSchemaDesignRequest {
  // The parent, which owns this collection of schema designs.
  // Format: project/{project}
  string parent = 1;

  SchemaDesign schema_design = 2;
}

message UpdateSchemaDesignRequest {
  // The schema design to update.
  //
  // The schema design's `name` field is used to identify the schema design to update.
  // Format: projects/{project}/schemaDesigns/{schemaDesign}
  SchemaDesign schema_design = 1 [(google.api.field_behavior) = REQUIRED];

  // The list of fields to update.
  google.protobuf.FieldMask update_mask = 2;
}

message ParseSchemaStringRequest {
  string schema_string = 1 [(google.api.field_behavior) = REQUIRED];

  Engine engine = 2;
}

message ParseSchemaStringResponse {
  // The metadata of the parsed schema.
  DatabaseMetadata schema_metadata = 1 [(google.api.field_behavior) = OUTPUT_ONLY];
}

message DeleteSchemaDesignRequest {
  // The name of the schema design to delete.
  // Format: projects/{project}/schemaDesigns/{schemaDesign}
  string name = 1 [(google.api.field_behavior) = REQUIRED];
}
