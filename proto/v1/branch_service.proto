syntax = "proto3";

package bytebase.v1;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "v1/common.proto";
import "v1/database_service.proto";

option go_package = "generated-go/v1";

service BranchService {
  rpc GetBranch(GetBranchRequest) returns (Branch) {
    option (google.api.http) = {get: "/v1/{name=projects/*/branches/*}"};
    option (google.api.method_signature) = "name";
  }

  rpc ListBranches(ListBranchesRequest) returns (ListBranchesResponse) {
    option (google.api.http) = {get: "/v1/{parent=projects/*}/branches"};
    option (google.api.method_signature) = "";
  }

  rpc CreateBranch(CreateBranchRequest) returns (Branch) {
    option (google.api.http) = {
      post: "/v1/{parent=projects/*}/branch"
      body: "branch"
    };
    option (google.api.method_signature) = "parent,branch";
  }

  rpc UpdateBranch(UpdateBranchRequest) returns (Branch) {
    option (google.api.http) = {
      patch: "/v1/{branch.name=projects/*/branches/*}"
      body: "branch"
    };
    option (google.api.method_signature) = "branch,update_mask";
  }

  rpc MergeBranch(MergeBranchRequest) returns (Branch) {
    option (google.api.http) = {post: "/v1/{name=projects/*/branches/*}:merge"};
    option (google.api.method_signature) = "name";
  }

  rpc RebaseBranch(RebaseBranchRequest) returns (RebaseBranchResponse) {
    option (google.api.http) = {post: "/v1/{name=projects/*/branches/*}:rebase"};
    option (google.api.method_signature) = "name";
  }

  rpc DeleteBranch(DeleteBranchRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {delete: "/v1/{name=projects/*/branches/*}"};
    option (google.api.method_signature) = "name";
  }

  // DiffDatabase works similar to branch rebase.
  // 1) set the base as the schema of a database;
  // 2) apply the changes between base and head of branch to the new base (schema of database);
  // 3) return the diff DDLs similar to DiffSchema in database service.
  // 4) return the conflict schema if conflict needs to be resolved by user. Once resolved, user
  // will call DiffSchema() in database service to get diff DDLs.
  rpc DiffDatabase(DiffDatabaseRequest) returns (DiffDatabaseResponse) {
    option (google.api.http) = {post: "/v1/{name=projects/*/branches/*}:diffDatabase"};
    option (google.api.method_signature) = "name";
  }

  rpc DiffMetadata(DiffMetadataRequest) returns (DiffMetadataResponse) {
    option (google.api.http) = {
      post: "/v1/schemaDesign:diffMetadata"
      body: "*"
    };
  }
}

enum BranchView {
  // The default / unset value.
  // The API will default to the BASIC view.
  BRANCH_VIEW_UNSPECIFIED = 0;

  // Exclude schema, baseline_schema.
  BRANCH_VIEW_BASIC = 1;
  // Include everything.
  BRANCH_VIEW_FULL = 2;
}

message Branch {
  // The name of the branch.
  // Format: projects/{project}/branches/{branch}
  // {branch} should be the id of a sheet.
  string name = 1;

  // The branch ID.
  string branch_id = 2;

  // The schema of branch. AKA sheet's statement.
  string schema = 3 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The metadata of the current editing schema.
  DatabaseMetadata schema_metadata = 4;

  // The baseline schema.
  string baseline_schema = 5 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The metadata of the baseline schema.
  DatabaseMetadata baseline_schema_metadata = 6 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The database engine of the branch.
  Engine engine = 7;

  // The name of the baseline database.
  // Format: instances/{instance}/databases/{database}
  string baseline_database = 8 [(google.api.field_behavior) = IMMUTABLE];

  // The name of the parent branch.
  // For main branch, it's empty.
  // For child branch, its format will be: projects/{project}/branches/{branch}
  string parent_branch = 9 [(google.api.field_behavior) = IMMUTABLE];

  // The etag of the branch.
  string etag = 10;

  // The creator of the branch.
  // Format: users/{email}
  string creator = 11 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The updater of the branch.
  // Format: users/{email}
  string updater = 12 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The timestamp when the branch was created.
  google.protobuf.Timestamp create_time = 13 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The timestamp when the branch was last updated.
  google.protobuf.Timestamp update_time = 14 [(google.api.field_behavior) = OUTPUT_ONLY];
}

message GetBranchRequest {
  // The name of the branch to retrieve.
  // Format: projects/{project}/branches/{branch}
  string name = 1 [(google.api.field_behavior) = REQUIRED];
}

message ListBranchesRequest {
  // The parent resource of the branch.
  // Format: projects/{project}
  string parent = 1 [(google.api.field_behavior) = REQUIRED];

  // To filter the search result.
  string filter = 2;

  // The maximum number of branches to return. The service may return fewer than
  // this value.
  // If unspecified, at most 50 branches will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  int32 page_size = 3;

  // A page token, received from a previous `ListBranches` call.
  // Provide this to retrieve the subsequent page.
  //
  // When paginating, all other parameters provided to `ListBranches` must match
  // the call that provided the page token.
  string page_token = 4;

  BranchView view = 5;
}

message ListBranchesResponse {
  // The branches from the specified request.
  repeated Branch branches = 1;

  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

message CreateBranchRequest {
  // The parent, which owns this collection of branches.
  // Format: project/{project}
  string parent = 1;

  Branch branch = 2;

  // The ID to use for the branch, which will become the final component of
  // the branch's resource name.
  // Format: [a-zA-Z][a-zA-Z0-9-_/]+.
  string branch_id = 3;
}

message UpdateBranchRequest {
  // The branch to update.
  //
  // The branch's `name` field is used to identify the branch to update.
  // Format: projects/{project}/branches/{branch}
  Branch branch = 1 [(google.api.field_behavior) = REQUIRED];

  // The list of fields to update.
  google.protobuf.FieldMask update_mask = 2;

  // The current etag of the branch.
  // If an etag is provided and does not match the current etag of the branch,
  // the call will be blocked and an ABORTED error will be returned.
  // The etag should be specified for using merged_schema. The etag should be the etag from named branch.
  string etag = 3;
}

message MergeBranchRequest {
  // The name of the base branch to merge to.
  // Format: projects/{project}/branches/{branch}
  string name = 1 [(google.api.field_behavior) = REQUIRED];

  // The head branch to merge from.
  // Format: projects/{project}/branches/{branch}
  string head_branch = 2;

  // The current etag of the branch.
  // If an etag is provided and does not match the current etag of the branch,
  // the call will be blocked and an ABORTED error will be returned.
  // The etag should be the etag from named branch.
  string etag = 3 [(google.api.field_behavior) = OPTIONAL];

  // validate_only determines if the merge can occur seamlessly without any conflicts.
  bool validate_only = 4;
}

message RebaseBranchRequest {
  // The name of the base branch to merge to.
  // Format: projects/{project}/branches/{branch}
  string name = 1 [(google.api.field_behavior) = REQUIRED];

  // The database (remote upstream) used to rebase.
  // We use its schema as baseline and reapply the difference between base and head of the named branch.
  // Format: instances/{instance}/databases/{database}
  string source_database = 2;

  // The branch (remote upstream) used to rebase. We use its head as baseline.
  // We use its head schema as baseline and reapply the difference between base and head of the named branch.
  // Format: projects/{project}/branches/{branch}
  string source_branch = 3;

  // For failed merge, we will pass in this addition merged schema and use it for head.
  // This has to be set together with source_database or source_branch.
  string merged_schema = 4;

  // The current etag of the branch.
  // If an etag is provided and does not match the current etag of the branch,
  // the call will be blocked and an ABORTED error will be returned.
  // The etag should be specified for using merged_schema. The etag should be the etag from named branch.
  string etag = 5;

  // validate_only determines if the rebase can occur seamlessly without any conflicts.
  bool validate_only = 6;
}

message RebaseBranchResponse {
  oneof result {
    // The rebased branch when rebase occurs seamlessly.
    Branch branch = 1;
    // The conflict schema when rebase has conflicts.
    // The conflict section is enclosed by the following.
    // <<<<< HEAD
    // ====
    // >>>>> main
    string conflict_schema = 2;
  }
}

message DeleteBranchRequest {
  // The name of the branch to delete.
  // Format: projects/{project}/branches/{branch}
  string name = 1 [(google.api.field_behavior) = REQUIRED];

  // By default, server will return `FAILED_PRECONDITION` error
  // if delete the branch that is parent of other branches.
  // If true, server will delete the branch forcely but will not delete its children branches.
  bool force = 2;
}

message DiffDatabaseRequest {
  // The name of branch.
  string name = 1;

  // The name of the databsae to merge the branch to.
  string database = 2 [(google.api.field_behavior) = REQUIRED];
}

message DiffDatabaseResponse {
  // The schema diff when merge occurs seamlessly.
  string diff = 1;

  oneof result {
    // The merged schema if there is no conflict.
    string schema = 2;

    // The conflict schema when rebase has conflicts.
    // The conflict section is enclosed by the following.
    // <<<<< HEAD
    // ====
    // >>>>> main
    string conflict_schema = 3;
  }
}

message DiffMetadataRequest {
  // The metadata of the source schema.
  DatabaseMetadata source_metadata = 1 [(google.api.field_behavior) = REQUIRED];

  // The metadata of the target schema.
  DatabaseMetadata target_metadata = 2 [(google.api.field_behavior) = REQUIRED];

  // The database engine of the schema.
  Engine engine = 3;
}

message DiffMetadataResponse {
  // The diff of the metadata.
  string diff = 1;
}
