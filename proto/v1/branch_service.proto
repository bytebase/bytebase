syntax = "proto3";

package bytebase.v1;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";
import "v1/common.proto";
import "v1/database_service.proto";

option go_package = "generated-go/v1";

service BranchService {
  rpc GetBranch(GetBranchRequest) returns (Branch) {
    option (google.api.http) = {get: "/v1/{name=projects/*/branches/*}"};
    option (google.api.method_signature) = "name";
  }

  rpc ListBranches(ListBranchesRequest) returns (ListBranchesResponse) {
    option (google.api.http) = {get: "/v1/{parent=projects/*}/branches"};
    option (google.api.method_signature) = "";
  }

  rpc CreateBranch(CreateBranchRequest) returns (Branch) {
    option (google.api.http) = {
      post: "/v1/{parent=projects/*}/branch"
      body: "branch"
    };
    option (google.api.method_signature) = "parent,branch";
  }

  rpc UpdateBranch(UpdateBranchRequest) returns (Branch) {
    option (google.api.http) = {
      patch: "/v1/{branch.name=projects/*/branches/*}"
      body: "branch"
    };
    option (google.api.method_signature) = "branch,update_mask";
  }

  rpc MergeBranch(MergeBranchRequest) returns (Branch) {
    option (google.api.http) = {post: "/v1/{name=projects/*/branches/*}:merge"};
    option (google.api.method_signature) = "name";
  }

  rpc RebaseBranch(RebaseBranchRequest) returns (RebaseBranchResponse) {
    option (google.api.http) = {post: "/v1/{name=projects/*/branches/*}:rebase"};
    option (google.api.method_signature) = "name";
  }

  rpc DeleteBranch(DeleteBranchRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {delete: "/v1/{name=projects/*/branches/*}"};
    option (google.api.method_signature) = "name";
  }

  // DiffDatabase works similar to branch rebase.
  // 1) set the base as the schema of a database;
  // 2) apply the changes between base and head of branch to the new base (schema of database);
  // 3) return the diff DDLs similar to DiffSchema in database service.
  // 4) return the conflict schema if conflict needs to be resolved by user. Once resolved, user
  // will call DiffSchema() in database service to get diff DDLs.
  rpc DiffDatabase(DiffDatabaseRequest) returns (DiffDatabaseResponse) {
    option (google.api.http) = {post: "/v1/{name=projects/*/branches/*}:diffDatabase"};
    option (google.api.method_signature) = "name";
  }

  rpc DiffMetadata(DiffMetadataRequest) returns (DiffMetadataResponse) {
    option (google.api.http) = {
      post: "/v1/schemaDesign:diffMetadata"
      body: "*"
    };
  }
}

enum BranchView {
  // The default / unset value.
  // The API will default to the BASIC view.
  BRANCH_VIEW_UNSPECIFIED = 0;

  // Exclude schema, baseline_schema.
  BRANCH_VIEW_BASIC = 1;
  // Include everything.
  BRANCH_VIEW_FULL = 2;
}

message Branch {
  // The name of the branch.
  // Format: projects/{project}/branches/{branch}
  // {branch} should be the id of a sheet.
  string name = 1;

  // The branch ID.
  string branch_id = 2;

  // The schema of branch. AKA sheet's statement.
  string schema = 3 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The metadata of the current editing schema.
  DatabaseMetadata schema_metadata = 4;

  // The baseline schema.
  string baseline_schema = 5 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The metadata of the baseline schema.
  DatabaseMetadata baseline_schema_metadata = 6 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The database engine of the branch.
  Engine engine = 7;

  // The name of the baseline database.
  // Format: instances/{instance}/databases/{database}
  string baseline_database = 8 [(google.api.field_behavior) = IMMUTABLE];

  // The name of the parent branch.
  // For main branch, it's empty.
  // For child branch, its format will be: projects/{project}/branches/{branch}
  string parent_branch = 9 [(google.api.field_behavior) = IMMUTABLE];

  // The etag of the branch.
  string etag = 10;

  // The creator of the branch.
  // Format: users/{email}
  string creator = 11 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The updater of the branch.
  // Format: users/{email}
  string updater = 12 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The timestamp when the branch was created.
  google.protobuf.Timestamp create_time = 13 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The timestamp when the branch was last updated.
  google.protobuf.Timestamp update_time = 14 [(google.api.field_behavior) = OUTPUT_ONLY];
}

message GetBranchRequest {
  // The name of the branch to retrieve.
  // Format: projects/{project}/branches/{branch}
  string name = 1 [(google.api.field_behavior) = REQUIRED];
}

message ListBranchesRequest {
  // The parent resource of the branch.
  // Format: projects/{project}
  string parent = 1 [(google.api.field_behavior) = REQUIRED];

  // To filter the search result.
  string filter = 2;

  // The maximum number of branches to return. The service may return fewer than
  // this value.
  // If unspecified, at most 50 branches will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  int32 page_size = 3;

  // A page token, received from a previous `ListBranches` call.
  // Provide this to retrieve the subsequent page.
  //
  // When paginating, all other parameters provided to `ListBranches` must match
  // the call that provided the page token.
  string page_token = 4;

  BranchView view = 5;
}

message ListBranchesResponse {
  // The branches from the specified request.
  repeated Branch branches = 1;

  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

message CreateBranchRequest {
  // The parent, which owns this collection of branches.
  // Format: project/{project}
  string parent = 1;

  Branch branch = 2;

  // The ID to use for the branch, which will become the final component of
  // the branch's resource name.
  // Format: [a-zA-Z][a-zA-Z0-9-_/]+.
  string branch_id = 3;
}

message UpdateBranchRequest {
  // The branch to update.
  //
  // The branch's `name` field is used to identify the branch to update.
  // Format: projects/{project}/branches/{branch}
  Branch branch = 1 [(google.api.field_behavior) = REQUIRED];

  // The list of fields to update.
  google.protobuf.FieldMask update_mask = 2;

  // The current etag of the branch.
  // If an etag is provided and does not match the current etag of the branch,
  // the call will be blocked and an ABORTED error will be returned.
  // The etag should be specified for using merged_schema. The etag should be the etag from named branch.
  string etag = 3;
}

message MergeBranchRequest {
  // The name of the base branch to merge to.
  // Format: projects/{project}/branches/{branch}
  string name = 1 [(google.api.field_behavior) = REQUIRED];

  // The head branch to merge from.
  // Format: projects/{project}/branches/{branch}
  string head_branch = 2;

  // The current etag of the branch.
  // If an etag is provided and does not match the current etag of the branch,
  // the call will be blocked and an ABORTED error will be returned.
  // The etag should be the etag from named branch.
  string etag = 3 [(google.api.field_behavior) = OPTIONAL];

  // validate_only determines if the merge can occur seamlessly without any conflicts.
  bool validate_only = 4;
}

message RebaseBranchRequest {
  // The name of the base branch to merge to.
  // Format: projects/{project}/branches/{branch}
  string name = 1 [(google.api.field_behavior) = REQUIRED];

  // The database (remote upstream) used to rebase.
  // We use its schema as baseline and reapply the difference between base and head of the named branch.
  // Format: instances/{instance}/databases/{database}
  string source_database = 2;

  // The branch (remote upstream) used to rebase. We use its head as baseline.
  // We use its head schema as baseline and reapply the difference between base and head of the named branch.
  // Format: projects/{project}/branches/{branch}
  string source_branch = 3;

  // For failed merge, we will pass in this addition merged schema and use it for head.
  // This has to be set together with source_database or source_branch.
  string merged_schema = 4;

  // The current etag of the branch.
  // If an etag is provided and does not match the current etag of the branch,
  // the call will be blocked and an ABORTED error will be returned.
  // The etag should be specified for using merged_schema. The etag should be the etag from named branch.
  string etag = 5;

  // validate_only determines if the rebase can occur seamlessly without any conflicts.
  bool validate_only = 6;
}

message RebaseBranchResponse {
  oneof result {
    // The rebased branch when rebase occurs seamlessly.
    Branch branch = 1;
    // The conflict schema when rebase has conflicts.
    // The conflict section is enclosed by the following.
    // <<<<< HEAD
    // ====
    // >>>>> main
    string conflict_schema = 2;
  }
}

message DeleteBranchRequest {
  // The name of the branch to delete.
  // Format: projects/{project}/branches/{branch}
  string name = 1 [(google.api.field_behavior) = REQUIRED];

  // By default, server will return `FAILED_PRECONDITION` error
  // if delete the branch that is parent of other branches.
  // If true, server will delete the branch forcely but will not delete its children branches.
  bool force = 2;
}

message DiffDatabaseRequest {
  // The name of branch.
  string name = 1;

  // The name of the databsae to merge the branch to.
  string database = 2 [(google.api.field_behavior) = REQUIRED];
}

message DiffDatabaseResponse {
  // The schema diff when merge occurs seamlessly.
  string diff = 1;

  oneof result {
    // The merged schema if there is no conflict.
    string schema = 2;

    // The conflict schema when rebase has conflicts.
    // The conflict section is enclosed by the following.
    // <<<<< HEAD
    // ====
    // >>>>> main
    string conflict_schema = 3;
  }
}

message DiffMetadataRequest {
  // The metadata of the source schema.
  DatabaseMetadata source_metadata = 1 [(google.api.field_behavior) = REQUIRED];

  // The metadata of the target schema.
  DatabaseMetadata target_metadata = 2 [(google.api.field_behavior) = REQUIRED];

  // The database engine of the schema.
  Engine engine = 3;
}

message DiffMetadataResponse {
  // The diff of the metadata.
  string diff = 1;
}

// BranchDatabaseSchemaMetadata is the schema metadata for databases used in branch.
message BranchDatabaseSchemaMetadata {
  string name = 1;

  // The schemas is the list of schemas in a database.
  repeated BranchSchemaMetadata schemas = 2;

  // The character_set is the character set of a database.
  string character_set = 3;

  // The collation is the collation of a database.
  string collation = 4;

  // The extensions is the list of extensions in a database.
  repeated ExtensionMetadata extensions = 5;

  // The database belongs to a datashare.
  bool datashare = 6;

  // The service name of the database. It's the Oracle specific concept.
  string service_name = 7;
}

// BranchSchemaMetadata is the metadata for schemas used in branch.
// This is the concept of schema in Postgres, but it's a no-op for MySQL.
message BranchSchemaMetadata {
  // The name is the schema name.
  // It is an empty string for databases without such concept such as MySQL.
  string name = 1;

  // The tables is the list of tables in a schema.
  repeated BranchTableMetadata tables = 2;

  // The external_tables is the list of external tables in a schema.
  repeated BranchExternalTableMetadata external_tables = 3;

  // The views is the list of views in a schema.
  repeated BranchViewMetadata views = 4;

  // The functions is the list of functions in a schema.
  repeated BranchFunctionMetadata functions = 5;

  // The procedures is the list of procedures in a schema.
  repeated BranchProcedureMetadata procedures = 6;

  // The streams is the list of streams in a schema, currently, only used for Snowflake.
  repeated BranchStreamMetadata streams = 7;

  // The routines is the list of routines in a schema, currently, only used for Snowflake.
  repeated BranchTaskMetadata tasks = 8;

  // The materialized_views is the list of materialized views in a schema.
  repeated BranchMaterializedViewMetadata materialized_views = 9;

  // The last updater of the object.
  // Format: users/{email}
  string updater = 10 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The timestamp when the object was last updated.
  google.protobuf.Timestamp update_time = 11 [(google.api.field_behavior) = OUTPUT_ONLY];
}

message BranchTaskMetadata {
  // The name is the name of a task.
  string name = 1;

  // The id is the snowflake-generated id of a task.
  // Example: 01ad32a0-1bb6-5e93-0000-000000000001
  string id = 2;

  // The owner of the task.
  string owner = 3;

  // The comment of the task.
  string comment = 4;

  // The warehouse of the task.
  string warehouse = 5;

  // The schedule interval of the task.
  string schedule = 6;

  // The predecessor tasks of the task.
  repeated string predecessors = 7;

  enum State {
    STATE_UNSPECIFIED = 0;
    STATE_STARTED = 1;
    STATE_SUSPENDED = 2;
  }
  // The state of the task.
  State state = 8;

  // The condition of the task.
  string condition = 9;

  // The definition of the task.
  string definition = 10;
}

message BranchStreamMetadata {
  // The name is the name of a stream.
  string name = 1;

  // The table_name is the name of the table/view that the stream is created on.
  string table_name = 2;

  // The owner of the stream.
  string owner = 3;

  // The comment of the stream.
  string comment = 4;

  enum Type {
    TYPE_UNSPECIFIED = 0;
    TYPE_DELTA = 1;
  }
  // The type of the stream.
  Type type = 5;

  // Indicates whether the stream was last read before the `stale_after` time.
  bool stale = 6;

  enum Mode {
    MODE_UNSPECIFIED = 0;
    MODE_DEFAULT = 1;
    MODE_APPEND_ONLY = 2;
    MODE_INSERT_ONLY = 3;
  }
  // The mode of the stream.
  Mode mode = 7;

  // The definition of the stream.
  string definition = 8;
}

// BranchTableMetadata is the metadata for tables used in branch.
message BranchTableMetadata {
  // The name is the name of a table.
  string name = 1;

  // The columns is the ordered list of columns in a table.
  repeated BranchColumnMetadata columns = 2;

  // The indexes is the list of indexes in a table.
  repeated BranchIndexMetadata indexes = 3;

  // TODO(d): figure out whether we need to store table type such as "BASE TABLE".

  // The engine is the engine of a table.
  string engine = 4;

  // The collation is the collation of a table.
  string collation = 5;

  // The row_count is the estimated number of rows of a table.
  int64 row_count = 6;

  // The data_size is the estimated data size of a table.
  int64 data_size = 7;

  // The index_size is the estimated index size of a table.
  int64 index_size = 8;

  // The data_free is the estimated free data size of a table.
  int64 data_free = 9;

  // The create_options is the create option of a table.
  string create_options = 10;

  // The comment is the comment of a table.
  // classification and user_comment is parsed from the comment.
  string comment = 11;

  // The classification is the classification of a table parsed from the comment.
  string classification = 13;

  // The user_comment is the user comment of a table parsed from the comment.
  string user_comment = 14;

  // The foreign_keys is the list of foreign keys in a table.
  repeated BranchForeignKeyMetadata foreign_keys = 12;

  // The partitions is the list of partitions in a table.
  repeated BranchTablePartitionMetadata partitions = 15;

  // The last updater of the object.
  // Format: users/{email}
  string updater = 16 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The timestamp when the object was last updated.
  google.protobuf.Timestamp update_time = 17 [(google.api.field_behavior) = OUTPUT_ONLY];
}

message BranchExternalTableMetadata {
  // The name is the name of a external table.
  string name = 1;

  // The external_server_name is the name of the external server.
  string external_server_name = 2;

  // The external_database_name is the name of the external database.
  string external_database_name = 3;

  // The columns is the ordered list of columns in a foreign table.
  repeated BranchColumnMetadata columns = 4;
}

// BranchTablePartitionMetadata is the metadata for table partitions used in branch.
message BranchTablePartitionMetadata {
  // The name is the name of a table partition.
  string name = 1;

  // Type is the type of a table partition, some database engines may not support all types.
  // Only avilable for the following database engines now:
  // MySQL: RANGE, RANGE COLUMNS, LIST, LIST COLUMNS, HASH, LINEAR HASH, KEY, LINEAR_KEY (https://dev.mysql.com/doc/refman/8.0/en/partitioning-types.html)
  // TiDB: RANGE, RANGE COLUMNS, LIST, LIST COLUMNS, HASH, KEY
  // PostgreSQL: RANGE, LIST, HASH (https://www.postgresql.org/docs/current/ddl-partitioning.html)
  enum Type {
    TYPE_UNSPECIFIED = 0;
    RANGE = 1;
    RANGE_COLUMNS = 2;
    LIST = 3;
    LIST_COLUMNS = 4;
    HASH = 5;
    LINEAR_HASH = 6;
    KEY = 7;
    LINEAR_KEY = 8;
  }

  // The type of a table partition.
  Type type = 2;

  // The expression is the expression of a table partition.
  // For PostgreSQL, the expression is the text of {FOR VALUES partition_bound_spec}, see https://www.postgresql.org/docs/current/sql-createtable.html.
  // For MySQL, the expression is the `expr` or `column_list` of the following syntax.
  // PARTITION BY
  //    { [LINEAR] HASH(expr)
  //    | [LINEAR] KEY [ALGORITHM={1 | 2}] (column_list)
  //    | RANGE{(expr) | COLUMNS(column_list)}
  //    | LIST{(expr) | COLUMNS(column_list)} }.
  string expression = 3;

  // The value is the value of a table partition.
  // For MySQL, the value is for RANGE and LIST partition types,
  // - For a RANGE partition, it contains the value set in the partition's VALUES LESS THAN clause, which can be either an integer or MAXVALUE.
  // - For a LIST partition, this column contains the values defined in the partition's VALUES IN clause, which is a list of comma-separated integer values.
  // - For others, it's an empty string.
  string value = 4;

  // The use_default is whether the users use the default partition, it stores the different value for different database engines.
  // For MySQL, it's [INT] type, 0 means not use default partition, otherwise, it's equals to number in syntax [SUB]PARTITION {number}.
  string use_default = 5;

  // The subpartitions is the list of subpartitions in a table partition.
  repeated BranchTablePartitionMetadata subpartitions = 6;
}

// BranchColumnMetadata is the metadata for columns used in branch.
message BranchColumnMetadata {
  // The name is the name of a column.
  string name = 1;

  // The position is the position in columns.
  int32 position = 2;

  // The default_value is the default value of a column.
  oneof default_value {
    // The default is the default of a column. Use google.protobuf.StringValue to distinguish between an empty string default value or no default.
    google.protobuf.StringValue default = 3;
    bool default_null = 4;
    string default_expression = 5;
  }

  // The on_update is the on update action of a column.
  // For MySQL like databases, it's only supported for TIMESTAMP columns with CURRENT_TIMESTAMP as on update value.
  string on_update = 13;

  // The nullable is the nullable of a column.
  bool nullable = 6;

  // The type is the type of a column.
  string type = 7;

  // The character_set is the character_set of a column.
  string character_set = 8;

  // The collation is the collation of a column.
  string collation = 9;

  // The comment is the comment of a column.
  // classification and user_comment is parsed from the comment.
  string comment = 10;

  // The classification is the classification of a table parsed from the comment.
  string classification = 11;

  // The user_comment is the user comment of a table parsed from the comment.
  string user_comment = 12;
}

// BranchViewMetadata is the metadata for views used in branch.
message BranchViewMetadata {
  // The name is the name of a view.
  string name = 1;

  // The definition is the definition of a view.
  string definition = 2;

  // The comment is the comment of a view.
  string comment = 3;

  // The dependent_columns is the list of dependent columns of a view.
  repeated BranchDependentColumn dependent_columns = 4;

  // The last updater of the object.
  // Format: users/{email}
  string updater = 5 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The timestamp when the object was last updated.
  google.protobuf.Timestamp update_time = 6 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// BranchDependentColumn is the metadata for dependent columns used in branch.
message BranchDependentColumn {
  // The schema is the schema of a reference column.
  string schema = 1;

  // The table is the table of a reference column.
  string table = 2;

  // The column is the name of a reference column.
  string column = 3;
}

// BranchMaterializedViewMetadata is the metadata for materialized views used in branch.
message BranchMaterializedViewMetadata {
  // The name is the name of a view.
  string name = 1;

  // The definition is the definition of a view.
  string definition = 2;

  // The comment is the comment of a view.
  string comment = 3;

  // The dependent_columns is the list of dependent columns of a view.
  repeated BranchDependentColumn dependent_columns = 4;
}

// BranchFunctionMetadata is the metadata for functions used in branch.
message BranchFunctionMetadata {
  // The name is the name of a function.
  string name = 1;

  // The definition is the definition of a function.
  string definition = 2;

  // The last updater of the object.
  // Format: users/{email}
  string updater = 3 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The timestamp when the object was last updated.
  google.protobuf.Timestamp update_time = 4 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// BranchProcedureMetadata is the metadata for procedures used in branch.
message BranchProcedureMetadata {
  // The name is the name of a procedure.
  string name = 1;

  // The definition is the definition of a procedure.
  string definition = 2;

  // The last updater of the object.
  // Format: users/{email}
  string updater = 3 [(google.api.field_behavior) = OUTPUT_ONLY];

  // The timestamp when the object was last updated.
  google.protobuf.Timestamp update_time = 4 [(google.api.field_behavior) = OUTPUT_ONLY];
}

// BranchIndexMetadata is the metadata for indexes used in branch.
message BranchIndexMetadata {
  // The name is the name of an index.
  string name = 1;

  // The expressions are the ordered columns or expressions of an index.
  // This could refer to a column or an expression.
  repeated string expressions = 2;

  // The key_lengths are the ordered key lengths of an index.
  // If the key length is not specified, it's -1.
  repeated int64 key_length = 9;

  // The type is the type of an index.
  string type = 3;

  // The unique is whether the index is unique.
  bool unique = 4;

  // The primary is whether the index is a primary key index.
  bool primary = 5;

  // The visible is whether the index is visible.
  bool visible = 6;

  // The comment is the comment of an index.
  string comment = 7;

  // The definition of an index.
  string definition = 8;
}

// BranchExtensionMetadata is the metadata for extensions used in branch.
message BranchExtensionMetadata {
  // The name is the name of an extension.
  string name = 1;

  // The schema is the extension that is installed to. But the extension usage is not limited to the schema.
  string schema = 2;

  // The version is the version of an extension.
  string version = 3;

  // The description is the description of an extension.
  string description = 4;
}

// BranchForeignKeyMetadata is the metadata for foreign keys used in branch.
message BranchForeignKeyMetadata {
  // The name is the name of a foreign key.
  string name = 1;

  // The columns are the ordered referencing columns of a foreign key.
  repeated string columns = 2;

  // The referenced_schema is the referenced schema name of a foreign key.
  // It is an empty string for databases without such concept such as MySQL.
  string referenced_schema = 3;

  // The referenced_table is the referenced table name of a foreign key.
  string referenced_table = 4;

  // The referenced_columns are the ordered referenced columns of a foreign key.
  repeated string referenced_columns = 5;

  // The on_delete is the on delete action of a foreign key.
  string on_delete = 6;

  // The on_update is the on update action of a foreign key.
  string on_update = 7;

  // The match_type is the match type of a foreign key.
  // The match_type is the PostgreSQL specific field.
  // It's empty string for other databases.
  string match_type = 8;
}
