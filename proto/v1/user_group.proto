syntax = "proto3";

package bytebase.v1;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "v1/annotation.proto";

option go_package = "generated-go/v1";

service UserGroupService {
  rpc GetUserGroup(GetUserGroupRequest) returns (UserGroup) {
    option (google.api.http) = {get: "/v1/{name=groups/*}"};
    option (google.api.method_signature) = "name";
    option (bytebase.v1.permission) = "bb.userGroups.get";
    option (bytebase.v1.auth_method) = IAM;
  }

  rpc ListUserGroups(ListUserGroupsRequest) returns (ListUserGroupsResponse) {
    option (google.api.http) = {get: "/v1/groups"};
    option (google.api.method_signature) = "";
    option (bytebase.v1.permission) = "bb.userGroups.list";
    option (bytebase.v1.auth_method) = IAM;
  }

  rpc CreateUserGroup(CreateUserGroupRequest) returns (UserGroup) {
    option (google.api.http) = {
      post: "/v1/groups"
      body: "group"
    };
    option (google.api.method_signature) = "group";
    option (bytebase.v1.permission) = "bb.userGroups.create";
    option (bytebase.v1.auth_method) = IAM;
  }

  // UpdateUserGroup updates the user group.
  // Users with "bb.userGroups.update" permission on the workspace or the user group owner can access this method.
  rpc UpdateUserGroup(UpdateUserGroupRequest) returns (UserGroup) {
    option (google.api.http) = {
      patch: "/v1/{group.name=groups/*}"
      body: "group"
    };
    option (google.api.method_signature) = "group,update_mask";
    option (bytebase.v1.permission) = "bb.userGroups.update";
    option (bytebase.v1.auth_method) = CUSTOM;
  }

  rpc DeleteUserGroup(DeleteUserGroupRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {delete: "/v1/{name=groups/*}"};
    option (google.api.method_signature) = "name";
    option (bytebase.v1.permission) = "bb.userGroups.delete";
    option (bytebase.v1.auth_method) = IAM;
  }
}

message GetUserGroupRequest {
  // The name of the group to retrieve.
  // Format: groups/{email}
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "bytebase.com/UserGroup"}
  ];
}

message ListUserGroupsRequest {
  // The maximum number of groups to return. The service may return fewer than
  // this value.
  // If unspecified, at most 50 groups will be returned.
  // The maximum value is 1000; values above 1000 will be coerced to 1000.
  int32 page_size = 1;

  // A page token, received from a previous `ListUsers` call.
  // Provide this to retrieve the subsequent page.
  //
  // When paginating, all other parameters provided to `ListUsers` must match
  // the call that provided the page token.
  string page_token = 2;
}

message ListUserGroupsResponse {
  // The groups from the specified request.
  repeated UserGroup groups = 1;

  // A token, which can be sent as `page_token` to retrieve the next page.
  // If this field is omitted, there are no subsequent pages.
  string next_page_token = 2;
}

message CreateUserGroupRequest {
  // The group to create.
  UserGroup group = 1 [(google.api.field_behavior) = REQUIRED];
}

message UpdateUserGroupRequest {
  // The group to update.
  //
  // The group's `name` field is used to identify the group to update.
  // Format: groups/{email}
  UserGroup group = 1 [(google.api.field_behavior) = REQUIRED];

  // The list of fields to update.
  google.protobuf.FieldMask update_mask = 2;
}

message DeleteUserGroupRequest {
  // The name of the group to delete.
  // Format: groups/{email}
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "bytebase.com/UserGroup"}
  ];
}

message UserGroupMember {
  // Member is the principal who belong to this user group.
  //
  // Format: users/hello@world.com
  string member = 1;

  enum Role {
    ROLE_UNSPECIFIED = 0;
    OWNER = 1;
    MEMBER = 2;
  }

  Role role = 2;
}

message UserGroup {
  option (google.api.resource) = {
    type: "bytebase.com/UserGroup"
    pattern: "groups/{userGroup}"
  };

  // The name of the group to retrieve.
  // Format: groups/{userGroup}, userGroup is an email.
  string name = 1 [(google.api.field_behavior) = OUTPUT_ONLY];

  string title = 2;

  string description = 3;

  // The name for the creator.
  // Format: users/hello@world.com
  string creator = 4 [(google.api.field_behavior) = OUTPUT_ONLY];

  repeated UserGroupMember members = 5;

  // The timestamp when the group was created.
  google.protobuf.Timestamp create_time = 6 [(google.api.field_behavior) = OUTPUT_ONLY];
}
