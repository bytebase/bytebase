package mysql

// Framework code is generated by the generator.

import (
	"testing"

	"github.com/bytebase/bytebase/plugin/advisor"
)

func TestInsertUpdateNoLimit(t *testing.T) {
	tests := []advisor.TestCase{
		{
			Statement: ``,
			Want: []advisor.Advice{
				{
					Status:  advisor.Success,
					Code:    advisor.Ok,
					Title:   "OK",
					Content: "",
				},
			},
		},
		{
			Statement: `INSERT INTO tech_book SELECT * FROM tech_book LIMIT 1`,
			Want: []advisor.Advice{
				{
					Status:  advisor.Warn,
					Code:    advisor.InsertUseLimit,
					Title:   "insert-update.no-limit",
					Content: "LIMIT clause is forbidden in INSERT and UPDATE statement, but \"INSERT INTO tech_book SELECT * FROM tech_book LIMIT 1\" uses",
					Line:    1,
				},
			},
		},
		{
			Statement: `INSERT INTO tech_book SELECT * FROM tech_book UNION SELECT * FROM tech_book LIMIT 1`,
			Want: []advisor.Advice{
				{
					Status:  advisor.Warn,
					Code:    advisor.InsertUseLimit,
					Title:   "insert-update.no-limit",
					Content: "LIMIT clause is forbidden in INSERT and UPDATE statement, but \"INSERT INTO tech_book SELECT * FROM tech_book UNION SELECT * FROM tech_book LIMIT 1\" uses",
					Line:    1,
				},
			},
		},
		{
			Statement: `UPDATE tech_book SET name = 'my name' LIMIT 10`,
			Want: []advisor.Advice{
				{
					Status:  advisor.Warn,
					Code:    advisor.UpdateUseLimit,
					Title:   "insert-update.no-limit",
					Content: "LIMIT clause is forbidden in INSERT and UPDATE statement, but \"UPDATE tech_book SET name = 'my name' LIMIT 10\" uses",
					Line:    1,
				},
			},
		},
	}

	advisor.RunSQLReviewRuleTests(t, tests, &InsertUpdateNoLimitAdvisor{}, &advisor.SQLReviewRule{
		Type:    advisor.SchemaRuleInsertUpdateNoLimit,
		Level:   advisor.SchemaRuleLevelWarning,
		Payload: "",
	}, advisor.MockMySQLDatabase)
}
