package mysql

// Framework code is generated by the generator.

import (
	"testing"

	"github.com/bytebase/bytebase/plugin/advisor"
)

func TestColumnExists(t *testing.T) {
	tests := []advisor.TestCase{
		{
			Statement: `INSERT INTO t(a, b, c) values(1, 2, 3)`,
			Want: []advisor.Advice{
				{
					Status:  advisor.Success,
					Code:    advisor.Ok,
					Title:   "OK",
					Content: "",
				},
			},
		},
		{
			Statement: `INSERT INTO tech_book(id, name) values(1, "book1")`,
			Want: []advisor.Advice{
				{
					Status:  advisor.Success,
					Code:    advisor.Ok,
					Title:   "OK",
					Content: "",
				},
			},
		},
		{
			Statement: `INSERT INTO tech_book(aa, bb, cc) values(1, 2, 3)`,
			Want: []advisor.Advice{
				{
					Status:  advisor.Warn,
					Code:    advisor.ColumnNotExists,
					Title:   "column.exists",
					Content: "Column `tech_book`.`aa` not exists, related statement: \"INSERT INTO tech_book(aa, bb, cc) values(1, 2, 3)\"",
					Line:    1,
				},
				{
					Status:  advisor.Warn,
					Code:    advisor.ColumnNotExists,
					Title:   "column.exists",
					Content: "Column `tech_book`.`bb` not exists, related statement: \"INSERT INTO tech_book(aa, bb, cc) values(1, 2, 3)\"",
					Line:    1,
				},
				{
					Status:  advisor.Warn,
					Code:    advisor.ColumnNotExists,
					Title:   "column.exists",
					Content: "Column `tech_book`.`cc` not exists, related statement: \"INSERT INTO tech_book(aa, bb, cc) values(1, 2, 3)\"",
					Line:    1,
				},
			},
		},
		{
			Statement: `ALTER TABLE tech_book ALTER COLUMN aa DROP DEFAULT`,
			Want: []advisor.Advice{
				{
					Status:  advisor.Warn,
					Code:    advisor.ColumnNotExists,
					Title:   "column.exists",
					Content: "Column `tech_book`.`aa` not exists, related statement: \"ALTER TABLE tech_book ALTER COLUMN aa DROP DEFAULT\"",
					Line:    1,
				},
			},
		},
		{
			Statement: `ALTER TABLE tech_book RENAME COLUMN aa TO bb`,
			Want: []advisor.Advice{
				{
					Status:  advisor.Warn,
					Code:    advisor.ColumnNotExists,
					Title:   "column.exists",
					Content: "Column `tech_book`.`aa` not exists, related statement: \"ALTER TABLE tech_book RENAME COLUMN aa TO bb\"",
					Line:    1,
				},
			},
		},
		{
			Statement: `ALTER TABLE tech_book CHANGE COLUMN aa bb int`,
			Want: []advisor.Advice{
				{
					Status:  advisor.Warn,
					Code:    advisor.ColumnNotExists,
					Title:   "column.exists",
					Content: "Column `tech_book`.`aa` not exists, related statement: \"ALTER TABLE tech_book CHANGE COLUMN aa bb int\"",
					Line:    1,
				},
			},
		},
		{
			Statement: `ALTER TABLE tech_book DROP COLUMN aa`,
			Want: []advisor.Advice{
				{
					Status:  advisor.Warn,
					Code:    advisor.ColumnNotExists,
					Title:   "column.exists",
					Content: "Column `tech_book`.`aa` not exists, related statement: \"ALTER TABLE tech_book DROP COLUMN aa\"",
					Line:    1,
				},
			},
		},
		{
			Statement: `ALTER TABLE tech_book MODIFY COLUMN aa int`,
			Want: []advisor.Advice{
				{
					Status:  advisor.Warn,
					Code:    advisor.ColumnNotExists,
					Title:   "column.exists",
					Content: "Column `tech_book`.`aa` not exists, related statement: \"ALTER TABLE tech_book MODIFY COLUMN aa int\"",
					Line:    1,
				},
			},
		},
		{
			Statement: `CREATE INDEX idx_aa on tech_book(aa)`,
			Want: []advisor.Advice{
				{
					Status:  advisor.Warn,
					Code:    advisor.ColumnNotExists,
					Title:   "column.exists",
					Content: "Column `tech_book`.`aa` not exists, related statement: \"CREATE INDEX idx_aa on tech_book(aa)\"",
					Line:    1,
				},
			},
		},
	}

	advisor.RunSQLReviewRuleTests(t, tests, &ColumnExistsAdvisor{}, &advisor.SQLReviewRule{
		Type:    advisor.SchemaRuleColumnExists,
		Level:   advisor.SchemaRuleLevelWarning,
		Payload: "",
	}, advisor.MockMySQLDatabase)
}
