package mysql

// Framework code is generated by the generator.

import (
	"encoding/json"
	"testing"

	"github.com/stretchr/testify/require"

	"github.com/bytebase/bytebase/plugin/advisor"
)

func TestCharsetAllowlist(t *testing.T) {
	tests := []advisor.TestCase{
		{
			Statement: `CREATE TABLE t(a int) CHARSET utf8mb4`,
			Want: []advisor.Advice{
				{
					Status:  advisor.Success,
					Code:    advisor.Ok,
					Title:   "OK",
					Content: "",
				},
			},
		},
		{
			Statement: `CREATE TABLE t(a varchar(255))`,
			Want: []advisor.Advice{
				{
					Status:  advisor.Success,
					Code:    advisor.Ok,
					Title:   "OK",
					Content: "",
				},
			},
		},
		{
			Statement: `CREATE TABLE t(a int) CHARSET ascii`,
			Want: []advisor.Advice{
				{
					Status:  advisor.Warn,
					Code:    advisor.DisabledCharset,
					Title:   "system.charset.allowlist",
					Content: "\"CREATE TABLE t(a int) CHARSET ascii\" used disabled charset 'ascii'",
					Line:    1,
				},
			},
		},
		{
			Statement: `
				CREATE TABLE t(a int);
				ALTER TABLE t CHARSET ascii`,
			Want: []advisor.Advice{
				{
					Status:  advisor.Warn,
					Code:    advisor.DisabledCharset,
					Title:   "system.charset.allowlist",
					Content: "\"ALTER TABLE t CHARSET ascii\" used disabled charset 'ascii'",
					Line:    3,
				},
			},
		},
		{
			Statement: `ALTER DATABASE test CHARSET ascii`,
			Want: []advisor.Advice{
				{
					Status:  advisor.Warn,
					Code:    advisor.DisabledCharset,
					Title:   "system.charset.allowlist",
					Content: "\"ALTER DATABASE test CHARSET ascii\" used disabled charset 'ascii'",
					Line:    1,
				},
			},
		},
		{
			Statement: `CREATE TABLE t(a varchar(255) CHARSET ascii)`,
			Want: []advisor.Advice{
				{
					Status:  advisor.Warn,
					Code:    advisor.DisabledCharset,
					Title:   "system.charset.allowlist",
					Content: "\"CREATE TABLE t(a varchar(255) CHARSET ascii)\" used disabled charset 'ascii'",
					Line:    1,
				},
			},
		},
		{
			Statement: `
				CREATE TABLE t(b int);
				ALTER TABLE t ADD COLUMN a varchar(255) CHARSET ascii`,
			Want: []advisor.Advice{
				{
					Status:  advisor.Warn,
					Code:    advisor.DisabledCharset,
					Title:   "system.charset.allowlist",
					Content: "\"ALTER TABLE t ADD COLUMN a varchar(255) CHARSET ascii\" used disabled charset 'ascii'",
					Line:    3,
				},
			},
		},
		{
			Statement: `
				CREATE TABLE t(a int);
				ALTER TABLE t MODIFY COLUMN a varchar(255) CHARSET ascii`,
			Want: []advisor.Advice{
				{
					Status:  advisor.Warn,
					Code:    advisor.DisabledCharset,
					Title:   "system.charset.allowlist",
					Content: "\"ALTER TABLE t MODIFY COLUMN a varchar(255) CHARSET ascii\" used disabled charset 'ascii'",
					Line:    3,
				},
			},
		},
		{
			Statement: `
				CREATE TABLE t(a int);
				ALTER TABLE t CHANGE COLUMN a a varchar(255) CHARSET ascii`,
			Want: []advisor.Advice{
				{
					Status:  advisor.Warn,
					Code:    advisor.DisabledCharset,
					Title:   "system.charset.allowlist",
					Content: "\"ALTER TABLE t CHANGE COLUMN a a varchar(255) CHARSET ascii\" used disabled charset 'ascii'",
					Line:    3,
				},
			},
		},
		{
			Statement: "/* this is a comment */",
			Want: []advisor.Advice{
				{
					Status:  advisor.Success,
					Code:    advisor.Ok,
					Title:   "OK",
					Content: "",
				},
			},
		},
	}

	payload, err := json.Marshal(advisor.StringArrayTypeRulePayload{
		List: []string{"utf8mb4"},
	})
	require.NoError(t, err)
	advisor.RunSQLReviewRuleTests(t, tests, &CharsetAllowlistAdvisor{}, &advisor.SQLReviewRule{
		Type:    advisor.SchemaRuleCharsetAllowlist,
		Level:   advisor.SchemaRuleLevelWarning,
		Payload: string(payload),
	}, advisor.MockMySQLDatabase)
}
