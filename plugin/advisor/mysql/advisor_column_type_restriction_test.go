package mysql

// Framework code is generated by the generator.

import (
	"encoding/json"
	"testing"

	"github.com/stretchr/testify/require"

	"github.com/bytebase/bytebase/plugin/advisor"
)

func TestColumnTypeRestriction(t *testing.T) {
	tests := []advisor.TestCase{
		{
			Statement: `CREATE TABLE t(a int)`,
			Want: []advisor.Advice{
				{
					Status:  advisor.Success,
					Code:    advisor.Ok,
					Title:   "OK",
					Content: "",
				},
			},
		},
		{
			Statement: `CREATE TABLE t(a JSON, b BLOB, c TEXT)`,
			Want: []advisor.Advice{
				{
					Status:  advisor.Warn,
					Code:    advisor.DisabledColumnType,
					Title:   "column.type-restriction",
					Content: "Disallow column type JSON but column `t`.`a` is",
					Line:    1,
				},
				{
					Status:  advisor.Warn,
					Code:    advisor.DisabledColumnType,
					Title:   "column.type-restriction",
					Content: "Disallow column type BLOB but column `t`.`b` is",
					Line:    1,
				},
				{
					Status:  advisor.Warn,
					Code:    advisor.DisabledColumnType,
					Title:   "column.type-restriction",
					Content: "Disallow column type TEXT but column `t`.`c` is",
					Line:    1,
				},
			},
		},
		{
			Statement: `
				CREATE TABLE t(d int);
				ALTER TABLE t add COLUMN (a JSON, b BLOB, c TEXT)`,
			Want: []advisor.Advice{
				{
					Status:  advisor.Warn,
					Code:    advisor.DisabledColumnType,
					Title:   "column.type-restriction",
					Content: "Disallow column type JSON but column `t`.`a` is",
					Line:    3,
				},
				{
					Status:  advisor.Warn,
					Code:    advisor.DisabledColumnType,
					Title:   "column.type-restriction",
					Content: "Disallow column type BLOB but column `t`.`b` is",
					Line:    3,
				},
				{
					Status:  advisor.Warn,
					Code:    advisor.DisabledColumnType,
					Title:   "column.type-restriction",
					Content: "Disallow column type TEXT but column `t`.`c` is",
					Line:    3,
				},
			},
		},
		{
			Statement: `
				CREATE TABLE t(c int, b int);
				ALTER TABLE t CHANGE COLUMN c a JSON, MODIFY b BLOB`,
			Want: []advisor.Advice{
				{
					Status:  advisor.Warn,
					Code:    advisor.DisabledColumnType,
					Title:   "column.type-restriction",
					Content: "Disallow column type JSON but column `t`.`a` is",
					Line:    3,
				},
				{
					Status:  advisor.Warn,
					Code:    advisor.DisabledColumnType,
					Title:   "column.type-restriction",
					Content: "Disallow column type BLOB but column `t`.`b` is",
					Line:    3,
				},
			},
		},
	}

	payload, err := json.Marshal(advisor.StringArrayTypeRulePayload{
		List: []string{"JSON", "BLOB", "TEXT"},
	})
	require.NoError(t, err)
	advisor.RunSQLReviewRuleTests(t, tests, &ColumnTypeRestrictionAdvisor{}, &advisor.SQLReviewRule{
		Type:    advisor.SchemaRuleColumnTypeRestriction,
		Level:   advisor.SchemaRuleLevelWarning,
		Payload: string(payload),
	}, advisor.MockMySQLDatabase)
}
