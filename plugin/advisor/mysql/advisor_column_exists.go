package mysql

// Framework code is generated by the generator.

import (
	"fmt"

	"github.com/pingcap/tidb/parser/ast"

	"github.com/bytebase/bytebase/plugin/advisor"
	"github.com/bytebase/bytebase/plugin/advisor/catalog"
	"github.com/bytebase/bytebase/plugin/advisor/db"
)

var (
	_ advisor.Advisor = (*ColumnExistsAdvisor)(nil)
	_ ast.Visitor     = (*columnExistsChecker)(nil)
)

func init() {
	advisor.Register(db.MySQL, advisor.MySQLColumnExists, &ColumnExistsAdvisor{})
	advisor.Register(db.TiDB, advisor.MySQLColumnExists, &ColumnExistsAdvisor{})
}

// ColumnExistsAdvisor is the advisor checking for column existence.
type ColumnExistsAdvisor struct {
}

// Check checks for column existence.
func (*ColumnExistsAdvisor) Check(ctx advisor.Context, statement string) ([]advisor.Advice, error) {
	stmtList, errAdvice := parseStatement(statement, ctx.Charset, ctx.Collation)
	if errAdvice != nil {
		return errAdvice, nil
	}

	level, err := advisor.NewStatusBySQLReviewRuleLevel(ctx.Rule.Level)
	if err != nil {
		return nil, err
	}
	checker := &columnExistsChecker{
		level:    level,
		title:    string(ctx.Rule.Type),
		database: ctx.Database,
	}

	for _, stmt := range stmtList {
		checker.text = stmt.Text()
		checker.line = stmt.OriginTextPosition()
		(stmt).Accept(checker)
	}

	if len(checker.adviceList) == 0 {
		checker.adviceList = append(checker.adviceList, advisor.Advice{
			Status:  advisor.Success,
			Code:    advisor.Ok,
			Title:   "OK",
			Content: "",
		})
	}
	return checker.adviceList, nil
}

type columnExistsChecker struct {
	adviceList []advisor.Advice
	level      advisor.Status
	title      string
	text       string
	line       int
	database   *catalog.Database
}

type columnData struct {
	table  string
	column string
}

// Enter implements the ast.Visitor interface.
func (checker *columnExistsChecker) Enter(in ast.Node) (ast.Node, bool) {
	var columnList []columnData
	switch node := in.(type) {
	case *ast.InsertStmt:
		if table, ok := getInsertTableName(node.Table); ok {
			for _, column := range node.Columns {
				columnList = append(columnList, columnData{table: table, column: column.Name.O})
			}
		}
	case *ast.AlterTableStmt:
		table := node.Table.Name.O
		for _, spec := range node.Specs {
			switch spec.Tp {
			case ast.AlterTableAlterColumn:
				columnList = append(columnList, columnData{table: table, column: spec.NewColumns[0].Name.Name.O})
			case ast.AlterTableRenameColumn:
				columnList = append(columnList, columnData{table: table, column: spec.OldColumnName.Name.O})
			case ast.AlterTableChangeColumn, ast.AlterTableDropColumn:
				if !spec.IfExists {
					columnList = append(columnList, columnData{table: table, column: spec.OldColumnName.Name.O})
				}
			case ast.AlterTableModifyColumn:
				if !spec.IfExists {
					columnList = append(columnList, columnData{table: table, column: spec.NewColumns[0].Name.Name.O})
				}
			}
		}
	case *ast.CreateIndexStmt:
		for _, key := range node.IndexPartSpecifications {
			if key.Expr == nil {
				columnList = append(columnList, columnData{table: node.Table.Name.O, column: key.Column.Name.O})
			}
		}
	}

	for _, column := range columnList {
		table := checker.database.FindTable(&catalog.TableFind{TableName: column.table})
		if table == nil {
			continue
		}

		if !columnExists(table, column.column) {
			checker.adviceList = append(checker.adviceList, advisor.Advice{
				Status:  checker.level,
				Code:    advisor.ColumnNotExists,
				Title:   checker.title,
				Content: fmt.Sprintf("Column `%s`.`%s` not exists, related statement: \"%s\"", column.table, column.column, checker.text),
				Line:    checker.line,
			})
		}
	}

	return in, false
}

// Leave implements the ast.Visitor interface.
func (*columnExistsChecker) Leave(in ast.Node) (ast.Node, bool) {
	return in, true
}

func columnExists(table *catalog.Table, column string) bool {
	for _, col := range table.ColumnList {
		if col.Name == column {
			return true
		}
	}
	return false
}
