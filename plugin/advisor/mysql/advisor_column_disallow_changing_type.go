package mysql

// Framework code is generated by the generator.

import (
	"fmt"
	"strings"

	"github.com/pingcap/tidb/parser/ast"
	"github.com/pingcap/tidb/parser/mysql"
	"github.com/pingcap/tidb/parser/types"

	"github.com/bytebase/bytebase/plugin/advisor"
	"github.com/bytebase/bytebase/plugin/advisor/catalog"
	"github.com/bytebase/bytebase/plugin/advisor/db"
)

var (
	_ advisor.Advisor = (*ColumnDisallowChangingTypeAdvisor)(nil)
	_ ast.Visitor     = (*columnDisallowChangingTypeChecker)(nil)
)

func init() {
	advisor.Register(db.MySQL, advisor.MySQLColumnDisallowChangingType, &ColumnDisallowChangingTypeAdvisor{})
	advisor.Register(db.TiDB, advisor.MySQLColumnDisallowChangingType, &ColumnDisallowChangingTypeAdvisor{})
}

// ColumnDisallowChangingTypeAdvisor is the advisor checking for disallow changing column type..
type ColumnDisallowChangingTypeAdvisor struct {
}

// Check checks for disallow changing column type..
func (*ColumnDisallowChangingTypeAdvisor) Check(ctx advisor.Context, statement string) ([]advisor.Advice, error) {
	stmtList, errAdvice := parseStatement(statement, ctx.Charset, ctx.Collation)
	if errAdvice != nil {
		return errAdvice, nil
	}

	level, err := advisor.NewStatusBySQLReviewRuleLevel(ctx.Rule.Level)
	if err != nil {
		return nil, err
	}
	checker := &columnDisallowChangingTypeChecker{
		level:    level,
		title:    string(ctx.Rule.Type),
		database: ctx.Database,
	}

	for _, stmt := range stmtList {
		checker.text = stmt.Text()
		checker.line = stmt.OriginTextPosition()
		(stmt).Accept(checker)
	}

	if len(checker.adviceList) == 0 {
		checker.adviceList = append(checker.adviceList, advisor.Advice{
			Status:  advisor.Success,
			Code:    advisor.Ok,
			Title:   "OK",
			Content: "",
		})
	}
	return checker.adviceList, nil
}

type columnDisallowChangingTypeChecker struct {
	adviceList []advisor.Advice
	level      advisor.Status
	title      string
	text       string
	line       int
	database   *catalog.Database
}

// Enter implements the ast.Visitor interface.
func (checker *columnDisallowChangingTypeChecker) Enter(in ast.Node) (ast.Node, bool) {
	changeType := false
	if node, ok := in.(*ast.AlterTableStmt); ok {
		for _, spec := range node.Specs {
			switch spec.Tp {
			case ast.AlterTableChangeColumn:
				changeType = checker.changeColumnType(node.Table.Name.O, spec.OldColumnName.Name.O, getTypeString(spec.NewColumns[0].Tp))
			case ast.AlterTableModifyColumn:
				changeType = checker.changeColumnType(node.Table.Name.O, spec.NewColumns[0].Name.Name.O, getTypeString(spec.NewColumns[0].Tp))
			}
			if changeType {
				break
			}
		}
	}

	if changeType {
		checker.adviceList = append(checker.adviceList, advisor.Advice{
			Status:  checker.level,
			Code:    advisor.ChangeColumnType,
			Title:   checker.title,
			Content: fmt.Sprintf("\"%s\" changes column type", checker.text),
			Line:    checker.line,
		})
	}

	return in, false
}

// Leave implements the ast.Visitor interface.
func (*columnDisallowChangingTypeChecker) Leave(in ast.Node) (ast.Node, bool) {
	return in, true
}

func getTypeString(tp *types.FieldType) string {
	switch tp.GetType() {
	case mysql.TypeTiny, mysql.TypeShort, mysql.TypeInt24, mysql.TypeLong, mysql.TypeLonglong:
		// Referring this issue tidb#6688, the integer max display length is deprecated in MySQL 8.0.
		// Since the length doesn't take any effect in TiDB storage or showing result, we remove it here.
		s := tp.String()
		if idx := strings.Index(s, "("); idx != -1 {
			s = s[:idx]
		}
		return s
	default:
		return tp.String()
	}
}

func (checker *columnDisallowChangingTypeChecker) changeColumnType(tableName string, columName string, newType string) bool {
	column := checker.database.FindColumn(&catalog.ColumnFind{
		TableName:  tableName,
		ColumnName: columName,
	})

	if column == nil {
		return false
	}

	return !strings.EqualFold(column.Type, newType)
}
