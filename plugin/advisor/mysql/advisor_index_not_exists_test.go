package mysql

// Framework code is generated by the generator.

import (
	"testing"

	"github.com/bytebase/bytebase/plugin/advisor"
)

func TestIndexNotExists(t *testing.T) {
	tests := []advisor.TestCase{
		{
			Statement: `CREATE INDEX idx on t(a)`,
			Want: []advisor.Advice{
				{
					Status:  advisor.Success,
					Code:    advisor.Ok,
					Title:   "OK",
					Content: "",
				},
			},
		},
		{
			Statement: `CREATE INDEX old_index on tech_book(a)`,
			Want: []advisor.Advice{
				{
					Status:  advisor.Warn,
					Code:    advisor.IndexExists,
					Title:   "index.not-exists",
					Content: "Index `old_index` in table `tech_book` exists",
					Line:    1,
				},
			},
		},
		{
			Statement: `ALTER TABLE tech_book ADD CONSTRAINT old_uk UNIQUE KEY (a)`,
			Want: []advisor.Advice{
				{
					Status:  advisor.Warn,
					Code:    advisor.IndexExists,
					Title:   "index.not-exists",
					Content: "Index `old_uk` in table `tech_book` exists",
					Line:    1,
				},
			},
		},
		{
			Statement: `ALTER TABLE tech_book ADD UNIQUE KEY old_uk (a)`,
			Want: []advisor.Advice{
				{
					Status:  advisor.Warn,
					Code:    advisor.IndexExists,
					Title:   "index.not-exists",
					Content: "Index `old_uk` in table `tech_book` exists",
					Line:    1,
				},
			},
		},
		{
			Statement: `ALTER TABLE tech_book ADD KEY old_index (a)`,
			Want: []advisor.Advice{
				{
					Status:  advisor.Warn,
					Code:    advisor.IndexExists,
					Title:   "index.not-exists",
					Content: "Index `old_index` in table `tech_book` exists",
					Line:    1,
				},
			},
		},
	}

	advisor.RunSQLReviewRuleTests(t, tests, &IndexNotExistsAdvisor{}, &advisor.SQLReviewRule{
		Type:    advisor.SchemaRuleIndexNotExists,
		Level:   advisor.SchemaRuleLevelWarning,
		Payload: "",
	}, advisor.MockMySQLDatabase)
}
