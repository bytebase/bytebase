package mysql

// Framework code is generated by the generator.

import (
	"testing"

	"github.com/bytebase/bytebase/plugin/advisor"
)

func TestTableDisallowPartition(t *testing.T) {
	tests := []advisor.TestCase{
		{
			Statement: `CREATE TABLE t(a int)`,
			Want: []advisor.Advice{
				{
					Status:  advisor.Success,
					Code:    advisor.Ok,
					Title:   "OK",
					Content: "",
				},
			},
		},
		{
			Statement: `CREATE TABLE t(a int) PARTITION BY RANGE (a) (
				PARTITION p0 VALUES LESS THAN (6),
				PARTITION p1 VALUES LESS THAN (11)
			)`,
			Want: []advisor.Advice{
				{
					Status:  advisor.Warn,
					Code:    advisor.CreateTablePartition,
					Title:   "table.disallow-partition",
					Content: "Table partition is forbidden, but \"CREATE TABLE t(a int) PARTITION BY RANGE (a) (\n\t\t\t\tPARTITION p0 VALUES LESS THAN (6),\n\t\t\t\tPARTITION p1 VALUES LESS THAN (11)\n\t\t\t)\" creates",
					Line:    4,
				},
			},
		},
		{
			Statement: `ALTER TABLE tech_book PARTITION BY RANGE (a) (
				PARTITION p0 VALUES LESS THAN (6),
				PARTITION p1 VALUES LESS THAN (11)
			)`,
			Want: []advisor.Advice{
				{
					Status:  advisor.Warn,
					Code:    advisor.CreateTablePartition,
					Title:   "table.disallow-partition",
					Content: "Table partition is forbidden, but \"ALTER TABLE tech_book PARTITION BY RANGE (a) (\n\t\t\t\tPARTITION p0 VALUES LESS THAN (6),\n\t\t\t\tPARTITION p1 VALUES LESS THAN (11)\n\t\t\t)\" creates",
					Line:    4,
				},
			},
		},
	}

	advisor.RunSQLReviewRuleTests(t, tests, &TableDisallowPartitionAdvisor{}, &advisor.SQLReviewRule{
		Type:    advisor.SchemaRuleTableDisallowPartition,
		Level:   advisor.SchemaRuleLevelWarning,
		Payload: "",
	}, advisor.MockMySQLDatabase)
}
