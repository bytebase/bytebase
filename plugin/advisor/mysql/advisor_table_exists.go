package mysql

// Framework code is generated by the generator.

import (
	"fmt"

	"github.com/pingcap/tidb/parser/ast"

	"github.com/bytebase/bytebase/plugin/advisor"
	"github.com/bytebase/bytebase/plugin/advisor/catalog"
	"github.com/bytebase/bytebase/plugin/advisor/db"
)

var (
	_ advisor.Advisor = (*TableExistsAdvisor)(nil)
	_ ast.Visitor     = (*tableExistsChecker)(nil)
)

func init() {
	advisor.Register(db.MySQL, advisor.MySQLTableExists, &TableExistsAdvisor{})
	advisor.Register(db.TiDB, advisor.MySQLTableExists, &TableExistsAdvisor{})
}

// TableExistsAdvisor is the advisor checking for table existence..
type TableExistsAdvisor struct {
}

// Check checks for table existence..
func (*TableExistsAdvisor) Check(ctx advisor.Context, statement string) ([]advisor.Advice, error) {
	stmtList, errAdvice := parseStatement(statement, ctx.Charset, ctx.Collation)
	if errAdvice != nil {
		return errAdvice, nil
	}

	level, err := advisor.NewStatusBySQLReviewRuleLevel(ctx.Rule.Level)
	if err != nil {
		return nil, err
	}
	checker := &tableExistsChecker{
		level:    level,
		title:    string(ctx.Rule.Type),
		database: ctx.Database,
	}

	for _, stmt := range stmtList {
		checker.text = stmt.Text()
		checker.line = stmt.OriginTextPosition()
		(stmt).Accept(checker)
	}

	if len(checker.adviceList) == 0 {
		checker.adviceList = append(checker.adviceList, advisor.Advice{
			Status:  advisor.Success,
			Code:    advisor.Ok,
			Title:   "OK",
			Content: "",
		})
	}
	return checker.adviceList, nil
}

type tableExistsChecker struct {
	adviceList []advisor.Advice
	level      advisor.Status
	title      string
	text       string
	line       int
	database   *catalog.Database
}

// Enter implements the ast.Visitor interface.
func (checker *tableExistsChecker) Enter(in ast.Node) (ast.Node, bool) {
	var tableList []string
	switch node := in.(type) {
	case *ast.InsertStmt:
		if name, ok := getInsertTableName(node.Table); ok {
			tableList = append(tableList, name)
		}
	case *ast.AlterTableStmt:
		tableList = append(tableList, node.Table.Name.O)
	case *ast.CreateTableStmt:
		if node.ReferTable != nil && sameDatabase(node.ReferTable.Schema.O, checker.database.Name) {
			tableList = append(tableList, node.ReferTable.Name.O)
		}
	}

	for _, table := range tableList {
		if checker.database.FindTable(&catalog.TableFind{TableName: table}) == nil {
			checker.adviceList = append(checker.adviceList, advisor.Advice{
				Status:  checker.level,
				Code:    advisor.TableNotExists,
				Title:   checker.title,
				Content: fmt.Sprintf("Table `%s` not exists, related statement: \"%s\"", table, checker.text),
				Line:    checker.line,
			})
		}
	}

	return in, false
}

// Leave implements the ast.Visitor interface.
func (*tableExistsChecker) Leave(in ast.Node) (ast.Node, bool) {
	return in, true
}

func sameDatabase(a string, b string) bool {
	if a == "" || b == "" {
		return true
	}
	return a == b
}

func getInsertTableName(table *ast.TableRefsClause) (string, bool) {
	source, isTableSource := table.TableRefs.Left.(*ast.TableSource)
	nilRight := table.TableRefs.Right == nil
	if isTableSource && nilRight {
		if tableName, ok := source.Source.(*ast.TableName); ok {
			return tableName.Name.O, true
		}
	}
	return "", false
}
