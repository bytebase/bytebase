package mysql

// Framework code is generated by the generator.

import (
	"encoding/json"
	"testing"

	"github.com/stretchr/testify/require"

	"github.com/bytebase/bytebase/plugin/advisor"
)

func TestIndexTotalNumberLimit(t *testing.T) {
	tests := []advisor.TestCase{
		{
			Statement: `CREATE TABLE t(a int, b int, c int, unique key(a, b, c))`,
			Want: []advisor.Advice{
				{
					Status:  advisor.Success,
					Code:    advisor.Ok,
					Title:   "OK",
					Content: "",
				},
			},
		},
		{
			Statement: `CREATE INDEX idx_id_name on tech_book(id, name)`,
			Want: []advisor.Advice{
				{
					Status:  advisor.Success,
					Code:    advisor.Ok,
					Title:   "OK",
					Content: "",
				},
			},
		},
		{
			// tech_book had 3 indexes originally.
			Statement: `
				CREATE INDEX idx_id_name_1 on tech_book(id, name);
				CREATE INDEX idx_id_name_2 on tech_book(id, name);
				CREATE INDEX idx_id_name_3 on tech_book(id, name);
				CREATE INDEX idx_id_name_4 on tech_book(id, name);
				CREATE INDEX idx_id_name_5 on tech_book(id, name);
				`,
			Want: []advisor.Advice{
				{
					Status:  advisor.Warn,
					Code:    advisor.IndexCountExceedsLimit,
					Title:   "index.total-number-limit",
					Content: "The count of index in table `tech_book` should be no more than 5, but found 8",
					Line:    6,
				},
			},
		},
		{
			Statement: `
				CREATE TABLE t(a int PRIMARY KEY, b int, c int);
				CREATE INDEX idx_a_b_1 on t(a, b);
				CREATE INDEX idx_a_b_2 on t(a, b);
				CREATE INDEX idx_a_b_3 on t(a, b);
				CREATE INDEX idx_a_b_4 on t(a, b);
				CREATE INDEX idx_a_b_5 on t(a, b);
				`,
			Want: []advisor.Advice{
				{
					Status:  advisor.Warn,
					Code:    advisor.IndexCountExceedsLimit,
					Title:   "index.total-number-limit",
					Content: "The count of index in table `t` should be no more than 5, but found 6",
					Line:    7,
				},
			},
		},
		{
			Statement: `
				CREATE TABLE t(
					a int PRIMARY KEY,
					b int,
					c int,
					INDEX idx_a_b_1 (a, b),
					INDEX idx_a_b_2 (a, b),
					INDEX idx_a_b_3 (a, b),
					INDEX idx_a_b_4 (a, b),
					INDEX idx_a_b_5 (a, b));
				`,
			Want: []advisor.Advice{
				{
					Status:  advisor.Warn,
					Code:    advisor.IndexCountExceedsLimit,
					Title:   "index.total-number-limit",
					Content: "The count of index in table `t` should be no more than 5, but found 6",
					Line:    10,
				},
			},
		},
	}

	payload, err := json.Marshal(advisor.NumberTypeRulePayload{
		Number: 5,
	})
	require.NoError(t, err)
	advisor.RunSQLReviewRuleTests(t, tests, &IndexTotalNumberLimitAdvisor{}, &advisor.SQLReviewRule{
		Type:    advisor.SchemaRuleIndexTotalNumberLimit,
		Level:   advisor.SchemaRuleLevelWarning,
		Payload: string(payload),
	}, advisor.MockMySQLDatabase)
}
