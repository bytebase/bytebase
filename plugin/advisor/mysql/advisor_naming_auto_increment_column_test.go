package mysql

// Framework code is generated by the generator.

import (
	"encoding/json"
	"testing"

	"github.com/stretchr/testify/require"

	"github.com/bytebase/bytebase/plugin/advisor"
)

func TestNamingAutoIncrementColumn(t *testing.T) {
	tests := []advisor.TestCase{
		{
			Statement: `CREATE TABLE book(id int AUTO_INCREMENT)`,
			Want: []advisor.Advice{
				{
					Status:  advisor.Success,
					Code:    advisor.Ok,
					Title:   "OK",
					Content: "",
				},
			},
		},
		{
			Statement: `CREATE TABLE book(a int AUTO_INCREMENT)`,
			Want: []advisor.Advice{
				{
					Status:  advisor.Warn,
					Code:    advisor.NamingAutoIncrementColumnConventionMismatch,
					Title:   "naming.column.auto-increment",
					Content: "`book`.`a` mismatches auto_increment column naming convention, naming format should be \"id\"",
					Line:    1,
				},
			},
		},
		{
			Statement: `ALTER TABLE tech_book ADD COLUMN a int AUTO_INCREMENT`,
			Want: []advisor.Advice{
				{
					Status:  advisor.Warn,
					Code:    advisor.NamingAutoIncrementColumnConventionMismatch,
					Title:   "naming.column.auto-increment",
					Content: "`tech_book`.`a` mismatches auto_increment column naming convention, naming format should be \"id\"",
					Line:    1,
				},
			},
		},
		{
			Statement: `ALTER TABLE tech_book CHANGE COLUMN id a int AUTO_INCREMENT`,
			Want: []advisor.Advice{
				{
					Status:  advisor.Warn,
					Code:    advisor.NamingAutoIncrementColumnConventionMismatch,
					Title:   "naming.column.auto-increment",
					Content: "`tech_book`.`a` mismatches auto_increment column naming convention, naming format should be \"id\"",
					Line:    1,
				},
			},
		},
		{
			Statement: `ALTER TABLE tech_book MODIFY COLUMN name int AUTO_INCREMENT`,
			Want: []advisor.Advice{
				{
					Status:  advisor.Warn,
					Code:    advisor.NamingAutoIncrementColumnConventionMismatch,
					Title:   "naming.column.auto-increment",
					Content: "`tech_book`.`name` mismatches auto_increment column naming convention, naming format should be \"id\"",
					Line:    1,
				},
			},
		},
	}

	payload, err := json.Marshal(advisor.NamingRulePayload{
		Format:    "id",
		MaxLength: 64,
	})
	require.NoError(t, err)
	advisor.RunSQLReviewRuleTests(t, tests, &NamingAutoIncrementColumnAdvisor{}, &advisor.SQLReviewRule{
		Type:    advisor.SchemaRuleAutoIncrementColumnNaming,
		Level:   advisor.SchemaRuleLevelWarning,
		Payload: string(payload),
	}, advisor.MockMySQLDatabase)
}
