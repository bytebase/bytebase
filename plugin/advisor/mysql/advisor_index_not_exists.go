package mysql

// Framework code is generated by the generator.

import (
	"fmt"

	"github.com/pingcap/tidb/parser/ast"

	"github.com/bytebase/bytebase/plugin/advisor"
	"github.com/bytebase/bytebase/plugin/advisor/catalog"
	"github.com/bytebase/bytebase/plugin/advisor/db"
)

var (
	_ advisor.Advisor = (*IndexNotExistsAdvisor)(nil)
	_ ast.Visitor     = (*indexNotExistsChecker)(nil)
)

func init() {
	advisor.Register(db.MySQL, advisor.MySQLIndexNotExists, &IndexNotExistsAdvisor{})
	advisor.Register(db.TiDB, advisor.MySQLIndexNotExists, &IndexNotExistsAdvisor{})
}

// IndexNotExistsAdvisor is the advisor checking for index name conflict check.
type IndexNotExistsAdvisor struct {
}

// Check checks for index name conflict check.
func (*IndexNotExistsAdvisor) Check(ctx advisor.Context, statement string) ([]advisor.Advice, error) {
	stmtList, errAdvice := parseStatement(statement, ctx.Charset, ctx.Collation)
	if errAdvice != nil {
		return errAdvice, nil
	}

	level, err := advisor.NewStatusBySQLReviewRuleLevel(ctx.Rule.Level)
	if err != nil {
		return nil, err
	}
	checker := &indexNotExistsChecker{
		level:    level,
		title:    string(ctx.Rule.Type),
		database: ctx.Database,
	}

	for _, stmt := range stmtList {
		checker.text = stmt.Text()
		checker.line = stmt.OriginTextPosition()
		(stmt).Accept(checker)
	}

	if len(checker.adviceList) == 0 {
		checker.adviceList = append(checker.adviceList, advisor.Advice{
			Status:  advisor.Success,
			Code:    advisor.Ok,
			Title:   "OK",
			Content: "",
		})
	}
	return checker.adviceList, nil
}

type indexNotExistsChecker struct {
	adviceList []advisor.Advice
	level      advisor.Status
	title      string
	text       string
	line       int
	database   *catalog.Database
}

// Enter implements the ast.Visitor interface.
func (checker *indexNotExistsChecker) Enter(in ast.Node) (ast.Node, bool) {
	type indexData struct {
		table string
		index string
	}
	var indexList []indexData
	switch node := in.(type) {
	case *ast.AlterTableStmt:
		for _, spec := range node.Specs {
			if spec.Tp == ast.AlterTableAddConstraint {
				switch spec.Constraint.Tp {
				case ast.ConstraintUniq,
					ast.ConstraintUniqIndex,
					ast.ConstraintUniqKey,
					ast.ConstraintIndex,
					ast.ConstraintKey:
					if spec.Constraint.Name != "" &&
						!spec.Constraint.IfNotExists &&
						checker.indexExists(node.Table.Name.O, spec.Constraint.Name) {
						indexList = append(indexList, indexData{
							table: node.Table.Name.O,
							index: spec.Constraint.Name,
						})
					}
				}
			}
		}
	case *ast.CreateIndexStmt:
		if node.IndexName != "" && !node.IfNotExists && checker.indexExists(node.Table.Name.O, node.IndexName) {
			indexList = append(indexList, indexData{
				table: node.Table.Name.O,
				index: node.IndexName,
			})
		}
	}

	for _, index := range indexList {
		checker.adviceList = append(checker.adviceList, advisor.Advice{
			Status:  checker.level,
			Code:    advisor.IndexExists,
			Title:   checker.title,
			Content: fmt.Sprintf("Index `%s` in table `%s` exists", index.index, index.table),
			Line:    checker.line,
		})
	}
	return in, false
}

// Leave implements the ast.Visitor interface.
func (*indexNotExistsChecker) Leave(in ast.Node) (ast.Node, bool) {
	return in, true
}

func (checker *indexNotExistsChecker) indexExists(table string, index string) bool {
	_, idx := checker.database.FindIndex(&catalog.IndexFind{TableName: table, IndexName: index})
	return idx != nil
}
