package tidb

// Framework code is generated by the generator.

import (
	"fmt"

	"github.com/pingcap/tidb/pkg/parser/ast"
	driver "github.com/pingcap/tidb/pkg/types/parser_driver"
	"github.com/pkg/errors"

	"github.com/bytebase/bytebase/backend/plugin/advisor"
	storepb "github.com/bytebase/bytebase/proto/generated-go/store"
)

var (
	_ advisor.Advisor = (*StatementMaximumLimitValueAdvisor)(nil)
	_ ast.Visitor     = (*statementMaximumLimitValueChecker)(nil)
)

func init() {
	advisor.Register(storepb.Engine_TIDB, advisor.MySQLStatementMaximumLimitValue, &StatementMaximumLimitValueAdvisor{})
}

// StatementMaximumLimitValueAdvisor is the advisor checking for LIMIT maximum value.
type StatementMaximumLimitValueAdvisor struct {
}

// Check checks for LIMIT maximum value in SELECT statements.
func (*StatementMaximumLimitValueAdvisor) Check(ctx advisor.Context, _ string) ([]*storepb.Advice, error) {
	stmtList, ok := ctx.AST.([]ast.StmtNode)
	if !ok {
		return nil, errors.Errorf("failed to convert to StmtNode")
	}

	level, err := advisor.NewStatusBySQLReviewRuleLevel(ctx.Rule.Level)
	if err != nil {
		return nil, err
	}
	payload, err := advisor.UnmarshalNumberTypeRulePayload(ctx.Rule.Payload)
	if err != nil {
		return nil, err
	}

	checker := &statementMaximumLimitValueChecker{
		level:         level,
		title:         string(ctx.Rule.Type),
		limitMaxValue: payload.Number,
	}

	for _, stmt := range stmtList {
		checker.text = stmt.Text()
		checker.line = stmt.OriginTextPosition()
		(stmt).Accept(checker)
	}

	return checker.adviceList, nil
}

type statementMaximumLimitValueChecker struct {
	adviceList    []*storepb.Advice
	level         storepb.Advice_Status
	title         string
	text          string
	line          int
	limitMaxValue int
}

// Enter implements the ast.Visitor interface.
func (checker *statementMaximumLimitValueChecker) Enter(in ast.Node) (ast.Node, bool) {
	node, ok := in.(*ast.SelectStmt)
	if ok && node.Limit != nil {
		if ve, ok := node.Limit.Count.(*driver.ValueExpr); ok {
			limitVal := ve.GetInt64()
			if limitVal > int64(checker.limitMaxValue) {
				checker.adviceList = append(checker.adviceList, &storepb.Advice{
					Status:  checker.level,
					Code:    advisor.StatementExceedMaximumLimitValue.Int32(),
					Title:   checker.title,
					Content: fmt.Sprintf("The limit value %d exceeds the maximum allowed value %d", limitVal, checker.limitMaxValue),
					StartPosition: &storepb.Position{
						Line: int32(checker.line),
					},
				})
			}
		}
	}
	return in, false
}

// Leave implements the ast.Visitor interface.
func (*statementMaximumLimitValueChecker) Leave(in ast.Node) (ast.Node, bool) {
	return in, true
}
