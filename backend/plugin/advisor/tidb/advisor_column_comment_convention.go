package tidb

// Framework code is generated by the generator.

import (
	"fmt"

	"github.com/pingcap/tidb/pkg/parser/ast"
	"github.com/pingcap/tidb/pkg/parser/format"
	"github.com/pkg/errors"

	"github.com/bytebase/bytebase/backend/common"
	"github.com/bytebase/bytebase/backend/plugin/advisor"
	storepb "github.com/bytebase/bytebase/proto/generated-go/store"
)

var (
	_ advisor.Advisor = (*ColumnCommentConventionAdvisor)(nil)
	_ ast.Visitor     = (*columnCommentConventionChecker)(nil)
)

func init() {
	advisor.Register(storepb.Engine_TIDB, advisor.MySQLColumnCommentConvention, &ColumnCommentConventionAdvisor{})
}

// ColumnCommentConventionAdvisor is the advisor checking for column comment convention.
type ColumnCommentConventionAdvisor struct {
}

// Check checks for column comment convention.
func (*ColumnCommentConventionAdvisor) Check(ctx advisor.Context, _ string) ([]*storepb.Advice, error) {
	stmtList, ok := ctx.AST.([]ast.StmtNode)
	if !ok {
		return nil, errors.Errorf("failed to convert to StmtNode")
	}

	level, err := advisor.NewStatusBySQLReviewRuleLevel(ctx.Rule.Level)
	if err != nil {
		return nil, err
	}
	payload, err := advisor.UnmarshalCommentConventionRulePayload(ctx.Rule.Payload)
	if err != nil {
		return nil, err
	}
	checker := &columnCommentConventionChecker{
		level:                level,
		title:                string(ctx.Rule.Type),
		payload:              payload,
		classificationConfig: ctx.ClassificationConfig,
	}

	for _, stmt := range stmtList {
		checker.text = stmt.Text()
		checker.line = stmt.OriginTextPosition()
		(stmt).Accept(checker)
	}

	return checker.adviceList, nil
}

type columnCommentConventionChecker struct {
	adviceList           []*storepb.Advice
	level                storepb.Advice_Status
	title                string
	text                 string
	line                 int
	payload              *advisor.CommentConventionRulePayload
	classificationConfig *storepb.DataClassificationSetting_DataClassificationConfig
}

type columnCommentData struct {
	exist   bool
	comment string
	table   string
	column  string
	line    int
}

// Enter implements the ast.Visitor interface.
func (checker *columnCommentConventionChecker) Enter(in ast.Node) (ast.Node, bool) {
	var columnList []columnCommentData
	switch node := in.(type) {
	case *ast.CreateTableStmt:
		for _, column := range node.Cols {
			exist, comment := checker.columnComment(column)
			columnList = append(columnList, columnCommentData{
				exist:   exist,
				comment: comment,
				table:   node.Table.Name.O,
				column:  column.Name.Name.O,
				line:    column.OriginTextPosition(),
			})
		}
	case *ast.AlterTableStmt:
		table := node.Table.Name.O
		for _, spec := range node.Specs {
			switch spec.Tp {
			case ast.AlterTableAddColumns:
				for _, column := range spec.NewColumns {
					exist, comment := checker.columnComment(column)
					columnList = append(columnList, columnCommentData{
						exist:   exist,
						comment: comment,
						table:   table,
						column:  column.Name.Name.O,
						line:    checker.line,
					})
				}
			case ast.AlterTableChangeColumn, ast.AlterTableModifyColumn:
				exist, comment := checker.columnComment(spec.NewColumns[0])
				columnList = append(columnList, columnCommentData{
					exist:   exist,
					comment: comment,
					table:   table,
					column:  spec.NewColumns[0].Name.Name.O,
					line:    checker.line,
				})
			}
		}
	}

	for _, column := range columnList {
		if checker.payload.Required && !column.exist {
			checker.adviceList = append(checker.adviceList, &storepb.Advice{
				Status:  checker.level,
				Code:    advisor.CommentEmpty.Int32(),
				Title:   checker.title,
				Content: fmt.Sprintf("Column `%s`.`%s` requires comments", column.table, column.column),
				StartPosition: &storepb.Position{
					Line: int32(column.line),
				},
			})
		}
		if checker.payload.MaxLength >= 0 && len(column.comment) > checker.payload.MaxLength {
			checker.adviceList = append(checker.adviceList, &storepb.Advice{
				Status:  checker.level,
				Code:    advisor.CommentTooLong.Int32(),
				Title:   checker.title,
				Content: fmt.Sprintf("The length of column `%s`.`%s` comment should be within %d characters", column.table, column.column, checker.payload.MaxLength),
				StartPosition: &storepb.Position{
					Line: int32(column.line),
				},
			})
		}
		if checker.payload.RequiredClassification {
			if classification, _ := common.GetClassificationAndUserComment(column.comment, checker.classificationConfig); classification == "" {
				checker.adviceList = append(checker.adviceList, &storepb.Advice{
					Status:  checker.level,
					Code:    advisor.CommentMissingClassification.Int32(),
					Title:   checker.title,
					Content: fmt.Sprintf("Column `%s`.`%s` comment requires classification", column.table, column.column),
					StartPosition: &storepb.Position{
						Line: int32(column.line),
					},
				})
			}
		}
	}

	return in, false
}

// Leave implements the ast.Visitor interface.
func (*columnCommentConventionChecker) Leave(in ast.Node) (ast.Node, bool) {
	return in, true
}

func (checker *columnCommentConventionChecker) columnComment(column *ast.ColumnDef) (bool, string) {
	for _, option := range column.Options {
		if option.Tp == ast.ColumnOptionComment {
			comment, err := restoreNode(option.Expr, format.RestoreStringWithoutCharset)
			if err != nil {
				comment = ""
				checker.adviceList = append(checker.adviceList, &storepb.Advice{
					Status:  checker.level,
					Code:    advisor.Internal.Int32(),
					Title:   "Internal error for parsing column comment",
					Content: fmt.Sprintf("\"%q\" meet internal error %s", checker.text, err),
				})
			}
			return true, comment
		}
	}

	return false, ""
}
