package tidb

// Framework code is generated by the generator.

import (
	"fmt"

	"github.com/pingcap/tidb/pkg/parser/ast"
	"github.com/pkg/errors"

	"github.com/bytebase/bytebase/backend/common"
	"github.com/bytebase/bytebase/backend/plugin/advisor"
	storepb "github.com/bytebase/bytebase/proto/generated-go/store"
)

var (
	_ advisor.Advisor = (*TableCommentConventionAdvisor)(nil)
	_ ast.Visitor     = (*tableCommentConventionChecker)(nil)
)

func init() {
	advisor.Register(storepb.Engine_TIDB, advisor.MySQLTableCommentConvention, &TableCommentConventionAdvisor{})
}

// TableCommentConventionAdvisor is the advisor checking for table comment convention.
type TableCommentConventionAdvisor struct {
}

// Check checks for table comment convention.
func (*TableCommentConventionAdvisor) Check(ctx advisor.Context, _ string) ([]*storepb.Advice, error) {
	stmtList, ok := ctx.AST.([]ast.StmtNode)
	if !ok {
		return nil, errors.Errorf("failed to convert to StmtNode")
	}

	level, err := advisor.NewStatusBySQLReviewRuleLevel(ctx.Rule.Level)
	if err != nil {
		return nil, err
	}
	payload, err := advisor.UnmarshalCommentConventionRulePayload(ctx.Rule.Payload)
	if err != nil {
		return nil, err
	}
	checker := &tableCommentConventionChecker{
		level:                level,
		title:                string(ctx.Rule.Type),
		payload:              payload,
		classificationConfig: ctx.ClassificationConfig,
	}

	for _, stmt := range stmtList {
		checker.text = stmt.Text()
		checker.line = stmt.OriginTextPosition()
		(stmt).Accept(checker)
	}

	return checker.adviceList, nil
}

type tableCommentConventionChecker struct {
	adviceList           []*storepb.Advice
	level                storepb.Advice_Status
	title                string
	text                 string
	line                 int
	payload              *advisor.CommentConventionRulePayload
	classificationConfig *storepb.DataClassificationSetting_DataClassificationConfig
}

// Enter implements the ast.Visitor interface.
func (checker *tableCommentConventionChecker) Enter(in ast.Node) (ast.Node, bool) {
	if node, ok := in.(*ast.CreateTableStmt); ok {
		exist, comment := tableComment(node.Options)
		if checker.payload.Required && !exist {
			checker.adviceList = append(checker.adviceList, &storepb.Advice{
				Status:  checker.level,
				Code:    advisor.CommentEmpty.Int32(),
				Title:   checker.title,
				Content: fmt.Sprintf("Table `%s` requires comments", node.Table.Name.O),
				StartPosition: &storepb.Position{
					Line: int32(checker.line),
				},
			})
		}
		if checker.payload.MaxLength >= 0 && len(comment) > checker.payload.MaxLength {
			checker.adviceList = append(checker.adviceList, &storepb.Advice{
				Status:  checker.level,
				Code:    advisor.CommentTooLong.Int32(),
				Title:   checker.title,
				Content: fmt.Sprintf("The length of table `%s` comment should be within %d characters", node.Table.Name.O, checker.payload.MaxLength),
				StartPosition: &storepb.Position{
					Line: int32(checker.line),
				},
			})
		}
		if checker.payload.RequiredClassification {
			if classification, _ := common.GetClassificationAndUserComment(comment, checker.classificationConfig); classification == "" {
				checker.adviceList = append(checker.adviceList, &storepb.Advice{
					Status:  checker.level,
					Code:    advisor.CommentMissingClassification.Int32(),
					Title:   checker.title,
					Content: fmt.Sprintf("Table `%s` comment requires classification", node.Table.Name.O),
					StartPosition: &storepb.Position{
						Line: int32(checker.line),
					},
				})
			}
		}
	}

	return in, false
}

// Leave implements the ast.Visitor interface.
func (*tableCommentConventionChecker) Leave(in ast.Node) (ast.Node, bool) {
	return in, true
}

func tableComment(options []*ast.TableOption) (bool, string) {
	for _, option := range options {
		if option.Tp == ast.TableOptionComment {
			return true, option.StrValue
		}
	}

	return false, ""
}
