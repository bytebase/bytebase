package pg

// Framework code is generated by the generator.

import (
	"github.com/bytebase/bytebase/backend/plugin/advisor"
	"github.com/bytebase/bytebase/backend/plugin/advisor/db"
	"github.com/bytebase/bytebase/backend/plugin/parser/sql/ast"
)

var (
	_ advisor.Advisor = (*%AdvisorName)(nil)
	_ ast.Visitor     = (*%CheckerName)(nil)
)

func init() {
	advisor.Register(db.Postgres, advisor.%AdvisorType, &%AdvisorName{})
}

// %AdvisorName is the advisor checking for %AdvisorComment
type %AdvisorName struct {
}

// Check checks for %AdvisorComment
func (*%AdvisorName) Check(ctx advisor.Context, statement string) ([]advisor.Advice, error) {
	stmtList, errAdvice := parseStatement(statement)
	if errAdvice != nil {
		return errAdvice, nil
	}

	level, err := advisor.NewStatusBySQLReviewRuleLevel(ctx.Rule.Level)
	if err != nil {
		return nil, err
	}
	checker := &%CheckerName{
		level: level,
		title: string(ctx.Rule.Type),
	}

	for _, stmt := range stmtList {
        ast.Walk(checker, stmt)
	}

	if len(checker.adviceList) == 0 {
		checker.adviceList = append(checker.adviceList, advisor.Advice{
			Status:  advisor.Success,
			Code:    advisor.Ok,
			Title:   "OK",
			Content: "",
		})
	}
	return checker.adviceList, nil
}

type %CheckerName struct {
	adviceList []advisor.Advice
	level      advisor.Status
	title      string
}

// Visit implements ast.Visitor interface.
func (checker *%CheckerName) Visit(in ast.Node) ast.Visitor {
	// TODO: implement it
	// switch node := in.(type) {
	// }
    
    return checker
}
