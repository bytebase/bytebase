package pg

// Framework code is generated by the generator.

import (
	"context"
	"fmt"

	"github.com/pkg/errors"

	"github.com/bytebase/bytebase/backend/common"
	"github.com/bytebase/bytebase/backend/plugin/advisor"
	"github.com/bytebase/bytebase/backend/plugin/parser/sql/ast"
	storepb "github.com/bytebase/bytebase/proto/generated-go/store"
)

var (
	_ advisor.Advisor = (*StatementDisallowCommitAdvisor)(nil)
	_ ast.Visitor     = (*statementDisallowCommitChecker)(nil)
)

func init() {
	advisor.Register(storepb.Engine_POSTGRES, advisor.PostgreSQLStatementDisallowCommit, &StatementDisallowCommitAdvisor{})
}

// StatementDisallowCommitAdvisor is the advisor checking for to disallow commit.
type StatementDisallowCommitAdvisor struct {
}

// Check checks for to disallow commit.
func (*StatementDisallowCommitAdvisor) Check(_ context.Context, checkCtx advisor.Context) ([]*storepb.Advice, error) {
	stmtList, ok := checkCtx.AST.([]ast.Node)
	if !ok {
		return nil, errors.Errorf("failed to convert to Node")
	}

	level, err := advisor.NewStatusBySQLReviewRuleLevel(checkCtx.Rule.Level)
	if err != nil {
		return nil, err
	}
	checker := &statementDisallowCommitChecker{
		level: level,
		title: string(checkCtx.Rule.Type),
	}

	for _, stmt := range stmtList {
		ast.Walk(checker, stmt)
	}

	return checker.adviceList, nil
}

type statementDisallowCommitChecker struct {
	adviceList []*storepb.Advice
	level      storepb.Advice_Status
	title      string
}

// Visit implements ast.Visitor interface.
func (checker *statementDisallowCommitChecker) Visit(in ast.Node) ast.Visitor {
	if _, ok := in.(*ast.CommitStmt); ok {
		checker.adviceList = append(checker.adviceList, &storepb.Advice{
			Status:        checker.level,
			Code:          advisor.StatementDisallowCommit.Int32(),
			Title:         checker.title,
			Content:       fmt.Sprintf("Commit is not allowed, related statement: \"%s\"", in.Text()),
			StartPosition: common.ConvertPGParserLineToPosition(in.LastLine()),
		})
	}

	return checker
}
