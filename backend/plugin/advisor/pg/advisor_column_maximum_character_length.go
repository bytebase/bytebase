package pg

// Framework code is generated by the generator.

import (
	"fmt"

	"github.com/bytebase/bytebase/backend/plugin/advisor"
	"github.com/bytebase/bytebase/backend/plugin/advisor/db"
	"github.com/bytebase/bytebase/backend/plugin/parser/ast"
)

var (
	_ advisor.Advisor = (*ColumnMaximumCharacterLengthAdvisor)(nil)
	_ ast.Visitor     = (*columnMaximumCharacterLengthChecker)(nil)
)

func init() {
	advisor.Register(db.Postgres, advisor.PostgreSQLColumnMaximumCharacterLength, &ColumnMaximumCharacterLengthAdvisor{})
}

// ColumnMaximumCharacterLengthAdvisor is the advisor checking for maximum character length.
type ColumnMaximumCharacterLengthAdvisor struct {
}

// Check checks for maximum character length.
func (*ColumnMaximumCharacterLengthAdvisor) Check(ctx advisor.Context, statement string) ([]advisor.Advice, error) {
	stmtList, errAdvice := parseStatement(statement)
	if errAdvice != nil {
		return errAdvice, nil
	}

	level, err := advisor.NewStatusBySQLReviewRuleLevel(ctx.Rule.Level)
	if err != nil {
		return nil, err
	}
	payload, err := advisor.UnmarshalNumberTypeRulePayload(ctx.Rule.Payload)
	if err != nil {
		return nil, err
	}
	checker := &columnMaximumCharacterLengthChecker{
		level:   level,
		title:   string(ctx.Rule.Type),
		maximum: payload.Number,
	}

	if payload.Number > 0 {
		for _, stmt := range stmtList {
			ast.Walk(checker, stmt)
		}
	}

	if len(checker.adviceList) == 0 {
		checker.adviceList = append(checker.adviceList, advisor.Advice{
			Status:  advisor.Success,
			Code:    advisor.Ok,
			Title:   "OK",
			Content: "",
		})
	}
	return checker.adviceList, nil
}

type columnMaximumCharacterLengthChecker struct {
	adviceList []advisor.Advice
	level      advisor.Status
	title      string
	maximum    int
}

// Visit implements ast.Visitor interface.
func (checker *columnMaximumCharacterLengthChecker) Visit(in ast.Node) ast.Visitor {
	var tableName, columnName string
	var line int
	switch node := in.(type) {
	case *ast.CreateTableStmt:
		for _, column := range node.ColumnList {
			charLength := getCharLength(column)
			if charLength > checker.maximum {
				tableName = normalizeTableName(node.Name, "")
				columnName = column.ColumnName
				line = column.LastLine()
				break
			}
		}
	case *ast.AlterTableStmt:
		for _, item := range node.AlterItemList {
			switch itemNode := item.(type) {
			case *ast.AddColumnListStmt:
				for _, column := range itemNode.ColumnList {
					charLength := getCharLength(column)
					if charLength > checker.maximum {
						tableName = normalizeTableName(node.Table, "")
						columnName = column.ColumnName
						line = itemNode.LastLine()
					}
				}
			case *ast.AlterColumnTypeStmt:
				if char, ok := itemNode.Type.(*ast.Character); ok {
					if char.Size > checker.maximum {
						tableName = normalizeTableName(node.Table, "")
						columnName = itemNode.ColumnName
						line = itemNode.LastLine()
					}
				}
			}
			if tableName != "" {
				break
			}
		}
	}

	if tableName != "" {
		checker.adviceList = append(checker.adviceList, advisor.Advice{
			Status:  checker.level,
			Code:    advisor.CharLengthExceedsLimit,
			Title:   checker.title,
			Content: fmt.Sprintf(`The length of the CHAR column %q in table %s is bigger than %d, please use VARCHAR instead`, columnName, tableName, checker.maximum),
			Line:    line,
		})
	}

	return checker
}

func getCharLength(column *ast.ColumnDef) int {
	if char, ok := column.Type.(*ast.Character); ok {
		return char.Size
	}
	return 0
}
