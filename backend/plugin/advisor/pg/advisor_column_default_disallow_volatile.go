package pg

// Framework code is generated by the generator.

import (
	"fmt"
	"sort"

	"github.com/pkg/errors"

	"github.com/bytebase/bytebase/backend/plugin/advisor"
	"github.com/bytebase/bytebase/backend/plugin/advisor/catalog"
	"github.com/bytebase/bytebase/backend/plugin/parser/sql/ast"
	storepb "github.com/bytebase/bytebase/proto/generated-go/store"
)

var (
	_ advisor.Advisor = (*ColumnDefaultDisallowVolatileAdvisor)(nil)
	_ ast.Visitor     = (*columnDefaultDisallowVolatileChecker)(nil)
)

func init() {
	advisor.Register(storepb.Engine_POSTGRES, advisor.PostgreSQLColumnDefaultDisallowVolatile, &ColumnDefaultDisallowVolatileAdvisor{})
}

// ColumnRequireDefaultAdvisor is the advisor checking for column default requirement.
type ColumnDefaultDisallowVolatileAdvisor struct {
}

// Check checks for column default requirement.
func (*ColumnDefaultDisallowVolatileAdvisor) Check(ctx advisor.Context, _ string) ([]*storepb.Advice, error) {
	stmtList, ok := ctx.AST.([]ast.Node)
	if !ok {
		return nil, errors.Errorf("failed to convert to Node")
	}

	level, err := advisor.NewStatusBySQLReviewRuleLevel(ctx.Rule.Level)
	if err != nil {
		return nil, err
	}
	checker := &columnDefaultDisallowVolatileChecker{
		level:     level,
		title:     string(ctx.Rule.Type),
		catalog:   ctx.Catalog,
		columnSet: make(map[string]columnData),
	}

	if checker.catalog.Final.Usable() {
		for _, stmt := range stmtList {
			ast.Walk(checker, stmt)
		}
	}

	return checker.generateAdvice(), nil
}

type columnDefaultDisallowVolatileChecker struct {
	adviceList []*storepb.Advice
	level      storepb.Advice_Status
	title      string
	columnSet  map[string]columnData
	catalog    *catalog.Finder
}

func (checker *columnDefaultDisallowVolatileChecker) generateAdvice() []*storepb.Advice {
	var columnList []columnData
	for _, column := range checker.columnSet {
		columnList = append(columnList, column)
	}
	sort.Slice(columnList, func(i, j int) bool {
		return columnList[i].line < columnList[j].line
	})

	for _, column := range columnList {
		checker.adviceList = append(checker.adviceList, &storepb.Advice{
			Status:  checker.level,
			Code:    advisor.NoDefault.Int32(),
			Title:   checker.title,
			Content: fmt.Sprintf("Column %q.%q in schema %q has volatile DEFAULT", column.table, column.name, column.schema),
			StartPosition: &storepb.Position{
				Line: int32(column.line),
			},
		})
	}

	return checker.adviceList
}

func (checker *columnDefaultDisallowVolatileChecker) addColumn(schema string, table string, column string, line int) {
	if schema == "" {
		schema = "public"
	}

	checker.columnSet[fmt.Sprintf("%s.%s.%s", schema, table, column)] = columnData{
		schema: schema,
		table:  table,
		name:   column,
		line:   line,
	}
}

func (checker *columnDefaultDisallowVolatileChecker) Visit(in ast.Node) ast.Visitor {
	switch node := in.(type) {
	case *ast.CreateTableStmt:
		for _, column := range node.ColumnList {
			if hasVolatile(column) {
				checker.addColumn(node.Name.Schema, node.Name.Name, column.ColumnName, column.LastLine())
			}
		}
	case *ast.AlterTableStmt:
		for _, item := range node.AlterItemList {
			if addColumn, ok := item.(*ast.AddColumnListStmt); ok {
				for _, column := range addColumn.ColumnList {
					if hasVolatile(column) {
						checker.addColumn(node.Table.Schema, node.Table.Name, column.ColumnName, node.LastLine())
					}
				}
			}
		}
	}

	return checker
}

func hasVolatile(column *ast.ColumnDef) bool {
	for _, c := range column.ConstraintList {
		if c.Type != ast.ConstraintTypeDefault {
			continue
		}
		switch c.Expression.(type) {
		case *ast.UnconvertedExpressionDef:
			// All functions belong to this type in the converter.
			return true
		case *ast.IntegerDef:
			continue
		case *ast.StringDef:
			continue
		}
	}
	return false
}
