package pg

// Framework code is generated by the generator.

import (
	"github.com/pkg/errors"

	"github.com/bytebase/bytebase/backend/plugin/advisor"
	"github.com/bytebase/bytebase/backend/plugin/parser/sql/ast"
	storepb "github.com/bytebase/bytebase/proto/generated-go/store"
)

var (
	_ advisor.Advisor = (*IndexCreateConcurrentlyAdvisor)(nil)
	_ ast.Visitor     = (*indexCreateConcurrentlyChecker)(nil)
)

func init() {
	advisor.Register(storepb.Engine_POSTGRES, advisor.PostgreSQLCreateIndexConcurrently, &IndexCreateConcurrentlyAdvisor{})
}

// IndexCreateConcurrentlyAdvisor is the advisor checking for to create index concurrently.
type IndexCreateConcurrentlyAdvisor struct {
}

// Check checks for to create index concurrently.
func (*IndexCreateConcurrentlyAdvisor) Check(ctx advisor.Context, _ string) ([]*storepb.Advice, error) {
	stmtList, ok := ctx.AST.([]ast.Node)
	if !ok {
		return nil, errors.Errorf("failed to convert to Node")
	}

	level, err := advisor.NewStatusBySQLReviewRuleLevel(ctx.Rule.Level)
	if err != nil {
		return nil, err
	}
	checker := &indexCreateConcurrentlyChecker{
		level: level,
		title: string(ctx.Rule.Type),
	}

	for _, stmt := range stmtList {
		ast.Walk(checker, stmt)
	}

	return checker.adviceList, nil
}

type indexCreateConcurrentlyChecker struct {
	adviceList []*storepb.Advice
	level      storepb.Advice_Status
	title      string
}

// Visit implements ast.Visitor interface.
func (checker *indexCreateConcurrentlyChecker) Visit(in ast.Node) ast.Visitor {
	if node, ok := in.(*ast.CreateIndexStmt); ok {
		if !node.Concurrently {
			checker.adviceList = append(checker.adviceList, &storepb.Advice{
				Status:  checker.level,
				Code:    advisor.CreateIndexUnconcurrently.Int32(),
				Title:   checker.title,
				Content: "Creating indexes will block writes on the table, unless use CONCURRENTLY",
				StartPosition: &storepb.Position{
					Line: int32(in.LastLine()),
				},
			})
		}
	}

	return checker
}
