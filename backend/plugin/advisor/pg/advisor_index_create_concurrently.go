package pg

// Framework code is generated by the generator.

import (
	"context"

	"github.com/pkg/errors"

	"github.com/bytebase/bytebase/backend/common"
	storepb "github.com/bytebase/bytebase/backend/generated-go/store"
	"github.com/bytebase/bytebase/backend/plugin/advisor"
	"github.com/bytebase/bytebase/backend/plugin/parser/pg/legacy/ast"
)

var (
	_ advisor.Advisor = (*IndexConcurrentlyAdvisor)(nil)
	_ ast.Visitor     = (*indexCreateConcurrentlyChecker)(nil)
)

func init() {
	advisor.Register(storepb.Engine_POSTGRES, advisor.PostgreSQLIndexConcurrently, &IndexConcurrentlyAdvisor{})
}

// IndexConcurrentlyAdvisor is the advisor checking for to create index concurrently.
type IndexConcurrentlyAdvisor struct {
}

// Check checks for to create index concurrently.
func (*IndexConcurrentlyAdvisor) Check(_ context.Context, checkCtx advisor.Context) ([]*storepb.Advice, error) {
	stmtList, ok := checkCtx.AST.([]ast.Node)
	if !ok {
		return nil, errors.Errorf("failed to convert to Node")
	}

	level, err := advisor.NewStatusBySQLReviewRuleLevel(checkCtx.Rule.Level)
	if err != nil {
		return nil, err
	}

	// First pass: collect all newly created tables
	newlyCreatedTables := make(map[string]bool)
	for _, stmt := range stmtList {
		if createTable, ok := stmt.(*ast.CreateTableStmt); ok {
			tableName := normalizeTableName(createTable.Name)
			newlyCreatedTables[tableName] = true
		}
	}

	checker := &indexCreateConcurrentlyChecker{
		level:              level,
		title:              string(checkCtx.Rule.Type),
		newlyCreatedTables: newlyCreatedTables,
	}

	for _, stmt := range stmtList {
		ast.Walk(checker, stmt)
	}

	return checker.adviceList, nil
}

type indexCreateConcurrentlyChecker struct {
	adviceList         []*storepb.Advice
	level              storepb.Advice_Status
	title              string
	newlyCreatedTables map[string]bool
}

// Visit implements ast.Visitor interface.
func (checker *indexCreateConcurrentlyChecker) Visit(in ast.Node) ast.Visitor {
	switch node := in.(type) {
	case *ast.CreateIndexStmt:
		if !node.Concurrently {
			// Check if the index is being created on a newly created table
			if node.Index != nil && node.Index.Table != nil {
				tableName := normalizeTableName(node.Index.Table)
				// Skip the check if the table is newly created
				if checker.newlyCreatedTables[tableName] {
					return checker
				}
			}

			checker.adviceList = append(checker.adviceList, &storepb.Advice{
				Status:        checker.level,
				Code:          advisor.CreateIndexUnconcurrently.Int32(),
				Title:         checker.title,
				Content:       "Creating indexes will block writes on the table, unless use CONCURRENTLY",
				StartPosition: common.ConvertPGParserLineToPosition(in.LastLine()),
			})
		}
	case *ast.DropIndexStmt:
		if !node.Concurrently {
			checker.adviceList = append(checker.adviceList, &storepb.Advice{
				Status:        checker.level,
				Code:          advisor.DropIndexUnconcurrently.Int32(),
				Title:         checker.title,
				Content:       "Droping indexes will block writes on the table, unless use CONCURRENTLY",
				StartPosition: common.ConvertPGParserLineToPosition(in.LastLine()),
			})
		}
	}
	return checker
}
