package pg

// Framework code is generated by the generator.

import (
	"fmt"
	"sort"

	"github.com/pkg/errors"

	"github.com/bytebase/bytebase/backend/plugin/advisor"
	"github.com/bytebase/bytebase/backend/plugin/parser/sql/ast"
	storepb "github.com/bytebase/bytebase/proto/generated-go/store"
)

var (
	_ advisor.Advisor = (*StatementMergeAlterTableAdvisor)(nil)
	_ ast.Visitor     = (*statementMergeAlterTableChecker)(nil)
)

func init() {
	advisor.Register(storepb.Engine_POSTGRES, advisor.PostgreSQLMergeAlterTable, &StatementMergeAlterTableAdvisor{})
}

// StatementMergeAlterTableAdvisor is the advisor checking for no redundant ALTER TABLE statements.
type StatementMergeAlterTableAdvisor struct {
}

// Check checks for no redundant ALTER TABLE statements.
func (*StatementMergeAlterTableAdvisor) Check(ctx advisor.Context, _ string) ([]*storepb.Advice, error) {
	stmtList, ok := ctx.AST.([]ast.Node)
	if !ok {
		return nil, errors.Errorf("failed to convert to Node")
	}

	level, err := advisor.NewStatusBySQLReviewRuleLevel(ctx.Rule.Level)
	if err != nil {
		return nil, err
	}
	checker := &statementMergeAlterTableChecker{
		level:    level,
		title:    string(ctx.Rule.Type),
		tableMap: make(tableMap),
	}

	for _, stmt := range stmtList {
		ast.Walk(checker, stmt)
	}

	return checker.generateAdvice(), nil
}

func (checker *statementMergeAlterTableChecker) generateAdvice() []*storepb.Advice {
	var tableList []tableStatement
	for _, table := range checker.tableMap {
		tableList = append(tableList, table)
	}
	sort.Slice(tableList, func(i, j int) bool {
		return tableList[i].line < tableList[j].line
	})
	for _, table := range tableList {
		if table.count > 1 {
			checker.adviceList = append(checker.adviceList, &storepb.Advice{
				Status:  checker.level,
				Code:    advisor.StatementRedundantAlterTable.Int32(),
				Title:   checker.title,
				Content: fmt.Sprintf("There are %d statements to modify table `%s`", table.count, table.name),
				StartPosition: &storepb.Position{
					Line: int32(table.line),
				},
			})
		}
	}

	if len(checker.adviceList) == 0 {
		checker.adviceList = append(checker.adviceList, &storepb.Advice{
			Status:  storepb.Advice_SUCCESS,
			Code:    advisor.Ok.Int32(),
			Title:   "OK",
			Content: "",
		})
	}
	return checker.adviceList
}

type statementMergeAlterTableChecker struct {
	adviceList []*storepb.Advice
	level      storepb.Advice_Status
	title      string
	tableMap   tableMap
}

type tableMap map[string]tableStatement
type tableStatement struct {
	schema string
	name   string
	count  int
	line   int
}

func (m tableMap) set(schema string, table string, line int) {
	t := tableStatement{
		schema: schema,
		name:   table,
		count:  1,
		line:   line,
	}
	m[t.key()] = t
}

func (m tableMap) add(schema string, table string, line int) {
	if t, exists := m[fmt.Sprintf("%s.%s", schema, table)]; exists {
		t.count++
		t.line = line
		m[t.key()] = t
	}
}

func (t tableStatement) key() string {
	return fmt.Sprintf("%s.%s", t.schema, t.name)
}

// Visit implements ast.Visitor interface.
func (checker *statementMergeAlterTableChecker) Visit(in ast.Node) ast.Visitor {
	switch node := in.(type) {
	case *ast.CreateTableStmt:
		checker.tableMap.set(node.Name.Schema, node.Name.Name, node.LastLine())
	case *ast.AlterTableStmt:
		checker.tableMap.add(node.Table.Schema, node.Table.Name, node.LastLine())
	}

	return checker
}
