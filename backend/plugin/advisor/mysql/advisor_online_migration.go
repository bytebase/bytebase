package mysql

// Framework code is generated by the generator.

import (
	"fmt"

	"github.com/antlr4-go/antlr/v4"
	"github.com/pkg/errors"

	mysql "github.com/bytebase/mysql-parser"

	"github.com/bytebase/bytebase/backend/plugin/advisor"
	"github.com/bytebase/bytebase/backend/plugin/parser/base"
	mysqlparser "github.com/bytebase/bytebase/backend/plugin/parser/mysql"
	"github.com/bytebase/bytebase/backend/store/model"
	storepb "github.com/bytebase/bytebase/proto/generated-go/store"
)

var (
	_ advisor.Advisor = (*OnlineMigrationAdvisor)(nil)
)

func init() {
	advisor.Register(storepb.Engine_MYSQL, advisor.MySQLOnlineMigration, &OnlineMigrationAdvisor{})
}

// OnlineMigrationAdvisor is the advisor checking for using gh-ost to migrate large tables.
type OnlineMigrationAdvisor struct {
}

// Check checks for using gh-ost to migrate large tables.
func (*OnlineMigrationAdvisor) Check(ctx advisor.Context, _ string) ([]*storepb.Advice, error) {
	if ctx.ChangeType == storepb.PlanCheckRunConfig_DDL_GHOST {
		return []*storepb.Advice{
			{
				Status:  storepb.Advice_SUCCESS,
				Code:    advisor.Ok.Int32(),
				Title:   "OK",
				Content: "",
			},
		}, nil
	}

	stmtList, ok := ctx.AST.([]*mysqlparser.ParseResult)
	if !ok {
		return nil, errors.Errorf("failed to convert to StmtNode")
	}

	if len(stmtList) > 1 {
		return []*storepb.Advice{
			{
				Status:  storepb.Advice_SUCCESS,
				Code:    advisor.Ok.Int32(),
				Title:   "OK",
				Content: "skip because there are more than one statement",
			},
		}, nil
	}

	payload, err := advisor.UnmarshalNumberTypeRulePayload(ctx.Rule.Payload)
	if err != nil {
		return nil, err
	}
	minRows := int64(payload.Number)

	level, err := advisor.NewStatusBySQLReviewRuleLevel(ctx.Rule.Level)
	if err != nil {
		return nil, err
	}
	dbSchema := model.NewDBSchema(ctx.DBSchema, nil, nil)

	var adviceList []*storepb.Advice
	for _, stmt := range stmtList {
		checker := &useGhostChecker{
			level:            level,
			title:            string(ctx.Rule.Type),
			currentDatabase:  ctx.CurrentDatabase,
			changedResources: make(map[string]base.SchemaResource),
		}

		antlr.ParseTreeWalkerDefault.Walk(checker, stmt.Tree)

		if !checker.ghostCompatible {
			continue
		}

		for _, resource := range checker.changedResources {
			var tableRows int64
			if table := dbSchema.GetDatabaseMetadata().GetSchema(resource.Schema).GetTable(resource.Table); table != nil {
				tableRows = table.GetRowCount()
			}
			if tableRows >= minRows {
				adviceList = append(adviceList, &storepb.Advice{
					Status:  checker.level,
					Code:    advisor.AdviseOnlineMigration.Int32(),
					Title:   checker.title,
					Content: fmt.Sprintf("Estimated table row count of %q is %d exceeding the set value %d. Consider enabling online migration", fmt.Sprintf("%s.%s", resource.Schema, resource.Table), tableRows, minRows),
				})
			}
		}
	}

	if len(adviceList) == 0 {
		adviceList = append(adviceList, &storepb.Advice{
			Status:  storepb.Advice_SUCCESS,
			Code:    advisor.Ok.Int32(),
			Title:   "OK",
			Content: "",
		})
	}
	return adviceList, nil
}

type useGhostChecker struct {
	*mysql.BaseMySQLParserListener

	level storepb.Advice_Status
	title string

	currentDatabase  string
	changedResources map[string]base.SchemaResource
	ghostCompatible  bool
}

func (c *useGhostChecker) EnterAlterTable(ctx *mysql.AlterTableContext) {
	if !mysqlparser.IsTopMySQLRule(&ctx.BaseParserRuleContext) {
		return
	}
	resource := base.SchemaResource{
		Database: c.currentDatabase,
	}
	db, table := mysqlparser.NormalizeMySQLTableRef(ctx.TableRef())
	if db != "" {
		resource.Database = db
	}
	resource.Table = table
	c.changedResources[resource.String()] = resource
}

func (c *useGhostChecker) EnterAlterTableActions(ctx *mysql.AlterTableActionsContext) {
	c.ghostCompatible = ctx.AlterCommandList() != nil || ctx.PartitionClause() != nil || ctx.RemovePartitioning() != nil
}
