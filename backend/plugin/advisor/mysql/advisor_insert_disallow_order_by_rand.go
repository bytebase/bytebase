package mysql

// Framework code is generated by the generator.

import (
	"fmt"
	"strings"

	"github.com/antlr4-go/antlr/v4"
	"github.com/pkg/errors"

	mysql "github.com/bytebase/mysql-parser"

	"github.com/bytebase/bytebase/backend/plugin/advisor"
	mysqlparser "github.com/bytebase/bytebase/backend/plugin/parser/mysql"
	storepb "github.com/bytebase/bytebase/proto/generated-go/store"
)

var (
	_ advisor.Advisor = (*InsertDisallowOrderByRandAdvisor)(nil)
)

const RandFn = "rand()"

func init() {
	advisor.Register(storepb.Engine_MYSQL, advisor.MySQLInsertDisallowOrderByRand, &InsertDisallowOrderByRandAdvisor{})
	advisor.Register(storepb.Engine_MARIADB, advisor.MySQLInsertDisallowOrderByRand, &InsertDisallowOrderByRandAdvisor{})
	advisor.Register(storepb.Engine_OCEANBASE, advisor.MySQLInsertDisallowOrderByRand, &InsertDisallowOrderByRandAdvisor{})
}

// InsertDisallowOrderByRandAdvisor is the advisor checking for to disallow order by rand in INSERT statements.
type InsertDisallowOrderByRandAdvisor struct {
}

// Check checks for to disallow order by rand in INSERT statements.
func (*InsertDisallowOrderByRandAdvisor) Check(ctx advisor.Context, _ string) ([]advisor.Advice, error) {
	stmtList, ok := ctx.AST.([]*mysqlparser.ParseResult)
	if !ok {
		return nil, errors.Errorf("failed to convert to mysql parse result")
	}

	level, err := advisor.NewStatusBySQLReviewRuleLevel(ctx.Rule.Level)
	if err != nil {
		return nil, err
	}
	checker := &insertDisallowOrderByRandChecker{
		level: level,
		title: string(ctx.Rule.Type),
	}

	for _, stmt := range stmtList {
		checker.baseLine = stmt.BaseLine
		antlr.ParseTreeWalkerDefault.Walk(checker, stmt.Tree)
	}

	if len(checker.adviceList) == 0 {
		checker.adviceList = append(checker.adviceList, advisor.Advice{
			Status:  advisor.Success,
			Code:    advisor.Ok,
			Title:   "OK",
			Content: "",
		})
	}
	return checker.adviceList, nil
}

type insertDisallowOrderByRandChecker struct {
	*mysql.BaseMySQLParserListener

	isInsertStmt bool
	baseLine     int
	adviceList   []advisor.Advice
	level        advisor.Status
	title        string
	text         string
}

func (checker *insertDisallowOrderByRandChecker) EnterQuery(ctx *mysql.QueryContext) {
	checker.text = ctx.GetParser().GetTokenStream().GetTextFromRuleContext(ctx)
}

// EnterInsertStatement is called when production insertStatement is entered.
func (checker *insertDisallowOrderByRandChecker) EnterInsertStatement(ctx *mysql.InsertStatementContext) {
	if !mysqlparser.IsTopMySQLRule(&ctx.BaseParserRuleContext) {
		return
	}
	if ctx.InsertQueryExpression() == nil {
		return
	}
	checker.isInsertStmt = true
}

func (checker *insertDisallowOrderByRandChecker) ExitInsertStatement(*mysql.InsertStatementContext) {
	checker.isInsertStmt = false
}

// EnterQueryExpression is called when production queryExpression is entered.
func (checker *insertDisallowOrderByRandChecker) EnterQueryExpression(ctx *mysql.QueryExpressionContext) {
	if !checker.isInsertStmt {
		return
	}

	if ctx.OrderClause() == nil || ctx.OrderClause().OrderList() == nil {
		return
	}

	for _, expr := range ctx.OrderClause().OrderList().AllOrderExpression() {
		text := expr.GetText()
		if strings.EqualFold(text, RandFn) {
			checker.adviceList = append(checker.adviceList, advisor.Advice{
				Status:  checker.level,
				Code:    advisor.InsertUseOrderByRand,
				Title:   checker.title,
				Content: fmt.Sprintf("\"%s\" uses ORDER BY RAND in the INSERT statement", checker.text),
				Line:    checker.baseLine + ctx.GetStart().GetLine(),
			})
		}
	}
}
