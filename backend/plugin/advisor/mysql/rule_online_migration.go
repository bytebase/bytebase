package mysql

// Framework code is generated by the generator.

import (
	"context"
	"fmt"

	"github.com/antlr4-go/antlr/v4"
	"github.com/pkg/errors"

	mysql "github.com/bytebase/mysql-parser"

	"github.com/bytebase/bytebase/backend/common"
	storepb "github.com/bytebase/bytebase/backend/generated-go/store"
	"github.com/bytebase/bytebase/backend/plugin/advisor"
	parserbase "github.com/bytebase/bytebase/backend/plugin/parser/base"
	mysqlparser "github.com/bytebase/bytebase/backend/plugin/parser/mysql"
	"github.com/bytebase/bytebase/backend/store/model"
)

var (
	_ advisor.Advisor = (*OnlineMigrationAdvisor)(nil)
)

func init() {
	advisor.Register(storepb.Engine_MYSQL, advisor.MySQLOnlineMigration, &OnlineMigrationAdvisor{})
	advisor.Register(storepb.Engine_MARIADB, advisor.MySQLOnlineMigration, &OnlineMigrationAdvisor{})
}

// OnlineMigrationAdvisor is the advisor checking for using gh-ost to migrate large tables.
type OnlineMigrationAdvisor struct {
}

// Check checks for using gh-ost to migrate large tables.
func (*OnlineMigrationAdvisor) Check(ctx context.Context, checkCtx advisor.Context) ([]*storepb.Advice, error) {
	stmtList, ok := checkCtx.AST.([]*mysqlparser.ParseResult)
	if !ok {
		return nil, errors.Errorf("failed to convert to StmtNode")
	}

	payload, err := advisor.UnmarshalNumberTypeRulePayload(checkCtx.Rule.Payload)
	if err != nil {
		return nil, err
	}
	minRows := int64(payload.Number)

	level, err := advisor.NewStatusBySQLReviewRuleLevel(checkCtx.Rule.Level)
	if err != nil {
		return nil, err
	}
	dbSchema := model.NewDatabaseSchema(checkCtx.DBSchema, nil, nil, storepb.Engine_MYSQL, checkCtx.IsObjectCaseSensitive)
	title := string(checkCtx.Rule.Type)

	// Check gh-ost database existence first if the change type is gh-ost.
	if checkCtx.ChangeType == storepb.PlanCheckRunConfig_DDL_GHOST {
		ghostDatabaseName := common.BackupDatabaseNameOfEngine(storepb.Engine_MYSQL)
		if !advisor.DatabaseExists(ctx, checkCtx, ghostDatabaseName) {
			return []*storepb.Advice{
				{
					Status:        level,
					Title:         title,
					Content:       fmt.Sprintf("Needs database %q to save temporary data for online migration but it does not exist", ghostDatabaseName),
					Code:          advisor.DatabaseNotExists.Int32(),
					StartPosition: common.FirstLinePosition,
				},
			}, nil
		}
	}

	// Create the rule
	rule := NewOnlineMigrationRule(level, title, minRows, dbSchema, checkCtx)

	// Create the generic checker with the rule
	checker := NewGenericChecker([]Rule{rule})

	for _, stmt := range stmtList {
		rule.SetBaseLine(stmt.BaseLine)
		checker.SetBaseLine(stmt.BaseLine)
		antlr.ParseTreeWalkerDefault.Walk(checker, stmt.Tree)
	}

	adviceList := rule.GetAdviceList()

	// More than one statements need online migration.
	// Advise running each statement in separate issues.
	if len(adviceList) > 1 {
		return adviceList, nil
	}
	// One statement needs online migration, others don't.
	// Advise running the statement in another issue.
	if len(adviceList) == 1 && len(stmtList) > 1 {
		return adviceList, nil
	}

	// We have only one statement, and the statement
	// needs online migration.
	// Advise to enable online migration for the issue, or return OK if it's already enabled.
	if len(adviceList) == 1 && len(stmtList) == 1 {
		if checkCtx.ChangeType == storepb.PlanCheckRunConfig_DDL_GHOST {
			return nil, nil
		}

		adviceList[0].Code = advisor.AdviseOnlineMigration.Int32()
		return adviceList, nil
	}

	// No statement needs online migration.
	// Advise to disable online migration if it's enabled.
	if len(adviceList) == 0 {
		if checkCtx.ChangeType == storepb.PlanCheckRunConfig_DDL_GHOST {
			return []*storepb.Advice{{
				Status:  level,
				Code:    advisor.AdviseNoOnlineMigration.Int32(),
				Title:   title,
				Content: "Advise to disable online migration because found no statements that need online migration",
			}}, nil
		}
		return nil, nil
	}

	// Should never reach this.
	return nil, nil
}

// OnlineMigrationRule checks for using gh-ost to migrate large tables.
type OnlineMigrationRule struct {
	BaseRule
	minRows          int64
	dbSchema         *model.DatabaseSchema
	checkCtx         advisor.Context
	currentDatabase  string
	changedResources map[string]parserbase.SchemaResource
	ghostCompatible  bool
	start            *storepb.Position
	end              *storepb.Position
}

// NewOnlineMigrationRule creates a new OnlineMigrationRule.
func NewOnlineMigrationRule(level storepb.Advice_Status, title string, minRows int64, dbSchema *model.DatabaseSchema, checkCtx advisor.Context) *OnlineMigrationRule {
	return &OnlineMigrationRule{
		BaseRule: BaseRule{
			level: level,
			title: title,
		},
		minRows:          minRows,
		dbSchema:         dbSchema,
		checkCtx:         checkCtx,
		currentDatabase:  checkCtx.CurrentDatabase,
		changedResources: make(map[string]parserbase.SchemaResource),
	}
}

// Name returns the rule name.
func (*OnlineMigrationRule) Name() string {
	return "OnlineMigrationRule"
}

// OnEnter is called when entering a parse tree node.
func (r *OnlineMigrationRule) OnEnter(ctx antlr.ParserRuleContext, nodeType string) error {
	switch nodeType {
	case NodeTypeAlterStatement:
		r.checkAlterStatement(ctx.(*mysql.AlterStatementContext))
	case NodeTypeAlterTable:
		r.checkAlterTable(ctx.(*mysql.AlterTableContext))
	case NodeTypeAlterTableActions:
		r.checkAlterTableActions(ctx.(*mysql.AlterTableActionsContext))
	default:
	}
	return nil
}

// OnExit is called when exiting a parse tree node.
func (r *OnlineMigrationRule) OnExit(ctx antlr.ParserRuleContext, nodeType string) error {
	if nodeType == NodeTypeAlterStatement {
		r.exitAlterStatement(ctx.(*mysql.AlterStatementContext))
	}
	return nil
}

func (r *OnlineMigrationRule) checkAlterStatement(ctx *mysql.AlterStatementContext) {
	r.start = common.ConvertANTLRPositionToPosition(
		&common.ANTLRPosition{
			Line:   int32(ctx.GetStart().GetLine()),
			Column: int32(ctx.GetStart().GetColumn()),
		},
		r.checkCtx.Statements,
	)
}

func (r *OnlineMigrationRule) exitAlterStatement(ctx *mysql.AlterStatementContext) {
	r.end = common.ConvertANTLRPositionToPosition(
		&common.ANTLRPosition{
			Line:   int32(r.baseLine) + int32(ctx.GetStop().GetLine()),
			Column: int32(ctx.GetStop().GetColumn() + len([]rune(ctx.GetStop().GetText()))),
		},
		r.checkCtx.Statements,
	)

	if !r.ghostCompatible {
		return
	}

	for _, resource := range r.changedResources {
		var tableRows int64
		for _, table := range r.dbSchema.GetMetadata().GetSchemas()[0].GetTables() {
			if table.GetName() == resource.Table {
				tableRows = table.GetRowCount()
				break
			}
		}
		if tableRows >= r.minRows {
			r.AddAdvice(&storepb.Advice{
				Status:        r.level,
				Code:          advisor.AdviseOnlineMigrationForStatement.Int32(),
				Title:         r.title,
				Content:       fmt.Sprintf("Estimated table row count of %q is %d exceeding the set value %d. Consider using online migration for this statement", fmt.Sprintf("%s.%s", resource.Schema, resource.Table), tableRows, r.minRows),
				StartPosition: r.start,
				EndPosition:   r.end,
			})
		}
	}
}

func (r *OnlineMigrationRule) checkAlterTable(ctx *mysql.AlterTableContext) {
	if !mysqlparser.IsTopMySQLRule(&ctx.BaseParserRuleContext) {
		return
	}
	resource := parserbase.SchemaResource{
		Database: r.currentDatabase,
	}
	db, table := mysqlparser.NormalizeMySQLTableRef(ctx.TableRef())
	if db != "" {
		resource.Database = db
	}
	resource.Table = table
	r.changedResources[resource.String()] = resource
}

func (r *OnlineMigrationRule) checkAlterTableActions(ctx *mysql.AlterTableActionsContext) {
	r.ghostCompatible = ctx.AlterCommandList() != nil || ctx.PartitionClause() != nil || ctx.RemovePartitioning() != nil
}
