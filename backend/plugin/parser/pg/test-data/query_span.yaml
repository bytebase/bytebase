- description: DML
  statement: INSERT INTO t (a, b, c, d) VALUES (1, 2, 3, 4);
  defaultDatabase: db
  metadata: |-
    {
      "name":  "db",
      "schemas":  [
        {
          "name": "public",
          "tables":  [
            {
              "name":  "t1",
              "columns":  [
                {
                  "name":  "a"
                },
                {
                  "name":  "b"
                },
                {
                  "name": "c"
                }
              ]
            },
            {
              "name":  "t2",
              "columns":  [
                {
                  "name":  "c"
                },
                {
                  "name":  "d"
                },
                {
                  "name":  "e"
                }
              ]
            }
          ],
          "functions": [
            {
              "name": "if_query",
              "definition": "CREATE OR REPLACE FUNCTION public.IF_QUERY() RETURNS TABLE(x int, xx int, xxx int) LANGUAGE plpgsql AS $function$ declare data_count int; BEGIN data_count := (select count(*) from public.t where a = 1); if (count(data_count) > 0) then RETURN QUERY SELECT a, b, c FROM t1; else RETURN QUERY SELECT c, d, e FROM t2; end if; END; $function$;"
            }
          ]
        }
      ]
    }
  querySpan:
    type: 5
    results: []
    sourcecolumns: []
- description: DDL
  statement: create table t (a int, b int, c int, d int);
  defaultDatabase: db
  metadata: |-
    {
      "name":  "db",
      "schemas":  [
        {
          "name": "public",
          "tables":  [
            {
              "name":  "t1",
              "columns":  [
                {
                  "name":  "a"
                },
                {
                  "name":  "b"
                },
                {
                  "name": "c"
                }
              ]
            },
            {
              "name":  "t2",
              "columns":  [
                {
                  "name":  "c"
                },
                {
                  "name":  "d"
                },
                {
                  "name":  "e"
                }
              ]
            }
          ],
          "functions": [
            {
              "name": "if_query",
              "definition": "CREATE OR REPLACE FUNCTION public.IF_QUERY() RETURNS TABLE(x int, xx int, xxx int) LANGUAGE plpgsql AS $function$ declare data_count int; BEGIN data_count := (select count(*) from public.t where a = 1); if (count(data_count) > 0) then RETURN QUERY SELECT a, b, c FROM t1; else RETURN QUERY SELECT c, d, e FROM t2; end if; END; $function$;"
            }
          ]
        }
      ]
    }
  querySpan:
    type: 4
    results: []
    sourcecolumns: []
- description: Explain
  statement: EXPLAIN SELECT * FROM t;
  defaultDatabase: db
  metadata: |-
    {
      "name":  "db",
      "schemas":  [
        {
          "name": "public",
          "tables":  [
            {
              "name":  "t1",
              "columns":  [
                {
                  "name":  "a"
                },
                {
                  "name":  "b"
                },
                {
                  "name": "c"
                }
              ]
            },
            {
              "name":  "t2",
              "columns":  [
                {
                  "name":  "c"
                },
                {
                  "name":  "d"
                },
                {
                  "name":  "e"
                }
              ]
            }
          ],
          "functions": [
            {
              "name": "if_query",
              "definition": "CREATE OR REPLACE FUNCTION public.IF_QUERY() RETURNS TABLE(x int, xx int, xxx int) LANGUAGE plpgsql AS $function$ declare data_count int; BEGIN data_count := (select count(*) from public.t where a = 1); if (count(data_count) > 0) then RETURN QUERY SELECT a, b, c FROM t1; else RETURN QUERY SELECT c, d, e FROM t2; end if; END; $function$;"
            }
          ]
        }
      ]
    }
  querySpan:
    type: 2
    results: []
    sourcecolumns: []
- description: Explain Analyze
  statement: EXPLAIN ANALYZE SELECT * FROM t1;
  defaultDatabase: db
  metadata: |-
    {
      "name":  "db",
      "schemas":  [
        {
          "name": "public",
          "tables":  [
            {
              "name":  "t1",
              "columns":  [
                {
                  "name":  "a"
                },
                {
                  "name":  "b"
                },
                {
                  "name": "c"
                }
              ]
            },
            {
              "name":  "t2",
              "columns":  [
                {
                  "name":  "c"
                },
                {
                  "name":  "d"
                },
                {
                  "name":  "e"
                }
              ]
            }
          ],
          "functions": [
            {
              "name": "if_query",
              "definition": "CREATE OR REPLACE FUNCTION public.IF_QUERY() RETURNS TABLE(x int, xx int, xxx int) LANGUAGE plpgsql AS $function$ declare data_count int; BEGIN data_count := (select count(*) from public.t where a = 1); if (count(data_count) > 0) then RETURN QUERY SELECT a, b, c FROM t1; else RETURN QUERY SELECT c, d, e FROM t2; end if; END; $function$;"
            }
          ]
        }
      ]
    }
  querySpan:
    type: 1
    results:
        - name: a
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t1
              column: a
        - name: b
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t1
              column: b
        - name: c
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t1
              column: c
    sourcecolumns:
        - server: ""
          database: db
          schema: public
          table: t1
          column: ""
- description: Function with if-else
  statement: SELECT * from IF_QUERY();
  defaultDatabase: db
  metadata: |-
    {
      "name":  "db",
      "schemas":  [
        {
          "name": "public",
          "tables":  [
            {
              "name":  "t1",
              "columns":  [
                {
                  "name":  "a"
                },
                {
                  "name":  "b"
                },
                {
                  "name": "c"
                }
              ]
            },
            {
              "name":  "t2",
              "columns":  [
                {
                  "name":  "c"
                },
                {
                  "name":  "d"
                },
                {
                  "name":  "e"
                }
              ]
            }
          ],
          "functions": [
            {
              "name": "if_query",
              "definition": "CREATE OR REPLACE FUNCTION public.IF_QUERY() RETURNS TABLE(x int, xx int, xxx int) LANGUAGE plpgsql AS $function$ declare data_count int; BEGIN data_count := (select count(*) from public.t where a = 1); if (count(data_count) > 0) then RETURN QUERY SELECT a, b, c FROM t1; else RETURN QUERY SELECT c, d, e FROM t2; end if; END; $function$;"
            }
          ]
        }
      ]
    }
  querySpan:
    type: 1
    results:
        - name: x
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t1
              column: a
            - server: ""
              database: db
              schema: public
              table: t2
              column: c
        - name: xx
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t1
              column: b
            - server: ""
              database: db
              schema: public
              table: t2
              column: d
        - name: xxx
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t1
              column: c
            - server: ""
              database: db
              schema: public
              table: t2
              column: e
    sourcecolumns:
        - server: ""
          database: db
          schema: public
          table: t1
          column: ""
        - server: ""
          database: db
          schema: public
          table: t2
          column: ""
- description: Function with variables
  statement: SELECT plpgsql_t(1);
  defaultDatabase: db
  metadata: |-
    {
      "name":  "db",
      "schemas":  [
        {
          "name": "public",
          "tables":  [
            {
              "name":  "t",
              "columns":  [
                {
                  "name":  "a"
                },
                {
                  "name":  "b"
                }
              ]
            },
            {
              "name":  "t2",
              "columns":  [
                {
                  "name":  "c"
                },
                {
                  "name":  "d"
                }
              ]
            }
          ],
          "functions": [
            {
              "name": "plpgsql_t",
              "definition": "CREATE OR REPLACE FUNCTION plpgsql_t (x int) RETURNS TABLE(a int, b int) LANGUAGE plpgsql AS $$ DECLARE v_1 int := 0; v_2 int := 0; BEGIN v_1 := (select sum(a) from t where b = x group by b); v_2 := (select sum(c) from t2 where d = x group by d); RETURN QUERY select v_1, v_2; END; $$"
            }
          ]
        }
      ]
    }
  querySpan:
    type: 1
    results:
        - name: plpgsql_t
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: a
            - server: ""
              database: db
              schema: public
              table: t2
              column: c
    sourcecolumns:
        - server: ""
          database: db
          schema: public
          table: t
          column: ""
        - server: ""
          database: db
          schema: public
          table: t2
          column: ""
- description: Function Overloading
  statement: SELECT plpgsql_t(1, 2);
  defaultDatabase: db
  metadata: |-
    {
      "name":  "db",
      "schemas":  [
        {
          "name": "public",
          "tables":  [
            {
              "name":  "t",
              "columns":  [
                {
                  "name":  "a"
                },
                {
                  "name":  "b"
                }
              ]
            },
            {
              "name":  "t2",
              "columns":  [
                {
                  "name":  "c"
                },
                {
                  "name":  "d"
                }
              ]
            }
          ],
          "functions": [
            {
              "name": "plpgsql_t",
              "definition": "CREATE OR REPLACE FUNCTION plpgsql_t (x int) RETURNS TABLE(a int, b int) AS $$ BEGIN RETURN QUERY SELECT a, b FROM t WHERE a = $1; END; $$ LANGUAGE plpgsql;"
            },
            {
              "name": "plpgsql_t",
              "definition": "CREATE OR REPLACE FUNCTION plpgsql_t (x int, y int) RETURNS TABLE(a int, b int) AS $$ BEGIN RETURN QUERY SELECT c, d FROM t2 WHERE a = $1 AND b = $2; END; $$ LANGUAGE plpgsql;"
            }
          ]
        }
      ]
    }
  querySpan:
    type: 1
    results:
        - name: plpgsql_t
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t2
              column: c
            - server: ""
              database: db
              schema: public
              table: t2
              column: d
    sourcecolumns:
        - server: ""
          database: db
          schema: public
          table: t2
          column: ""
- description: Bytebase Regression Test
  statement: |-
    WITH
      issue_approvers AS (
        SELECT
          issue.id AS issue_id,
          COALESCE(
            array_agg(DISTINCT principal.email) FILTER (
              WHERE
                x.status = 'APPROVED'
            ),
            '{}'
          ) AS approver_emails
        FROM
          issue
          LEFT JOIN LATERAL jsonb_to_recordset(issue.payload -> 'approval' -> 'approvers') as x (status text, "principalId" int) ON TRUE
          LEFT JOIN principal ON principal.id = x."principalId"
        GROUP BY
          issue.id
        ORDER BY
          issue.id
      ),
      issue_releasers AS (
        SELECT
          issue.id AS issue_id,
          COALESCE(
            array_agg(DISTINCT principal.email) FILTER (
              WHERE
                task_run.creator_id IS NOT NULL
            ),
            '{}'
          ) AS releaser_emails
        FROM
          issue
          LEFT JOIN task ON issue.pipeline_id = task.pipeline_id
          LEFT JOIN task_run ON task_run.task_id = task.id
          LEFT JOIN principal ON task_run.creator_id = principal.id
        GROUP BY
          issue.id
        ORDER BY
          issue.id
      )
    SELECT
      date_trunc('month', to_timestamp(issue.created_ts)) AS month,
      COUNT(issue.id) AS issue_count,
      ia.approver_emails,
      ir.releaser_emails
    FROM
      issue
      LEFT JOIN issue_approvers ia ON ia.issue_id = issue.id
      LEFT JOIN issue_releasers ir ON ir.issue_id = issue.id
    WHERE
      issue.status = 'DONE'
      AND ia.approver_emails @> ir.releaser_emails
      AND ir.releaser_emails @> ia.approver_emails
      AND array_length(ir.releaser_emails, 1) > 0
    GROUP BY
      month,
      ia.approver_emails,
      ir.releaser_emails
    ORDER BY
      month;
  defaultDatabase: db
  metadata: |-
    {
      "name": "db",
      "schemas": [
        {
          "name": "public",
          "tables": [
            {
              "name": "issue",
              "columns": [
                {
                  "name": "id",
                  "position": 1,
                  "defaultExpression": "nextval('issue_id_seq'::regclass)",
                  "type": "integer"
                },
                {
                  "name": "row_status",
                  "position": 2,
                  "defaultExpression": "'NORMAL'::row_status",
                  "type": "public.row_status"
                },
                {
                  "name": "creator_id",
                  "position": 3,
                  "type": "integer"
                },
                {
                  "name": "created_ts",
                  "position": 4,
                  "defaultExpression": "EXTRACT(epoch FROM now())",
                  "type": "bigint"
                },
                {
                  "name": "updater_id",
                  "position": 5,
                  "type": "integer"
                },
                {
                  "name": "updated_ts",
                  "position": 6,
                  "defaultExpression": "EXTRACT(epoch FROM now())",
                  "type": "bigint"
                },
                {
                  "name": "project_id",
                  "position": 7,
                  "type": "integer"
                },
                {
                  "name": "plan_id",
                  "position": 8,
                  "nullable": true,
                  "type": "bigint"
                },
                {
                  "name": "pipeline_id",
                  "position": 9,
                  "nullable": true,
                  "type": "integer"
                },
                {
                  "name": "name",
                  "position": 10,
                  "type": "text"
                },
                {
                  "name": "status",
                  "position": 11,
                  "type": "text"
                },
                {
                  "name": "type",
                  "position": 12,
                  "type": "text"
                },
                {
                  "name": "description",
                  "position": 13,
                  "defaultExpression": "''::text",
                  "type": "text"
                },
                {
                  "name": "assignee_id",
                  "position": 14,
                  "nullable": true,
                  "type": "integer"
                },
                {
                  "name": "assignee_need_attention",
                  "position": 15,
                  "defaultExpression": "false",
                  "type": "boolean"
                },
                {
                  "name": "payload",
                  "position": 16,
                  "defaultExpression": "'{}'::jsonb",
                  "type": "jsonb"
                },
                {
                  "name": "ts_vector",
                  "position": 17,
                  "nullable": true,
                  "type": "tsvector"
                }
              ]
            },
            {
              "name": "principal",
              "columns": [
                {
                  "name": "id",
                  "position": 1,
                  "defaultExpression": "nextval('principal_id_seq'::regclass)",
                  "type": "integer"
                },
                {
                  "name": "row_status",
                  "position": 2,
                  "defaultExpression": "'NORMAL'::row_status",
                  "type": "public.row_status"
                },
                {
                  "name": "creator_id",
                  "position": 3,
                  "type": "integer"
                },
                {
                  "name": "created_ts",
                  "position": 4,
                  "defaultExpression": "EXTRACT(epoch FROM now())",
                  "type": "bigint"
                },
                {
                  "name": "updater_id",
                  "position": 5,
                  "type": "integer"
                },
                {
                  "name": "updated_ts",
                  "position": 6,
                  "defaultExpression": "EXTRACT(epoch FROM now())",
                  "type": "bigint"
                },
                {
                  "name": "type",
                  "position": 7,
                  "type": "text"
                },
                {
                  "name": "name",
                  "position": 8,
                  "type": "text"
                },
                {
                  "name": "email",
                  "position": 9,
                  "type": "text"
                },
                {
                  "name": "password_hash",
                  "position": 10,
                  "type": "text"
                },
                {
                  "name": "phone",
                  "position": 11,
                  "defaultExpression": "''::text",
                  "type": "text"
                },
                {
                  "name": "mfa_config",
                  "position": 12,
                  "defaultExpression": "'{}'::jsonb",
                  "type": "jsonb"
                }
              ]
            },
            {
              "name": "task",
              "columns": [
                {
                  "name": "id",
                  "position": 1,
                  "defaultExpression": "nextval('task_id_seq'::regclass)",
                  "type": "integer"
                },
                {
                  "name": "row_status",
                  "position": 2,
                  "defaultExpression": "'NORMAL'::row_status",
                  "type": "public.row_status"
                },
                {
                  "name": "creator_id",
                  "position": 3,
                  "type": "integer"
                },
                {
                  "name": "created_ts",
                  "position": 4,
                  "defaultExpression": "EXTRACT(epoch FROM now())",
                  "type": "bigint"
                },
                {
                  "name": "updater_id",
                  "position": 5,
                  "type": "integer"
                },
                {
                  "name": "updated_ts",
                  "position": 6,
                  "defaultExpression": "EXTRACT(epoch FROM now())",
                  "type": "bigint"
                },
                {
                  "name": "pipeline_id",
                  "position": 7,
                  "type": "integer"
                },
                {
                  "name": "stage_id",
                  "position": 8,
                  "type": "integer"
                },
                {
                  "name": "instance_id",
                  "position": 9,
                  "type": "integer"
                },
                {
                  "name": "database_id",
                  "position": 10,
                  "nullable": true,
                  "type": "integer"
                },
                {
                  "name": "name",
                  "position": 11,
                  "type": "text"
                },
                {
                  "name": "status",
                  "position": 12,
                  "type": "text"
                },
                {
                  "name": "type",
                  "position": 13,
                  "type": "text"
                },
                {
                  "name": "payload",
                  "position": 14,
                  "defaultExpression": "'{}'::jsonb",
                  "type": "jsonb"
                },
                {
                  "name": "earliest_allowed_ts",
                  "position": 15,
                  "defaultExpression": "0",
                  "type": "bigint"
                }
              ]
            },
            {
              "name": "task_run",
              "columns": [
                {
                  "name": "id",
                  "position": 1,
                  "defaultExpression": "nextval('task_run_id_seq'::regclass)",
                  "type": "integer"
                },
                {
                  "name": "creator_id",
                  "position": 2,
                  "type": "integer"
                },
                {
                  "name": "created_ts",
                  "position": 3,
                  "defaultExpression": "EXTRACT(epoch FROM now())",
                  "type": "bigint"
                },
                {
                  "name": "updater_id",
                  "position": 4,
                  "type": "integer"
                },
                {
                  "name": "updated_ts",
                  "position": 5,
                  "defaultExpression": "EXTRACT(epoch FROM now())",
                  "type": "bigint"
                },
                {
                  "name": "task_id",
                  "position": 6,
                  "type": "integer"
                },
                {
                  "name": "attempt",
                  "position": 7,
                  "type": "integer"
                },
                {
                  "name": "name",
                  "position": 8,
                  "type": "text"
                },
                {
                  "name": "status",
                  "position": 9,
                  "type": "text"
                },
                {
                  "name": "started_ts",
                  "position": 10,
                  "defaultExpression": "0",
                  "type": "bigint"
                },
                {
                  "name": "code",
                  "position": 11,
                  "defaultExpression": "0",
                  "type": "integer"
                },
                {
                  "name": "result",
                  "position": 12,
                  "defaultExpression": "'{}'::jsonb",
                  "type": "jsonb"
                },
                {
                  "name": "sheet_id",
                  "position": 13,
                  "nullable": true,
                  "type": "integer"
                }
              ]
            }
          ]
        }
      ]
    }
  querySpan:
    type: 1
    results:
        - name: month
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: issue
              column: created_ts
        - name: issue_count
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: issue
              column: id
        - name: approver_emails
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: issue
              column: payload
            - server: ""
              database: db
              schema: public
              table: principal
              column: email
        - name: releaser_emails
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: principal
              column: email
            - server: ""
              database: db
              schema: public
              table: task_run
              column: creator_id
    sourcecolumns:
        - server: ""
          database: db
          schema: public
          table: issue
          column: ""
        - server: ""
          database: db
          schema: public
          table: principal
          column: ""
        - server: ""
          database: db
          schema: public
          table: task
          column: ""
        - server: ""
          database: db
          schema: public
          table: task_run
          column: ""
- description: Test For PLpgSQL User Defined Function in expression
  statement: SELECT plpgsql_t(1);
  defaultDatabase: db
  metadata: |-
    {
      "name":  "db",
      "schemas":  [
        {
          "name": "public",
          "tables":  [
            {
              "name":  "t",
              "columns":  [
                {
                  "name":  "a"
                },
                {
                  "name":  "b"
                }
              ]
            }
          ],
          "functions": [
            {
              "name": "plpgsql_t",
              "definition": "CREATE OR REPLACE FUNCTION plpgsql_t (x int) RETURNS TABLE(a int, b int) AS $$ BEGIN RETURN QUERY SELECT a, b FROM t WHERE a = $1; END; $$ LANGUAGE plpgsql;"
            }
          ]
        }
      ]
    }
  querySpan:
    type: 1
    results:
        - name: plpgsql_t
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: a
            - server: ""
              database: db
              schema: public
              table: t
              column: b
    sourcecolumns:
        - server: ""
          database: db
          schema: public
          table: t
          column: ""
- description: json_object as target field
  statement: 'SELECT json_object(''id'': a) FROM t'
  defaultDatabase: db
  metadata: |-
    {
      "name":  "db",
      "schemas":  [
        {
          "name": "public",
          "tables":  [
            {
              "name":  "t",
              "columns":  [
                {
                  "name":  "a"
                }
              ]
            }
          ]
        }
      ]
    }
  querySpan:
    type: 1
    results:
        - name: ?column?
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: a
    sourcecolumns:
        - server: ""
          database: db
          schema: public
          table: t
          column: ""
- description: json_array as target field
  statement: SELECT json_array(a) FROM t;
  defaultDatabase: db
  metadata: |-
    {
      "name":  "db",
      "schemas":  [
        {
          "name": "public",
          "tables":  [
            {
              "name":  "t",
              "columns":  [
                {
                  "name":  "a"
                }
              ]
            }
          ]
        }
      ]
    }
  querySpan:
    type: 1
    results:
        - name: ?column?
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: a
    sourcecolumns:
        - server: ""
          database: db
          schema: public
          table: t
          column: ""
- description: json_each as target field
  statement: SELECT jsonb_each(a) FROM t;
  defaultDatabase: db
  metadata: |-
    {
      "name":  "db",
      "schemas":  [
        {
          "name": "public",
          "tables":  [
            {
              "name":  "t",
              "columns":  [
                {
                  "name":  "a"
                }
              ]
            }
          ]
        }
      ]
    }
  querySpan:
    type: 1
    results:
        - name: jsonb_each
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: a
    sourcecolumns:
        - server: ""
          database: db
          schema: public
          table: t
          column: ""
- description: json_each acted as table source
  statement: SELECT * FROM t, jsonb_each(a) WHERE id = 1;
  defaultDatabase: db
  metadata: |-
    {
      "name":  "db",
      "schemas":  [
        {
          "name": "public",
          "tables":  [
            {
              "name":  "t",
              "columns":  [
                {
                  "name":  "a"
                }
              ]
            }
          ]
        }
      ]
    }
  querySpan:
    type: 1
    results:
        - name: a
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: a
        - name: key
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: a
        - name: value
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: a
    sourcecolumns:
        - server: ""
          database: db
          schema: public
          table: t
          column: ""
- description: to_jsonb accept table as argument with from table alias
  statement: SELECT to_jsonb(t1) FROM t t1;
  defaultDatabase: db
  metadata: |-
    {
      "name":  "db",
      "schemas":  [
        {
          "name": "public",
          "tables":  [
            {
              "name":  "t",
              "columns":  [
                {
                  "name":  "a"
                }
              ]
            }
          ]
        }
      ]
    }
  querySpan:
    type: 1
    results:
        - name: to_jsonb
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: a
    sourcecolumns:
        - server: ""
          database: db
          schema: public
          table: t
          column: ""
- description: Test for JSON function
  statement: SELECT row_to_json(t) FROM t;
  defaultDatabase: db
  metadata: |-
    {
      "name":  "db",
      "schemas":  [
        {
          "name": "public",
          "tables":  [
            {
              "name":  "t",
              "columns":  [
                {
                  "name":  "a"
                }
              ]
            }
          ]
        }
      ]
    }
  querySpan:
    type: 1
    results:
        - name: row_to_json
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: a
    sourcecolumns:
        - server: ""
          database: db
          schema: public
          table: t
          column: ""
- description: Test For unnest function
  statement: SELECT * FROM unnest(ARRAY[1,2,3], ARRAY[4,5,6]);
  defaultDatabase: db
  metadata: |-
    {
      "name":  "db",
      "schemas":  [
        {
          "name": "public",
          "tables":  [
            {
              "name":  "t",
              "columns":  [
                {
                  "name":  "a"
                }
              ]
            }
          ]
        }
      ]
    }
  querySpan:
    type: 1
    results:
        - name: unnest
          sourcecolumns: []
        - name: unnest
          sourcecolumns: []
    sourcecolumns: []
- description: Test For unnest function
  statement: SELECT * FROM unnest(ARRAY[1,2,3]);
  defaultDatabase: db
  metadata: |-
    {
      "name":  "db",
      "schemas":  [
        {
          "name": "public",
          "tables":  [
            {
              "name":  "t",
              "columns":  [
                {
                  "name":  "a"
                }
              ]
            }
          ]
        }
      ]
    }
  querySpan:
    type: 1
    results:
        - name: unnest
          sourcecolumns: []
    sourcecolumns: []
- description: Test For System Function As Table Source
  statement: SELECT * FROM generate_series(1, 3);
  defaultDatabase: db
  metadata: |-
    {
      "name":  "db",
      "schemas":  [
        {
          "name": "public",
          "tables":  [
            {
              "name":  "t",
              "columns":  [
                {
                  "name":  "a"
                }
              ]
            }
          ]
        }
      ]
    }
  querySpan:
    type: 1
    results:
        - name: generate_series
          sourcecolumns: []
    sourcecolumns: []
- description: Test For System Function As Table Source
  statement: SELECT * FROM generate_subscripts(ARRAY[1,2,3], 1);
  defaultDatabase: db
  metadata: |-
    {
      "name":  "db",
      "schemas":  [
        {
          "name": "public",
          "tables":  [
            {
              "name":  "t",
              "columns":  [
                {
                  "name":  "a"
                }
              ]
            }
          ]
        }
      ]
    }
  querySpan:
    type: 1
    results:
        - name: generate_subscripts
          sourcecolumns: []
    sourcecolumns: []
- description: Test For alias.* with join
  statement: SELECT t1.*, t2.* FROM t t1 JOIN (select * from t) t2 ON t1.a = t2.a;
  defaultDatabase: db
  metadata: |-
    {
      "name":  "db",
      "schemas":  [
        {
          "name": "public",
          "tables":  [
            {
              "name":  "t",
              "columns":  [
                {
                  "name":  "a"
                }
              ]
            }
          ]
        }
      ]
    }
  querySpan:
    type: 1
    results:
        - name: a
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: a
        - name: a
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: a
    sourcecolumns:
        - server: ""
          database: db
          schema: public
          table: t
          column: ""
- description: Test For Complex PLpgSQL Function As Table Source
  statement: SELECT * FROM plpgsql_complex_t(1);
  defaultDatabase: db
  metadata: |-
    {
      "name":  "db",
      "schemas":  [
        {
          "name": "public",
          "tables":  [
            {
              "name":  "t",
              "columns":  [
                {
                  "name":  "a"
                }
              ]
            },
            {
              "name":  "t2",
              "columns":  [
                {
                  "name":  "a"
                }
              ]
            }
          ],
          "functions": [
            {
              "name": "plpgsql_complex_t",
              "definition": "CREATE OR REPLACE FUNCTION plpgsql_t (x int) RETURNS TABLE(a int) AS $$ BEGIN IF x = 1 THEN RETURN QUERY SELECT a FROM t WHERE a = $1; ELSE RETURN QUERY SELECT a FROM t2 WHERE a = $1; END IF; END; $$ LANGUAGE plpgsql;"
            }
          ]
        }
      ]
    }
  querySpan:
    type: 1
    results:
        - name: a
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: a
            - server: ""
              database: db
              schema: public
              table: t2
              column: a
    sourcecolumns:
        - server: ""
          database: db
          schema: public
          table: t
          column: ""
        - server: ""
          database: db
          schema: public
          table: t2
          column: ""
- description: Test For PLpgSQL Function As Table Source
  statement: SELECT * FROM plpgsql_t(1);
  defaultDatabase: db
  metadata: |-
    {
      "name":  "db",
      "schemas":  [
        {
          "name": "public",
          "tables":  [
            {
              "name":  "t",
              "columns":  [
                {
                  "name":  "a"
                }
              ]
            }
          ],
          "functions": [
            {
              "name": "plpgsql_t",
              "definition": "CREATE OR REPLACE FUNCTION plpgsql_t (x int) RETURNS TABLE(a int) AS $$ BEGIN RETURN QUERY SELECT a FROM t WHERE a = $1; END; $$ LANGUAGE plpgsql;"
            }
          ]
        }
      ]
    }
  querySpan:
    type: 1
    results:
        - name: a
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: a
    sourcecolumns:
        - server: ""
          database: db
          schema: public
          table: t
          column: ""
- description: Test For Cascade Function As Table Source
  statement: SELECT * FROM cascade_t(1);
  defaultDatabase: db
  metadata: |-
    {
      "name":  "db",
      "schemas":  [
        {
          "name": "public",
          "tables":  [
            {
              "name":  "t",
              "columns":  [
                {
                  "name":  "a"
                }
              ]
            }
          ],
          "functions": [
            {
              "name": "select_t",
              "definition": "CREATE FUNCTION select_t (x int) RETURNS TABLE(a int) AS $$ SELECT a FROM t WHERE a = $1; $$ LANGUAGE SQL;"
            },
            {
              "name": "cascade_t",
              "definition": "CREATE FUNCTION cascade_t (x int) RETURNS TABLE(a int) AS $$ SELECT * FROM select_t($1); $$ LANGUAGE SQL;"
            }
          ]
        }
      ]
    }
  querySpan:
    type: 1
    results:
        - name: a
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: a
    sourcecolumns:
        - server: ""
          database: db
          schema: public
          table: t
          column: ""
- description: Test For Function As Table Source
  statement: SELECT * FROM select_t(1);
  defaultDatabase: db
  metadata: |-
    {
      "name":  "db",
      "schemas":  [
        {
          "name": "public",
          "tables":  [
            {
              "name":  "t",
              "columns":  [
                {
                  "name":  "a"
                }
              ]
            }
          ],
          "functions": [
            {
              "name": "select_t",
              "definition": "CREATE FUNCTION select_t (x int) RETURNS TABLE(a int) AS $$ SELECT a FROM t WHERE a = $1; $$ LANGUAGE SQL;"
            }
          ]
        }
      ]
    }
  querySpan:
    type: 1
    results:
        - name: a
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: a
    sourcecolumns:
        - server: ""
          database: db
          schema: public
          table: t
          column: ""
- description: Test For Explain statements
  statement: EXPLAIN SELECT 1;
  defaultDatabase: db
  metadata: |-
    {
      "name":  "db",
      "schemas":  [
        {
          "name": "public",
          "tables":  [
            {
              "name":  "t",
              "columns":  [
                {
                  "name":  "a"
                }
              ]
            }
          ]
        }
      ]
    }
  querySpan:
    type: 2
    results: []
    sourcecolumns: []
- description: Test for simple select const
  statement: SELECT 1;
  defaultDatabase: db
  metadata: |-
    {
      "name":  "db",
      "schemas":  [
        {
          "name": "public",
          "tables":  [
            {
              "name":  "t",
              "columns":  [
                {
                  "name":  "a"
                }
              ]
            }
          ]
        }
      ]
    }
  querySpan:
    type: 1
    results:
        - name: ?column?
          sourcecolumns: []
    sourcecolumns: []
- description: Test asterisk and column
  statement: SELECT a, * FROM t;
  defaultDatabase: db
  metadata: |-
    {
      "name":  "db",
      "schemas":  [
        {
          "name": "public",
          "tables":  [
            {
              "name":  "t",
              "columns":  [
                {
                  "name":  "a"
                },
                {
                  "name":  "b"
                },
                {
                  "name":  "c"
                },
                {
                  "name":  "d"
                }
              ]
            }
          ]
        }
      ]
    }
  querySpan:
    type: 1
    results:
        - name: a
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: a
        - name: a
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: a
        - name: b
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: b
        - name: c
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: c
        - name: d
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: d
    sourcecolumns:
        - server: ""
          database: db
          schema: public
          table: t
          column: ""
- description: Happy path for a simple select statement
  statement: SELECT * FROM t
  defaultDatabase: db
  metadata: |-
    {
      "name":  "db",
      "schemas":  [
        {
          "name": "public",
          "tables":  [
            {
              "name":  "t",
              "columns":  [
                {
                  "name":  "a"
                },
                {
                  "name":  "b"
                },
                {
                  "name":  "c"
                },
                {
                  "name":  "d"
                }
              ]
            }
          ]
        }
      ]
    }
  querySpan:
    type: 1
    results:
        - name: a
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: a
        - name: b
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: b
        - name: c
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: c
        - name: d
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: d
    sourcecolumns:
        - server: ""
          database: db
          schema: public
          table: t
          column: ""
- description: Referenced table fields by different format
  statement: SELECT a, t.b, public.t.c, db.public.t.d FROM t;
  defaultDatabase: db
  metadata: |-
    {
      "name":  "db",
      "schemas":  [
        {
          "name": "public",
          "tables":  [
            {
              "name":  "t",
              "columns":  [
                {
                  "name":  "a"
                },
                {
                  "name":  "b"
                },
                {
                  "name":  "c"
                },
                {
                  "name":  "d"
                }
              ]
            }
          ]
        }
      ]
    }
  querySpan:
    type: 1
    results:
        - name: a
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: a
        - name: b
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: b
        - name: c
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: c
        - name: d
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: d
    sourcecolumns:
        - server: ""
          database: db
          schema: public
          table: t
          column: ""
- description: Scalar subquery in select fields
  statement: SELECT 1 AS col_1, (SELECT(2)) AS col_2, (SELECT AVG(a + b * c) FROM t) AS avg_a_b_c FROM t;
  defaultDatabase: db
  metadata: |-
    {
      "name":  "db",
      "schemas":  [
        {
          "name": "public",
          "tables":  [
            {
              "name":  "t",
              "columns":  [
                {
                  "name":  "a"
                },
                {
                  "name":  "b"
                },
                {
                  "name":  "c"
                },
                {
                  "name":  "d"
                }
              ]
            }
          ]
        }
      ]
    }
  querySpan:
    type: 1
    results:
        - name: col_1
          sourcecolumns: []
        - name: col_2
          sourcecolumns: []
        - name: avg_a_b_c
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: a
            - server: ""
              database: db
              schema: public
              table: t
              column: b
            - server: ""
              database: db
              schema: public
              table: t
              column: c
    sourcecolumns:
        - server: ""
          database: db
          schema: public
          table: t
          column: ""
- description: Multiple-Row subquery in where clause
  statement: SELECT 1 FROM t WHERE a IN (SELECT a FROM t);
  defaultDatabase: db
  metadata: |-
    {
      "name":  "db",
      "schemas":  [
        {
          "name": "public",
          "tables":  [
            {
              "name":  "t",
              "columns":  [
                {
                  "name":  "a"
                },
                {
                  "name":  "b"
                },
                {
                  "name":  "c"
                },
                {
                  "name":  "d"
                }
              ]
            }
          ]
        }
      ]
    }
  querySpan:
    type: 1
    results:
        - name: ?column?
          sourcecolumns: []
    sourcecolumns:
        - server: ""
          database: db
          schema: public
          table: t
          column: ""
- description: Correlated subquery in the target field clause.
  statement: SELECT city, (SELECT COUNT(*) FROM paintings p WHERE g.id = p.gallery_id) AS total_paintings FROM galleries g;
  defaultDatabase: db
  metadata: |-
    {
      "name":  "db",
      "schemas":  [
        {
          "name": "public",
          "tables":  [
            {
              "name":  "galleries",
              "columns":  [
                {
                  "name":  "id"
                },
                {
                  "name":  "city"
                }
              ]
            },
            {
              "name":  "paintings",
              "columns":  [
                {
                  "name":  "gallery_id"
                },
                {
                  "name":  "artist_id"
                },
                {
                  "name":  "title"
                },
                {
                  "name":  "price"
                }
              ]
            }
          ]
        }
      ]
    }
  querySpan:
    type: 1
    results:
        - name: city
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: galleries
              column: city
        - name: total_paintings
          sourcecolumns: []
    sourcecolumns:
        - server: ""
          database: db
          schema: public
          table: galleries
          column: ""
        - server: ""
          database: db
          schema: public
          table: paintings
          column: ""
- description: Test for functions
  statement: SELECT max(a), a-b AS c1, a=b AS c2, a>b, b in (a, c, d) from (SELECT * FROM t) result;
  defaultDatabase: db
  metadata: |-
    {
      "name":  "db",
      "schemas":  [
        {
          "name": "public",
          "tables":  [
            {
              "name":  "t",
              "columns":  [
                {
                  "name":  "a"
                },
                {
                  "name":  "b"
                },
                {
                  "name":  "c"
                },
                {
                  "name":  "d"
                }
              ]
            }
          ]
        }
      ]
    }
  querySpan:
    type: 1
    results:
        - name: max
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: a
        - name: c1
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: a
            - server: ""
              database: db
              schema: public
              table: t
              column: b
        - name: c2
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: a
            - server: ""
              database: db
              schema: public
              table: t
              column: b
        - name: ?column?
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: a
            - server: ""
              database: db
              schema: public
              table: t
              column: b
        - name: ?column?
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: a
            - server: ""
              database: db
              schema: public
              table: t
              column: b
            - server: ""
              database: db
              schema: public
              table: t
              column: c
            - server: ""
              database: db
              schema: public
              table: t
              column: d
    sourcecolumns:
        - server: ""
          database: db
          schema: public
          table: t
          column: ""
- description: Test for SELECT partial FROM JOIN clause
  statement: SELECT t1.*, t2.c, 0 FROM t1 JOIN t2 ON 1 = 1;
  defaultDatabase: db
  metadata: |-
    {
      "name":  "db",
      "schemas":  [
        {
          "name": "public",
          "tables":  [
            {
              "name":  "t1",
              "columns":  [
                {
                  "name":  "a"
                },
                {
                  "name":  "b"
                }
              ]
            },
            {
              "name":  "t2",
              "columns":  [
                {
                  "name":  "c"
                },
                {
                  "name":  "d"
                }
              ]
            }
          ]
        }
      ]
    }
  querySpan:
    type: 1
    results:
        - name: a
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t1
              column: a
        - name: b
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t1
              column: b
        - name: c
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t2
              column: c
        - name: ?column?
          sourcecolumns: []
    sourcecolumns:
        - server: ""
          database: db
          schema: public
          table: t1
          column: ""
        - server: ""
          database: db
          schema: public
          table: t2
          column: ""
- description: Test for JOIN with USING clause
  statement: SELECT * FROM t AS t1 JOIN t AS t2 USING(a);
  defaultDatabase: db
  metadata: |-
    {
      "name":  "db",
      "schemas":  [
        {
          "name": "public",
          "tables":  [
            {
              "name":  "t",
              "columns":  [
                {
                  "name":  "a"
                },
                {
                  "name":  "b"
                },
                {
                  "name":  "c"
                },
                {
                  "name":  "d"
                }
              ]
            }
          ]
        }
      ]
    }
  querySpan:
    type: 1
    results:
        - name: a
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: a
        - name: b
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: b
        - name: c
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: c
        - name: d
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: d
        - name: b
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: b
        - name: c
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: c
        - name: d
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: d
    sourcecolumns:
        - server: ""
          database: db
          schema: public
          table: t
          column: ""
- description: Simple CTE
  statement: WITH t1 AS (SELECT * FROM t) SELECT * FROM t1;
  defaultDatabase: db
  metadata: |-
    {
      "name":  "db",
      "schemas":  [
        {
          "name": "public",
          "tables":  [
            {
              "name":  "t",
              "columns":  [
                {
                  "name":  "a"
                },
                {
                  "name":  "b"
                },
                {
                  "name":  "c"
                },
                {
                  "name":  "d"
                }
              ]
            }
          ]
        }
      ]
    }
  querySpan:
    type: 1
    results:
        - name: a
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: a
        - name: b
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: b
        - name: c
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: c
        - name: d
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: d
    sourcecolumns:
        - server: ""
          database: db
          schema: public
          table: t
          column: ""
- description: Multi-level CTE
  statement: WITH tt2 AS (WITH tt2 AS (SELECT * FROM t) SELECT MAX(a) FROM tt2) SELECT * FROM tt2;
  defaultDatabase: db
  metadata: |-
    {
      "name":  "db",
      "schemas":  [
        {
          "name": "public",
          "tables":  [
            {
              "name":  "t",
              "columns":  [
                {
                  "name":  "a"
                },
                {
                  "name":  "b"
                },
                {
                  "name":  "c"
                },
                {
                  "name":  "d"
                }
              ]
            }
          ]
        }
      ]
    }
  querySpan:
    type: 1
    results:
        - name: max
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: a
    sourcecolumns:
        - server: ""
          database: db
          schema: public
          table: t
          column: ""
- description: Test for CTE rename fields name
  statement: WITH t1(d, c, b, a) AS (SELECT * FROM t) SELECT * FROM t1;
  defaultDatabase: db
  metadata: |-
    {
      "name":  "db",
      "schemas":  [
        {
          "name": "public",
          "tables":  [
            {
              "name":  "t",
              "columns":  [
                {
                  "name":  "a"
                },
                {
                  "name":  "b"
                },
                {
                  "name":  "c"
                },
                {
                  "name":  "d"
                }
              ]
            }
          ]
        }
      ]
    }
  querySpan:
    type: 1
    results:
        - name: d
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: a
        - name: c
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: b
        - name: b
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: c
        - name: a
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: d
    sourcecolumns:
        - server: ""
          database: db
          schema: public
          table: t
          column: ""
- description: Test for Recursive Common Table Expression dependent closures
  statement: WITH RECURSIVE t1(cc1, cc2, cc3, n) AS (SELECT a AS c1, b AS c2, c AS c3, 1 AS n FROM t UNION SELECT cc1*cc2, cc2 + cc1, cc3 * cc2, n+1 FROM t1 WHERE n < 10) SELECT * FROM t1;
  defaultDatabase: db
  metadata: |-
    {
      "name":  "db",
      "schemas":  [
        {
          "name": "public",
          "tables":  [
            {
              "name":  "t",
              "columns":  [
                {
                  "name":  "a"
                },
                {
                  "name":  "b"
                },
                {
                  "name":  "c"
                },
                {
                  "name":  "d"
                }
              ]
            }
          ]
        }
      ]
    }
  querySpan:
    type: 1
    results:
        - name: cc1
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: a
            - server: ""
              database: db
              schema: public
              table: t
              column: b
        - name: cc2
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: a
            - server: ""
              database: db
              schema: public
              table: t
              column: b
        - name: cc3
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: a
            - server: ""
              database: db
              schema: public
              table: t
              column: b
            - server: ""
              database: db
              schema: public
              table: t
              column: c
        - name: "n"
          sourcecolumns: []
    sourcecolumns:
        - server: ""
          database: db
          schema: public
          table: t
          column: ""
- description: Test for Non-Recursive Common Table Expression with RECURSIVE key words
  statement: WITH RECURSIVE t1 AS (SELECT 1 AS c1, 2 AS c2, 3 AS c3, 4 AS c4 UNION SELECT a, b, d, c FROM t) SELECT * FROM t1;
  defaultDatabase: db
  metadata: |-
    {
      "name":  "db",
      "schemas":  [
        {
          "name": "public",
          "tables":  [
            {
              "name":  "t",
              "columns":  [
                {
                  "name":  "a"
                },
                {
                  "name":  "b"
                },
                {
                  "name":  "c"
                },
                {
                  "name":  "d"
                }
              ]
            }
          ]
        }
      ]
    }
  querySpan:
    type: 1
    results:
        - name: c1
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: a
        - name: c2
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: b
        - name: c3
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: d
        - name: c4
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: c
    sourcecolumns:
        - server: ""
          database: db
          schema: public
          table: t
          column: ""
- description: query system tables
  statement: select * from information_schema.tables;
  defaultDatabase: db
  metadata: |-
    {
      "name":  "db",
      "schemas":  [
        {
          "name": "public",
          "tables":  [
            {
              "name":  "t",
              "columns":  [
                {
                  "name":  "a"
                }
              ]
            }
          ]
        }
      ]
    }
  querySpan:
    type: 3
    results: []
    sourcecolumns: []
