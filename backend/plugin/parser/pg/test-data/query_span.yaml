- description: Test For unnest function
  statement: SELECT * FROM unnest(ARRAY[1,2,3], ARRAY[4,5,6]);
  connectedDatabase: db
  metadata: |-
    {
      "name":  "db",
      "schemas":  [
        {
          "name": "public",
          "tables":  [
            {
              "name":  "t",
              "columns":  [
                {
                  "name":  "a"
                }
              ]
            }
          ]
        }
      ]
    }
  querySpan:
    results:
        - name: unnest
          sourcecolumns: []
        - name: unnest
          sourcecolumns: []
    sourcecolumns: []
- description: Test For unnest function
  statement: SELECT * FROM unnest(ARRAY[1,2,3]);
  connectedDatabase: db
  metadata: |-
    {
      "name":  "db",
      "schemas":  [
        {
          "name": "public",
          "tables":  [
            {
              "name":  "t",
              "columns":  [
                {
                  "name":  "a"
                }
              ]
            }
          ]
        }
      ]
    }
  querySpan:
    results:
        - name: unnest
          sourcecolumns: []
    sourcecolumns: []
- description: Test For System Function As Table Source
  statement: SELECT * FROM generate_series(1, 3);
  connectedDatabase: db
  metadata: |-
    {
      "name":  "db",
      "schemas":  [
        {
          "name": "public",
          "tables":  [
            {
              "name":  "t",
              "columns":  [
                {
                  "name":  "a"
                }
              ]
            }
          ]
        }
      ]
    }
  querySpan:
    results:
        - name: generate_series
          sourcecolumns: []
    sourcecolumns: []
- description: Test For System Function As Table Source
  statement: SELECT * FROM generate_subscripts(ARRAY[1,2,3], 1);
  connectedDatabase: db
  metadata: |-
    {
      "name":  "db",
      "schemas":  [
        {
          "name": "public",
          "tables":  [
            {
              "name":  "t",
              "columns":  [
                {
                  "name":  "a"
                }
              ]
            }
          ]
        }
      ]
    }
  querySpan:
    results:
        - name: generate_subscripts
          sourcecolumns: []
    sourcecolumns: []
- description: Test For alias.* with join
  statement: SELECT t1.*, t2.* FROM t t1 JOIN (select * from t) t2 ON t1.a = t2.a;
  connectedDatabase: db
  metadata: |-
    {
      "name":  "db",
      "schemas":  [
        {
          "name": "public",
          "tables":  [
            {
              "name":  "t",
              "columns":  [
                {
                  "name":  "a"
                }
              ]
            }
          ]
        }
      ]
    }
  querySpan:
    results:
        - name: a
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: a
        - name: a
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: a
    sourcecolumns:
        - server: ""
          database: db
          schema: public
          table: t
          column: ""
- description: Test For Complex PLpgSQL Function As Table Source
  statement: SELECT * FROM plpgsql_complex_t(1);
  connectedDatabase: db
  metadata: |-
    {
      "name":  "db",
      "schemas":  [
        {
          "name": "public",
          "tables":  [
            {
              "name":  "t",
              "columns":  [
                {
                  "name":  "a"
                }
              ]
            },
            {
              "name":  "t2",
              "columns":  [
                {
                  "name":  "a"
                }
              ]
            }
          ],
          "functions": [
            {
              "name": "plpgsql_complex_t",
              "definition": "CREATE OR REPLACE FUNCTION plpgsql_t (x int) RETURNS TABLE(a int) AS $$ BEGIN IF x = 1 THEN RETURN QUERY SELECT a FROM t WHERE a = $1; ELSE RETURN QUERY SELECT a FROM t2 WHERE a = $1; END IF; END; $$ LANGUAGE plpgsql;"
            }
          ]
        }
      ]
    }
  querySpan:
    results:
        - name: a
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: a
            - server: ""
              database: db
              schema: public
              table: t2
              column: a
    sourcecolumns:
        - server: ""
          database: db
          schema: public
          table: t
          column: ""
        - server: ""
          database: db
          schema: public
          table: t2
          column: ""
- description: Test For PLpgSQL Function As Table Source
  statement: SELECT * FROM plpgsql_t(1);
  connectedDatabase: db
  metadata: |-
    {
      "name":  "db",
      "schemas":  [
        {
          "name": "public",
          "tables":  [
            {
              "name":  "t",
              "columns":  [
                {
                  "name":  "a"
                }
              ]
            }
          ],
          "functions": [
            {
              "name": "plpgsql_t",
              "definition": "CREATE OR REPLACE FUNCTION plpgsql_t (x int) RETURNS TABLE(a int) AS $$ BEGIN RETURN QUERY SELECT a FROM t WHERE a = $1; END; $$ LANGUAGE plpgsql;"
            }
          ]
        }
      ]
    }
  querySpan:
    results:
        - name: a
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: a
    sourcecolumns:
        - server: ""
          database: db
          schema: public
          table: t
          column: ""
- description: Test For Cascade Function As Table Source
  statement: SELECT * FROM cascade_t(1);
  connectedDatabase: db
  metadata: |-
    {
      "name":  "db",
      "schemas":  [
        {
          "name": "public",
          "tables":  [
            {
              "name":  "t",
              "columns":  [
                {
                  "name":  "a"
                }
              ]
            }
          ],
          "functions": [
            {
              "name": "select_t",
              "definition": "CREATE FUNCTION select_t (x int) RETURNS TABLE(a int) AS $$ SELECT a FROM t WHERE a = $1; $$ LANGUAGE SQL;"
            },
            {
              "name": "cascade_t",
              "definition": "CREATE FUNCTION cascade_t (x int) RETURNS TABLE(a int) AS $$ SELECT * FROM select_t($1); $$ LANGUAGE SQL;"
            }
          ]
        }
      ]
    }
  querySpan:
    results:
        - name: a
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: a
    sourcecolumns:
        - server: ""
          database: db
          schema: public
          table: t
          column: ""
- description: Test For Function As Table Source
  statement: SELECT * FROM select_t(1);
  connectedDatabase: db
  metadata: |-
    {
      "name":  "db",
      "schemas":  [
        {
          "name": "public",
          "tables":  [
            {
              "name":  "t",
              "columns":  [
                {
                  "name":  "a"
                }
              ]
            }
          ],
          "functions": [
            {
              "name": "select_t",
              "definition": "CREATE FUNCTION select_t (x int) RETURNS TABLE(a int) AS $$ SELECT a FROM t WHERE a = $1; $$ LANGUAGE SQL;"
            }
          ]
        }
      ]
    }
  querySpan:
    results:
        - name: a
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: a
    sourcecolumns:
        - server: ""
          database: db
          schema: public
          table: t
          column: ""
- description: Test For Explain statements
  statement: EXPLAIN SELECT 1;
  connectedDatabase: db
  metadata: |-
    {
      "name":  "db",
      "schemas":  [
        {
          "name": "public",
          "tables":  [
            {
              "name":  "t",
              "columns":  [
                {
                  "name":  "a"
                }
              ]
            }
          ]
        }
      ]
    }
  querySpan:
    results: []
    sourcecolumns: []
- description: Test for simple select const
  statement: SELECT 1;
  connectedDatabase: db
  metadata: |-
    {
      "name":  "db",
      "schemas":  [
        {
          "name": "public",
          "tables":  [
            {
              "name":  "t",
              "columns":  [
                {
                  "name":  "a"
                }
              ]
            }
          ]
        }
      ]
    }
  querySpan:
    results:
        - name: ?column?
          sourcecolumns: []
    sourcecolumns: []
- description: Test asterisk and column
  statement: SELECT a, * FROM t;
  connectedDatabase: db
  metadata: |-
    {
      "name":  "db",
      "schemas":  [
        {
          "name": "public",
          "tables":  [
            {
              "name":  "t",
              "columns":  [
                {
                  "name":  "a"
                },
                {
                  "name":  "b"
                },
                {
                  "name":  "c"
                },
                {
                  "name":  "d"
                }
              ]
            }
          ]
        }
      ]
    }
  querySpan:
    results:
        - name: a
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: a
        - name: a
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: a
        - name: b
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: b
        - name: c
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: c
        - name: d
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: d
    sourcecolumns:
        - server: ""
          database: db
          schema: public
          table: t
          column: ""
- description: Happy path for a simple select statement
  statement: SELECT * FROM t
  connectedDatabase: db
  metadata: |-
    {
      "name":  "db",
      "schemas":  [
        {
          "name": "public",
          "tables":  [
            {
              "name":  "t",
              "columns":  [
                {
                  "name":  "a"
                },
                {
                  "name":  "b"
                },
                {
                  "name":  "c"
                },
                {
                  "name":  "d"
                }
              ]
            }
          ]
        }
      ]
    }
  querySpan:
    results:
        - name: a
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: a
        - name: b
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: b
        - name: c
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: c
        - name: d
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: d
    sourcecolumns:
        - server: ""
          database: db
          schema: public
          table: t
          column: ""
- description: Referenced table fields by different format
  statement: SELECT a, t.b, public.t.c, db.public.t.d FROM t;
  connectedDatabase: db
  metadata: |-
    {
      "name":  "db",
      "schemas":  [
        {
          "name": "public",
          "tables":  [
            {
              "name":  "t",
              "columns":  [
                {
                  "name":  "a"
                },
                {
                  "name":  "b"
                },
                {
                  "name":  "c"
                },
                {
                  "name":  "d"
                }
              ]
            }
          ]
        }
      ]
    }
  querySpan:
    results:
        - name: a
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: a
        - name: b
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: b
        - name: c
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: c
        - name: d
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: d
    sourcecolumns:
        - server: ""
          database: db
          schema: public
          table: t
          column: ""
- description: Scalar subquery in select fields
  statement: SELECT 1 AS col_1, (SELECT(2)) AS col_2, (SELECT AVG(a + b * c) FROM t) AS avg_a_b_c FROM t;
  connectedDatabase: db
  metadata: |-
    {
      "name":  "db",
      "schemas":  [
        {
          "name": "public",
          "tables":  [
            {
              "name":  "t",
              "columns":  [
                {
                  "name":  "a"
                },
                {
                  "name":  "b"
                },
                {
                  "name":  "c"
                },
                {
                  "name":  "d"
                }
              ]
            }
          ]
        }
      ]
    }
  querySpan:
    results:
        - name: col_1
          sourcecolumns: []
        - name: col_2
          sourcecolumns: []
        - name: avg_a_b_c
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: a
            - server: ""
              database: db
              schema: public
              table: t
              column: b
            - server: ""
              database: db
              schema: public
              table: t
              column: c
    sourcecolumns:
        - server: ""
          database: db
          schema: public
          table: t
          column: ""
- description: Multiple-Row subquery in where clause
  statement: SELECT 1 FROM t WHERE a IN (SELECT a FROM t);
  connectedDatabase: db
  metadata: |-
    {
      "name":  "db",
      "schemas":  [
        {
          "name": "public",
          "tables":  [
            {
              "name":  "t",
              "columns":  [
                {
                  "name":  "a"
                },
                {
                  "name":  "b"
                },
                {
                  "name":  "c"
                },
                {
                  "name":  "d"
                }
              ]
            }
          ]
        }
      ]
    }
  querySpan:
    results:
        - name: ?column?
          sourcecolumns: []
    sourcecolumns:
        - server: ""
          database: db
          schema: public
          table: t
          column: ""
- description: Correlated subquery in the target field clause.
  statement: SELECT city, (SELECT COUNT(*) FROM paintings p WHERE g.id = p.gallery_id) AS total_paintings FROM galleries g;
  connectedDatabase: db
  metadata: |-
    {
      "name":  "db",
      "schemas":  [
        {
          "name": "public",
          "tables":  [
            {
              "name":  "galleries",
              "columns":  [
                {
                  "name":  "id"
                },
                {
                  "name":  "city"
                }
              ]
            },
            {
              "name":  "paintings",
              "columns":  [
                {
                  "name":  "gallery_id"
                },
                {
                  "name":  "artist_id"
                },
                {
                  "name":  "title"
                },
                {
                  "name":  "price"
                }
              ]
            }
          ]
        }
      ]
    }
  querySpan:
    results:
        - name: city
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: galleries
              column: city
        - name: total_paintings
          sourcecolumns: []
    sourcecolumns:
        - server: ""
          database: db
          schema: public
          table: galleries
          column: ""
        - server: ""
          database: db
          schema: public
          table: paintings
          column: ""
- description: Test for functions
  statement: SELECT max(a), a-b AS c1, a=b AS c2, a>b, b in (a, c, d) from (SELECT * FROM t) result;
  connectedDatabase: db
  metadata: |-
    {
      "name":  "db",
      "schemas":  [
        {
          "name": "public",
          "tables":  [
            {
              "name":  "t",
              "columns":  [
                {
                  "name":  "a"
                },
                {
                  "name":  "b"
                },
                {
                  "name":  "c"
                },
                {
                  "name":  "d"
                }
              ]
            }
          ]
        }
      ]
    }
  querySpan:
    results:
        - name: max
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: a
        - name: c1
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: a
            - server: ""
              database: db
              schema: public
              table: t
              column: b
        - name: c2
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: a
            - server: ""
              database: db
              schema: public
              table: t
              column: b
        - name: ?column?
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: a
            - server: ""
              database: db
              schema: public
              table: t
              column: b
        - name: ?column?
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: a
            - server: ""
              database: db
              schema: public
              table: t
              column: b
            - server: ""
              database: db
              schema: public
              table: t
              column: c
            - server: ""
              database: db
              schema: public
              table: t
              column: d
    sourcecolumns:
        - server: ""
          database: db
          schema: public
          table: t
          column: ""
- description: Test for SELECT partial FROM JOIN clause
  statement: SELECT t1.*, t2.c, 0 FROM t1 JOIN t2 ON 1 = 1;
  connectedDatabase: db
  metadata: |-
    {
      "name":  "db",
      "schemas":  [
        {
          "name": "public",
          "tables":  [
            {
              "name":  "t1",
              "columns":  [
                {
                  "name":  "a"
                },
                {
                  "name":  "b"
                }
              ]
            },
            {
              "name":  "t2",
              "columns":  [
                {
                  "name":  "c"
                },
                {
                  "name":  "d"
                }
              ]
            }
          ]
        }
      ]
    }
  querySpan:
    results:
        - name: a
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t1
              column: a
        - name: b
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t1
              column: b
        - name: c
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t2
              column: c
        - name: ?column?
          sourcecolumns: []
    sourcecolumns:
        - server: ""
          database: db
          schema: public
          table: t1
          column: ""
        - server: ""
          database: db
          schema: public
          table: t2
          column: ""
- description: Test for JOIN with USING clause
  statement: SELECT * FROM t AS t1 JOIN t AS t2 USING(a);
  connectedDatabase: db
  metadata: |-
    {
      "name":  "db",
      "schemas":  [
        {
          "name": "public",
          "tables":  [
            {
              "name":  "t",
              "columns":  [
                {
                  "name":  "a"
                },
                {
                  "name":  "b"
                },
                {
                  "name":  "c"
                },
                {
                  "name":  "d"
                }
              ]
            }
          ]
        }
      ]
    }
  querySpan:
    results:
        - name: a
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: a
        - name: b
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: b
        - name: c
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: c
        - name: d
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: d
        - name: b
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: b
        - name: c
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: c
        - name: d
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: d
    sourcecolumns:
        - server: ""
          database: db
          schema: public
          table: t
          column: ""
- description: Simple CTE
  statement: WITH t1 AS (SELECT * FROM t) SELECT * FROM t1;
  connectedDatabase: db
  metadata: |-
    {
      "name":  "db",
      "schemas":  [
        {
          "name": "public",
          "tables":  [
            {
              "name":  "t",
              "columns":  [
                {
                  "name":  "a"
                },
                {
                  "name":  "b"
                },
                {
                  "name":  "c"
                },
                {
                  "name":  "d"
                }
              ]
            }
          ]
        }
      ]
    }
  querySpan:
    results:
        - name: a
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: a
        - name: b
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: b
        - name: c
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: c
        - name: d
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: d
    sourcecolumns:
        - server: ""
          database: db
          schema: public
          table: t
          column: ""
- description: Multi-level CTE
  statement: WITH tt2 AS (WITH tt2 AS (SELECT * FROM t) SELECT MAX(a) FROM tt2) SELECT * FROM tt2;
  connectedDatabase: db
  metadata: |-
    {
      "name":  "db",
      "schemas":  [
        {
          "name": "public",
          "tables":  [
            {
              "name":  "t",
              "columns":  [
                {
                  "name":  "a"
                },
                {
                  "name":  "b"
                },
                {
                  "name":  "c"
                },
                {
                  "name":  "d"
                }
              ]
            }
          ]
        }
      ]
    }
  querySpan:
    results:
        - name: max
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: a
    sourcecolumns:
        - server: ""
          database: db
          schema: public
          table: t
          column: ""
- description: Test for CTE rename fields name
  statement: WITH t1(d, c, b, a) AS (SELECT * FROM t) SELECT * FROM t1;
  connectedDatabase: db
  metadata: |-
    {
      "name":  "db",
      "schemas":  [
        {
          "name": "public",
          "tables":  [
            {
              "name":  "t",
              "columns":  [
                {
                  "name":  "a"
                },
                {
                  "name":  "b"
                },
                {
                  "name":  "c"
                },
                {
                  "name":  "d"
                }
              ]
            }
          ]
        }
      ]
    }
  querySpan:
    results:
        - name: d
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: a
        - name: c
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: b
        - name: b
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: c
        - name: a
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: d
    sourcecolumns:
        - server: ""
          database: db
          schema: public
          table: t
          column: ""
- description: Test for Recursive Common Table Expression dependent closures
  statement: WITH RECURSIVE t1(cc1, cc2, cc3, n) AS (SELECT a AS c1, b AS c2, c AS c3, 1 AS n FROM t UNION SELECT cc1*cc2, cc2 + cc1, cc3 * cc2, n+1 FROM t1 WHERE n < 10) SELECT * FROM t1;
  connectedDatabase: db
  metadata: |-
    {
      "name":  "db",
      "schemas":  [
        {
          "name": "public",
          "tables":  [
            {
              "name":  "t",
              "columns":  [
                {
                  "name":  "a"
                },
                {
                  "name":  "b"
                },
                {
                  "name":  "c"
                },
                {
                  "name":  "d"
                }
              ]
            }
          ]
        }
      ]
    }
  querySpan:
    results:
        - name: cc1
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: a
            - server: ""
              database: db
              schema: public
              table: t
              column: b
        - name: cc2
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: a
            - server: ""
              database: db
              schema: public
              table: t
              column: b
        - name: cc3
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: a
            - server: ""
              database: db
              schema: public
              table: t
              column: b
            - server: ""
              database: db
              schema: public
              table: t
              column: c
        - name: "n"
          sourcecolumns: []
    sourcecolumns:
        - server: ""
          database: db
          schema: public
          table: t
          column: ""
- description: Test for Non-Recursive Common Table Expression with RECURSIVE key words
  statement: WITH RECURSIVE t1 AS (SELECT 1 AS c1, 2 AS c2, 3 AS c3, 4 AS c4 UNION SELECT a, b, d, c FROM t) SELECT * FROM t1;
  connectedDatabase: db
  metadata: |-
    {
      "name":  "db",
      "schemas":  [
        {
          "name": "public",
          "tables":  [
            {
              "name":  "t",
              "columns":  [
                {
                  "name":  "a"
                },
                {
                  "name":  "b"
                },
                {
                  "name":  "c"
                },
                {
                  "name":  "d"
                }
              ]
            }
          ]
        }
      ]
    }
  querySpan:
    results:
        - name: c1
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: a
        - name: c2
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: b
        - name: c3
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: d
        - name: c4
          sourcecolumns:
            - server: ""
              database: db
              schema: public
              table: t
              column: c
    sourcecolumns:
        - server: ""
          database: db
          schema: public
          table: t
          column: ""
