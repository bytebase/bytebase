- oldSchema: |
    CREATE TABLE public.projects ();
  newSchema: |
    CREATE TABLE public.users (
        id serial PRIMARY KEY,
        username TEXT NOT NULL
    );
    CREATE TABLE public.projects ();
    CREATE TABLE public.repositories (
        id serial PRIMARY KEY
    );
  diff: |+
    CREATE TABLE "public"."users" (
        "id" serial PRIMARY KEY,
        "username" text NOT NULL
    );

    CREATE TABLE "public"."repositories" (
        "id" serial PRIMARY KEY
    );

- oldSchema: CREATE TABLE public.t1(a int, b char(20), c int);
  newSchema: CREATE TABLE public.t1(a int);
  diff: |+
    ALTER TABLE "public"."t1"
        DROP COLUMN "b",
        DROP COLUMN "c";

- oldSchema: CREATE TABLE public.t1(a int);
  newSchema: CREATE TABLE public.t1(a int, b char(20), c int)
  diff: |+
    ALTER TABLE "public"."t1"
        ADD COLUMN "b" character(20),
        ADD COLUMN "c" integer;

- oldSchema: create table public.t1(a int, b bigint, c serial);
  newSchema: create table public.t1(a varchar(20), b serial, c bigint, d char(30))
  diff: |+
    ALTER TABLE "public"."t1"
        ADD COLUMN "d" character(30);

    ALTER TABLE "public"."t1"
        ALTER COLUMN "a" SET DATA TYPE character varying(20);

    ALTER TABLE "public"."t1"
        ALTER COLUMN "b" SET DATA TYPE serial;

    ALTER TABLE "public"."t1"
        ALTER COLUMN "c" SET DATA TYPE bigint;

- oldSchema: create table public.t1(a int, b int NOT NULL)
  newSchema: create table public.t1(a int NOT NULL, b int)
  diff: |+
    ALTER TABLE "public"."t1"
        ALTER COLUMN "a" SET NOT NULL;

    ALTER TABLE "public"."t1"
        ALTER COLUMN "b" DROP NOT NULL;

- oldSchema: create table public.t1(a int, b int DEFAULT 1+2, c int DEFAULT 1)
  newSchema: create table public.t1(a int DEFAULT 1, b int, c int DEFAULT 1+2+3+4)
  diff: |+
    ALTER TABLE "public"."t1"
        ALTER COLUMN "b" DROP DEFAULT;

    ALTER TABLE "public"."t1"
        ALTER COLUMN "a" SET DEFAULT 1;

    ALTER TABLE "public"."t1"
        ALTER COLUMN "c" SET DEFAULT ((1 + 2) + 3) + 4;

- oldSchema: |
    create schema s1;
    create table s1.t1(a int);
    create table s1.t2(a int, b int);
    create schema s2;
    create table s2.t3(a int);
    create table s2.t4(a int);
  newSchema: |
    create schema s1;
    create table s1.t2(a int);
    create table s1.t3(a int, b int);
    create schema s2;
    create table s2.t2(a int);
    create table s2.t3(a int);
  diff: |+
    ALTER TABLE "s1"."t2"
        DROP COLUMN "b";

    DROP TABLE "s1"."t1", "s2"."t4";

    CREATE TABLE "s1"."t3" (
        "a" integer,
        "b" integer
    );

    CREATE TABLE "s2"."t2" (
        "a" integer
    );

- oldSchema: |
    create table public.t1(
      a int,
      b int,
      constraint check_a check(a > b),
      constraint check_b check(b > 1)
    );
  newSchema: |
    create table public.t1(
      a int,
      b int,
      constraint check_b check(b > a),
      constraint check_c check(a > 1)
    )
  diff: |+
    ALTER TABLE "public"."t1"
        DROP CONSTRAINT "check_b",
        DROP CONSTRAINT "check_a";

    ALTER TABLE "public"."t1"
        ADD CONSTRAINT "check_b" CHECK (b > a),
        ADD CONSTRAINT "check_c" CHECK (a > 1);

- oldSchema: |
    create table public.t1(
      a int,
      b int,
      constraint check_a check(a > 1),
      constraint check_b check(b > 1)
    );
  newSchema: |
    create table public.t1(
      a int,
      b int,
      constraint check_b check(b > 1),
      constraint check_a check(a > 1)
    )
  diff: ""
- oldSchema: |
    CREATE INDEX idx1 ON public.t1 USING btree (a, b, (c+1));
    CREATE INDEX idx2 ON public.t1 USING hash (a);
  newSchema: |
    CREATE INDEX idx2 ON public.t1 USING btree (a);
    CREATE INDEX idx3 ON public.t1 USING btree (a, b);
  diff: |+
    DROP INDEX "public"."idx2";

    DROP INDEX "public"."idx1";

    CREATE INDEX idx2 ON public.t1 USING btree (a);

    CREATE INDEX idx3 ON public.t1 USING btree (a, b);

- oldSchema: |
    CREATE TABLE public.t (a int, b varchar(20), c boolean, d bit(2), e jsonb);
  newSchema: |
    CREATE TABLE public.t (a integer, b varchar(20), c boolean, d bit(2), e jsonb);
  diff: ""
- oldSchema: |
    CREATE TABLE public.t (a int8, b varchar(220), c date, d varbit(2), e json, f bit(2));
  newSchema: |
    CREATE TABLE public.t (a integer, b varchar(20), c boolean, d bit(2), e jsonb, f bit(4));
  diff: |+
    ALTER TABLE "public"."t"
        ALTER COLUMN "a" SET DATA TYPE integer;

    ALTER TABLE "public"."t"
        ALTER COLUMN "b" SET DATA TYPE character varying(20);

    ALTER TABLE "public"."t"
        ALTER COLUMN "c" SET DATA TYPE boolean;

    ALTER TABLE "public"."t"
        ALTER COLUMN "d" SET DATA TYPE pg_catalog.bit(2);

    ALTER TABLE "public"."t"
        ALTER COLUMN "e" SET DATA TYPE jsonb;

    ALTER TABLE "public"."t"
        ALTER COLUMN "f" SET DATA TYPE pg_catalog.bit(4);

- oldSchema: |
    create schema schema1;
    create table schema1.t1(a int, b int, c int);
    create index idx_t1_a on schema1.t1(a);
    create sequence schema1.sequence1
      NO MINVALUE
      NO MAXVALUE
      START WITH 1;
    alter sequence schema1.sequence1 owned by schema1.t1.a;
    alter table schema1.t1 alter column a set default nextval('schema1.sequence1'::regclass);
  newSchema: ""
  diff: |+
    DROP INDEX "schema1"."idx_t1_a";

    ALTER SEQUENCE "schema1"."sequence1"
        OWNED BY NONE;

    DROP TABLE "schema1"."t1";

    DROP SEQUENCE "schema1"."sequence1";

    DROP SCHEMA "schema1";

- oldSchema: |
    CREATE SCHEMA s1;
    CREATE EXTENSION IF NOT EXISTS pg_trgm WITH SCHEMA public;
    CREATE EXTENSION IF NOT EXISTS e2 WITH SCHEMA s1;
    CREATE EXTENSION IF NOT EXISTS e4 WITH SCHEMA public;
  newSchema: |
    CREATE SCHEMA s2;
    CREATE EXTENSION IF NOT EXISTS e2 WITH SCHEMA s2;
    CREATE EXTENSION IF NOT EXISTS e3 WITH SCHEMA public;
    CREATE EXTENSION IF NOT EXISTS e4 WITH SCHEMA public;
  diff: |+
    DROP EXTENSION "pg_trgm", "e2";

    DROP SCHEMA "s1";

    CREATE SCHEMA "s2";

    CREATE EXTENSION IF NOT EXISTS e2 WITH SCHEMA s2;

    CREATE EXTENSION IF NOT EXISTS e3 WITH SCHEMA public;

- oldSchema: |
    CREATE EXTENSION IF NOT EXISTS pg_trgm WITH SCHEMA public;
    CREATE TABLE public.test_trgm (t text, t2 text);
    CREATE INDEX trgm_idx ON public.test_trgm USING gin (t public.gin_trgm_ops);
    CREATE INDEX trgm_idx2 ON public.test_trgm USING gin (t public.gin_trgm_ops);
    CREATE INDEX trgm_idx3 ON public.test_trgm USING gin (t public.gin_trgm_ops);
  newSchema: |
    CREATE EXTENSION IF NOT EXISTS pg_trgm WITH SCHEMA public;
    CREATE TABLE public.test_trgm (t text, t2 text);
    CREATE INDEX trgm_idx ON public.test_trgm USING gin (t public.gin_trgm_ops);
    CREATE INDEX trgm_idx2 ON public.test_trgm USING gin (t2 public.gin_trgm_ops);
  diff: |+
    DROP INDEX "public"."trgm_idx2";

    DROP INDEX "public"."trgm_idx3";

    CREATE INDEX trgm_idx2 ON public.test_trgm USING gin (t2 public.gin_trgm_ops);

- oldSchema: |
    CREATE FUNCTION public.trigger_update_updated_ts() RETURNS trigger
        LANGUAGE plpgsql
        AS $$
    BEGIN
      NEW.updated_ts = extract(epoch from now());
      RETURN NEW;
    END;
    $$;
    CREATE FUNCTION public.f1() RETURNS trigger
        LANGUAGE plpgsql
        AS $$
    BEGIN
      NEW.updated_ts = extract(epoch from now());
      RETURN NEW;
    END;
    $$;
    CREATE FUNCTION public.f1(int) RETURNS trigger
        LANGUAGE plpgsql
        AS $$
    BEGIN
      NEW.updated_ts = extract(epoch from now());
      RETURN NEW;
    END;
    $$;
  newSchema: |
    CREATE FUNCTION public.trigger_update_updated_ts() RETURNS trigger
        LANGUAGE plpgsql
        AS $$
    BEGIN
      NEW.updated_ts = extract(epoch from now());
      RETURN NEW;
    END;
    $$;
    CREATE FUNCTION public.f1(int, int, int) RETURNS trigger
        LANGUAGE plpgsql
        AS $$
    BEGIN
      NEW.updated_ts = extract(epoch from now());
      RETURN NEW;
    END;
    $$;
    CREATE FUNCTION public.f1(int) RETURNS trigger
        LANGUAGE plpgsql
        AS $$
    BEGIN
      NEW.ts = extract(epoch from now());
      RETURN NEW;
    END;
    $$;
  diff: |+
    DROP FUNCTION "public"."f1"(integer);

    DROP FUNCTION "public"."f1"();

    CREATE FUNCTION public.f1(int, int, int) RETURNS trigger
        LANGUAGE plpgsql
        AS $$
    BEGIN
      NEW.updated_ts = extract(epoch from now());
      RETURN NEW;
    END;
    $$;

    CREATE FUNCTION public.f1(int) RETURNS trigger
        LANGUAGE plpgsql
        AS $$
    BEGIN
      NEW.ts = extract(epoch from now());
      RETURN NEW;
    END;
    $$;

- oldSchema: |
    CREATE TABLE public.t (a bigint);
    CREATE FUNCTION public.f1(int, int, int) RETURNS trigger
        LANGUAGE plpgsql
        AS $$
    BEGIN
      NEW.a = extract(epoch from now());
      RETURN NEW;
    END;
    $$;
    CREATE FUNCTION public.f2(int, int, int) RETURNS trigger
        LANGUAGE plpgsql
        AS $$
    BEGIN
      NEW.a = extract(epoch from now());
      RETURN NEW;
    END;
    $$;
    CREATE TRIGGER update1 BEFORE UPDATE ON public.t FOR EACH ROW EXECUTE FUNCTION public.f1();
    CREATE TRIGGER update2 BEFORE UPDATE ON public.t FOR EACH ROW EXECUTE FUNCTION public.f1();
    CREATE TRIGGER update3 BEFORE UPDATE ON public.t FOR EACH ROW EXECUTE FUNCTION public.f1();
  newSchema: |
    CREATE TABLE public.t (a bigint);
    CREATE FUNCTION public.f1(int, int, int) RETURNS trigger
        LANGUAGE plpgsql
        AS $$
    BEGIN
      NEW.a = extract(epoch from now());
      RETURN NEW;
    END;
    $$;
    CREATE FUNCTION public.f2(int, int, int) RETURNS trigger
        LANGUAGE plpgsql
        AS $$
    BEGIN
      NEW.a = extract(epoch from now());
      RETURN NEW;
    END;
    $$;
    CREATE TRIGGER update1 BEFORE UPDATE ON public.t FOR EACH ROW EXECUTE FUNCTION public.f1();
    CREATE TRIGGER update3 BEFORE UPDATE ON public.t FOR EACH ROW EXECUTE FUNCTION public.f2();
    CREATE TRIGGER update4 BEFORE UPDATE ON public.t FOR EACH ROW EXECUTE FUNCTION public.f1();
  diff: |+
    DROP TRIGGER "update3" ON "public"."t";

    DROP TRIGGER "update2" ON "public"."t";

    CREATE TRIGGER update3 BEFORE UPDATE ON public.t FOR EACH ROW EXECUTE FUNCTION public.f2();

    CREATE TRIGGER update4 BEFORE UPDATE ON public.t FOR EACH ROW EXECUTE FUNCTION public.f1();

- oldSchema: |
    CREATE TYPE public.tp1 AS ENUM ('a', 'b', 'c');
    CREATE TYPE public.tp2 AS ENUM ('a', 'b', 'c');
    CREATE TYPE public.tp3 AS ENUM ('a', 'b', 'e');
    CREATE TABLE public.t1(a public.tp1, b public.tp2, c public.tp3)
  newSchema: |
    CREATE TYPE public.tp1 AS ENUM ('a', 'b', 'c');
    CREATE TYPE public.tp3 AS ENUM ('a', 'b', 'c', 'd');
    CREATE TYPE public.tp4 AS ENUM ('a', 'b', 'c');
    CREATE TABLE public.t1(a public.tp1, b public.tp3, c public.tp4)
  diff: |+
    DROP TYPE "public"."tp3";

    DROP TYPE "public"."tp2";

    CREATE TYPE public.tp3 AS ENUM ('a', 'b', 'c', 'd');

    CREATE TYPE public.tp4 AS ENUM ('a', 'b', 'c');

    ALTER TABLE "public"."t1"
        ALTER COLUMN "b" SET DATA TYPE public.tp3;

    ALTER TABLE "public"."t1"
        ALTER COLUMN "c" SET DATA TYPE public.tp4;

- oldSchema: |
    create type public.enum1 as enum ('a', 'b', 'c');
    create table public.t1 (a enum1);
  newSchema: |
    create type public.enum1 as enum ('1', '2', 'a', '3', '4', 'b', '5', 'c', '6', '7');
    create table public.t1 (a enum1);
  diff: |+
    ALTER TYPE "public"."enum1" ADD VALUE '2' BEFORE 'a';

    ALTER TYPE "public"."enum1" ADD VALUE '1' BEFORE '2';

    ALTER TYPE "public"."enum1" ADD VALUE '3' AFTER 'a';

    ALTER TYPE "public"."enum1" ADD VALUE '4' AFTER '3';

    ALTER TYPE "public"."enum1" ADD VALUE '5' AFTER 'b';

    ALTER TYPE "public"."enum1" ADD VALUE '6' AFTER 'c';

    ALTER TYPE "public"."enum1" ADD VALUE '7' AFTER '6';

- oldSchema: |
    create type public.enum1 as enum ();
    create table public.t1 (a enum1);
  newSchema: |
    create type public.enum1 as enum ('1', '2', 'a', '3', '4', 'b', '5', 'c', '6', '7');
    create table public.t1 (a enum1);
  diff: |+
    ALTER TYPE "public"."enum1" ADD VALUE '1';

    ALTER TYPE "public"."enum1" ADD VALUE '2';

    ALTER TYPE "public"."enum1" ADD VALUE 'a';

    ALTER TYPE "public"."enum1" ADD VALUE '3';

    ALTER TYPE "public"."enum1" ADD VALUE '4';

    ALTER TYPE "public"."enum1" ADD VALUE 'b';

    ALTER TYPE "public"."enum1" ADD VALUE '5';

    ALTER TYPE "public"."enum1" ADD VALUE 'c';

    ALTER TYPE "public"."enum1" ADD VALUE '6';

    ALTER TYPE "public"."enum1" ADD VALUE '7';

- oldSchema: |
    create extension abc with schema pg_catalog;
    create table "public"."t1" ("a" int);
  newSchema: create table "public"."t2" ("a" int);
  diff: |+
    DROP TABLE "public"."t1";

    CREATE TABLE "public"."t2" (
        "a" integer
    );

