- stmt: SELECT * FROM CUSTOMER;
  count: 10
  want: |-
    SELECT * FROM CUSTOMER LIMIT 10
    ;
# intersect
- stmt: |-
    SELECT C_NAME FROM customer WHERE C_CUSTKEY < 5350008
    INTERSECT
    SELECT C_NAME FROM customer WHERE C_CUSTKEY >= 535006 AND C_CUSTKEY <= 5350013;
  count: 10
  want: |-
    SELECT C_NAME FROM customer WHERE C_CUSTKEY < 5350008
    INTERSECT
    SELECT C_NAME FROM customer WHERE C_CUSTKEY >= 535006 AND C_CUSTKEY <= 5350013 LIMIT 10
    ;
# inner join
- stmt: |+
    SELECT
      employee_table.employee_id, employee_table.last_name, employee_table.first_name,
      department_table.department_id, department_table.department_name
    FROM employee_table INNER JOIN department_table
    ON employee_table.department_id = department_table.department_id
    ORDER BY department_id, last_name, first_name;
  count: 10
  want: |-
    SELECT
      employee_table.employee_id, employee_table.last_name, employee_table.first_name,
      department_table.department_id, department_table.department_name
    FROM employee_table INNER JOIN department_table
    ON employee_table.department_id = department_table.department_id
    ORDER BY department_id, last_name, first_name LIMIT 10
    ;
- stmt: |+
    SELECT department_name, last_name, first_name
    FROM employee_table INNER JOIN department_table
        ON employee_table.department_ID = department_table.department_ID
    ORDER BY department_name, last_name, first_name;
  count: 1
  want: |-
    SELECT department_name, last_name, first_name
    FROM employee_table INNER JOIN department_table
        ON employee_table.department_ID = department_table.department_ID
    ORDER BY department_name, last_name, first_name LIMIT 1
    ;
# where
- stmt: |+
    SELECT last_name FROM employee_table WHERE employee_ID = 101;
  count: 10
  want: |-
    SELECT last_name FROM employee_table WHERE employee_ID = 101 LIMIT 10
    ;
# with non-recursive
- stmt: |+
    with
      albums_1976 as (select * from music_albums where album_year = 1976)
    select album_name from albums_1976 order by album_name;
  count: 1
  want: |-
    with
      albums_1976 as (select * from music_albums where album_year = 1976)
    select album_name from albums_1976 order by album_name LIMIT 1
    ;
- stmt: |+
    with
      album_info_1976 as (select m.album_ID, m.album_name, b.band_name
          from music_albums as m inner join music_bands as b
          where m.band_id = b.band_id and album_year = 1976),
      Journey_album_info_1976 as (select *
          from album_info_1976 
          where band_name = 'Journey')
    select album_name, band_name 
      from Journey_album_info_1976;
  count: 1
  want: |-
    with
      album_info_1976 as (select m.album_ID, m.album_name, b.band_name
          from music_albums as m inner join music_bands as b
          where m.band_id = b.band_id and album_year = 1976),
      Journey_album_info_1976 as (select *
          from album_info_1976 
          where band_name = 'Journey')
    select album_name, band_name 
      from Journey_album_info_1976 LIMIT 1
    ;
# with recursive
- stmt: |+
    WITH RECURSIVE current_f (current_val, previous_val) AS
      (
      SELECT 0, 1
      UNION ALL 
      SELECT current_val + previous_val, current_val FROM current_f
        WHERE current_val + previous_val < 100
      )
    SELECT current_val FROM current_f ORDER BY current_val;
  count: 1
  want: |-
    WITH RECURSIVE current_f (current_val, previous_val) AS
      (
      SELECT 0, 1
      UNION ALL 
      SELECT current_val + previous_val, current_val FROM current_f
        WHERE current_val + previous_val < 100
      )
    SELECT current_val FROM current_f ORDER BY current_val LIMIT 1
    ;
# top
- stmt: |+
    select TOP 4 c1 from testtable;
  count: 1
  want: |-
    select TOP 4 c1 from testtable
    ;
# group by
- stmt: |+
    select sum(salary), ANY_VALUE(employment_state) as state
    from employees
    group by state;
  count: 1
  want: |-
    select sum(salary), ANY_VALUE(employment_state) as state
    from employees
    group by state LIMIT 1
    ;

# antlr parser does not support ILIKE, EXCLUDE, RENAME
