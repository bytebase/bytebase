// Code generated by protoc-gen-equal-go. DO NOT EDIT.
// source: v1/project_service.proto

package v1

import (
	proto "google.golang.org/protobuf/proto"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
)

func (x *GetProjectRequest) Equal(y *GetProjectRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	return true
}

func (x *ListProjectsRequest) Equal(y *ListProjectsRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.PageSize != y.PageSize {
		return false
	}
	if x.PageToken != y.PageToken {
		return false
	}
	if x.ShowDeleted != y.ShowDeleted {
		return false
	}
	if x.Filter != y.Filter {
		return false
	}
	return true
}

func (x *ListProjectsResponse) Equal(y *ListProjectsResponse) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if len(x.Projects) != len(y.Projects) {
		return false
	}
	for i := 0; i < len(x.Projects); i++ {
		if !x.Projects[i].Equal(y.Projects[i]) {
			return false
		}
	}
	if x.NextPageToken != y.NextPageToken {
		return false
	}
	return true
}

func (x *SearchProjectsRequest) Equal(y *SearchProjectsRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.ShowDeleted != y.ShowDeleted {
		return false
	}
	if x.Filter != y.Filter {
		return false
	}
	if x.PageSize != y.PageSize {
		return false
	}
	if x.PageToken != y.PageToken {
		return false
	}
	return true
}

func (x *SearchProjectsResponse) Equal(y *SearchProjectsResponse) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if len(x.Projects) != len(y.Projects) {
		return false
	}
	for i := 0; i < len(x.Projects); i++ {
		if !x.Projects[i].Equal(y.Projects[i]) {
			return false
		}
	}
	if x.NextPageToken != y.NextPageToken {
		return false
	}
	return true
}

func (x *CreateProjectRequest) Equal(y *CreateProjectRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if !x.Project.Equal(y.Project) {
		return false
	}
	if x.ProjectId != y.ProjectId {
		return false
	}
	return true
}

func (x *UpdateProjectRequest) Equal(y *UpdateProjectRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if !x.Project.Equal(y.Project) {
		return false
	}
	if equal, ok := interface{}(x.UpdateMask).(interface {
		Equal(*fieldmaskpb.FieldMask) bool
	}); !ok || !equal.Equal(y.UpdateMask) {
		return false
	} else if !proto.Equal(x.UpdateMask, y.UpdateMask) {
		return false
	}
	if x.AllowMissing != y.AllowMissing {
		return false
	}
	return true
}

func (x *DeleteProjectRequest) Equal(y *DeleteProjectRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	if x.Force != y.Force {
		return false
	}
	if x.Purge != y.Purge {
		return false
	}
	return true
}

func (x *UndeleteProjectRequest) Equal(y *UndeleteProjectRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	return true
}

func (x *BatchDeleteProjectsRequest) Equal(y *BatchDeleteProjectsRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if len(x.Names) != len(y.Names) {
		return false
	}
	for i := 0; i < len(x.Names); i++ {
		if x.Names[i] != y.Names[i] {
			return false
		}
	}
	if x.Force != y.Force {
		return false
	}
	return true
}

func (x *BatchGetIamPolicyRequest) Equal(y *BatchGetIamPolicyRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Scope != y.Scope {
		return false
	}
	if len(x.Names) != len(y.Names) {
		return false
	}
	for i := 0; i < len(x.Names); i++ {
		if x.Names[i] != y.Names[i] {
			return false
		}
	}
	return true
}

func (x *BatchGetIamPolicyResponse_PolicyResult) Equal(y *BatchGetIamPolicyResponse_PolicyResult) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Project != y.Project {
		return false
	}
	if !x.Policy.Equal(y.Policy) {
		return false
	}
	return true
}

func (x *BatchGetIamPolicyResponse) Equal(y *BatchGetIamPolicyResponse) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if len(x.PolicyResults) != len(y.PolicyResults) {
		return false
	}
	for i := 0; i < len(x.PolicyResults); i++ {
		if !x.PolicyResults[i].Equal(y.PolicyResults[i]) {
			return false
		}
	}
	return true
}

func (x *Label) Equal(y *Label) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Value != y.Value {
		return false
	}
	if x.Color != y.Color {
		return false
	}
	if x.Group != y.Group {
		return false
	}
	return true
}

func (x *Project_ExecutionRetryPolicy) Equal(y *Project_ExecutionRetryPolicy) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.MaximumRetries != y.MaximumRetries {
		return false
	}
	return true
}

func (x *Project) Equal(y *Project) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	if x.State != y.State {
		return false
	}
	if x.Title != y.Title {
		return false
	}
	if len(x.Webhooks) != len(y.Webhooks) {
		return false
	}
	for i := 0; i < len(x.Webhooks); i++ {
		if !x.Webhooks[i].Equal(y.Webhooks[i]) {
			return false
		}
	}
	if x.DataClassificationConfigId != y.DataClassificationConfigId {
		return false
	}
	if len(x.IssueLabels) != len(y.IssueLabels) {
		return false
	}
	for i := 0; i < len(x.IssueLabels); i++ {
		if !x.IssueLabels[i].Equal(y.IssueLabels[i]) {
			return false
		}
	}
	if x.ForceIssueLabels != y.ForceIssueLabels {
		return false
	}
	if x.AllowModifyStatement != y.AllowModifyStatement {
		return false
	}
	if x.AutoResolveIssue != y.AutoResolveIssue {
		return false
	}
	if x.EnforceIssueTitle != y.EnforceIssueTitle {
		return false
	}
	if x.AutoEnableBackup != y.AutoEnableBackup {
		return false
	}
	if x.SkipBackupErrors != y.SkipBackupErrors {
		return false
	}
	if x.PostgresDatabaseTenantMode != y.PostgresDatabaseTenantMode {
		return false
	}
	if x.AllowSelfApproval != y.AllowSelfApproval {
		return false
	}
	if !x.ExecutionRetryPolicy.Equal(y.ExecutionRetryPolicy) {
		return false
	}
	if x.CiSamplingSize != y.CiSamplingSize {
		return false
	}
	if x.ParallelTasksPerRollout != y.ParallelTasksPerRollout {
		return false
	}
	if len(x.Labels) != len(y.Labels) {
		return false
	}
	for k := range x.Labels {
		_, ok := y.Labels[k]
		if !ok {
			return false
		}
		if x.Labels[k] != y.Labels[k] {
			return false
		}
	}
	return true
}

func (x *AddWebhookRequest) Equal(y *AddWebhookRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Project != y.Project {
		return false
	}
	if !x.Webhook.Equal(y.Webhook) {
		return false
	}
	return true
}

func (x *UpdateWebhookRequest) Equal(y *UpdateWebhookRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if !x.Webhook.Equal(y.Webhook) {
		return false
	}
	if equal, ok := interface{}(x.UpdateMask).(interface {
		Equal(*fieldmaskpb.FieldMask) bool
	}); !ok || !equal.Equal(y.UpdateMask) {
		return false
	} else if !proto.Equal(x.UpdateMask, y.UpdateMask) {
		return false
	}
	if x.AllowMissing != y.AllowMissing {
		return false
	}
	return true
}

func (x *RemoveWebhookRequest) Equal(y *RemoveWebhookRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if !x.Webhook.Equal(y.Webhook) {
		return false
	}
	return true
}

func (x *TestWebhookRequest) Equal(y *TestWebhookRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Project != y.Project {
		return false
	}
	if !x.Webhook.Equal(y.Webhook) {
		return false
	}
	return true
}

func (x *TestWebhookResponse) Equal(y *TestWebhookResponse) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Error != y.Error {
		return false
	}
	return true
}

func (x *Webhook) Equal(y *Webhook) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	if x.Type != y.Type {
		return false
	}
	if x.Title != y.Title {
		return false
	}
	if x.Url != y.Url {
		return false
	}
	if x.DirectMessage != y.DirectMessage {
		return false
	}
	if len(x.NotificationTypes) != len(y.NotificationTypes) {
		return false
	}
	for i := 0; i < len(x.NotificationTypes); i++ {
		if x.NotificationTypes[i] != y.NotificationTypes[i] {
			return false
		}
	}
	return true
}

func (x *Activity) Equal(y *Activity) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	return true
}
