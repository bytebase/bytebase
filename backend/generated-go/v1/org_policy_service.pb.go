// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        (unknown)
// source: v1/org_policy_service.proto

package v1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	expr "google.golang.org/genproto/googleapis/type/expr"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The type of organizational policy.
type PolicyType int32

const (
	// Unspecified policy type.
	PolicyType_POLICY_TYPE_UNSPECIFIED PolicyType = 0
	// Rollout deployment policy.
	PolicyType_ROLLOUT_POLICY PolicyType = 11
	// Data masking rule policy.
	PolicyType_MASKING_RULE PolicyType = 9
	// Data masking exception policy.
	PolicyType_MASKING_EXCEPTION PolicyType = 10
	// Resource tag policy.
	PolicyType_TAG PolicyType = 13
	// Data source query restrictions policy.
	PolicyType_DATA_SOURCE_QUERY PolicyType = 14
	// Query data access policy.
	PolicyType_DATA_QUERY PolicyType = 16
)

// Enum value maps for PolicyType.
var (
	PolicyType_name = map[int32]string{
		0:  "POLICY_TYPE_UNSPECIFIED",
		11: "ROLLOUT_POLICY",
		9:  "MASKING_RULE",
		10: "MASKING_EXCEPTION",
		13: "TAG",
		14: "DATA_SOURCE_QUERY",
		16: "DATA_QUERY",
	}
	PolicyType_value = map[string]int32{
		"POLICY_TYPE_UNSPECIFIED": 0,
		"ROLLOUT_POLICY":          11,
		"MASKING_RULE":            9,
		"MASKING_EXCEPTION":       10,
		"TAG":                     13,
		"DATA_SOURCE_QUERY":       14,
		"DATA_QUERY":              16,
	}
)

func (x PolicyType) Enum() *PolicyType {
	p := new(PolicyType)
	*p = x
	return p
}

func (x PolicyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PolicyType) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_org_policy_service_proto_enumTypes[0].Descriptor()
}

func (PolicyType) Type() protoreflect.EnumType {
	return &file_v1_org_policy_service_proto_enumTypes[0]
}

func (x PolicyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PolicyType.Descriptor instead.
func (PolicyType) EnumDescriptor() ([]byte, []int) {
	return file_v1_org_policy_service_proto_rawDescGZIP(), []int{0}
}

// The resource type that a policy can be attached to.
type PolicyResourceType int32

const (
	// Unspecified resource type.
	PolicyResourceType_RESOURCE_TYPE_UNSPECIFIED PolicyResourceType = 0
	// Workspace-level policy.
	PolicyResourceType_WORKSPACE PolicyResourceType = 1
	// Environment-level policy.
	PolicyResourceType_ENVIRONMENT PolicyResourceType = 2
	// Project-level policy.
	PolicyResourceType_PROJECT PolicyResourceType = 3
)

// Enum value maps for PolicyResourceType.
var (
	PolicyResourceType_name = map[int32]string{
		0: "RESOURCE_TYPE_UNSPECIFIED",
		1: "WORKSPACE",
		2: "ENVIRONMENT",
		3: "PROJECT",
	}
	PolicyResourceType_value = map[string]int32{
		"RESOURCE_TYPE_UNSPECIFIED": 0,
		"WORKSPACE":                 1,
		"ENVIRONMENT":               2,
		"PROJECT":                   3,
	}
)

func (x PolicyResourceType) Enum() *PolicyResourceType {
	p := new(PolicyResourceType)
	*p = x
	return p
}

func (x PolicyResourceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PolicyResourceType) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_org_policy_service_proto_enumTypes[1].Descriptor()
}

func (PolicyResourceType) Type() protoreflect.EnumType {
	return &file_v1_org_policy_service_proto_enumTypes[1]
}

func (x PolicyResourceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PolicyResourceType.Descriptor instead.
func (PolicyResourceType) EnumDescriptor() ([]byte, []int) {
	return file_v1_org_policy_service_proto_rawDescGZIP(), []int{1}
}

// The severity level for SQL review rules.
type SQLReviewRuleLevel int32

const (
	// Unspecified level.
	SQLReviewRuleLevel_LEVEL_UNSPECIFIED SQLReviewRuleLevel = 0
	// Rule violation is an error.
	SQLReviewRuleLevel_ERROR SQLReviewRuleLevel = 1
	// Rule violation is a warning.
	SQLReviewRuleLevel_WARNING SQLReviewRuleLevel = 2
)

// Enum value maps for SQLReviewRuleLevel.
var (
	SQLReviewRuleLevel_name = map[int32]string{
		0: "LEVEL_UNSPECIFIED",
		1: "ERROR",
		2: "WARNING",
	}
	SQLReviewRuleLevel_value = map[string]int32{
		"LEVEL_UNSPECIFIED": 0,
		"ERROR":             1,
		"WARNING":           2,
	}
)

func (x SQLReviewRuleLevel) Enum() *SQLReviewRuleLevel {
	p := new(SQLReviewRuleLevel)
	*p = x
	return p
}

func (x SQLReviewRuleLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SQLReviewRuleLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_org_policy_service_proto_enumTypes[2].Descriptor()
}

func (SQLReviewRuleLevel) Type() protoreflect.EnumType {
	return &file_v1_org_policy_service_proto_enumTypes[2]
}

func (x SQLReviewRuleLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SQLReviewRuleLevel.Descriptor instead.
func (SQLReviewRuleLevel) EnumDescriptor() ([]byte, []int) {
	return file_v1_org_policy_service_proto_rawDescGZIP(), []int{2}
}

type RolloutPolicy_Checkers_PlanCheckEnforcement int32

const (
	// Allow rollout regardless of plan check results (no enforcement).
	RolloutPolicy_Checkers_PLAN_CHECK_ENFORCEMENT_UNSPECIFIED RolloutPolicy_Checkers_PlanCheckEnforcement = 0
	// Block rollout only when plan check finds errors.
	RolloutPolicy_Checkers_ERROR_ONLY RolloutPolicy_Checkers_PlanCheckEnforcement = 1
	// Block rollout when plan check finds errors or warnings.
	RolloutPolicy_Checkers_STRICT RolloutPolicy_Checkers_PlanCheckEnforcement = 2
)

// Enum value maps for RolloutPolicy_Checkers_PlanCheckEnforcement.
var (
	RolloutPolicy_Checkers_PlanCheckEnforcement_name = map[int32]string{
		0: "PLAN_CHECK_ENFORCEMENT_UNSPECIFIED",
		1: "ERROR_ONLY",
		2: "STRICT",
	}
	RolloutPolicy_Checkers_PlanCheckEnforcement_value = map[string]int32{
		"PLAN_CHECK_ENFORCEMENT_UNSPECIFIED": 0,
		"ERROR_ONLY":                         1,
		"STRICT":                             2,
	}
)

func (x RolloutPolicy_Checkers_PlanCheckEnforcement) Enum() *RolloutPolicy_Checkers_PlanCheckEnforcement {
	p := new(RolloutPolicy_Checkers_PlanCheckEnforcement)
	*p = x
	return p
}

func (x RolloutPolicy_Checkers_PlanCheckEnforcement) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RolloutPolicy_Checkers_PlanCheckEnforcement) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_org_policy_service_proto_enumTypes[3].Descriptor()
}

func (RolloutPolicy_Checkers_PlanCheckEnforcement) Type() protoreflect.EnumType {
	return &file_v1_org_policy_service_proto_enumTypes[3]
}

func (x RolloutPolicy_Checkers_PlanCheckEnforcement) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RolloutPolicy_Checkers_PlanCheckEnforcement.Descriptor instead.
func (RolloutPolicy_Checkers_PlanCheckEnforcement) EnumDescriptor() ([]byte, []int) {
	return file_v1_org_policy_service_proto_rawDescGZIP(), []int{7, 0, 0}
}

// The action that the exception permits.
type MaskingExceptionPolicy_MaskingException_Action int32

const (
	// Unspecified action.
	MaskingExceptionPolicy_MaskingException_ACTION_UNSPECIFIED MaskingExceptionPolicy_MaskingException_Action = 0
	// Allow querying sensitive data.
	MaskingExceptionPolicy_MaskingException_QUERY MaskingExceptionPolicy_MaskingException_Action = 1
	// Allow exporting sensitive data.
	MaskingExceptionPolicy_MaskingException_EXPORT MaskingExceptionPolicy_MaskingException_Action = 2
)

// Enum value maps for MaskingExceptionPolicy_MaskingException_Action.
var (
	MaskingExceptionPolicy_MaskingException_Action_name = map[int32]string{
		0: "ACTION_UNSPECIFIED",
		1: "QUERY",
		2: "EXPORT",
	}
	MaskingExceptionPolicy_MaskingException_Action_value = map[string]int32{
		"ACTION_UNSPECIFIED": 0,
		"QUERY":              1,
		"EXPORT":             2,
	}
)

func (x MaskingExceptionPolicy_MaskingException_Action) Enum() *MaskingExceptionPolicy_MaskingException_Action {
	p := new(MaskingExceptionPolicy_MaskingException_Action)
	*p = x
	return p
}

func (x MaskingExceptionPolicy_MaskingException_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MaskingExceptionPolicy_MaskingException_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_org_policy_service_proto_enumTypes[4].Descriptor()
}

func (MaskingExceptionPolicy_MaskingException_Action) Type() protoreflect.EnumType {
	return &file_v1_org_policy_service_proto_enumTypes[4]
}

func (x MaskingExceptionPolicy_MaskingException_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MaskingExceptionPolicy_MaskingException_Action.Descriptor instead.
func (MaskingExceptionPolicy_MaskingException_Action) EnumDescriptor() ([]byte, []int) {
	return file_v1_org_policy_service_proto_rawDescGZIP(), []int{10, 0, 0}
}

// Restriction level for admin data source access.
type DataSourceQueryPolicy_Restriction int32

const (
	// Unspecified restriction.
	DataSourceQueryPolicy_RESTRICTION_UNSPECIFIED DataSourceQueryPolicy_Restriction = 0
	// Allow querying admin data sources when there is no read-only data source.
	DataSourceQueryPolicy_FALLBACK DataSourceQueryPolicy_Restriction = 1
	// Disallow querying admin data sources.
	DataSourceQueryPolicy_DISALLOW DataSourceQueryPolicy_Restriction = 2
)

// Enum value maps for DataSourceQueryPolicy_Restriction.
var (
	DataSourceQueryPolicy_Restriction_name = map[int32]string{
		0: "RESTRICTION_UNSPECIFIED",
		1: "FALLBACK",
		2: "DISALLOW",
	}
	DataSourceQueryPolicy_Restriction_value = map[string]int32{
		"RESTRICTION_UNSPECIFIED": 0,
		"FALLBACK":                1,
		"DISALLOW":                2,
	}
)

func (x DataSourceQueryPolicy_Restriction) Enum() *DataSourceQueryPolicy_Restriction {
	p := new(DataSourceQueryPolicy_Restriction)
	*p = x
	return p
}

func (x DataSourceQueryPolicy_Restriction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataSourceQueryPolicy_Restriction) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_org_policy_service_proto_enumTypes[5].Descriptor()
}

func (DataSourceQueryPolicy_Restriction) Type() protoreflect.EnumType {
	return &file_v1_org_policy_service_proto_enumTypes[5]
}

func (x DataSourceQueryPolicy_Restriction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataSourceQueryPolicy_Restriction.Descriptor instead.
func (DataSourceQueryPolicy_Restriction) EnumDescriptor() ([]byte, []int) {
	return file_v1_org_policy_service_proto_rawDescGZIP(), []int{13, 0}
}

type CreatePolicyRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The parent resource where this instance will be created.
	// Workspace resource name: "".
	// Environment resource name: environments/environment-id.
	// Instance resource name: instances/instance-id.
	// Database resource name: instances/instance-id/databases/database-name.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// The policy to create.
	Policy *Policy `protobuf:"bytes,2,opt,name=policy,proto3" json:"policy,omitempty"`
	// The type of policy to create.
	Type          PolicyType `protobuf:"varint,3,opt,name=type,proto3,enum=bytebase.v1.PolicyType" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreatePolicyRequest) Reset() {
	*x = CreatePolicyRequest{}
	mi := &file_v1_org_policy_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePolicyRequest) ProtoMessage() {}

func (x *CreatePolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_org_policy_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePolicyRequest.ProtoReflect.Descriptor instead.
func (*CreatePolicyRequest) Descriptor() ([]byte, []int) {
	return file_v1_org_policy_service_proto_rawDescGZIP(), []int{0}
}

func (x *CreatePolicyRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *CreatePolicyRequest) GetPolicy() *Policy {
	if x != nil {
		return x.Policy
	}
	return nil
}

func (x *CreatePolicyRequest) GetType() PolicyType {
	if x != nil {
		return x.Type
	}
	return PolicyType_POLICY_TYPE_UNSPECIFIED
}

type UpdatePolicyRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The policy to update.
	//
	// The policy's `name` field is used to identify the instance to update.
	// Format: {resource name}/policies/{policy type}
	// Workspace resource name: "".
	// Environment resource name: environments/environment-id.
	// Instance resource name: instances/instance-id.
	// Database resource name: instances/instance-id/databases/database-name.
	Policy *Policy `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
	// The list of fields to update.
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	// If set to true, and the policy is not found, a new policy will be created.
	// In this situation, `update_mask` is ignored.
	AllowMissing  bool `protobuf:"varint,3,opt,name=allow_missing,json=allowMissing,proto3" json:"allow_missing,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdatePolicyRequest) Reset() {
	*x = UpdatePolicyRequest{}
	mi := &file_v1_org_policy_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePolicyRequest) ProtoMessage() {}

func (x *UpdatePolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_org_policy_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePolicyRequest.ProtoReflect.Descriptor instead.
func (*UpdatePolicyRequest) Descriptor() ([]byte, []int) {
	return file_v1_org_policy_service_proto_rawDescGZIP(), []int{1}
}

func (x *UpdatePolicyRequest) GetPolicy() *Policy {
	if x != nil {
		return x.Policy
	}
	return nil
}

func (x *UpdatePolicyRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdatePolicyRequest) GetAllowMissing() bool {
	if x != nil {
		return x.AllowMissing
	}
	return false
}

type DeletePolicyRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The policy's `name` field is used to identify the instance to update.
	// Format: {resource name}/policies/{policy type}
	// Workspace resource name: "".
	// Environment resource name: environments/environment-id.
	// Instance resource name: instances/instance-id.
	// Database resource name: instances/instance-id/databases/database-name.
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeletePolicyRequest) Reset() {
	*x = DeletePolicyRequest{}
	mi := &file_v1_org_policy_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeletePolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePolicyRequest) ProtoMessage() {}

func (x *DeletePolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_org_policy_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePolicyRequest.ProtoReflect.Descriptor instead.
func (*DeletePolicyRequest) Descriptor() ([]byte, []int) {
	return file_v1_org_policy_service_proto_rawDescGZIP(), []int{2}
}

func (x *DeletePolicyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type GetPolicyRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the policy to retrieve.
	// Format: {resource type}/{resource id}/policies/{policy type}
	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPolicyRequest) Reset() {
	*x = GetPolicyRequest{}
	mi := &file_v1_org_policy_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPolicyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPolicyRequest) ProtoMessage() {}

func (x *GetPolicyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_org_policy_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPolicyRequest.ProtoReflect.Descriptor instead.
func (*GetPolicyRequest) Descriptor() ([]byte, []int) {
	return file_v1_org_policy_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetPolicyRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListPoliciesRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The parent, which owns this collection of policies.
	// Format: {resource type}/{resource id}
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Filter by specific policy type.
	PolicyType *PolicyType `protobuf:"varint,2,opt,name=policy_type,json=policyType,proto3,enum=bytebase.v1.PolicyType,oneof" json:"policy_type,omitempty"`
	// Show deleted policies if specified.
	ShowDeleted   bool `protobuf:"varint,3,opt,name=show_deleted,json=showDeleted,proto3" json:"show_deleted,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListPoliciesRequest) Reset() {
	*x = ListPoliciesRequest{}
	mi := &file_v1_org_policy_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPoliciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPoliciesRequest) ProtoMessage() {}

func (x *ListPoliciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_org_policy_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPoliciesRequest.ProtoReflect.Descriptor instead.
func (*ListPoliciesRequest) Descriptor() ([]byte, []int) {
	return file_v1_org_policy_service_proto_rawDescGZIP(), []int{4}
}

func (x *ListPoliciesRequest) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

func (x *ListPoliciesRequest) GetPolicyType() PolicyType {
	if x != nil && x.PolicyType != nil {
		return *x.PolicyType
	}
	return PolicyType_POLICY_TYPE_UNSPECIFIED
}

func (x *ListPoliciesRequest) GetShowDeleted() bool {
	if x != nil {
		return x.ShowDeleted
	}
	return false
}

type ListPoliciesResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The policies from the specified request.
	Policies      []*Policy `protobuf:"bytes,1,rep,name=policies,proto3" json:"policies,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListPoliciesResponse) Reset() {
	*x = ListPoliciesResponse{}
	mi := &file_v1_org_policy_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPoliciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPoliciesResponse) ProtoMessage() {}

func (x *ListPoliciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_org_policy_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPoliciesResponse.ProtoReflect.Descriptor instead.
func (*ListPoliciesResponse) Descriptor() ([]byte, []int) {
	return file_v1_org_policy_service_proto_rawDescGZIP(), []int{5}
}

func (x *ListPoliciesResponse) GetPolicies() []*Policy {
	if x != nil {
		return x.Policies
	}
	return nil
}

type Policy struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the policy.
	// Format: {resource name}/policies/{policy type}
	// Workspace resource name: "".
	// Environment resource name: environments/environment-id.
	// Instance resource name: instances/instance-id.
	// Database resource name: instances/instance-id/databases/database-name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Whether this policy inherits from its parent resource.
	InheritFromParent bool `protobuf:"varint,4,opt,name=inherit_from_parent,json=inheritFromParent,proto3" json:"inherit_from_parent,omitempty"`
	// The type of policy.
	Type PolicyType `protobuf:"varint,5,opt,name=type,proto3,enum=bytebase.v1.PolicyType" json:"type,omitempty"`
	// The policy configuration.
	//
	// Types that are valid to be assigned to Policy:
	//
	//	*Policy_RolloutPolicy
	//	*Policy_MaskingRulePolicy
	//	*Policy_MaskingExceptionPolicy
	//	*Policy_TagPolicy
	//	*Policy_DataSourceQueryPolicy
	//	*Policy_QueryDataPolicy
	Policy isPolicy_Policy `protobuf_oneof:"policy"`
	// Whether the policy is enforced.
	Enforce bool `protobuf:"varint,13,opt,name=enforce,proto3" json:"enforce,omitempty"`
	// The resource type for the policy.
	ResourceType  PolicyResourceType `protobuf:"varint,14,opt,name=resource_type,json=resourceType,proto3,enum=bytebase.v1.PolicyResourceType" json:"resource_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Policy) Reset() {
	*x = Policy{}
	mi := &file_v1_org_policy_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy) ProtoMessage() {}

func (x *Policy) ProtoReflect() protoreflect.Message {
	mi := &file_v1_org_policy_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy.ProtoReflect.Descriptor instead.
func (*Policy) Descriptor() ([]byte, []int) {
	return file_v1_org_policy_service_proto_rawDescGZIP(), []int{6}
}

func (x *Policy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Policy) GetInheritFromParent() bool {
	if x != nil {
		return x.InheritFromParent
	}
	return false
}

func (x *Policy) GetType() PolicyType {
	if x != nil {
		return x.Type
	}
	return PolicyType_POLICY_TYPE_UNSPECIFIED
}

func (x *Policy) GetPolicy() isPolicy_Policy {
	if x != nil {
		return x.Policy
	}
	return nil
}

func (x *Policy) GetRolloutPolicy() *RolloutPolicy {
	if x != nil {
		if x, ok := x.Policy.(*Policy_RolloutPolicy); ok {
			return x.RolloutPolicy
		}
	}
	return nil
}

func (x *Policy) GetMaskingRulePolicy() *MaskingRulePolicy {
	if x != nil {
		if x, ok := x.Policy.(*Policy_MaskingRulePolicy); ok {
			return x.MaskingRulePolicy
		}
	}
	return nil
}

func (x *Policy) GetMaskingExceptionPolicy() *MaskingExceptionPolicy {
	if x != nil {
		if x, ok := x.Policy.(*Policy_MaskingExceptionPolicy); ok {
			return x.MaskingExceptionPolicy
		}
	}
	return nil
}

func (x *Policy) GetTagPolicy() *TagPolicy {
	if x != nil {
		if x, ok := x.Policy.(*Policy_TagPolicy); ok {
			return x.TagPolicy
		}
	}
	return nil
}

func (x *Policy) GetDataSourceQueryPolicy() *DataSourceQueryPolicy {
	if x != nil {
		if x, ok := x.Policy.(*Policy_DataSourceQueryPolicy); ok {
			return x.DataSourceQueryPolicy
		}
	}
	return nil
}

func (x *Policy) GetQueryDataPolicy() *QueryDataPolicy {
	if x != nil {
		if x, ok := x.Policy.(*Policy_QueryDataPolicy); ok {
			return x.QueryDataPolicy
		}
	}
	return nil
}

func (x *Policy) GetEnforce() bool {
	if x != nil {
		return x.Enforce
	}
	return false
}

func (x *Policy) GetResourceType() PolicyResourceType {
	if x != nil {
		return x.ResourceType
	}
	return PolicyResourceType_RESOURCE_TYPE_UNSPECIFIED
}

type isPolicy_Policy interface {
	isPolicy_Policy()
}

type Policy_RolloutPolicy struct {
	RolloutPolicy *RolloutPolicy `protobuf:"bytes,19,opt,name=rollout_policy,json=rolloutPolicy,proto3,oneof"`
}

type Policy_MaskingRulePolicy struct {
	MaskingRulePolicy *MaskingRulePolicy `protobuf:"bytes,17,opt,name=masking_rule_policy,json=maskingRulePolicy,proto3,oneof"`
}

type Policy_MaskingExceptionPolicy struct {
	MaskingExceptionPolicy *MaskingExceptionPolicy `protobuf:"bytes,18,opt,name=masking_exception_policy,json=maskingExceptionPolicy,proto3,oneof"`
}

type Policy_TagPolicy struct {
	TagPolicy *TagPolicy `protobuf:"bytes,21,opt,name=tag_policy,json=tagPolicy,proto3,oneof"`
}

type Policy_DataSourceQueryPolicy struct {
	DataSourceQueryPolicy *DataSourceQueryPolicy `protobuf:"bytes,22,opt,name=data_source_query_policy,json=dataSourceQueryPolicy,proto3,oneof"`
}

type Policy_QueryDataPolicy struct {
	QueryDataPolicy *QueryDataPolicy `protobuf:"bytes,24,opt,name=query_data_policy,json=queryDataPolicy,proto3,oneof"`
}

func (*Policy_RolloutPolicy) isPolicy_Policy() {}

func (*Policy_MaskingRulePolicy) isPolicy_Policy() {}

func (*Policy_MaskingExceptionPolicy) isPolicy_Policy() {}

func (*Policy_TagPolicy) isPolicy_Policy() {}

func (*Policy_DataSourceQueryPolicy) isPolicy_Policy() {}

func (*Policy_QueryDataPolicy) isPolicy_Policy() {}

// Rollout policy configuration.
type RolloutPolicy struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether rollout is automatic without manual approval.
	Automatic bool `protobuf:"varint,1,opt,name=automatic,proto3" json:"automatic,omitempty"`
	// The roles that can approve rollout execution.
	Roles []string `protobuf:"bytes,2,rep,name=roles,proto3" json:"roles,omitempty"`
	// Checkers that must pass before rollout execution.
	// These checks are performed in UI workflows only.
	Checkers      *RolloutPolicy_Checkers `protobuf:"bytes,4,opt,name=checkers,proto3" json:"checkers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RolloutPolicy) Reset() {
	*x = RolloutPolicy{}
	mi := &file_v1_org_policy_service_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RolloutPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RolloutPolicy) ProtoMessage() {}

func (x *RolloutPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_v1_org_policy_service_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RolloutPolicy.ProtoReflect.Descriptor instead.
func (*RolloutPolicy) Descriptor() ([]byte, []int) {
	return file_v1_org_policy_service_proto_rawDescGZIP(), []int{7}
}

func (x *RolloutPolicy) GetAutomatic() bool {
	if x != nil {
		return x.Automatic
	}
	return false
}

func (x *RolloutPolicy) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *RolloutPolicy) GetCheckers() *RolloutPolicy_Checkers {
	if x != nil {
		return x.Checkers
	}
	return nil
}

// QueryDataPolicy is the policy configuration for querying data.
type QueryDataPolicy struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The query timeout duration.
	Timeout *durationpb.Duration `protobuf:"bytes,1,opt,name=timeout,proto3" json:"timeout,omitempty"`
	// Disable data export in the SQL editor.
	DisableExport bool `protobuf:"varint,2,opt,name=disable_export,json=disableExport,proto3" json:"disable_export,omitempty"`
	// The maximum result size limit in bytes.
	// The default value is 100MB, we will use the default value if the setting not exists, or the limit <= 0.
	MaximumResultSize int64 `protobuf:"varint,3,opt,name=maximum_result_size,json=maximumResultSize,proto3" json:"maximum_result_size,omitempty"`
	// The maximum number of rows to return.
	// The default value is -1, means no limit.
	MaximumResultRows int32 `protobuf:"varint,4,opt,name=maximum_result_rows,json=maximumResultRows,proto3" json:"maximum_result_rows,omitempty"`
	// Disable copying query results.
	DisableCopyData bool `protobuf:"varint,5,opt,name=disable_copy_data,json=disableCopyData,proto3" json:"disable_copy_data,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *QueryDataPolicy) Reset() {
	*x = QueryDataPolicy{}
	mi := &file_v1_org_policy_service_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QueryDataPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryDataPolicy) ProtoMessage() {}

func (x *QueryDataPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_v1_org_policy_service_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryDataPolicy.ProtoReflect.Descriptor instead.
func (*QueryDataPolicy) Descriptor() ([]byte, []int) {
	return file_v1_org_policy_service_proto_rawDescGZIP(), []int{8}
}

func (x *QueryDataPolicy) GetTimeout() *durationpb.Duration {
	if x != nil {
		return x.Timeout
	}
	return nil
}

func (x *QueryDataPolicy) GetDisableExport() bool {
	if x != nil {
		return x.DisableExport
	}
	return false
}

func (x *QueryDataPolicy) GetMaximumResultSize() int64 {
	if x != nil {
		return x.MaximumResultSize
	}
	return 0
}

func (x *QueryDataPolicy) GetMaximumResultRows() int32 {
	if x != nil {
		return x.MaximumResultRows
	}
	return 0
}

func (x *QueryDataPolicy) GetDisableCopyData() bool {
	if x != nil {
		return x.DisableCopyData
	}
	return false
}

// SQL review rule configuration. Check the SQL_REVIEW_RULES_DOCUMENTATION.md for details.
type SQLReviewRule struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The type of SQL review rule.
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// The severity level of the rule.
	Level SQLReviewRuleLevel `protobuf:"varint,2,opt,name=level,proto3,enum=bytebase.v1.SQLReviewRuleLevel" json:"level,omitempty"`
	// The payload is a JSON string that varies by rule type.
	Payload string `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	// The database engine this rule applies to.
	Engine Engine `protobuf:"varint,4,opt,name=engine,proto3,enum=bytebase.v1.Engine" json:"engine,omitempty"`
	// Additional comment for the rule.
	Comment       string `protobuf:"bytes,5,opt,name=comment,proto3" json:"comment,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SQLReviewRule) Reset() {
	*x = SQLReviewRule{}
	mi := &file_v1_org_policy_service_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SQLReviewRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SQLReviewRule) ProtoMessage() {}

func (x *SQLReviewRule) ProtoReflect() protoreflect.Message {
	mi := &file_v1_org_policy_service_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SQLReviewRule.ProtoReflect.Descriptor instead.
func (*SQLReviewRule) Descriptor() ([]byte, []int) {
	return file_v1_org_policy_service_proto_rawDescGZIP(), []int{9}
}

func (x *SQLReviewRule) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SQLReviewRule) GetLevel() SQLReviewRuleLevel {
	if x != nil {
		return x.Level
	}
	return SQLReviewRuleLevel_LEVEL_UNSPECIFIED
}

func (x *SQLReviewRule) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

func (x *SQLReviewRule) GetEngine() Engine {
	if x != nil {
		return x.Engine
	}
	return Engine_ENGINE_UNSPECIFIED
}

func (x *SQLReviewRule) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

// MaskingExceptionPolicy is the allowlist of users who can access sensitive data.
type MaskingExceptionPolicy struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The list of masking exceptions.
	MaskingExceptions []*MaskingExceptionPolicy_MaskingException `protobuf:"bytes,1,rep,name=masking_exceptions,json=maskingExceptions,proto3" json:"masking_exceptions,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *MaskingExceptionPolicy) Reset() {
	*x = MaskingExceptionPolicy{}
	mi := &file_v1_org_policy_service_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MaskingExceptionPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaskingExceptionPolicy) ProtoMessage() {}

func (x *MaskingExceptionPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_v1_org_policy_service_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaskingExceptionPolicy.ProtoReflect.Descriptor instead.
func (*MaskingExceptionPolicy) Descriptor() ([]byte, []int) {
	return file_v1_org_policy_service_proto_rawDescGZIP(), []int{10}
}

func (x *MaskingExceptionPolicy) GetMaskingExceptions() []*MaskingExceptionPolicy_MaskingException {
	if x != nil {
		return x.MaskingExceptions
	}
	return nil
}

// Policy for configuring data masking rules.
type MaskingRulePolicy struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The list of masking rules.
	Rules         []*MaskingRulePolicy_MaskingRule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MaskingRulePolicy) Reset() {
	*x = MaskingRulePolicy{}
	mi := &file_v1_org_policy_service_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MaskingRulePolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaskingRulePolicy) ProtoMessage() {}

func (x *MaskingRulePolicy) ProtoReflect() protoreflect.Message {
	mi := &file_v1_org_policy_service_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaskingRulePolicy.ProtoReflect.Descriptor instead.
func (*MaskingRulePolicy) Descriptor() ([]byte, []int) {
	return file_v1_org_policy_service_proto_rawDescGZIP(), []int{11}
}

func (x *MaskingRulePolicy) GetRules() []*MaskingRulePolicy_MaskingRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

// Policy for tagging resources with metadata.
type TagPolicy struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// tags is the key - value map for resources.
	// for example, the environment resource can have the sql review config tag, like "bb.tag.review_config": "reviewConfigs/{review config resource id}"
	Tags          map[string]string `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TagPolicy) Reset() {
	*x = TagPolicy{}
	mi := &file_v1_org_policy_service_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TagPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagPolicy) ProtoMessage() {}

func (x *TagPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_v1_org_policy_service_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagPolicy.ProtoReflect.Descriptor instead.
func (*TagPolicy) Descriptor() ([]byte, []int) {
	return file_v1_org_policy_service_proto_rawDescGZIP(), []int{12}
}

func (x *TagPolicy) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

// Policy for controlling which data sources can be queried in the SQL editor.
type DataSourceQueryPolicy struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Restriction for admin data source queries.
	AdminDataSourceRestriction DataSourceQueryPolicy_Restriction `protobuf:"varint,1,opt,name=admin_data_source_restriction,json=adminDataSourceRestriction,proto3,enum=bytebase.v1.DataSourceQueryPolicy_Restriction" json:"admin_data_source_restriction,omitempty"`
	// Disallow running DDL statements in the SQL editor.
	DisallowDdl bool `protobuf:"varint,2,opt,name=disallow_ddl,json=disallowDdl,proto3" json:"disallow_ddl,omitempty"`
	// Disallow running DML statements in the SQL editor.
	DisallowDml   bool `protobuf:"varint,3,opt,name=disallow_dml,json=disallowDml,proto3" json:"disallow_dml,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DataSourceQueryPolicy) Reset() {
	*x = DataSourceQueryPolicy{}
	mi := &file_v1_org_policy_service_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DataSourceQueryPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSourceQueryPolicy) ProtoMessage() {}

func (x *DataSourceQueryPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_v1_org_policy_service_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSourceQueryPolicy.ProtoReflect.Descriptor instead.
func (*DataSourceQueryPolicy) Descriptor() ([]byte, []int) {
	return file_v1_org_policy_service_proto_rawDescGZIP(), []int{13}
}

func (x *DataSourceQueryPolicy) GetAdminDataSourceRestriction() DataSourceQueryPolicy_Restriction {
	if x != nil {
		return x.AdminDataSourceRestriction
	}
	return DataSourceQueryPolicy_RESTRICTION_UNSPECIFIED
}

func (x *DataSourceQueryPolicy) GetDisallowDdl() bool {
	if x != nil {
		return x.DisallowDdl
	}
	return false
}

func (x *DataSourceQueryPolicy) GetDisallowDml() bool {
	if x != nil {
		return x.DisallowDml
	}
	return false
}

type RolloutPolicy_Checkers struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Whether issue approval is required before proceeding with rollout.
	RequiredIssueApproval bool `protobuf:"varint,1,opt,name=required_issue_approval,json=requiredIssueApproval,proto3" json:"required_issue_approval,omitempty"`
	// Status checks that must pass before rollout can be executed.
	RequiredStatusChecks *RolloutPolicy_Checkers_RequiredStatusChecks `protobuf:"bytes,2,opt,name=required_status_checks,json=requiredStatusChecks,proto3" json:"required_status_checks,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *RolloutPolicy_Checkers) Reset() {
	*x = RolloutPolicy_Checkers{}
	mi := &file_v1_org_policy_service_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RolloutPolicy_Checkers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RolloutPolicy_Checkers) ProtoMessage() {}

func (x *RolloutPolicy_Checkers) ProtoReflect() protoreflect.Message {
	mi := &file_v1_org_policy_service_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RolloutPolicy_Checkers.ProtoReflect.Descriptor instead.
func (*RolloutPolicy_Checkers) Descriptor() ([]byte, []int) {
	return file_v1_org_policy_service_proto_rawDescGZIP(), []int{7, 0}
}

func (x *RolloutPolicy_Checkers) GetRequiredIssueApproval() bool {
	if x != nil {
		return x.RequiredIssueApproval
	}
	return false
}

func (x *RolloutPolicy_Checkers) GetRequiredStatusChecks() *RolloutPolicy_Checkers_RequiredStatusChecks {
	if x != nil {
		return x.RequiredStatusChecks
	}
	return nil
}

type RolloutPolicy_Checkers_RequiredStatusChecks struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Enforcement level for plan check results during rollout validation.
	PlanCheckEnforcement RolloutPolicy_Checkers_PlanCheckEnforcement `protobuf:"varint,1,opt,name=plan_check_enforcement,json=planCheckEnforcement,proto3,enum=bytebase.v1.RolloutPolicy_Checkers_PlanCheckEnforcement" json:"plan_check_enforcement,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *RolloutPolicy_Checkers_RequiredStatusChecks) Reset() {
	*x = RolloutPolicy_Checkers_RequiredStatusChecks{}
	mi := &file_v1_org_policy_service_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RolloutPolicy_Checkers_RequiredStatusChecks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RolloutPolicy_Checkers_RequiredStatusChecks) ProtoMessage() {}

func (x *RolloutPolicy_Checkers_RequiredStatusChecks) ProtoReflect() protoreflect.Message {
	mi := &file_v1_org_policy_service_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RolloutPolicy_Checkers_RequiredStatusChecks.ProtoReflect.Descriptor instead.
func (*RolloutPolicy_Checkers_RequiredStatusChecks) Descriptor() ([]byte, []int) {
	return file_v1_org_policy_service_proto_rawDescGZIP(), []int{7, 0, 0}
}

func (x *RolloutPolicy_Checkers_RequiredStatusChecks) GetPlanCheckEnforcement() RolloutPolicy_Checkers_PlanCheckEnforcement {
	if x != nil {
		return x.PlanCheckEnforcement
	}
	return RolloutPolicy_Checkers_PLAN_CHECK_ENFORCEMENT_UNSPECIFIED
}

// An exception allowing specific users to access masked data.
type MaskingExceptionPolicy_MaskingException struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The action that the user can perform on sensitive data.
	Action MaskingExceptionPolicy_MaskingException_Action `protobuf:"varint,1,opt,name=action,proto3,enum=bytebase.v1.MaskingExceptionPolicy_MaskingException_Action" json:"action,omitempty"`
	// Member is the principal who bind to this exception policy instance.
	//
	// - `user:{email}`: An email address that represents a specific Bytebase account. For example, `alice@example.com`.
	// - `group:{email}`: An email address for group.
	Member string `protobuf:"bytes,3,opt,name=member,proto3" json:"member,omitempty"`
	// The condition that is associated with this exception policy instance.
	// The syntax and semantics of CEL are documented at https://github.com/google/cel-spec
	// If the condition is empty, means the user can access all databases without expiration.
	//
	// Support variables:
	// resource.instance_id: the instance resource id. Only support "==" operation.
	// resource.database_name: the database name. Only support "==" operation.
	// resource.schema_name: the schema name. Only support "==" operation.
	// resource.table_name: the table name. Only support "==" operation.
	// resource.column_name: the column name. Only support "==" operation.
	// request.time: the expiration. Only support "<" operation in `request.time < timestamp("{ISO datetime string format}")`
	// All variables should join with "&&" condition.
	//
	// For example:
	// resource.instance_id == "local" && resource.database_name == "employee" && request.time < timestamp("2025-04-30T11:10:39.000Z")
	// resource.instance_id == "local" && resource.database_name == "employee"
	Condition     *expr.Expr `protobuf:"bytes,4,opt,name=condition,proto3" json:"condition,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MaskingExceptionPolicy_MaskingException) Reset() {
	*x = MaskingExceptionPolicy_MaskingException{}
	mi := &file_v1_org_policy_service_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MaskingExceptionPolicy_MaskingException) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaskingExceptionPolicy_MaskingException) ProtoMessage() {}

func (x *MaskingExceptionPolicy_MaskingException) ProtoReflect() protoreflect.Message {
	mi := &file_v1_org_policy_service_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaskingExceptionPolicy_MaskingException.ProtoReflect.Descriptor instead.
func (*MaskingExceptionPolicy_MaskingException) Descriptor() ([]byte, []int) {
	return file_v1_org_policy_service_proto_rawDescGZIP(), []int{10, 0}
}

func (x *MaskingExceptionPolicy_MaskingException) GetAction() MaskingExceptionPolicy_MaskingException_Action {
	if x != nil {
		return x.Action
	}
	return MaskingExceptionPolicy_MaskingException_ACTION_UNSPECIFIED
}

func (x *MaskingExceptionPolicy_MaskingException) GetMember() string {
	if x != nil {
		return x.Member
	}
	return ""
}

func (x *MaskingExceptionPolicy_MaskingException) GetCondition() *expr.Expr {
	if x != nil {
		return x.Condition
	}
	return nil
}

// A rule that defines when and how to mask data.
type MaskingRulePolicy_MaskingRule struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A unique identifier for the rule in UUID format.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// The condition for the masking rule.
	// The syntax and semantics of CEL are documented at https://github.com/google/cel-spec
	//
	// Support variables:
	// resource.environment_id: the environment resource id.
	// resource.project_id: the project resource id.
	// resource.instance_id: the instance resource id.
	// resource.database_name: the database name.
	// resource.table_name: the table name.
	// resource.column_name: the column name.
	// resource.classification_level: the classification level.
	//
	// Each variable support following operations:
	// ==: the value equals the target.
	// !=: the value not equals the target.
	// in: the value matches one of the targets.
	// !(in): the value not matches any of the targets.
	//
	// For example:
	// resource.environment_id == "test" && resource.project_id == "sample-project"
	// resource.instance_id == "sample-instance" && resource.database_name == "employee" && resource.table_name in ["table1", "table2"]
	// resource.environment_id != "test" || !(resource.project_id in ["poject1", "prject2"])
	// resource.instance_id == "sample-instance" && (resource.database_name == "db1" || resource.database_name == "db2")
	Condition *expr.Expr `protobuf:"bytes,2,opt,name=condition,proto3" json:"condition,omitempty"`
	// The semantic type of data to mask (e.g., "SSN", "EMAIL").
	SemanticType  string `protobuf:"bytes,3,opt,name=semantic_type,json=semanticType,proto3" json:"semantic_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MaskingRulePolicy_MaskingRule) Reset() {
	*x = MaskingRulePolicy_MaskingRule{}
	mi := &file_v1_org_policy_service_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MaskingRulePolicy_MaskingRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaskingRulePolicy_MaskingRule) ProtoMessage() {}

func (x *MaskingRulePolicy_MaskingRule) ProtoReflect() protoreflect.Message {
	mi := &file_v1_org_policy_service_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaskingRulePolicy_MaskingRule.ProtoReflect.Descriptor instead.
func (*MaskingRulePolicy_MaskingRule) Descriptor() ([]byte, []int) {
	return file_v1_org_policy_service_proto_rawDescGZIP(), []int{11, 0}
}

func (x *MaskingRulePolicy_MaskingRule) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *MaskingRulePolicy_MaskingRule) GetCondition() *expr.Expr {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *MaskingRulePolicy_MaskingRule) GetSemanticType() string {
	if x != nil {
		return x.SemanticType
	}
	return ""
}

var File_v1_org_policy_service_proto protoreflect.FileDescriptor

const file_v1_org_policy_service_proto_rawDesc = "" +
	"\n" +
	"\x1bv1/org_policy_service.proto\x12\vbytebase.v1\x1a\x1cgoogle/api/annotations.proto\x1a\x17google/api/client.proto\x1a\x1fgoogle/api/field_behavior.proto\x1a\x19google/api/resource.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\x1bgoogle/protobuf/empty.proto\x1a google/protobuf/field_mask.proto\x1a\x16google/type/expr.proto\x1a\x13v1/annotation.proto\x1a\x0fv1/common.proto\"\xa9\x01\n" +
	"\x13CreatePolicyRequest\x123\n" +
	"\x06parent\x18\x01 \x01(\tB\x1b\xe0A\x02\xfaA\x15\x12\x13bytebase.com/PolicyR\x06parent\x120\n" +
	"\x06policy\x18\x02 \x01(\v2\x13.bytebase.v1.PolicyB\x03\xe0A\x02R\x06policy\x12+\n" +
	"\x04type\x18\x03 \x01(\x0e2\x17.bytebase.v1.PolicyTypeR\x04type\"\xa9\x01\n" +
	"\x13UpdatePolicyRequest\x120\n" +
	"\x06policy\x18\x01 \x01(\v2\x13.bytebase.v1.PolicyB\x03\xe0A\x02R\x06policy\x12;\n" +
	"\vupdate_mask\x18\x02 \x01(\v2\x1a.google.protobuf.FieldMaskR\n" +
	"updateMask\x12#\n" +
	"\rallow_missing\x18\x03 \x01(\bR\fallowMissing\"F\n" +
	"\x13DeletePolicyRequest\x12/\n" +
	"\x04name\x18\x01 \x01(\tB\x1b\xe0A\x02\xfaA\x15\n" +
	"\x13bytebase.com/PolicyR\x04name\"C\n" +
	"\x10GetPolicyRequest\x12/\n" +
	"\x04name\x18\x01 \x01(\tB\x1b\xe0A\x02\xfaA\x15\n" +
	"\x13bytebase.com/PolicyR\x04name\"\xbc\x01\n" +
	"\x13ListPoliciesRequest\x123\n" +
	"\x06parent\x18\x01 \x01(\tB\x1b\xe0A\x02\xfaA\x15\x12\x13bytebase.com/PolicyR\x06parent\x12=\n" +
	"\vpolicy_type\x18\x02 \x01(\x0e2\x17.bytebase.v1.PolicyTypeH\x00R\n" +
	"policyType\x88\x01\x01\x12!\n" +
	"\fshow_deleted\x18\x03 \x01(\bR\vshowDeletedB\x0e\n" +
	"\f_policy_type\"G\n" +
	"\x14ListPoliciesResponse\x12/\n" +
	"\bpolicies\x18\x01 \x03(\v2\x13.bytebase.v1.PolicyR\bpolicies\"\xb8\a\n" +
	"\x06Policy\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12.\n" +
	"\x13inherit_from_parent\x18\x04 \x01(\bR\x11inheritFromParent\x12+\n" +
	"\x04type\x18\x05 \x01(\x0e2\x17.bytebase.v1.PolicyTypeR\x04type\x12C\n" +
	"\x0erollout_policy\x18\x13 \x01(\v2\x1a.bytebase.v1.RolloutPolicyH\x00R\rrolloutPolicy\x12P\n" +
	"\x13masking_rule_policy\x18\x11 \x01(\v2\x1e.bytebase.v1.MaskingRulePolicyH\x00R\x11maskingRulePolicy\x12_\n" +
	"\x18masking_exception_policy\x18\x12 \x01(\v2#.bytebase.v1.MaskingExceptionPolicyH\x00R\x16maskingExceptionPolicy\x127\n" +
	"\n" +
	"tag_policy\x18\x15 \x01(\v2\x16.bytebase.v1.TagPolicyH\x00R\ttagPolicy\x12]\n" +
	"\x18data_source_query_policy\x18\x16 \x01(\v2\".bytebase.v1.DataSourceQueryPolicyH\x00R\x15dataSourceQueryPolicy\x12J\n" +
	"\x11query_data_policy\x18\x18 \x01(\v2\x1c.bytebase.v1.QueryDataPolicyH\x00R\x0fqueryDataPolicy\x12\x18\n" +
	"\aenforce\x18\r \x01(\bR\aenforce\x12I\n" +
	"\rresource_type\x18\x0e \x01(\x0e2\x1f.bytebase.v1.PolicyResourceTypeB\x03\xe0A\x03R\fresourceType:\xe5\x01\xeaA\xe1\x01\n" +
	"\x13bytebase.com/Policy\x12\x11policies/{policy}\x12$projects/{project}/policies/{policy}\x12,environments/{environment}/policies/{policy}\x12&instances/{instance}/policies/{policy}\x12;instances/{instance}/databases/{database}/policies/{policy}B\b\n" +
	"\x06policyJ\x04\b\x02\x10\x03J\x04\b\x17\x10\x18\"\x9e\x04\n" +
	"\rRolloutPolicy\x12\x1c\n" +
	"\tautomatic\x18\x01 \x01(\bR\tautomatic\x12\x14\n" +
	"\x05roles\x18\x02 \x03(\tR\x05roles\x12?\n" +
	"\bcheckers\x18\x04 \x01(\v2#.bytebase.v1.RolloutPolicy.CheckersR\bcheckers\x1a\x97\x03\n" +
	"\bCheckers\x126\n" +
	"\x17required_issue_approval\x18\x01 \x01(\bR\x15requiredIssueApproval\x12n\n" +
	"\x16required_status_checks\x18\x02 \x01(\v28.bytebase.v1.RolloutPolicy.Checkers.RequiredStatusChecksR\x14requiredStatusChecks\x1a\x86\x01\n" +
	"\x14RequiredStatusChecks\x12n\n" +
	"\x16plan_check_enforcement\x18\x01 \x01(\x0e28.bytebase.v1.RolloutPolicy.Checkers.PlanCheckEnforcementR\x14planCheckEnforcement\"Z\n" +
	"\x14PlanCheckEnforcement\x12&\n" +
	"\"PLAN_CHECK_ENFORCEMENT_UNSPECIFIED\x10\x00\x12\x0e\n" +
	"\n" +
	"ERROR_ONLY\x10\x01\x12\n" +
	"\n" +
	"\x06STRICT\x10\x02\"\xf9\x01\n" +
	"\x0fQueryDataPolicy\x123\n" +
	"\atimeout\x18\x01 \x01(\v2\x19.google.protobuf.DurationR\atimeout\x12%\n" +
	"\x0edisable_export\x18\x02 \x01(\bR\rdisableExport\x12.\n" +
	"\x13maximum_result_size\x18\x03 \x01(\x03R\x11maximumResultSize\x12.\n" +
	"\x13maximum_result_rows\x18\x04 \x01(\x05R\x11maximumResultRows\x12*\n" +
	"\x11disable_copy_data\x18\x05 \x01(\bR\x0fdisableCopyData\"\xbb\x01\n" +
	"\rSQLReviewRule\x12\x12\n" +
	"\x04type\x18\x01 \x01(\tR\x04type\x125\n" +
	"\x05level\x18\x02 \x01(\x0e2\x1f.bytebase.v1.SQLReviewRuleLevelR\x05level\x12\x18\n" +
	"\apayload\x18\x03 \x01(\tR\apayload\x12+\n" +
	"\x06engine\x18\x04 \x01(\x0e2\x13.bytebase.v1.EngineR\x06engine\x12\x18\n" +
	"\acomment\x18\x05 \x01(\tR\acomment\"\xe9\x02\n" +
	"\x16MaskingExceptionPolicy\x12c\n" +
	"\x12masking_exceptions\x18\x01 \x03(\v24.bytebase.v1.MaskingExceptionPolicy.MaskingExceptionR\x11maskingExceptions\x1a\xe9\x01\n" +
	"\x10MaskingException\x12S\n" +
	"\x06action\x18\x01 \x01(\x0e2;.bytebase.v1.MaskingExceptionPolicy.MaskingException.ActionR\x06action\x12\x16\n" +
	"\x06member\x18\x03 \x01(\tR\x06member\x12/\n" +
	"\tcondition\x18\x04 \x01(\v2\x11.google.type.ExprR\tcondition\"7\n" +
	"\x06Action\x12\x16\n" +
	"\x12ACTION_UNSPECIFIED\x10\x00\x12\t\n" +
	"\x05QUERY\x10\x01\x12\n" +
	"\n" +
	"\x06EXPORT\x10\x02\"\xca\x01\n" +
	"\x11MaskingRulePolicy\x12@\n" +
	"\x05rules\x18\x01 \x03(\v2*.bytebase.v1.MaskingRulePolicy.MaskingRuleR\x05rules\x1as\n" +
	"\vMaskingRule\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12/\n" +
	"\tcondition\x18\x02 \x01(\v2\x11.google.type.ExprR\tcondition\x12#\n" +
	"\rsemantic_type\x18\x03 \x01(\tR\fsemanticType\"z\n" +
	"\tTagPolicy\x124\n" +
	"\x04tags\x18\x01 \x03(\v2 .bytebase.v1.TagPolicy.TagsEntryR\x04tags\x1a7\n" +
	"\tTagsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x98\x02\n" +
	"\x15DataSourceQueryPolicy\x12q\n" +
	"\x1dadmin_data_source_restriction\x18\x01 \x01(\x0e2..bytebase.v1.DataSourceQueryPolicy.RestrictionR\x1aadminDataSourceRestriction\x12!\n" +
	"\fdisallow_ddl\x18\x02 \x01(\bR\vdisallowDdl\x12!\n" +
	"\fdisallow_dml\x18\x03 \x01(\bR\vdisallowDml\"F\n" +
	"\vRestriction\x12\x1b\n" +
	"\x17RESTRICTION_UNSPECIFIED\x10\x00\x12\f\n" +
	"\bFALLBACK\x10\x01\x12\f\n" +
	"\bDISALLOW\x10\x02*\xc0\x01\n" +
	"\n" +
	"PolicyType\x12\x1b\n" +
	"\x17POLICY_TYPE_UNSPECIFIED\x10\x00\x12\x12\n" +
	"\x0eROLLOUT_POLICY\x10\v\x12\x10\n" +
	"\fMASKING_RULE\x10\t\x12\x15\n" +
	"\x11MASKING_EXCEPTION\x10\n" +
	"\x12\a\n" +
	"\x03TAG\x10\r\x12\x15\n" +
	"\x11DATA_SOURCE_QUERY\x10\x0e\x12\x0e\n" +
	"\n" +
	"DATA_QUERY\x10\x10\"\x04\b\x02\x10\x02\"\x04\b\x04\x10\x04\"\x04\b\x06\x10\x06\"\x04\b\x05\x10\x05\"\x04\b\a\x10\a\"\x04\b\f\x10\f\"\x04\b\x0f\x10\x0f*`\n" +
	"\x12PolicyResourceType\x12\x1d\n" +
	"\x19RESOURCE_TYPE_UNSPECIFIED\x10\x00\x12\r\n" +
	"\tWORKSPACE\x10\x01\x12\x0f\n" +
	"\vENVIRONMENT\x10\x02\x12\v\n" +
	"\aPROJECT\x10\x03*C\n" +
	"\x12SQLReviewRuleLevel\x12\x15\n" +
	"\x11LEVEL_UNSPECIFIED\x10\x00\x12\t\n" +
	"\x05ERROR\x10\x01\x12\v\n" +
	"\aWARNING\x10\x022\xf4\f\n" +
	"\x10OrgPolicyService\x12\xa0\x02\n" +
	"\tGetPolicy\x12\x1d.bytebase.v1.GetPolicyRequest\x1a\x13.bytebase.v1.Policy\"\xde\x01\xdaA\x04name\x8a\xea0\x0fbb.policies.get\x90\xea0\x01\x82\xd3\xe4\x93\x02\xb9\x01Z\"\x12 /v1/{name=projects/*/policies/*}Z&\x12$/v1/{name=environments/*/policies/*}Z#\x12!/v1/{name=instances/*/policies/*}Z/\x12-/v1/{name=instances/*/databases/*/policies/*}\x12\x15/v1/{name=policies/*}\x12\xa8\x02\n" +
	"\fListPolicies\x12 .bytebase.v1.ListPoliciesRequest\x1a!.bytebase.v1.ListPoliciesResponse\"\xd2\x01\xdaA\x00\x8a\xea0\x10bb.policies.list\x90\xea0\x01\x82\xd3\xe4\x93\x02\xb0\x01Z\"\x12 /v1/{parent=projects/*}/policiesZ&\x12$/v1/{parent=environments/*}/policiesZ#\x12!/v1/{parent=instances/*}/policiesZ/\x12-/v1/{parent=instances/*/databases/*}/policies\x12\f/v1/policies\x12\xd5\x02\n" +
	"\fCreatePolicy\x12 .bytebase.v1.CreatePolicyRequest\x1a\x13.bytebase.v1.Policy\"\x8d\x02\xdaA\rparent,policy\x8a\xea0\x12bb.policies.create\x90\xea0\x01\x98\xea0\x01\x82\xd3\xe4\x93\x02\xd8\x01:\x06policyZ*:\x06policy\" /v1/{parent=projects/*}/policiesZ.:\x06policy\"$/v1/{parent=environments/*}/policiesZ+:\x06policy\"!/v1/{parent=instances/*}/policiesZ7:\x06policy\"-/v1/{parent=instances/*/databases/*}/policies\"\f/v1/policies\x12\x86\x03\n" +
	"\fUpdatePolicy\x12 .bytebase.v1.UpdatePolicyRequest\x1a\x13.bytebase.v1.Policy\"\xbe\x02\xdaA\x12policy,update_mask\x8a\xea0\x12bb.policies.update\x90\xea0\x01\x98\xea0\x01\x82\xd3\xe4\x93\x02\x84\x02:\x06policyZ1:\x06policy2'/v1/{policy.name=projects/*/policies/*}Z5:\x06policy2+/v1/{policy.name=environments/*/policies/*}Z2:\x06policy2(/v1/{policy.name=instances/*/policies/*}Z>:\x06policy24/v1/{policy.name=instances/*/databases/*/policies/*}2\x1c/v1/{policy.name=policies/*}\x12\xb0\x02\n" +
	"\fDeletePolicy\x12 .bytebase.v1.DeletePolicyRequest\x1a\x16.google.protobuf.Empty\"\xe5\x01\xdaA\x04name\x8a\xea0\x12bb.policies.delete\x90\xea0\x01\x98\xea0\x01\x82\xd3\xe4\x93\x02\xb9\x01Z\"* /v1/{name=projects/*/policies/*}Z&*$/v1/{name=environments/*/policies/*}Z#*!/v1/{name=instances/*/policies/*}Z/*-/v1/{name=instances/*/databases/*/policies/*}*\x15/v1/{name=policies/*}B\xab\x01\n" +
	"\x0fcom.bytebase.v1B\x15OrgPolicyServiceProtoP\x01Z4github.com/bytebase/bytebase/backend/generated-go/v1\xa2\x02\x03BXX\xaa\x02\vBytebase.V1\xca\x02\vBytebase\\V1\xe2\x02\x17Bytebase\\V1\\GPBMetadata\xea\x02\fBytebase::V1b\x06proto3"

var (
	file_v1_org_policy_service_proto_rawDescOnce sync.Once
	file_v1_org_policy_service_proto_rawDescData []byte
)

func file_v1_org_policy_service_proto_rawDescGZIP() []byte {
	file_v1_org_policy_service_proto_rawDescOnce.Do(func() {
		file_v1_org_policy_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_v1_org_policy_service_proto_rawDesc), len(file_v1_org_policy_service_proto_rawDesc)))
	})
	return file_v1_org_policy_service_proto_rawDescData
}

var file_v1_org_policy_service_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_v1_org_policy_service_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_v1_org_policy_service_proto_goTypes = []any{
	(PolicyType)(0),                                     // 0: bytebase.v1.PolicyType
	(PolicyResourceType)(0),                             // 1: bytebase.v1.PolicyResourceType
	(SQLReviewRuleLevel)(0),                             // 2: bytebase.v1.SQLReviewRuleLevel
	(RolloutPolicy_Checkers_PlanCheckEnforcement)(0),    // 3: bytebase.v1.RolloutPolicy.Checkers.PlanCheckEnforcement
	(MaskingExceptionPolicy_MaskingException_Action)(0), // 4: bytebase.v1.MaskingExceptionPolicy.MaskingException.Action
	(DataSourceQueryPolicy_Restriction)(0),              // 5: bytebase.v1.DataSourceQueryPolicy.Restriction
	(*CreatePolicyRequest)(nil),                         // 6: bytebase.v1.CreatePolicyRequest
	(*UpdatePolicyRequest)(nil),                         // 7: bytebase.v1.UpdatePolicyRequest
	(*DeletePolicyRequest)(nil),                         // 8: bytebase.v1.DeletePolicyRequest
	(*GetPolicyRequest)(nil),                            // 9: bytebase.v1.GetPolicyRequest
	(*ListPoliciesRequest)(nil),                         // 10: bytebase.v1.ListPoliciesRequest
	(*ListPoliciesResponse)(nil),                        // 11: bytebase.v1.ListPoliciesResponse
	(*Policy)(nil),                                      // 12: bytebase.v1.Policy
	(*RolloutPolicy)(nil),                               // 13: bytebase.v1.RolloutPolicy
	(*QueryDataPolicy)(nil),                             // 14: bytebase.v1.QueryDataPolicy
	(*SQLReviewRule)(nil),                               // 15: bytebase.v1.SQLReviewRule
	(*MaskingExceptionPolicy)(nil),                      // 16: bytebase.v1.MaskingExceptionPolicy
	(*MaskingRulePolicy)(nil),                           // 17: bytebase.v1.MaskingRulePolicy
	(*TagPolicy)(nil),                                   // 18: bytebase.v1.TagPolicy
	(*DataSourceQueryPolicy)(nil),                       // 19: bytebase.v1.DataSourceQueryPolicy
	(*RolloutPolicy_Checkers)(nil),                      // 20: bytebase.v1.RolloutPolicy.Checkers
	(*RolloutPolicy_Checkers_RequiredStatusChecks)(nil), // 21: bytebase.v1.RolloutPolicy.Checkers.RequiredStatusChecks
	(*MaskingExceptionPolicy_MaskingException)(nil),     // 22: bytebase.v1.MaskingExceptionPolicy.MaskingException
	(*MaskingRulePolicy_MaskingRule)(nil),               // 23: bytebase.v1.MaskingRulePolicy.MaskingRule
	nil,                                                 // 24: bytebase.v1.TagPolicy.TagsEntry
	(*fieldmaskpb.FieldMask)(nil),                       // 25: google.protobuf.FieldMask
	(*durationpb.Duration)(nil),                         // 26: google.protobuf.Duration
	(Engine)(0),                                         // 27: bytebase.v1.Engine
	(*expr.Expr)(nil),                                   // 28: google.type.Expr
	(*emptypb.Empty)(nil),                               // 29: google.protobuf.Empty
}
var file_v1_org_policy_service_proto_depIdxs = []int32{
	12, // 0: bytebase.v1.CreatePolicyRequest.policy:type_name -> bytebase.v1.Policy
	0,  // 1: bytebase.v1.CreatePolicyRequest.type:type_name -> bytebase.v1.PolicyType
	12, // 2: bytebase.v1.UpdatePolicyRequest.policy:type_name -> bytebase.v1.Policy
	25, // 3: bytebase.v1.UpdatePolicyRequest.update_mask:type_name -> google.protobuf.FieldMask
	0,  // 4: bytebase.v1.ListPoliciesRequest.policy_type:type_name -> bytebase.v1.PolicyType
	12, // 5: bytebase.v1.ListPoliciesResponse.policies:type_name -> bytebase.v1.Policy
	0,  // 6: bytebase.v1.Policy.type:type_name -> bytebase.v1.PolicyType
	13, // 7: bytebase.v1.Policy.rollout_policy:type_name -> bytebase.v1.RolloutPolicy
	17, // 8: bytebase.v1.Policy.masking_rule_policy:type_name -> bytebase.v1.MaskingRulePolicy
	16, // 9: bytebase.v1.Policy.masking_exception_policy:type_name -> bytebase.v1.MaskingExceptionPolicy
	18, // 10: bytebase.v1.Policy.tag_policy:type_name -> bytebase.v1.TagPolicy
	19, // 11: bytebase.v1.Policy.data_source_query_policy:type_name -> bytebase.v1.DataSourceQueryPolicy
	14, // 12: bytebase.v1.Policy.query_data_policy:type_name -> bytebase.v1.QueryDataPolicy
	1,  // 13: bytebase.v1.Policy.resource_type:type_name -> bytebase.v1.PolicyResourceType
	20, // 14: bytebase.v1.RolloutPolicy.checkers:type_name -> bytebase.v1.RolloutPolicy.Checkers
	26, // 15: bytebase.v1.QueryDataPolicy.timeout:type_name -> google.protobuf.Duration
	2,  // 16: bytebase.v1.SQLReviewRule.level:type_name -> bytebase.v1.SQLReviewRuleLevel
	27, // 17: bytebase.v1.SQLReviewRule.engine:type_name -> bytebase.v1.Engine
	22, // 18: bytebase.v1.MaskingExceptionPolicy.masking_exceptions:type_name -> bytebase.v1.MaskingExceptionPolicy.MaskingException
	23, // 19: bytebase.v1.MaskingRulePolicy.rules:type_name -> bytebase.v1.MaskingRulePolicy.MaskingRule
	24, // 20: bytebase.v1.TagPolicy.tags:type_name -> bytebase.v1.TagPolicy.TagsEntry
	5,  // 21: bytebase.v1.DataSourceQueryPolicy.admin_data_source_restriction:type_name -> bytebase.v1.DataSourceQueryPolicy.Restriction
	21, // 22: bytebase.v1.RolloutPolicy.Checkers.required_status_checks:type_name -> bytebase.v1.RolloutPolicy.Checkers.RequiredStatusChecks
	3,  // 23: bytebase.v1.RolloutPolicy.Checkers.RequiredStatusChecks.plan_check_enforcement:type_name -> bytebase.v1.RolloutPolicy.Checkers.PlanCheckEnforcement
	4,  // 24: bytebase.v1.MaskingExceptionPolicy.MaskingException.action:type_name -> bytebase.v1.MaskingExceptionPolicy.MaskingException.Action
	28, // 25: bytebase.v1.MaskingExceptionPolicy.MaskingException.condition:type_name -> google.type.Expr
	28, // 26: bytebase.v1.MaskingRulePolicy.MaskingRule.condition:type_name -> google.type.Expr
	9,  // 27: bytebase.v1.OrgPolicyService.GetPolicy:input_type -> bytebase.v1.GetPolicyRequest
	10, // 28: bytebase.v1.OrgPolicyService.ListPolicies:input_type -> bytebase.v1.ListPoliciesRequest
	6,  // 29: bytebase.v1.OrgPolicyService.CreatePolicy:input_type -> bytebase.v1.CreatePolicyRequest
	7,  // 30: bytebase.v1.OrgPolicyService.UpdatePolicy:input_type -> bytebase.v1.UpdatePolicyRequest
	8,  // 31: bytebase.v1.OrgPolicyService.DeletePolicy:input_type -> bytebase.v1.DeletePolicyRequest
	12, // 32: bytebase.v1.OrgPolicyService.GetPolicy:output_type -> bytebase.v1.Policy
	11, // 33: bytebase.v1.OrgPolicyService.ListPolicies:output_type -> bytebase.v1.ListPoliciesResponse
	12, // 34: bytebase.v1.OrgPolicyService.CreatePolicy:output_type -> bytebase.v1.Policy
	12, // 35: bytebase.v1.OrgPolicyService.UpdatePolicy:output_type -> bytebase.v1.Policy
	29, // 36: bytebase.v1.OrgPolicyService.DeletePolicy:output_type -> google.protobuf.Empty
	32, // [32:37] is the sub-list for method output_type
	27, // [27:32] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_v1_org_policy_service_proto_init() }
func file_v1_org_policy_service_proto_init() {
	if File_v1_org_policy_service_proto != nil {
		return
	}
	file_v1_annotation_proto_init()
	file_v1_common_proto_init()
	file_v1_org_policy_service_proto_msgTypes[4].OneofWrappers = []any{}
	file_v1_org_policy_service_proto_msgTypes[6].OneofWrappers = []any{
		(*Policy_RolloutPolicy)(nil),
		(*Policy_MaskingRulePolicy)(nil),
		(*Policy_MaskingExceptionPolicy)(nil),
		(*Policy_TagPolicy)(nil),
		(*Policy_DataSourceQueryPolicy)(nil),
		(*Policy_QueryDataPolicy)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_v1_org_policy_service_proto_rawDesc), len(file_v1_org_policy_service_proto_rawDesc)),
			NumEnums:      6,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_v1_org_policy_service_proto_goTypes,
		DependencyIndexes: file_v1_org_policy_service_proto_depIdxs,
		EnumInfos:         file_v1_org_policy_service_proto_enumTypes,
		MessageInfos:      file_v1_org_policy_service_proto_msgTypes,
	}.Build()
	File_v1_org_policy_service_proto = out.File
	file_v1_org_policy_service_proto_goTypes = nil
	file_v1_org_policy_service_proto_depIdxs = nil
}
