// Code generated by protoc-gen-equal-go. DO NOT EDIT.
// source: v1/plan_service.proto

package v1

import (
	proto "google.golang.org/protobuf/proto"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
)

func (x *GetPlanRequest) Equal(y *GetPlanRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	return true
}

func (x *ListPlansRequest) Equal(y *ListPlansRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Parent != y.Parent {
		return false
	}
	if x.PageSize != y.PageSize {
		return false
	}
	if x.PageToken != y.PageToken {
		return false
	}
	return true
}

func (x *ListPlansResponse) Equal(y *ListPlansResponse) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if len(x.Plans) != len(y.Plans) {
		return false
	}
	for i := 0; i < len(x.Plans); i++ {
		if !x.Plans[i].Equal(y.Plans[i]) {
			return false
		}
	}
	if x.NextPageToken != y.NextPageToken {
		return false
	}
	return true
}

func (x *SearchPlansRequest) Equal(y *SearchPlansRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Parent != y.Parent {
		return false
	}
	if x.PageSize != y.PageSize {
		return false
	}
	if x.PageToken != y.PageToken {
		return false
	}
	if x.Filter != y.Filter {
		return false
	}
	return true
}

func (x *SearchPlansResponse) Equal(y *SearchPlansResponse) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if len(x.Plans) != len(y.Plans) {
		return false
	}
	for i := 0; i < len(x.Plans); i++ {
		if !x.Plans[i].Equal(y.Plans[i]) {
			return false
		}
	}
	if x.NextPageToken != y.NextPageToken {
		return false
	}
	return true
}

func (x *CreatePlanRequest) Equal(y *CreatePlanRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Parent != y.Parent {
		return false
	}
	if !x.Plan.Equal(y.Plan) {
		return false
	}
	return true
}

func (x *UpdatePlanRequest) Equal(y *UpdatePlanRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if !x.Plan.Equal(y.Plan) {
		return false
	}
	if equal, ok := interface{}(x.UpdateMask).(interface {
		Equal(*fieldmaskpb.FieldMask) bool
	}); !ok || !equal.Equal(y.UpdateMask) {
		return false
	} else if !proto.Equal(x.UpdateMask, y.UpdateMask) {
		return false
	}
	if x.AllowMissing != y.AllowMissing {
		return false
	}
	return true
}

func (x *Plan_Spec) Equal(y *Plan_Spec) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Id != y.Id {
		return false
	}
	if !x.GetCreateDatabaseConfig().Equal(y.GetCreateDatabaseConfig()) {
		return false
	}
	if !x.GetChangeDatabaseConfig().Equal(y.GetChangeDatabaseConfig()) {
		return false
	}
	if !x.GetExportDataConfig().Equal(y.GetExportDataConfig()) {
		return false
	}
	return true
}

func (x *Plan_CreateDatabaseConfig) Equal(y *Plan_CreateDatabaseConfig) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Target != y.Target {
		return false
	}
	if x.Database != y.Database {
		return false
	}
	if x.Table != y.Table {
		return false
	}
	if x.CharacterSet != y.CharacterSet {
		return false
	}
	if x.Collation != y.Collation {
		return false
	}
	if x.Cluster != y.Cluster {
		return false
	}
	if x.Owner != y.Owner {
		return false
	}
	if x.Environment != y.Environment {
		return false
	}
	return true
}

func (x *Plan_ChangeDatabaseConfig) Equal(y *Plan_ChangeDatabaseConfig) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if len(x.Targets) != len(y.Targets) {
		return false
	}
	for i := 0; i < len(x.Targets); i++ {
		if x.Targets[i] != y.Targets[i] {
			return false
		}
	}
	if x.Sheet != y.Sheet {
		return false
	}
	if x.Release != y.Release {
		return false
	}
	if x.Type != y.Type {
		return false
	}
	if x.MigrationType != y.MigrationType {
		return false
	}
	if len(x.GhostFlags) != len(y.GhostFlags) {
		return false
	}
	for k := range x.GhostFlags {
		_, ok := y.GhostFlags[k]
		if !ok {
			return false
		}
		if x.GhostFlags[k] != y.GhostFlags[k] {
			return false
		}
	}
	if x.EnablePriorBackup != y.EnablePriorBackup {
		return false
	}
	return true
}

func (x *Plan_ExportDataConfig) Equal(y *Plan_ExportDataConfig) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if len(x.Targets) != len(y.Targets) {
		return false
	}
	for i := 0; i < len(x.Targets); i++ {
		if x.Targets[i] != y.Targets[i] {
			return false
		}
	}
	if x.Sheet != y.Sheet {
		return false
	}
	if x.Format != y.Format {
		return false
	}
	if p, q := x.Password, y.Password; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	return true
}

func (x *Plan_Deployment_DatabaseGroupMapping) Equal(y *Plan_Deployment_DatabaseGroupMapping) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.DatabaseGroup != y.DatabaseGroup {
		return false
	}
	if len(x.Databases) != len(y.Databases) {
		return false
	}
	for i := 0; i < len(x.Databases); i++ {
		if x.Databases[i] != y.Databases[i] {
			return false
		}
	}
	return true
}

func (x *Plan_Deployment) Equal(y *Plan_Deployment) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if len(x.Environments) != len(y.Environments) {
		return false
	}
	for i := 0; i < len(x.Environments); i++ {
		if x.Environments[i] != y.Environments[i] {
			return false
		}
	}
	if len(x.DatabaseGroupMappings) != len(y.DatabaseGroupMappings) {
		return false
	}
	for i := 0; i < len(x.DatabaseGroupMappings); i++ {
		if !x.DatabaseGroupMappings[i].Equal(y.DatabaseGroupMappings[i]) {
			return false
		}
	}
	return true
}

func (x *Plan) Equal(y *Plan) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	if x.State != y.State {
		return false
	}
	if x.Issue != y.Issue {
		return false
	}
	if x.Rollout != y.Rollout {
		return false
	}
	if x.Title != y.Title {
		return false
	}
	if x.Description != y.Description {
		return false
	}
	if len(x.Specs) != len(y.Specs) {
		return false
	}
	for i := 0; i < len(x.Specs); i++ {
		if !x.Specs[i].Equal(y.Specs[i]) {
			return false
		}
	}
	if x.Creator != y.Creator {
		return false
	}
	if p, q := x.CreateTime, y.CreateTime; (p == nil && q != nil) || (p != nil && (q == nil || p.Seconds != q.Seconds || p.Nanos != q.Nanos)) {
		return false
	}
	if p, q := x.UpdateTime, y.UpdateTime; (p == nil && q != nil) || (p != nil && (q == nil || p.Seconds != q.Seconds || p.Nanos != q.Nanos)) {
		return false
	}
	if len(x.PlanCheckRunStatusCount) != len(y.PlanCheckRunStatusCount) {
		return false
	}
	for k := range x.PlanCheckRunStatusCount {
		_, ok := y.PlanCheckRunStatusCount[k]
		if !ok {
			return false
		}
		if x.PlanCheckRunStatusCount[k] != y.PlanCheckRunStatusCount[k] {
			return false
		}
	}
	if !x.Deployment.Equal(y.Deployment) {
		return false
	}
	return true
}

func (x *ListPlanCheckRunsRequest) Equal(y *ListPlanCheckRunsRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Parent != y.Parent {
		return false
	}
	if x.PageSize != y.PageSize {
		return false
	}
	if x.PageToken != y.PageToken {
		return false
	}
	if x.LatestOnly != y.LatestOnly {
		return false
	}
	if x.Filter != y.Filter {
		return false
	}
	return true
}

func (x *ListPlanCheckRunsResponse) Equal(y *ListPlanCheckRunsResponse) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if len(x.PlanCheckRuns) != len(y.PlanCheckRuns) {
		return false
	}
	for i := 0; i < len(x.PlanCheckRuns); i++ {
		if !x.PlanCheckRuns[i].Equal(y.PlanCheckRuns[i]) {
			return false
		}
	}
	if x.NextPageToken != y.NextPageToken {
		return false
	}
	return true
}

func (x *RunPlanChecksRequest) Equal(y *RunPlanChecksRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	if p, q := x.SpecId, y.SpecId; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	return true
}

func (x *RunPlanChecksResponse) Equal(y *RunPlanChecksResponse) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	return true
}

func (x *BatchCancelPlanCheckRunsRequest) Equal(y *BatchCancelPlanCheckRunsRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Parent != y.Parent {
		return false
	}
	if len(x.PlanCheckRuns) != len(y.PlanCheckRuns) {
		return false
	}
	for i := 0; i < len(x.PlanCheckRuns); i++ {
		if x.PlanCheckRuns[i] != y.PlanCheckRuns[i] {
			return false
		}
	}
	return true
}

func (x *BatchCancelPlanCheckRunsResponse) Equal(y *BatchCancelPlanCheckRunsResponse) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	return true
}

func (x *PlanCheckRun_Result_SqlSummaryReport) Equal(y *PlanCheckRun_Result_SqlSummaryReport) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if len(x.StatementTypes) != len(y.StatementTypes) {
		return false
	}
	for i := 0; i < len(x.StatementTypes); i++ {
		if x.StatementTypes[i] != y.StatementTypes[i] {
			return false
		}
	}
	if x.AffectedRows != y.AffectedRows {
		return false
	}
	if !x.ChangedResources.Equal(y.ChangedResources) {
		return false
	}
	return true
}

func (x *PlanCheckRun_Result_SqlReviewReport) Equal(y *PlanCheckRun_Result_SqlReviewReport) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Line != y.Line {
		return false
	}
	if x.Column != y.Column {
		return false
	}
	if !x.StartPosition.Equal(y.StartPosition) {
		return false
	}
	if !x.EndPosition.Equal(y.EndPosition) {
		return false
	}
	return true
}

func (x *PlanCheckRun_Result) Equal(y *PlanCheckRun_Result) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Status != y.Status {
		return false
	}
	if x.Title != y.Title {
		return false
	}
	if x.Content != y.Content {
		return false
	}
	if x.Code != y.Code {
		return false
	}
	if !x.GetSqlSummaryReport().Equal(y.GetSqlSummaryReport()) {
		return false
	}
	if !x.GetSqlReviewReport().Equal(y.GetSqlReviewReport()) {
		return false
	}
	return true
}

func (x *PlanCheckRun) Equal(y *PlanCheckRun) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	if x.Type != y.Type {
		return false
	}
	if x.Status != y.Status {
		return false
	}
	if x.Target != y.Target {
		return false
	}
	if x.Sheet != y.Sheet {
		return false
	}
	if len(x.Results) != len(y.Results) {
		return false
	}
	for i := 0; i < len(x.Results); i++ {
		if !x.Results[i].Equal(y.Results[i]) {
			return false
		}
	}
	if x.Error != y.Error {
		return false
	}
	if p, q := x.CreateTime, y.CreateTime; (p == nil && q != nil) || (p != nil && (q == nil || p.Seconds != q.Seconds || p.Nanos != q.Nanos)) {
		return false
	}
	return true
}
