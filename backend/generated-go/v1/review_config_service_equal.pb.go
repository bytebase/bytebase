// Code generated by protoc-gen-equal-go. DO NOT EDIT.
// source: v1/review_config_service.proto

package v1

import (
	proto "google.golang.org/protobuf/proto"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
)

func (x *ListReviewConfigsRequest) Equal(y *ListReviewConfigsRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	return true
}

func (x *ListReviewConfigsResponse) Equal(y *ListReviewConfigsResponse) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if len(x.ReviewConfigs) != len(y.ReviewConfigs) {
		return false
	}
	for i := 0; i < len(x.ReviewConfigs); i++ {
		if !x.ReviewConfigs[i].Equal(y.ReviewConfigs[i]) {
			return false
		}
	}
	return true
}

func (x *CreateReviewConfigRequest) Equal(y *CreateReviewConfigRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if !x.ReviewConfig.Equal(y.ReviewConfig) {
		return false
	}
	return true
}

func (x *UpdateReviewConfigRequest) Equal(y *UpdateReviewConfigRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if !x.ReviewConfig.Equal(y.ReviewConfig) {
		return false
	}
	if equal, ok := interface{}(x.UpdateMask).(interface {
		Equal(*fieldmaskpb.FieldMask) bool
	}); !ok || !equal.Equal(y.UpdateMask) {
		return false
	} else if !proto.Equal(x.UpdateMask, y.UpdateMask) {
		return false
	}
	if x.AllowMissing != y.AllowMissing {
		return false
	}
	return true
}

func (x *GetReviewConfigRequest) Equal(y *GetReviewConfigRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	return true
}

func (x *DeleteReviewConfigRequest) Equal(y *DeleteReviewConfigRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	return true
}

func (x *ReviewConfig) Equal(y *ReviewConfig) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	if x.Title != y.Title {
		return false
	}
	if x.Enabled != y.Enabled {
		return false
	}
	if len(x.Rules) != len(y.Rules) {
		return false
	}
	for i := 0; i < len(x.Rules); i++ {
		if !x.Rules[i].Equal(y.Rules[i]) {
			return false
		}
	}
	if len(x.Resources) != len(y.Resources) {
		return false
	}
	for i := 0; i < len(x.Resources); i++ {
		if x.Resources[i] != y.Resources[i] {
			return false
		}
	}
	return true
}
