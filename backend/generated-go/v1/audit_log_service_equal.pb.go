// Code generated by protoc-gen-equal-go. DO NOT EDIT.
// source: v1/audit_log_service.proto

package v1

import (
	status "google.golang.org/genproto/googleapis/rpc/status"
	proto "google.golang.org/protobuf/proto"
)

func (x *SearchAuditLogsRequest) Equal(y *SearchAuditLogsRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Parent != y.Parent {
		return false
	}
	if x.Filter != y.Filter {
		return false
	}
	if x.OrderBy != y.OrderBy {
		return false
	}
	if x.PageSize != y.PageSize {
		return false
	}
	if x.PageToken != y.PageToken {
		return false
	}
	return true
}

func (x *SearchAuditLogsResponse) Equal(y *SearchAuditLogsResponse) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if len(x.AuditLogs) != len(y.AuditLogs) {
		return false
	}
	for i := 0; i < len(x.AuditLogs); i++ {
		if !x.AuditLogs[i].Equal(y.AuditLogs[i]) {
			return false
		}
	}
	if x.NextPageToken != y.NextPageToken {
		return false
	}
	return true
}

func (x *ExportAuditLogsRequest) Equal(y *ExportAuditLogsRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Parent != y.Parent {
		return false
	}
	if x.Filter != y.Filter {
		return false
	}
	if x.OrderBy != y.OrderBy {
		return false
	}
	if x.Format != y.Format {
		return false
	}
	if x.PageSize != y.PageSize {
		return false
	}
	if x.PageToken != y.PageToken {
		return false
	}
	return true
}

func (x *ExportAuditLogsResponse) Equal(y *ExportAuditLogsResponse) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if string(x.Content) != string(y.Content) {
		return false
	}
	if x.NextPageToken != y.NextPageToken {
		return false
	}
	return true
}

func (x *AuditLog) Equal(y *AuditLog) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	if p, q := x.CreateTime, y.CreateTime; (p == nil && q != nil) || (p != nil && (q == nil || p.Seconds != q.Seconds || p.Nanos != q.Nanos)) {
		return false
	}
	if x.User != y.User {
		return false
	}
	if x.Method != y.Method {
		return false
	}
	if x.Severity != y.Severity {
		return false
	}
	if x.Resource != y.Resource {
		return false
	}
	if x.Request != y.Request {
		return false
	}
	if x.Response != y.Response {
		return false
	}
	if equal, ok := interface{}(x.Status).(interface{ Equal(*status.Status) bool }); !ok || !equal.Equal(y.Status) {
		return false
	} else if !proto.Equal(x.Status, y.Status) {
		return false
	}
	if p, q := x.Latency, y.Latency; (p == nil && q != nil) || (p != nil && (q == nil || p.Seconds != q.Seconds || p.Nanos != q.Nanos)) {
		return false
	}
	if p, q := x.ServiceData, y.ServiceData; (p == nil && q != nil) || (p != nil && (q == nil || p.TypeUrl != q.TypeUrl || string(p.Value) != string(q.Value))) {
		return false
	}
	if !x.RequestMetadata.Equal(y.RequestMetadata) {
		return false
	}
	return true
}

func (x *AuditData) Equal(y *AuditData) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if !x.PolicyDelta.Equal(y.PolicyDelta) {
		return false
	}
	return true
}

func (x *RequestMetadata) Equal(y *RequestMetadata) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.CallerIp != y.CallerIp {
		return false
	}
	if x.CallerSuppliedUserAgent != y.CallerSuppliedUserAgent {
		return false
	}
	return true
}
