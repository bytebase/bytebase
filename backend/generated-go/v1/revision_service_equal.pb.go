// Code generated by protoc-gen-equal-go. DO NOT EDIT.
// source: v1/revision_service.proto

package v1

func (x *ListRevisionsRequest) Equal(y *ListRevisionsRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Parent != y.Parent {
		return false
	}
	if x.PageSize != y.PageSize {
		return false
	}
	if x.PageToken != y.PageToken {
		return false
	}
	if x.ShowDeleted != y.ShowDeleted {
		return false
	}
	return true
}

func (x *ListRevisionsResponse) Equal(y *ListRevisionsResponse) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if len(x.Revisions) != len(y.Revisions) {
		return false
	}
	for i := 0; i < len(x.Revisions); i++ {
		if !x.Revisions[i].Equal(y.Revisions[i]) {
			return false
		}
	}
	if x.NextPageToken != y.NextPageToken {
		return false
	}
	return true
}

func (x *CreateRevisionRequest) Equal(y *CreateRevisionRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Parent != y.Parent {
		return false
	}
	if !x.Revision.Equal(y.Revision) {
		return false
	}
	return true
}

func (x *BatchCreateRevisionsRequest) Equal(y *BatchCreateRevisionsRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Parent != y.Parent {
		return false
	}
	if len(x.Requests) != len(y.Requests) {
		return false
	}
	for i := 0; i < len(x.Requests); i++ {
		if !x.Requests[i].Equal(y.Requests[i]) {
			return false
		}
	}
	return true
}

func (x *BatchCreateRevisionsResponse) Equal(y *BatchCreateRevisionsResponse) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if len(x.Revisions) != len(y.Revisions) {
		return false
	}
	for i := 0; i < len(x.Revisions); i++ {
		if !x.Revisions[i].Equal(y.Revisions[i]) {
			return false
		}
	}
	return true
}

func (x *GetRevisionRequest) Equal(y *GetRevisionRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	return true
}

func (x *DeleteRevisionRequest) Equal(y *DeleteRevisionRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	return true
}

func (x *Revision) Equal(y *Revision) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	if x.Release != y.Release {
		return false
	}
	if p, q := x.CreateTime, y.CreateTime; (p == nil && q != nil) || (p != nil && (q == nil || p.Seconds != q.Seconds || p.Nanos != q.Nanos)) {
		return false
	}
	if x.Deleter != y.Deleter {
		return false
	}
	if p, q := x.DeleteTime, y.DeleteTime; (p == nil && q != nil) || (p != nil && (q == nil || p.Seconds != q.Seconds || p.Nanos != q.Nanos)) {
		return false
	}
	if x.File != y.File {
		return false
	}
	if x.Version != y.Version {
		return false
	}
	if x.Sheet != y.Sheet {
		return false
	}
	if x.SheetSha256 != y.SheetSha256 {
		return false
	}
	if x.Statement != y.Statement {
		return false
	}
	if x.StatementSize != y.StatementSize {
		return false
	}
	if x.Issue != y.Issue {
		return false
	}
	if x.TaskRun != y.TaskRun {
		return false
	}
	if x.Type != y.Type {
		return false
	}
	return true
}
