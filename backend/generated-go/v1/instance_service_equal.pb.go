// Code generated by protoc-gen-equal-go. DO NOT EDIT.
// source: v1/instance_service.proto

package v1

import (
	proto "google.golang.org/protobuf/proto"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
)

func (x *GetInstanceRequest) Equal(y *GetInstanceRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	return true
}

func (x *ListInstancesRequest) Equal(y *ListInstancesRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.PageSize != y.PageSize {
		return false
	}
	if x.PageToken != y.PageToken {
		return false
	}
	if x.ShowDeleted != y.ShowDeleted {
		return false
	}
	if x.Filter != y.Filter {
		return false
	}
	return true
}

func (x *ListInstancesResponse) Equal(y *ListInstancesResponse) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if len(x.Instances) != len(y.Instances) {
		return false
	}
	for i := 0; i < len(x.Instances); i++ {
		if !x.Instances[i].Equal(y.Instances[i]) {
			return false
		}
	}
	if x.NextPageToken != y.NextPageToken {
		return false
	}
	return true
}

func (x *CreateInstanceRequest) Equal(y *CreateInstanceRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if !x.Instance.Equal(y.Instance) {
		return false
	}
	if x.InstanceId != y.InstanceId {
		return false
	}
	if x.ValidateOnly != y.ValidateOnly {
		return false
	}
	return true
}

func (x *UpdateInstanceRequest) Equal(y *UpdateInstanceRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if !x.Instance.Equal(y.Instance) {
		return false
	}
	if equal, ok := interface{}(x.UpdateMask).(interface {
		Equal(*fieldmaskpb.FieldMask) bool
	}); !ok || !equal.Equal(y.UpdateMask) {
		return false
	} else if !proto.Equal(x.UpdateMask, y.UpdateMask) {
		return false
	}
	if x.AllowMissing != y.AllowMissing {
		return false
	}
	return true
}

func (x *DeleteInstanceRequest) Equal(y *DeleteInstanceRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	if x.Force != y.Force {
		return false
	}
	if x.Purge != y.Purge {
		return false
	}
	return true
}

func (x *UndeleteInstanceRequest) Equal(y *UndeleteInstanceRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	return true
}

func (x *SyncInstanceRequest) Equal(y *SyncInstanceRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	if x.EnableFullSync != y.EnableFullSync {
		return false
	}
	return true
}

func (x *ListInstanceDatabaseRequest) Equal(y *ListInstanceDatabaseRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	if !x.Instance.Equal(y.Instance) {
		return false
	}
	return true
}

func (x *ListInstanceDatabaseResponse) Equal(y *ListInstanceDatabaseResponse) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if len(x.Databases) != len(y.Databases) {
		return false
	}
	for i := 0; i < len(x.Databases); i++ {
		if x.Databases[i] != y.Databases[i] {
			return false
		}
	}
	return true
}

func (x *SyncInstanceResponse) Equal(y *SyncInstanceResponse) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if len(x.Databases) != len(y.Databases) {
		return false
	}
	for i := 0; i < len(x.Databases); i++ {
		if x.Databases[i] != y.Databases[i] {
			return false
		}
	}
	return true
}

func (x *BatchSyncInstancesRequest) Equal(y *BatchSyncInstancesRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if len(x.Requests) != len(y.Requests) {
		return false
	}
	for i := 0; i < len(x.Requests); i++ {
		if !x.Requests[i].Equal(y.Requests[i]) {
			return false
		}
	}
	return true
}

func (x *BatchSyncInstancesResponse) Equal(y *BatchSyncInstancesResponse) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	return true
}

func (x *BatchUpdateInstancesRequest) Equal(y *BatchUpdateInstancesRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if len(x.Requests) != len(y.Requests) {
		return false
	}
	for i := 0; i < len(x.Requests); i++ {
		if !x.Requests[i].Equal(y.Requests[i]) {
			return false
		}
	}
	return true
}

func (x *BatchUpdateInstancesResponse) Equal(y *BatchUpdateInstancesResponse) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if len(x.Instances) != len(y.Instances) {
		return false
	}
	for i := 0; i < len(x.Instances); i++ {
		if !x.Instances[i].Equal(y.Instances[i]) {
			return false
		}
	}
	return true
}

func (x *AddDataSourceRequest) Equal(y *AddDataSourceRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	if !x.DataSource.Equal(y.DataSource) {
		return false
	}
	if x.ValidateOnly != y.ValidateOnly {
		return false
	}
	return true
}

func (x *RemoveDataSourceRequest) Equal(y *RemoveDataSourceRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	if !x.DataSource.Equal(y.DataSource) {
		return false
	}
	return true
}

func (x *UpdateDataSourceRequest) Equal(y *UpdateDataSourceRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	if !x.DataSource.Equal(y.DataSource) {
		return false
	}
	if equal, ok := interface{}(x.UpdateMask).(interface {
		Equal(*fieldmaskpb.FieldMask) bool
	}); !ok || !equal.Equal(y.UpdateMask) {
		return false
	} else if !proto.Equal(x.UpdateMask, y.UpdateMask) {
		return false
	}
	if x.ValidateOnly != y.ValidateOnly {
		return false
	}
	if x.AllowMissing != y.AllowMissing {
		return false
	}
	return true
}

func (x *Instance) Equal(y *Instance) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	if x.State != y.State {
		return false
	}
	if x.Title != y.Title {
		return false
	}
	if x.Engine != y.Engine {
		return false
	}
	if x.EngineVersion != y.EngineVersion {
		return false
	}
	if x.ExternalLink != y.ExternalLink {
		return false
	}
	if len(x.DataSources) != len(y.DataSources) {
		return false
	}
	for i := 0; i < len(x.DataSources); i++ {
		if !x.DataSources[i].Equal(y.DataSources[i]) {
			return false
		}
	}
	if p, q := x.Environment, y.Environment; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	if x.Activation != y.Activation {
		return false
	}
	if len(x.Roles) != len(y.Roles) {
		return false
	}
	for i := 0; i < len(x.Roles); i++ {
		if !x.Roles[i].Equal(y.Roles[i]) {
			return false
		}
	}
	if p, q := x.SyncInterval, y.SyncInterval; (p == nil && q != nil) || (p != nil && (q == nil || p.Seconds != q.Seconds || p.Nanos != q.Nanos)) {
		return false
	}
	if x.MaximumConnections != y.MaximumConnections {
		return false
	}
	if len(x.SyncDatabases) != len(y.SyncDatabases) {
		return false
	}
	for i := 0; i < len(x.SyncDatabases); i++ {
		if x.SyncDatabases[i] != y.SyncDatabases[i] {
			return false
		}
	}
	if p, q := x.LastSyncTime, y.LastSyncTime; (p == nil && q != nil) || (p != nil && (q == nil || p.Seconds != q.Seconds || p.Nanos != q.Nanos)) {
		return false
	}
	if len(x.Labels) != len(y.Labels) {
		return false
	}
	for k := range x.Labels {
		_, ok := y.Labels[k]
		if !ok {
			return false
		}
		if x.Labels[k] != y.Labels[k] {
			return false
		}
	}
	return true
}

func (x *DataSourceExternalSecret_AppRoleAuthOption) Equal(y *DataSourceExternalSecret_AppRoleAuthOption) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.RoleId != y.RoleId {
		return false
	}
	if x.SecretId != y.SecretId {
		return false
	}
	if x.Type != y.Type {
		return false
	}
	if x.MountPath != y.MountPath {
		return false
	}
	return true
}

func (x *DataSourceExternalSecret) Equal(y *DataSourceExternalSecret) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.SecretType != y.SecretType {
		return false
	}
	if x.Url != y.Url {
		return false
	}
	if x.AuthType != y.AuthType {
		return false
	}
	if !x.GetAppRole().Equal(y.GetAppRole()) {
		return false
	}
	if x.GetToken() != y.GetToken() {
		return false
	}
	if x.EngineName != y.EngineName {
		return false
	}
	if x.SecretName != y.SecretName {
		return false
	}
	if x.PasswordKeyName != y.PasswordKeyName {
		return false
	}
	return true
}

func (x *DataSource_AzureCredential) Equal(y *DataSource_AzureCredential) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.TenantId != y.TenantId {
		return false
	}
	if x.ClientId != y.ClientId {
		return false
	}
	if x.ClientSecret != y.ClientSecret {
		return false
	}
	return true
}

func (x *DataSource_AWSCredential) Equal(y *DataSource_AWSCredential) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.AccessKeyId != y.AccessKeyId {
		return false
	}
	if x.SecretAccessKey != y.SecretAccessKey {
		return false
	}
	if x.SessionToken != y.SessionToken {
		return false
	}
	return true
}

func (x *DataSource_GCPCredential) Equal(y *DataSource_GCPCredential) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Content != y.Content {
		return false
	}
	return true
}

func (x *DataSource_Address) Equal(y *DataSource_Address) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Host != y.Host {
		return false
	}
	if x.Port != y.Port {
		return false
	}
	return true
}

func (x *DataSource) Equal(y *DataSource) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Id != y.Id {
		return false
	}
	if x.Type != y.Type {
		return false
	}
	if x.Username != y.Username {
		return false
	}
	if x.Password != y.Password {
		return false
	}
	if x.UseSsl != y.UseSsl {
		return false
	}
	if x.SslCa != y.SslCa {
		return false
	}
	if x.SslCert != y.SslCert {
		return false
	}
	if x.SslKey != y.SslKey {
		return false
	}
	if x.VerifyTlsCertificate != y.VerifyTlsCertificate {
		return false
	}
	if x.Host != y.Host {
		return false
	}
	if x.Port != y.Port {
		return false
	}
	if x.Database != y.Database {
		return false
	}
	if x.Srv != y.Srv {
		return false
	}
	if x.AuthenticationDatabase != y.AuthenticationDatabase {
		return false
	}
	if x.ReplicaSet != y.ReplicaSet {
		return false
	}
	if x.Sid != y.Sid {
		return false
	}
	if x.ServiceName != y.ServiceName {
		return false
	}
	if x.SshHost != y.SshHost {
		return false
	}
	if x.SshPort != y.SshPort {
		return false
	}
	if x.SshUser != y.SshUser {
		return false
	}
	if x.SshPassword != y.SshPassword {
		return false
	}
	if x.SshPrivateKey != y.SshPrivateKey {
		return false
	}
	if x.AuthenticationPrivateKey != y.AuthenticationPrivateKey {
		return false
	}
	if !x.ExternalSecret.Equal(y.ExternalSecret) {
		return false
	}
	if x.AuthenticationType != y.AuthenticationType {
		return false
	}
	if !x.GetAzureCredential().Equal(y.GetAzureCredential()) {
		return false
	}
	if !x.GetAwsCredential().Equal(y.GetAwsCredential()) {
		return false
	}
	if !x.GetGcpCredential().Equal(y.GetGcpCredential()) {
		return false
	}
	if !x.SaslConfig.Equal(y.SaslConfig) {
		return false
	}
	if len(x.AdditionalAddresses) != len(y.AdditionalAddresses) {
		return false
	}
	for i := 0; i < len(x.AdditionalAddresses); i++ {
		if !x.AdditionalAddresses[i].Equal(y.AdditionalAddresses[i]) {
			return false
		}
	}
	if x.DirectConnection != y.DirectConnection {
		return false
	}
	if x.Region != y.Region {
		return false
	}
	if x.WarehouseId != y.WarehouseId {
		return false
	}
	if x.MasterName != y.MasterName {
		return false
	}
	if x.MasterUsername != y.MasterUsername {
		return false
	}
	if x.MasterPassword != y.MasterPassword {
		return false
	}
	if x.RedisType != y.RedisType {
		return false
	}
	if x.Cluster != y.Cluster {
		return false
	}
	if len(x.ExtraConnectionParameters) != len(y.ExtraConnectionParameters) {
		return false
	}
	for k := range x.ExtraConnectionParameters {
		_, ok := y.ExtraConnectionParameters[k]
		if !ok {
			return false
		}
		if x.ExtraConnectionParameters[k] != y.ExtraConnectionParameters[k] {
			return false
		}
	}
	return true
}

func (x *InstanceResource) Equal(y *InstanceResource) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Title != y.Title {
		return false
	}
	if x.Engine != y.Engine {
		return false
	}
	if x.EngineVersion != y.EngineVersion {
		return false
	}
	if len(x.DataSources) != len(y.DataSources) {
		return false
	}
	for i := 0; i < len(x.DataSources); i++ {
		if !x.DataSources[i].Equal(y.DataSources[i]) {
			return false
		}
	}
	if x.Activation != y.Activation {
		return false
	}
	if x.Name != y.Name {
		return false
	}
	if p, q := x.Environment, y.Environment; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	return true
}

func (x *SASLConfig) Equal(y *SASLConfig) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if !x.GetKrbConfig().Equal(y.GetKrbConfig()) {
		return false
	}
	return true
}

func (x *KerberosConfig) Equal(y *KerberosConfig) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Primary != y.Primary {
		return false
	}
	if x.Instance != y.Instance {
		return false
	}
	if x.Realm != y.Realm {
		return false
	}
	if string(x.Keytab) != string(y.Keytab) {
		return false
	}
	if x.KdcHost != y.KdcHost {
		return false
	}
	if x.KdcPort != y.KdcPort {
		return false
	}
	if x.KdcTransportProtocol != y.KdcTransportProtocol {
		return false
	}
	return true
}
