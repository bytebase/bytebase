// Code generated by protoc-gen-equal-go. DO NOT EDIT.
// source: v1/rollout_service.proto

package v1

func (x *BatchRunTasksRequest) Equal(y *BatchRunTasksRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Parent != y.Parent {
		return false
	}
	if len(x.Tasks) != len(y.Tasks) {
		return false
	}
	for i := 0; i < len(x.Tasks); i++ {
		if x.Tasks[i] != y.Tasks[i] {
			return false
		}
	}
	if x.Reason != y.Reason {
		return false
	}
	if p, q := x.RunTime, y.RunTime; (p == nil && q != nil) || (p != nil && (q == nil || p.Seconds != q.Seconds || p.Nanos != q.Nanos)) {
		return false
	}
	return true
}

func (x *BatchRunTasksResponse) Equal(y *BatchRunTasksResponse) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	return true
}

func (x *BatchSkipTasksRequest) Equal(y *BatchSkipTasksRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Parent != y.Parent {
		return false
	}
	if len(x.Tasks) != len(y.Tasks) {
		return false
	}
	for i := 0; i < len(x.Tasks); i++ {
		if x.Tasks[i] != y.Tasks[i] {
			return false
		}
	}
	if x.Reason != y.Reason {
		return false
	}
	return true
}

func (x *BatchSkipTasksResponse) Equal(y *BatchSkipTasksResponse) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	return true
}

func (x *BatchCancelTaskRunsRequest) Equal(y *BatchCancelTaskRunsRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Parent != y.Parent {
		return false
	}
	if len(x.TaskRuns) != len(y.TaskRuns) {
		return false
	}
	for i := 0; i < len(x.TaskRuns); i++ {
		if x.TaskRuns[i] != y.TaskRuns[i] {
			return false
		}
	}
	if x.Reason != y.Reason {
		return false
	}
	return true
}

func (x *BatchCancelTaskRunsResponse) Equal(y *BatchCancelTaskRunsResponse) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	return true
}

func (x *GetRolloutRequest) Equal(y *GetRolloutRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	return true
}

func (x *ListRolloutsRequest) Equal(y *ListRolloutsRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Parent != y.Parent {
		return false
	}
	if x.PageSize != y.PageSize {
		return false
	}
	if x.PageToken != y.PageToken {
		return false
	}
	if x.Filter != y.Filter {
		return false
	}
	return true
}

func (x *ListRolloutsResponse) Equal(y *ListRolloutsResponse) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if len(x.Rollouts) != len(y.Rollouts) {
		return false
	}
	for i := 0; i < len(x.Rollouts); i++ {
		if !x.Rollouts[i].Equal(y.Rollouts[i]) {
			return false
		}
	}
	if x.NextPageToken != y.NextPageToken {
		return false
	}
	return true
}

func (x *CreateRolloutRequest) Equal(y *CreateRolloutRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Parent != y.Parent {
		return false
	}
	if !x.Rollout.Equal(y.Rollout) {
		return false
	}
	if p, q := x.Target, y.Target; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	if x.ValidateOnly != y.ValidateOnly {
		return false
	}
	return true
}

func (x *PreviewRolloutRequest) Equal(y *PreviewRolloutRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Project != y.Project {
		return false
	}
	if !x.Plan.Equal(y.Plan) {
		return false
	}
	return true
}

func (x *ListTaskRunsRequest) Equal(y *ListTaskRunsRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Parent != y.Parent {
		return false
	}
	if x.PageSize != y.PageSize {
		return false
	}
	if x.PageToken != y.PageToken {
		return false
	}
	return true
}

func (x *ListTaskRunsResponse) Equal(y *ListTaskRunsResponse) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if len(x.TaskRuns) != len(y.TaskRuns) {
		return false
	}
	for i := 0; i < len(x.TaskRuns); i++ {
		if !x.TaskRuns[i].Equal(y.TaskRuns[i]) {
			return false
		}
	}
	if x.NextPageToken != y.NextPageToken {
		return false
	}
	return true
}

func (x *GetTaskRunRequest) Equal(y *GetTaskRunRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	return true
}

func (x *GetTaskRunLogRequest) Equal(y *GetTaskRunLogRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Parent != y.Parent {
		return false
	}
	return true
}

func (x *Rollout) Equal(y *Rollout) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	if x.Plan != y.Plan {
		return false
	}
	if x.Title != y.Title {
		return false
	}
	if len(x.Stages) != len(y.Stages) {
		return false
	}
	for i := 0; i < len(x.Stages); i++ {
		if !x.Stages[i].Equal(y.Stages[i]) {
			return false
		}
	}
	if x.Creator != y.Creator {
		return false
	}
	if p, q := x.CreateTime, y.CreateTime; (p == nil && q != nil) || (p != nil && (q == nil || p.Seconds != q.Seconds || p.Nanos != q.Nanos)) {
		return false
	}
	if p, q := x.UpdateTime, y.UpdateTime; (p == nil && q != nil) || (p != nil && (q == nil || p.Seconds != q.Seconds || p.Nanos != q.Nanos)) {
		return false
	}
	if x.Issue != y.Issue {
		return false
	}
	return true
}

func (x *Stage) Equal(y *Stage) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	if x.Id != y.Id {
		return false
	}
	if x.Environment != y.Environment {
		return false
	}
	if len(x.Tasks) != len(y.Tasks) {
		return false
	}
	for i := 0; i < len(x.Tasks); i++ {
		if !x.Tasks[i].Equal(y.Tasks[i]) {
			return false
		}
	}
	return true
}

func (x *Task_DatabaseCreate) Equal(y *Task_DatabaseCreate) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Project != y.Project {
		return false
	}
	if x.Database != y.Database {
		return false
	}
	if x.Table != y.Table {
		return false
	}
	if x.Sheet != y.Sheet {
		return false
	}
	if x.CharacterSet != y.CharacterSet {
		return false
	}
	if x.Collation != y.Collation {
		return false
	}
	if x.Environment != y.Environment {
		return false
	}
	return true
}

func (x *Task_DatabaseUpdate) Equal(y *Task_DatabaseUpdate) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Sheet != y.Sheet {
		return false
	}
	if x.SchemaVersion != y.SchemaVersion {
		return false
	}
	return true
}

func (x *Task_DatabaseDataExport) Equal(y *Task_DatabaseDataExport) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Target != y.Target {
		return false
	}
	if x.Sheet != y.Sheet {
		return false
	}
	if x.Format != y.Format {
		return false
	}
	if p, q := x.Password, y.Password; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	return true
}

func (x *Task) Equal(y *Task) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	if x.SpecId != y.SpecId {
		return false
	}
	if x.Status != y.Status {
		return false
	}
	if x.SkippedReason != y.SkippedReason {
		return false
	}
	if x.Type != y.Type {
		return false
	}
	if x.Target != y.Target {
		return false
	}
	if !x.GetDatabaseCreate().Equal(y.GetDatabaseCreate()) {
		return false
	}
	if !x.GetDatabaseUpdate().Equal(y.GetDatabaseUpdate()) {
		return false
	}
	if !x.GetDatabaseDataExport().Equal(y.GetDatabaseDataExport()) {
		return false
	}
	if p, q := x.UpdateTime, y.UpdateTime; (p == nil && q != nil) || (p != nil && (q == nil || p.Seconds != q.Seconds || p.Nanos != q.Nanos)) {
		return false
	}
	if p, q := x.RunTime, y.RunTime; (p == nil && q != nil) || (p != nil && (q == nil || p.Seconds != q.Seconds || p.Nanos != q.Nanos)) {
		return false
	}
	return true
}

func (x *TaskRun_PriorBackupDetail_Item_Table) Equal(y *TaskRun_PriorBackupDetail_Item_Table) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Database != y.Database {
		return false
	}
	if x.Schema != y.Schema {
		return false
	}
	if x.Table != y.Table {
		return false
	}
	return true
}

func (x *TaskRun_PriorBackupDetail_Item) Equal(y *TaskRun_PriorBackupDetail_Item) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if !x.SourceTable.Equal(y.SourceTable) {
		return false
	}
	if !x.TargetTable.Equal(y.TargetTable) {
		return false
	}
	if !x.StartPosition.Equal(y.StartPosition) {
		return false
	}
	if !x.EndPosition.Equal(y.EndPosition) {
		return false
	}
	return true
}

func (x *TaskRun_PriorBackupDetail) Equal(y *TaskRun_PriorBackupDetail) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if len(x.Items) != len(y.Items) {
		return false
	}
	for i := 0; i < len(x.Items); i++ {
		if !x.Items[i].Equal(y.Items[i]) {
			return false
		}
	}
	return true
}

func (x *TaskRun_SchedulerInfo_WaitingCause_Task) Equal(y *TaskRun_SchedulerInfo_WaitingCause_Task) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Task != y.Task {
		return false
	}
	if x.Issue != y.Issue {
		return false
	}
	return true
}

func (x *TaskRun_SchedulerInfo_WaitingCause) Equal(y *TaskRun_SchedulerInfo_WaitingCause) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.GetConnectionLimit() != y.GetConnectionLimit() {
		return false
	}
	if !x.GetTask().Equal(y.GetTask()) {
		return false
	}
	if x.GetParallelTasksLimit() != y.GetParallelTasksLimit() {
		return false
	}
	return true
}

func (x *TaskRun_SchedulerInfo) Equal(y *TaskRun_SchedulerInfo) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if p, q := x.ReportTime, y.ReportTime; (p == nil && q != nil) || (p != nil && (q == nil || p.Seconds != q.Seconds || p.Nanos != q.Nanos)) {
		return false
	}
	if !x.WaitingCause.Equal(y.WaitingCause) {
		return false
	}
	return true
}

func (x *TaskRun) Equal(y *TaskRun) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	if x.Creator != y.Creator {
		return false
	}
	if p, q := x.CreateTime, y.CreateTime; (p == nil && q != nil) || (p != nil && (q == nil || p.Seconds != q.Seconds || p.Nanos != q.Nanos)) {
		return false
	}
	if p, q := x.UpdateTime, y.UpdateTime; (p == nil && q != nil) || (p != nil && (q == nil || p.Seconds != q.Seconds || p.Nanos != q.Nanos)) {
		return false
	}
	if x.Status != y.Status {
		return false
	}
	if x.Detail != y.Detail {
		return false
	}
	if x.Changelog != y.Changelog {
		return false
	}
	if x.SchemaVersion != y.SchemaVersion {
		return false
	}
	if p, q := x.StartTime, y.StartTime; (p == nil && q != nil) || (p != nil && (q == nil || p.Seconds != q.Seconds || p.Nanos != q.Nanos)) {
		return false
	}
	if x.ExportArchiveStatus != y.ExportArchiveStatus {
		return false
	}
	if !x.PriorBackupDetail.Equal(y.PriorBackupDetail) {
		return false
	}
	if !x.SchedulerInfo.Equal(y.SchedulerInfo) {
		return false
	}
	if x.Sheet != y.Sheet {
		return false
	}
	if p, q := x.RunTime, y.RunTime; (p == nil && q != nil) || (p != nil && (q == nil || p.Seconds != q.Seconds || p.Nanos != q.Nanos)) {
		return false
	}
	return true
}

func (x *TaskRunLog) Equal(y *TaskRunLog) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	if len(x.Entries) != len(y.Entries) {
		return false
	}
	for i := 0; i < len(x.Entries); i++ {
		if !x.Entries[i].Equal(y.Entries[i]) {
			return false
		}
	}
	return true
}

func (x *TaskRunLogEntry_SchemaDump) Equal(y *TaskRunLogEntry_SchemaDump) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if p, q := x.StartTime, y.StartTime; (p == nil && q != nil) || (p != nil && (q == nil || p.Seconds != q.Seconds || p.Nanos != q.Nanos)) {
		return false
	}
	if p, q := x.EndTime, y.EndTime; (p == nil && q != nil) || (p != nil && (q == nil || p.Seconds != q.Seconds || p.Nanos != q.Nanos)) {
		return false
	}
	if x.Error != y.Error {
		return false
	}
	return true
}

func (x *TaskRunLogEntry_CommandExecute_CommandResponse) Equal(y *TaskRunLogEntry_CommandExecute_CommandResponse) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if p, q := x.LogTime, y.LogTime; (p == nil && q != nil) || (p != nil && (q == nil || p.Seconds != q.Seconds || p.Nanos != q.Nanos)) {
		return false
	}
	if x.Error != y.Error {
		return false
	}
	if x.AffectedRows != y.AffectedRows {
		return false
	}
	if len(x.AllAffectedRows) != len(y.AllAffectedRows) {
		return false
	}
	for i := 0; i < len(x.AllAffectedRows); i++ {
		if x.AllAffectedRows[i] != y.AllAffectedRows[i] {
			return false
		}
	}
	return true
}

func (x *TaskRunLogEntry_CommandExecute) Equal(y *TaskRunLogEntry_CommandExecute) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if p, q := x.LogTime, y.LogTime; (p == nil && q != nil) || (p != nil && (q == nil || p.Seconds != q.Seconds || p.Nanos != q.Nanos)) {
		return false
	}
	if len(x.CommandIndexes) != len(y.CommandIndexes) {
		return false
	}
	for i := 0; i < len(x.CommandIndexes); i++ {
		if x.CommandIndexes[i] != y.CommandIndexes[i] {
			return false
		}
	}
	if x.Statement != y.Statement {
		return false
	}
	if !x.Response.Equal(y.Response) {
		return false
	}
	return true
}

func (x *TaskRunLogEntry_DatabaseSync) Equal(y *TaskRunLogEntry_DatabaseSync) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if p, q := x.StartTime, y.StartTime; (p == nil && q != nil) || (p != nil && (q == nil || p.Seconds != q.Seconds || p.Nanos != q.Nanos)) {
		return false
	}
	if p, q := x.EndTime, y.EndTime; (p == nil && q != nil) || (p != nil && (q == nil || p.Seconds != q.Seconds || p.Nanos != q.Nanos)) {
		return false
	}
	if x.Error != y.Error {
		return false
	}
	return true
}

func (x *TaskRunLogEntry_TaskRunStatusUpdate) Equal(y *TaskRunLogEntry_TaskRunStatusUpdate) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Status != y.Status {
		return false
	}
	return true
}

func (x *TaskRunLogEntry_TransactionControl) Equal(y *TaskRunLogEntry_TransactionControl) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Type != y.Type {
		return false
	}
	if x.Error != y.Error {
		return false
	}
	return true
}

func (x *TaskRunLogEntry_PriorBackup) Equal(y *TaskRunLogEntry_PriorBackup) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if p, q := x.StartTime, y.StartTime; (p == nil && q != nil) || (p != nil && (q == nil || p.Seconds != q.Seconds || p.Nanos != q.Nanos)) {
		return false
	}
	if p, q := x.EndTime, y.EndTime; (p == nil && q != nil) || (p != nil && (q == nil || p.Seconds != q.Seconds || p.Nanos != q.Nanos)) {
		return false
	}
	if !x.PriorBackupDetail.Equal(y.PriorBackupDetail) {
		return false
	}
	if x.Error != y.Error {
		return false
	}
	return true
}

func (x *TaskRunLogEntry_RetryInfo) Equal(y *TaskRunLogEntry_RetryInfo) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Error != y.Error {
		return false
	}
	if x.RetryCount != y.RetryCount {
		return false
	}
	if x.MaximumRetries != y.MaximumRetries {
		return false
	}
	return true
}

func (x *TaskRunLogEntry_ComputeDiff) Equal(y *TaskRunLogEntry_ComputeDiff) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if p, q := x.StartTime, y.StartTime; (p == nil && q != nil) || (p != nil && (q == nil || p.Seconds != q.Seconds || p.Nanos != q.Nanos)) {
		return false
	}
	if p, q := x.EndTime, y.EndTime; (p == nil && q != nil) || (p != nil && (q == nil || p.Seconds != q.Seconds || p.Nanos != q.Nanos)) {
		return false
	}
	if x.Error != y.Error {
		return false
	}
	return true
}

func (x *TaskRunLogEntry) Equal(y *TaskRunLogEntry) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Type != y.Type {
		return false
	}
	if p, q := x.LogTime, y.LogTime; (p == nil && q != nil) || (p != nil && (q == nil || p.Seconds != q.Seconds || p.Nanos != q.Nanos)) {
		return false
	}
	if x.DeployId != y.DeployId {
		return false
	}
	if !x.SchemaDump.Equal(y.SchemaDump) {
		return false
	}
	if !x.CommandExecute.Equal(y.CommandExecute) {
		return false
	}
	if !x.DatabaseSync.Equal(y.DatabaseSync) {
		return false
	}
	if !x.TaskRunStatusUpdate.Equal(y.TaskRunStatusUpdate) {
		return false
	}
	if !x.TransactionControl.Equal(y.TransactionControl) {
		return false
	}
	if !x.PriorBackup.Equal(y.PriorBackup) {
		return false
	}
	if !x.RetryInfo.Equal(y.RetryInfo) {
		return false
	}
	if !x.ComputeDiff.Equal(y.ComputeDiff) {
		return false
	}
	return true
}

func (x *GetTaskRunSessionRequest) Equal(y *GetTaskRunSessionRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Parent != y.Parent {
		return false
	}
	return true
}

func (x *TaskRunSession_Postgres_Session) Equal(y *TaskRunSession_Postgres_Session) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Pid != y.Pid {
		return false
	}
	if len(x.BlockedByPids) != len(y.BlockedByPids) {
		return false
	}
	for i := 0; i < len(x.BlockedByPids); i++ {
		if x.BlockedByPids[i] != y.BlockedByPids[i] {
			return false
		}
	}
	if x.Query != y.Query {
		return false
	}
	if p, q := x.State, y.State; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	if p, q := x.WaitEventType, y.WaitEventType; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	if p, q := x.WaitEvent, y.WaitEvent; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	if p, q := x.Datname, y.Datname; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	if p, q := x.Usename, y.Usename; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	if x.ApplicationName != y.ApplicationName {
		return false
	}
	if p, q := x.ClientAddr, y.ClientAddr; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	if p, q := x.ClientPort, y.ClientPort; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	if p, q := x.BackendStart, y.BackendStart; (p == nil && q != nil) || (p != nil && (q == nil || p.Seconds != q.Seconds || p.Nanos != q.Nanos)) {
		return false
	}
	if p, q := x.XactStart, y.XactStart; (p == nil && q != nil) || (p != nil && (q == nil || p.Seconds != q.Seconds || p.Nanos != q.Nanos)) {
		return false
	}
	if p, q := x.QueryStart, y.QueryStart; (p == nil && q != nil) || (p != nil && (q == nil || p.Seconds != q.Seconds || p.Nanos != q.Nanos)) {
		return false
	}
	return true
}

func (x *TaskRunSession_Postgres) Equal(y *TaskRunSession_Postgres) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if !x.Session.Equal(y.Session) {
		return false
	}
	if len(x.BlockingSessions) != len(y.BlockingSessions) {
		return false
	}
	for i := 0; i < len(x.BlockingSessions); i++ {
		if !x.BlockingSessions[i].Equal(y.BlockingSessions[i]) {
			return false
		}
	}
	if len(x.BlockedSessions) != len(y.BlockedSessions) {
		return false
	}
	for i := 0; i < len(x.BlockedSessions); i++ {
		if !x.BlockedSessions[i].Equal(y.BlockedSessions[i]) {
			return false
		}
	}
	return true
}

func (x *TaskRunSession) Equal(y *TaskRunSession) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	if !x.GetPostgres().Equal(y.GetPostgres()) {
		return false
	}
	return true
}

func (x *PreviewTaskRunRollbackRequest) Equal(y *PreviewTaskRunRollbackRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	return true
}

func (x *PreviewTaskRunRollbackResponse) Equal(y *PreviewTaskRunRollbackResponse) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Statement != y.Statement {
		return false
	}
	return true
}
