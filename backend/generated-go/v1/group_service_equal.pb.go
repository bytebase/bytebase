// Code generated by protoc-gen-equal-go. DO NOT EDIT.
// source: v1/group_service.proto

package v1

import (
	proto "google.golang.org/protobuf/proto"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
)

func (x *GetGroupRequest) Equal(y *GetGroupRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	return true
}

func (x *BatchGetGroupsRequest) Equal(y *BatchGetGroupsRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if len(x.Names) != len(y.Names) {
		return false
	}
	for i := 0; i < len(x.Names); i++ {
		if x.Names[i] != y.Names[i] {
			return false
		}
	}
	return true
}

func (x *BatchGetGroupsResponse) Equal(y *BatchGetGroupsResponse) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if len(x.Groups) != len(y.Groups) {
		return false
	}
	for i := 0; i < len(x.Groups); i++ {
		if !x.Groups[i].Equal(y.Groups[i]) {
			return false
		}
	}
	return true
}

func (x *ListGroupsRequest) Equal(y *ListGroupsRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.PageSize != y.PageSize {
		return false
	}
	if x.PageToken != y.PageToken {
		return false
	}
	if x.Filter != y.Filter {
		return false
	}
	return true
}

func (x *ListGroupsResponse) Equal(y *ListGroupsResponse) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if len(x.Groups) != len(y.Groups) {
		return false
	}
	for i := 0; i < len(x.Groups); i++ {
		if !x.Groups[i].Equal(y.Groups[i]) {
			return false
		}
	}
	if x.NextPageToken != y.NextPageToken {
		return false
	}
	return true
}

func (x *CreateGroupRequest) Equal(y *CreateGroupRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if !x.Group.Equal(y.Group) {
		return false
	}
	if x.GroupEmail != y.GroupEmail {
		return false
	}
	return true
}

func (x *UpdateGroupRequest) Equal(y *UpdateGroupRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if !x.Group.Equal(y.Group) {
		return false
	}
	if equal, ok := interface{}(x.UpdateMask).(interface {
		Equal(*fieldmaskpb.FieldMask) bool
	}); !ok || !equal.Equal(y.UpdateMask) {
		return false
	} else if !proto.Equal(x.UpdateMask, y.UpdateMask) {
		return false
	}
	if x.AllowMissing != y.AllowMissing {
		return false
	}
	return true
}

func (x *DeleteGroupRequest) Equal(y *DeleteGroupRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	return true
}

func (x *GroupMember) Equal(y *GroupMember) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Member != y.Member {
		return false
	}
	if x.Role != y.Role {
		return false
	}
	return true
}

func (x *Group) Equal(y *Group) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	if x.Title != y.Title {
		return false
	}
	if x.Description != y.Description {
		return false
	}
	if len(x.Members) != len(y.Members) {
		return false
	}
	for i := 0; i < len(x.Members); i++ {
		if !x.Members[i].Equal(y.Members[i]) {
			return false
		}
	}
	if x.Source != y.Source {
		return false
	}
	return true
}
