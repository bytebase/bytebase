// Code generated by protoc-gen-equal-go. DO NOT EDIT.
// source: v1/actuator_service.proto

package v1

import (
	proto "google.golang.org/protobuf/proto"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
)

func (x *GetResourcePackageRequest) Equal(y *GetResourcePackageRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	return true
}

func (x *ResourcePackage) Equal(y *ResourcePackage) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if string(x.Logo) != string(y.Logo) {
		return false
	}
	return true
}

func (x *SetupSampleRequest) Equal(y *SetupSampleRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	return true
}

func (x *GetActuatorInfoRequest) Equal(y *GetActuatorInfoRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	return true
}

func (x *UpdateActuatorInfoRequest) Equal(y *UpdateActuatorInfoRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if !x.Actuator.Equal(y.Actuator) {
		return false
	}
	if equal, ok := interface{}(x.UpdateMask).(interface {
		Equal(*fieldmaskpb.FieldMask) bool
	}); !ok || !equal.Equal(y.UpdateMask) {
		return false
	} else if !proto.Equal(x.UpdateMask, y.UpdateMask) {
		return false
	}
	if x.AllowMissing != y.AllowMissing {
		return false
	}
	return true
}

func (x *DeleteCacheRequest) Equal(y *DeleteCacheRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	return true
}

func (x *ActuatorInfo_StatUser) Equal(y *ActuatorInfo_StatUser) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.UserType != y.UserType {
		return false
	}
	if x.State != y.State {
		return false
	}
	if x.Count != y.Count {
		return false
	}
	return true
}

func (x *ActuatorInfo) Equal(y *ActuatorInfo) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Version != y.Version {
		return false
	}
	if x.GitCommit != y.GitCommit {
		return false
	}
	if x.Readonly != y.Readonly {
		return false
	}
	if x.Saas != y.Saas {
		return false
	}
	if x.Demo != y.Demo {
		return false
	}
	if x.Host != y.Host {
		return false
	}
	if x.Port != y.Port {
		return false
	}
	if x.ExternalUrl != y.ExternalUrl {
		return false
	}
	if x.NeedAdminSetup != y.NeedAdminSetup {
		return false
	}
	if x.DisallowSignup != y.DisallowSignup {
		return false
	}
	if p, q := x.LastActiveTime, y.LastActiveTime; (p == nil && q != nil) || (p != nil && (q == nil || p.Seconds != q.Seconds || p.Nanos != q.Nanos)) {
		return false
	}
	if x.Require_2Fa != y.Require_2Fa {
		return false
	}
	if x.WorkspaceId != y.WorkspaceId {
		return false
	}
	if x.Debug != y.Debug {
		return false
	}
	if len(x.UnlicensedFeatures) != len(y.UnlicensedFeatures) {
		return false
	}
	for i := 0; i < len(x.UnlicensedFeatures); i++ {
		if x.UnlicensedFeatures[i] != y.UnlicensedFeatures[i] {
			return false
		}
	}
	if x.DisallowPasswordSignin != y.DisallowPasswordSignin {
		return false
	}
	if !x.PasswordRestriction.Equal(y.PasswordRestriction) {
		return false
	}
	if x.Docker != y.Docker {
		return false
	}
	if len(x.UserStats) != len(y.UserStats) {
		return false
	}
	for i := 0; i < len(x.UserStats); i++ {
		if !x.UserStats[i].Equal(y.UserStats[i]) {
			return false
		}
	}
	if x.ActivatedInstanceCount != y.ActivatedInstanceCount {
		return false
	}
	if x.TotalInstanceCount != y.TotalInstanceCount {
		return false
	}
	if x.EnableSample != y.EnableSample {
		return false
	}
	return true
}
