// Code generated by protoc-gen-equal-go. DO NOT EDIT.
// source: v1/database_group_service.proto

package v1

import (
	expr "google.golang.org/genproto/googleapis/type/expr"
	proto "google.golang.org/protobuf/proto"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
)

func (x *ListDatabaseGroupsRequest) Equal(y *ListDatabaseGroupsRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Parent != y.Parent {
		return false
	}
	if x.View != y.View {
		return false
	}
	return true
}

func (x *ListDatabaseGroupsResponse) Equal(y *ListDatabaseGroupsResponse) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if len(x.DatabaseGroups) != len(y.DatabaseGroups) {
		return false
	}
	for i := 0; i < len(x.DatabaseGroups); i++ {
		if !x.DatabaseGroups[i].Equal(y.DatabaseGroups[i]) {
			return false
		}
	}
	return true
}

func (x *GetDatabaseGroupRequest) Equal(y *GetDatabaseGroupRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	if x.View != y.View {
		return false
	}
	return true
}

func (x *CreateDatabaseGroupRequest) Equal(y *CreateDatabaseGroupRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Parent != y.Parent {
		return false
	}
	if !x.DatabaseGroup.Equal(y.DatabaseGroup) {
		return false
	}
	if x.DatabaseGroupId != y.DatabaseGroupId {
		return false
	}
	if x.ValidateOnly != y.ValidateOnly {
		return false
	}
	return true
}

func (x *UpdateDatabaseGroupRequest) Equal(y *UpdateDatabaseGroupRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if !x.DatabaseGroup.Equal(y.DatabaseGroup) {
		return false
	}
	if equal, ok := interface{}(x.UpdateMask).(interface {
		Equal(*fieldmaskpb.FieldMask) bool
	}); !ok || !equal.Equal(y.UpdateMask) {
		return false
	} else if !proto.Equal(x.UpdateMask, y.UpdateMask) {
		return false
	}
	if x.AllowMissing != y.AllowMissing {
		return false
	}
	return true
}

func (x *DeleteDatabaseGroupRequest) Equal(y *DeleteDatabaseGroupRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	return true
}

func (x *DatabaseGroup_Database) Equal(y *DatabaseGroup_Database) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	return true
}

func (x *DatabaseGroup) Equal(y *DatabaseGroup) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	if x.Title != y.Title {
		return false
	}
	if equal, ok := interface{}(x.DatabaseExpr).(interface{ Equal(*expr.Expr) bool }); !ok || !equal.Equal(y.DatabaseExpr) {
		return false
	} else if !proto.Equal(x.DatabaseExpr, y.DatabaseExpr) {
		return false
	}
	if len(x.MatchedDatabases) != len(y.MatchedDatabases) {
		return false
	}
	for i := 0; i < len(x.MatchedDatabases); i++ {
		if !x.MatchedDatabases[i].Equal(y.MatchedDatabases[i]) {
			return false
		}
	}
	return true
}
