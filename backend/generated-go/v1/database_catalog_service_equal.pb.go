// Code generated by protoc-gen-equal-go. DO NOT EDIT.
// source: v1/database_catalog_service.proto

package v1

func (x *GetDatabaseCatalogRequest) Equal(y *GetDatabaseCatalogRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	return true
}

func (x *UpdateDatabaseCatalogRequest) Equal(y *UpdateDatabaseCatalogRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if !x.Catalog.Equal(y.Catalog) {
		return false
	}
	if x.AllowMissing != y.AllowMissing {
		return false
	}
	return true
}

func (x *DatabaseCatalog) Equal(y *DatabaseCatalog) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	if len(x.Schemas) != len(y.Schemas) {
		return false
	}
	for i := 0; i < len(x.Schemas); i++ {
		if !x.Schemas[i].Equal(y.Schemas[i]) {
			return false
		}
	}
	return true
}

func (x *SchemaCatalog) Equal(y *SchemaCatalog) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	if len(x.Tables) != len(y.Tables) {
		return false
	}
	for i := 0; i < len(x.Tables); i++ {
		if !x.Tables[i].Equal(y.Tables[i]) {
			return false
		}
	}
	return true
}

func (x *TableCatalog_Columns) Equal(y *TableCatalog_Columns) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if len(x.Columns) != len(y.Columns) {
		return false
	}
	for i := 0; i < len(x.Columns); i++ {
		if !x.Columns[i].Equal(y.Columns[i]) {
			return false
		}
	}
	return true
}

func (x *TableCatalog) Equal(y *TableCatalog) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	if !x.GetColumns().Equal(y.GetColumns()) {
		return false
	}
	if !x.GetObjectSchema().Equal(y.GetObjectSchema()) {
		return false
	}
	if x.Classification != y.Classification {
		return false
	}
	return true
}

func (x *ColumnCatalog) Equal(y *ColumnCatalog) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	if x.SemanticType != y.SemanticType {
		return false
	}
	if len(x.Labels) != len(y.Labels) {
		return false
	}
	for k := range x.Labels {
		_, ok := y.Labels[k]
		if !ok {
			return false
		}
		if x.Labels[k] != y.Labels[k] {
			return false
		}
	}
	if x.Classification != y.Classification {
		return false
	}
	if !x.ObjectSchema.Equal(y.ObjectSchema) {
		return false
	}
	return true
}

func (x *ObjectSchema_StructKind) Equal(y *ObjectSchema_StructKind) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if len(x.Properties) != len(y.Properties) {
		return false
	}
	for k := range x.Properties {
		_, ok := y.Properties[k]
		if !ok {
			return false
		}
		if !x.Properties[k].Equal(y.Properties[k]) {
			return false
		}
	}
	return true
}

func (x *ObjectSchema_ArrayKind) Equal(y *ObjectSchema_ArrayKind) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if !x.Kind.Equal(y.Kind) {
		return false
	}
	return true
}

func (x *ObjectSchema) Equal(y *ObjectSchema) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Type != y.Type {
		return false
	}
	if !x.GetStructKind().Equal(y.GetStructKind()) {
		return false
	}
	if !x.GetArrayKind().Equal(y.GetArrayKind()) {
		return false
	}
	if x.SemanticType != y.SemanticType {
		return false
	}
	return true
}
