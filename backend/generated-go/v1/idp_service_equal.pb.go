// Code generated by protoc-gen-equal-go. DO NOT EDIT.
// source: v1/idp_service.proto

package v1

import (
	proto "google.golang.org/protobuf/proto"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
)

func (x *GetIdentityProviderRequest) Equal(y *GetIdentityProviderRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	return true
}

func (x *ListIdentityProvidersRequest) Equal(y *ListIdentityProvidersRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.PageSize != y.PageSize {
		return false
	}
	if x.PageToken != y.PageToken {
		return false
	}
	return true
}

func (x *ListIdentityProvidersResponse) Equal(y *ListIdentityProvidersResponse) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if len(x.IdentityProviders) != len(y.IdentityProviders) {
		return false
	}
	for i := 0; i < len(x.IdentityProviders); i++ {
		if !x.IdentityProviders[i].Equal(y.IdentityProviders[i]) {
			return false
		}
	}
	if x.NextPageToken != y.NextPageToken {
		return false
	}
	return true
}

func (x *CreateIdentityProviderRequest) Equal(y *CreateIdentityProviderRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if !x.IdentityProvider.Equal(y.IdentityProvider) {
		return false
	}
	if x.IdentityProviderId != y.IdentityProviderId {
		return false
	}
	if x.ValidateOnly != y.ValidateOnly {
		return false
	}
	return true
}

func (x *UpdateIdentityProviderRequest) Equal(y *UpdateIdentityProviderRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if !x.IdentityProvider.Equal(y.IdentityProvider) {
		return false
	}
	if equal, ok := interface{}(x.UpdateMask).(interface {
		Equal(*fieldmaskpb.FieldMask) bool
	}); !ok || !equal.Equal(y.UpdateMask) {
		return false
	} else if !proto.Equal(x.UpdateMask, y.UpdateMask) {
		return false
	}
	if x.AllowMissing != y.AllowMissing {
		return false
	}
	return true
}

func (x *DeleteIdentityProviderRequest) Equal(y *DeleteIdentityProviderRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	return true
}

func (x *TestIdentityProviderRequest) Equal(y *TestIdentityProviderRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if !x.IdentityProvider.Equal(y.IdentityProvider) {
		return false
	}
	if !x.GetOauth2Context().Equal(y.GetOauth2Context()) {
		return false
	}
	return true
}

func (x *OAuth2IdentityProviderTestRequestContext) Equal(y *OAuth2IdentityProviderTestRequestContext) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Code != y.Code {
		return false
	}
	return true
}

func (x *TestIdentityProviderResponse) Equal(y *TestIdentityProviderResponse) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if len(x.Claims) != len(y.Claims) {
		return false
	}
	for k := range x.Claims {
		_, ok := y.Claims[k]
		if !ok {
			return false
		}
		if x.Claims[k] != y.Claims[k] {
			return false
		}
	}
	if len(x.UserInfo) != len(y.UserInfo) {
		return false
	}
	for k := range x.UserInfo {
		_, ok := y.UserInfo[k]
		if !ok {
			return false
		}
		if x.UserInfo[k] != y.UserInfo[k] {
			return false
		}
	}
	return true
}

func (x *IdentityProvider) Equal(y *IdentityProvider) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	if x.Title != y.Title {
		return false
	}
	if x.Domain != y.Domain {
		return false
	}
	if x.Type != y.Type {
		return false
	}
	if !x.Config.Equal(y.Config) {
		return false
	}
	return true
}

func (x *IdentityProviderConfig) Equal(y *IdentityProviderConfig) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if !x.GetOauth2Config().Equal(y.GetOauth2Config()) {
		return false
	}
	if !x.GetOidcConfig().Equal(y.GetOidcConfig()) {
		return false
	}
	if !x.GetLdapConfig().Equal(y.GetLdapConfig()) {
		return false
	}
	return true
}

func (x *OAuth2IdentityProviderConfig) Equal(y *OAuth2IdentityProviderConfig) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.AuthUrl != y.AuthUrl {
		return false
	}
	if x.TokenUrl != y.TokenUrl {
		return false
	}
	if x.UserInfoUrl != y.UserInfoUrl {
		return false
	}
	if x.ClientId != y.ClientId {
		return false
	}
	if x.ClientSecret != y.ClientSecret {
		return false
	}
	if len(x.Scopes) != len(y.Scopes) {
		return false
	}
	for i := 0; i < len(x.Scopes); i++ {
		if x.Scopes[i] != y.Scopes[i] {
			return false
		}
	}
	if !x.FieldMapping.Equal(y.FieldMapping) {
		return false
	}
	if x.SkipTlsVerify != y.SkipTlsVerify {
		return false
	}
	if x.AuthStyle != y.AuthStyle {
		return false
	}
	return true
}

func (x *OIDCIdentityProviderConfig) Equal(y *OIDCIdentityProviderConfig) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Issuer != y.Issuer {
		return false
	}
	if x.ClientId != y.ClientId {
		return false
	}
	if x.ClientSecret != y.ClientSecret {
		return false
	}
	if len(x.Scopes) != len(y.Scopes) {
		return false
	}
	for i := 0; i < len(x.Scopes); i++ {
		if x.Scopes[i] != y.Scopes[i] {
			return false
		}
	}
	if !x.FieldMapping.Equal(y.FieldMapping) {
		return false
	}
	if x.SkipTlsVerify != y.SkipTlsVerify {
		return false
	}
	if x.AuthStyle != y.AuthStyle {
		return false
	}
	if x.AuthEndpoint != y.AuthEndpoint {
		return false
	}
	return true
}

func (x *LDAPIdentityProviderConfig) Equal(y *LDAPIdentityProviderConfig) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Host != y.Host {
		return false
	}
	if x.Port != y.Port {
		return false
	}
	if x.SkipTlsVerify != y.SkipTlsVerify {
		return false
	}
	if x.BindDn != y.BindDn {
		return false
	}
	if x.BindPassword != y.BindPassword {
		return false
	}
	if x.BaseDn != y.BaseDn {
		return false
	}
	if x.UserFilter != y.UserFilter {
		return false
	}
	if x.SecurityProtocol != y.SecurityProtocol {
		return false
	}
	if !x.FieldMapping.Equal(y.FieldMapping) {
		return false
	}
	return true
}

func (x *FieldMapping) Equal(y *FieldMapping) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Identifier != y.Identifier {
		return false
	}
	if x.DisplayName != y.DisplayName {
		return false
	}
	if x.Phone != y.Phone {
		return false
	}
	if x.Groups != y.Groups {
		return false
	}
	return true
}
