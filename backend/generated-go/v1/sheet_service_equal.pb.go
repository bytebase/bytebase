// Code generated by protoc-gen-equal-go. DO NOT EDIT.
// source: v1/sheet_service.proto

package v1

import (
	proto "google.golang.org/protobuf/proto"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
)

func (x *CreateSheetRequest) Equal(y *CreateSheetRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Parent != y.Parent {
		return false
	}
	if !x.Sheet.Equal(y.Sheet) {
		return false
	}
	return true
}

func (x *BatchCreateSheetsRequest) Equal(y *BatchCreateSheetsRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Parent != y.Parent {
		return false
	}
	if len(x.Requests) != len(y.Requests) {
		return false
	}
	for i := 0; i < len(x.Requests); i++ {
		if !x.Requests[i].Equal(y.Requests[i]) {
			return false
		}
	}
	return true
}

func (x *BatchCreateSheetsResponse) Equal(y *BatchCreateSheetsResponse) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if len(x.Sheets) != len(y.Sheets) {
		return false
	}
	for i := 0; i < len(x.Sheets); i++ {
		if !x.Sheets[i].Equal(y.Sheets[i]) {
			return false
		}
	}
	return true
}

func (x *GetSheetRequest) Equal(y *GetSheetRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	if x.Raw != y.Raw {
		return false
	}
	return true
}

func (x *UpdateSheetRequest) Equal(y *UpdateSheetRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if !x.Sheet.Equal(y.Sheet) {
		return false
	}
	if equal, ok := interface{}(x.UpdateMask).(interface {
		Equal(*fieldmaskpb.FieldMask) bool
	}); !ok || !equal.Equal(y.UpdateMask) {
		return false
	} else if !proto.Equal(x.UpdateMask, y.UpdateMask) {
		return false
	}
	if x.AllowMissing != y.AllowMissing {
		return false
	}
	return true
}

func (x *Sheet) Equal(y *Sheet) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	if x.Title != y.Title {
		return false
	}
	if x.Creator != y.Creator {
		return false
	}
	if p, q := x.CreateTime, y.CreateTime; (p == nil && q != nil) || (p != nil && (q == nil || p.Seconds != q.Seconds || p.Nanos != q.Nanos)) {
		return false
	}
	if string(x.Content) != string(y.Content) {
		return false
	}
	if x.ContentSize != y.ContentSize {
		return false
	}
	if !x.Payload.Equal(y.Payload) {
		return false
	}
	if x.Engine != y.Engine {
		return false
	}
	return true
}

func (x *SheetPayload) Equal(y *SheetPayload) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Type != y.Type {
		return false
	}
	if len(x.Commands) != len(y.Commands) {
		return false
	}
	for i := 0; i < len(x.Commands); i++ {
		if !x.Commands[i].Equal(y.Commands[i]) {
			return false
		}
	}
	return true
}

func (x *SheetCommand) Equal(y *SheetCommand) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Start != y.Start {
		return false
	}
	if x.End != y.End {
		return false
	}
	return true
}
