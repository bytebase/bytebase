// Code generated by protoc-gen-equal-go. DO NOT EDIT.
// source: v1/cel_service.proto

package v1

import (
	v1alpha1 "google.golang.org/genproto/googleapis/api/expr/v1alpha1"
	proto "google.golang.org/protobuf/proto"
)

func (x *BatchParseRequest) Equal(y *BatchParseRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if len(x.Expressions) != len(y.Expressions) {
		return false
	}
	for i := 0; i < len(x.Expressions); i++ {
		if x.Expressions[i] != y.Expressions[i] {
			return false
		}
	}
	return true
}

func (x *BatchParseResponse) Equal(y *BatchParseResponse) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if len(x.Expressions) != len(y.Expressions) {
		return false
	}
	for i := 0; i < len(x.Expressions); i++ {
		if equal, ok := interface{}(x.Expressions[i]).(interface{ Equal(*v1alpha1.Expr) bool }); !ok || !equal.Equal(y.Expressions[i]) {
			return false
		} else if !proto.Equal(x.Expressions[i], y.Expressions[i]) {
			return false
		}
	}
	return true
}

func (x *BatchDeparseRequest) Equal(y *BatchDeparseRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if len(x.Expressions) != len(y.Expressions) {
		return false
	}
	for i := 0; i < len(x.Expressions); i++ {
		if equal, ok := interface{}(x.Expressions[i]).(interface{ Equal(*v1alpha1.Expr) bool }); !ok || !equal.Equal(y.Expressions[i]) {
			return false
		} else if !proto.Equal(x.Expressions[i], y.Expressions[i]) {
			return false
		}
	}
	return true
}

func (x *BatchDeparseResponse) Equal(y *BatchDeparseResponse) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if len(x.Expressions) != len(y.Expressions) {
		return false
	}
	for i := 0; i < len(x.Expressions); i++ {
		if x.Expressions[i] != y.Expressions[i] {
			return false
		}
	}
	return true
}
