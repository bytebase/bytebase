// Code generated by protoc-gen-equal-go. DO NOT EDIT.
// source: v1/worksheet_service.proto

package v1

import (
	proto "google.golang.org/protobuf/proto"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
)

func (x *CreateWorksheetRequest) Equal(y *CreateWorksheetRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if !x.Worksheet.Equal(y.Worksheet) {
		return false
	}
	return true
}

func (x *GetWorksheetRequest) Equal(y *GetWorksheetRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	return true
}

func (x *UpdateWorksheetRequest) Equal(y *UpdateWorksheetRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if !x.Worksheet.Equal(y.Worksheet) {
		return false
	}
	if equal, ok := interface{}(x.UpdateMask).(interface {
		Equal(*fieldmaskpb.FieldMask) bool
	}); !ok || !equal.Equal(y.UpdateMask) {
		return false
	} else if !proto.Equal(x.UpdateMask, y.UpdateMask) {
		return false
	}
	return true
}

func (x *UpdateWorksheetOrganizerRequest) Equal(y *UpdateWorksheetOrganizerRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if !x.Organizer.Equal(y.Organizer) {
		return false
	}
	if equal, ok := interface{}(x.UpdateMask).(interface {
		Equal(*fieldmaskpb.FieldMask) bool
	}); !ok || !equal.Equal(y.UpdateMask) {
		return false
	} else if !proto.Equal(x.UpdateMask, y.UpdateMask) {
		return false
	}
	if x.AllowMissing != y.AllowMissing {
		return false
	}
	return true
}

func (x *WorksheetOrganizer) Equal(y *WorksheetOrganizer) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Worksheet != y.Worksheet {
		return false
	}
	if x.Starred != y.Starred {
		return false
	}
	return true
}

func (x *DeleteWorksheetRequest) Equal(y *DeleteWorksheetRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	return true
}

func (x *SearchWorksheetsRequest) Equal(y *SearchWorksheetsRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Filter != y.Filter {
		return false
	}
	return true
}

func (x *SearchWorksheetsResponse) Equal(y *SearchWorksheetsResponse) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if len(x.Worksheets) != len(y.Worksheets) {
		return false
	}
	for i := 0; i < len(x.Worksheets); i++ {
		if !x.Worksheets[i].Equal(y.Worksheets[i]) {
			return false
		}
	}
	return true
}

func (x *Worksheet) Equal(y *Worksheet) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	if x.Project != y.Project {
		return false
	}
	if x.Database != y.Database {
		return false
	}
	if x.Title != y.Title {
		return false
	}
	if x.Creator != y.Creator {
		return false
	}
	if p, q := x.CreateTime, y.CreateTime; (p == nil && q != nil) || (p != nil && (q == nil || p.Seconds != q.Seconds || p.Nanos != q.Nanos)) {
		return false
	}
	if p, q := x.UpdateTime, y.UpdateTime; (p == nil && q != nil) || (p != nil && (q == nil || p.Seconds != q.Seconds || p.Nanos != q.Nanos)) {
		return false
	}
	if string(x.Content) != string(y.Content) {
		return false
	}
	if x.ContentSize != y.ContentSize {
		return false
	}
	if x.Visibility != y.Visibility {
		return false
	}
	if x.Starred != y.Starred {
		return false
	}
	return true
}
