// Code generated by protoc-gen-equal-go. DO NOT EDIT.
// source: v1/risk_service.proto

package v1

import (
	expr "google.golang.org/genproto/googleapis/type/expr"
	proto "google.golang.org/protobuf/proto"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
)

func (x *ListRisksRequest) Equal(y *ListRisksRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.PageSize != y.PageSize {
		return false
	}
	if x.PageToken != y.PageToken {
		return false
	}
	return true
}

func (x *ListRisksResponse) Equal(y *ListRisksResponse) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if len(x.Risks) != len(y.Risks) {
		return false
	}
	for i := 0; i < len(x.Risks); i++ {
		if !x.Risks[i].Equal(y.Risks[i]) {
			return false
		}
	}
	if x.NextPageToken != y.NextPageToken {
		return false
	}
	return true
}

func (x *CreateRiskRequest) Equal(y *CreateRiskRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if !x.Risk.Equal(y.Risk) {
		return false
	}
	return true
}

func (x *GetRiskRequest) Equal(y *GetRiskRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	return true
}

func (x *UpdateRiskRequest) Equal(y *UpdateRiskRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if !x.Risk.Equal(y.Risk) {
		return false
	}
	if equal, ok := interface{}(x.UpdateMask).(interface {
		Equal(*fieldmaskpb.FieldMask) bool
	}); !ok || !equal.Equal(y.UpdateMask) {
		return false
	} else if !proto.Equal(x.UpdateMask, y.UpdateMask) {
		return false
	}
	if x.AllowMissing != y.AllowMissing {
		return false
	}
	return true
}

func (x *DeleteRiskRequest) Equal(y *DeleteRiskRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	return true
}

func (x *Risk) Equal(y *Risk) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	if x.Source != y.Source {
		return false
	}
	if x.Title != y.Title {
		return false
	}
	if x.Level != y.Level {
		return false
	}
	if x.Active != y.Active {
		return false
	}
	if equal, ok := interface{}(x.Condition).(interface{ Equal(*expr.Expr) bool }); !ok || !equal.Equal(y.Condition) {
		return false
	} else if !proto.Equal(x.Condition, y.Condition) {
		return false
	}
	return true
}
