// Code generated by protoc-gen-equal-go. DO NOT EDIT.
// source: v1/issue_service.proto

package v1

import (
	expr "google.golang.org/genproto/googleapis/type/expr"
	proto "google.golang.org/protobuf/proto"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
)

func (x *GetIssueRequest) Equal(y *GetIssueRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	if x.Force != y.Force {
		return false
	}
	return true
}

func (x *CreateIssueRequest) Equal(y *CreateIssueRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Parent != y.Parent {
		return false
	}
	if !x.Issue.Equal(y.Issue) {
		return false
	}
	return true
}

func (x *ListIssuesRequest) Equal(y *ListIssuesRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Parent != y.Parent {
		return false
	}
	if x.PageSize != y.PageSize {
		return false
	}
	if x.PageToken != y.PageToken {
		return false
	}
	if x.Filter != y.Filter {
		return false
	}
	if x.Query != y.Query {
		return false
	}
	return true
}

func (x *ListIssuesResponse) Equal(y *ListIssuesResponse) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if len(x.Issues) != len(y.Issues) {
		return false
	}
	for i := 0; i < len(x.Issues); i++ {
		if !x.Issues[i].Equal(y.Issues[i]) {
			return false
		}
	}
	if x.NextPageToken != y.NextPageToken {
		return false
	}
	return true
}

func (x *SearchIssuesRequest) Equal(y *SearchIssuesRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Parent != y.Parent {
		return false
	}
	if x.PageSize != y.PageSize {
		return false
	}
	if x.PageToken != y.PageToken {
		return false
	}
	if x.Filter != y.Filter {
		return false
	}
	if x.Query != y.Query {
		return false
	}
	return true
}

func (x *SearchIssuesResponse) Equal(y *SearchIssuesResponse) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if len(x.Issues) != len(y.Issues) {
		return false
	}
	for i := 0; i < len(x.Issues); i++ {
		if !x.Issues[i].Equal(y.Issues[i]) {
			return false
		}
	}
	if x.NextPageToken != y.NextPageToken {
		return false
	}
	return true
}

func (x *UpdateIssueRequest) Equal(y *UpdateIssueRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if !x.Issue.Equal(y.Issue) {
		return false
	}
	if equal, ok := interface{}(x.UpdateMask).(interface {
		Equal(*fieldmaskpb.FieldMask) bool
	}); !ok || !equal.Equal(y.UpdateMask) {
		return false
	} else if !proto.Equal(x.UpdateMask, y.UpdateMask) {
		return false
	}
	if x.AllowMissing != y.AllowMissing {
		return false
	}
	return true
}

func (x *BatchUpdateIssuesStatusRequest) Equal(y *BatchUpdateIssuesStatusRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Parent != y.Parent {
		return false
	}
	if len(x.Issues) != len(y.Issues) {
		return false
	}
	for i := 0; i < len(x.Issues); i++ {
		if x.Issues[i] != y.Issues[i] {
			return false
		}
	}
	if x.Status != y.Status {
		return false
	}
	if x.Reason != y.Reason {
		return false
	}
	return true
}

func (x *BatchUpdateIssuesStatusResponse) Equal(y *BatchUpdateIssuesStatusResponse) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	return true
}

func (x *ApproveIssueRequest) Equal(y *ApproveIssueRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	if x.Comment != y.Comment {
		return false
	}
	return true
}

func (x *RejectIssueRequest) Equal(y *RejectIssueRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	if x.Comment != y.Comment {
		return false
	}
	return true
}

func (x *RequestIssueRequest) Equal(y *RequestIssueRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	if x.Comment != y.Comment {
		return false
	}
	return true
}

func (x *Issue_Approver) Equal(y *Issue_Approver) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Status != y.Status {
		return false
	}
	if x.Principal != y.Principal {
		return false
	}
	return true
}

func (x *Issue) Equal(y *Issue) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	if x.Title != y.Title {
		return false
	}
	if x.Description != y.Description {
		return false
	}
	if x.Type != y.Type {
		return false
	}
	if x.Status != y.Status {
		return false
	}
	if len(x.Approvers) != len(y.Approvers) {
		return false
	}
	for i := 0; i < len(x.Approvers); i++ {
		if !x.Approvers[i].Equal(y.Approvers[i]) {
			return false
		}
	}
	if len(x.ApprovalTemplates) != len(y.ApprovalTemplates) {
		return false
	}
	for i := 0; i < len(x.ApprovalTemplates); i++ {
		if !x.ApprovalTemplates[i].Equal(y.ApprovalTemplates[i]) {
			return false
		}
	}
	if x.ApprovalFindingDone != y.ApprovalFindingDone {
		return false
	}
	if x.ApprovalFindingError != y.ApprovalFindingError {
		return false
	}
	if x.Creator != y.Creator {
		return false
	}
	if p, q := x.CreateTime, y.CreateTime; (p == nil && q != nil) || (p != nil && (q == nil || p.Seconds != q.Seconds || p.Nanos != q.Nanos)) {
		return false
	}
	if p, q := x.UpdateTime, y.UpdateTime; (p == nil && q != nil) || (p != nil && (q == nil || p.Seconds != q.Seconds || p.Nanos != q.Nanos)) {
		return false
	}
	if x.Plan != y.Plan {
		return false
	}
	if x.Rollout != y.Rollout {
		return false
	}
	if !x.GrantRequest.Equal(y.GrantRequest) {
		return false
	}
	if len(x.Releasers) != len(y.Releasers) {
		return false
	}
	for i := 0; i < len(x.Releasers); i++ {
		if x.Releasers[i] != y.Releasers[i] {
			return false
		}
	}
	if x.RiskLevel != y.RiskLevel {
		return false
	}
	if len(x.TaskStatusCount) != len(y.TaskStatusCount) {
		return false
	}
	for k := range x.TaskStatusCount {
		_, ok := y.TaskStatusCount[k]
		if !ok {
			return false
		}
		if x.TaskStatusCount[k] != y.TaskStatusCount[k] {
			return false
		}
	}
	if len(x.Labels) != len(y.Labels) {
		return false
	}
	for i := 0; i < len(x.Labels); i++ {
		if x.Labels[i] != y.Labels[i] {
			return false
		}
	}
	return true
}

func (x *GrantRequest) Equal(y *GrantRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Role != y.Role {
		return false
	}
	if x.User != y.User {
		return false
	}
	if equal, ok := interface{}(x.Condition).(interface{ Equal(*expr.Expr) bool }); !ok || !equal.Equal(y.Condition) {
		return false
	} else if !proto.Equal(x.Condition, y.Condition) {
		return false
	}
	if p, q := x.Expiration, y.Expiration; (p == nil && q != nil) || (p != nil && (q == nil || p.Seconds != q.Seconds || p.Nanos != q.Nanos)) {
		return false
	}
	return true
}

func (x *ApprovalTemplate) Equal(y *ApprovalTemplate) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if !x.Flow.Equal(y.Flow) {
		return false
	}
	if x.Title != y.Title {
		return false
	}
	if x.Description != y.Description {
		return false
	}
	return true
}

func (x *ApprovalFlow) Equal(y *ApprovalFlow) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if len(x.Steps) != len(y.Steps) {
		return false
	}
	for i := 0; i < len(x.Steps); i++ {
		if !x.Steps[i].Equal(y.Steps[i]) {
			return false
		}
	}
	return true
}

func (x *ApprovalStep) Equal(y *ApprovalStep) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Type != y.Type {
		return false
	}
	if len(x.Nodes) != len(y.Nodes) {
		return false
	}
	for i := 0; i < len(x.Nodes); i++ {
		if !x.Nodes[i].Equal(y.Nodes[i]) {
			return false
		}
	}
	return true
}

func (x *ApprovalNode) Equal(y *ApprovalNode) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Type != y.Type {
		return false
	}
	if x.Role != y.Role {
		return false
	}
	return true
}

func (x *ListIssueCommentsRequest) Equal(y *ListIssueCommentsRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Parent != y.Parent {
		return false
	}
	if x.PageSize != y.PageSize {
		return false
	}
	if x.PageToken != y.PageToken {
		return false
	}
	return true
}

func (x *ListIssueCommentsResponse) Equal(y *ListIssueCommentsResponse) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if len(x.IssueComments) != len(y.IssueComments) {
		return false
	}
	for i := 0; i < len(x.IssueComments); i++ {
		if !x.IssueComments[i].Equal(y.IssueComments[i]) {
			return false
		}
	}
	if x.NextPageToken != y.NextPageToken {
		return false
	}
	return true
}

func (x *CreateIssueCommentRequest) Equal(y *CreateIssueCommentRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Parent != y.Parent {
		return false
	}
	if !x.IssueComment.Equal(y.IssueComment) {
		return false
	}
	return true
}

func (x *UpdateIssueCommentRequest) Equal(y *UpdateIssueCommentRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Parent != y.Parent {
		return false
	}
	if !x.IssueComment.Equal(y.IssueComment) {
		return false
	}
	if equal, ok := interface{}(x.UpdateMask).(interface {
		Equal(*fieldmaskpb.FieldMask) bool
	}); !ok || !equal.Equal(y.UpdateMask) {
		return false
	} else if !proto.Equal(x.UpdateMask, y.UpdateMask) {
		return false
	}
	if x.AllowMissing != y.AllowMissing {
		return false
	}
	return true
}

func (x *IssueComment_Approval) Equal(y *IssueComment_Approval) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Status != y.Status {
		return false
	}
	return true
}

func (x *IssueComment_IssueUpdate) Equal(y *IssueComment_IssueUpdate) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if p, q := x.FromTitle, y.FromTitle; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	if p, q := x.ToTitle, y.ToTitle; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	if p, q := x.FromDescription, y.FromDescription; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	if p, q := x.ToDescription, y.ToDescription; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	if p, q := x.FromStatus, y.FromStatus; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	if p, q := x.ToStatus, y.ToStatus; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	if len(x.FromLabels) != len(y.FromLabels) {
		return false
	}
	for i := 0; i < len(x.FromLabels); i++ {
		if x.FromLabels[i] != y.FromLabels[i] {
			return false
		}
	}
	if len(x.ToLabels) != len(y.ToLabels) {
		return false
	}
	for i := 0; i < len(x.ToLabels); i++ {
		if x.ToLabels[i] != y.ToLabels[i] {
			return false
		}
	}
	return true
}

func (x *IssueComment_StageEnd) Equal(y *IssueComment_StageEnd) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Stage != y.Stage {
		return false
	}
	return true
}

func (x *IssueComment_TaskUpdate) Equal(y *IssueComment_TaskUpdate) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if len(x.Tasks) != len(y.Tasks) {
		return false
	}
	for i := 0; i < len(x.Tasks); i++ {
		if x.Tasks[i] != y.Tasks[i] {
			return false
		}
	}
	if p, q := x.FromSheet, y.FromSheet; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	if p, q := x.ToSheet, y.ToSheet; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	if p, q := x.ToStatus, y.ToStatus; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	return true
}

func (x *IssueComment_TaskPriorBackup_Table) Equal(y *IssueComment_TaskPriorBackup_Table) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Schema != y.Schema {
		return false
	}
	if x.Table != y.Table {
		return false
	}
	return true
}

func (x *IssueComment_TaskPriorBackup) Equal(y *IssueComment_TaskPriorBackup) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Task != y.Task {
		return false
	}
	if len(x.Tables) != len(y.Tables) {
		return false
	}
	for i := 0; i < len(x.Tables); i++ {
		if !x.Tables[i].Equal(y.Tables[i]) {
			return false
		}
	}
	if p, q := x.OriginalLine, y.OriginalLine; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	if x.Database != y.Database {
		return false
	}
	if x.Error != y.Error {
		return false
	}
	return true
}

func (x *IssueComment) Equal(y *IssueComment) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	if x.Comment != y.Comment {
		return false
	}
	if x.Payload != y.Payload {
		return false
	}
	if p, q := x.CreateTime, y.CreateTime; (p == nil && q != nil) || (p != nil && (q == nil || p.Seconds != q.Seconds || p.Nanos != q.Nanos)) {
		return false
	}
	if p, q := x.UpdateTime, y.UpdateTime; (p == nil && q != nil) || (p != nil && (q == nil || p.Seconds != q.Seconds || p.Nanos != q.Nanos)) {
		return false
	}
	if x.Creator != y.Creator {
		return false
	}
	if !x.GetApproval().Equal(y.GetApproval()) {
		return false
	}
	if !x.GetIssueUpdate().Equal(y.GetIssueUpdate()) {
		return false
	}
	if !x.GetStageEnd().Equal(y.GetStageEnd()) {
		return false
	}
	if !x.GetTaskUpdate().Equal(y.GetTaskUpdate()) {
		return false
	}
	if !x.GetTaskPriorBackup().Equal(y.GetTaskPriorBackup()) {
		return false
	}
	return true
}
