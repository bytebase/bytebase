// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        (unknown)
// source: v1/common.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Resource lifecycle state.
type State int32

const (
	State_STATE_UNSPECIFIED State = 0
	// Resource is active and operational.
	State_ACTIVE State = 1
	// Resource is soft-deleted but may be recoverable.
	State_DELETED State = 2
)

// Enum value maps for State.
var (
	State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "ACTIVE",
		2: "DELETED",
	}
	State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"ACTIVE":            1,
		"DELETED":           2,
	}
)

func (x State) Enum() *State {
	p := new(State)
	*p = x
	return p
}

func (x State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (State) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_common_proto_enumTypes[0].Descriptor()
}

func (State) Type() protoreflect.EnumType {
	return &file_v1_common_proto_enumTypes[0]
}

func (x State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use State.Descriptor instead.
func (State) EnumDescriptor() ([]byte, []int) {
	return file_v1_common_proto_rawDescGZIP(), []int{0}
}

// Database engine type.
type Engine int32

const (
	// Unspecified database engine.
	Engine_ENGINE_UNSPECIFIED Engine = 0
	// ClickHouse columnar database.
	Engine_CLICKHOUSE Engine = 1
	// MySQL relational database.
	Engine_MYSQL Engine = 2
	// PostgreSQL relational database.
	Engine_POSTGRES Engine = 3
	// Snowflake cloud data warehouse.
	Engine_SNOWFLAKE Engine = 4
	// SQLite embedded database.
	Engine_SQLITE Engine = 5
	// TiDB distributed SQL database.
	Engine_TIDB Engine = 6
	// MongoDB document database.
	Engine_MONGODB Engine = 7
	// Redis key-value store.
	Engine_REDIS Engine = 8
	// Oracle relational database.
	Engine_ORACLE Engine = 9
	// Google Cloud Spanner distributed database.
	Engine_SPANNER Engine = 10
	// Microsoft SQL Server relational database.
	Engine_MSSQL Engine = 11
	// Amazon Redshift data warehouse.
	Engine_REDSHIFT Engine = 12
	// MariaDB relational database.
	Engine_MARIADB Engine = 13
	// OceanBase distributed database.
	Engine_OCEANBASE Engine = 14
	// StarRocks analytics database.
	Engine_STARROCKS Engine = 18
	// Apache Doris analytics database.
	Engine_DORIS Engine = 19
	// Apache Hive data warehouse.
	Engine_HIVE Engine = 20
	// Elasticsearch search engine.
	Engine_ELASTICSEARCH Engine = 21
	// Google BigQuery data warehouse.
	Engine_BIGQUERY Engine = 22
	// Amazon DynamoDB NoSQL database.
	Engine_DYNAMODB Engine = 23
	// Databricks lakehouse platform.
	Engine_DATABRICKS Engine = 24
	// CockroachDB distributed SQL database.
	Engine_COCKROACHDB Engine = 25
	// Azure Cosmos DB multi-model database.
	Engine_COSMOSDB Engine = 26
	// Trino distributed SQL query engine.
	Engine_TRINO Engine = 27
	// Apache Cassandra NoSQL database.
	Engine_CASSANDRA Engine = 28
)

// Enum value maps for Engine.
var (
	Engine_name = map[int32]string{
		0:  "ENGINE_UNSPECIFIED",
		1:  "CLICKHOUSE",
		2:  "MYSQL",
		3:  "POSTGRES",
		4:  "SNOWFLAKE",
		5:  "SQLITE",
		6:  "TIDB",
		7:  "MONGODB",
		8:  "REDIS",
		9:  "ORACLE",
		10: "SPANNER",
		11: "MSSQL",
		12: "REDSHIFT",
		13: "MARIADB",
		14: "OCEANBASE",
		18: "STARROCKS",
		19: "DORIS",
		20: "HIVE",
		21: "ELASTICSEARCH",
		22: "BIGQUERY",
		23: "DYNAMODB",
		24: "DATABRICKS",
		25: "COCKROACHDB",
		26: "COSMOSDB",
		27: "TRINO",
		28: "CASSANDRA",
	}
	Engine_value = map[string]int32{
		"ENGINE_UNSPECIFIED": 0,
		"CLICKHOUSE":         1,
		"MYSQL":              2,
		"POSTGRES":           3,
		"SNOWFLAKE":          4,
		"SQLITE":             5,
		"TIDB":               6,
		"MONGODB":            7,
		"REDIS":              8,
		"ORACLE":             9,
		"SPANNER":            10,
		"MSSQL":              11,
		"REDSHIFT":           12,
		"MARIADB":            13,
		"OCEANBASE":          14,
		"STARROCKS":          18,
		"DORIS":              19,
		"HIVE":               20,
		"ELASTICSEARCH":      21,
		"BIGQUERY":           22,
		"DYNAMODB":           23,
		"DATABRICKS":         24,
		"COCKROACHDB":        25,
		"COSMOSDB":           26,
		"TRINO":              27,
		"CASSANDRA":          28,
	}
)

func (x Engine) Enum() *Engine {
	p := new(Engine)
	*p = x
	return p
}

func (x Engine) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Engine) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_common_proto_enumTypes[1].Descriptor()
}

func (Engine) Type() protoreflect.EnumType {
	return &file_v1_common_proto_enumTypes[1]
}

func (x Engine) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Engine.Descriptor instead.
func (Engine) EnumDescriptor() ([]byte, []int) {
	return file_v1_common_proto_rawDescGZIP(), []int{1}
}

// Version control system type.
type VCSType int32

const (
	// Unspecified VCS type.
	VCSType_VCS_TYPE_UNSPECIFIED VCSType = 0
	// GitHub version control platform.
	VCSType_GITHUB VCSType = 1
	// GitLab version control platform.
	VCSType_GITLAB VCSType = 2
	// Bitbucket version control platform.
	VCSType_BITBUCKET VCSType = 3
	// Azure DevOps version control platform.
	VCSType_AZURE_DEVOPS VCSType = 4
)

// Enum value maps for VCSType.
var (
	VCSType_name = map[int32]string{
		0: "VCS_TYPE_UNSPECIFIED",
		1: "GITHUB",
		2: "GITLAB",
		3: "BITBUCKET",
		4: "AZURE_DEVOPS",
	}
	VCSType_value = map[string]int32{
		"VCS_TYPE_UNSPECIFIED": 0,
		"GITHUB":               1,
		"GITLAB":               2,
		"BITBUCKET":            3,
		"AZURE_DEVOPS":         4,
	}
)

func (x VCSType) Enum() *VCSType {
	p := new(VCSType)
	*p = x
	return p
}

func (x VCSType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VCSType) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_common_proto_enumTypes[2].Descriptor()
}

func (VCSType) Type() protoreflect.EnumType {
	return &file_v1_common_proto_enumTypes[2]
}

func (x VCSType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VCSType.Descriptor instead.
func (VCSType) EnumDescriptor() ([]byte, []int) {
	return file_v1_common_proto_rawDescGZIP(), []int{2}
}

// Data export format.
type ExportFormat int32

const (
	// Unspecified export format.
	ExportFormat_FORMAT_UNSPECIFIED ExportFormat = 0
	// Comma-separated values format.
	ExportFormat_CSV ExportFormat = 1
	// JavaScript Object Notation format.
	ExportFormat_JSON ExportFormat = 2
	// SQL statements format.
	ExportFormat_SQL ExportFormat = 3
	// Microsoft Excel spreadsheet format.
	ExportFormat_XLSX ExportFormat = 4
)

// Enum value maps for ExportFormat.
var (
	ExportFormat_name = map[int32]string{
		0: "FORMAT_UNSPECIFIED",
		1: "CSV",
		2: "JSON",
		3: "SQL",
		4: "XLSX",
	}
	ExportFormat_value = map[string]int32{
		"FORMAT_UNSPECIFIED": 0,
		"CSV":                1,
		"JSON":               2,
		"SQL":                3,
		"XLSX":               4,
	}
)

func (x ExportFormat) Enum() *ExportFormat {
	p := new(ExportFormat)
	*p = x
	return p
}

func (x ExportFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExportFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_common_proto_enumTypes[3].Descriptor()
}

func (ExportFormat) Type() protoreflect.EnumType {
	return &file_v1_common_proto_enumTypes[3]
}

func (x ExportFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExportFormat.Descriptor instead.
func (ExportFormat) EnumDescriptor() ([]byte, []int) {
	return file_v1_common_proto_rawDescGZIP(), []int{3}
}

// DatabaseChangeType is the database change type.
type DatabaseChangeType int32

const (
	DatabaseChangeType_DATABASE_CHANGE_TYPE_UNSPECIFIED DatabaseChangeType = 0
	// Used for imperative schema migration including CREATE DATABASE.
	DatabaseChangeType_MIGRATE DatabaseChangeType = 2
	// Used for state-based declarative schema migration including CREATE DATABASE.
	DatabaseChangeType_SDL DatabaseChangeType = 3
)

// Enum value maps for DatabaseChangeType.
var (
	DatabaseChangeType_name = map[int32]string{
		0: "DATABASE_CHANGE_TYPE_UNSPECIFIED",
		2: "MIGRATE",
		3: "SDL",
	}
	DatabaseChangeType_value = map[string]int32{
		"DATABASE_CHANGE_TYPE_UNSPECIFIED": 0,
		"MIGRATE":                          2,
		"SDL":                              3,
	}
)

func (x DatabaseChangeType) Enum() *DatabaseChangeType {
	p := new(DatabaseChangeType)
	*p = x
	return p
}

func (x DatabaseChangeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DatabaseChangeType) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_common_proto_enumTypes[4].Descriptor()
}

func (DatabaseChangeType) Type() protoreflect.EnumType {
	return &file_v1_common_proto_enumTypes[4]
}

func (x DatabaseChangeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DatabaseChangeType.Descriptor instead.
func (DatabaseChangeType) EnumDescriptor() ([]byte, []int) {
	return file_v1_common_proto_rawDescGZIP(), []int{4}
}

// MigrationType is the type for imperative schema migration.
type MigrationType int32

const (
	MigrationType_MIGRATION_TYPE_UNSPECIFIED MigrationType = 0
	// Used for DDL changes.
	MigrationType_DDL MigrationType = 1
	// Used for DML changes.
	MigrationType_DML MigrationType = 2
	// Used for DDL changes using gh-ost.
	MigrationType_GHOST MigrationType = 3
)

// Enum value maps for MigrationType.
var (
	MigrationType_name = map[int32]string{
		0: "MIGRATION_TYPE_UNSPECIFIED",
		1: "DDL",
		2: "DML",
		3: "GHOST",
	}
	MigrationType_value = map[string]int32{
		"MIGRATION_TYPE_UNSPECIFIED": 0,
		"DDL":                        1,
		"DML":                        2,
		"GHOST":                      3,
	}
)

func (x MigrationType) Enum() *MigrationType {
	p := new(MigrationType)
	*p = x
	return p
}

func (x MigrationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MigrationType) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_common_proto_enumTypes[5].Descriptor()
}

func (MigrationType) Type() protoreflect.EnumType {
	return &file_v1_common_proto_enumTypes[5]
}

func (x MigrationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MigrationType.Descriptor instead.
func (MigrationType) EnumDescriptor() ([]byte, []int) {
	return file_v1_common_proto_rawDescGZIP(), []int{5}
}

// RiskLevel is the risk level.
type RiskLevel int32

const (
	// Unspecified risk level.
	RiskLevel_RISK_LEVEL_UNSPECIFIED RiskLevel = 0
	// Low risk operation.
	RiskLevel_LOW RiskLevel = 1
	// Moderate risk operation.
	RiskLevel_MODERATE RiskLevel = 2
	// High risk operation.
	RiskLevel_HIGH RiskLevel = 3
)

// Enum value maps for RiskLevel.
var (
	RiskLevel_name = map[int32]string{
		0: "RISK_LEVEL_UNSPECIFIED",
		1: "LOW",
		2: "MODERATE",
		3: "HIGH",
	}
	RiskLevel_value = map[string]int32{
		"RISK_LEVEL_UNSPECIFIED": 0,
		"LOW":                    1,
		"MODERATE":               2,
		"HIGH":                   3,
	}
)

func (x RiskLevel) Enum() *RiskLevel {
	p := new(RiskLevel)
	*p = x
	return p
}

func (x RiskLevel) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RiskLevel) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_common_proto_enumTypes[6].Descriptor()
}

func (RiskLevel) Type() protoreflect.EnumType {
	return &file_v1_common_proto_enumTypes[6]
}

func (x RiskLevel) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RiskLevel.Descriptor instead.
func (RiskLevel) EnumDescriptor() ([]byte, []int) {
	return file_v1_common_proto_rawDescGZIP(), []int{6}
}

// Position in a text expressed as one-based line and one-based column.
// We use 1-based numbering to match the majority of industry standards:
// - Monaco Editor uses 1-based (https://microsoft.github.io/monaco-editor/typedoc/interfaces/IPosition.html)
// - GitHub Actions uses 1-based (https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-error-message)
// - Most text editors display 1-based positions to users
// Note: LSP uses 0-based (https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#position),
// but we follow the canonical user-facing standards.
//
// Handling unknown positions:
// - If the entire position is unknown, leave this field as nil/undefined
// - If only line is known, set line and leave column as 0 (e.g., line=5, column=0)
// - If only column is known (rare), set column and leave line as 0
// Frontends should check for nil/undefined/zero values and handle them appropriately.
type Position struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Line position in a text (one-based).
	// First line of the text is line 1.
	// A value of 0 indicates the line information is unknown.
	Line int32 `protobuf:"varint,1,opt,name=line,proto3" json:"line,omitempty"`
	// Column position in a text (one-based).
	// Column is measured in Unicode code points (characters/runes), not bytes or grapheme clusters.
	// First character of the line is column 1.
	// A value of 0 indicates the column information is unknown.
	//
	// Examples:
	// - "SELECT * FROM t" - column 8 is '*'
	// - "SELECT 你好 FROM t" - column 8 is '你' (even though it's at byte offset 7)
	// - "SELECT 😀 FROM t" - column 8 is '😀' (even though it's 4 bytes in UTF-8)
	Column        int32 `protobuf:"varint,2,opt,name=column,proto3" json:"column,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Position) Reset() {
	*x = Position{}
	mi := &file_v1_common_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_v1_common_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_v1_common_proto_rawDescGZIP(), []int{0}
}

func (x *Position) GetLine() int32 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *Position) GetColumn() int32 {
	if x != nil {
		return x.Column
	}
	return 0
}

// Range of positions in text or sequence.
type Range struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Start position (inclusive).
	Start int32 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	// End position (exclusive).
	End           int32 `protobuf:"varint,2,opt,name=end,proto3" json:"end,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Range) Reset() {
	*x = Range{}
	mi := &file_v1_common_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Range) ProtoMessage() {}

func (x *Range) ProtoReflect() protoreflect.Message {
	mi := &file_v1_common_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Range.ProtoReflect.Descriptor instead.
func (*Range) Descriptor() ([]byte, []int) {
	return file_v1_common_proto_rawDescGZIP(), []int{1}
}

func (x *Range) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *Range) GetEnd() int32 {
	if x != nil {
		return x.End
	}
	return 0
}

var File_v1_common_proto protoreflect.FileDescriptor

const file_v1_common_proto_rawDesc = "" +
	"\n" +
	"\x0fv1/common.proto\x12\vbytebase.v1\"6\n" +
	"\bPosition\x12\x12\n" +
	"\x04line\x18\x01 \x01(\x05R\x04line\x12\x16\n" +
	"\x06column\x18\x02 \x01(\x05R\x06column\"/\n" +
	"\x05Range\x12\x14\n" +
	"\x05start\x18\x01 \x01(\x05R\x05start\x12\x10\n" +
	"\x03end\x18\x02 \x01(\x05R\x03end*7\n" +
	"\x05State\x12\x15\n" +
	"\x11STATE_UNSPECIFIED\x10\x00\x12\n" +
	"\n" +
	"\x06ACTIVE\x10\x01\x12\v\n" +
	"\aDELETED\x10\x02*\xf0\x02\n" +
	"\x06Engine\x12\x16\n" +
	"\x12ENGINE_UNSPECIFIED\x10\x00\x12\x0e\n" +
	"\n" +
	"CLICKHOUSE\x10\x01\x12\t\n" +
	"\x05MYSQL\x10\x02\x12\f\n" +
	"\bPOSTGRES\x10\x03\x12\r\n" +
	"\tSNOWFLAKE\x10\x04\x12\n" +
	"\n" +
	"\x06SQLITE\x10\x05\x12\b\n" +
	"\x04TIDB\x10\x06\x12\v\n" +
	"\aMONGODB\x10\a\x12\t\n" +
	"\x05REDIS\x10\b\x12\n" +
	"\n" +
	"\x06ORACLE\x10\t\x12\v\n" +
	"\aSPANNER\x10\n" +
	"\x12\t\n" +
	"\x05MSSQL\x10\v\x12\f\n" +
	"\bREDSHIFT\x10\f\x12\v\n" +
	"\aMARIADB\x10\r\x12\r\n" +
	"\tOCEANBASE\x10\x0e\x12\r\n" +
	"\tSTARROCKS\x10\x12\x12\t\n" +
	"\x05DORIS\x10\x13\x12\b\n" +
	"\x04HIVE\x10\x14\x12\x11\n" +
	"\rELASTICSEARCH\x10\x15\x12\f\n" +
	"\bBIGQUERY\x10\x16\x12\f\n" +
	"\bDYNAMODB\x10\x17\x12\x0e\n" +
	"\n" +
	"DATABRICKS\x10\x18\x12\x0f\n" +
	"\vCOCKROACHDB\x10\x19\x12\f\n" +
	"\bCOSMOSDB\x10\x1a\x12\t\n" +
	"\x05TRINO\x10\x1b\x12\r\n" +
	"\tCASSANDRA\x10\x1c*\\\n" +
	"\aVCSType\x12\x18\n" +
	"\x14VCS_TYPE_UNSPECIFIED\x10\x00\x12\n" +
	"\n" +
	"\x06GITHUB\x10\x01\x12\n" +
	"\n" +
	"\x06GITLAB\x10\x02\x12\r\n" +
	"\tBITBUCKET\x10\x03\x12\x10\n" +
	"\fAZURE_DEVOPS\x10\x04*L\n" +
	"\fExportFormat\x12\x16\n" +
	"\x12FORMAT_UNSPECIFIED\x10\x00\x12\a\n" +
	"\x03CSV\x10\x01\x12\b\n" +
	"\x04JSON\x10\x02\x12\a\n" +
	"\x03SQL\x10\x03\x12\b\n" +
	"\x04XLSX\x10\x04*P\n" +
	"\x12DatabaseChangeType\x12$\n" +
	" DATABASE_CHANGE_TYPE_UNSPECIFIED\x10\x00\x12\v\n" +
	"\aMIGRATE\x10\x02\x12\a\n" +
	"\x03SDL\x10\x03*L\n" +
	"\rMigrationType\x12\x1e\n" +
	"\x1aMIGRATION_TYPE_UNSPECIFIED\x10\x00\x12\a\n" +
	"\x03DDL\x10\x01\x12\a\n" +
	"\x03DML\x10\x02\x12\t\n" +
	"\x05GHOST\x10\x03*H\n" +
	"\tRiskLevel\x12\x1a\n" +
	"\x16RISK_LEVEL_UNSPECIFIED\x10\x00\x12\a\n" +
	"\x03LOW\x10\x01\x12\f\n" +
	"\bMODERATE\x10\x02\x12\b\n" +
	"\x04HIGH\x10\x03B\xa1\x01\n" +
	"\x0fcom.bytebase.v1B\vCommonProtoP\x01Z4github.com/bytebase/bytebase/backend/generated-go/v1\xa2\x02\x03BXX\xaa\x02\vBytebase.V1\xca\x02\vBytebase\\V1\xe2\x02\x17Bytebase\\V1\\GPBMetadata\xea\x02\fBytebase::V1b\x06proto3"

var (
	file_v1_common_proto_rawDescOnce sync.Once
	file_v1_common_proto_rawDescData []byte
)

func file_v1_common_proto_rawDescGZIP() []byte {
	file_v1_common_proto_rawDescOnce.Do(func() {
		file_v1_common_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_v1_common_proto_rawDesc), len(file_v1_common_proto_rawDesc)))
	})
	return file_v1_common_proto_rawDescData
}

var file_v1_common_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_v1_common_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_v1_common_proto_goTypes = []any{
	(State)(0),              // 0: bytebase.v1.State
	(Engine)(0),             // 1: bytebase.v1.Engine
	(VCSType)(0),            // 2: bytebase.v1.VCSType
	(ExportFormat)(0),       // 3: bytebase.v1.ExportFormat
	(DatabaseChangeType)(0), // 4: bytebase.v1.DatabaseChangeType
	(MigrationType)(0),      // 5: bytebase.v1.MigrationType
	(RiskLevel)(0),          // 6: bytebase.v1.RiskLevel
	(*Position)(nil),        // 7: bytebase.v1.Position
	(*Range)(nil),           // 8: bytebase.v1.Range
}
var file_v1_common_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_v1_common_proto_init() }
func file_v1_common_proto_init() {
	if File_v1_common_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_v1_common_proto_rawDesc), len(file_v1_common_proto_rawDesc)),
			NumEnums:      7,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_v1_common_proto_goTypes,
		DependencyIndexes: file_v1_common_proto_depIdxs,
		EnumInfos:         file_v1_common_proto_enumTypes,
		MessageInfos:      file_v1_common_proto_msgTypes,
	}.Build()
	File_v1_common_proto = out.File
	file_v1_common_proto_goTypes = nil
	file_v1_common_proto_depIdxs = nil
}
