// Code generated by protoc-gen-equal-go. DO NOT EDIT.
// source: v1/iam_policy.proto

package v1

import (
	v1alpha1 "google.golang.org/genproto/googleapis/api/expr/v1alpha1"
	expr "google.golang.org/genproto/googleapis/type/expr"
	proto "google.golang.org/protobuf/proto"
)

func (x *GetIamPolicyRequest) Equal(y *GetIamPolicyRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Resource != y.Resource {
		return false
	}
	return true
}

func (x *SetIamPolicyRequest) Equal(y *SetIamPolicyRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Resource != y.Resource {
		return false
	}
	if !x.Policy.Equal(y.Policy) {
		return false
	}
	if x.Etag != y.Etag {
		return false
	}
	return true
}

func (x *IamPolicy) Equal(y *IamPolicy) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if len(x.Bindings) != len(y.Bindings) {
		return false
	}
	for i := 0; i < len(x.Bindings); i++ {
		if !x.Bindings[i].Equal(y.Bindings[i]) {
			return false
		}
	}
	if x.Etag != y.Etag {
		return false
	}
	return true
}

func (x *Binding) Equal(y *Binding) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Role != y.Role {
		return false
	}
	if len(x.Members) != len(y.Members) {
		return false
	}
	for i := 0; i < len(x.Members); i++ {
		if x.Members[i] != y.Members[i] {
			return false
		}
	}
	if equal, ok := interface{}(x.Condition).(interface{ Equal(*expr.Expr) bool }); !ok || !equal.Equal(y.Condition) {
		return false
	} else if !proto.Equal(x.Condition, y.Condition) {
		return false
	}
	if equal, ok := interface{}(x.ParsedExpr).(interface{ Equal(*v1alpha1.Expr) bool }); !ok || !equal.Equal(y.ParsedExpr) {
		return false
	} else if !proto.Equal(x.ParsedExpr, y.ParsedExpr) {
		return false
	}
	return true
}

func (x *PolicyDelta) Equal(y *PolicyDelta) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if len(x.BindingDeltas) != len(y.BindingDeltas) {
		return false
	}
	for i := 0; i < len(x.BindingDeltas); i++ {
		if !x.BindingDeltas[i].Equal(y.BindingDeltas[i]) {
			return false
		}
	}
	return true
}

func (x *BindingDelta) Equal(y *BindingDelta) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Action != y.Action {
		return false
	}
	if x.Role != y.Role {
		return false
	}
	if x.Member != y.Member {
		return false
	}
	if equal, ok := interface{}(x.Condition).(interface{ Equal(*expr.Expr) bool }); !ok || !equal.Equal(y.Condition) {
		return false
	} else if !proto.Equal(x.Condition, y.Condition) {
		return false
	}
	return true
}
