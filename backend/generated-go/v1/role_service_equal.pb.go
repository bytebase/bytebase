// Code generated by protoc-gen-equal-go. DO NOT EDIT.
// source: v1/role_service.proto

package v1

import (
	proto "google.golang.org/protobuf/proto"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
)

func (x *ListRolesRequest) Equal(y *ListRolesRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	return true
}

func (x *ListRolesResponse) Equal(y *ListRolesResponse) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if len(x.Roles) != len(y.Roles) {
		return false
	}
	for i := 0; i < len(x.Roles); i++ {
		if !x.Roles[i].Equal(y.Roles[i]) {
			return false
		}
	}
	return true
}

func (x *CreateRoleRequest) Equal(y *CreateRoleRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if !x.Role.Equal(y.Role) {
		return false
	}
	if x.RoleId != y.RoleId {
		return false
	}
	return true
}

func (x *GetRoleRequest) Equal(y *GetRoleRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	return true
}

func (x *UpdateRoleRequest) Equal(y *UpdateRoleRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if !x.Role.Equal(y.Role) {
		return false
	}
	if equal, ok := interface{}(x.UpdateMask).(interface {
		Equal(*fieldmaskpb.FieldMask) bool
	}); !ok || !equal.Equal(y.UpdateMask) {
		return false
	} else if !proto.Equal(x.UpdateMask, y.UpdateMask) {
		return false
	}
	if x.AllowMissing != y.AllowMissing {
		return false
	}
	return true
}

func (x *DeleteRoleRequest) Equal(y *DeleteRoleRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	return true
}

func (x *Role) Equal(y *Role) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	if x.Title != y.Title {
		return false
	}
	if x.Description != y.Description {
		return false
	}
	if len(x.Permissions) != len(y.Permissions) {
		return false
	}
	for i := 0; i < len(x.Permissions); i++ {
		if x.Permissions[i] != y.Permissions[i] {
			return false
		}
	}
	if x.Type != y.Type {
		return false
	}
	return true
}
