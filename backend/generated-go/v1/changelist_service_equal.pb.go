// Code generated by protoc-gen-equal-go. DO NOT EDIT.
// source: v1/changelist_service.proto

package v1

import (
	proto "google.golang.org/protobuf/proto"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
)

func (x *CreateChangelistRequest) Equal(y *CreateChangelistRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Parent != y.Parent {
		return false
	}
	if !x.Changelist.Equal(y.Changelist) {
		return false
	}
	if x.ChangelistId != y.ChangelistId {
		return false
	}
	return true
}

func (x *GetChangelistRequest) Equal(y *GetChangelistRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	return true
}

func (x *ListChangelistsRequest) Equal(y *ListChangelistsRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Parent != y.Parent {
		return false
	}
	if x.PageSize != y.PageSize {
		return false
	}
	if x.PageToken != y.PageToken {
		return false
	}
	return true
}

func (x *ListChangelistsResponse) Equal(y *ListChangelistsResponse) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if len(x.Changelists) != len(y.Changelists) {
		return false
	}
	for i := 0; i < len(x.Changelists); i++ {
		if !x.Changelists[i].Equal(y.Changelists[i]) {
			return false
		}
	}
	if x.NextPageToken != y.NextPageToken {
		return false
	}
	return true
}

func (x *UpdateChangelistRequest) Equal(y *UpdateChangelistRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if !x.Changelist.Equal(y.Changelist) {
		return false
	}
	if equal, ok := interface{}(x.UpdateMask).(interface {
		Equal(*fieldmaskpb.FieldMask) bool
	}); !ok || !equal.Equal(y.UpdateMask) {
		return false
	} else if !proto.Equal(x.UpdateMask, y.UpdateMask) {
		return false
	}
	if x.AllowMissing != y.AllowMissing {
		return false
	}
	return true
}

func (x *DeleteChangelistRequest) Equal(y *DeleteChangelistRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	return true
}

func (x *Changelist_Change) Equal(y *Changelist_Change) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Sheet != y.Sheet {
		return false
	}
	if x.Source != y.Source {
		return false
	}
	return true
}

func (x *Changelist) Equal(y *Changelist) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	if x.Description != y.Description {
		return false
	}
	if x.Creator != y.Creator {
		return false
	}
	if p, q := x.UpdateTime, y.UpdateTime; (p == nil && q != nil) || (p != nil && (q == nil || p.Seconds != q.Seconds || p.Nanos != q.Nanos)) {
		return false
	}
	if len(x.Changes) != len(y.Changes) {
		return false
	}
	for i := 0; i < len(x.Changes); i++ {
		if !x.Changes[i].Equal(y.Changes[i]) {
			return false
		}
	}
	return true
}
