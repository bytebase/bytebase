// Code generated by protoc-gen-equal-go. DO NOT EDIT.
// source: v1/user_service.proto

package v1

import (
	proto "google.golang.org/protobuf/proto"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
)

func (x *GetUserRequest) Equal(y *GetUserRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	return true
}

func (x *BatchGetUsersRequest) Equal(y *BatchGetUsersRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if len(x.Names) != len(y.Names) {
		return false
	}
	for i := 0; i < len(x.Names); i++ {
		if x.Names[i] != y.Names[i] {
			return false
		}
	}
	return true
}

func (x *BatchGetUsersResponse) Equal(y *BatchGetUsersResponse) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if len(x.Users) != len(y.Users) {
		return false
	}
	for i := 0; i < len(x.Users); i++ {
		if !x.Users[i].Equal(y.Users[i]) {
			return false
		}
	}
	return true
}

func (x *ListUsersRequest) Equal(y *ListUsersRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.PageSize != y.PageSize {
		return false
	}
	if x.PageToken != y.PageToken {
		return false
	}
	if x.ShowDeleted != y.ShowDeleted {
		return false
	}
	if x.Filter != y.Filter {
		return false
	}
	return true
}

func (x *ListUsersResponse) Equal(y *ListUsersResponse) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if len(x.Users) != len(y.Users) {
		return false
	}
	for i := 0; i < len(x.Users); i++ {
		if !x.Users[i].Equal(y.Users[i]) {
			return false
		}
	}
	if x.NextPageToken != y.NextPageToken {
		return false
	}
	return true
}

func (x *CreateUserRequest) Equal(y *CreateUserRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if !x.User.Equal(y.User) {
		return false
	}
	return true
}

func (x *UpdateUserRequest) Equal(y *UpdateUserRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if !x.User.Equal(y.User) {
		return false
	}
	if equal, ok := interface{}(x.UpdateMask).(interface {
		Equal(*fieldmaskpb.FieldMask) bool
	}); !ok || !equal.Equal(y.UpdateMask) {
		return false
	} else if !proto.Equal(x.UpdateMask, y.UpdateMask) {
		return false
	}
	if p, q := x.OtpCode, y.OtpCode; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	if x.RegenerateTempMfaSecret != y.RegenerateTempMfaSecret {
		return false
	}
	if x.RegenerateRecoveryCodes != y.RegenerateRecoveryCodes {
		return false
	}
	if x.AllowMissing != y.AllowMissing {
		return false
	}
	return true
}

func (x *DeleteUserRequest) Equal(y *DeleteUserRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	return true
}

func (x *UndeleteUserRequest) Equal(y *UndeleteUserRequest) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	return true
}

func (x *User_Profile) Equal(y *User_Profile) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if p, q := x.LastLoginTime, y.LastLoginTime; (p == nil && q != nil) || (p != nil && (q == nil || p.Seconds != q.Seconds || p.Nanos != q.Nanos)) {
		return false
	}
	if p, q := x.LastChangePasswordTime, y.LastChangePasswordTime; (p == nil && q != nil) || (p != nil && (q == nil || p.Seconds != q.Seconds || p.Nanos != q.Nanos)) {
		return false
	}
	if x.Source != y.Source {
		return false
	}
	return true
}

func (x *User) Equal(y *User) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	if x.State != y.State {
		return false
	}
	if x.Email != y.Email {
		return false
	}
	if x.Title != y.Title {
		return false
	}
	if x.UserType != y.UserType {
		return false
	}
	if x.Password != y.Password {
		return false
	}
	if x.ServiceKey != y.ServiceKey {
		return false
	}
	if x.MfaEnabled != y.MfaEnabled {
		return false
	}
	if x.TempOtpSecret != y.TempOtpSecret {
		return false
	}
	if len(x.TempRecoveryCodes) != len(y.TempRecoveryCodes) {
		return false
	}
	for i := 0; i < len(x.TempRecoveryCodes); i++ {
		if x.TempRecoveryCodes[i] != y.TempRecoveryCodes[i] {
			return false
		}
	}
	if p, q := x.TempOtpSecretCreatedTime, y.TempOtpSecretCreatedTime; (p == nil && q != nil) || (p != nil && (q == nil || p.Seconds != q.Seconds || p.Nanos != q.Nanos)) {
		return false
	}
	if x.Phone != y.Phone {
		return false
	}
	if !x.Profile.Equal(y.Profile) {
		return false
	}
	if len(x.Groups) != len(y.Groups) {
		return false
	}
	for i := 0; i < len(x.Groups); i++ {
		if x.Groups[i] != y.Groups[i] {
			return false
		}
	}
	return true
}
