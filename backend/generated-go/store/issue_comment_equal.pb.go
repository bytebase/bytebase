// Code generated by protoc-gen-equal-go. DO NOT EDIT.
// source: store/issue_comment.proto

package store

func (x *IssueCommentPayload_Approval) Equal(y *IssueCommentPayload_Approval) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Status != y.Status {
		return false
	}
	return true
}

func (x *IssueCommentPayload_IssueUpdate) Equal(y *IssueCommentPayload_IssueUpdate) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if p, q := x.FromTitle, y.FromTitle; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	if p, q := x.ToTitle, y.ToTitle; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	if p, q := x.FromDescription, y.FromDescription; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	if p, q := x.ToDescription, y.ToDescription; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	if p, q := x.FromStatus, y.FromStatus; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	if p, q := x.ToStatus, y.ToStatus; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	if len(x.FromLabels) != len(y.FromLabels) {
		return false
	}
	for i := 0; i < len(x.FromLabels); i++ {
		if x.FromLabels[i] != y.FromLabels[i] {
			return false
		}
	}
	if len(x.ToLabels) != len(y.ToLabels) {
		return false
	}
	for i := 0; i < len(x.ToLabels); i++ {
		if x.ToLabels[i] != y.ToLabels[i] {
			return false
		}
	}
	return true
}

func (x *IssueCommentPayload_StageEnd) Equal(y *IssueCommentPayload_StageEnd) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Stage != y.Stage {
		return false
	}
	return true
}

func (x *IssueCommentPayload_TaskUpdate) Equal(y *IssueCommentPayload_TaskUpdate) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if len(x.Tasks) != len(y.Tasks) {
		return false
	}
	for i := 0; i < len(x.Tasks); i++ {
		if x.Tasks[i] != y.Tasks[i] {
			return false
		}
	}
	if p, q := x.FromSheet, y.FromSheet; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	if p, q := x.ToSheet, y.ToSheet; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	if p, q := x.ToStatus, y.ToStatus; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	return true
}

func (x *IssueCommentPayload_TaskPriorBackup_Table) Equal(y *IssueCommentPayload_TaskPriorBackup_Table) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Schema != y.Schema {
		return false
	}
	if x.Table != y.Table {
		return false
	}
	return true
}

func (x *IssueCommentPayload_TaskPriorBackup) Equal(y *IssueCommentPayload_TaskPriorBackup) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Task != y.Task {
		return false
	}
	if len(x.Tables) != len(y.Tables) {
		return false
	}
	for i := 0; i < len(x.Tables); i++ {
		if !x.Tables[i].Equal(y.Tables[i]) {
			return false
		}
	}
	if p, q := x.OriginalLine, y.OriginalLine; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	if x.Database != y.Database {
		return false
	}
	if x.Error != y.Error {
		return false
	}
	return true
}

func (x *IssueCommentPayload) Equal(y *IssueCommentPayload) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Comment != y.Comment {
		return false
	}
	if !x.GetApproval().Equal(y.GetApproval()) {
		return false
	}
	if !x.GetIssueUpdate().Equal(y.GetIssueUpdate()) {
		return false
	}
	if !x.GetStageEnd().Equal(y.GetStageEnd()) {
		return false
	}
	if !x.GetTaskUpdate().Equal(y.GetTaskUpdate()) {
		return false
	}
	if !x.GetTaskPriorBackup().Equal(y.GetTaskPriorBackup()) {
		return false
	}
	return true
}
