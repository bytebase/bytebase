// Code generated by protoc-gen-equal-go. DO NOT EDIT.
// source: store/policy.proto

package store

import (
	expr "google.golang.org/genproto/googleapis/type/expr"
	proto "google.golang.org/protobuf/proto"
)

func (x *Policy) Equal(y *Policy) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	return true
}

func (x *RolloutPolicy_Checkers_RequiredStatusChecks) Equal(y *RolloutPolicy_Checkers_RequiredStatusChecks) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.PlanCheckEnforcement != y.PlanCheckEnforcement {
		return false
	}
	return true
}

func (x *RolloutPolicy_Checkers) Equal(y *RolloutPolicy_Checkers) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.RequiredIssueApproval != y.RequiredIssueApproval {
		return false
	}
	if !x.RequiredStatusChecks.Equal(y.RequiredStatusChecks) {
		return false
	}
	return true
}

func (x *RolloutPolicy) Equal(y *RolloutPolicy) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Automatic != y.Automatic {
		return false
	}
	if len(x.Roles) != len(y.Roles) {
		return false
	}
	for i := 0; i < len(x.Roles); i++ {
		if x.Roles[i] != y.Roles[i] {
			return false
		}
	}
	if len(x.IssueRoles) != len(y.IssueRoles) {
		return false
	}
	for i := 0; i < len(x.IssueRoles); i++ {
		if x.IssueRoles[i] != y.IssueRoles[i] {
			return false
		}
	}
	if !x.Checkers.Equal(y.Checkers) {
		return false
	}
	return true
}

func (x *MaskingExceptionPolicy_MaskingException) Equal(y *MaskingExceptionPolicy_MaskingException) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Action != y.Action {
		return false
	}
	if x.Member != y.Member {
		return false
	}
	if equal, ok := interface{}(x.Condition).(interface{ Equal(*expr.Expr) bool }); !ok || !equal.Equal(y.Condition) {
		return false
	} else if !proto.Equal(x.Condition, y.Condition) {
		return false
	}
	return true
}

func (x *MaskingExceptionPolicy) Equal(y *MaskingExceptionPolicy) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if len(x.MaskingExceptions) != len(y.MaskingExceptions) {
		return false
	}
	for i := 0; i < len(x.MaskingExceptions); i++ {
		if !x.MaskingExceptions[i].Equal(y.MaskingExceptions[i]) {
			return false
		}
	}
	return true
}

func (x *MaskingRulePolicy_MaskingRule) Equal(y *MaskingRulePolicy_MaskingRule) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Id != y.Id {
		return false
	}
	if equal, ok := interface{}(x.Condition).(interface{ Equal(*expr.Expr) bool }); !ok || !equal.Equal(y.Condition) {
		return false
	} else if !proto.Equal(x.Condition, y.Condition) {
		return false
	}
	if x.SemanticType != y.SemanticType {
		return false
	}
	return true
}

func (x *MaskingRulePolicy) Equal(y *MaskingRulePolicy) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if len(x.Rules) != len(y.Rules) {
		return false
	}
	for i := 0; i < len(x.Rules); i++ {
		if !x.Rules[i].Equal(y.Rules[i]) {
			return false
		}
	}
	return true
}

func (x *SQLReviewRule) Equal(y *SQLReviewRule) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Type != y.Type {
		return false
	}
	if x.Level != y.Level {
		return false
	}
	if x.Payload != y.Payload {
		return false
	}
	if x.Engine != y.Engine {
		return false
	}
	if x.Comment != y.Comment {
		return false
	}
	return true
}

func (x *TagPolicy) Equal(y *TagPolicy) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if len(x.Tags) != len(y.Tags) {
		return false
	}
	for k := range x.Tags {
		_, ok := y.Tags[k]
		if !ok {
			return false
		}
		if x.Tags[k] != y.Tags[k] {
			return false
		}
	}
	return true
}

func (x *Binding) Equal(y *Binding) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Role != y.Role {
		return false
	}
	if len(x.Members) != len(y.Members) {
		return false
	}
	for i := 0; i < len(x.Members); i++ {
		if x.Members[i] != y.Members[i] {
			return false
		}
	}
	if equal, ok := interface{}(x.Condition).(interface{ Equal(*expr.Expr) bool }); !ok || !equal.Equal(y.Condition) {
		return false
	} else if !proto.Equal(x.Condition, y.Condition) {
		return false
	}
	return true
}

func (x *IamPolicy) Equal(y *IamPolicy) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if len(x.Bindings) != len(y.Bindings) {
		return false
	}
	for i := 0; i < len(x.Bindings); i++ {
		if !x.Bindings[i].Equal(y.Bindings[i]) {
			return false
		}
	}
	return true
}

func (x *EnvironmentTierPolicy) Equal(y *EnvironmentTierPolicy) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.EnvironmentTier != y.EnvironmentTier {
		return false
	}
	if x.Color != y.Color {
		return false
	}
	return true
}

func (x *QueryDataPolicy) Equal(y *QueryDataPolicy) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if p, q := x.Timeout, y.Timeout; (p == nil && q != nil) || (p != nil && (q == nil || p.Seconds != q.Seconds || p.Nanos != q.Nanos)) {
		return false
	}
	if x.DisableExport != y.DisableExport {
		return false
	}
	if x.MaximumResultSize != y.MaximumResultSize {
		return false
	}
	if x.MaximumResultRows != y.MaximumResultRows {
		return false
	}
	if x.DisableCopyData != y.DisableCopyData {
		return false
	}
	return true
}

func (x *RestrictIssueCreationForSQLReviewPolicy) Equal(y *RestrictIssueCreationForSQLReviewPolicy) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Disallow != y.Disallow {
		return false
	}
	return true
}

func (x *DataSourceQueryPolicy) Equal(y *DataSourceQueryPolicy) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.AdminDataSourceRestriction != y.AdminDataSourceRestriction {
		return false
	}
	if x.DisallowDdl != y.DisallowDdl {
		return false
	}
	if x.DisallowDml != y.DisallowDml {
		return false
	}
	return true
}
