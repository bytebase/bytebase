// Code generated by protoc-gen-equal-go. DO NOT EDIT.
// source: store/idp.proto

package store

func (x *IdentityProviderConfig) Equal(y *IdentityProviderConfig) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if !x.GetOauth2Config().Equal(y.GetOauth2Config()) {
		return false
	}
	if !x.GetOidcConfig().Equal(y.GetOidcConfig()) {
		return false
	}
	if !x.GetLdapConfig().Equal(y.GetLdapConfig()) {
		return false
	}
	return true
}

func (x *OAuth2IdentityProviderConfig) Equal(y *OAuth2IdentityProviderConfig) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.AuthUrl != y.AuthUrl {
		return false
	}
	if x.TokenUrl != y.TokenUrl {
		return false
	}
	if x.UserInfoUrl != y.UserInfoUrl {
		return false
	}
	if x.ClientId != y.ClientId {
		return false
	}
	if x.ClientSecret != y.ClientSecret {
		return false
	}
	if len(x.Scopes) != len(y.Scopes) {
		return false
	}
	for i := 0; i < len(x.Scopes); i++ {
		if x.Scopes[i] != y.Scopes[i] {
			return false
		}
	}
	if !x.FieldMapping.Equal(y.FieldMapping) {
		return false
	}
	if x.SkipTlsVerify != y.SkipTlsVerify {
		return false
	}
	if x.AuthStyle != y.AuthStyle {
		return false
	}
	return true
}

func (x *OIDCIdentityProviderConfig) Equal(y *OIDCIdentityProviderConfig) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Issuer != y.Issuer {
		return false
	}
	if x.ClientId != y.ClientId {
		return false
	}
	if x.ClientSecret != y.ClientSecret {
		return false
	}
	if !x.FieldMapping.Equal(y.FieldMapping) {
		return false
	}
	if x.SkipTlsVerify != y.SkipTlsVerify {
		return false
	}
	if x.AuthStyle != y.AuthStyle {
		return false
	}
	if len(x.Scopes) != len(y.Scopes) {
		return false
	}
	for i := 0; i < len(x.Scopes); i++ {
		if x.Scopes[i] != y.Scopes[i] {
			return false
		}
	}
	return true
}

func (x *LDAPIdentityProviderConfig) Equal(y *LDAPIdentityProviderConfig) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Host != y.Host {
		return false
	}
	if x.Port != y.Port {
		return false
	}
	if x.SkipTlsVerify != y.SkipTlsVerify {
		return false
	}
	if x.BindDn != y.BindDn {
		return false
	}
	if x.BindPassword != y.BindPassword {
		return false
	}
	if x.BaseDn != y.BaseDn {
		return false
	}
	if x.UserFilter != y.UserFilter {
		return false
	}
	if x.SecurityProtocol != y.SecurityProtocol {
		return false
	}
	if !x.FieldMapping.Equal(y.FieldMapping) {
		return false
	}
	return true
}

func (x *FieldMapping) Equal(y *FieldMapping) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Identifier != y.Identifier {
		return false
	}
	if x.DisplayName != y.DisplayName {
		return false
	}
	if x.Phone != y.Phone {
		return false
	}
	if x.Groups != y.Groups {
		return false
	}
	return true
}

func (x *IdentityProviderUserInfo) Equal(y *IdentityProviderUserInfo) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Identifier != y.Identifier {
		return false
	}
	if x.DisplayName != y.DisplayName {
		return false
	}
	if x.Phone != y.Phone {
		return false
	}
	if len(x.Groups) != len(y.Groups) {
		return false
	}
	for i := 0; i < len(x.Groups); i++ {
		if x.Groups[i] != y.Groups[i] {
			return false
		}
	}
	if x.HasGroups != y.HasGroups {
		return false
	}
	return true
}
