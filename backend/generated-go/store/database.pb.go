// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        (unknown)
// source: store/database.proto

package store

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TaskMetadata_State int32

const (
	TaskMetadata_STATE_UNSPECIFIED TaskMetadata_State = 0
	TaskMetadata_STATE_STARTED     TaskMetadata_State = 1
	TaskMetadata_STATE_SUSPENDED   TaskMetadata_State = 2
)

// Enum value maps for TaskMetadata_State.
var (
	TaskMetadata_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "STATE_STARTED",
		2: "STATE_SUSPENDED",
	}
	TaskMetadata_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"STATE_STARTED":     1,
		"STATE_SUSPENDED":   2,
	}
)

func (x TaskMetadata_State) Enum() *TaskMetadata_State {
	p := new(TaskMetadata_State)
	*p = x
	return p
}

func (x TaskMetadata_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskMetadata_State) Descriptor() protoreflect.EnumDescriptor {
	return file_store_database_proto_enumTypes[0].Descriptor()
}

func (TaskMetadata_State) Type() protoreflect.EnumType {
	return &file_store_database_proto_enumTypes[0]
}

func (x TaskMetadata_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskMetadata_State.Descriptor instead.
func (TaskMetadata_State) EnumDescriptor() ([]byte, []int) {
	return file_store_database_proto_rawDescGZIP(), []int{9, 0}
}

type StreamMetadata_Type int32

const (
	StreamMetadata_TYPE_UNSPECIFIED StreamMetadata_Type = 0
	StreamMetadata_TYPE_DELTA       StreamMetadata_Type = 1
)

// Enum value maps for StreamMetadata_Type.
var (
	StreamMetadata_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "TYPE_DELTA",
	}
	StreamMetadata_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"TYPE_DELTA":       1,
	}
)

func (x StreamMetadata_Type) Enum() *StreamMetadata_Type {
	p := new(StreamMetadata_Type)
	*p = x
	return p
}

func (x StreamMetadata_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamMetadata_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_store_database_proto_enumTypes[1].Descriptor()
}

func (StreamMetadata_Type) Type() protoreflect.EnumType {
	return &file_store_database_proto_enumTypes[1]
}

func (x StreamMetadata_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamMetadata_Type.Descriptor instead.
func (StreamMetadata_Type) EnumDescriptor() ([]byte, []int) {
	return file_store_database_proto_rawDescGZIP(), []int{10, 0}
}

type StreamMetadata_Mode int32

const (
	StreamMetadata_MODE_UNSPECIFIED StreamMetadata_Mode = 0
	StreamMetadata_MODE_DEFAULT     StreamMetadata_Mode = 1
	StreamMetadata_MODE_APPEND_ONLY StreamMetadata_Mode = 2
	StreamMetadata_MODE_INSERT_ONLY StreamMetadata_Mode = 3
)

// Enum value maps for StreamMetadata_Mode.
var (
	StreamMetadata_Mode_name = map[int32]string{
		0: "MODE_UNSPECIFIED",
		1: "MODE_DEFAULT",
		2: "MODE_APPEND_ONLY",
		3: "MODE_INSERT_ONLY",
	}
	StreamMetadata_Mode_value = map[string]int32{
		"MODE_UNSPECIFIED": 0,
		"MODE_DEFAULT":     1,
		"MODE_APPEND_ONLY": 2,
		"MODE_INSERT_ONLY": 3,
	}
)

func (x StreamMetadata_Mode) Enum() *StreamMetadata_Mode {
	p := new(StreamMetadata_Mode)
	*p = x
	return p
}

func (x StreamMetadata_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamMetadata_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_store_database_proto_enumTypes[2].Descriptor()
}

func (StreamMetadata_Mode) Type() protoreflect.EnumType {
	return &file_store_database_proto_enumTypes[2]
}

func (x StreamMetadata_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamMetadata_Mode.Descriptor instead.
func (StreamMetadata_Mode) EnumDescriptor() ([]byte, []int) {
	return file_store_database_proto_rawDescGZIP(), []int{10, 1}
}

// The type is the type of a table partition. Some database engines may not
// support all types. Only available for the following database engines now:
// MySQL: RANGE, RANGE COLUMNS, LIST, LIST COLUMNS, HASH, LINEAR HASH, KEY,
// LINEAR_KEY
// (https://dev.mysql.com/doc/refman/8.0/en/partitioning-types.html) TiDB:
// RANGE, RANGE COLUMNS, LIST, LIST COLUMNS, HASH, KEY PostgreSQL: RANGE,
// LIST, HASH (https://www.postgresql.org/docs/current/ddl-partitioning.html)
type TablePartitionMetadata_Type int32

const (
	TablePartitionMetadata_TYPE_UNSPECIFIED TablePartitionMetadata_Type = 0
	TablePartitionMetadata_RANGE            TablePartitionMetadata_Type = 1
	TablePartitionMetadata_RANGE_COLUMNS    TablePartitionMetadata_Type = 2
	TablePartitionMetadata_LIST             TablePartitionMetadata_Type = 3
	TablePartitionMetadata_LIST_COLUMNS     TablePartitionMetadata_Type = 4
	TablePartitionMetadata_HASH             TablePartitionMetadata_Type = 5
	TablePartitionMetadata_LINEAR_HASH      TablePartitionMetadata_Type = 6
	TablePartitionMetadata_KEY              TablePartitionMetadata_Type = 7
	TablePartitionMetadata_LINEAR_KEY       TablePartitionMetadata_Type = 8
)

// Enum value maps for TablePartitionMetadata_Type.
var (
	TablePartitionMetadata_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "RANGE",
		2: "RANGE_COLUMNS",
		3: "LIST",
		4: "LIST_COLUMNS",
		5: "HASH",
		6: "LINEAR_HASH",
		7: "KEY",
		8: "LINEAR_KEY",
	}
	TablePartitionMetadata_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"RANGE":            1,
		"RANGE_COLUMNS":    2,
		"LIST":             3,
		"LIST_COLUMNS":     4,
		"HASH":             5,
		"LINEAR_HASH":      6,
		"KEY":              7,
		"LINEAR_KEY":       8,
	}
)

func (x TablePartitionMetadata_Type) Enum() *TablePartitionMetadata_Type {
	p := new(TablePartitionMetadata_Type)
	*p = x
	return p
}

func (x TablePartitionMetadata_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TablePartitionMetadata_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_store_database_proto_enumTypes[3].Descriptor()
}

func (TablePartitionMetadata_Type) Type() protoreflect.EnumType {
	return &file_store_database_proto_enumTypes[3]
}

func (x TablePartitionMetadata_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TablePartitionMetadata_Type.Descriptor instead.
func (TablePartitionMetadata_Type) EnumDescriptor() ([]byte, []int) {
	return file_store_database_proto_rawDescGZIP(), []int{14, 0}
}

type ColumnMetadata_IdentityGeneration int32

const (
	ColumnMetadata_IDENTITY_GENERATION_UNSPECIFIED ColumnMetadata_IdentityGeneration = 0
	ColumnMetadata_ALWAYS                          ColumnMetadata_IdentityGeneration = 1
	ColumnMetadata_BY_DEFAULT                      ColumnMetadata_IdentityGeneration = 2
)

// Enum value maps for ColumnMetadata_IdentityGeneration.
var (
	ColumnMetadata_IdentityGeneration_name = map[int32]string{
		0: "IDENTITY_GENERATION_UNSPECIFIED",
		1: "ALWAYS",
		2: "BY_DEFAULT",
	}
	ColumnMetadata_IdentityGeneration_value = map[string]int32{
		"IDENTITY_GENERATION_UNSPECIFIED": 0,
		"ALWAYS":                          1,
		"BY_DEFAULT":                      2,
	}
)

func (x ColumnMetadata_IdentityGeneration) Enum() *ColumnMetadata_IdentityGeneration {
	p := new(ColumnMetadata_IdentityGeneration)
	*p = x
	return p
}

func (x ColumnMetadata_IdentityGeneration) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ColumnMetadata_IdentityGeneration) Descriptor() protoreflect.EnumDescriptor {
	return file_store_database_proto_enumTypes[4].Descriptor()
}

func (ColumnMetadata_IdentityGeneration) Type() protoreflect.EnumType {
	return &file_store_database_proto_enumTypes[4]
}

func (x ColumnMetadata_IdentityGeneration) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ColumnMetadata_IdentityGeneration.Descriptor instead.
func (ColumnMetadata_IdentityGeneration) EnumDescriptor() ([]byte, []int) {
	return file_store_database_proto_rawDescGZIP(), []int{15, 0}
}

type GenerationMetadata_Type int32

const (
	GenerationMetadata_TYPE_UNSPECIFIED GenerationMetadata_Type = 0
	GenerationMetadata_TYPE_VIRTUAL     GenerationMetadata_Type = 1
	GenerationMetadata_TYPE_STORED      GenerationMetadata_Type = 2
)

// Enum value maps for GenerationMetadata_Type.
var (
	GenerationMetadata_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "TYPE_VIRTUAL",
		2: "TYPE_STORED",
	}
	GenerationMetadata_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"TYPE_VIRTUAL":     1,
		"TYPE_STORED":      2,
	}
)

func (x GenerationMetadata_Type) Enum() *GenerationMetadata_Type {
	p := new(GenerationMetadata_Type)
	*p = x
	return p
}

func (x GenerationMetadata_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GenerationMetadata_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_store_database_proto_enumTypes[5].Descriptor()
}

func (GenerationMetadata_Type) Type() protoreflect.EnumType {
	return &file_store_database_proto_enumTypes[5]
}

func (x GenerationMetadata_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GenerationMetadata_Type.Descriptor instead.
func (GenerationMetadata_Type) EnumDescriptor() ([]byte, []int) {
	return file_store_database_proto_rawDescGZIP(), []int{16, 0}
}

type ObjectSchema_Type int32

const (
	ObjectSchema_TYPE_UNSPECIFIED ObjectSchema_Type = 0
	ObjectSchema_STRING           ObjectSchema_Type = 1
	ObjectSchema_NUMBER           ObjectSchema_Type = 2
	ObjectSchema_BOOLEAN          ObjectSchema_Type = 3
	ObjectSchema_OBJECT           ObjectSchema_Type = 4
	ObjectSchema_ARRAY            ObjectSchema_Type = 5
)

// Enum value maps for ObjectSchema_Type.
var (
	ObjectSchema_Type_name = map[int32]string{
		0: "TYPE_UNSPECIFIED",
		1: "STRING",
		2: "NUMBER",
		3: "BOOLEAN",
		4: "OBJECT",
		5: "ARRAY",
	}
	ObjectSchema_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED": 0,
		"STRING":           1,
		"NUMBER":           2,
		"BOOLEAN":          3,
		"OBJECT":           4,
		"ARRAY":            5,
	}
)

func (x ObjectSchema_Type) Enum() *ObjectSchema_Type {
	p := new(ObjectSchema_Type)
	*p = x
	return p
}

func (x ObjectSchema_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ObjectSchema_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_store_database_proto_enumTypes[6].Descriptor()
}

func (ObjectSchema_Type) Type() protoreflect.EnumType {
	return &file_store_database_proto_enumTypes[6]
}

func (x ObjectSchema_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ObjectSchema_Type.Descriptor instead.
func (ObjectSchema_Type) EnumDescriptor() ([]byte, []int) {
	return file_store_database_proto_rawDescGZIP(), []int{38, 0}
}

// DatabaseMetadata is the metadata for databases.
type DatabaseMetadata struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Labels          map[string]string      `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	LastSyncTime    *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=last_sync_time,json=lastSyncTime,proto3" json:"last_sync_time,omitempty"`
	BackupAvailable bool                   `protobuf:"varint,3,opt,name=backup_available,json=backupAvailable,proto3" json:"backup_available,omitempty"`
	Datashare       bool                   `protobuf:"varint,4,opt,name=datashare,proto3" json:"datashare,omitempty"`
	// The schema has drifted from the source of truth.
	Drifted bool `protobuf:"varint,6,opt,name=drifted,proto3" json:"drifted,omitempty"`
	// The version of database schema.
	Version       string `protobuf:"bytes,7,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DatabaseMetadata) Reset() {
	*x = DatabaseMetadata{}
	mi := &file_store_database_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseMetadata) ProtoMessage() {}

func (x *DatabaseMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_store_database_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseMetadata.ProtoReflect.Descriptor instead.
func (*DatabaseMetadata) Descriptor() ([]byte, []int) {
	return file_store_database_proto_rawDescGZIP(), []int{0}
}

func (x *DatabaseMetadata) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *DatabaseMetadata) GetLastSyncTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastSyncTime
	}
	return nil
}

func (x *DatabaseMetadata) GetBackupAvailable() bool {
	if x != nil {
		return x.BackupAvailable
	}
	return false
}

func (x *DatabaseMetadata) GetDatashare() bool {
	if x != nil {
		return x.Datashare
	}
	return false
}

func (x *DatabaseMetadata) GetDrifted() bool {
	if x != nil {
		return x.Drifted
	}
	return false
}

func (x *DatabaseMetadata) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// DatabaseSchemaMetadata is the schema metadata for databases.
type DatabaseSchemaMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Name  string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The list of schemas in a database.
	Schemas []*SchemaMetadata `protobuf:"bytes,2,rep,name=schemas,proto3" json:"schemas,omitempty"`
	// The character set of the database.
	CharacterSet string `protobuf:"bytes,3,opt,name=character_set,json=characterSet,proto3" json:"character_set,omitempty"`
	// The collation of the database.
	Collation string `protobuf:"bytes,4,opt,name=collation,proto3" json:"collation,omitempty"`
	// The list of extensions in a database.
	Extensions []*ExtensionMetadata `protobuf:"bytes,5,rep,name=extensions,proto3" json:"extensions,omitempty"`
	// The database belongs to a datashare.
	Datashare bool `protobuf:"varint,6,opt,name=datashare,proto3" json:"datashare,omitempty"`
	// The service name of the database. It's an Oracle-specific concept.
	ServiceName     string                    `protobuf:"bytes,7,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	LinkedDatabases []*LinkedDatabaseMetadata `protobuf:"bytes,8,rep,name=linked_databases,json=linkedDatabases,proto3" json:"linked_databases,omitempty"`
	Owner           string                    `protobuf:"bytes,9,opt,name=owner,proto3" json:"owner,omitempty"`
	// The search_path is the search path of a PostgreSQL database.
	SearchPath    string `protobuf:"bytes,10,opt,name=search_path,json=searchPath,proto3" json:"search_path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DatabaseSchemaMetadata) Reset() {
	*x = DatabaseSchemaMetadata{}
	mi := &file_store_database_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseSchemaMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseSchemaMetadata) ProtoMessage() {}

func (x *DatabaseSchemaMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_store_database_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseSchemaMetadata.ProtoReflect.Descriptor instead.
func (*DatabaseSchemaMetadata) Descriptor() ([]byte, []int) {
	return file_store_database_proto_rawDescGZIP(), []int{1}
}

func (x *DatabaseSchemaMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DatabaseSchemaMetadata) GetSchemas() []*SchemaMetadata {
	if x != nil {
		return x.Schemas
	}
	return nil
}

func (x *DatabaseSchemaMetadata) GetCharacterSet() string {
	if x != nil {
		return x.CharacterSet
	}
	return ""
}

func (x *DatabaseSchemaMetadata) GetCollation() string {
	if x != nil {
		return x.Collation
	}
	return ""
}

func (x *DatabaseSchemaMetadata) GetExtensions() []*ExtensionMetadata {
	if x != nil {
		return x.Extensions
	}
	return nil
}

func (x *DatabaseSchemaMetadata) GetDatashare() bool {
	if x != nil {
		return x.Datashare
	}
	return false
}

func (x *DatabaseSchemaMetadata) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *DatabaseSchemaMetadata) GetLinkedDatabases() []*LinkedDatabaseMetadata {
	if x != nil {
		return x.LinkedDatabases
	}
	return nil
}

func (x *DatabaseSchemaMetadata) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *DatabaseSchemaMetadata) GetSearchPath() string {
	if x != nil {
		return x.SearchPath
	}
	return ""
}

type LinkedDatabaseMetadata struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Username      string                 `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Host          string                 `protobuf:"bytes,3,opt,name=host,proto3" json:"host,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LinkedDatabaseMetadata) Reset() {
	*x = LinkedDatabaseMetadata{}
	mi := &file_store_database_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LinkedDatabaseMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkedDatabaseMetadata) ProtoMessage() {}

func (x *LinkedDatabaseMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_store_database_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkedDatabaseMetadata.ProtoReflect.Descriptor instead.
func (*LinkedDatabaseMetadata) Descriptor() ([]byte, []int) {
	return file_store_database_proto_rawDescGZIP(), []int{2}
}

func (x *LinkedDatabaseMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LinkedDatabaseMetadata) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *LinkedDatabaseMetadata) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

// SchemaMetadata is the metadata for schemas.
// This is the concept of schema in Postgres, but it's a no-op for MySQL.
type SchemaMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The schema name.
	// It is an empty string for databases without such concept such as MySQL.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The list of tables in a schema.
	Tables []*TableMetadata `protobuf:"bytes,2,rep,name=tables,proto3" json:"tables,omitempty"`
	// The list of external tables in a schema.
	ExternalTables []*ExternalTableMetadata `protobuf:"bytes,3,rep,name=external_tables,json=externalTables,proto3" json:"external_tables,omitempty"`
	// The list of views in a schema.
	Views []*ViewMetadata `protobuf:"bytes,4,rep,name=views,proto3" json:"views,omitempty"`
	// The list of functions in a schema.
	Functions []*FunctionMetadata `protobuf:"bytes,5,rep,name=functions,proto3" json:"functions,omitempty"`
	// The list of procedures in a schema.
	Procedures []*ProcedureMetadata `protobuf:"bytes,6,rep,name=procedures,proto3" json:"procedures,omitempty"`
	// The list of streams in a schema, currently only used for Snowflake.
	Streams []*StreamMetadata `protobuf:"bytes,7,rep,name=streams,proto3" json:"streams,omitempty"`
	// The list of tasks in a schema, currently only used for Snowflake.
	Tasks []*TaskMetadata `protobuf:"bytes,8,rep,name=tasks,proto3" json:"tasks,omitempty"`
	// The list of materialized views in a schema.
	MaterializedViews []*MaterializedViewMetadata `protobuf:"bytes,9,rep,name=materialized_views,json=materializedViews,proto3" json:"materialized_views,omitempty"`
	// The list of sequences in a schema.
	Sequences []*SequenceMetadata `protobuf:"bytes,10,rep,name=sequences,proto3" json:"sequences,omitempty"`
	// The list of packages in a schema.
	Packages      []*PackageMetadata  `protobuf:"bytes,11,rep,name=packages,proto3" json:"packages,omitempty"`
	Owner         string              `protobuf:"bytes,12,opt,name=owner,proto3" json:"owner,omitempty"`
	Comment       string              `protobuf:"bytes,13,opt,name=comment,proto3" json:"comment,omitempty"`
	Events        []*EventMetadata    `protobuf:"bytes,14,rep,name=events,proto3" json:"events,omitempty"`
	EnumTypes     []*EnumTypeMetadata `protobuf:"bytes,15,rep,name=enum_types,json=enumTypes,proto3" json:"enum_types,omitempty"`
	SkipDump      bool                `protobuf:"varint,16,opt,name=skip_dump,json=skipDump,proto3" json:"skip_dump,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SchemaMetadata) Reset() {
	*x = SchemaMetadata{}
	mi := &file_store_database_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchemaMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaMetadata) ProtoMessage() {}

func (x *SchemaMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_store_database_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaMetadata.ProtoReflect.Descriptor instead.
func (*SchemaMetadata) Descriptor() ([]byte, []int) {
	return file_store_database_proto_rawDescGZIP(), []int{3}
}

func (x *SchemaMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SchemaMetadata) GetTables() []*TableMetadata {
	if x != nil {
		return x.Tables
	}
	return nil
}

func (x *SchemaMetadata) GetExternalTables() []*ExternalTableMetadata {
	if x != nil {
		return x.ExternalTables
	}
	return nil
}

func (x *SchemaMetadata) GetViews() []*ViewMetadata {
	if x != nil {
		return x.Views
	}
	return nil
}

func (x *SchemaMetadata) GetFunctions() []*FunctionMetadata {
	if x != nil {
		return x.Functions
	}
	return nil
}

func (x *SchemaMetadata) GetProcedures() []*ProcedureMetadata {
	if x != nil {
		return x.Procedures
	}
	return nil
}

func (x *SchemaMetadata) GetStreams() []*StreamMetadata {
	if x != nil {
		return x.Streams
	}
	return nil
}

func (x *SchemaMetadata) GetTasks() []*TaskMetadata {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *SchemaMetadata) GetMaterializedViews() []*MaterializedViewMetadata {
	if x != nil {
		return x.MaterializedViews
	}
	return nil
}

func (x *SchemaMetadata) GetSequences() []*SequenceMetadata {
	if x != nil {
		return x.Sequences
	}
	return nil
}

func (x *SchemaMetadata) GetPackages() []*PackageMetadata {
	if x != nil {
		return x.Packages
	}
	return nil
}

func (x *SchemaMetadata) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *SchemaMetadata) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *SchemaMetadata) GetEvents() []*EventMetadata {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *SchemaMetadata) GetEnumTypes() []*EnumTypeMetadata {
	if x != nil {
		return x.EnumTypes
	}
	return nil
}

func (x *SchemaMetadata) GetSkipDump() bool {
	if x != nil {
		return x.SkipDump
	}
	return false
}

type EnumTypeMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the enum type.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The enum values of the type.
	Values        []string `protobuf:"bytes,2,rep,name=values,proto3" json:"values,omitempty"`
	Comment       string   `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
	SkipDump      bool     `protobuf:"varint,4,opt,name=skip_dump,json=skipDump,proto3" json:"skip_dump,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EnumTypeMetadata) Reset() {
	*x = EnumTypeMetadata{}
	mi := &file_store_database_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnumTypeMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnumTypeMetadata) ProtoMessage() {}

func (x *EnumTypeMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_store_database_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnumTypeMetadata.ProtoReflect.Descriptor instead.
func (*EnumTypeMetadata) Descriptor() ([]byte, []int) {
	return file_store_database_proto_rawDescGZIP(), []int{4}
}

func (x *EnumTypeMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EnumTypeMetadata) GetValues() []string {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *EnumTypeMetadata) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *EnumTypeMetadata) GetSkipDump() bool {
	if x != nil {
		return x.SkipDump
	}
	return false
}

type EventMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the event.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The schedule of the event.
	Definition string `protobuf:"bytes,2,opt,name=definition,proto3" json:"definition,omitempty"`
	// The time zone of the event.
	TimeZone            string `protobuf:"bytes,3,opt,name=time_zone,json=timeZone,proto3" json:"time_zone,omitempty"`
	SqlMode             string `protobuf:"bytes,4,opt,name=sql_mode,json=sqlMode,proto3" json:"sql_mode,omitempty"`
	CharacterSetClient  string `protobuf:"bytes,5,opt,name=character_set_client,json=characterSetClient,proto3" json:"character_set_client,omitempty"`
	CollationConnection string `protobuf:"bytes,6,opt,name=collation_connection,json=collationConnection,proto3" json:"collation_connection,omitempty"`
	Comment             string `protobuf:"bytes,7,opt,name=comment,proto3" json:"comment,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *EventMetadata) Reset() {
	*x = EventMetadata{}
	mi := &file_store_database_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EventMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventMetadata) ProtoMessage() {}

func (x *EventMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_store_database_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventMetadata.ProtoReflect.Descriptor instead.
func (*EventMetadata) Descriptor() ([]byte, []int) {
	return file_store_database_proto_rawDescGZIP(), []int{5}
}

func (x *EventMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EventMetadata) GetDefinition() string {
	if x != nil {
		return x.Definition
	}
	return ""
}

func (x *EventMetadata) GetTimeZone() string {
	if x != nil {
		return x.TimeZone
	}
	return ""
}

func (x *EventMetadata) GetSqlMode() string {
	if x != nil {
		return x.SqlMode
	}
	return ""
}

func (x *EventMetadata) GetCharacterSetClient() string {
	if x != nil {
		return x.CharacterSetClient
	}
	return ""
}

func (x *EventMetadata) GetCollationConnection() string {
	if x != nil {
		return x.CollationConnection
	}
	return ""
}

func (x *EventMetadata) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

type SequenceMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of a sequence.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The data type of a sequence.
	DataType string `protobuf:"bytes,2,opt,name=data_type,json=dataType,proto3" json:"data_type,omitempty"`
	// The start value of a sequence.
	Start string `protobuf:"bytes,3,opt,name=start,proto3" json:"start,omitempty"`
	// The minimum value of a sequence.
	MinValue string `protobuf:"bytes,4,opt,name=min_value,json=minValue,proto3" json:"min_value,omitempty"`
	// The maximum value of a sequence.
	MaxValue string `protobuf:"bytes,5,opt,name=max_value,json=maxValue,proto3" json:"max_value,omitempty"`
	// The increment value of a sequence.
	Increment string `protobuf:"bytes,6,opt,name=increment,proto3" json:"increment,omitempty"`
	// Whether the sequence cycles.
	Cycle bool `protobuf:"varint,7,opt,name=cycle,proto3" json:"cycle,omitempty"`
	// Cache size of a sequence.
	CacheSize string `protobuf:"bytes,8,opt,name=cache_size,json=cacheSize,proto3" json:"cache_size,omitempty"`
	// The last value of a sequence.
	LastValue string `protobuf:"bytes,9,opt,name=last_value,json=lastValue,proto3" json:"last_value,omitempty"`
	// The table that owns the sequence.
	OwnerTable string `protobuf:"bytes,10,opt,name=owner_table,json=ownerTable,proto3" json:"owner_table,omitempty"`
	// The column that owns the sequence.
	OwnerColumn   string `protobuf:"bytes,11,opt,name=owner_column,json=ownerColumn,proto3" json:"owner_column,omitempty"`
	Comment       string `protobuf:"bytes,12,opt,name=comment,proto3" json:"comment,omitempty"`
	SkipDump      bool   `protobuf:"varint,13,opt,name=skip_dump,json=skipDump,proto3" json:"skip_dump,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SequenceMetadata) Reset() {
	*x = SequenceMetadata{}
	mi := &file_store_database_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SequenceMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SequenceMetadata) ProtoMessage() {}

func (x *SequenceMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_store_database_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SequenceMetadata.ProtoReflect.Descriptor instead.
func (*SequenceMetadata) Descriptor() ([]byte, []int) {
	return file_store_database_proto_rawDescGZIP(), []int{6}
}

func (x *SequenceMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SequenceMetadata) GetDataType() string {
	if x != nil {
		return x.DataType
	}
	return ""
}

func (x *SequenceMetadata) GetStart() string {
	if x != nil {
		return x.Start
	}
	return ""
}

func (x *SequenceMetadata) GetMinValue() string {
	if x != nil {
		return x.MinValue
	}
	return ""
}

func (x *SequenceMetadata) GetMaxValue() string {
	if x != nil {
		return x.MaxValue
	}
	return ""
}

func (x *SequenceMetadata) GetIncrement() string {
	if x != nil {
		return x.Increment
	}
	return ""
}

func (x *SequenceMetadata) GetCycle() bool {
	if x != nil {
		return x.Cycle
	}
	return false
}

func (x *SequenceMetadata) GetCacheSize() string {
	if x != nil {
		return x.CacheSize
	}
	return ""
}

func (x *SequenceMetadata) GetLastValue() string {
	if x != nil {
		return x.LastValue
	}
	return ""
}

func (x *SequenceMetadata) GetOwnerTable() string {
	if x != nil {
		return x.OwnerTable
	}
	return ""
}

func (x *SequenceMetadata) GetOwnerColumn() string {
	if x != nil {
		return x.OwnerColumn
	}
	return ""
}

func (x *SequenceMetadata) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *SequenceMetadata) GetSkipDump() bool {
	if x != nil {
		return x.SkipDump
	}
	return false
}

type TriggerMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the trigger.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The event that triggers this action, such as INSERT, UPDATE, DELETE, or TRUNCATE.
	Event string `protobuf:"bytes,3,opt,name=event,proto3" json:"event,omitempty"`
	// The timing of when the trigger fires, such as BEFORE or AFTER.
	Timing string `protobuf:"bytes,4,opt,name=timing,proto3" json:"timing,omitempty"`
	// The body of the trigger.
	Body                string `protobuf:"bytes,5,opt,name=body,proto3" json:"body,omitempty"`
	SqlMode             string `protobuf:"bytes,6,opt,name=sql_mode,json=sqlMode,proto3" json:"sql_mode,omitempty"`
	CharacterSetClient  string `protobuf:"bytes,7,opt,name=character_set_client,json=characterSetClient,proto3" json:"character_set_client,omitempty"`
	CollationConnection string `protobuf:"bytes,8,opt,name=collation_connection,json=collationConnection,proto3" json:"collation_connection,omitempty"`
	Comment             string `protobuf:"bytes,9,opt,name=comment,proto3" json:"comment,omitempty"`
	SkipDump            bool   `protobuf:"varint,10,opt,name=skip_dump,json=skipDump,proto3" json:"skip_dump,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *TriggerMetadata) Reset() {
	*x = TriggerMetadata{}
	mi := &file_store_database_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TriggerMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerMetadata) ProtoMessage() {}

func (x *TriggerMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_store_database_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerMetadata.ProtoReflect.Descriptor instead.
func (*TriggerMetadata) Descriptor() ([]byte, []int) {
	return file_store_database_proto_rawDescGZIP(), []int{7}
}

func (x *TriggerMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TriggerMetadata) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

func (x *TriggerMetadata) GetTiming() string {
	if x != nil {
		return x.Timing
	}
	return ""
}

func (x *TriggerMetadata) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *TriggerMetadata) GetSqlMode() string {
	if x != nil {
		return x.SqlMode
	}
	return ""
}

func (x *TriggerMetadata) GetCharacterSetClient() string {
	if x != nil {
		return x.CharacterSetClient
	}
	return ""
}

func (x *TriggerMetadata) GetCollationConnection() string {
	if x != nil {
		return x.CollationConnection
	}
	return ""
}

func (x *TriggerMetadata) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *TriggerMetadata) GetSkipDump() bool {
	if x != nil {
		return x.SkipDump
	}
	return false
}

// RuleMetadata is the metadata for PostgreSQL rules.
type RuleMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the rule.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The event type of the rule: SELECT, INSERT, UPDATE, or DELETE.
	Event string `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"`
	// The WHERE condition of the rule (optional).
	Condition string `protobuf:"bytes,3,opt,name=condition,proto3" json:"condition,omitempty"`
	// The command(s) to execute when the rule fires.
	Action string `protobuf:"bytes,4,opt,name=action,proto3" json:"action,omitempty"`
	// The is_instead indicates whether this is an INSTEAD rule.
	IsInstead bool `protobuf:"varint,5,opt,name=is_instead,json=isInstead,proto3" json:"is_instead,omitempty"`
	// The is_enabled indicates whether the rule is enabled.
	IsEnabled bool `protobuf:"varint,6,opt,name=is_enabled,json=isEnabled,proto3" json:"is_enabled,omitempty"`
	// The full CREATE RULE statement.
	Definition    string `protobuf:"bytes,7,opt,name=definition,proto3" json:"definition,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RuleMetadata) Reset() {
	*x = RuleMetadata{}
	mi := &file_store_database_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RuleMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuleMetadata) ProtoMessage() {}

func (x *RuleMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_store_database_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuleMetadata.ProtoReflect.Descriptor instead.
func (*RuleMetadata) Descriptor() ([]byte, []int) {
	return file_store_database_proto_rawDescGZIP(), []int{8}
}

func (x *RuleMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RuleMetadata) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

func (x *RuleMetadata) GetCondition() string {
	if x != nil {
		return x.Condition
	}
	return ""
}

func (x *RuleMetadata) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *RuleMetadata) GetIsInstead() bool {
	if x != nil {
		return x.IsInstead
	}
	return false
}

func (x *RuleMetadata) GetIsEnabled() bool {
	if x != nil {
		return x.IsEnabled
	}
	return false
}

func (x *RuleMetadata) GetDefinition() string {
	if x != nil {
		return x.Definition
	}
	return ""
}

type TaskMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the task.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The Snowflake-generated ID of the task.
	// Example: 01ad32a0-1bb6-5e93-0000-000000000001.
	Id string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	// The owner of the task.
	Owner string `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	// The comment of the task.
	Comment string `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment,omitempty"`
	// The warehouse of the task.
	Warehouse string `protobuf:"bytes,5,opt,name=warehouse,proto3" json:"warehouse,omitempty"`
	// The schedule interval of the task.
	Schedule string `protobuf:"bytes,6,opt,name=schedule,proto3" json:"schedule,omitempty"`
	// The predecessor tasks of the task.
	Predecessors []string `protobuf:"bytes,7,rep,name=predecessors,proto3" json:"predecessors,omitempty"`
	// The state of the task.
	State TaskMetadata_State `protobuf:"varint,8,opt,name=state,proto3,enum=bytebase.store.TaskMetadata_State" json:"state,omitempty"`
	// The condition of the task.
	Condition string `protobuf:"bytes,9,opt,name=condition,proto3" json:"condition,omitempty"`
	// The definition of the task.
	Definition    string `protobuf:"bytes,10,opt,name=definition,proto3" json:"definition,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskMetadata) Reset() {
	*x = TaskMetadata{}
	mi := &file_store_database_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskMetadata) ProtoMessage() {}

func (x *TaskMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_store_database_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskMetadata.ProtoReflect.Descriptor instead.
func (*TaskMetadata) Descriptor() ([]byte, []int) {
	return file_store_database_proto_rawDescGZIP(), []int{9}
}

func (x *TaskMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskMetadata) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *TaskMetadata) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *TaskMetadata) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *TaskMetadata) GetWarehouse() string {
	if x != nil {
		return x.Warehouse
	}
	return ""
}

func (x *TaskMetadata) GetSchedule() string {
	if x != nil {
		return x.Schedule
	}
	return ""
}

func (x *TaskMetadata) GetPredecessors() []string {
	if x != nil {
		return x.Predecessors
	}
	return nil
}

func (x *TaskMetadata) GetState() TaskMetadata_State {
	if x != nil {
		return x.State
	}
	return TaskMetadata_STATE_UNSPECIFIED
}

func (x *TaskMetadata) GetCondition() string {
	if x != nil {
		return x.Condition
	}
	return ""
}

func (x *TaskMetadata) GetDefinition() string {
	if x != nil {
		return x.Definition
	}
	return ""
}

type StreamMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the stream.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The table_name is the name of the table/view that the stream is created on.
	TableName string `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"table_name,omitempty"`
	// The owner of the stream.
	Owner string `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	// The comment of the stream.
	Comment string `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment,omitempty"`
	// The type of the stream.
	Type StreamMetadata_Type `protobuf:"varint,5,opt,name=type,proto3,enum=bytebase.store.StreamMetadata_Type" json:"type,omitempty"`
	// Indicates whether the stream was last read before the `stale_after` time.
	Stale bool `protobuf:"varint,6,opt,name=stale,proto3" json:"stale,omitempty"`
	// The mode of the stream.
	Mode StreamMetadata_Mode `protobuf:"varint,7,opt,name=mode,proto3,enum=bytebase.store.StreamMetadata_Mode" json:"mode,omitempty"`
	// The definition of the stream.
	Definition    string `protobuf:"bytes,8,opt,name=definition,proto3" json:"definition,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamMetadata) Reset() {
	*x = StreamMetadata{}
	mi := &file_store_database_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamMetadata) ProtoMessage() {}

func (x *StreamMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_store_database_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamMetadata.ProtoReflect.Descriptor instead.
func (*StreamMetadata) Descriptor() ([]byte, []int) {
	return file_store_database_proto_rawDescGZIP(), []int{10}
}

func (x *StreamMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StreamMetadata) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *StreamMetadata) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *StreamMetadata) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *StreamMetadata) GetType() StreamMetadata_Type {
	if x != nil {
		return x.Type
	}
	return StreamMetadata_TYPE_UNSPECIFIED
}

func (x *StreamMetadata) GetStale() bool {
	if x != nil {
		return x.Stale
	}
	return false
}

func (x *StreamMetadata) GetMode() StreamMetadata_Mode {
	if x != nil {
		return x.Mode
	}
	return StreamMetadata_MODE_UNSPECIFIED
}

func (x *StreamMetadata) GetDefinition() string {
	if x != nil {
		return x.Definition
	}
	return ""
}

// TableMetadata is the metadata for tables.
type TableMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the table.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The columns is the ordered list of columns in a table.
	Columns []*ColumnMetadata `protobuf:"bytes,2,rep,name=columns,proto3" json:"columns,omitempty"`
	// The indexes is the list of indexes in a table.
	Indexes []*IndexMetadata `protobuf:"bytes,3,rep,name=indexes,proto3" json:"indexes,omitempty"`
	// The engine is the engine of a table.
	Engine string `protobuf:"bytes,4,opt,name=engine,proto3" json:"engine,omitempty"`
	// The collation is the collation of a table.
	Collation string `protobuf:"bytes,5,opt,name=collation,proto3" json:"collation,omitempty"`
	// The character set of the table.
	Charset string `protobuf:"bytes,17,opt,name=charset,proto3" json:"charset,omitempty"`
	// The row_count is the estimated number of rows of a table.
	RowCount int64 `protobuf:"varint,6,opt,name=row_count,json=rowCount,proto3" json:"row_count,omitempty"`
	// The data_size is the estimated data size of a table.
	DataSize int64 `protobuf:"varint,7,opt,name=data_size,json=dataSize,proto3" json:"data_size,omitempty"`
	// The index_size is the estimated index size of a table.
	IndexSize int64 `protobuf:"varint,8,opt,name=index_size,json=indexSize,proto3" json:"index_size,omitempty"`
	// The data_free is the estimated free data size of a table.
	DataFree int64 `protobuf:"varint,9,opt,name=data_free,json=dataFree,proto3" json:"data_free,omitempty"`
	// The create_options is the create option of a table.
	CreateOptions string `protobuf:"bytes,10,opt,name=create_options,json=createOptions,proto3" json:"create_options,omitempty"`
	// The comment is the comment of a table.
	// classification and user_comment is parsed from the comment.
	Comment string `protobuf:"bytes,11,opt,name=comment,proto3" json:"comment,omitempty"`
	// The user_comment is the user comment of a table parsed from the comment.
	UserComment string `protobuf:"bytes,14,opt,name=user_comment,json=userComment,proto3" json:"user_comment,omitempty"`
	// The foreign_keys is the list of foreign keys in a table.
	ForeignKeys []*ForeignKeyMetadata `protobuf:"bytes,12,rep,name=foreign_keys,json=foreignKeys,proto3" json:"foreign_keys,omitempty"`
	// The partitions is the list of partitions in a table.
	Partitions []*TablePartitionMetadata `protobuf:"bytes,15,rep,name=partitions,proto3" json:"partitions,omitempty"`
	// The check_constraints is the list of check constraints in a table.
	CheckConstraints []*CheckConstraintMetadata `protobuf:"bytes,16,rep,name=check_constraints,json=checkConstraints,proto3" json:"check_constraints,omitempty"`
	Owner            string                     `protobuf:"bytes,18,opt,name=owner,proto3" json:"owner,omitempty"`
	// The sorting_keys is a tuple of column names or arbitrary expressions. ClickHouse specific field.
	// Reference: https://clickhouse.com/docs/en/engines/table-engines/mergetree-family/mergetree#order_by
	SortingKeys []string           `protobuf:"bytes,19,rep,name=sorting_keys,json=sortingKeys,proto3" json:"sorting_keys,omitempty"`
	Triggers    []*TriggerMetadata `protobuf:"bytes,20,rep,name=triggers,proto3" json:"triggers,omitempty"`
	SkipDump    bool               `protobuf:"varint,21,opt,name=skip_dump,json=skipDump,proto3" json:"skip_dump,omitempty"`
	// The rules is the list of rules in a table (PostgreSQL specific).
	Rules []*RuleMetadata `protobuf:"bytes,24,rep,name=rules,proto3" json:"rules,omitempty"`
	// https://docs.pingcap.com/tidb/stable/information-schema-tables/
	ShardingInfo string `protobuf:"bytes,22,opt,name=sharding_info,json=shardingInfo,proto3" json:"sharding_info,omitempty"`
	// https://docs.pingcap.com/tidb/stable/clustered-indexes/#clustered-indexes
	// CLUSTERED or NONCLUSTERED.
	PrimaryKeyType string `protobuf:"bytes,23,opt,name=primary_key_type,json=primaryKeyType,proto3" json:"primary_key_type,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TableMetadata) Reset() {
	*x = TableMetadata{}
	mi := &file_store_database_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TableMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableMetadata) ProtoMessage() {}

func (x *TableMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_store_database_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableMetadata.ProtoReflect.Descriptor instead.
func (*TableMetadata) Descriptor() ([]byte, []int) {
	return file_store_database_proto_rawDescGZIP(), []int{11}
}

func (x *TableMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TableMetadata) GetColumns() []*ColumnMetadata {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *TableMetadata) GetIndexes() []*IndexMetadata {
	if x != nil {
		return x.Indexes
	}
	return nil
}

func (x *TableMetadata) GetEngine() string {
	if x != nil {
		return x.Engine
	}
	return ""
}

func (x *TableMetadata) GetCollation() string {
	if x != nil {
		return x.Collation
	}
	return ""
}

func (x *TableMetadata) GetCharset() string {
	if x != nil {
		return x.Charset
	}
	return ""
}

func (x *TableMetadata) GetRowCount() int64 {
	if x != nil {
		return x.RowCount
	}
	return 0
}

func (x *TableMetadata) GetDataSize() int64 {
	if x != nil {
		return x.DataSize
	}
	return 0
}

func (x *TableMetadata) GetIndexSize() int64 {
	if x != nil {
		return x.IndexSize
	}
	return 0
}

func (x *TableMetadata) GetDataFree() int64 {
	if x != nil {
		return x.DataFree
	}
	return 0
}

func (x *TableMetadata) GetCreateOptions() string {
	if x != nil {
		return x.CreateOptions
	}
	return ""
}

func (x *TableMetadata) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *TableMetadata) GetUserComment() string {
	if x != nil {
		return x.UserComment
	}
	return ""
}

func (x *TableMetadata) GetForeignKeys() []*ForeignKeyMetadata {
	if x != nil {
		return x.ForeignKeys
	}
	return nil
}

func (x *TableMetadata) GetPartitions() []*TablePartitionMetadata {
	if x != nil {
		return x.Partitions
	}
	return nil
}

func (x *TableMetadata) GetCheckConstraints() []*CheckConstraintMetadata {
	if x != nil {
		return x.CheckConstraints
	}
	return nil
}

func (x *TableMetadata) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *TableMetadata) GetSortingKeys() []string {
	if x != nil {
		return x.SortingKeys
	}
	return nil
}

func (x *TableMetadata) GetTriggers() []*TriggerMetadata {
	if x != nil {
		return x.Triggers
	}
	return nil
}

func (x *TableMetadata) GetSkipDump() bool {
	if x != nil {
		return x.SkipDump
	}
	return false
}

func (x *TableMetadata) GetRules() []*RuleMetadata {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *TableMetadata) GetShardingInfo() string {
	if x != nil {
		return x.ShardingInfo
	}
	return ""
}

func (x *TableMetadata) GetPrimaryKeyType() string {
	if x != nil {
		return x.PrimaryKeyType
	}
	return ""
}

type CheckConstraintMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the check constraint.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The expression is the expression of a check constraint.
	Expression    string `protobuf:"bytes,2,opt,name=expression,proto3" json:"expression,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckConstraintMetadata) Reset() {
	*x = CheckConstraintMetadata{}
	mi := &file_store_database_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckConstraintMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckConstraintMetadata) ProtoMessage() {}

func (x *CheckConstraintMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_store_database_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckConstraintMetadata.ProtoReflect.Descriptor instead.
func (*CheckConstraintMetadata) Descriptor() ([]byte, []int) {
	return file_store_database_proto_rawDescGZIP(), []int{12}
}

func (x *CheckConstraintMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CheckConstraintMetadata) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

type ExternalTableMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the external table.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The external_server_name is the name of the external server.
	ExternalServerName string `protobuf:"bytes,2,opt,name=external_server_name,json=externalServerName,proto3" json:"external_server_name,omitempty"`
	// The external_database_name is the name of the external database.
	ExternalDatabaseName string `protobuf:"bytes,3,opt,name=external_database_name,json=externalDatabaseName,proto3" json:"external_database_name,omitempty"`
	// The columns is the ordered list of columns in a foreign table.
	Columns       []*ColumnMetadata `protobuf:"bytes,4,rep,name=columns,proto3" json:"columns,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExternalTableMetadata) Reset() {
	*x = ExternalTableMetadata{}
	mi := &file_store_database_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExternalTableMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalTableMetadata) ProtoMessage() {}

func (x *ExternalTableMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_store_database_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalTableMetadata.ProtoReflect.Descriptor instead.
func (*ExternalTableMetadata) Descriptor() ([]byte, []int) {
	return file_store_database_proto_rawDescGZIP(), []int{13}
}

func (x *ExternalTableMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExternalTableMetadata) GetExternalServerName() string {
	if x != nil {
		return x.ExternalServerName
	}
	return ""
}

func (x *ExternalTableMetadata) GetExternalDatabaseName() string {
	if x != nil {
		return x.ExternalDatabaseName
	}
	return ""
}

func (x *ExternalTableMetadata) GetColumns() []*ColumnMetadata {
	if x != nil {
		return x.Columns
	}
	return nil
}

// TablePartitionMetadata is the metadata for table partitions.
type TablePartitionMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the table partition.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The type of a table partition.
	Type TablePartitionMetadata_Type `protobuf:"varint,2,opt,name=type,proto3,enum=bytebase.store.TablePartitionMetadata_Type" json:"type,omitempty"`
	// The expression is the expression of a table partition.
	// For PostgreSQL, the expression is the text of {FOR VALUES
	// partition_bound_spec}, see
	// https://www.postgresql.org/docs/current/sql-createtable.html. For MySQL,
	// the expression is the `expr` or `column_list` of the following syntax.
	// PARTITION BY
	//
	//	{ [LINEAR] HASH(expr)
	//	| [LINEAR] KEY [ALGORITHM={1 | 2}] (column_list)
	//	| RANGE{(expr) | COLUMNS(column_list)}
	//	| LIST{(expr) | COLUMNS(column_list)} }.
	Expression string `protobuf:"bytes,3,opt,name=expression,proto3" json:"expression,omitempty"`
	// The value is the value of a table partition.
	// For MySQL, the value is for RANGE and LIST partition types,
	// - For a RANGE partition, it contains the value set in the partition's
	// VALUES LESS THAN clause, which can be either an integer or MAXVALUE.
	// - For a LIST partition, this column contains the values defined in the
	// partition's VALUES IN clause, which is a list of comma-separated integer
	// values.
	// - For others, it's an empty string.
	Value string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	// The use_default is whether the users use the default partition, it stores
	// the different value for different database engines. For MySQL, it's [INT]
	// type, 0 means not use default partition, otherwise, it's equals to number
	// in syntax [SUB]PARTITION {number}.
	UseDefault string `protobuf:"bytes,5,opt,name=use_default,json=useDefault,proto3" json:"use_default,omitempty"`
	// The subpartitions is the list of subpartitions in a table partition.
	Subpartitions    []*TablePartitionMetadata  `protobuf:"bytes,6,rep,name=subpartitions,proto3" json:"subpartitions,omitempty"`
	Indexes          []*IndexMetadata           `protobuf:"bytes,7,rep,name=indexes,proto3" json:"indexes,omitempty"`
	CheckConstraints []*CheckConstraintMetadata `protobuf:"bytes,8,rep,name=check_constraints,json=checkConstraints,proto3" json:"check_constraints,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *TablePartitionMetadata) Reset() {
	*x = TablePartitionMetadata{}
	mi := &file_store_database_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TablePartitionMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TablePartitionMetadata) ProtoMessage() {}

func (x *TablePartitionMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_store_database_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TablePartitionMetadata.ProtoReflect.Descriptor instead.
func (*TablePartitionMetadata) Descriptor() ([]byte, []int) {
	return file_store_database_proto_rawDescGZIP(), []int{14}
}

func (x *TablePartitionMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TablePartitionMetadata) GetType() TablePartitionMetadata_Type {
	if x != nil {
		return x.Type
	}
	return TablePartitionMetadata_TYPE_UNSPECIFIED
}

func (x *TablePartitionMetadata) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

func (x *TablePartitionMetadata) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *TablePartitionMetadata) GetUseDefault() string {
	if x != nil {
		return x.UseDefault
	}
	return ""
}

func (x *TablePartitionMetadata) GetSubpartitions() []*TablePartitionMetadata {
	if x != nil {
		return x.Subpartitions
	}
	return nil
}

func (x *TablePartitionMetadata) GetIndexes() []*IndexMetadata {
	if x != nil {
		return x.Indexes
	}
	return nil
}

func (x *TablePartitionMetadata) GetCheckConstraints() []*CheckConstraintMetadata {
	if x != nil {
		return x.CheckConstraints
	}
	return nil
}

// ColumnMetadata is the metadata for columns.
type ColumnMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the column.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The position is the position in columns.
	Position int32 `protobuf:"varint,2,opt,name=position,proto3" json:"position,omitempty"`
	// The default value of the column.
	Default string `protobuf:"bytes,3,opt,name=default,proto3" json:"default,omitempty"`
	// Deprecated.
	DefaultNull bool `protobuf:"varint,4,opt,name=default_null,json=defaultNull,proto3" json:"default_null,omitempty"`
	// Deprecated.
	DefaultExpression string `protobuf:"bytes,5,opt,name=default_expression,json=defaultExpression,proto3" json:"default_expression,omitempty"`
	// Oracle specific metadata.
	// The default_on_null is the default on null of a column.
	DefaultOnNull bool `protobuf:"varint,16,opt,name=default_on_null,json=defaultOnNull,proto3" json:"default_on_null,omitempty"`
	// The on_update is the on update action of a column.
	// For MySQL like databases, it's only supported for TIMESTAMP columns with
	// CURRENT_TIMESTAMP as on update value.
	OnUpdate string `protobuf:"bytes,13,opt,name=on_update,json=onUpdate,proto3" json:"on_update,omitempty"`
	// The nullable is the nullable of a column.
	Nullable bool `protobuf:"varint,6,opt,name=nullable,proto3" json:"nullable,omitempty"`
	// The type is the type of a column.
	Type string `protobuf:"bytes,7,opt,name=type,proto3" json:"type,omitempty"`
	// The character_set is the character_set of a column.
	CharacterSet string `protobuf:"bytes,8,opt,name=character_set,json=characterSet,proto3" json:"character_set,omitempty"`
	// The collation is the collation of a column.
	Collation string `protobuf:"bytes,9,opt,name=collation,proto3" json:"collation,omitempty"`
	// The comment is the comment of a column.
	// classification and user_comment is parsed from the comment.
	Comment string `protobuf:"bytes,10,opt,name=comment,proto3" json:"comment,omitempty"`
	// The user_comment is the user comment of a table parsed from the comment.
	UserComment string `protobuf:"bytes,12,opt,name=user_comment,json=userComment,proto3" json:"user_comment,omitempty"`
	// The generation is for generated columns.
	Generation *GenerationMetadata `protobuf:"bytes,14,opt,name=generation,proto3" json:"generation,omitempty"`
	IsIdentity bool                `protobuf:"varint,17,opt,name=is_identity,json=isIdentity,proto3" json:"is_identity,omitempty"`
	// The identity_generation is for identity columns, PG only.
	IdentityGeneration ColumnMetadata_IdentityGeneration `protobuf:"varint,15,opt,name=identity_generation,json=identityGeneration,proto3,enum=bytebase.store.ColumnMetadata_IdentityGeneration" json:"identity_generation,omitempty"`
	// The identity_seed is for identity columns, MSSQL only.
	IdentitySeed int64 `protobuf:"varint,18,opt,name=identity_seed,json=identitySeed,proto3" json:"identity_seed,omitempty"`
	// The identity_increment is for identity columns, MSSQL only.
	IdentityIncrement int64 `protobuf:"varint,19,opt,name=identity_increment,json=identityIncrement,proto3" json:"identity_increment,omitempty"`
	// The default_constraint_name is the name of the default constraint, MSSQL only.
	// In MSSQL, default values are implemented as named constraints. When modifying or
	// dropping a column's default value, you must reference the constraint by name.
	// This field stores the actual constraint name from the database.
	//
	// Example: A column definition like:
	//
	//	CREATE TABLE employees (
	//	  status NVARCHAR(20) DEFAULT 'active'
	//	)
	//
	// Will create a constraint with an auto-generated name like 'DF__employees__statu__3B75D760'
	// or a user-defined name if specified:
	//
	//	ALTER TABLE employees ADD CONSTRAINT DF_employees_status DEFAULT 'active' FOR status
	//
	// To modify the default, you must first drop the existing constraint by name:
	//
	//	ALTER TABLE employees DROP CONSTRAINT DF__employees__statu__3B75D760
	//	ALTER TABLE employees ADD CONSTRAINT DF_employees_status DEFAULT 'inactive' FOR status
	//
	// This field is populated when syncing from the database. When empty (e.g., when parsing
	// from SQL files), the system cannot automatically drop the constraint.
	DefaultConstraintName string `protobuf:"bytes,20,opt,name=default_constraint_name,json=defaultConstraintName,proto3" json:"default_constraint_name,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ColumnMetadata) Reset() {
	*x = ColumnMetadata{}
	mi := &file_store_database_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ColumnMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnMetadata) ProtoMessage() {}

func (x *ColumnMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_store_database_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnMetadata.ProtoReflect.Descriptor instead.
func (*ColumnMetadata) Descriptor() ([]byte, []int) {
	return file_store_database_proto_rawDescGZIP(), []int{15}
}

func (x *ColumnMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ColumnMetadata) GetPosition() int32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *ColumnMetadata) GetDefault() string {
	if x != nil {
		return x.Default
	}
	return ""
}

func (x *ColumnMetadata) GetDefaultNull() bool {
	if x != nil {
		return x.DefaultNull
	}
	return false
}

func (x *ColumnMetadata) GetDefaultExpression() string {
	if x != nil {
		return x.DefaultExpression
	}
	return ""
}

func (x *ColumnMetadata) GetDefaultOnNull() bool {
	if x != nil {
		return x.DefaultOnNull
	}
	return false
}

func (x *ColumnMetadata) GetOnUpdate() string {
	if x != nil {
		return x.OnUpdate
	}
	return ""
}

func (x *ColumnMetadata) GetNullable() bool {
	if x != nil {
		return x.Nullable
	}
	return false
}

func (x *ColumnMetadata) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ColumnMetadata) GetCharacterSet() string {
	if x != nil {
		return x.CharacterSet
	}
	return ""
}

func (x *ColumnMetadata) GetCollation() string {
	if x != nil {
		return x.Collation
	}
	return ""
}

func (x *ColumnMetadata) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *ColumnMetadata) GetUserComment() string {
	if x != nil {
		return x.UserComment
	}
	return ""
}

func (x *ColumnMetadata) GetGeneration() *GenerationMetadata {
	if x != nil {
		return x.Generation
	}
	return nil
}

func (x *ColumnMetadata) GetIsIdentity() bool {
	if x != nil {
		return x.IsIdentity
	}
	return false
}

func (x *ColumnMetadata) GetIdentityGeneration() ColumnMetadata_IdentityGeneration {
	if x != nil {
		return x.IdentityGeneration
	}
	return ColumnMetadata_IDENTITY_GENERATION_UNSPECIFIED
}

func (x *ColumnMetadata) GetIdentitySeed() int64 {
	if x != nil {
		return x.IdentitySeed
	}
	return 0
}

func (x *ColumnMetadata) GetIdentityIncrement() int64 {
	if x != nil {
		return x.IdentityIncrement
	}
	return 0
}

func (x *ColumnMetadata) GetDefaultConstraintName() string {
	if x != nil {
		return x.DefaultConstraintName
	}
	return ""
}

type GenerationMetadata struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Type          GenerationMetadata_Type `protobuf:"varint,1,opt,name=type,proto3,enum=bytebase.store.GenerationMetadata_Type" json:"type,omitempty"`
	Expression    string                  `protobuf:"bytes,2,opt,name=expression,proto3" json:"expression,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GenerationMetadata) Reset() {
	*x = GenerationMetadata{}
	mi := &file_store_database_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GenerationMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GenerationMetadata) ProtoMessage() {}

func (x *GenerationMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_store_database_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GenerationMetadata.ProtoReflect.Descriptor instead.
func (*GenerationMetadata) Descriptor() ([]byte, []int) {
	return file_store_database_proto_rawDescGZIP(), []int{16}
}

func (x *GenerationMetadata) GetType() GenerationMetadata_Type {
	if x != nil {
		return x.Type
	}
	return GenerationMetadata_TYPE_UNSPECIFIED
}

func (x *GenerationMetadata) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

// ViewMetadata is the metadata for views.
type ViewMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the view.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The definition is the definition of a view.
	Definition string `protobuf:"bytes,2,opt,name=definition,proto3" json:"definition,omitempty"`
	// The comment is the comment of a view.
	Comment string `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
	// The list of dependency columns of a view.
	DependencyColumns []*DependencyColumn `protobuf:"bytes,4,rep,name=dependency_columns,json=dependencyColumns,proto3" json:"dependency_columns,omitempty"`
	// The ordered list of columns in the view.
	Columns []*ColumnMetadata `protobuf:"bytes,5,rep,name=columns,proto3" json:"columns,omitempty"`
	// The list of triggers in the view.
	Triggers []*TriggerMetadata `protobuf:"bytes,6,rep,name=triggers,proto3" json:"triggers,omitempty"`
	SkipDump bool               `protobuf:"varint,7,opt,name=skip_dump,json=skipDump,proto3" json:"skip_dump,omitempty"`
	// The rules is the list of rules in a view (PostgreSQL specific).
	Rules         []*RuleMetadata `protobuf:"bytes,8,rep,name=rules,proto3" json:"rules,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ViewMetadata) Reset() {
	*x = ViewMetadata{}
	mi := &file_store_database_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ViewMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewMetadata) ProtoMessage() {}

func (x *ViewMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_store_database_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewMetadata.ProtoReflect.Descriptor instead.
func (*ViewMetadata) Descriptor() ([]byte, []int) {
	return file_store_database_proto_rawDescGZIP(), []int{17}
}

func (x *ViewMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ViewMetadata) GetDefinition() string {
	if x != nil {
		return x.Definition
	}
	return ""
}

func (x *ViewMetadata) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *ViewMetadata) GetDependencyColumns() []*DependencyColumn {
	if x != nil {
		return x.DependencyColumns
	}
	return nil
}

func (x *ViewMetadata) GetColumns() []*ColumnMetadata {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *ViewMetadata) GetTriggers() []*TriggerMetadata {
	if x != nil {
		return x.Triggers
	}
	return nil
}

func (x *ViewMetadata) GetSkipDump() bool {
	if x != nil {
		return x.SkipDump
	}
	return false
}

func (x *ViewMetadata) GetRules() []*RuleMetadata {
	if x != nil {
		return x.Rules
	}
	return nil
}

// DependencyColumn is the metadata for dependency columns.
type DependencyColumn struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The schema is the schema of a reference column.
	Schema string `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
	// The table is the table of a reference column.
	Table string `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
	// The column is the name of a reference column.
	Column        string `protobuf:"bytes,3,opt,name=column,proto3" json:"column,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DependencyColumn) Reset() {
	*x = DependencyColumn{}
	mi := &file_store_database_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DependencyColumn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DependencyColumn) ProtoMessage() {}

func (x *DependencyColumn) ProtoReflect() protoreflect.Message {
	mi := &file_store_database_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DependencyColumn.ProtoReflect.Descriptor instead.
func (*DependencyColumn) Descriptor() ([]byte, []int) {
	return file_store_database_proto_rawDescGZIP(), []int{18}
}

func (x *DependencyColumn) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *DependencyColumn) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *DependencyColumn) GetColumn() string {
	if x != nil {
		return x.Column
	}
	return ""
}

// MaterializedViewMetadata is the metadata for materialized views.
type MaterializedViewMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the materialized view.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The definition is the definition of a view.
	Definition string `protobuf:"bytes,2,opt,name=definition,proto3" json:"definition,omitempty"`
	// The comment is the comment of a view.
	Comment string `protobuf:"bytes,3,opt,name=comment,proto3" json:"comment,omitempty"`
	// The list of dependency columns of the view.
	DependencyColumns []*DependencyColumn `protobuf:"bytes,4,rep,name=dependency_columns,json=dependencyColumns,proto3" json:"dependency_columns,omitempty"`
	// The ordered list of columns in the materialized view.
	Triggers []*TriggerMetadata `protobuf:"bytes,5,rep,name=triggers,proto3" json:"triggers,omitempty"`
	// The list of indexes in the materialized view.
	Indexes       []*IndexMetadata `protobuf:"bytes,6,rep,name=indexes,proto3" json:"indexes,omitempty"`
	SkipDump      bool             `protobuf:"varint,7,opt,name=skip_dump,json=skipDump,proto3" json:"skip_dump,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MaterializedViewMetadata) Reset() {
	*x = MaterializedViewMetadata{}
	mi := &file_store_database_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MaterializedViewMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MaterializedViewMetadata) ProtoMessage() {}

func (x *MaterializedViewMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_store_database_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MaterializedViewMetadata.ProtoReflect.Descriptor instead.
func (*MaterializedViewMetadata) Descriptor() ([]byte, []int) {
	return file_store_database_proto_rawDescGZIP(), []int{19}
}

func (x *MaterializedViewMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MaterializedViewMetadata) GetDefinition() string {
	if x != nil {
		return x.Definition
	}
	return ""
}

func (x *MaterializedViewMetadata) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *MaterializedViewMetadata) GetDependencyColumns() []*DependencyColumn {
	if x != nil {
		return x.DependencyColumns
	}
	return nil
}

func (x *MaterializedViewMetadata) GetTriggers() []*TriggerMetadata {
	if x != nil {
		return x.Triggers
	}
	return nil
}

func (x *MaterializedViewMetadata) GetIndexes() []*IndexMetadata {
	if x != nil {
		return x.Indexes
	}
	return nil
}

func (x *MaterializedViewMetadata) GetSkipDump() bool {
	if x != nil {
		return x.SkipDump
	}
	return false
}

type DependencyTable struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The schema is the schema of a reference table.
	Schema string `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
	// The table is the name of a reference table.
	Table         string `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DependencyTable) Reset() {
	*x = DependencyTable{}
	mi := &file_store_database_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DependencyTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DependencyTable) ProtoMessage() {}

func (x *DependencyTable) ProtoReflect() protoreflect.Message {
	mi := &file_store_database_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DependencyTable.ProtoReflect.Descriptor instead.
func (*DependencyTable) Descriptor() ([]byte, []int) {
	return file_store_database_proto_rawDescGZIP(), []int{20}
}

func (x *DependencyTable) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *DependencyTable) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

// FunctionMetadata is the metadata for functions.
type FunctionMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the function.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The definition is the definition of a function.
	Definition string `protobuf:"bytes,2,opt,name=definition,proto3" json:"definition,omitempty"`
	// The signature is the name with the number and type of input arguments the
	// function takes.
	Signature string `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	// MySQL specific metadata.
	CharacterSetClient  string `protobuf:"bytes,4,opt,name=character_set_client,json=characterSetClient,proto3" json:"character_set_client,omitempty"`
	CollationConnection string `protobuf:"bytes,5,opt,name=collation_connection,json=collationConnection,proto3" json:"collation_connection,omitempty"`
	DatabaseCollation   string `protobuf:"bytes,6,opt,name=database_collation,json=databaseCollation,proto3" json:"database_collation,omitempty"`
	SqlMode             string `protobuf:"bytes,7,opt,name=sql_mode,json=sqlMode,proto3" json:"sql_mode,omitempty"`
	Comment             string `protobuf:"bytes,8,opt,name=comment,proto3" json:"comment,omitempty"`
	// The dependency_tables is the list of dependency tables of a function.
	// For PostgreSQL, it's the list of tables that the function depends on the return type definition.
	DependencyTables []*DependencyTable `protobuf:"bytes,9,rep,name=dependency_tables,json=dependencyTables,proto3" json:"dependency_tables,omitempty"`
	SkipDump         bool               `protobuf:"varint,10,opt,name=skip_dump,json=skipDump,proto3" json:"skip_dump,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *FunctionMetadata) Reset() {
	*x = FunctionMetadata{}
	mi := &file_store_database_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionMetadata) ProtoMessage() {}

func (x *FunctionMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_store_database_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionMetadata.ProtoReflect.Descriptor instead.
func (*FunctionMetadata) Descriptor() ([]byte, []int) {
	return file_store_database_proto_rawDescGZIP(), []int{21}
}

func (x *FunctionMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FunctionMetadata) GetDefinition() string {
	if x != nil {
		return x.Definition
	}
	return ""
}

func (x *FunctionMetadata) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *FunctionMetadata) GetCharacterSetClient() string {
	if x != nil {
		return x.CharacterSetClient
	}
	return ""
}

func (x *FunctionMetadata) GetCollationConnection() string {
	if x != nil {
		return x.CollationConnection
	}
	return ""
}

func (x *FunctionMetadata) GetDatabaseCollation() string {
	if x != nil {
		return x.DatabaseCollation
	}
	return ""
}

func (x *FunctionMetadata) GetSqlMode() string {
	if x != nil {
		return x.SqlMode
	}
	return ""
}

func (x *FunctionMetadata) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *FunctionMetadata) GetDependencyTables() []*DependencyTable {
	if x != nil {
		return x.DependencyTables
	}
	return nil
}

func (x *FunctionMetadata) GetSkipDump() bool {
	if x != nil {
		return x.SkipDump
	}
	return false
}

// ProcedureMetadata is the metadata for procedures.
type ProcedureMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the procedure.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The definition is the definition of a procedure.
	Definition string `protobuf:"bytes,2,opt,name=definition,proto3" json:"definition,omitempty"`
	// The signature is the name with the number and type of input arguments the
	// function takes.
	Signature string `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
	// MySQL specific metadata.
	CharacterSetClient  string `protobuf:"bytes,4,opt,name=character_set_client,json=characterSetClient,proto3" json:"character_set_client,omitempty"`
	CollationConnection string `protobuf:"bytes,5,opt,name=collation_connection,json=collationConnection,proto3" json:"collation_connection,omitempty"`
	DatabaseCollation   string `protobuf:"bytes,6,opt,name=database_collation,json=databaseCollation,proto3" json:"database_collation,omitempty"`
	SqlMode             string `protobuf:"bytes,7,opt,name=sql_mode,json=sqlMode,proto3" json:"sql_mode,omitempty"`
	Comment             string `protobuf:"bytes,9,opt,name=comment,proto3" json:"comment,omitempty"`
	SkipDump            bool   `protobuf:"varint,8,opt,name=skip_dump,json=skipDump,proto3" json:"skip_dump,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ProcedureMetadata) Reset() {
	*x = ProcedureMetadata{}
	mi := &file_store_database_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcedureMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcedureMetadata) ProtoMessage() {}

func (x *ProcedureMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_store_database_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcedureMetadata.ProtoReflect.Descriptor instead.
func (*ProcedureMetadata) Descriptor() ([]byte, []int) {
	return file_store_database_proto_rawDescGZIP(), []int{22}
}

func (x *ProcedureMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProcedureMetadata) GetDefinition() string {
	if x != nil {
		return x.Definition
	}
	return ""
}

func (x *ProcedureMetadata) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *ProcedureMetadata) GetCharacterSetClient() string {
	if x != nil {
		return x.CharacterSetClient
	}
	return ""
}

func (x *ProcedureMetadata) GetCollationConnection() string {
	if x != nil {
		return x.CollationConnection
	}
	return ""
}

func (x *ProcedureMetadata) GetDatabaseCollation() string {
	if x != nil {
		return x.DatabaseCollation
	}
	return ""
}

func (x *ProcedureMetadata) GetSqlMode() string {
	if x != nil {
		return x.SqlMode
	}
	return ""
}

func (x *ProcedureMetadata) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *ProcedureMetadata) GetSkipDump() bool {
	if x != nil {
		return x.SkipDump
	}
	return false
}

// PackageMetadata is the metadata for packages.
type PackageMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the package.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The definition is the definition of a package.
	Definition    string `protobuf:"bytes,2,opt,name=definition,proto3" json:"definition,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PackageMetadata) Reset() {
	*x = PackageMetadata{}
	mi := &file_store_database_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PackageMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageMetadata) ProtoMessage() {}

func (x *PackageMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_store_database_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageMetadata.ProtoReflect.Descriptor instead.
func (*PackageMetadata) Descriptor() ([]byte, []int) {
	return file_store_database_proto_rawDescGZIP(), []int{23}
}

func (x *PackageMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PackageMetadata) GetDefinition() string {
	if x != nil {
		return x.Definition
	}
	return ""
}

// IndexMetadata is the metadata for indexes.
type IndexMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the index.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The expressions are the ordered columns or expressions of an index.
	// This could refer to a column or an expression.
	Expressions []string `protobuf:"bytes,2,rep,name=expressions,proto3" json:"expressions,omitempty"`
	// The ordered list of key lengths for the index.
	// If the key length is not specified, it is -1.
	KeyLength []int64 `protobuf:"varint,9,rep,packed,name=key_length,json=keyLength,proto3" json:"key_length,omitempty"`
	// The ordered list of descending flags for the index columns.
	Descending []bool `protobuf:"varint,10,rep,packed,name=descending,proto3" json:"descending,omitempty"`
	// The type is the type of an index.
	Type string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	// The unique is whether the index is unique.
	Unique bool `protobuf:"varint,4,opt,name=unique,proto3" json:"unique,omitempty"`
	// The primary is whether the index is a primary key index.
	Primary bool `protobuf:"varint,5,opt,name=primary,proto3" json:"primary,omitempty"`
	// The visible is whether the index is visible.
	Visible bool `protobuf:"varint,6,opt,name=visible,proto3" json:"visible,omitempty"`
	// The comment is the comment of an index.
	Comment string `protobuf:"bytes,7,opt,name=comment,proto3" json:"comment,omitempty"`
	// The definition of an index.
	Definition string `protobuf:"bytes,8,opt,name=definition,proto3" json:"definition,omitempty"`
	// The schema name of the parent index.
	ParentIndexSchema string `protobuf:"bytes,11,opt,name=parent_index_schema,json=parentIndexSchema,proto3" json:"parent_index_schema,omitempty"`
	// The index name of the parent index.
	ParentIndexName string `protobuf:"bytes,12,opt,name=parent_index_name,json=parentIndexName,proto3" json:"parent_index_name,omitempty"`
	// The number of granules in the block. It's a ClickHouse specific field.
	Granularity int64 `protobuf:"varint,13,opt,name=granularity,proto3" json:"granularity,omitempty"`
	// It's a PostgreSQL specific field.
	// The unique constraint and unique index are not the same thing in PostgreSQL.
	IsConstraint bool `protobuf:"varint,14,opt,name=is_constraint,json=isConstraint,proto3" json:"is_constraint,omitempty"`
	// Spatial index specific configuration
	SpatialConfig *SpatialIndexConfig `protobuf:"bytes,15,opt,name=spatial_config,json=spatialConfig,proto3" json:"spatial_config,omitempty"`
	// https://www.postgresql.org/docs/current/catalog-pg-opclass.html
	// Name of the operator class for each column. (PostgreSQL specific).
	OpclassNames []string `protobuf:"bytes,16,rep,name=opclass_names,json=opclassNames,proto3" json:"opclass_names,omitempty"`
	// True if the operator class is the default. (PostgreSQL specific).
	OpclassDefaults []bool `protobuf:"varint,17,rep,packed,name=opclass_defaults,json=opclassDefaults,proto3" json:"opclass_defaults,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *IndexMetadata) Reset() {
	*x = IndexMetadata{}
	mi := &file_store_database_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IndexMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexMetadata) ProtoMessage() {}

func (x *IndexMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_store_database_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexMetadata.ProtoReflect.Descriptor instead.
func (*IndexMetadata) Descriptor() ([]byte, []int) {
	return file_store_database_proto_rawDescGZIP(), []int{24}
}

func (x *IndexMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IndexMetadata) GetExpressions() []string {
	if x != nil {
		return x.Expressions
	}
	return nil
}

func (x *IndexMetadata) GetKeyLength() []int64 {
	if x != nil {
		return x.KeyLength
	}
	return nil
}

func (x *IndexMetadata) GetDescending() []bool {
	if x != nil {
		return x.Descending
	}
	return nil
}

func (x *IndexMetadata) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *IndexMetadata) GetUnique() bool {
	if x != nil {
		return x.Unique
	}
	return false
}

func (x *IndexMetadata) GetPrimary() bool {
	if x != nil {
		return x.Primary
	}
	return false
}

func (x *IndexMetadata) GetVisible() bool {
	if x != nil {
		return x.Visible
	}
	return false
}

func (x *IndexMetadata) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *IndexMetadata) GetDefinition() string {
	if x != nil {
		return x.Definition
	}
	return ""
}

func (x *IndexMetadata) GetParentIndexSchema() string {
	if x != nil {
		return x.ParentIndexSchema
	}
	return ""
}

func (x *IndexMetadata) GetParentIndexName() string {
	if x != nil {
		return x.ParentIndexName
	}
	return ""
}

func (x *IndexMetadata) GetGranularity() int64 {
	if x != nil {
		return x.Granularity
	}
	return 0
}

func (x *IndexMetadata) GetIsConstraint() bool {
	if x != nil {
		return x.IsConstraint
	}
	return false
}

func (x *IndexMetadata) GetSpatialConfig() *SpatialIndexConfig {
	if x != nil {
		return x.SpatialConfig
	}
	return nil
}

func (x *IndexMetadata) GetOpclassNames() []string {
	if x != nil {
		return x.OpclassNames
	}
	return nil
}

func (x *IndexMetadata) GetOpclassDefaults() []bool {
	if x != nil {
		return x.OpclassDefaults
	}
	return nil
}

// SpatialIndexConfig is the configuration for spatial indexes across different database engines.
type SpatialIndexConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Index method/type (database-specific)
	// Examples: "SPATIAL" (MySQL/SQL Server), "GIST"/"SPGIST" (PostgreSQL), "MDSYS.SPATIAL_INDEX_V2" (Oracle)
	Method string `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	// Tessellation configuration (primarily SQL Server)
	Tessellation *TessellationConfig `protobuf:"bytes,2,opt,name=tessellation,proto3" json:"tessellation,omitempty"`
	// Storage and performance parameters
	Storage *StorageConfig `protobuf:"bytes,3,opt,name=storage,proto3" json:"storage,omitempty"`
	// Dimensional and constraint parameters
	Dimensional *DimensionalConfig `protobuf:"bytes,4,opt,name=dimensional,proto3" json:"dimensional,omitempty"`
	// Database-specific parameters (stored as key-value pairs for extensibility)
	EngineSpecific map[string]string `protobuf:"bytes,5,rep,name=engine_specific,json=engineSpecific,proto3" json:"engine_specific,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SpatialIndexConfig) Reset() {
	*x = SpatialIndexConfig{}
	mi := &file_store_database_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpatialIndexConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpatialIndexConfig) ProtoMessage() {}

func (x *SpatialIndexConfig) ProtoReflect() protoreflect.Message {
	mi := &file_store_database_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpatialIndexConfig.ProtoReflect.Descriptor instead.
func (*SpatialIndexConfig) Descriptor() ([]byte, []int) {
	return file_store_database_proto_rawDescGZIP(), []int{25}
}

func (x *SpatialIndexConfig) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *SpatialIndexConfig) GetTessellation() *TessellationConfig {
	if x != nil {
		return x.Tessellation
	}
	return nil
}

func (x *SpatialIndexConfig) GetStorage() *StorageConfig {
	if x != nil {
		return x.Storage
	}
	return nil
}

func (x *SpatialIndexConfig) GetDimensional() *DimensionalConfig {
	if x != nil {
		return x.Dimensional
	}
	return nil
}

func (x *SpatialIndexConfig) GetEngineSpecific() map[string]string {
	if x != nil {
		return x.EngineSpecific
	}
	return nil
}

// TessellationConfig defines tessellation parameters for spatial indexes.
type TessellationConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Tessellation scheme
	// Examples: GEOMETRY_GRID, GEOGRAPHY_GRID, GEOMETRY_AUTO_GRID, GEOGRAPHY_AUTO_GRID
	Scheme string `protobuf:"bytes,1,opt,name=scheme,proto3" json:"scheme,omitempty"`
	// Bounding box for GEOMETRY indexes (SQL Server)
	BoundingBox *BoundingBox `protobuf:"bytes,2,opt,name=bounding_box,json=boundingBox,proto3" json:"bounding_box,omitempty"`
	// Grid level configuration (SQL Server)
	GridLevels []*GridLevel `protobuf:"bytes,3,rep,name=grid_levels,json=gridLevels,proto3" json:"grid_levels,omitempty"`
	// Cells per object (SQL Server)
	CellsPerObject int32 `protobuf:"varint,4,opt,name=cells_per_object,json=cellsPerObject,proto3" json:"cells_per_object,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TessellationConfig) Reset() {
	*x = TessellationConfig{}
	mi := &file_store_database_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TessellationConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TessellationConfig) ProtoMessage() {}

func (x *TessellationConfig) ProtoReflect() protoreflect.Message {
	mi := &file_store_database_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TessellationConfig.ProtoReflect.Descriptor instead.
func (*TessellationConfig) Descriptor() ([]byte, []int) {
	return file_store_database_proto_rawDescGZIP(), []int{26}
}

func (x *TessellationConfig) GetScheme() string {
	if x != nil {
		return x.Scheme
	}
	return ""
}

func (x *TessellationConfig) GetBoundingBox() *BoundingBox {
	if x != nil {
		return x.BoundingBox
	}
	return nil
}

func (x *TessellationConfig) GetGridLevels() []*GridLevel {
	if x != nil {
		return x.GridLevels
	}
	return nil
}

func (x *TessellationConfig) GetCellsPerObject() int32 {
	if x != nil {
		return x.CellsPerObject
	}
	return 0
}

// BoundingBox defines the bounding box for spatial indexes.
type BoundingBox struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Xmin          float64                `protobuf:"fixed64,1,opt,name=xmin,proto3" json:"xmin,omitempty"`
	Ymin          float64                `protobuf:"fixed64,2,opt,name=ymin,proto3" json:"ymin,omitempty"`
	Xmax          float64                `protobuf:"fixed64,3,opt,name=xmax,proto3" json:"xmax,omitempty"`
	Ymax          float64                `protobuf:"fixed64,4,opt,name=ymax,proto3" json:"ymax,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BoundingBox) Reset() {
	*x = BoundingBox{}
	mi := &file_store_database_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BoundingBox) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoundingBox) ProtoMessage() {}

func (x *BoundingBox) ProtoReflect() protoreflect.Message {
	mi := &file_store_database_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoundingBox.ProtoReflect.Descriptor instead.
func (*BoundingBox) Descriptor() ([]byte, []int) {
	return file_store_database_proto_rawDescGZIP(), []int{27}
}

func (x *BoundingBox) GetXmin() float64 {
	if x != nil {
		return x.Xmin
	}
	return 0
}

func (x *BoundingBox) GetYmin() float64 {
	if x != nil {
		return x.Ymin
	}
	return 0
}

func (x *BoundingBox) GetXmax() float64 {
	if x != nil {
		return x.Xmax
	}
	return 0
}

func (x *BoundingBox) GetYmax() float64 {
	if x != nil {
		return x.Ymax
	}
	return 0
}

// GridLevel defines a grid level for spatial tessellation.
type GridLevel struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Level         int32                  `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`    // 1-4 for SQL Server
	Density       string                 `protobuf:"bytes,2,opt,name=density,proto3" json:"density,omitempty"` // LOW, MEDIUM, HIGH
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GridLevel) Reset() {
	*x = GridLevel{}
	mi := &file_store_database_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GridLevel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GridLevel) ProtoMessage() {}

func (x *GridLevel) ProtoReflect() protoreflect.Message {
	mi := &file_store_database_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GridLevel.ProtoReflect.Descriptor instead.
func (*GridLevel) Descriptor() ([]byte, []int) {
	return file_store_database_proto_rawDescGZIP(), []int{28}
}

func (x *GridLevel) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *GridLevel) GetDensity() string {
	if x != nil {
		return x.Density
	}
	return ""
}

// StorageConfig defines storage and performance parameters for spatial indexes.
type StorageConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// PostgreSQL parameters
	Fillfactor int32  `protobuf:"varint,1,opt,name=fillfactor,proto3" json:"fillfactor,omitempty"` // 10-100
	Buffering  string `protobuf:"bytes,2,opt,name=buffering,proto3" json:"buffering,omitempty"`    // auto, on, off
	// Oracle parameters
	Tablespace     string `protobuf:"bytes,3,opt,name=tablespace,proto3" json:"tablespace,omitempty"`
	WorkTablespace string `protobuf:"bytes,4,opt,name=work_tablespace,json=workTablespace,proto3" json:"work_tablespace,omitempty"`
	SdoLevel       int32  `protobuf:"varint,5,opt,name=sdo_level,json=sdoLevel,proto3" json:"sdo_level,omitempty"`
	CommitInterval int32  `protobuf:"varint,6,opt,name=commit_interval,json=commitInterval,proto3" json:"commit_interval,omitempty"`
	// SQL Server parameters
	PadIndex        bool   `protobuf:"varint,7,opt,name=pad_index,json=padIndex,proto3" json:"pad_index,omitempty"`
	SortInTempdb    string `protobuf:"bytes,8,opt,name=sort_in_tempdb,json=sortInTempdb,proto3" json:"sort_in_tempdb,omitempty"` // ON, OFF
	DropExisting    bool   `protobuf:"varint,9,opt,name=drop_existing,json=dropExisting,proto3" json:"drop_existing,omitempty"`
	Online          bool   `protobuf:"varint,10,opt,name=online,proto3" json:"online,omitempty"`
	AllowRowLocks   bool   `protobuf:"varint,11,opt,name=allow_row_locks,json=allowRowLocks,proto3" json:"allow_row_locks,omitempty"`
	AllowPageLocks  bool   `protobuf:"varint,12,opt,name=allow_page_locks,json=allowPageLocks,proto3" json:"allow_page_locks,omitempty"`
	Maxdop          int32  `protobuf:"varint,13,opt,name=maxdop,proto3" json:"maxdop,omitempty"`
	DataCompression string `protobuf:"bytes,14,opt,name=data_compression,json=dataCompression,proto3" json:"data_compression,omitempty"` // NONE, ROW, PAGE
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *StorageConfig) Reset() {
	*x = StorageConfig{}
	mi := &file_store_database_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StorageConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageConfig) ProtoMessage() {}

func (x *StorageConfig) ProtoReflect() protoreflect.Message {
	mi := &file_store_database_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageConfig.ProtoReflect.Descriptor instead.
func (*StorageConfig) Descriptor() ([]byte, []int) {
	return file_store_database_proto_rawDescGZIP(), []int{29}
}

func (x *StorageConfig) GetFillfactor() int32 {
	if x != nil {
		return x.Fillfactor
	}
	return 0
}

func (x *StorageConfig) GetBuffering() string {
	if x != nil {
		return x.Buffering
	}
	return ""
}

func (x *StorageConfig) GetTablespace() string {
	if x != nil {
		return x.Tablespace
	}
	return ""
}

func (x *StorageConfig) GetWorkTablespace() string {
	if x != nil {
		return x.WorkTablespace
	}
	return ""
}

func (x *StorageConfig) GetSdoLevel() int32 {
	if x != nil {
		return x.SdoLevel
	}
	return 0
}

func (x *StorageConfig) GetCommitInterval() int32 {
	if x != nil {
		return x.CommitInterval
	}
	return 0
}

func (x *StorageConfig) GetPadIndex() bool {
	if x != nil {
		return x.PadIndex
	}
	return false
}

func (x *StorageConfig) GetSortInTempdb() string {
	if x != nil {
		return x.SortInTempdb
	}
	return ""
}

func (x *StorageConfig) GetDropExisting() bool {
	if x != nil {
		return x.DropExisting
	}
	return false
}

func (x *StorageConfig) GetOnline() bool {
	if x != nil {
		return x.Online
	}
	return false
}

func (x *StorageConfig) GetAllowRowLocks() bool {
	if x != nil {
		return x.AllowRowLocks
	}
	return false
}

func (x *StorageConfig) GetAllowPageLocks() bool {
	if x != nil {
		return x.AllowPageLocks
	}
	return false
}

func (x *StorageConfig) GetMaxdop() int32 {
	if x != nil {
		return x.Maxdop
	}
	return 0
}

func (x *StorageConfig) GetDataCompression() string {
	if x != nil {
		return x.DataCompression
	}
	return ""
}

// DimensionalConfig defines dimensional and constraint parameters for spatial indexes.
type DimensionalConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Number of dimensions (2-4, default 2)
	Dimensions int32 `protobuf:"varint,1,opt,name=dimensions,proto3" json:"dimensions,omitempty"`
	// Spatial data type
	// Examples: GEOMETRY, GEOGRAPHY, POINT, POLYGON, etc.
	DataType string `protobuf:"bytes,2,opt,name=data_type,json=dataType,proto3" json:"data_type,omitempty"`
	// PostgreSQL operator class
	// Examples: gist_geometry_ops_2d, gist_geometry_ops_nd, etc.
	OperatorClass string `protobuf:"bytes,3,opt,name=operator_class,json=operatorClass,proto3" json:"operator_class,omitempty"`
	// Oracle geometry type constraint
	// Examples: POINT, LINE, POLYGON, COLLECTION
	LayerGtype string `protobuf:"bytes,4,opt,name=layer_gtype,json=layerGtype,proto3" json:"layer_gtype,omitempty"`
	// Parallel index creation
	ParallelBuild bool `protobuf:"varint,5,opt,name=parallel_build,json=parallelBuild,proto3" json:"parallel_build,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DimensionalConfig) Reset() {
	*x = DimensionalConfig{}
	mi := &file_store_database_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DimensionalConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DimensionalConfig) ProtoMessage() {}

func (x *DimensionalConfig) ProtoReflect() protoreflect.Message {
	mi := &file_store_database_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DimensionalConfig.ProtoReflect.Descriptor instead.
func (*DimensionalConfig) Descriptor() ([]byte, []int) {
	return file_store_database_proto_rawDescGZIP(), []int{30}
}

func (x *DimensionalConfig) GetDimensions() int32 {
	if x != nil {
		return x.Dimensions
	}
	return 0
}

func (x *DimensionalConfig) GetDataType() string {
	if x != nil {
		return x.DataType
	}
	return ""
}

func (x *DimensionalConfig) GetOperatorClass() string {
	if x != nil {
		return x.OperatorClass
	}
	return ""
}

func (x *DimensionalConfig) GetLayerGtype() string {
	if x != nil {
		return x.LayerGtype
	}
	return ""
}

func (x *DimensionalConfig) GetParallelBuild() bool {
	if x != nil {
		return x.ParallelBuild
	}
	return false
}

// ExtensionMetadata is the metadata for extensions.
type ExtensionMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the extension.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The schema where the extension is installed. However, the extension usage
	// is not limited to the schema.
	Schema string `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
	// The version is the version of an extension.
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	// The description is the description of an extension.
	Description   string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExtensionMetadata) Reset() {
	*x = ExtensionMetadata{}
	mi := &file_store_database_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExtensionMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtensionMetadata) ProtoMessage() {}

func (x *ExtensionMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_store_database_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtensionMetadata.ProtoReflect.Descriptor instead.
func (*ExtensionMetadata) Descriptor() ([]byte, []int) {
	return file_store_database_proto_rawDescGZIP(), []int{31}
}

func (x *ExtensionMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExtensionMetadata) GetSchema() string {
	if x != nil {
		return x.Schema
	}
	return ""
}

func (x *ExtensionMetadata) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ExtensionMetadata) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// ForeignKeyMetadata is the metadata for foreign keys.
type ForeignKeyMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the foreign key.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The columns are the ordered referencing columns of a foreign key.
	Columns []string `protobuf:"bytes,2,rep,name=columns,proto3" json:"columns,omitempty"`
	// The referenced_schema is the referenced schema name of a foreign key.
	// It is an empty string for databases without such concept such as MySQL.
	ReferencedSchema string `protobuf:"bytes,3,opt,name=referenced_schema,json=referencedSchema,proto3" json:"referenced_schema,omitempty"`
	// The referenced_table is the referenced table name of a foreign key.
	ReferencedTable string `protobuf:"bytes,4,opt,name=referenced_table,json=referencedTable,proto3" json:"referenced_table,omitempty"`
	// The referenced_columns are the ordered referenced columns of a foreign key.
	ReferencedColumns []string `protobuf:"bytes,5,rep,name=referenced_columns,json=referencedColumns,proto3" json:"referenced_columns,omitempty"`
	// The on_delete is the on delete action of a foreign key.
	OnDelete string `protobuf:"bytes,6,opt,name=on_delete,json=onDelete,proto3" json:"on_delete,omitempty"`
	// The on_update is the on update action of a foreign key.
	OnUpdate string `protobuf:"bytes,7,opt,name=on_update,json=onUpdate,proto3" json:"on_update,omitempty"`
	// The match_type is the match type of a foreign key.
	// The match_type is the PostgreSQL specific field.
	// It's empty string for other databases.
	MatchType     string `protobuf:"bytes,8,opt,name=match_type,json=matchType,proto3" json:"match_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ForeignKeyMetadata) Reset() {
	*x = ForeignKeyMetadata{}
	mi := &file_store_database_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ForeignKeyMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForeignKeyMetadata) ProtoMessage() {}

func (x *ForeignKeyMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_store_database_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForeignKeyMetadata.ProtoReflect.Descriptor instead.
func (*ForeignKeyMetadata) Descriptor() ([]byte, []int) {
	return file_store_database_proto_rawDescGZIP(), []int{32}
}

func (x *ForeignKeyMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ForeignKeyMetadata) GetColumns() []string {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *ForeignKeyMetadata) GetReferencedSchema() string {
	if x != nil {
		return x.ReferencedSchema
	}
	return ""
}

func (x *ForeignKeyMetadata) GetReferencedTable() string {
	if x != nil {
		return x.ReferencedTable
	}
	return ""
}

func (x *ForeignKeyMetadata) GetReferencedColumns() []string {
	if x != nil {
		return x.ReferencedColumns
	}
	return nil
}

func (x *ForeignKeyMetadata) GetOnDelete() string {
	if x != nil {
		return x.OnDelete
	}
	return ""
}

func (x *ForeignKeyMetadata) GetOnUpdate() string {
	if x != nil {
		return x.OnUpdate
	}
	return ""
}

func (x *ForeignKeyMetadata) GetMatchType() string {
	if x != nil {
		return x.MatchType
	}
	return ""
}

// InstanceRoleMetadata is the message for instance role.
type InstanceRoleMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The role name. It's unique within the instance.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The grant display string on the instance. It's generated by database
	// engine.
	Grant         string `protobuf:"bytes,7,opt,name=grant,proto3" json:"grant,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InstanceRoleMetadata) Reset() {
	*x = InstanceRoleMetadata{}
	mi := &file_store_database_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InstanceRoleMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceRoleMetadata) ProtoMessage() {}

func (x *InstanceRoleMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_store_database_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceRoleMetadata.ProtoReflect.Descriptor instead.
func (*InstanceRoleMetadata) Descriptor() ([]byte, []int) {
	return file_store_database_proto_rawDescGZIP(), []int{33}
}

func (x *InstanceRoleMetadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InstanceRoleMetadata) GetGrant() string {
	if x != nil {
		return x.Grant
	}
	return ""
}

type DatabaseConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Name  string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The schema_configs is the list of configs for schemas in a database.
	Schemas       []*SchemaCatalog `protobuf:"bytes,2,rep,name=schemas,proto3" json:"schemas,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DatabaseConfig) Reset() {
	*x = DatabaseConfig{}
	mi := &file_store_database_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DatabaseConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseConfig) ProtoMessage() {}

func (x *DatabaseConfig) ProtoReflect() protoreflect.Message {
	mi := &file_store_database_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseConfig.ProtoReflect.Descriptor instead.
func (*DatabaseConfig) Descriptor() ([]byte, []int) {
	return file_store_database_proto_rawDescGZIP(), []int{34}
}

func (x *DatabaseConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DatabaseConfig) GetSchemas() []*SchemaCatalog {
	if x != nil {
		return x.Schemas
	}
	return nil
}

type SchemaCatalog struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The schema name.
	// It is an empty string for databases without such concept such as MySQL.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The table_configs is the list of configs for tables in a schema.
	Tables        []*TableCatalog `protobuf:"bytes,2,rep,name=tables,proto3" json:"tables,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SchemaCatalog) Reset() {
	*x = SchemaCatalog{}
	mi := &file_store_database_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SchemaCatalog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaCatalog) ProtoMessage() {}

func (x *SchemaCatalog) ProtoReflect() protoreflect.Message {
	mi := &file_store_database_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaCatalog.ProtoReflect.Descriptor instead.
func (*SchemaCatalog) Descriptor() ([]byte, []int) {
	return file_store_database_proto_rawDescGZIP(), []int{35}
}

func (x *SchemaCatalog) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SchemaCatalog) GetTables() []*TableCatalog {
	if x != nil {
		return x.Tables
	}
	return nil
}

type TableCatalog struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the table.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The column_configs is the ordered list of configs for columns in a table.
	Columns        []*ColumnCatalog `protobuf:"bytes,2,rep,name=columns,proto3" json:"columns,omitempty"`
	ObjectSchema   *ObjectSchema    `protobuf:"bytes,7,opt,name=object_schema,json=objectSchema,proto3,oneof" json:"object_schema,omitempty"`
	Classification string           `protobuf:"bytes,3,opt,name=classification,proto3" json:"classification,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TableCatalog) Reset() {
	*x = TableCatalog{}
	mi := &file_store_database_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TableCatalog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableCatalog) ProtoMessage() {}

func (x *TableCatalog) ProtoReflect() protoreflect.Message {
	mi := &file_store_database_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableCatalog.ProtoReflect.Descriptor instead.
func (*TableCatalog) Descriptor() ([]byte, []int) {
	return file_store_database_proto_rawDescGZIP(), []int{36}
}

func (x *TableCatalog) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TableCatalog) GetColumns() []*ColumnCatalog {
	if x != nil {
		return x.Columns
	}
	return nil
}

func (x *TableCatalog) GetObjectSchema() *ObjectSchema {
	if x != nil {
		return x.ObjectSchema
	}
	return nil
}

func (x *TableCatalog) GetClassification() string {
	if x != nil {
		return x.Classification
	}
	return ""
}

type ColumnCatalog struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The name of the column.
	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	SemanticType string `protobuf:"bytes,2,opt,name=semantic_type,json=semanticType,proto3" json:"semantic_type,omitempty"`
	// The user labels for a column.
	Labels         map[string]string `protobuf:"bytes,3,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Classification string            `protobuf:"bytes,4,opt,name=classification,proto3" json:"classification,omitempty"`
	ObjectSchema   *ObjectSchema     `protobuf:"bytes,5,opt,name=object_schema,json=objectSchema,proto3,oneof" json:"object_schema,omitempty"`
	// Deprecated.
	MaskingLevel MaskingLevel `protobuf:"varint,6,opt,name=masking_level,json=maskingLevel,proto3,enum=bytebase.store.MaskingLevel" json:"masking_level,omitempty"`
	// Deprecated.
	FullMaskingAlgorithmId string `protobuf:"bytes,7,opt,name=full_masking_algorithm_id,json=fullMaskingAlgorithmId,proto3" json:"full_masking_algorithm_id,omitempty"`
	// Deprecated.
	PartialMaskingAlgorithmId string `protobuf:"bytes,8,opt,name=partial_masking_algorithm_id,json=partialMaskingAlgorithmId,proto3" json:"partial_masking_algorithm_id,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *ColumnCatalog) Reset() {
	*x = ColumnCatalog{}
	mi := &file_store_database_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ColumnCatalog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ColumnCatalog) ProtoMessage() {}

func (x *ColumnCatalog) ProtoReflect() protoreflect.Message {
	mi := &file_store_database_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ColumnCatalog.ProtoReflect.Descriptor instead.
func (*ColumnCatalog) Descriptor() ([]byte, []int) {
	return file_store_database_proto_rawDescGZIP(), []int{37}
}

func (x *ColumnCatalog) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ColumnCatalog) GetSemanticType() string {
	if x != nil {
		return x.SemanticType
	}
	return ""
}

func (x *ColumnCatalog) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *ColumnCatalog) GetClassification() string {
	if x != nil {
		return x.Classification
	}
	return ""
}

func (x *ColumnCatalog) GetObjectSchema() *ObjectSchema {
	if x != nil {
		return x.ObjectSchema
	}
	return nil
}

func (x *ColumnCatalog) GetMaskingLevel() MaskingLevel {
	if x != nil {
		return x.MaskingLevel
	}
	return MaskingLevel_MASKING_LEVEL_UNSPECIFIED
}

func (x *ColumnCatalog) GetFullMaskingAlgorithmId() string {
	if x != nil {
		return x.FullMaskingAlgorithmId
	}
	return ""
}

func (x *ColumnCatalog) GetPartialMaskingAlgorithmId() string {
	if x != nil {
		return x.PartialMaskingAlgorithmId
	}
	return ""
}

type ObjectSchema struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Type  ObjectSchema_Type      `protobuf:"varint,1,opt,name=type,proto3,enum=bytebase.store.ObjectSchema_Type" json:"type,omitempty"`
	// Types that are valid to be assigned to Kind:
	//
	//	*ObjectSchema_StructKind_
	//	*ObjectSchema_ArrayKind_
	Kind          isObjectSchema_Kind `protobuf_oneof:"kind"`
	SemanticType  string              `protobuf:"bytes,4,opt,name=semantic_type,json=semanticType,proto3" json:"semantic_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ObjectSchema) Reset() {
	*x = ObjectSchema{}
	mi := &file_store_database_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ObjectSchema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectSchema) ProtoMessage() {}

func (x *ObjectSchema) ProtoReflect() protoreflect.Message {
	mi := &file_store_database_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectSchema.ProtoReflect.Descriptor instead.
func (*ObjectSchema) Descriptor() ([]byte, []int) {
	return file_store_database_proto_rawDescGZIP(), []int{38}
}

func (x *ObjectSchema) GetType() ObjectSchema_Type {
	if x != nil {
		return x.Type
	}
	return ObjectSchema_TYPE_UNSPECIFIED
}

func (x *ObjectSchema) GetKind() isObjectSchema_Kind {
	if x != nil {
		return x.Kind
	}
	return nil
}

func (x *ObjectSchema) GetStructKind() *ObjectSchema_StructKind {
	if x != nil {
		if x, ok := x.Kind.(*ObjectSchema_StructKind_); ok {
			return x.StructKind
		}
	}
	return nil
}

func (x *ObjectSchema) GetArrayKind() *ObjectSchema_ArrayKind {
	if x != nil {
		if x, ok := x.Kind.(*ObjectSchema_ArrayKind_); ok {
			return x.ArrayKind
		}
	}
	return nil
}

func (x *ObjectSchema) GetSemanticType() string {
	if x != nil {
		return x.SemanticType
	}
	return ""
}

type isObjectSchema_Kind interface {
	isObjectSchema_Kind()
}

type ObjectSchema_StructKind_ struct {
	StructKind *ObjectSchema_StructKind `protobuf:"bytes,2,opt,name=struct_kind,json=structKind,proto3,oneof"`
}

type ObjectSchema_ArrayKind_ struct {
	ArrayKind *ObjectSchema_ArrayKind `protobuf:"bytes,3,opt,name=array_kind,json=arrayKind,proto3,oneof"`
}

func (*ObjectSchema_StructKind_) isObjectSchema_Kind() {}

func (*ObjectSchema_ArrayKind_) isObjectSchema_Kind() {}

type ObjectSchema_StructKind struct {
	state         protoimpl.MessageState   `protogen:"open.v1"`
	Properties    map[string]*ObjectSchema `protobuf:"bytes,1,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ObjectSchema_StructKind) Reset() {
	*x = ObjectSchema_StructKind{}
	mi := &file_store_database_proto_msgTypes[42]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ObjectSchema_StructKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectSchema_StructKind) ProtoMessage() {}

func (x *ObjectSchema_StructKind) ProtoReflect() protoreflect.Message {
	mi := &file_store_database_proto_msgTypes[42]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectSchema_StructKind.ProtoReflect.Descriptor instead.
func (*ObjectSchema_StructKind) Descriptor() ([]byte, []int) {
	return file_store_database_proto_rawDescGZIP(), []int{38, 0}
}

func (x *ObjectSchema_StructKind) GetProperties() map[string]*ObjectSchema {
	if x != nil {
		return x.Properties
	}
	return nil
}

type ObjectSchema_ArrayKind struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Kind          *ObjectSchema          `protobuf:"bytes,1,opt,name=kind,proto3" json:"kind,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ObjectSchema_ArrayKind) Reset() {
	*x = ObjectSchema_ArrayKind{}
	mi := &file_store_database_proto_msgTypes[43]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ObjectSchema_ArrayKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectSchema_ArrayKind) ProtoMessage() {}

func (x *ObjectSchema_ArrayKind) ProtoReflect() protoreflect.Message {
	mi := &file_store_database_proto_msgTypes[43]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectSchema_ArrayKind.ProtoReflect.Descriptor instead.
func (*ObjectSchema_ArrayKind) Descriptor() ([]byte, []int) {
	return file_store_database_proto_rawDescGZIP(), []int{38, 1}
}

func (x *ObjectSchema_ArrayKind) GetKind() *ObjectSchema {
	if x != nil {
		return x.Kind
	}
	return nil
}

var File_store_database_proto protoreflect.FileDescriptor

const file_store_database_proto_rawDesc = "" +
	"\n" +
	"\x14store/database.proto\x12\x0ebytebase.store\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x12store/common.proto\"\xd2\x02\n" +
	"\x10DatabaseMetadata\x12D\n" +
	"\x06labels\x18\x01 \x03(\v2,.bytebase.store.DatabaseMetadata.LabelsEntryR\x06labels\x12@\n" +
	"\x0elast_sync_time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\flastSyncTime\x12)\n" +
	"\x10backup_available\x18\x03 \x01(\bR\x0fbackupAvailable\x12\x1c\n" +
	"\tdatashare\x18\x04 \x01(\bR\tdatashare\x12\x18\n" +
	"\adrifted\x18\x06 \x01(\bR\adrifted\x12\x18\n" +
	"\aversion\x18\a \x01(\tR\aversion\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xb7\x03\n" +
	"\x16DatabaseSchemaMetadata\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x128\n" +
	"\aschemas\x18\x02 \x03(\v2\x1e.bytebase.store.SchemaMetadataR\aschemas\x12#\n" +
	"\rcharacter_set\x18\x03 \x01(\tR\fcharacterSet\x12\x1c\n" +
	"\tcollation\x18\x04 \x01(\tR\tcollation\x12A\n" +
	"\n" +
	"extensions\x18\x05 \x03(\v2!.bytebase.store.ExtensionMetadataR\n" +
	"extensions\x12\x1c\n" +
	"\tdatashare\x18\x06 \x01(\bR\tdatashare\x12!\n" +
	"\fservice_name\x18\a \x01(\tR\vserviceName\x12Q\n" +
	"\x10linked_databases\x18\b \x03(\v2&.bytebase.store.LinkedDatabaseMetadataR\x0flinkedDatabases\x12\x14\n" +
	"\x05owner\x18\t \x01(\tR\x05owner\x12\x1f\n" +
	"\vsearch_path\x18\n" +
	" \x01(\tR\n" +
	"searchPath\"\\\n" +
	"\x16LinkedDatabaseMetadata\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1a\n" +
	"\busername\x18\x02 \x01(\tR\busername\x12\x12\n" +
	"\x04host\x18\x03 \x01(\tR\x04host\"\xeb\x06\n" +
	"\x0eSchemaMetadata\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x125\n" +
	"\x06tables\x18\x02 \x03(\v2\x1d.bytebase.store.TableMetadataR\x06tables\x12N\n" +
	"\x0fexternal_tables\x18\x03 \x03(\v2%.bytebase.store.ExternalTableMetadataR\x0eexternalTables\x122\n" +
	"\x05views\x18\x04 \x03(\v2\x1c.bytebase.store.ViewMetadataR\x05views\x12>\n" +
	"\tfunctions\x18\x05 \x03(\v2 .bytebase.store.FunctionMetadataR\tfunctions\x12A\n" +
	"\n" +
	"procedures\x18\x06 \x03(\v2!.bytebase.store.ProcedureMetadataR\n" +
	"procedures\x128\n" +
	"\astreams\x18\a \x03(\v2\x1e.bytebase.store.StreamMetadataR\astreams\x122\n" +
	"\x05tasks\x18\b \x03(\v2\x1c.bytebase.store.TaskMetadataR\x05tasks\x12W\n" +
	"\x12materialized_views\x18\t \x03(\v2(.bytebase.store.MaterializedViewMetadataR\x11materializedViews\x12>\n" +
	"\tsequences\x18\n" +
	" \x03(\v2 .bytebase.store.SequenceMetadataR\tsequences\x12;\n" +
	"\bpackages\x18\v \x03(\v2\x1f.bytebase.store.PackageMetadataR\bpackages\x12\x14\n" +
	"\x05owner\x18\f \x01(\tR\x05owner\x12\x18\n" +
	"\acomment\x18\r \x01(\tR\acomment\x125\n" +
	"\x06events\x18\x0e \x03(\v2\x1d.bytebase.store.EventMetadataR\x06events\x12?\n" +
	"\n" +
	"enum_types\x18\x0f \x03(\v2 .bytebase.store.EnumTypeMetadataR\tenumTypes\x12\x1b\n" +
	"\tskip_dump\x18\x10 \x01(\bR\bskipDump\"u\n" +
	"\x10EnumTypeMetadata\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x16\n" +
	"\x06values\x18\x02 \x03(\tR\x06values\x12\x18\n" +
	"\acomment\x18\x03 \x01(\tR\acomment\x12\x1b\n" +
	"\tskip_dump\x18\x04 \x01(\bR\bskipDump\"\xfa\x01\n" +
	"\rEventMetadata\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1e\n" +
	"\n" +
	"definition\x18\x02 \x01(\tR\n" +
	"definition\x12\x1b\n" +
	"\ttime_zone\x18\x03 \x01(\tR\btimeZone\x12\x19\n" +
	"\bsql_mode\x18\x04 \x01(\tR\asqlMode\x120\n" +
	"\x14character_set_client\x18\x05 \x01(\tR\x12characterSetClient\x121\n" +
	"\x14collation_connection\x18\x06 \x01(\tR\x13collationConnection\x12\x18\n" +
	"\acomment\x18\a \x01(\tR\acomment\"\x80\x03\n" +
	"\x10SequenceMetadata\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1b\n" +
	"\tdata_type\x18\x02 \x01(\tR\bdataType\x12\x14\n" +
	"\x05start\x18\x03 \x01(\tR\x05start\x12\x1b\n" +
	"\tmin_value\x18\x04 \x01(\tR\bminValue\x12\x1b\n" +
	"\tmax_value\x18\x05 \x01(\tR\bmaxValue\x12\x1c\n" +
	"\tincrement\x18\x06 \x01(\tR\tincrement\x12\x14\n" +
	"\x05cycle\x18\a \x01(\bR\x05cycle\x12\x1d\n" +
	"\n" +
	"cache_size\x18\b \x01(\tR\tcacheSize\x12\x1d\n" +
	"\n" +
	"last_value\x18\t \x01(\tR\tlastValue\x12\x1f\n" +
	"\vowner_table\x18\n" +
	" \x01(\tR\n" +
	"ownerTable\x12!\n" +
	"\fowner_column\x18\v \x01(\tR\vownerColumn\x12\x18\n" +
	"\acomment\x18\f \x01(\tR\acomment\x12\x1b\n" +
	"\tskip_dump\x18\r \x01(\bR\bskipDump\"\x9e\x02\n" +
	"\x0fTriggerMetadata\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x14\n" +
	"\x05event\x18\x03 \x01(\tR\x05event\x12\x16\n" +
	"\x06timing\x18\x04 \x01(\tR\x06timing\x12\x12\n" +
	"\x04body\x18\x05 \x01(\tR\x04body\x12\x19\n" +
	"\bsql_mode\x18\x06 \x01(\tR\asqlMode\x120\n" +
	"\x14character_set_client\x18\a \x01(\tR\x12characterSetClient\x121\n" +
	"\x14collation_connection\x18\b \x01(\tR\x13collationConnection\x12\x18\n" +
	"\acomment\x18\t \x01(\tR\acomment\x12\x1b\n" +
	"\tskip_dump\x18\n" +
	" \x01(\bR\bskipDump\"\xcc\x01\n" +
	"\fRuleMetadata\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x14\n" +
	"\x05event\x18\x02 \x01(\tR\x05event\x12\x1c\n" +
	"\tcondition\x18\x03 \x01(\tR\tcondition\x12\x16\n" +
	"\x06action\x18\x04 \x01(\tR\x06action\x12\x1d\n" +
	"\n" +
	"is_instead\x18\x05 \x01(\bR\tisInstead\x12\x1d\n" +
	"\n" +
	"is_enabled\x18\x06 \x01(\bR\tisEnabled\x12\x1e\n" +
	"\n" +
	"definition\x18\a \x01(\tR\n" +
	"definition\"\x80\x03\n" +
	"\fTaskMetadata\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x0e\n" +
	"\x02id\x18\x02 \x01(\tR\x02id\x12\x14\n" +
	"\x05owner\x18\x03 \x01(\tR\x05owner\x12\x18\n" +
	"\acomment\x18\x04 \x01(\tR\acomment\x12\x1c\n" +
	"\twarehouse\x18\x05 \x01(\tR\twarehouse\x12\x1a\n" +
	"\bschedule\x18\x06 \x01(\tR\bschedule\x12\"\n" +
	"\fpredecessors\x18\a \x03(\tR\fpredecessors\x128\n" +
	"\x05state\x18\b \x01(\x0e2\".bytebase.store.TaskMetadata.StateR\x05state\x12\x1c\n" +
	"\tcondition\x18\t \x01(\tR\tcondition\x12\x1e\n" +
	"\n" +
	"definition\x18\n" +
	" \x01(\tR\n" +
	"definition\"F\n" +
	"\x05State\x12\x15\n" +
	"\x11STATE_UNSPECIFIED\x10\x00\x12\x11\n" +
	"\rSTATE_STARTED\x10\x01\x12\x13\n" +
	"\x0fSTATE_SUSPENDED\x10\x02\"\xa5\x03\n" +
	"\x0eStreamMetadata\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1d\n" +
	"\n" +
	"table_name\x18\x02 \x01(\tR\ttableName\x12\x14\n" +
	"\x05owner\x18\x03 \x01(\tR\x05owner\x12\x18\n" +
	"\acomment\x18\x04 \x01(\tR\acomment\x127\n" +
	"\x04type\x18\x05 \x01(\x0e2#.bytebase.store.StreamMetadata.TypeR\x04type\x12\x14\n" +
	"\x05stale\x18\x06 \x01(\bR\x05stale\x127\n" +
	"\x04mode\x18\a \x01(\x0e2#.bytebase.store.StreamMetadata.ModeR\x04mode\x12\x1e\n" +
	"\n" +
	"definition\x18\b \x01(\tR\n" +
	"definition\",\n" +
	"\x04Type\x12\x14\n" +
	"\x10TYPE_UNSPECIFIED\x10\x00\x12\x0e\n" +
	"\n" +
	"TYPE_DELTA\x10\x01\"Z\n" +
	"\x04Mode\x12\x14\n" +
	"\x10MODE_UNSPECIFIED\x10\x00\x12\x10\n" +
	"\fMODE_DEFAULT\x10\x01\x12\x14\n" +
	"\x10MODE_APPEND_ONLY\x10\x02\x12\x14\n" +
	"\x10MODE_INSERT_ONLY\x10\x03\"\xbb\a\n" +
	"\rTableMetadata\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x128\n" +
	"\acolumns\x18\x02 \x03(\v2\x1e.bytebase.store.ColumnMetadataR\acolumns\x127\n" +
	"\aindexes\x18\x03 \x03(\v2\x1d.bytebase.store.IndexMetadataR\aindexes\x12\x16\n" +
	"\x06engine\x18\x04 \x01(\tR\x06engine\x12\x1c\n" +
	"\tcollation\x18\x05 \x01(\tR\tcollation\x12\x18\n" +
	"\acharset\x18\x11 \x01(\tR\acharset\x12\x1b\n" +
	"\trow_count\x18\x06 \x01(\x03R\browCount\x12\x1b\n" +
	"\tdata_size\x18\a \x01(\x03R\bdataSize\x12\x1d\n" +
	"\n" +
	"index_size\x18\b \x01(\x03R\tindexSize\x12\x1b\n" +
	"\tdata_free\x18\t \x01(\x03R\bdataFree\x12%\n" +
	"\x0ecreate_options\x18\n" +
	" \x01(\tR\rcreateOptions\x12\x18\n" +
	"\acomment\x18\v \x01(\tR\acomment\x12!\n" +
	"\fuser_comment\x18\x0e \x01(\tR\vuserComment\x12E\n" +
	"\fforeign_keys\x18\f \x03(\v2\".bytebase.store.ForeignKeyMetadataR\vforeignKeys\x12F\n" +
	"\n" +
	"partitions\x18\x0f \x03(\v2&.bytebase.store.TablePartitionMetadataR\n" +
	"partitions\x12T\n" +
	"\x11check_constraints\x18\x10 \x03(\v2'.bytebase.store.CheckConstraintMetadataR\x10checkConstraints\x12\x14\n" +
	"\x05owner\x18\x12 \x01(\tR\x05owner\x12!\n" +
	"\fsorting_keys\x18\x13 \x03(\tR\vsortingKeys\x12;\n" +
	"\btriggers\x18\x14 \x03(\v2\x1f.bytebase.store.TriggerMetadataR\btriggers\x12\x1b\n" +
	"\tskip_dump\x18\x15 \x01(\bR\bskipDump\x122\n" +
	"\x05rules\x18\x18 \x03(\v2\x1c.bytebase.store.RuleMetadataR\x05rules\x12#\n" +
	"\rsharding_info\x18\x16 \x01(\tR\fshardingInfo\x12(\n" +
	"\x10primary_key_type\x18\x17 \x01(\tR\x0eprimaryKeyType\"M\n" +
	"\x17CheckConstraintMetadata\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1e\n" +
	"\n" +
	"expression\x18\x02 \x01(\tR\n" +
	"expression\"\xcd\x01\n" +
	"\x15ExternalTableMetadata\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x120\n" +
	"\x14external_server_name\x18\x02 \x01(\tR\x12externalServerName\x124\n" +
	"\x16external_database_name\x18\x03 \x01(\tR\x14externalDatabaseName\x128\n" +
	"\acolumns\x18\x04 \x03(\v2\x1e.bytebase.store.ColumnMetadataR\acolumns\"\xae\x04\n" +
	"\x16TablePartitionMetadata\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12?\n" +
	"\x04type\x18\x02 \x01(\x0e2+.bytebase.store.TablePartitionMetadata.TypeR\x04type\x12\x1e\n" +
	"\n" +
	"expression\x18\x03 \x01(\tR\n" +
	"expression\x12\x14\n" +
	"\x05value\x18\x04 \x01(\tR\x05value\x12\x1f\n" +
	"\vuse_default\x18\x05 \x01(\tR\n" +
	"useDefault\x12L\n" +
	"\rsubpartitions\x18\x06 \x03(\v2&.bytebase.store.TablePartitionMetadataR\rsubpartitions\x127\n" +
	"\aindexes\x18\a \x03(\v2\x1d.bytebase.store.IndexMetadataR\aindexes\x12T\n" +
	"\x11check_constraints\x18\b \x03(\v2'.bytebase.store.CheckConstraintMetadataR\x10checkConstraints\"\x8a\x01\n" +
	"\x04Type\x12\x14\n" +
	"\x10TYPE_UNSPECIFIED\x10\x00\x12\t\n" +
	"\x05RANGE\x10\x01\x12\x11\n" +
	"\rRANGE_COLUMNS\x10\x02\x12\b\n" +
	"\x04LIST\x10\x03\x12\x10\n" +
	"\fLIST_COLUMNS\x10\x04\x12\b\n" +
	"\x04HASH\x10\x05\x12\x0f\n" +
	"\vLINEAR_HASH\x10\x06\x12\a\n" +
	"\x03KEY\x10\a\x12\x0e\n" +
	"\n" +
	"LINEAR_KEY\x10\b\"\xcd\x06\n" +
	"\x0eColumnMetadata\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1a\n" +
	"\bposition\x18\x02 \x01(\x05R\bposition\x12\x18\n" +
	"\adefault\x18\x03 \x01(\tR\adefault\x12!\n" +
	"\fdefault_null\x18\x04 \x01(\bR\vdefaultNull\x12-\n" +
	"\x12default_expression\x18\x05 \x01(\tR\x11defaultExpression\x12&\n" +
	"\x0fdefault_on_null\x18\x10 \x01(\bR\rdefaultOnNull\x12\x1b\n" +
	"\ton_update\x18\r \x01(\tR\bonUpdate\x12\x1a\n" +
	"\bnullable\x18\x06 \x01(\bR\bnullable\x12\x12\n" +
	"\x04type\x18\a \x01(\tR\x04type\x12#\n" +
	"\rcharacter_set\x18\b \x01(\tR\fcharacterSet\x12\x1c\n" +
	"\tcollation\x18\t \x01(\tR\tcollation\x12\x18\n" +
	"\acomment\x18\n" +
	" \x01(\tR\acomment\x12!\n" +
	"\fuser_comment\x18\f \x01(\tR\vuserComment\x12B\n" +
	"\n" +
	"generation\x18\x0e \x01(\v2\".bytebase.store.GenerationMetadataR\n" +
	"generation\x12\x1f\n" +
	"\vis_identity\x18\x11 \x01(\bR\n" +
	"isIdentity\x12b\n" +
	"\x13identity_generation\x18\x0f \x01(\x0e21.bytebase.store.ColumnMetadata.IdentityGenerationR\x12identityGeneration\x12#\n" +
	"\ridentity_seed\x18\x12 \x01(\x03R\fidentitySeed\x12-\n" +
	"\x12identity_increment\x18\x13 \x01(\x03R\x11identityIncrement\x126\n" +
	"\x17default_constraint_name\x18\x14 \x01(\tR\x15defaultConstraintName\"U\n" +
	"\x12IdentityGeneration\x12#\n" +
	"\x1fIDENTITY_GENERATION_UNSPECIFIED\x10\x00\x12\n" +
	"\n" +
	"\x06ALWAYS\x10\x01\x12\x0e\n" +
	"\n" +
	"BY_DEFAULT\x10\x02\"\xb2\x01\n" +
	"\x12GenerationMetadata\x12;\n" +
	"\x04type\x18\x01 \x01(\x0e2'.bytebase.store.GenerationMetadata.TypeR\x04type\x12\x1e\n" +
	"\n" +
	"expression\x18\x02 \x01(\tR\n" +
	"expression\"?\n" +
	"\x04Type\x12\x14\n" +
	"\x10TYPE_UNSPECIFIED\x10\x00\x12\x10\n" +
	"\fTYPE_VIRTUAL\x10\x01\x12\x0f\n" +
	"\vTYPE_STORED\x10\x02\"\xf5\x02\n" +
	"\fViewMetadata\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1e\n" +
	"\n" +
	"definition\x18\x02 \x01(\tR\n" +
	"definition\x12\x18\n" +
	"\acomment\x18\x03 \x01(\tR\acomment\x12O\n" +
	"\x12dependency_columns\x18\x04 \x03(\v2 .bytebase.store.DependencyColumnR\x11dependencyColumns\x128\n" +
	"\acolumns\x18\x05 \x03(\v2\x1e.bytebase.store.ColumnMetadataR\acolumns\x12;\n" +
	"\btriggers\x18\x06 \x03(\v2\x1f.bytebase.store.TriggerMetadataR\btriggers\x12\x1b\n" +
	"\tskip_dump\x18\a \x01(\bR\bskipDump\x122\n" +
	"\x05rules\x18\b \x03(\v2\x1c.bytebase.store.RuleMetadataR\x05rules\"X\n" +
	"\x10DependencyColumn\x12\x16\n" +
	"\x06schema\x18\x01 \x01(\tR\x06schema\x12\x14\n" +
	"\x05table\x18\x02 \x01(\tR\x05table\x12\x16\n" +
	"\x06column\x18\x03 \x01(\tR\x06column\"\xcc\x02\n" +
	"\x18MaterializedViewMetadata\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1e\n" +
	"\n" +
	"definition\x18\x02 \x01(\tR\n" +
	"definition\x12\x18\n" +
	"\acomment\x18\x03 \x01(\tR\acomment\x12O\n" +
	"\x12dependency_columns\x18\x04 \x03(\v2 .bytebase.store.DependencyColumnR\x11dependencyColumns\x12;\n" +
	"\btriggers\x18\x05 \x03(\v2\x1f.bytebase.store.TriggerMetadataR\btriggers\x127\n" +
	"\aindexes\x18\x06 \x03(\v2\x1d.bytebase.store.IndexMetadataR\aindexes\x12\x1b\n" +
	"\tskip_dump\x18\a \x01(\bR\bskipDump\"?\n" +
	"\x0fDependencyTable\x12\x16\n" +
	"\x06schema\x18\x01 \x01(\tR\x06schema\x12\x14\n" +
	"\x05table\x18\x02 \x01(\tR\x05table\"\x98\x03\n" +
	"\x10FunctionMetadata\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1e\n" +
	"\n" +
	"definition\x18\x02 \x01(\tR\n" +
	"definition\x12\x1c\n" +
	"\tsignature\x18\x03 \x01(\tR\tsignature\x120\n" +
	"\x14character_set_client\x18\x04 \x01(\tR\x12characterSetClient\x121\n" +
	"\x14collation_connection\x18\x05 \x01(\tR\x13collationConnection\x12-\n" +
	"\x12database_collation\x18\x06 \x01(\tR\x11databaseCollation\x12\x19\n" +
	"\bsql_mode\x18\a \x01(\tR\asqlMode\x12\x18\n" +
	"\acomment\x18\b \x01(\tR\acomment\x12L\n" +
	"\x11dependency_tables\x18\t \x03(\v2\x1f.bytebase.store.DependencyTableR\x10dependencyTables\x12\x1b\n" +
	"\tskip_dump\x18\n" +
	" \x01(\bR\bskipDump\"\xcb\x02\n" +
	"\x11ProcedureMetadata\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1e\n" +
	"\n" +
	"definition\x18\x02 \x01(\tR\n" +
	"definition\x12\x1c\n" +
	"\tsignature\x18\x03 \x01(\tR\tsignature\x120\n" +
	"\x14character_set_client\x18\x04 \x01(\tR\x12characterSetClient\x121\n" +
	"\x14collation_connection\x18\x05 \x01(\tR\x13collationConnection\x12-\n" +
	"\x12database_collation\x18\x06 \x01(\tR\x11databaseCollation\x12\x19\n" +
	"\bsql_mode\x18\a \x01(\tR\asqlMode\x12\x18\n" +
	"\acomment\x18\t \x01(\tR\acomment\x12\x1b\n" +
	"\tskip_dump\x18\b \x01(\bR\bskipDump\"E\n" +
	"\x0fPackageMetadata\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x1e\n" +
	"\n" +
	"definition\x18\x02 \x01(\tR\n" +
	"definition\"\xdc\x04\n" +
	"\rIndexMetadata\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12 \n" +
	"\vexpressions\x18\x02 \x03(\tR\vexpressions\x12\x1d\n" +
	"\n" +
	"key_length\x18\t \x03(\x03R\tkeyLength\x12\x1e\n" +
	"\n" +
	"descending\x18\n" +
	" \x03(\bR\n" +
	"descending\x12\x12\n" +
	"\x04type\x18\x03 \x01(\tR\x04type\x12\x16\n" +
	"\x06unique\x18\x04 \x01(\bR\x06unique\x12\x18\n" +
	"\aprimary\x18\x05 \x01(\bR\aprimary\x12\x18\n" +
	"\avisible\x18\x06 \x01(\bR\avisible\x12\x18\n" +
	"\acomment\x18\a \x01(\tR\acomment\x12\x1e\n" +
	"\n" +
	"definition\x18\b \x01(\tR\n" +
	"definition\x12.\n" +
	"\x13parent_index_schema\x18\v \x01(\tR\x11parentIndexSchema\x12*\n" +
	"\x11parent_index_name\x18\f \x01(\tR\x0fparentIndexName\x12 \n" +
	"\vgranularity\x18\r \x01(\x03R\vgranularity\x12#\n" +
	"\ris_constraint\x18\x0e \x01(\bR\fisConstraint\x12I\n" +
	"\x0espatial_config\x18\x0f \x01(\v2\".bytebase.store.SpatialIndexConfigR\rspatialConfig\x12#\n" +
	"\ropclass_names\x18\x10 \x03(\tR\fopclassNames\x12)\n" +
	"\x10opclass_defaults\x18\x11 \x03(\bR\x0fopclassDefaults\"\x96\x03\n" +
	"\x12SpatialIndexConfig\x12\x16\n" +
	"\x06method\x18\x01 \x01(\tR\x06method\x12F\n" +
	"\ftessellation\x18\x02 \x01(\v2\".bytebase.store.TessellationConfigR\ftessellation\x127\n" +
	"\astorage\x18\x03 \x01(\v2\x1d.bytebase.store.StorageConfigR\astorage\x12C\n" +
	"\vdimensional\x18\x04 \x01(\v2!.bytebase.store.DimensionalConfigR\vdimensional\x12_\n" +
	"\x0fengine_specific\x18\x05 \x03(\v26.bytebase.store.SpatialIndexConfig.EngineSpecificEntryR\x0eengineSpecific\x1aA\n" +
	"\x13EngineSpecificEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xd2\x01\n" +
	"\x12TessellationConfig\x12\x16\n" +
	"\x06scheme\x18\x01 \x01(\tR\x06scheme\x12>\n" +
	"\fbounding_box\x18\x02 \x01(\v2\x1b.bytebase.store.BoundingBoxR\vboundingBox\x12:\n" +
	"\vgrid_levels\x18\x03 \x03(\v2\x19.bytebase.store.GridLevelR\n" +
	"gridLevels\x12(\n" +
	"\x10cells_per_object\x18\x04 \x01(\x05R\x0ecellsPerObject\"]\n" +
	"\vBoundingBox\x12\x12\n" +
	"\x04xmin\x18\x01 \x01(\x01R\x04xmin\x12\x12\n" +
	"\x04ymin\x18\x02 \x01(\x01R\x04ymin\x12\x12\n" +
	"\x04xmax\x18\x03 \x01(\x01R\x04xmax\x12\x12\n" +
	"\x04ymax\x18\x04 \x01(\x01R\x04ymax\";\n" +
	"\tGridLevel\x12\x14\n" +
	"\x05level\x18\x01 \x01(\x05R\x05level\x12\x18\n" +
	"\adensity\x18\x02 \x01(\tR\adensity\"\xf1\x03\n" +
	"\rStorageConfig\x12\x1e\n" +
	"\n" +
	"fillfactor\x18\x01 \x01(\x05R\n" +
	"fillfactor\x12\x1c\n" +
	"\tbuffering\x18\x02 \x01(\tR\tbuffering\x12\x1e\n" +
	"\n" +
	"tablespace\x18\x03 \x01(\tR\n" +
	"tablespace\x12'\n" +
	"\x0fwork_tablespace\x18\x04 \x01(\tR\x0eworkTablespace\x12\x1b\n" +
	"\tsdo_level\x18\x05 \x01(\x05R\bsdoLevel\x12'\n" +
	"\x0fcommit_interval\x18\x06 \x01(\x05R\x0ecommitInterval\x12\x1b\n" +
	"\tpad_index\x18\a \x01(\bR\bpadIndex\x12$\n" +
	"\x0esort_in_tempdb\x18\b \x01(\tR\fsortInTempdb\x12#\n" +
	"\rdrop_existing\x18\t \x01(\bR\fdropExisting\x12\x16\n" +
	"\x06online\x18\n" +
	" \x01(\bR\x06online\x12&\n" +
	"\x0fallow_row_locks\x18\v \x01(\bR\rallowRowLocks\x12(\n" +
	"\x10allow_page_locks\x18\f \x01(\bR\x0eallowPageLocks\x12\x16\n" +
	"\x06maxdop\x18\r \x01(\x05R\x06maxdop\x12)\n" +
	"\x10data_compression\x18\x0e \x01(\tR\x0fdataCompression\"\xbf\x01\n" +
	"\x11DimensionalConfig\x12\x1e\n" +
	"\n" +
	"dimensions\x18\x01 \x01(\x05R\n" +
	"dimensions\x12\x1b\n" +
	"\tdata_type\x18\x02 \x01(\tR\bdataType\x12%\n" +
	"\x0eoperator_class\x18\x03 \x01(\tR\roperatorClass\x12\x1f\n" +
	"\vlayer_gtype\x18\x04 \x01(\tR\n" +
	"layerGtype\x12%\n" +
	"\x0eparallel_build\x18\x05 \x01(\bR\rparallelBuild\"{\n" +
	"\x11ExtensionMetadata\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x16\n" +
	"\x06schema\x18\x02 \x01(\tR\x06schema\x12\x18\n" +
	"\aversion\x18\x03 \x01(\tR\aversion\x12 \n" +
	"\vdescription\x18\x04 \x01(\tR\vdescription\"\xa2\x02\n" +
	"\x12ForeignKeyMetadata\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x18\n" +
	"\acolumns\x18\x02 \x03(\tR\acolumns\x12+\n" +
	"\x11referenced_schema\x18\x03 \x01(\tR\x10referencedSchema\x12)\n" +
	"\x10referenced_table\x18\x04 \x01(\tR\x0freferencedTable\x12-\n" +
	"\x12referenced_columns\x18\x05 \x03(\tR\x11referencedColumns\x12\x1b\n" +
	"\ton_delete\x18\x06 \x01(\tR\bonDelete\x12\x1b\n" +
	"\ton_update\x18\a \x01(\tR\bonUpdate\x12\x1d\n" +
	"\n" +
	"match_type\x18\b \x01(\tR\tmatchType\"@\n" +
	"\x14InstanceRoleMetadata\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x14\n" +
	"\x05grant\x18\a \x01(\tR\x05grant\"c\n" +
	"\x0eDatabaseConfig\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x127\n" +
	"\aschemas\x18\x02 \x03(\v2\x1d.bytebase.store.SchemaCatalogR\aschemasJ\x04\b\x03\x10\x04\"Y\n" +
	"\rSchemaCatalog\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x124\n" +
	"\x06tables\x18\x02 \x03(\v2\x1c.bytebase.store.TableCatalogR\x06tables\"\xdd\x01\n" +
	"\fTableCatalog\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x127\n" +
	"\acolumns\x18\x02 \x03(\v2\x1d.bytebase.store.ColumnCatalogR\acolumns\x12F\n" +
	"\robject_schema\x18\a \x01(\v2\x1c.bytebase.store.ObjectSchemaH\x00R\fobjectSchema\x88\x01\x01\x12&\n" +
	"\x0eclassification\x18\x03 \x01(\tR\x0eclassificationB\x10\n" +
	"\x0e_object_schema\"\x87\x04\n" +
	"\rColumnCatalog\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12#\n" +
	"\rsemantic_type\x18\x02 \x01(\tR\fsemanticType\x12A\n" +
	"\x06labels\x18\x03 \x03(\v2).bytebase.store.ColumnCatalog.LabelsEntryR\x06labels\x12&\n" +
	"\x0eclassification\x18\x04 \x01(\tR\x0eclassification\x12F\n" +
	"\robject_schema\x18\x05 \x01(\v2\x1c.bytebase.store.ObjectSchemaH\x00R\fobjectSchema\x88\x01\x01\x12A\n" +
	"\rmasking_level\x18\x06 \x01(\x0e2\x1c.bytebase.store.MaskingLevelR\fmaskingLevel\x129\n" +
	"\x19full_masking_algorithm_id\x18\a \x01(\tR\x16fullMaskingAlgorithmId\x12?\n" +
	"\x1cpartial_masking_algorithm_id\x18\b \x01(\tR\x19partialMaskingAlgorithmId\x1a9\n" +
	"\vLabelsEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\x10\n" +
	"\x0e_object_schema\"\xe5\x04\n" +
	"\fObjectSchema\x125\n" +
	"\x04type\x18\x01 \x01(\x0e2!.bytebase.store.ObjectSchema.TypeR\x04type\x12J\n" +
	"\vstruct_kind\x18\x02 \x01(\v2'.bytebase.store.ObjectSchema.StructKindH\x00R\n" +
	"structKind\x12G\n" +
	"\n" +
	"array_kind\x18\x03 \x01(\v2&.bytebase.store.ObjectSchema.ArrayKindH\x00R\tarrayKind\x12#\n" +
	"\rsemantic_type\x18\x04 \x01(\tR\fsemanticType\x1a\xc2\x01\n" +
	"\n" +
	"StructKind\x12W\n" +
	"\n" +
	"properties\x18\x01 \x03(\v27.bytebase.store.ObjectSchema.StructKind.PropertiesEntryR\n" +
	"properties\x1a[\n" +
	"\x0fPropertiesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x122\n" +
	"\x05value\x18\x02 \x01(\v2\x1c.bytebase.store.ObjectSchemaR\x05value:\x028\x01\x1a=\n" +
	"\tArrayKind\x120\n" +
	"\x04kind\x18\x01 \x01(\v2\x1c.bytebase.store.ObjectSchemaR\x04kind\"X\n" +
	"\x04Type\x12\x14\n" +
	"\x10TYPE_UNSPECIFIED\x10\x00\x12\n" +
	"\n" +
	"\x06STRING\x10\x01\x12\n" +
	"\n" +
	"\x06NUMBER\x10\x02\x12\v\n" +
	"\aBOOLEAN\x10\x03\x12\n" +
	"\n" +
	"\x06OBJECT\x10\x04\x12\t\n" +
	"\x05ARRAY\x10\x05B\x06\n" +
	"\x04kindB\x90\x01\n" +
	"\x12com.bytebase.storeB\rDatabaseProtoP\x01Z\x12generated-go/store\xa2\x02\x03BSX\xaa\x02\x0eBytebase.Store\xca\x02\x0eBytebase\\Store\xe2\x02\x1aBytebase\\Store\\GPBMetadata\xea\x02\x0fBytebase::Storeb\x06proto3"

var (
	file_store_database_proto_rawDescOnce sync.Once
	file_store_database_proto_rawDescData []byte
)

func file_store_database_proto_rawDescGZIP() []byte {
	file_store_database_proto_rawDescOnce.Do(func() {
		file_store_database_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_store_database_proto_rawDesc), len(file_store_database_proto_rawDesc)))
	})
	return file_store_database_proto_rawDescData
}

var file_store_database_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_store_database_proto_msgTypes = make([]protoimpl.MessageInfo, 45)
var file_store_database_proto_goTypes = []any{
	(TaskMetadata_State)(0),                // 0: bytebase.store.TaskMetadata.State
	(StreamMetadata_Type)(0),               // 1: bytebase.store.StreamMetadata.Type
	(StreamMetadata_Mode)(0),               // 2: bytebase.store.StreamMetadata.Mode
	(TablePartitionMetadata_Type)(0),       // 3: bytebase.store.TablePartitionMetadata.Type
	(ColumnMetadata_IdentityGeneration)(0), // 4: bytebase.store.ColumnMetadata.IdentityGeneration
	(GenerationMetadata_Type)(0),           // 5: bytebase.store.GenerationMetadata.Type
	(ObjectSchema_Type)(0),                 // 6: bytebase.store.ObjectSchema.Type
	(*DatabaseMetadata)(nil),               // 7: bytebase.store.DatabaseMetadata
	(*DatabaseSchemaMetadata)(nil),         // 8: bytebase.store.DatabaseSchemaMetadata
	(*LinkedDatabaseMetadata)(nil),         // 9: bytebase.store.LinkedDatabaseMetadata
	(*SchemaMetadata)(nil),                 // 10: bytebase.store.SchemaMetadata
	(*EnumTypeMetadata)(nil),               // 11: bytebase.store.EnumTypeMetadata
	(*EventMetadata)(nil),                  // 12: bytebase.store.EventMetadata
	(*SequenceMetadata)(nil),               // 13: bytebase.store.SequenceMetadata
	(*TriggerMetadata)(nil),                // 14: bytebase.store.TriggerMetadata
	(*RuleMetadata)(nil),                   // 15: bytebase.store.RuleMetadata
	(*TaskMetadata)(nil),                   // 16: bytebase.store.TaskMetadata
	(*StreamMetadata)(nil),                 // 17: bytebase.store.StreamMetadata
	(*TableMetadata)(nil),                  // 18: bytebase.store.TableMetadata
	(*CheckConstraintMetadata)(nil),        // 19: bytebase.store.CheckConstraintMetadata
	(*ExternalTableMetadata)(nil),          // 20: bytebase.store.ExternalTableMetadata
	(*TablePartitionMetadata)(nil),         // 21: bytebase.store.TablePartitionMetadata
	(*ColumnMetadata)(nil),                 // 22: bytebase.store.ColumnMetadata
	(*GenerationMetadata)(nil),             // 23: bytebase.store.GenerationMetadata
	(*ViewMetadata)(nil),                   // 24: bytebase.store.ViewMetadata
	(*DependencyColumn)(nil),               // 25: bytebase.store.DependencyColumn
	(*MaterializedViewMetadata)(nil),       // 26: bytebase.store.MaterializedViewMetadata
	(*DependencyTable)(nil),                // 27: bytebase.store.DependencyTable
	(*FunctionMetadata)(nil),               // 28: bytebase.store.FunctionMetadata
	(*ProcedureMetadata)(nil),              // 29: bytebase.store.ProcedureMetadata
	(*PackageMetadata)(nil),                // 30: bytebase.store.PackageMetadata
	(*IndexMetadata)(nil),                  // 31: bytebase.store.IndexMetadata
	(*SpatialIndexConfig)(nil),             // 32: bytebase.store.SpatialIndexConfig
	(*TessellationConfig)(nil),             // 33: bytebase.store.TessellationConfig
	(*BoundingBox)(nil),                    // 34: bytebase.store.BoundingBox
	(*GridLevel)(nil),                      // 35: bytebase.store.GridLevel
	(*StorageConfig)(nil),                  // 36: bytebase.store.StorageConfig
	(*DimensionalConfig)(nil),              // 37: bytebase.store.DimensionalConfig
	(*ExtensionMetadata)(nil),              // 38: bytebase.store.ExtensionMetadata
	(*ForeignKeyMetadata)(nil),             // 39: bytebase.store.ForeignKeyMetadata
	(*InstanceRoleMetadata)(nil),           // 40: bytebase.store.InstanceRoleMetadata
	(*DatabaseConfig)(nil),                 // 41: bytebase.store.DatabaseConfig
	(*SchemaCatalog)(nil),                  // 42: bytebase.store.SchemaCatalog
	(*TableCatalog)(nil),                   // 43: bytebase.store.TableCatalog
	(*ColumnCatalog)(nil),                  // 44: bytebase.store.ColumnCatalog
	(*ObjectSchema)(nil),                   // 45: bytebase.store.ObjectSchema
	nil,                                    // 46: bytebase.store.DatabaseMetadata.LabelsEntry
	nil,                                    // 47: bytebase.store.SpatialIndexConfig.EngineSpecificEntry
	nil,                                    // 48: bytebase.store.ColumnCatalog.LabelsEntry
	(*ObjectSchema_StructKind)(nil),        // 49: bytebase.store.ObjectSchema.StructKind
	(*ObjectSchema_ArrayKind)(nil),         // 50: bytebase.store.ObjectSchema.ArrayKind
	nil,                                    // 51: bytebase.store.ObjectSchema.StructKind.PropertiesEntry
	(*timestamppb.Timestamp)(nil),          // 52: google.protobuf.Timestamp
	(MaskingLevel)(0),                      // 53: bytebase.store.MaskingLevel
}
var file_store_database_proto_depIdxs = []int32{
	46, // 0: bytebase.store.DatabaseMetadata.labels:type_name -> bytebase.store.DatabaseMetadata.LabelsEntry
	52, // 1: bytebase.store.DatabaseMetadata.last_sync_time:type_name -> google.protobuf.Timestamp
	10, // 2: bytebase.store.DatabaseSchemaMetadata.schemas:type_name -> bytebase.store.SchemaMetadata
	38, // 3: bytebase.store.DatabaseSchemaMetadata.extensions:type_name -> bytebase.store.ExtensionMetadata
	9,  // 4: bytebase.store.DatabaseSchemaMetadata.linked_databases:type_name -> bytebase.store.LinkedDatabaseMetadata
	18, // 5: bytebase.store.SchemaMetadata.tables:type_name -> bytebase.store.TableMetadata
	20, // 6: bytebase.store.SchemaMetadata.external_tables:type_name -> bytebase.store.ExternalTableMetadata
	24, // 7: bytebase.store.SchemaMetadata.views:type_name -> bytebase.store.ViewMetadata
	28, // 8: bytebase.store.SchemaMetadata.functions:type_name -> bytebase.store.FunctionMetadata
	29, // 9: bytebase.store.SchemaMetadata.procedures:type_name -> bytebase.store.ProcedureMetadata
	17, // 10: bytebase.store.SchemaMetadata.streams:type_name -> bytebase.store.StreamMetadata
	16, // 11: bytebase.store.SchemaMetadata.tasks:type_name -> bytebase.store.TaskMetadata
	26, // 12: bytebase.store.SchemaMetadata.materialized_views:type_name -> bytebase.store.MaterializedViewMetadata
	13, // 13: bytebase.store.SchemaMetadata.sequences:type_name -> bytebase.store.SequenceMetadata
	30, // 14: bytebase.store.SchemaMetadata.packages:type_name -> bytebase.store.PackageMetadata
	12, // 15: bytebase.store.SchemaMetadata.events:type_name -> bytebase.store.EventMetadata
	11, // 16: bytebase.store.SchemaMetadata.enum_types:type_name -> bytebase.store.EnumTypeMetadata
	0,  // 17: bytebase.store.TaskMetadata.state:type_name -> bytebase.store.TaskMetadata.State
	1,  // 18: bytebase.store.StreamMetadata.type:type_name -> bytebase.store.StreamMetadata.Type
	2,  // 19: bytebase.store.StreamMetadata.mode:type_name -> bytebase.store.StreamMetadata.Mode
	22, // 20: bytebase.store.TableMetadata.columns:type_name -> bytebase.store.ColumnMetadata
	31, // 21: bytebase.store.TableMetadata.indexes:type_name -> bytebase.store.IndexMetadata
	39, // 22: bytebase.store.TableMetadata.foreign_keys:type_name -> bytebase.store.ForeignKeyMetadata
	21, // 23: bytebase.store.TableMetadata.partitions:type_name -> bytebase.store.TablePartitionMetadata
	19, // 24: bytebase.store.TableMetadata.check_constraints:type_name -> bytebase.store.CheckConstraintMetadata
	14, // 25: bytebase.store.TableMetadata.triggers:type_name -> bytebase.store.TriggerMetadata
	15, // 26: bytebase.store.TableMetadata.rules:type_name -> bytebase.store.RuleMetadata
	22, // 27: bytebase.store.ExternalTableMetadata.columns:type_name -> bytebase.store.ColumnMetadata
	3,  // 28: bytebase.store.TablePartitionMetadata.type:type_name -> bytebase.store.TablePartitionMetadata.Type
	21, // 29: bytebase.store.TablePartitionMetadata.subpartitions:type_name -> bytebase.store.TablePartitionMetadata
	31, // 30: bytebase.store.TablePartitionMetadata.indexes:type_name -> bytebase.store.IndexMetadata
	19, // 31: bytebase.store.TablePartitionMetadata.check_constraints:type_name -> bytebase.store.CheckConstraintMetadata
	23, // 32: bytebase.store.ColumnMetadata.generation:type_name -> bytebase.store.GenerationMetadata
	4,  // 33: bytebase.store.ColumnMetadata.identity_generation:type_name -> bytebase.store.ColumnMetadata.IdentityGeneration
	5,  // 34: bytebase.store.GenerationMetadata.type:type_name -> bytebase.store.GenerationMetadata.Type
	25, // 35: bytebase.store.ViewMetadata.dependency_columns:type_name -> bytebase.store.DependencyColumn
	22, // 36: bytebase.store.ViewMetadata.columns:type_name -> bytebase.store.ColumnMetadata
	14, // 37: bytebase.store.ViewMetadata.triggers:type_name -> bytebase.store.TriggerMetadata
	15, // 38: bytebase.store.ViewMetadata.rules:type_name -> bytebase.store.RuleMetadata
	25, // 39: bytebase.store.MaterializedViewMetadata.dependency_columns:type_name -> bytebase.store.DependencyColumn
	14, // 40: bytebase.store.MaterializedViewMetadata.triggers:type_name -> bytebase.store.TriggerMetadata
	31, // 41: bytebase.store.MaterializedViewMetadata.indexes:type_name -> bytebase.store.IndexMetadata
	27, // 42: bytebase.store.FunctionMetadata.dependency_tables:type_name -> bytebase.store.DependencyTable
	32, // 43: bytebase.store.IndexMetadata.spatial_config:type_name -> bytebase.store.SpatialIndexConfig
	33, // 44: bytebase.store.SpatialIndexConfig.tessellation:type_name -> bytebase.store.TessellationConfig
	36, // 45: bytebase.store.SpatialIndexConfig.storage:type_name -> bytebase.store.StorageConfig
	37, // 46: bytebase.store.SpatialIndexConfig.dimensional:type_name -> bytebase.store.DimensionalConfig
	47, // 47: bytebase.store.SpatialIndexConfig.engine_specific:type_name -> bytebase.store.SpatialIndexConfig.EngineSpecificEntry
	34, // 48: bytebase.store.TessellationConfig.bounding_box:type_name -> bytebase.store.BoundingBox
	35, // 49: bytebase.store.TessellationConfig.grid_levels:type_name -> bytebase.store.GridLevel
	42, // 50: bytebase.store.DatabaseConfig.schemas:type_name -> bytebase.store.SchemaCatalog
	43, // 51: bytebase.store.SchemaCatalog.tables:type_name -> bytebase.store.TableCatalog
	44, // 52: bytebase.store.TableCatalog.columns:type_name -> bytebase.store.ColumnCatalog
	45, // 53: bytebase.store.TableCatalog.object_schema:type_name -> bytebase.store.ObjectSchema
	48, // 54: bytebase.store.ColumnCatalog.labels:type_name -> bytebase.store.ColumnCatalog.LabelsEntry
	45, // 55: bytebase.store.ColumnCatalog.object_schema:type_name -> bytebase.store.ObjectSchema
	53, // 56: bytebase.store.ColumnCatalog.masking_level:type_name -> bytebase.store.MaskingLevel
	6,  // 57: bytebase.store.ObjectSchema.type:type_name -> bytebase.store.ObjectSchema.Type
	49, // 58: bytebase.store.ObjectSchema.struct_kind:type_name -> bytebase.store.ObjectSchema.StructKind
	50, // 59: bytebase.store.ObjectSchema.array_kind:type_name -> bytebase.store.ObjectSchema.ArrayKind
	51, // 60: bytebase.store.ObjectSchema.StructKind.properties:type_name -> bytebase.store.ObjectSchema.StructKind.PropertiesEntry
	45, // 61: bytebase.store.ObjectSchema.ArrayKind.kind:type_name -> bytebase.store.ObjectSchema
	45, // 62: bytebase.store.ObjectSchema.StructKind.PropertiesEntry.value:type_name -> bytebase.store.ObjectSchema
	63, // [63:63] is the sub-list for method output_type
	63, // [63:63] is the sub-list for method input_type
	63, // [63:63] is the sub-list for extension type_name
	63, // [63:63] is the sub-list for extension extendee
	0,  // [0:63] is the sub-list for field type_name
}

func init() { file_store_database_proto_init() }
func file_store_database_proto_init() {
	if File_store_database_proto != nil {
		return
	}
	file_store_common_proto_init()
	file_store_database_proto_msgTypes[36].OneofWrappers = []any{}
	file_store_database_proto_msgTypes[37].OneofWrappers = []any{}
	file_store_database_proto_msgTypes[38].OneofWrappers = []any{
		(*ObjectSchema_StructKind_)(nil),
		(*ObjectSchema_ArrayKind_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_store_database_proto_rawDesc), len(file_store_database_proto_rawDesc)),
			NumEnums:      7,
			NumMessages:   45,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_store_database_proto_goTypes,
		DependencyIndexes: file_store_database_proto_depIdxs,
		EnumInfos:         file_store_database_proto_enumTypes,
		MessageInfos:      file_store_database_proto_msgTypes,
	}.Build()
	File_store_database_proto = out.File
	file_store_database_proto_goTypes = nil
	file_store_database_proto_depIdxs = nil
}
