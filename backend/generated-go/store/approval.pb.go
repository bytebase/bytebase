// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        (unknown)
// source: store/approval.proto

package store

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Status represents the approver's decision state.
type IssuePayloadApproval_Approver_Status int32

const (
	IssuePayloadApproval_Approver_STATUS_UNSPECIFIED IssuePayloadApproval_Approver_Status = 0
	// Approval is pending from this approver.
	IssuePayloadApproval_Approver_PENDING IssuePayloadApproval_Approver_Status = 1
	// Approver has approved the issue.
	IssuePayloadApproval_Approver_APPROVED IssuePayloadApproval_Approver_Status = 2
	// Approver has rejected the issue.
	IssuePayloadApproval_Approver_REJECTED IssuePayloadApproval_Approver_Status = 3
)

// Enum value maps for IssuePayloadApproval_Approver_Status.
var (
	IssuePayloadApproval_Approver_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "PENDING",
		2: "APPROVED",
		3: "REJECTED",
	}
	IssuePayloadApproval_Approver_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"PENDING":            1,
		"APPROVED":           2,
		"REJECTED":           3,
	}
)

func (x IssuePayloadApproval_Approver_Status) Enum() *IssuePayloadApproval_Approver_Status {
	p := new(IssuePayloadApproval_Approver_Status)
	*p = x
	return p
}

func (x IssuePayloadApproval_Approver_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IssuePayloadApproval_Approver_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_store_approval_proto_enumTypes[0].Descriptor()
}

func (IssuePayloadApproval_Approver_Status) Type() protoreflect.EnumType {
	return &file_store_approval_proto_enumTypes[0]
}

func (x IssuePayloadApproval_Approver_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IssuePayloadApproval_Approver_Status.Descriptor instead.
func (IssuePayloadApproval_Approver_Status) EnumDescriptor() ([]byte, []int) {
	return file_store_approval_proto_rawDescGZIP(), []int{0, 0, 0}
}

// IssuePayloadApproval records the approval template used and approval history for an issue.
type IssuePayloadApproval struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The approval template being used for this issue.
	ApprovalTemplate *ApprovalTemplate `protobuf:"bytes,1,opt,name=approval_template,json=approvalTemplate,proto3" json:"approval_template,omitempty"`
	// List of approvers and their current status.
	Approvers []*IssuePayloadApproval_Approver `protobuf:"bytes,2,rep,name=approvers,proto3" json:"approvers,omitempty"`
	// Whether the system has finished finding a matching approval template.
	// False means the backend is still searching for matching templates.
	ApprovalFindingDone bool `protobuf:"varint,3,opt,name=approval_finding_done,json=approvalFindingDone,proto3" json:"approval_finding_done,omitempty"`
	// Error message if approval template finding failed.
	ApprovalFindingError string `protobuf:"bytes,4,opt,name=approval_finding_error,json=approvalFindingError,proto3" json:"approval_finding_error,omitempty"`
	// The assessed risk level for this issue.
	RiskLevel     RiskLevel `protobuf:"varint,5,opt,name=risk_level,json=riskLevel,proto3,enum=bytebase.store.RiskLevel" json:"risk_level,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IssuePayloadApproval) Reset() {
	*x = IssuePayloadApproval{}
	mi := &file_store_approval_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IssuePayloadApproval) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssuePayloadApproval) ProtoMessage() {}

func (x *IssuePayloadApproval) ProtoReflect() protoreflect.Message {
	mi := &file_store_approval_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssuePayloadApproval.ProtoReflect.Descriptor instead.
func (*IssuePayloadApproval) Descriptor() ([]byte, []int) {
	return file_store_approval_proto_rawDescGZIP(), []int{0}
}

func (x *IssuePayloadApproval) GetApprovalTemplate() *ApprovalTemplate {
	if x != nil {
		return x.ApprovalTemplate
	}
	return nil
}

func (x *IssuePayloadApproval) GetApprovers() []*IssuePayloadApproval_Approver {
	if x != nil {
		return x.Approvers
	}
	return nil
}

func (x *IssuePayloadApproval) GetApprovalFindingDone() bool {
	if x != nil {
		return x.ApprovalFindingDone
	}
	return false
}

func (x *IssuePayloadApproval) GetApprovalFindingError() string {
	if x != nil {
		return x.ApprovalFindingError
	}
	return ""
}

func (x *IssuePayloadApproval) GetRiskLevel() RiskLevel {
	if x != nil {
		return x.RiskLevel
	}
	return RiskLevel_RISK_LEVEL_UNSPECIFIED
}

// ApprovalTemplate defines the approval workflow and requirements for an issue.
type ApprovalTemplate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The unique identifier for the approval template.
	// Built-in templates use "bb." prefix (e.g., "bb.project-owner", "bb.workspace-dba").
	// Custom templates use a UUID or other unique identifier.
	Id string `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	// The approval workflow specification.
	Flow *ApprovalFlow `protobuf:"bytes,1,opt,name=flow,proto3" json:"flow,omitempty"`
	// Human-readable title of the approval template.
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	// Detailed description of when this template applies.
	Description   string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApprovalTemplate) Reset() {
	*x = ApprovalTemplate{}
	mi := &file_store_approval_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApprovalTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApprovalTemplate) ProtoMessage() {}

func (x *ApprovalTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_store_approval_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApprovalTemplate.ProtoReflect.Descriptor instead.
func (*ApprovalTemplate) Descriptor() ([]byte, []int) {
	return file_store_approval_proto_rawDescGZIP(), []int{1}
}

func (x *ApprovalTemplate) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ApprovalTemplate) GetFlow() *ApprovalFlow {
	if x != nil {
		return x.Flow
	}
	return nil
}

func (x *ApprovalTemplate) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ApprovalTemplate) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// ApprovalFlow defines the sequence of approvals required.
type ApprovalFlow struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of role names that must approve, in order.
	Roles         []string `protobuf:"bytes,1,rep,name=roles,proto3" json:"roles,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ApprovalFlow) Reset() {
	*x = ApprovalFlow{}
	mi := &file_store_approval_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ApprovalFlow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApprovalFlow) ProtoMessage() {}

func (x *ApprovalFlow) ProtoReflect() protoreflect.Message {
	mi := &file_store_approval_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApprovalFlow.ProtoReflect.Descriptor instead.
func (*ApprovalFlow) Descriptor() ([]byte, []int) {
	return file_store_approval_proto_rawDescGZIP(), []int{2}
}

func (x *ApprovalFlow) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

// Approver represents a user who can approve or reject an issue.
type IssuePayloadApproval_Approver struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The current approval status.
	Status IssuePayloadApproval_Approver_Status `protobuf:"varint,1,opt,name=status,proto3,enum=bytebase.store.IssuePayloadApproval_Approver_Status" json:"status,omitempty"`
	// The ID of the principal who is the approver.
	PrincipalId   int32 `protobuf:"varint,2,opt,name=principal_id,json=principalId,proto3" json:"principal_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IssuePayloadApproval_Approver) Reset() {
	*x = IssuePayloadApproval_Approver{}
	mi := &file_store_approval_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IssuePayloadApproval_Approver) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IssuePayloadApproval_Approver) ProtoMessage() {}

func (x *IssuePayloadApproval_Approver) ProtoReflect() protoreflect.Message {
	mi := &file_store_approval_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IssuePayloadApproval_Approver.ProtoReflect.Descriptor instead.
func (*IssuePayloadApproval_Approver) Descriptor() ([]byte, []int) {
	return file_store_approval_proto_rawDescGZIP(), []int{0, 0}
}

func (x *IssuePayloadApproval_Approver) GetStatus() IssuePayloadApproval_Approver_Status {
	if x != nil {
		return x.Status
	}
	return IssuePayloadApproval_Approver_STATUS_UNSPECIFIED
}

func (x *IssuePayloadApproval_Approver) GetPrincipalId() int32 {
	if x != nil {
		return x.PrincipalId
	}
	return 0
}

var File_store_approval_proto protoreflect.FileDescriptor

const file_store_approval_proto_rawDesc = "" +
	"\n" +
	"\x14store/approval.proto\x12\x0ebytebase.store\x1a\x12store/common.proto\"\x9f\x04\n" +
	"\x14IssuePayloadApproval\x12M\n" +
	"\x11approval_template\x18\x01 \x01(\v2 .bytebase.store.ApprovalTemplateR\x10approvalTemplate\x12K\n" +
	"\tapprovers\x18\x02 \x03(\v2-.bytebase.store.IssuePayloadApproval.ApproverR\tapprovers\x122\n" +
	"\x15approval_finding_done\x18\x03 \x01(\bR\x13approvalFindingDone\x124\n" +
	"\x16approval_finding_error\x18\x04 \x01(\tR\x14approvalFindingError\x128\n" +
	"\n" +
	"risk_level\x18\x05 \x01(\x0e2\x19.bytebase.store.RiskLevelR\triskLevel\x1a\xc6\x01\n" +
	"\bApprover\x12L\n" +
	"\x06status\x18\x01 \x01(\x0e24.bytebase.store.IssuePayloadApproval.Approver.StatusR\x06status\x12!\n" +
	"\fprincipal_id\x18\x02 \x01(\x05R\vprincipalId\"I\n" +
	"\x06Status\x12\x16\n" +
	"\x12STATUS_UNSPECIFIED\x10\x00\x12\v\n" +
	"\aPENDING\x10\x01\x12\f\n" +
	"\bAPPROVED\x10\x02\x12\f\n" +
	"\bREJECTED\x10\x03\"\x8c\x01\n" +
	"\x10ApprovalTemplate\x12\x0e\n" +
	"\x02id\x18\x04 \x01(\tR\x02id\x120\n" +
	"\x04flow\x18\x01 \x01(\v2\x1c.bytebase.store.ApprovalFlowR\x04flow\x12\x14\n" +
	"\x05title\x18\x02 \x01(\tR\x05title\x12 \n" +
	"\vdescription\x18\x03 \x01(\tR\vdescription\"$\n" +
	"\fApprovalFlow\x12\x14\n" +
	"\x05roles\x18\x01 \x03(\tR\x05rolesB\x90\x01\n" +
	"\x12com.bytebase.storeB\rApprovalProtoP\x01Z\x12generated-go/store\xa2\x02\x03BSX\xaa\x02\x0eBytebase.Store\xca\x02\x0eBytebase\\Store\xe2\x02\x1aBytebase\\Store\\GPBMetadata\xea\x02\x0fBytebase::Storeb\x06proto3"

var (
	file_store_approval_proto_rawDescOnce sync.Once
	file_store_approval_proto_rawDescData []byte
)

func file_store_approval_proto_rawDescGZIP() []byte {
	file_store_approval_proto_rawDescOnce.Do(func() {
		file_store_approval_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_store_approval_proto_rawDesc), len(file_store_approval_proto_rawDesc)))
	})
	return file_store_approval_proto_rawDescData
}

var file_store_approval_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_store_approval_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_store_approval_proto_goTypes = []any{
	(IssuePayloadApproval_Approver_Status)(0), // 0: bytebase.store.IssuePayloadApproval.Approver.Status
	(*IssuePayloadApproval)(nil),              // 1: bytebase.store.IssuePayloadApproval
	(*ApprovalTemplate)(nil),                  // 2: bytebase.store.ApprovalTemplate
	(*ApprovalFlow)(nil),                      // 3: bytebase.store.ApprovalFlow
	(*IssuePayloadApproval_Approver)(nil),     // 4: bytebase.store.IssuePayloadApproval.Approver
	(RiskLevel)(0),                            // 5: bytebase.store.RiskLevel
}
var file_store_approval_proto_depIdxs = []int32{
	2, // 0: bytebase.store.IssuePayloadApproval.approval_template:type_name -> bytebase.store.ApprovalTemplate
	4, // 1: bytebase.store.IssuePayloadApproval.approvers:type_name -> bytebase.store.IssuePayloadApproval.Approver
	5, // 2: bytebase.store.IssuePayloadApproval.risk_level:type_name -> bytebase.store.RiskLevel
	3, // 3: bytebase.store.ApprovalTemplate.flow:type_name -> bytebase.store.ApprovalFlow
	0, // 4: bytebase.store.IssuePayloadApproval.Approver.status:type_name -> bytebase.store.IssuePayloadApproval.Approver.Status
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_store_approval_proto_init() }
func file_store_approval_proto_init() {
	if File_store_approval_proto != nil {
		return
	}
	file_store_common_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_store_approval_proto_rawDesc), len(file_store_approval_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_store_approval_proto_goTypes,
		DependencyIndexes: file_store_approval_proto_depIdxs,
		EnumInfos:         file_store_approval_proto_enumTypes,
		MessageInfos:      file_store_approval_proto_msgTypes,
	}.Build()
	File_store_approval_proto = out.File
	file_store_approval_proto_goTypes = nil
	file_store_approval_proto_depIdxs = nil
}
