// Code generated by protoc-gen-equal-go. DO NOT EDIT.
// source: store/changelog.proto

package store

func (x *ChangelogPayload) Equal(y *ChangelogPayload) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.TaskRun != y.TaskRun {
		return false
	}
	if x.Issue != y.Issue {
		return false
	}
	if x.Revision != y.Revision {
		return false
	}
	if !x.ChangedResources.Equal(y.ChangedResources) {
		return false
	}
	if x.Sheet != y.Sheet {
		return false
	}
	if x.Version != y.Version {
		return false
	}
	if x.Type != y.Type {
		return false
	}
	if x.GitCommit != y.GitCommit {
		return false
	}
	if x.MigrationType != y.MigrationType {
		return false
	}
	return true
}

func (x *ChangedResources) Equal(y *ChangedResources) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if len(x.Databases) != len(y.Databases) {
		return false
	}
	for i := 0; i < len(x.Databases); i++ {
		if !x.Databases[i].Equal(y.Databases[i]) {
			return false
		}
	}
	return true
}

func (x *ChangedResourceDatabase) Equal(y *ChangedResourceDatabase) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	if len(x.Schemas) != len(y.Schemas) {
		return false
	}
	for i := 0; i < len(x.Schemas); i++ {
		if !x.Schemas[i].Equal(y.Schemas[i]) {
			return false
		}
	}
	return true
}

func (x *ChangedResourceSchema) Equal(y *ChangedResourceSchema) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	if len(x.Tables) != len(y.Tables) {
		return false
	}
	for i := 0; i < len(x.Tables); i++ {
		if !x.Tables[i].Equal(y.Tables[i]) {
			return false
		}
	}
	if len(x.Views) != len(y.Views) {
		return false
	}
	for i := 0; i < len(x.Views); i++ {
		if !x.Views[i].Equal(y.Views[i]) {
			return false
		}
	}
	if len(x.Functions) != len(y.Functions) {
		return false
	}
	for i := 0; i < len(x.Functions); i++ {
		if !x.Functions[i].Equal(y.Functions[i]) {
			return false
		}
	}
	if len(x.Procedures) != len(y.Procedures) {
		return false
	}
	for i := 0; i < len(x.Procedures); i++ {
		if !x.Procedures[i].Equal(y.Procedures[i]) {
			return false
		}
	}
	return true
}

func (x *ChangedResourceTable) Equal(y *ChangedResourceTable) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	if x.TableRows != y.TableRows {
		return false
	}
	if len(x.Ranges) != len(y.Ranges) {
		return false
	}
	for i := 0; i < len(x.Ranges); i++ {
		if !x.Ranges[i].Equal(y.Ranges[i]) {
			return false
		}
	}
	return true
}

func (x *ChangedResourceView) Equal(y *ChangedResourceView) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	if len(x.Ranges) != len(y.Ranges) {
		return false
	}
	for i := 0; i < len(x.Ranges); i++ {
		if !x.Ranges[i].Equal(y.Ranges[i]) {
			return false
		}
	}
	return true
}

func (x *ChangedResourceFunction) Equal(y *ChangedResourceFunction) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	if len(x.Ranges) != len(y.Ranges) {
		return false
	}
	for i := 0; i < len(x.Ranges); i++ {
		if !x.Ranges[i].Equal(y.Ranges[i]) {
			return false
		}
	}
	return true
}

func (x *ChangedResourceProcedure) Equal(y *ChangedResourceProcedure) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Name != y.Name {
		return false
	}
	if len(x.Ranges) != len(y.Ranges) {
		return false
	}
	for i := 0; i < len(x.Ranges); i++ {
		if !x.Ranges[i].Equal(y.Ranges[i]) {
			return false
		}
	}
	return true
}
