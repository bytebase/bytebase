// Code generated by protoc-gen-equal-go. DO NOT EDIT.
// source: store/setting.proto

package store

import (
	expr "google.golang.org/genproto/googleapis/type/expr"
	proto "google.golang.org/protobuf/proto"
)

func (x *WorkspaceProfileSetting) Equal(y *WorkspaceProfileSetting) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.ExternalUrl != y.ExternalUrl {
		return false
	}
	if x.DisallowSignup != y.DisallowSignup {
		return false
	}
	if x.Require_2Fa != y.Require_2Fa {
		return false
	}
	if p, q := x.TokenDuration, y.TokenDuration; (p == nil && q != nil) || (p != nil && (q == nil || p.Seconds != q.Seconds || p.Nanos != q.Nanos)) {
		return false
	}
	if !x.Announcement.Equal(y.Announcement) {
		return false
	}
	if p, q := x.MaximumRoleExpiration, y.MaximumRoleExpiration; (p == nil && q != nil) || (p != nil && (q == nil || p.Seconds != q.Seconds || p.Nanos != q.Nanos)) {
		return false
	}
	if len(x.Domains) != len(y.Domains) {
		return false
	}
	for i := 0; i < len(x.Domains); i++ {
		if x.Domains[i] != y.Domains[i] {
			return false
		}
	}
	if x.EnforceIdentityDomain != y.EnforceIdentityDomain {
		return false
	}
	if x.DatabaseChangeMode != y.DatabaseChangeMode {
		return false
	}
	if x.DisallowPasswordSignin != y.DisallowPasswordSignin {
		return false
	}
	if x.EnableMetricCollection != y.EnableMetricCollection {
		return false
	}
	if p, q := x.InactiveSessionTimeout, y.InactiveSessionTimeout; (p == nil && q != nil) || (p != nil && (q == nil || p.Seconds != q.Seconds || p.Nanos != q.Nanos)) {
		return false
	}
	return true
}

func (x *Announcement) Equal(y *Announcement) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Level != y.Level {
		return false
	}
	if x.Text != y.Text {
		return false
	}
	if x.Link != y.Link {
		return false
	}
	return true
}

func (x *WorkspaceApprovalSetting_Rule) Equal(y *WorkspaceApprovalSetting_Rule) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if !x.Template.Equal(y.Template) {
		return false
	}
	if equal, ok := interface{}(x.Condition).(interface{ Equal(*expr.Expr) bool }); !ok || !equal.Equal(y.Condition) {
		return false
	} else if !proto.Equal(x.Condition, y.Condition) {
		return false
	}
	return true
}

func (x *WorkspaceApprovalSetting) Equal(y *WorkspaceApprovalSetting) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if len(x.Rules) != len(y.Rules) {
		return false
	}
	for i := 0; i < len(x.Rules); i++ {
		if !x.Rules[i].Equal(y.Rules[i]) {
			return false
		}
	}
	return true
}

func (x *SchemaTemplateSetting_FieldTemplate) Equal(y *SchemaTemplateSetting_FieldTemplate) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Id != y.Id {
		return false
	}
	if x.Engine != y.Engine {
		return false
	}
	if x.Category != y.Category {
		return false
	}
	if !x.Column.Equal(y.Column) {
		return false
	}
	if !x.Catalog.Equal(y.Catalog) {
		return false
	}
	return true
}

func (x *SchemaTemplateSetting_ColumnType) Equal(y *SchemaTemplateSetting_ColumnType) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Engine != y.Engine {
		return false
	}
	if x.Enabled != y.Enabled {
		return false
	}
	if len(x.Types) != len(y.Types) {
		return false
	}
	for i := 0; i < len(x.Types); i++ {
		if x.Types[i] != y.Types[i] {
			return false
		}
	}
	return true
}

func (x *SchemaTemplateSetting_TableTemplate) Equal(y *SchemaTemplateSetting_TableTemplate) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Id != y.Id {
		return false
	}
	if x.Engine != y.Engine {
		return false
	}
	if x.Category != y.Category {
		return false
	}
	if !x.Table.Equal(y.Table) {
		return false
	}
	if !x.Catalog.Equal(y.Catalog) {
		return false
	}
	return true
}

func (x *SchemaTemplateSetting) Equal(y *SchemaTemplateSetting) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if len(x.FieldTemplates) != len(y.FieldTemplates) {
		return false
	}
	for i := 0; i < len(x.FieldTemplates); i++ {
		if !x.FieldTemplates[i].Equal(y.FieldTemplates[i]) {
			return false
		}
	}
	if len(x.ColumnTypes) != len(y.ColumnTypes) {
		return false
	}
	for i := 0; i < len(x.ColumnTypes); i++ {
		if !x.ColumnTypes[i].Equal(y.ColumnTypes[i]) {
			return false
		}
	}
	if len(x.TableTemplates) != len(y.TableTemplates) {
		return false
	}
	for i := 0; i < len(x.TableTemplates); i++ {
		if !x.TableTemplates[i].Equal(y.TableTemplates[i]) {
			return false
		}
	}
	return true
}

func (x *DataClassificationSetting_DataClassificationConfig_Level) Equal(y *DataClassificationSetting_DataClassificationConfig_Level) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Id != y.Id {
		return false
	}
	if x.Title != y.Title {
		return false
	}
	if x.Description != y.Description {
		return false
	}
	return true
}

func (x *DataClassificationSetting_DataClassificationConfig_DataClassification) Equal(y *DataClassificationSetting_DataClassificationConfig_DataClassification) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Id != y.Id {
		return false
	}
	if x.Title != y.Title {
		return false
	}
	if x.Description != y.Description {
		return false
	}
	if p, q := x.LevelId, y.LevelId; (p == nil && q != nil) || (p != nil && (q == nil || *p != *q)) {
		return false
	}
	return true
}

func (x *DataClassificationSetting_DataClassificationConfig) Equal(y *DataClassificationSetting_DataClassificationConfig) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Id != y.Id {
		return false
	}
	if x.Title != y.Title {
		return false
	}
	if len(x.Levels) != len(y.Levels) {
		return false
	}
	for i := 0; i < len(x.Levels); i++ {
		if !x.Levels[i].Equal(y.Levels[i]) {
			return false
		}
	}
	if len(x.Classification) != len(y.Classification) {
		return false
	}
	for k := range x.Classification {
		_, ok := y.Classification[k]
		if !ok {
			return false
		}
		if !x.Classification[k].Equal(y.Classification[k]) {
			return false
		}
	}
	if x.ClassificationFromConfig != y.ClassificationFromConfig {
		return false
	}
	return true
}

func (x *DataClassificationSetting) Equal(y *DataClassificationSetting) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if len(x.Configs) != len(y.Configs) {
		return false
	}
	for i := 0; i < len(x.Configs); i++ {
		if !x.Configs[i].Equal(y.Configs[i]) {
			return false
		}
	}
	return true
}

func (x *SemanticTypeSetting_SemanticType) Equal(y *SemanticTypeSetting_SemanticType) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Id != y.Id {
		return false
	}
	if x.Title != y.Title {
		return false
	}
	if x.Description != y.Description {
		return false
	}
	if !x.Algorithm.Equal(y.Algorithm) {
		return false
	}
	if x.Icon != y.Icon {
		return false
	}
	return true
}

func (x *SemanticTypeSetting) Equal(y *SemanticTypeSetting) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if len(x.Types) != len(y.Types) {
		return false
	}
	for i := 0; i < len(x.Types); i++ {
		if !x.Types[i].Equal(y.Types[i]) {
			return false
		}
	}
	return true
}

func (x *Algorithm_FullMask) Equal(y *Algorithm_FullMask) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Substitution != y.Substitution {
		return false
	}
	return true
}

func (x *Algorithm_RangeMask_Slice) Equal(y *Algorithm_RangeMask_Slice) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Start != y.Start {
		return false
	}
	if x.End != y.End {
		return false
	}
	if x.Substitution != y.Substitution {
		return false
	}
	return true
}

func (x *Algorithm_RangeMask) Equal(y *Algorithm_RangeMask) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if len(x.Slices) != len(y.Slices) {
		return false
	}
	for i := 0; i < len(x.Slices); i++ {
		if !x.Slices[i].Equal(y.Slices[i]) {
			return false
		}
	}
	return true
}

func (x *Algorithm_MD5Mask) Equal(y *Algorithm_MD5Mask) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Salt != y.Salt {
		return false
	}
	return true
}

func (x *Algorithm_InnerOuterMask) Equal(y *Algorithm_InnerOuterMask) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.PrefixLen != y.PrefixLen {
		return false
	}
	if x.SuffixLen != y.SuffixLen {
		return false
	}
	if x.Substitution != y.Substitution {
		return false
	}
	if x.Type != y.Type {
		return false
	}
	return true
}

func (x *Algorithm) Equal(y *Algorithm) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if !x.GetFullMask().Equal(y.GetFullMask()) {
		return false
	}
	if !x.GetRangeMask().Equal(y.GetRangeMask()) {
		return false
	}
	if !x.GetMd5Mask().Equal(y.GetMd5Mask()) {
		return false
	}
	if !x.GetInnerOuterMask().Equal(y.GetInnerOuterMask()) {
		return false
	}
	return true
}

func (x *AppIMSetting_Slack) Equal(y *AppIMSetting_Slack) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Enabled != y.Enabled {
		return false
	}
	if x.Token != y.Token {
		return false
	}
	return true
}

func (x *AppIMSetting_Feishu) Equal(y *AppIMSetting_Feishu) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Enabled != y.Enabled {
		return false
	}
	if x.AppId != y.AppId {
		return false
	}
	if x.AppSecret != y.AppSecret {
		return false
	}
	return true
}

func (x *AppIMSetting_Wecom) Equal(y *AppIMSetting_Wecom) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Enabled != y.Enabled {
		return false
	}
	if x.CorpId != y.CorpId {
		return false
	}
	if x.AgentId != y.AgentId {
		return false
	}
	if x.Secret != y.Secret {
		return false
	}
	return true
}

func (x *AppIMSetting_Lark) Equal(y *AppIMSetting_Lark) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Enabled != y.Enabled {
		return false
	}
	if x.AppId != y.AppId {
		return false
	}
	if x.AppSecret != y.AppSecret {
		return false
	}
	return true
}

func (x *AppIMSetting_DingTalk) Equal(y *AppIMSetting_DingTalk) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Enabled != y.Enabled {
		return false
	}
	if x.ClientId != y.ClientId {
		return false
	}
	if x.ClientSecret != y.ClientSecret {
		return false
	}
	if x.RobotCode != y.RobotCode {
		return false
	}
	return true
}

func (x *AppIMSetting) Equal(y *AppIMSetting) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if !x.Slack.Equal(y.Slack) {
		return false
	}
	if !x.Feishu.Equal(y.Feishu) {
		return false
	}
	if !x.Wecom.Equal(y.Wecom) {
		return false
	}
	if !x.Lark.Equal(y.Lark) {
		return false
	}
	if !x.Dingtalk.Equal(y.Dingtalk) {
		return false
	}
	return true
}

func (x *SCIMSetting) Equal(y *SCIMSetting) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Token != y.Token {
		return false
	}
	return true
}

func (x *PasswordRestrictionSetting) Equal(y *PasswordRestrictionSetting) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.MinLength != y.MinLength {
		return false
	}
	if x.RequireNumber != y.RequireNumber {
		return false
	}
	if x.RequireLetter != y.RequireLetter {
		return false
	}
	if x.RequireUppercaseLetter != y.RequireUppercaseLetter {
		return false
	}
	if x.RequireSpecialCharacter != y.RequireSpecialCharacter {
		return false
	}
	if x.RequireResetPasswordForFirstLogin != y.RequireResetPasswordForFirstLogin {
		return false
	}
	if p, q := x.PasswordRotation, y.PasswordRotation; (p == nil && q != nil) || (p != nil && (q == nil || p.Seconds != q.Seconds || p.Nanos != q.Nanos)) {
		return false
	}
	return true
}

func (x *AISetting) Equal(y *AISetting) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Enabled != y.Enabled {
		return false
	}
	if x.Provider != y.Provider {
		return false
	}
	if x.Endpoint != y.Endpoint {
		return false
	}
	if x.ApiKey != y.ApiKey {
		return false
	}
	if x.Model != y.Model {
		return false
	}
	if x.Version != y.Version {
		return false
	}
	return true
}

func (x *EnvironmentSetting_Environment) Equal(y *EnvironmentSetting_Environment) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Id != y.Id {
		return false
	}
	if x.Title != y.Title {
		return false
	}
	if len(x.Tags) != len(y.Tags) {
		return false
	}
	for k := range x.Tags {
		_, ok := y.Tags[k]
		if !ok {
			return false
		}
		if x.Tags[k] != y.Tags[k] {
			return false
		}
	}
	if x.Color != y.Color {
		return false
	}
	return true
}

func (x *EnvironmentSetting) Equal(y *EnvironmentSetting) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if len(x.Environments) != len(y.Environments) {
		return false
	}
	for i := 0; i < len(x.Environments); i++ {
		if !x.Environments[i].Equal(y.Environments[i]) {
			return false
		}
	}
	return true
}
