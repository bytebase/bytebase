// Code generated by protoc-gen-equal-go. DO NOT EDIT.
// source: store/task_run.proto

package store

func (x *TaskRun) Equal(y *TaskRun) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	return true
}

func (x *TaskRunResult) Equal(y *TaskRunResult) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Detail != y.Detail {
		return false
	}
	if x.Changelog != y.Changelog {
		return false
	}
	if x.Version != y.Version {
		return false
	}
	if !x.StartPosition.Equal(y.StartPosition) {
		return false
	}
	if !x.EndPosition.Equal(y.EndPosition) {
		return false
	}
	if x.ExportArchiveUid != y.ExportArchiveUid {
		return false
	}
	if !x.PriorBackupDetail.Equal(y.PriorBackupDetail) {
		return false
	}
	return true
}

func (x *PriorBackupDetail_Item_Table) Equal(y *PriorBackupDetail_Item_Table) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.Database != y.Database {
		return false
	}
	if x.Schema != y.Schema {
		return false
	}
	if x.Table != y.Table {
		return false
	}
	return true
}

func (x *PriorBackupDetail_Item) Equal(y *PriorBackupDetail_Item) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if !x.SourceTable.Equal(y.SourceTable) {
		return false
	}
	if !x.TargetTable.Equal(y.TargetTable) {
		return false
	}
	if !x.StartPosition.Equal(y.StartPosition) {
		return false
	}
	if !x.EndPosition.Equal(y.EndPosition) {
		return false
	}
	return true
}

func (x *PriorBackupDetail) Equal(y *PriorBackupDetail) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if len(x.Items) != len(y.Items) {
		return false
	}
	for i := 0; i < len(x.Items); i++ {
		if !x.Items[i].Equal(y.Items[i]) {
			return false
		}
	}
	return true
}

func (x *SchedulerInfo_WaitingCause) Equal(y *SchedulerInfo_WaitingCause) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.GetConnectionLimit() != y.GetConnectionLimit() {
		return false
	}
	if x.GetTaskUid() != y.GetTaskUid() {
		return false
	}
	if x.GetParallelTasksLimit() != y.GetParallelTasksLimit() {
		return false
	}
	return true
}

func (x *SchedulerInfo) Equal(y *SchedulerInfo) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if p, q := x.ReportTime, y.ReportTime; (p == nil && q != nil) || (p != nil && (q == nil || p.Seconds != q.Seconds || p.Nanos != q.Nanos)) {
		return false
	}
	if !x.WaitingCause.Equal(y.WaitingCause) {
		return false
	}
	return true
}
