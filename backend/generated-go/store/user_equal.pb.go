// Code generated by protoc-gen-equal-go. DO NOT EDIT.
// source: store/user.proto

package store

func (x *MFAConfig) Equal(y *MFAConfig) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if x.OtpSecret != y.OtpSecret {
		return false
	}
	if x.TempOtpSecret != y.TempOtpSecret {
		return false
	}
	if len(x.RecoveryCodes) != len(y.RecoveryCodes) {
		return false
	}
	for i := 0; i < len(x.RecoveryCodes); i++ {
		if x.RecoveryCodes[i] != y.RecoveryCodes[i] {
			return false
		}
	}
	if len(x.TempRecoveryCodes) != len(y.TempRecoveryCodes) {
		return false
	}
	for i := 0; i < len(x.TempRecoveryCodes); i++ {
		if x.TempRecoveryCodes[i] != y.TempRecoveryCodes[i] {
			return false
		}
	}
	if p, q := x.TempOtpSecretCreatedTime, y.TempOtpSecretCreatedTime; (p == nil && q != nil) || (p != nil && (q == nil || p.Seconds != q.Seconds || p.Nanos != q.Nanos)) {
		return false
	}
	return true
}

func (x *UserProfile) Equal(y *UserProfile) bool {
	if x == y {
		return true
	}
	if x == nil || y == nil {
		return x == nil && y == nil
	}
	if p, q := x.LastLoginTime, y.LastLoginTime; (p == nil && q != nil) || (p != nil && (q == nil || p.Seconds != q.Seconds || p.Nanos != q.Nanos)) {
		return false
	}
	if p, q := x.LastChangePasswordTime, y.LastChangePasswordTime; (p == nil && q != nil) || (p != nil && (q == nil || p.Seconds != q.Seconds || p.Nanos != q.Nanos)) {
		return false
	}
	if x.Source != y.Source {
		return false
	}
	return true
}
