package api

import (
	"encoding/json"
)

// Repository is the API message for a repository.
type Repository struct {
	ID int `jsonapi:"primary,repository"`

	// Related fields
	VCSID     int
	VCS       *VCS `jsonapi:"relation,vcs"`
	ProjectID int
	Project   *Project `jsonapi:"relation,project"`

	// Domain specific fields
	Name          string `jsonapi:"attr,name"`
	FullPath      string `jsonapi:"attr,fullPath"`
	WebURL        string `jsonapi:"attr,webUrl"`
	BranchFilter  string `jsonapi:"attr,branchFilter"`
	BaseDirectory string `jsonapi:"attr,baseDirectory"`
	// The file path template for matching the committed migration script.
	FilePathTemplate string `jsonapi:"attr,filePathTemplate"`
	// The file path template for storing the latest schema auto-generated by Bytebase after migration.
	// If empty, then Bytebase won't auto generate it.
	SchemaPathTemplate string `jsonapi:"attr,schemaPathTemplate"`
	// The file path template for matching the sql files for sheet.
	SheetPathTemplate string `jsonapi:"attr,sheetPathTemplate"`
	// Setup CI to do SQL review for all PRs.
	EnableSQLReviewCI  bool   `jsonapi:"attr,enableSQLReviewCI"`
	ExternalID         string `jsonapi:"attr,externalId"`
	ExternalWebhookID  string
	WebhookURLHost     string
	WebhookEndpointID  string `jsonapi:"attr,webhookEndpointID"`
	WebhookSecretToken string
	// These will be exclusively used on the server side and we don't return it to the client.
	AccessToken  string
	ExpiresTs    int64
	RefreshToken string
}

// RepositoryFind is the API message for finding repositories.
type RepositoryFind struct {
	ID *int

	// Related fields
	VCSID     *int
	ProjectID *int

	// Domain specific fields
	WebhookEndpointID *string
	WebURL            *string
}

func (find *RepositoryFind) String() string {
	str, err := json.Marshal(*find)
	if err != nil {
		return err.Error()
	}
	return string(str)
}
