{{- $external_url := index .Values.bytebase.option "external-url" -}}
{{- $existingPgURLSecret := .Values.bytebase.option.existingPgURLSecret -}}
{{- $existingPgURLSecretKey := .Values.bytebase.option.existingPgURLSecretKey -}}
{{- $port := .Values.bytebase.option.port -}}
{{- $pg := .Values.bytebase.option.pg -}}
{{- $data := .Values.bytebase.option.data -}}
{{- $version := .Values.bytebase.version -}}
{{- $registryMirrorHost := .Values.bytebase.registryMirrorHost -}}
{{- $disable_sample := index .Values.bytebase.option "disable-sample" -}}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: bytebase
  namespace: {{ template "bytebase.namespace" . }}
  labels:
    {{- include "bytebase.labels" . | nindent 4}}
spec:
  selector:
    matchLabels:
      app: bytebase
  serviceName: "bytebase"
  replicas: 1
  template:
    metadata:
      labels:
        app: bytebase
    spec:
      containers:
        - name: bytebase
          {{ if $registryMirrorHost }}
          # If user specifies a registry mirror host, we should use that instead of the default.
          image: {{ trimSuffix "/" $registryMirrorHost }}/bytebase/bytebase:{{ $version }}
          {{ else }}
          image: bytebase/bytebase:{{ $version }}
          {{ end }}
          imagePullPolicy: Always
          env:
          - name: PG_URL
            {{ if $existingPgURLSecret }}
            # If user specifies an existing secret, we should read the external pg connection string in that secret.
            valueFrom:
              secretKeyRef:
                name: {{ $existingPgURLSecret }}
                key: {{ $existingPgURLSecretKey }}
            {{ else }}
            value: {{ $pg }}
            {{ end }}
          args:
            [
              "--data",
              {{ $data | quote }},
              "--port",
              {{ $port | quote }},
              "--external-url",
              # helm parser cannot handle the dash in the value, so we need to quote it, so we use $external_url instead of $external-url.
              {{ $external_url | quote }},
              {{ if $disable_sample }}
              "--disable-sample",
              {{ end }}
            ]
          ports:
            - containerPort: {{ $port }}
              name: web
          livenessProbe:
            httpGet:
              path: /healthz
              port: {{ $port }}
            initialDelaySeconds: 300
            periodSeconds: 300
            timeoutSeconds: 60
          volumeMounts:
            - mountPath: {{ $data }}
              {{ if .Values.bytebase.persistence.existingClaim }}
              # If user specifies an existing PVC, use that instead of "bytebase-volume".
              name: {{ .Values.bytebase.persistence.existingClaim | quote }}
              {{ else }}
              # Either user disable persistence or enable persistence but not specify an existing PVC, use "bytebase-volume" as the volume name. It means
              # that we will request to create a PVC with the specified storage class with name "bytebase-volume".
              name: bytebase-volume
              {{ end }}
      volumes:
        {{ if .Values.bytebase.persistence.enabled }}
        {{ if .Values.bytebase.persistence.existingClaim }}
        # If user specifies an existing PVC, use that instead of "bytebase-volume".
        - name: {{ .Values.bytebase.persistence.existingClaim | quote }}
          persistentVolumeClaim:
            claimName: {{ .Values.bytebase.persistence.existingClaim | quote }}
        {{ else }}
        # If user enable persistence, but not specify an existing PVC, create a PVC with the specified storage class with name "bytebase-volume".
        - name: bytebase-volume
          persistentVolumeClaim:
            claimName: bytebase-volume
        {{ end }}
        {{ else }}
        # If user disable persistence, use an emptyDir volume.
        - name: bytebase-volume
          emptyDir: {}
        {{ end }}

---
{{ if .Values.bytebase.persistence.enabled }}
{{ if not .Values.bytebase.persistence.existingClaim }}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: bytebase-volume
  namespace: {{ template "bytebase.namespace" . }}
  labels:
    {{- include "bytebase.labels" . | nindent 4}}
spec:
  storageClassName: {{ .Values.bytebase.persistence.storageClass | quote }}
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: {{ .Values.bytebase.persistence.storage }}
{{ end }}
{{ end }}

