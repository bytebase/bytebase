// @generated by protoc-gen-es v2.5.2
// @generated from file v1/instance_service.proto (package bytebase.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";
import type { Duration, EmptySchema, FieldMask } from "@bufbuild/protobuf/wkt";
import type { Engine, State } from "./common_pb";
import type { InstanceRole } from "./instance_role_service_pb";

/**
 * Describes the file v1/instance_service.proto.
 */
export declare const file_v1_instance_service: GenFile;

/**
 * @generated from message bytebase.v1.GetInstanceRequest
 */
export declare type GetInstanceRequest = Message<"bytebase.v1.GetInstanceRequest"> & {
  /**
   * The name of the instance to retrieve.
   * Format: instances/{instance}
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message bytebase.v1.GetInstanceRequest.
 * Use `create(GetInstanceRequestSchema)` to create a new message.
 */
export declare const GetInstanceRequestSchema: GenMessage<GetInstanceRequest>;

/**
 * @generated from message bytebase.v1.ListInstancesRequest
 */
export declare type ListInstancesRequest = Message<"bytebase.v1.ListInstancesRequest"> & {
  /**
   * The maximum number of instances to return. The service may return fewer than
   * this value.
   * If unspecified, at most 10 instances will be returned.
   * The maximum value is 1000; values above 1000 will be coerced to 1000.
   *
   * @generated from field: int32 page_size = 1;
   */
  pageSize: number;

  /**
   * A page token, received from a previous `ListInstances` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListInstances` must match
   * the call that provided the page token.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken: string;

  /**
   * Show deleted instances if specified.
   *
   * @generated from field: bool show_deleted = 3;
   */
  showDeleted: boolean;

  /**
   * Filter the instance.
   * The syntax and semantics of CEL are documented at https://github.com/google/cel-spec
   *
   * Supported filters:
   * - name: the instance name, support "==" and ".matches()" operator.
   * - resource_id: the instance id, support "==" and ".matches()" operator.
   * - environment: the environment full name in "environments/{id}" format, support "==" operator.
   * - state: the instance state, check State enum for values, support "==" operator.
   * - engine: the instance engine, check Engine enum for values. Support "==", "in [xx]", "!(in [xx])" operator.
   * - host: the instance host, support "==" and ".matches()" operator.
   * - port: the instance port, support "==" and ".matches()" operator.
   * - project: the project full name in "projects/{id}" format, support "==" operator.
   *
   * For example:
   * name == "sample instance"
   * name.matches("sample")
   * resource_id = "sample-instance"
   * resource_id.matches("sample")
   * state == "DELETED"
   * environment == "environments/test"
   * engine == "MYSQL"
   * engine in ["MYSQL", "POSTGRES"]
   * !(engine in ["MYSQL", "POSTGRES"])
   * host == "127.0.0.1"
   * host.matches("127.0")
   * port == "54321"
   * port.matches("543")
   * project == "projects/sample-project"
   * You can combine filter conditions like:
   * name.matches("sample") && environment == "environments/test"
   * host == "127.0.0.1" && port == "54321"
   *
   * @generated from field: string filter = 4;
   */
  filter: string;
};

/**
 * Describes the message bytebase.v1.ListInstancesRequest.
 * Use `create(ListInstancesRequestSchema)` to create a new message.
 */
export declare const ListInstancesRequestSchema: GenMessage<ListInstancesRequest>;

/**
 * @generated from message bytebase.v1.ListInstancesResponse
 */
export declare type ListInstancesResponse = Message<"bytebase.v1.ListInstancesResponse"> & {
  /**
   * The instances from the specified request.
   *
   * @generated from field: repeated bytebase.v1.Instance instances = 1;
   */
  instances: Instance[];

  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message bytebase.v1.ListInstancesResponse.
 * Use `create(ListInstancesResponseSchema)` to create a new message.
 */
export declare const ListInstancesResponseSchema: GenMessage<ListInstancesResponse>;

/**
 * @generated from message bytebase.v1.CreateInstanceRequest
 */
export declare type CreateInstanceRequest = Message<"bytebase.v1.CreateInstanceRequest"> & {
  /**
   * The instance to create.
   *
   * @generated from field: bytebase.v1.Instance instance = 1;
   */
  instance?: Instance;

  /**
   * The ID to use for the instance, which will become the final component of
   * the instance's resource name.
   *
   * This value should be 4-63 characters, and valid characters
   * are /[a-z][0-9]-/.
   *
   * @generated from field: string instance_id = 2;
   */
  instanceId: string;

  /**
   * Validate only also tests the data source connection.
   *
   * @generated from field: bool validate_only = 3;
   */
  validateOnly: boolean;
};

/**
 * Describes the message bytebase.v1.CreateInstanceRequest.
 * Use `create(CreateInstanceRequestSchema)` to create a new message.
 */
export declare const CreateInstanceRequestSchema: GenMessage<CreateInstanceRequest>;

/**
 * @generated from message bytebase.v1.UpdateInstanceRequest
 */
export declare type UpdateInstanceRequest = Message<"bytebase.v1.UpdateInstanceRequest"> & {
  /**
   * The instance to update.
   *
   * The instance's `name` field is used to identify the instance to update.
   * Format: instances/{instance}
   *
   * @generated from field: bytebase.v1.Instance instance = 1;
   */
  instance?: Instance;

  /**
   * The list of fields to update.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;
};

/**
 * Describes the message bytebase.v1.UpdateInstanceRequest.
 * Use `create(UpdateInstanceRequestSchema)` to create a new message.
 */
export declare const UpdateInstanceRequestSchema: GenMessage<UpdateInstanceRequest>;

/**
 * @generated from message bytebase.v1.DeleteInstanceRequest
 */
export declare type DeleteInstanceRequest = Message<"bytebase.v1.DeleteInstanceRequest"> & {
  /**
   * The name of the instance to delete.
   * Format: instances/{instance}
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * If set to true, any databases and sheets from this project will also be moved to default project, and all open issues will be closed.
   *
   * @generated from field: bool force = 2;
   */
  force: boolean;
};

/**
 * Describes the message bytebase.v1.DeleteInstanceRequest.
 * Use `create(DeleteInstanceRequestSchema)` to create a new message.
 */
export declare const DeleteInstanceRequestSchema: GenMessage<DeleteInstanceRequest>;

/**
 * @generated from message bytebase.v1.UndeleteInstanceRequest
 */
export declare type UndeleteInstanceRequest = Message<"bytebase.v1.UndeleteInstanceRequest"> & {
  /**
   * The name of the deleted instance.
   * Format: instances/{instance}
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message bytebase.v1.UndeleteInstanceRequest.
 * Use `create(UndeleteInstanceRequestSchema)` to create a new message.
 */
export declare const UndeleteInstanceRequestSchema: GenMessage<UndeleteInstanceRequest>;

/**
 * @generated from message bytebase.v1.SyncInstanceRequest
 */
export declare type SyncInstanceRequest = Message<"bytebase.v1.SyncInstanceRequest"> & {
  /**
   * The name of instance.
   * Format: instances/{instance}
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * When full sync is enabled, all databases in the instance will be synchronized. Otherwise, only
   * the instance metadata (such as the database list) and any newly discovered instances will be synced.
   *
   * @generated from field: bool enable_full_sync = 2;
   */
  enableFullSync: boolean;
};

/**
 * Describes the message bytebase.v1.SyncInstanceRequest.
 * Use `create(SyncInstanceRequestSchema)` to create a new message.
 */
export declare const SyncInstanceRequestSchema: GenMessage<SyncInstanceRequest>;

/**
 * @generated from message bytebase.v1.ListInstanceDatabaseRequest
 */
export declare type ListInstanceDatabaseRequest = Message<"bytebase.v1.ListInstanceDatabaseRequest"> & {
  /**
   * The name of the instance.
   * Format: instances/{instance}
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The target instance. We need to set this field if the target instance is not created yet.
   *
   * @generated from field: optional bytebase.v1.Instance instance = 2;
   */
  instance?: Instance;
};

/**
 * Describes the message bytebase.v1.ListInstanceDatabaseRequest.
 * Use `create(ListInstanceDatabaseRequestSchema)` to create a new message.
 */
export declare const ListInstanceDatabaseRequestSchema: GenMessage<ListInstanceDatabaseRequest>;

/**
 * @generated from message bytebase.v1.ListInstanceDatabaseResponse
 */
export declare type ListInstanceDatabaseResponse = Message<"bytebase.v1.ListInstanceDatabaseResponse"> & {
  /**
   * All database name list in the instance.
   *
   * @generated from field: repeated string databases = 1;
   */
  databases: string[];
};

/**
 * Describes the message bytebase.v1.ListInstanceDatabaseResponse.
 * Use `create(ListInstanceDatabaseResponseSchema)` to create a new message.
 */
export declare const ListInstanceDatabaseResponseSchema: GenMessage<ListInstanceDatabaseResponse>;

/**
 * @generated from message bytebase.v1.SyncInstanceResponse
 */
export declare type SyncInstanceResponse = Message<"bytebase.v1.SyncInstanceResponse"> & {
  /**
   * All database name list in the instance.
   *
   * @generated from field: repeated string databases = 1;
   */
  databases: string[];
};

/**
 * Describes the message bytebase.v1.SyncInstanceResponse.
 * Use `create(SyncInstanceResponseSchema)` to create a new message.
 */
export declare const SyncInstanceResponseSchema: GenMessage<SyncInstanceResponse>;

/**
 * @generated from message bytebase.v1.BatchSyncInstancesRequest
 */
export declare type BatchSyncInstancesRequest = Message<"bytebase.v1.BatchSyncInstancesRequest"> & {
  /**
   * The request message specifying the instances to sync.
   * A maximum of 1000 instances can be synced in a batch.
   *
   * @generated from field: repeated bytebase.v1.SyncInstanceRequest requests = 1;
   */
  requests: SyncInstanceRequest[];
};

/**
 * Describes the message bytebase.v1.BatchSyncInstancesRequest.
 * Use `create(BatchSyncInstancesRequestSchema)` to create a new message.
 */
export declare const BatchSyncInstancesRequestSchema: GenMessage<BatchSyncInstancesRequest>;

/**
 * @generated from message bytebase.v1.BatchSyncInstancesResponse
 */
export declare type BatchSyncInstancesResponse = Message<"bytebase.v1.BatchSyncInstancesResponse"> & {
};

/**
 * Describes the message bytebase.v1.BatchSyncInstancesResponse.
 * Use `create(BatchSyncInstancesResponseSchema)` to create a new message.
 */
export declare const BatchSyncInstancesResponseSchema: GenMessage<BatchSyncInstancesResponse>;

/**
 * @generated from message bytebase.v1.BatchUpdateInstancesRequest
 */
export declare type BatchUpdateInstancesRequest = Message<"bytebase.v1.BatchUpdateInstancesRequest"> & {
  /**
   * The request message specifying the resources to update.
   *
   * @generated from field: repeated bytebase.v1.UpdateInstanceRequest requests = 1;
   */
  requests: UpdateInstanceRequest[];
};

/**
 * Describes the message bytebase.v1.BatchUpdateInstancesRequest.
 * Use `create(BatchUpdateInstancesRequestSchema)` to create a new message.
 */
export declare const BatchUpdateInstancesRequestSchema: GenMessage<BatchUpdateInstancesRequest>;

/**
 * @generated from message bytebase.v1.BatchUpdateInstancesResponse
 */
export declare type BatchUpdateInstancesResponse = Message<"bytebase.v1.BatchUpdateInstancesResponse"> & {
  /**
   * @generated from field: repeated bytebase.v1.Instance instances = 1;
   */
  instances: Instance[];
};

/**
 * Describes the message bytebase.v1.BatchUpdateInstancesResponse.
 * Use `create(BatchUpdateInstancesResponseSchema)` to create a new message.
 */
export declare const BatchUpdateInstancesResponseSchema: GenMessage<BatchUpdateInstancesResponse>;

/**
 * @generated from message bytebase.v1.AddDataSourceRequest
 */
export declare type AddDataSourceRequest = Message<"bytebase.v1.AddDataSourceRequest"> & {
  /**
   * The name of the instance to add a data source to.
   * Format: instances/{instance}
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Identified by data source ID.
   * Only READ_ONLY data source can be added.
   *
   * @generated from field: bytebase.v1.DataSource data_source = 2;
   */
  dataSource?: DataSource;

  /**
   * Validate only also tests the data source connection.
   *
   * @generated from field: bool validate_only = 3;
   */
  validateOnly: boolean;
};

/**
 * Describes the message bytebase.v1.AddDataSourceRequest.
 * Use `create(AddDataSourceRequestSchema)` to create a new message.
 */
export declare const AddDataSourceRequestSchema: GenMessage<AddDataSourceRequest>;

/**
 * @generated from message bytebase.v1.RemoveDataSourceRequest
 */
export declare type RemoveDataSourceRequest = Message<"bytebase.v1.RemoveDataSourceRequest"> & {
  /**
   * The name of the instance to remove a data source from.
   * Format: instances/{instance}
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Identified by data source ID.
   * Only READ_ONLY data source can be removed.
   *
   * @generated from field: bytebase.v1.DataSource data_source = 2;
   */
  dataSource?: DataSource;
};

/**
 * Describes the message bytebase.v1.RemoveDataSourceRequest.
 * Use `create(RemoveDataSourceRequestSchema)` to create a new message.
 */
export declare const RemoveDataSourceRequestSchema: GenMessage<RemoveDataSourceRequest>;

/**
 * @generated from message bytebase.v1.UpdateDataSourceRequest
 */
export declare type UpdateDataSourceRequest = Message<"bytebase.v1.UpdateDataSourceRequest"> & {
  /**
   * The name of the instance to update a data source.
   * Format: instances/{instance}
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Identified by data source ID.
   *
   * @generated from field: bytebase.v1.DataSource data_source = 2;
   */
  dataSource?: DataSource;

  /**
   * The list of fields to update.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 3;
   */
  updateMask?: FieldMask;

  /**
   * Validate only also tests the data source connection.
   *
   * @generated from field: bool validate_only = 4;
   */
  validateOnly: boolean;
};

/**
 * Describes the message bytebase.v1.UpdateDataSourceRequest.
 * Use `create(UpdateDataSourceRequestSchema)` to create a new message.
 */
export declare const UpdateDataSourceRequestSchema: GenMessage<UpdateDataSourceRequest>;

/**
 * @generated from message bytebase.v1.Instance
 */
export declare type Instance = Message<"bytebase.v1.Instance"> & {
  /**
   * The name of the instance.
   * Format: instances/{instance}
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: bytebase.v1.State state = 3;
   */
  state: State;

  /**
   * @generated from field: string title = 4;
   */
  title: string;

  /**
   * @generated from field: bytebase.v1.Engine engine = 5;
   */
  engine: Engine;

  /**
   * @generated from field: string engine_version = 6;
   */
  engineVersion: string;

  /**
   * @generated from field: string external_link = 7;
   */
  externalLink: string;

  /**
   * @generated from field: repeated bytebase.v1.DataSource data_sources = 8;
   */
  dataSources: DataSource[];

  /**
   * The environment resource.
   * Format: environments/prod where prod is the environment resource ID.
   *
   * @generated from field: string environment = 9;
   */
  environment: string;

  /**
   * @generated from field: bool activation = 10;
   */
  activation: boolean;

  /**
   * @generated from field: repeated bytebase.v1.InstanceRole roles = 12;
   */
  roles: InstanceRole[];

  /**
   * How often the instance is synced.
   *
   * @generated from field: google.protobuf.Duration sync_interval = 13;
   */
  syncInterval?: Duration;

  /**
   * The maximum number of connections.
   * The default is 10 if the value is unset or zero.
   *
   * @generated from field: int32 maximum_connections = 14;
   */
  maximumConnections: number;

  /**
   * Enable sync for following databases.
   * Default empty, means sync all schemas & databases.
   *
   * @generated from field: repeated string sync_databases = 15;
   */
  syncDatabases: string[];
};

/**
 * Describes the message bytebase.v1.Instance.
 * Use `create(InstanceSchema)` to create a new message.
 */
export declare const InstanceSchema: GenMessage<Instance>;

/**
 * @generated from message bytebase.v1.DataSourceExternalSecret
 */
export declare type DataSourceExternalSecret = Message<"bytebase.v1.DataSourceExternalSecret"> & {
  /**
   * @generated from field: bytebase.v1.DataSourceExternalSecret.SecretType secret_type = 1;
   */
  secretType: DataSourceExternalSecret_SecretType;

  /**
   * @generated from field: string url = 2;
   */
  url: string;

  /**
   * @generated from field: bytebase.v1.DataSourceExternalSecret.AuthType auth_type = 3;
   */
  authType: DataSourceExternalSecret_AuthType;

  /**
   * @generated from oneof bytebase.v1.DataSourceExternalSecret.auth_option
   */
  authOption: {
    /**
     * @generated from field: bytebase.v1.DataSourceExternalSecret.AppRoleAuthOption app_role = 4;
     */
    value: DataSourceExternalSecret_AppRoleAuthOption;
    case: "appRole";
  } | {
    /**
     * @generated from field: string token = 5;
     */
    value: string;
    case: "token";
  } | { case: undefined; value?: undefined };

  /**
   * engine name is the name for secret engine.
   *
   * @generated from field: string engine_name = 6;
   */
  engineName: string;

  /**
   * the secret name in the engine to store the password.
   *
   * @generated from field: string secret_name = 7;
   */
  secretName: string;

  /**
   * the key name for the password.
   *
   * @generated from field: string password_key_name = 8;
   */
  passwordKeyName: string;
};

/**
 * Describes the message bytebase.v1.DataSourceExternalSecret.
 * Use `create(DataSourceExternalSecretSchema)` to create a new message.
 */
export declare const DataSourceExternalSecretSchema: GenMessage<DataSourceExternalSecret>;

/**
 * @generated from message bytebase.v1.DataSourceExternalSecret.AppRoleAuthOption
 */
export declare type DataSourceExternalSecret_AppRoleAuthOption = Message<"bytebase.v1.DataSourceExternalSecret.AppRoleAuthOption"> & {
  /**
   * @generated from field: string role_id = 1;
   */
  roleId: string;

  /**
   * the secret id for the role without ttl.
   *
   * @generated from field: string secret_id = 2;
   */
  secretId: string;

  /**
   * @generated from field: bytebase.v1.DataSourceExternalSecret.AppRoleAuthOption.SecretType type = 3;
   */
  type: DataSourceExternalSecret_AppRoleAuthOption_SecretType;

  /**
   * The path where the approle auth method is mounted.
   *
   * @generated from field: string mount_path = 4;
   */
  mountPath: string;
};

/**
 * Describes the message bytebase.v1.DataSourceExternalSecret.AppRoleAuthOption.
 * Use `create(DataSourceExternalSecret_AppRoleAuthOptionSchema)` to create a new message.
 */
export declare const DataSourceExternalSecret_AppRoleAuthOptionSchema: GenMessage<DataSourceExternalSecret_AppRoleAuthOption>;

/**
 * @generated from enum bytebase.v1.DataSourceExternalSecret.AppRoleAuthOption.SecretType
 */
export enum DataSourceExternalSecret_AppRoleAuthOption_SecretType {
  /**
   * @generated from enum value: SECRET_TYPE_UNSPECIFIED = 0;
   */
  SECRET_TYPE_UNSPECIFIED = 0,

  /**
   * @generated from enum value: PLAIN = 1;
   */
  PLAIN = 1,

  /**
   * @generated from enum value: ENVIRONMENT = 2;
   */
  ENVIRONMENT = 2,
}

/**
 * Describes the enum bytebase.v1.DataSourceExternalSecret.AppRoleAuthOption.SecretType.
 */
export declare const DataSourceExternalSecret_AppRoleAuthOption_SecretTypeSchema: GenEnum<DataSourceExternalSecret_AppRoleAuthOption_SecretType>;

/**
 * @generated from enum bytebase.v1.DataSourceExternalSecret.SecretType
 */
export enum DataSourceExternalSecret_SecretType {
  /**
   * @generated from enum value: SAECRET_TYPE_UNSPECIFIED = 0;
   */
  SAECRET_TYPE_UNSPECIFIED = 0,

  /**
   * ref: https://developer.hashicorp.com/vault/api-docs/secret/kv/kv-v2
   *
   * @generated from enum value: VAULT_KV_V2 = 1;
   */
  VAULT_KV_V2 = 1,

  /**
   * ref: https://docs.aws.amazon.com/secretsmanager/latest/userguide/intro.html
   *
   * @generated from enum value: AWS_SECRETS_MANAGER = 2;
   */
  AWS_SECRETS_MANAGER = 2,

  /**
   * ref: https://cloud.google.com/secret-manager/docs
   *
   * @generated from enum value: GCP_SECRET_MANAGER = 3;
   */
  GCP_SECRET_MANAGER = 3,
}

/**
 * Describes the enum bytebase.v1.DataSourceExternalSecret.SecretType.
 */
export declare const DataSourceExternalSecret_SecretTypeSchema: GenEnum<DataSourceExternalSecret_SecretType>;

/**
 * @generated from enum bytebase.v1.DataSourceExternalSecret.AuthType
 */
export enum DataSourceExternalSecret_AuthType {
  /**
   * @generated from enum value: AUTH_TYPE_UNSPECIFIED = 0;
   */
  AUTH_TYPE_UNSPECIFIED = 0,

  /**
   * ref: https://developer.hashicorp.com/vault/docs/auth/token
   *
   * @generated from enum value: TOKEN = 1;
   */
  TOKEN = 1,

  /**
   * ref: https://developer.hashicorp.com/vault/docs/auth/approle
   *
   * @generated from enum value: VAULT_APP_ROLE = 2;
   */
  VAULT_APP_ROLE = 2,
}

/**
 * Describes the enum bytebase.v1.DataSourceExternalSecret.AuthType.
 */
export declare const DataSourceExternalSecret_AuthTypeSchema: GenEnum<DataSourceExternalSecret_AuthType>;

/**
 * @generated from message bytebase.v1.DataSource
 */
export declare type DataSource = Message<"bytebase.v1.DataSource"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: bytebase.v1.DataSourceType type = 2;
   */
  type: DataSourceType;

  /**
   * @generated from field: string username = 3;
   */
  username: string;

  /**
   * @generated from field: string password = 4;
   */
  password: string;

  /**
   * Use SSL to connect to the data source. By default, we use system default SSL configuration.
   *
   * @generated from field: bool use_ssl = 30;
   */
  useSsl: boolean;

  /**
   * @generated from field: string ssl_ca = 5;
   */
  sslCa: string;

  /**
   * @generated from field: string ssl_cert = 6;
   */
  sslCert: string;

  /**
   * @generated from field: string ssl_key = 7;
   */
  sslKey: string;

  /**
   * @generated from field: string host = 8;
   */
  host: string;

  /**
   * @generated from field: string port = 9;
   */
  port: string;

  /**
   * @generated from field: string database = 10;
   */
  database: string;

  /**
   * srv, authentication_database and replica_set are used for MongoDB.
   * srv is a boolean flag that indicates whether the host is a DNS SRV record.
   *
   * @generated from field: bool srv = 11;
   */
  srv: boolean;

  /**
   * authentication_database is the database name to authenticate against, which stores the user credentials.
   *
   * @generated from field: string authentication_database = 12;
   */
  authenticationDatabase: string;

  /**
   * replica_set is used for MongoDB replica set.
   *
   * @generated from field: string replica_set = 25;
   */
  replicaSet: string;

  /**
   * sid and service_name are used for Oracle.
   *
   * @generated from field: string sid = 13;
   */
  sid: string;

  /**
   * @generated from field: string service_name = 14;
   */
  serviceName: string;

  /**
   * Connection over SSH.
   * The hostname of the SSH server agent.
   * Required.
   *
   * @generated from field: string ssh_host = 15;
   */
  sshHost: string;

  /**
   * The port of the SSH server agent. It's 22 typically.
   * Required.
   *
   * @generated from field: string ssh_port = 16;
   */
  sshPort: string;

  /**
   * The user to login the server.
   * Required.
   *
   * @generated from field: string ssh_user = 17;
   */
  sshUser: string;

  /**
   * The password to login the server. If it's empty string, no password is required.
   *
   * @generated from field: string ssh_password = 18;
   */
  sshPassword: string;

  /**
   * The private key to login the server. If it's empty string, we will use the system default private key from os.Getenv("SSH_AUTH_SOCK").
   *
   * @generated from field: string ssh_private_key = 19;
   */
  sshPrivateKey: string;

  /**
   * PKCS#8 private key in PEM format. If it's empty string, no private key is required.
   * Used for authentication when connecting to the data source.
   *
   * @generated from field: string authentication_private_key = 20;
   */
  authenticationPrivateKey: string;

  /**
   * @generated from field: bytebase.v1.DataSourceExternalSecret external_secret = 21;
   */
  externalSecret?: DataSourceExternalSecret;

  /**
   * @generated from field: bytebase.v1.DataSource.AuthenticationType authentication_type = 22;
   */
  authenticationType: DataSource_AuthenticationType;

  /**
   * @generated from oneof bytebase.v1.DataSource.iam_extension
   */
  iamExtension: {
    /**
     * @generated from field: bytebase.v1.DataSource.ClientSecretCredential client_secret_credential = 23;
     */
    value: DataSource_ClientSecretCredential;
    case: "clientSecretCredential";
  } | { case: undefined; value?: undefined };

  /**
   * @generated from field: bytebase.v1.SASLConfig sasl_config = 24;
   */
  saslConfig?: SASLConfig;

  /**
   * additional_addresses is used for MongoDB replica set.
   *
   * @generated from field: repeated bytebase.v1.DataSource.Address additional_addresses = 26;
   */
  additionalAddresses: DataSource_Address[];

  /**
   * direct_connection is used for MongoDB to dispatch all the operations to the node specified in the connection string.
   *
   * @generated from field: bool direct_connection = 27;
   */
  directConnection: boolean;

  /**
   * region is the location of where the DB is, works for AWS RDS. For example, us-east-1.
   *
   * @generated from field: string region = 28;
   */
  region: string;

  /**
   * warehouse_id is used by Databricks.
   *
   * @generated from field: string warehouse_id = 29;
   */
  warehouseId: string;

  /**
   * master_name is the master name used by connecting redis-master via redis sentinel.
   *
   * @generated from field: string master_name = 31;
   */
  masterName: string;

  /**
   * master_username and master_password are master credentials used by redis sentinel mode.
   *
   * @generated from field: string master_username = 32;
   */
  masterUsername: string;

  /**
   * @generated from field: string master_password = 33;
   */
  masterPassword: string;

  /**
   * @generated from field: bytebase.v1.DataSource.RedisType redis_type = 34;
   */
  redisType: DataSource_RedisType;

  /**
   * Cluster is the cluster name for the data source. Used by CockroachDB.
   *
   * @generated from field: string cluster = 35;
   */
  cluster: string;

  /**
   * Extra connection parameters for the database connection.
   * For PostgreSQL HA, this can be used to set target_session_attrs=read-write
   *
   * @generated from field: map<string, string> extra_connection_parameters = 36;
   */
  extraConnectionParameters: { [key: string]: string };
};

/**
 * Describes the message bytebase.v1.DataSource.
 * Use `create(DataSourceSchema)` to create a new message.
 */
export declare const DataSourceSchema: GenMessage<DataSource>;

/**
 * @generated from message bytebase.v1.DataSource.ClientSecretCredential
 */
export declare type DataSource_ClientSecretCredential = Message<"bytebase.v1.DataSource.ClientSecretCredential"> & {
  /**
   * @generated from field: string tenant_id = 1;
   */
  tenantId: string;

  /**
   * @generated from field: string client_id = 2;
   */
  clientId: string;

  /**
   * @generated from field: string client_secret = 3;
   */
  clientSecret: string;
};

/**
 * Describes the message bytebase.v1.DataSource.ClientSecretCredential.
 * Use `create(DataSource_ClientSecretCredentialSchema)` to create a new message.
 */
export declare const DataSource_ClientSecretCredentialSchema: GenMessage<DataSource_ClientSecretCredential>;

/**
 * @generated from message bytebase.v1.DataSource.Address
 */
export declare type DataSource_Address = Message<"bytebase.v1.DataSource.Address"> & {
  /**
   * @generated from field: string host = 1;
   */
  host: string;

  /**
   * @generated from field: string port = 2;
   */
  port: string;
};

/**
 * Describes the message bytebase.v1.DataSource.Address.
 * Use `create(DataSource_AddressSchema)` to create a new message.
 */
export declare const DataSource_AddressSchema: GenMessage<DataSource_Address>;

/**
 * @generated from enum bytebase.v1.DataSource.AuthenticationType
 */
export enum DataSource_AuthenticationType {
  /**
   * @generated from enum value: AUTHENTICATION_UNSPECIFIED = 0;
   */
  AUTHENTICATION_UNSPECIFIED = 0,

  /**
   * @generated from enum value: PASSWORD = 1;
   */
  PASSWORD = 1,

  /**
   * @generated from enum value: GOOGLE_CLOUD_SQL_IAM = 2;
   */
  GOOGLE_CLOUD_SQL_IAM = 2,

  /**
   * @generated from enum value: AWS_RDS_IAM = 3;
   */
  AWS_RDS_IAM = 3,

  /**
   * @generated from enum value: AZURE_IAM = 4;
   */
  AZURE_IAM = 4,
}

/**
 * Describes the enum bytebase.v1.DataSource.AuthenticationType.
 */
export declare const DataSource_AuthenticationTypeSchema: GenEnum<DataSource_AuthenticationType>;

/**
 * @generated from enum bytebase.v1.DataSource.RedisType
 */
export enum DataSource_RedisType {
  /**
   * @generated from enum value: REDIS_TYPE_UNSPECIFIED = 0;
   */
  REDIS_TYPE_UNSPECIFIED = 0,

  /**
   * @generated from enum value: STANDALONE = 1;
   */
  STANDALONE = 1,

  /**
   * @generated from enum value: SENTINEL = 2;
   */
  SENTINEL = 2,

  /**
   * @generated from enum value: CLUSTER = 3;
   */
  CLUSTER = 3,
}

/**
 * Describes the enum bytebase.v1.DataSource.RedisType.
 */
export declare const DataSource_RedisTypeSchema: GenEnum<DataSource_RedisType>;

/**
 * @generated from message bytebase.v1.InstanceResource
 */
export declare type InstanceResource = Message<"bytebase.v1.InstanceResource"> & {
  /**
   * @generated from field: string title = 1;
   */
  title: string;

  /**
   * @generated from field: bytebase.v1.Engine engine = 2;
   */
  engine: Engine;

  /**
   * @generated from field: string engine_version = 3;
   */
  engineVersion: string;

  /**
   * @generated from field: repeated bytebase.v1.DataSource data_sources = 4;
   */
  dataSources: DataSource[];

  /**
   * @generated from field: bool activation = 5;
   */
  activation: boolean;

  /**
   * The name of the instance.
   * Format: instances/{instance}
   *
   * @generated from field: string name = 6;
   */
  name: string;

  /**
   * The environment resource.
   * Format: environments/prod where prod is the environment resource ID.
   *
   * @generated from field: string environment = 7;
   */
  environment: string;
};

/**
 * Describes the message bytebase.v1.InstanceResource.
 * Use `create(InstanceResourceSchema)` to create a new message.
 */
export declare const InstanceResourceSchema: GenMessage<InstanceResource>;

/**
 * @generated from message bytebase.v1.SASLConfig
 */
export declare type SASLConfig = Message<"bytebase.v1.SASLConfig"> & {
  /**
   * @generated from oneof bytebase.v1.SASLConfig.mechanism
   */
  mechanism: {
    /**
     * @generated from field: bytebase.v1.KerberosConfig krb_config = 1;
     */
    value: KerberosConfig;
    case: "krbConfig";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message bytebase.v1.SASLConfig.
 * Use `create(SASLConfigSchema)` to create a new message.
 */
export declare const SASLConfigSchema: GenMessage<SASLConfig>;

/**
 * @generated from message bytebase.v1.KerberosConfig
 */
export declare type KerberosConfig = Message<"bytebase.v1.KerberosConfig"> & {
  /**
   * @generated from field: string primary = 1;
   */
  primary: string;

  /**
   * @generated from field: string instance = 2;
   */
  instance: string;

  /**
   * @generated from field: string realm = 3;
   */
  realm: string;

  /**
   * @generated from field: bytes keytab = 4;
   */
  keytab: Uint8Array;

  /**
   * @generated from field: string kdc_host = 5;
   */
  kdcHost: string;

  /**
   * @generated from field: string kdc_port = 6;
   */
  kdcPort: string;

  /**
   * @generated from field: string kdc_transport_protocol = 7;
   */
  kdcTransportProtocol: string;
};

/**
 * Describes the message bytebase.v1.KerberosConfig.
 * Use `create(KerberosConfigSchema)` to create a new message.
 */
export declare const KerberosConfigSchema: GenMessage<KerberosConfig>;

/**
 * @generated from enum bytebase.v1.DataSourceType
 */
export enum DataSourceType {
  /**
   * @generated from enum value: DATA_SOURCE_UNSPECIFIED = 0;
   */
  DATA_SOURCE_UNSPECIFIED = 0,

  /**
   * @generated from enum value: ADMIN = 1;
   */
  ADMIN = 1,

  /**
   * @generated from enum value: READ_ONLY = 2;
   */
  READ_ONLY = 2,
}

/**
 * Describes the enum bytebase.v1.DataSourceType.
 */
export declare const DataSourceTypeSchema: GenEnum<DataSourceType>;

/**
 * @generated from service bytebase.v1.InstanceService
 */
export declare const InstanceService: GenService<{
  /**
   * @generated from rpc bytebase.v1.InstanceService.GetInstance
   */
  getInstance: {
    methodKind: "unary";
    input: typeof GetInstanceRequestSchema;
    output: typeof InstanceSchema;
  },
  /**
   * @generated from rpc bytebase.v1.InstanceService.ListInstances
   */
  listInstances: {
    methodKind: "unary";
    input: typeof ListInstancesRequestSchema;
    output: typeof ListInstancesResponseSchema;
  },
  /**
   * @generated from rpc bytebase.v1.InstanceService.CreateInstance
   */
  createInstance: {
    methodKind: "unary";
    input: typeof CreateInstanceRequestSchema;
    output: typeof InstanceSchema;
  },
  /**
   * @generated from rpc bytebase.v1.InstanceService.UpdateInstance
   */
  updateInstance: {
    methodKind: "unary";
    input: typeof UpdateInstanceRequestSchema;
    output: typeof InstanceSchema;
  },
  /**
   * @generated from rpc bytebase.v1.InstanceService.DeleteInstance
   */
  deleteInstance: {
    methodKind: "unary";
    input: typeof DeleteInstanceRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * @generated from rpc bytebase.v1.InstanceService.UndeleteInstance
   */
  undeleteInstance: {
    methodKind: "unary";
    input: typeof UndeleteInstanceRequestSchema;
    output: typeof InstanceSchema;
  },
  /**
   * @generated from rpc bytebase.v1.InstanceService.SyncInstance
   */
  syncInstance: {
    methodKind: "unary";
    input: typeof SyncInstanceRequestSchema;
    output: typeof SyncInstanceResponseSchema;
  },
  /**
   * @generated from rpc bytebase.v1.InstanceService.ListInstanceDatabase
   */
  listInstanceDatabase: {
    methodKind: "unary";
    input: typeof ListInstanceDatabaseRequestSchema;
    output: typeof ListInstanceDatabaseResponseSchema;
  },
  /**
   * @generated from rpc bytebase.v1.InstanceService.BatchSyncInstances
   */
  batchSyncInstances: {
    methodKind: "unary";
    input: typeof BatchSyncInstancesRequestSchema;
    output: typeof BatchSyncInstancesResponseSchema;
  },
  /**
   * @generated from rpc bytebase.v1.InstanceService.BatchUpdateInstances
   */
  batchUpdateInstances: {
    methodKind: "unary";
    input: typeof BatchUpdateInstancesRequestSchema;
    output: typeof BatchUpdateInstancesResponseSchema;
  },
  /**
   * @generated from rpc bytebase.v1.InstanceService.AddDataSource
   */
  addDataSource: {
    methodKind: "unary";
    input: typeof AddDataSourceRequestSchema;
    output: typeof InstanceSchema;
  },
  /**
   * @generated from rpc bytebase.v1.InstanceService.RemoveDataSource
   */
  removeDataSource: {
    methodKind: "unary";
    input: typeof RemoveDataSourceRequestSchema;
    output: typeof InstanceSchema;
  },
  /**
   * @generated from rpc bytebase.v1.InstanceService.UpdateDataSource
   */
  updateDataSource: {
    methodKind: "unary";
    input: typeof UpdateDataSourceRequestSchema;
    output: typeof InstanceSchema;
  },
}>;

