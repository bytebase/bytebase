// @generated by protoc-gen-es v2.5.2
// @generated from file v1/actuator_service.proto (package bytebase.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";
import type { EmptySchema, FieldMask, Timestamp } from "@bufbuild/protobuf/wkt";
import type { PasswordRestrictionSetting } from "./setting_service_pb";
import type { UserType } from "./user_service_pb";
import type { State } from "./common_pb";

/**
 * Describes the file v1/actuator_service.proto.
 */
export declare const file_v1_actuator_service: GenFile;

/**
 * Request message for getting branding resources.
 *
 * @generated from message bytebase.v1.GetResourcePackageRequest
 */
export declare type GetResourcePackageRequest = Message<"bytebase.v1.GetResourcePackageRequest"> & {
};

/**
 * Describes the message bytebase.v1.GetResourcePackageRequest.
 * Use `create(GetResourcePackageRequestSchema)` to create a new message.
 */
export declare const GetResourcePackageRequestSchema: GenMessage<GetResourcePackageRequest>;

/**
 * Custom branding resources for the Bytebase instance.
 *
 * @generated from message bytebase.v1.ResourcePackage
 */
export declare type ResourcePackage = Message<"bytebase.v1.ResourcePackage"> & {
  /**
   * The branding logo.
   *
   * @generated from field: bytes logo = 1;
   */
  logo: Uint8Array;
};

/**
 * Describes the message bytebase.v1.ResourcePackage.
 * Use `create(ResourcePackageSchema)` to create a new message.
 */
export declare const ResourcePackageSchema: GenMessage<ResourcePackage>;

/**
 * Request message for setting up sample data.
 *
 * @generated from message bytebase.v1.SetupSampleRequest
 */
export declare type SetupSampleRequest = Message<"bytebase.v1.SetupSampleRequest"> & {
};

/**
 * Describes the message bytebase.v1.SetupSampleRequest.
 * Use `create(SetupSampleRequestSchema)` to create a new message.
 */
export declare const SetupSampleRequestSchema: GenMessage<SetupSampleRequest>;

/**
 * Request message for getting actuator information.
 *
 * @generated from message bytebase.v1.GetActuatorInfoRequest
 */
export declare type GetActuatorInfoRequest = Message<"bytebase.v1.GetActuatorInfoRequest"> & {
};

/**
 * Describes the message bytebase.v1.GetActuatorInfoRequest.
 * Use `create(GetActuatorInfoRequestSchema)` to create a new message.
 */
export declare const GetActuatorInfoRequestSchema: GenMessage<GetActuatorInfoRequest>;

/**
 * Request message for updating actuator information.
 *
 * @generated from message bytebase.v1.UpdateActuatorInfoRequest
 */
export declare type UpdateActuatorInfoRequest = Message<"bytebase.v1.UpdateActuatorInfoRequest"> & {
  /**
   * The actuator to update.
   *
   * @generated from field: bytebase.v1.ActuatorInfo actuator = 1;
   */
  actuator?: ActuatorInfo;

  /**
   * The list of fields to update.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;

  /**
   * If set to true, and the actuator is not found, a new actuator will be created.
   * In this situation, `update_mask` is ignored.
   *
   * @generated from field: bool allow_missing = 3;
   */
  allowMissing: boolean;
};

/**
 * Describes the message bytebase.v1.UpdateActuatorInfoRequest.
 * Use `create(UpdateActuatorInfoRequestSchema)` to create a new message.
 */
export declare const UpdateActuatorInfoRequestSchema: GenMessage<UpdateActuatorInfoRequest>;

/**
 * Request message for deleting cache.
 *
 * @generated from message bytebase.v1.DeleteCacheRequest
 */
export declare type DeleteCacheRequest = Message<"bytebase.v1.DeleteCacheRequest"> & {
};

/**
 * Describes the message bytebase.v1.DeleteCacheRequest.
 * Use `create(DeleteCacheRequestSchema)` to create a new message.
 */
export declare const DeleteCacheRequestSchema: GenMessage<DeleteCacheRequest>;

/**
 * System information and configuration for the Bytebase instance.
 * Actuator concept is similar to the Spring Boot Actuator.
 *
 * @generated from message bytebase.v1.ActuatorInfo
 */
export declare type ActuatorInfo = Message<"bytebase.v1.ActuatorInfo"> & {
  /**
   * The Bytebase server version.
   *
   * @generated from field: string version = 1;
   */
  version: string;

  /**
   * The git commit hash of the build.
   *
   * @generated from field: string git_commit = 2;
   */
  gitCommit: string;

  /**
   * Whether the Bytebase instance is running in read-only mode.
   *
   * @generated from field: bool readonly = 3;
   */
  readonly: boolean;

  /**
   * Whether the Bytebase instance is running in SaaS mode where some features cannot be edited by users.
   *
   * @generated from field: bool saas = 4;
   */
  saas: boolean;

  /**
   * Whether the Bytebase instance is running in demo mode.
   *
   * @generated from field: bool demo = 5;
   */
  demo: boolean;

  /**
   * The host address of the Bytebase instance.
   *
   * @generated from field: string host = 6;
   */
  host: string;

  /**
   * The port number of the Bytebase instance.
   *
   * @generated from field: string port = 7;
   */
  port: string;

  /**
   * The external URL where users or webhook callbacks access Bytebase.
   *
   * @generated from field: string external_url = 8;
   */
  externalUrl: string;

  /**
   * Whether the Bytebase instance requires initial admin setup.
   *
   * @generated from field: bool need_admin_setup = 9;
   */
  needAdminSetup: boolean;

  /**
   * Whether self-service user signup is disabled.
   *
   * @generated from field: bool disallow_signup = 10;
   */
  disallowSignup: boolean;

  /**
   * The last time any API call was made, refreshed on each request.
   *
   * @generated from field: google.protobuf.Timestamp last_active_time = 11;
   */
  lastActiveTime?: Timestamp;

  /**
   * Whether two-factor authentication is required for all users.
   *
   * @generated from field: bool require_2fa = 12;
   */
  require2fa: boolean;

  /**
   * The unique identifier for the workspace.
   *
   * @generated from field: string workspace_id = 13;
   */
  workspaceId: string;

  /**
   * Whether debug mode is enabled.
   *
   * @generated from field: bool debug = 15;
   */
  debug: boolean;

  /**
   * List of features that are not licensed.
   *
   * @generated from field: repeated string unlicensed_features = 19;
   */
  unlicensedFeatures: string[];

  /**
   * Whether password-based signin is disabled (except for workspace admins).
   *
   * @generated from field: bool disallow_password_signin = 20;
   */
  disallowPasswordSignin: boolean;

  /**
   * Password complexity and restriction requirements.
   *
   * @generated from field: bytebase.v1.PasswordRestrictionSetting password_restriction = 21;
   */
  passwordRestriction?: PasswordRestrictionSetting;

  /**
   * Whether the Bytebase instance is running in Docker.
   *
   * @generated from field: bool docker = 22;
   */
  docker: boolean;

  /**
   * Statistics about users in the system.
   *
   * @generated from field: repeated bytebase.v1.ActuatorInfo.StatUser user_stats = 23;
   */
  userStats: ActuatorInfo_StatUser[];

  /**
   * The number of activated database instances.
   *
   * @generated from field: int32 activated_instance_count = 24;
   */
  activatedInstanceCount: number;

  /**
   * The total number of database instances.
   *
   * @generated from field: int32 total_instance_count = 25;
   */
  totalInstanceCount: number;

  /**
   * Whether sample data setup is enabled.
   *
   * @generated from field: bool enable_sample = 26;
   */
  enableSample: boolean;
};

/**
 * Describes the message bytebase.v1.ActuatorInfo.
 * Use `create(ActuatorInfoSchema)` to create a new message.
 */
export declare const ActuatorInfoSchema: GenMessage<ActuatorInfo>;

/**
 * User statistics by type and state.
 *
 * @generated from message bytebase.v1.ActuatorInfo.StatUser
 */
export declare type ActuatorInfo_StatUser = Message<"bytebase.v1.ActuatorInfo.StatUser"> & {
  /**
   * The type of user.
   *
   * @generated from field: bytebase.v1.UserType user_type = 1;
   */
  userType: UserType;

  /**
   * The state of the user.
   *
   * @generated from field: bytebase.v1.State state = 2;
   */
  state: State;

  /**
   * The count of users matching this type and state.
   *
   * @generated from field: int32 count = 3;
   */
  count: number;
};

/**
 * Describes the message bytebase.v1.ActuatorInfo.StatUser.
 * Use `create(ActuatorInfo_StatUserSchema)` to create a new message.
 */
export declare const ActuatorInfo_StatUserSchema: GenMessage<ActuatorInfo_StatUser>;

/**
 * ActuatorService manages system health and operational information.
 *
 * @generated from service bytebase.v1.ActuatorService
 */
export declare const ActuatorService: GenService<{
  /**
   * Gets system information and health status of the Bytebase instance.
   * Permissions required: None
   *
   * @generated from rpc bytebase.v1.ActuatorService.GetActuatorInfo
   */
  getActuatorInfo: {
    methodKind: "unary";
    input: typeof GetActuatorInfoRequestSchema;
    output: typeof ActuatorInfoSchema;
  },
  /**
   * Updates system configuration settings for the Bytebase instance.
   * Permissions required: bb.settings.set
   *
   * @generated from rpc bytebase.v1.ActuatorService.UpdateActuatorInfo
   */
  updateActuatorInfo: {
    methodKind: "unary";
    input: typeof UpdateActuatorInfoRequestSchema;
    output: typeof ActuatorInfoSchema;
  },
  /**
   * Sets up sample data for demonstration and testing purposes.
   * Permissions required: bb.projects.create
   *
   * @generated from rpc bytebase.v1.ActuatorService.SetupSample
   */
  setupSample: {
    methodKind: "unary";
    input: typeof SetupSampleRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * Clears the system cache to force data refresh.
   * Permissions required: None
   *
   * @generated from rpc bytebase.v1.ActuatorService.DeleteCache
   */
  deleteCache: {
    methodKind: "unary";
    input: typeof DeleteCacheRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * Gets custom branding resources such as logos.
   * Permissions required: None
   *
   * @generated from rpc bytebase.v1.ActuatorService.GetResourcePackage
   */
  getResourcePackage: {
    methodKind: "unary";
    input: typeof GetResourcePackageRequestSchema;
    output: typeof ResourcePackageSchema;
  },
}>;

