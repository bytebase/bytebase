// @generated by protoc-gen-es v2.5.2
// @generated from file v1/actuator_service.proto (package bytebase.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";
import type { EmptySchema, FieldMask, Timestamp } from "@bufbuild/protobuf/wkt";
import type { PasswordRestrictionSetting } from "./setting_service_pb";
import type { UserType } from "./user_service_pb";
import type { State } from "./common_pb";

/**
 * Describes the file v1/actuator_service.proto.
 */
export declare const file_v1_actuator_service: GenFile;

/**
 * The request message for getting the theme resource.
 *
 * @generated from message bytebase.v1.GetResourcePackageRequest
 */
export declare type GetResourcePackageRequest = Message<"bytebase.v1.GetResourcePackageRequest"> & {
};

/**
 * Describes the message bytebase.v1.GetResourcePackageRequest.
 * Use `create(GetResourcePackageRequestSchema)` to create a new message.
 */
export declare const GetResourcePackageRequestSchema: GenMessage<GetResourcePackageRequest>;

/**
 * The theme resources.
 *
 * @generated from message bytebase.v1.ResourcePackage
 */
export declare type ResourcePackage = Message<"bytebase.v1.ResourcePackage"> & {
  /**
   * The branding logo.
   *
   * @generated from field: bytes logo = 1;
   */
  logo: Uint8Array;
};

/**
 * Describes the message bytebase.v1.ResourcePackage.
 * Use `create(ResourcePackageSchema)` to create a new message.
 */
export declare const ResourcePackageSchema: GenMessage<ResourcePackage>;

/**
 * @generated from message bytebase.v1.SetupSampleRequest
 */
export declare type SetupSampleRequest = Message<"bytebase.v1.SetupSampleRequest"> & {
};

/**
 * Describes the message bytebase.v1.SetupSampleRequest.
 * Use `create(SetupSampleRequestSchema)` to create a new message.
 */
export declare const SetupSampleRequestSchema: GenMessage<SetupSampleRequest>;

/**
 * @generated from message bytebase.v1.GetActuatorInfoRequest
 */
export declare type GetActuatorInfoRequest = Message<"bytebase.v1.GetActuatorInfoRequest"> & {
};

/**
 * Describes the message bytebase.v1.GetActuatorInfoRequest.
 * Use `create(GetActuatorInfoRequestSchema)` to create a new message.
 */
export declare const GetActuatorInfoRequestSchema: GenMessage<GetActuatorInfoRequest>;

/**
 * @generated from message bytebase.v1.UpdateActuatorInfoRequest
 */
export declare type UpdateActuatorInfoRequest = Message<"bytebase.v1.UpdateActuatorInfoRequest"> & {
  /**
   * The actuator to update.
   *
   * @generated from field: bytebase.v1.ActuatorInfo actuator = 1;
   */
  actuator?: ActuatorInfo;

  /**
   * The list of fields to update.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;
};

/**
 * Describes the message bytebase.v1.UpdateActuatorInfoRequest.
 * Use `create(UpdateActuatorInfoRequestSchema)` to create a new message.
 */
export declare const UpdateActuatorInfoRequestSchema: GenMessage<UpdateActuatorInfoRequest>;

/**
 * @generated from message bytebase.v1.DeleteCacheRequest
 */
export declare type DeleteCacheRequest = Message<"bytebase.v1.DeleteCacheRequest"> & {
};

/**
 * Describes the message bytebase.v1.DeleteCacheRequest.
 * Use `create(DeleteCacheRequestSchema)` to create a new message.
 */
export declare const DeleteCacheRequestSchema: GenMessage<DeleteCacheRequest>;

/**
 * ServerInfo is the API message for server info.
 * Actuator concept is similar to the Spring Boot Actuator.
 *
 * @generated from message bytebase.v1.ActuatorInfo
 */
export declare type ActuatorInfo = Message<"bytebase.v1.ActuatorInfo"> & {
  /**
   * version is the bytebase's server version
   *
   * @generated from field: string version = 1;
   */
  version: string;

  /**
   * git_commit is the git commit hash of the build
   *
   * @generated from field: string git_commit = 2;
   */
  gitCommit: string;

  /**
   * readonly flag means if the Bytebase is running in readonly mode.
   *
   * @generated from field: bool readonly = 3;
   */
  readonly: boolean;

  /**
   * saas flag means if the Bytebase is running in SaaS mode, some features are not allowed to edit by users.
   *
   * @generated from field: bool saas = 4;
   */
  saas: boolean;

  /**
   * demo flag means if the Bytebase is running in demo mode.
   *
   * @generated from field: bool demo = 5;
   */
  demo: boolean;

  /**
   * host is the Bytebase instance host.
   *
   * @generated from field: string host = 6;
   */
  host: string;

  /**
   * port is the Bytebase instance port.
   *
   * @generated from field: string port = 7;
   */
  port: string;

  /**
   * external_url is the URL where user or webhook callback visits Bytebase.
   *
   * @generated from field: string external_url = 8;
   */
  externalUrl: string;

  /**
   * need_admin_setup flag means the Bytebase instance doesn't have any end users.
   *
   * @generated from field: bool need_admin_setup = 9;
   */
  needAdminSetup: boolean;

  /**
   * disallow_signup is the flag to disable self-service signup.
   *
   * @generated from field: bool disallow_signup = 10;
   */
  disallowSignup: boolean;

  /**
   * last_active_time is the service last active time in UTC Time Format, any API calls will refresh this value.
   *
   * @generated from field: google.protobuf.Timestamp last_active_time = 11;
   */
  lastActiveTime?: Timestamp;

  /**
   * require_2fa is the flag to require 2FA for all users.
   *
   * @generated from field: bool require_2fa = 12;
   */
  require2fa: boolean;

  /**
   * workspace_id is the identifier for the workspace.
   *
   * @generated from field: string workspace_id = 13;
   */
  workspaceId: string;

  /**
   * debug flag means if the debug mode is enabled.
   *
   * @generated from field: bool debug = 15;
   */
  debug: boolean;

  /**
   * @generated from field: repeated string unlicensed_features = 19;
   */
  unlicensedFeatures: string[];

  /**
   * disallow_password_signin is the flag to disallow user signin with email&password. (except workspace admins)
   *
   * @generated from field: bool disallow_password_signin = 20;
   */
  disallowPasswordSignin: boolean;

  /**
   * @generated from field: bytebase.v1.PasswordRestrictionSetting password_restriction = 21;
   */
  passwordRestriction?: PasswordRestrictionSetting;

  /**
   * docker flag means if the Bytebase instance is running in docker.
   *
   * @generated from field: bool docker = 22;
   */
  docker: boolean;

  /**
   * @generated from field: repeated bytebase.v1.ActuatorInfo.StatUser user_stats = 23;
   */
  userStats: ActuatorInfo_StatUser[];

  /**
   * @generated from field: int32 activated_instance_count = 24;
   */
  activatedInstanceCount: number;

  /**
   * @generated from field: int32 total_instance_count = 25;
   */
  totalInstanceCount: number;

  /**
   * @generated from field: bool enable_sample = 26;
   */
  enableSample: boolean;
};

/**
 * Describes the message bytebase.v1.ActuatorInfo.
 * Use `create(ActuatorInfoSchema)` to create a new message.
 */
export declare const ActuatorInfoSchema: GenMessage<ActuatorInfo>;

/**
 * @generated from message bytebase.v1.ActuatorInfo.StatUser
 */
export declare type ActuatorInfo_StatUser = Message<"bytebase.v1.ActuatorInfo.StatUser"> & {
  /**
   * @generated from field: bytebase.v1.UserType user_type = 1;
   */
  userType: UserType;

  /**
   * @generated from field: bytebase.v1.State state = 2;
   */
  state: State;

  /**
   * @generated from field: int32 count = 3;
   */
  count: number;
};

/**
 * Describes the message bytebase.v1.ActuatorInfo.StatUser.
 * Use `create(ActuatorInfo_StatUserSchema)` to create a new message.
 */
export declare const ActuatorInfo_StatUserSchema: GenMessage<ActuatorInfo_StatUser>;

/**
 * @generated from service bytebase.v1.ActuatorService
 */
export declare const ActuatorService: GenService<{
  /**
   * @generated from rpc bytebase.v1.ActuatorService.GetActuatorInfo
   */
  getActuatorInfo: {
    methodKind: "unary";
    input: typeof GetActuatorInfoRequestSchema;
    output: typeof ActuatorInfoSchema;
  },
  /**
   * @generated from rpc bytebase.v1.ActuatorService.UpdateActuatorInfo
   */
  updateActuatorInfo: {
    methodKind: "unary";
    input: typeof UpdateActuatorInfoRequestSchema;
    output: typeof ActuatorInfoSchema;
  },
  /**
   * @generated from rpc bytebase.v1.ActuatorService.SetupSample
   */
  setupSample: {
    methodKind: "unary";
    input: typeof SetupSampleRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * @generated from rpc bytebase.v1.ActuatorService.DeleteCache
   */
  deleteCache: {
    methodKind: "unary";
    input: typeof DeleteCacheRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * @generated from rpc bytebase.v1.ActuatorService.GetResourcePackage
   */
  getResourcePackage: {
    methodKind: "unary";
    input: typeof GetResourcePackageRequestSchema;
    output: typeof ResourcePackageSchema;
  },
}>;

