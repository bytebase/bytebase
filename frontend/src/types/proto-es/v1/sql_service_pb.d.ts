// @generated by protoc-gen-es v2.5.2
// @generated from file v1/sql_service.proto (package bytebase.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";
import type { Duration, NullValue, Timestamp, Value } from "@bufbuild/protobuf/wkt";
import type { Engine, ExportFormat, Position } from "./common_pb";
import type { DatabaseMetadata } from "./database_service_pb";
import type { DatabaseCatalog } from "./database_catalog_service_pb";

/**
 * Describes the file v1/sql_service.proto.
 */
export declare const file_v1_sql_service: GenFile;

/**
 * @generated from message bytebase.v1.AdminExecuteRequest
 */
export declare type AdminExecuteRequest = Message<"bytebase.v1.AdminExecuteRequest"> & {
  /**
   * The name is the instance name to execute the query against.
   * Format: instances/{instance}/databases/{databaseName}
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The SQL statement to execute.
   *
   * @generated from field: string statement = 3;
   */
  statement: string;

  /**
   * The maximum number of rows to return.
   *
   * @generated from field: int32 limit = 4;
   */
  limit: number;

  /**
   * The default schema to execute the statement. Equals to the current schema
   * in Oracle and search path in Postgres.
   *
   * @generated from field: optional string schema = 6;
   */
  schema?: string;

  /**
   * Container is the container name to execute the query against, used for
   * CosmosDB only.
   *
   * @generated from field: optional string container = 7;
   */
  container?: string;
};

/**
 * Describes the message bytebase.v1.AdminExecuteRequest.
 * Use `create(AdminExecuteRequestSchema)` to create a new message.
 */
export declare const AdminExecuteRequestSchema: GenMessage<AdminExecuteRequest>;

/**
 * @generated from message bytebase.v1.AdminExecuteResponse
 */
export declare type AdminExecuteResponse = Message<"bytebase.v1.AdminExecuteResponse"> & {
  /**
   * The query results.
   *
   * @generated from field: repeated bytebase.v1.QueryResult results = 1;
   */
  results: QueryResult[];
};

/**
 * Describes the message bytebase.v1.AdminExecuteResponse.
 * Use `create(AdminExecuteResponseSchema)` to create a new message.
 */
export declare const AdminExecuteResponseSchema: GenMessage<AdminExecuteResponse>;

/**
 * @generated from message bytebase.v1.QueryRequest
 */
export declare type QueryRequest = Message<"bytebase.v1.QueryRequest"> & {
  /**
   * The name is the instance name to execute the query against.
   * Format: instances/{instance}/databases/{databaseName}
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The SQL statement to execute.
   *
   * @generated from field: string statement = 3;
   */
  statement: string;

  /**
   * The maximum number of rows to return.
   *
   * @generated from field: int32 limit = 4;
   */
  limit: number;

  /**
   * The id of data source.
   * It is used for querying admin data source even if the instance has
   * read-only data sources. Or it can be used to query a specific read-only
   * data source.
   *
   * @generated from field: string data_source_id = 6;
   */
  dataSourceId: string;

  /**
   * Explain the statement.
   *
   * @generated from field: bool explain = 7;
   */
  explain: boolean;

  /**
   * The default schema to search objects. Equals to the current schema in
   * Oracle and search path in Postgres.
   *
   * @generated from field: optional string schema = 8;
   */
  schema?: string;

  /**
   * @generated from field: bytebase.v1.QueryOption query_option = 9;
   */
  queryOption?: QueryOption;

  /**
   * Container is the container name to execute the query against, used for
   * CosmosDB only.
   *
   * @generated from field: optional string container = 10;
   */
  container?: string;
};

/**
 * Describes the message bytebase.v1.QueryRequest.
 * Use `create(QueryRequestSchema)` to create a new message.
 */
export declare const QueryRequestSchema: GenMessage<QueryRequest>;

/**
 * @generated from message bytebase.v1.QueryResponse
 */
export declare type QueryResponse = Message<"bytebase.v1.QueryResponse"> & {
  /**
   * The query results.
   *
   * @generated from field: repeated bytebase.v1.QueryResult results = 1;
   */
  results: QueryResult[];
};

/**
 * Describes the message bytebase.v1.QueryResponse.
 * Use `create(QueryResponseSchema)` to create a new message.
 */
export declare const QueryResponseSchema: GenMessage<QueryResponse>;

/**
 * @generated from message bytebase.v1.QueryOption
 */
export declare type QueryOption = Message<"bytebase.v1.QueryOption"> & {
  /**
   * @generated from field: bytebase.v1.QueryOption.RedisRunCommandsOn redis_run_commands_on = 1;
   */
  redisRunCommandsOn: QueryOption_RedisRunCommandsOn;
};

/**
 * Describes the message bytebase.v1.QueryOption.
 * Use `create(QueryOptionSchema)` to create a new message.
 */
export declare const QueryOptionSchema: GenMessage<QueryOption>;

/**
 * @generated from enum bytebase.v1.QueryOption.RedisRunCommandsOn
 */
export enum QueryOption_RedisRunCommandsOn {
  /**
   * UNSPECIFIED defaults to SINGLE_NODE.
   *
   * @generated from enum value: REDIS_RUN_COMMANDS_ON_UNSPECIFIED = 0;
   */
  REDIS_RUN_COMMANDS_ON_UNSPECIFIED = 0,

  /**
   * @generated from enum value: SINGLE_NODE = 1;
   */
  SINGLE_NODE = 1,

  /**
   * @generated from enum value: ALL_NODES = 2;
   */
  ALL_NODES = 2,
}

/**
 * Describes the enum bytebase.v1.QueryOption.RedisRunCommandsOn.
 */
export declare const QueryOption_RedisRunCommandsOnSchema: GenEnum<QueryOption_RedisRunCommandsOn>;

/**
 * @generated from message bytebase.v1.QueryResult
 */
export declare type QueryResult = Message<"bytebase.v1.QueryResult"> & {
  /**
   * Column names of the query result.
   *
   * @generated from field: repeated string column_names = 1;
   */
  columnNames: string[];

  /**
   * Column types of the query result.
   * The types come from the Golang SQL driver.
   *
   * @generated from field: repeated string column_type_names = 2;
   */
  columnTypeNames: string[];

  /**
   * Rows of the query result.
   *
   * @generated from field: repeated bytebase.v1.QueryRow rows = 3;
   */
  rows: QueryRow[];

  /**
   * @generated from field: int64 rows_count = 10;
   */
  rowsCount: bigint;

  /**
   * Columns are masked or not.
   *
   * @generated from field: repeated bool masked = 4;
   */
  masked: boolean[];

  /**
   * Columns are sensitive or not.
   *
   * @generated from field: repeated bool sensitive = 5;
   */
  sensitive: boolean[];

  /**
   * The error message if the query failed.
   *
   * @generated from field: string error = 6;
   */
  error: string;

  /**
   * The time it takes to execute the query.
   *
   * @generated from field: google.protobuf.Duration latency = 7;
   */
  latency?: Duration;

  /**
   * The query statement for the result.
   *
   * @generated from field: string statement = 8;
   */
  statement: string;

  /**
   * @generated from oneof bytebase.v1.QueryResult.detailed_error
   */
  detailedError: {
    /**
     * @generated from field: bytebase.v1.QueryResult.PostgresError postgres_error = 9;
     */
    value: QueryResult_PostgresError;
    case: "postgresError";
  } | { case: undefined; value?: undefined };

  /**
   * The query result is allowed to be exported or not.
   *
   * @generated from field: bool allow_export = 11;
   */
  allowExport: boolean;

  /**
   * Informational or debug messages returned by the database engine during query execution.
   * Examples include PostgreSQL's RAISE NOTICE, MSSQL's PRINT, or Oracle's DBMS_OUTPUT.PUT_LINE.
   *
   * @generated from field: repeated bytebase.v1.QueryResult.Message messages = 12;
   */
  messages: QueryResult_Message[];
};

/**
 * Describes the message bytebase.v1.QueryResult.
 * Use `create(QueryResultSchema)` to create a new message.
 */
export declare const QueryResultSchema: GenMessage<QueryResult>;

/**
 * refer https://www.postgresql.org/docs/11/protocol-error-fields.html
 * for field description.
 *
 * @generated from message bytebase.v1.QueryResult.PostgresError
 */
export declare type QueryResult_PostgresError = Message<"bytebase.v1.QueryResult.PostgresError"> & {
  /**
   * @generated from field: string severity = 1;
   */
  severity: string;

  /**
   * @generated from field: string code = 2;
   */
  code: string;

  /**
   * @generated from field: string message = 3;
   */
  message: string;

  /**
   * @generated from field: string detail = 4;
   */
  detail: string;

  /**
   * @generated from field: string hint = 5;
   */
  hint: string;

  /**
   * @generated from field: int32 position = 6;
   */
  position: number;

  /**
   * @generated from field: int32 internal_position = 7;
   */
  internalPosition: number;

  /**
   * @generated from field: string internal_query = 8;
   */
  internalQuery: string;

  /**
   * @generated from field: string where = 9;
   */
  where: string;

  /**
   * @generated from field: string schema_name = 10;
   */
  schemaName: string;

  /**
   * @generated from field: string table_name = 11;
   */
  tableName: string;

  /**
   * @generated from field: string column_name = 12;
   */
  columnName: string;

  /**
   * @generated from field: string data_type_name = 13;
   */
  dataTypeName: string;

  /**
   * @generated from field: string constraint_name = 14;
   */
  constraintName: string;

  /**
   * @generated from field: string file = 15;
   */
  file: string;

  /**
   * @generated from field: int32 line = 16;
   */
  line: number;

  /**
   * @generated from field: string routine = 17;
   */
  routine: string;
};

/**
 * Describes the message bytebase.v1.QueryResult.PostgresError.
 * Use `create(QueryResult_PostgresErrorSchema)` to create a new message.
 */
export declare const QueryResult_PostgresErrorSchema: GenMessage<QueryResult_PostgresError>;

/**
 * @generated from message bytebase.v1.QueryResult.Message
 */
export declare type QueryResult_Message = Message<"bytebase.v1.QueryResult.Message"> & {
  /**
   * @generated from field: bytebase.v1.QueryResult.Message.Level level = 1;
   */
  level: QueryResult_Message_Level;

  /**
   * @generated from field: string content = 2;
   */
  content: string;
};

/**
 * Describes the message bytebase.v1.QueryResult.Message.
 * Use `create(QueryResult_MessageSchema)` to create a new message.
 */
export declare const QueryResult_MessageSchema: GenMessage<QueryResult_Message>;

/**
 * @generated from enum bytebase.v1.QueryResult.Message.Level
 */
export enum QueryResult_Message_Level {
  /**
   * Unspecified.
   *
   * @generated from enum value: LEVEL_UNSPECIFIED = 0;
   */
  LEVEL_UNSPECIFIED = 0,

  /**
   * @generated from enum value: INFO = 1;
   */
  INFO = 1,

  /**
   * @generated from enum value: WARNING = 2;
   */
  WARNING = 2,

  /**
   * @generated from enum value: DEBUG = 3;
   */
  DEBUG = 3,

  /**
   * @generated from enum value: LOG = 4;
   */
  LOG = 4,

  /**
   * @generated from enum value: NOTICE = 5;
   */
  NOTICE = 5,

  /**
   * @generated from enum value: EXCEPTION = 6;
   */
  EXCEPTION = 6,
}

/**
 * Describes the enum bytebase.v1.QueryResult.Message.Level.
 */
export declare const QueryResult_Message_LevelSchema: GenEnum<QueryResult_Message_Level>;

/**
 * @generated from message bytebase.v1.QueryRow
 */
export declare type QueryRow = Message<"bytebase.v1.QueryRow"> & {
  /**
   * Row values of the query result.
   *
   * @generated from field: repeated bytebase.v1.RowValue values = 1;
   */
  values: RowValue[];
};

/**
 * Describes the message bytebase.v1.QueryRow.
 * Use `create(QueryRowSchema)` to create a new message.
 */
export declare const QueryRowSchema: GenMessage<QueryRow>;

/**
 * @generated from message bytebase.v1.RowValue
 */
export declare type RowValue = Message<"bytebase.v1.RowValue"> & {
  /**
   * @generated from oneof bytebase.v1.RowValue.kind
   */
  kind: {
    /**
     * @generated from field: google.protobuf.NullValue null_value = 1;
     */
    value: NullValue;
    case: "nullValue";
  } | {
    /**
     * @generated from field: bool bool_value = 2;
     */
    value: boolean;
    case: "boolValue";
  } | {
    /**
     * @generated from field: bytes bytes_value = 3;
     */
    value: Uint8Array;
    case: "bytesValue";
  } | {
    /**
     * @generated from field: double double_value = 4;
     */
    value: number;
    case: "doubleValue";
  } | {
    /**
     * @generated from field: float float_value = 5;
     */
    value: number;
    case: "floatValue";
  } | {
    /**
     * @generated from field: int32 int32_value = 6;
     */
    value: number;
    case: "int32Value";
  } | {
    /**
     * @generated from field: int64 int64_value = 7;
     */
    value: bigint;
    case: "int64Value";
  } | {
    /**
     * @generated from field: string string_value = 8;
     */
    value: string;
    case: "stringValue";
  } | {
    /**
     * @generated from field: uint32 uint32_value = 9;
     */
    value: number;
    case: "uint32Value";
  } | {
    /**
     * @generated from field: uint64 uint64_value = 10;
     */
    value: bigint;
    case: "uint64Value";
  } | {
    /**
     * value_value is used for Spanner and TUPLE ARRAY MAP in Clickhouse only.
     *
     * @generated from field: google.protobuf.Value value_value = 11;
     */
    value: Value;
    case: "valueValue";
  } | {
    /**
     * timestamp_value is used for the timestamp without time zone data type,
     * meaning it only includes the timestamp without any time zone or location
     * info. Although it may be expressed as a UTC value, it should be seen as a
     * timestamp missing location context.
     *
     * @generated from field: bytebase.v1.RowValue.Timestamp timestamp_value = 12;
     */
    value: RowValue_Timestamp;
    case: "timestampValue";
  } | {
    /**
     * timestamp_tz_value is used for the timestamptz data type, which
     * accurately represents the timestamp with location information.
     *
     * @generated from field: bytebase.v1.RowValue.TimestampTZ timestamp_tz_value = 13;
     */
    value: RowValue_TimestampTZ;
    case: "timestampTzValue";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message bytebase.v1.RowValue.
 * Use `create(RowValueSchema)` to create a new message.
 */
export declare const RowValueSchema: GenMessage<RowValue>;

/**
 * @generated from message bytebase.v1.RowValue.Timestamp
 */
export declare type RowValue_Timestamp = Message<"bytebase.v1.RowValue.Timestamp"> & {
  /**
   * @generated from field: google.protobuf.Timestamp google_timestamp = 1;
   */
  googleTimestamp?: Timestamp;

  /**
   * The accuracy is the number of digits after the decimal point.
   *
   * @generated from field: int32 accuracy = 2;
   */
  accuracy: number;
};

/**
 * Describes the message bytebase.v1.RowValue.Timestamp.
 * Use `create(RowValue_TimestampSchema)` to create a new message.
 */
export declare const RowValue_TimestampSchema: GenMessage<RowValue_Timestamp>;

/**
 * @generated from message bytebase.v1.RowValue.TimestampTZ
 */
export declare type RowValue_TimestampTZ = Message<"bytebase.v1.RowValue.TimestampTZ"> & {
  /**
   * @generated from field: google.protobuf.Timestamp google_timestamp = 1;
   */
  googleTimestamp?: Timestamp;

  /**
   * Zone is the time zone abbreviations in timezone database such as "PDT",
   * "PST". https://en.wikipedia.org/wiki/List_of_tz_database_time_zones We
   * retrieve the time zone information from the timestamptz field in the
   * database. A timestamp is in UTC or epoch time, and with zone info, we can
   * convert it to a local time string. Zone and offset are returned by
   * time.Time.Zone()
   *
   * @generated from field: string zone = 2;
   */
  zone: string;

  /**
   * The offset is in seconds east of UTC
   *
   * @generated from field: int32 offset = 3;
   */
  offset: number;

  /**
   * @generated from field: int32 accuracy = 4;
   */
  accuracy: number;
};

/**
 * Describes the message bytebase.v1.RowValue.TimestampTZ.
 * Use `create(RowValue_TimestampTZSchema)` to create a new message.
 */
export declare const RowValue_TimestampTZSchema: GenMessage<RowValue_TimestampTZ>;

/**
 * @generated from message bytebase.v1.Advice
 */
export declare type Advice = Message<"bytebase.v1.Advice"> & {
  /**
   * The advice status.
   *
   * @generated from field: bytebase.v1.Advice.Status status = 1;
   */
  status: Advice_Status;

  /**
   * The advice code.
   *
   * @generated from field: int32 code = 2;
   */
  code: number;

  /**
   * The advice title.
   *
   * @generated from field: string title = 3;
   */
  title: string;

  /**
   * The advice content.
   *
   * @generated from field: string content = 4;
   */
  content: string;

  /**
   * The start_position is inclusive and the end_position is exclusive.
   * TODO: use range instead
   *
   * @generated from field: bytebase.v1.Position start_position = 8;
   */
  startPosition?: Position;

  /**
   * @generated from field: bytebase.v1.Position end_position = 9;
   */
  endPosition?: Position;
};

/**
 * Describes the message bytebase.v1.Advice.
 * Use `create(AdviceSchema)` to create a new message.
 */
export declare const AdviceSchema: GenMessage<Advice>;

/**
 * @generated from enum bytebase.v1.Advice.Status
 */
export enum Advice_Status {
  /**
   * Unspecified.
   *
   * @generated from enum value: STATUS_UNSPECIFIED = 0;
   */
  STATUS_UNSPECIFIED = 0,

  /**
   * @generated from enum value: SUCCESS = 1;
   */
  SUCCESS = 1,

  /**
   * @generated from enum value: WARNING = 2;
   */
  WARNING = 2,

  /**
   * @generated from enum value: ERROR = 3;
   */
  ERROR = 3,
}

/**
 * Describes the enum bytebase.v1.Advice.Status.
 */
export declare const Advice_StatusSchema: GenEnum<Advice_Status>;

/**
 * @generated from message bytebase.v1.ExportRequest
 */
export declare type ExportRequest = Message<"bytebase.v1.ExportRequest"> & {
  /**
   * The name is the instance name to execute the query against.
   * Format: instances/{instance}/databases/{databaseName}
   * Format: projects/{project}/issues/{issue} for data export issue.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The SQL statement to execute.
   *
   * @generated from field: string statement = 3;
   */
  statement: string;

  /**
   * The maximum number of rows to return.
   *
   * @generated from field: int32 limit = 4;
   */
  limit: number;

  /**
   * The export format.
   *
   * @generated from field: bytebase.v1.ExportFormat format = 5;
   */
  format: ExportFormat;

  /**
   * The admin is used for workspace owner and DBA for exporting data from SQL
   * Editor Admin mode. The exported data is not masked.
   *
   * @generated from field: bool admin = 6;
   */
  admin: boolean;

  /**
   * The zip password provide by users.
   *
   * @generated from field: string password = 7;
   */
  password: string;

  /**
   * The id of data source.
   * It is used for querying admin data source even if the instance has
   * read-only data sources. Or it can be used to query a specific read-only
   * data source.
   *
   * @generated from field: string data_source_id = 8;
   */
  dataSourceId: string;
};

/**
 * Describes the message bytebase.v1.ExportRequest.
 * Use `create(ExportRequestSchema)` to create a new message.
 */
export declare const ExportRequestSchema: GenMessage<ExportRequest>;

/**
 * @generated from message bytebase.v1.ExportResponse
 */
export declare type ExportResponse = Message<"bytebase.v1.ExportResponse"> & {
  /**
   * The export file content.
   *
   * @generated from field: bytes content = 1;
   */
  content: Uint8Array;
};

/**
 * Describes the message bytebase.v1.ExportResponse.
 * Use `create(ExportResponseSchema)` to create a new message.
 */
export declare const ExportResponseSchema: GenMessage<ExportResponse>;

/**
 * @generated from message bytebase.v1.PrettyRequest
 */
export declare type PrettyRequest = Message<"bytebase.v1.PrettyRequest"> & {
  /**
   * @generated from field: bytebase.v1.Engine engine = 1;
   */
  engine: Engine;

  /**
   * The SDL format SQL schema information that was dumped from a database
   * engine. This information will be sorted to match the order of statements in
   * the userSchema.
   *
   * @generated from field: string current_schema = 2;
   */
  currentSchema: string;

  /**
   * The expected SDL schema. This schema will be checked for correctness and
   * normalized.
   *
   * @generated from field: string expected_schema = 3;
   */
  expectedSchema: string;
};

/**
 * Describes the message bytebase.v1.PrettyRequest.
 * Use `create(PrettyRequestSchema)` to create a new message.
 */
export declare const PrettyRequestSchema: GenMessage<PrettyRequest>;

/**
 * @generated from message bytebase.v1.PrettyResponse
 */
export declare type PrettyResponse = Message<"bytebase.v1.PrettyResponse"> & {
  /**
   * The pretty-formatted version of current schema.
   *
   * @generated from field: string current_schema = 1;
   */
  currentSchema: string;

  /**
   * The expected SDL schema after normalizing.
   *
   * @generated from field: string expected_schema = 2;
   */
  expectedSchema: string;
};

/**
 * Describes the message bytebase.v1.PrettyResponse.
 * Use `create(PrettyResponseSchema)` to create a new message.
 */
export declare const PrettyResponseSchema: GenMessage<PrettyResponse>;

/**
 * @generated from message bytebase.v1.CheckRequest
 */
export declare type CheckRequest = Message<"bytebase.v1.CheckRequest"> & {
  /**
   * The database name to check against.
   * Format: instances/{instance}/databases/{database}
   *
   * @generated from field: string name = 2;
   */
  name: string;

  /**
   * @generated from field: string statement = 1;
   */
  statement: string;

  /**
   * @generated from field: bytebase.v1.CheckRequest.ChangeType change_type = 4;
   */
  changeType: CheckRequest_ChangeType;
};

/**
 * Describes the message bytebase.v1.CheckRequest.
 * Use `create(CheckRequestSchema)` to create a new message.
 */
export declare const CheckRequestSchema: GenMessage<CheckRequest>;

/**
 * @generated from enum bytebase.v1.CheckRequest.ChangeType
 */
export enum CheckRequest_ChangeType {
  /**
   * @generated from enum value: CHANGE_TYPE_UNSPECIFIED = 0;
   */
  CHANGE_TYPE_UNSPECIFIED = 0,

  /**
   * @generated from enum value: DDL = 1;
   */
  DDL = 1,

  /**
   * @generated from enum value: DDL_GHOST = 2;
   */
  DDL_GHOST = 2,

  /**
   * @generated from enum value: DML = 3;
   */
  DML = 3,

  /**
   * @generated from enum value: SQL_EDITOR = 4;
   */
  SQL_EDITOR = 4,
}

/**
 * Describes the enum bytebase.v1.CheckRequest.ChangeType.
 */
export declare const CheckRequest_ChangeTypeSchema: GenEnum<CheckRequest_ChangeType>;

/**
 * @generated from message bytebase.v1.CheckResponse
 */
export declare type CheckResponse = Message<"bytebase.v1.CheckResponse"> & {
  /**
   * @generated from field: repeated bytebase.v1.Advice advices = 1;
   */
  advices: Advice[];

  /**
   * The count of affected rows of the statement on the target database.
   *
   * @generated from field: int32 affected_rows = 2;
   */
  affectedRows: number;
};

/**
 * Describes the message bytebase.v1.CheckResponse.
 * Use `create(CheckResponseSchema)` to create a new message.
 */
export declare const CheckResponseSchema: GenMessage<CheckResponse>;

/**
 * @generated from message bytebase.v1.ParseMyBatisMapperRequest
 */
export declare type ParseMyBatisMapperRequest = Message<"bytebase.v1.ParseMyBatisMapperRequest"> & {
  /**
   * @generated from field: bytes content = 1;
   */
  content: Uint8Array;
};

/**
 * Describes the message bytebase.v1.ParseMyBatisMapperRequest.
 * Use `create(ParseMyBatisMapperRequestSchema)` to create a new message.
 */
export declare const ParseMyBatisMapperRequestSchema: GenMessage<ParseMyBatisMapperRequest>;

/**
 * @generated from message bytebase.v1.ParseMyBatisMapperResponse
 */
export declare type ParseMyBatisMapperResponse = Message<"bytebase.v1.ParseMyBatisMapperResponse"> & {
  /**
   * @generated from field: repeated string statements = 1;
   */
  statements: string[];
};

/**
 * Describes the message bytebase.v1.ParseMyBatisMapperResponse.
 * Use `create(ParseMyBatisMapperResponseSchema)` to create a new message.
 */
export declare const ParseMyBatisMapperResponseSchema: GenMessage<ParseMyBatisMapperResponse>;

/**
 * @generated from message bytebase.v1.DiffMetadataRequest
 */
export declare type DiffMetadataRequest = Message<"bytebase.v1.DiffMetadataRequest"> & {
  /**
   * The metadata of the source schema.
   *
   * @generated from field: bytebase.v1.DatabaseMetadata source_metadata = 1;
   */
  sourceMetadata?: DatabaseMetadata;

  /**
   * The metadata of the target schema.
   *
   * @generated from field: bytebase.v1.DatabaseMetadata target_metadata = 2;
   */
  targetMetadata?: DatabaseMetadata;

  /**
   * @generated from field: bytebase.v1.DatabaseCatalog source_catalog = 5;
   */
  sourceCatalog?: DatabaseCatalog;

  /**
   * @generated from field: bytebase.v1.DatabaseCatalog target_catalog = 6;
   */
  targetCatalog?: DatabaseCatalog;

  /**
   * The database engine of the schema.
   *
   * @generated from field: bytebase.v1.Engine engine = 3;
   */
  engine: Engine;

  /**
   * If false, we will build the raw common by classification in database
   * config.
   *
   * @generated from field: bool classification_from_config = 4;
   */
  classificationFromConfig: boolean;
};

/**
 * Describes the message bytebase.v1.DiffMetadataRequest.
 * Use `create(DiffMetadataRequestSchema)` to create a new message.
 */
export declare const DiffMetadataRequestSchema: GenMessage<DiffMetadataRequest>;

/**
 * @generated from message bytebase.v1.DiffMetadataResponse
 */
export declare type DiffMetadataResponse = Message<"bytebase.v1.DiffMetadataResponse"> & {
  /**
   * The diff of the metadata.
   *
   * @generated from field: string diff = 1;
   */
  diff: string;
};

/**
 * Describes the message bytebase.v1.DiffMetadataResponse.
 * Use `create(DiffMetadataResponseSchema)` to create a new message.
 */
export declare const DiffMetadataResponseSchema: GenMessage<DiffMetadataResponse>;

/**
 * @generated from message bytebase.v1.SearchQueryHistoriesRequest
 */
export declare type SearchQueryHistoriesRequest = Message<"bytebase.v1.SearchQueryHistoriesRequest"> & {
  /**
   * The maximum number of histories to return.
   * The service may return fewer than this value.
   * If unspecified, at most 10 history entries will be returned.
   * The maximum value is 1000; values above 1000 will be coerced to 1000.
   *
   * @generated from field: int32 page_size = 1;
   */
  pageSize: number;

  /**
   * A page token, received from a previous `ListQueryHistory` call.
   * Provide this to retrieve the subsequent page.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken: string;

  /**
   * Filter is the filter to apply on the search query history
   * The syntax and semantics of CEL are documented at https://github.com/google/cel-spec
   *
   * Supported filter:
   * - project: the project full name in "projects/{id}" format, support "==" operator.
   * - database: the database full name in "instances/{id}/databases/{name}" format, support "==" operator.
   * - instance: the instance full name in "instances/{id}" format, support "==" operator.
   * - type: the type, should be "QUERY" or "EXPORT", support "==" operator.
   * - statement: the SQL statemnt, support ".matches()" operator.
   *
   * For example:
   * project == "projects/{project}"
   * database == "instances/{instance}/databases/{database}"
   * instance == "instances/{instance}"
   * type == "QUERY"
   * type == "EXPORT"
   * statement.matches("select")
   * type == "QUERY" && statement.matches("select")
   *
   * @generated from field: string filter = 3;
   */
  filter: string;
};

/**
 * Describes the message bytebase.v1.SearchQueryHistoriesRequest.
 * Use `create(SearchQueryHistoriesRequestSchema)` to create a new message.
 */
export declare const SearchQueryHistoriesRequestSchema: GenMessage<SearchQueryHistoriesRequest>;

/**
 * @generated from message bytebase.v1.SearchQueryHistoriesResponse
 */
export declare type SearchQueryHistoriesResponse = Message<"bytebase.v1.SearchQueryHistoriesResponse"> & {
  /**
   * The list of history.
   *
   * @generated from field: repeated bytebase.v1.QueryHistory query_histories = 1;
   */
  queryHistories: QueryHistory[];

  /**
   * A token to retrieve next page of history.
   * Pass this value in the page_token field in the subsequent call to
   * `ListQueryHistory` method to retrieve the next page of history.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message bytebase.v1.SearchQueryHistoriesResponse.
 * Use `create(SearchQueryHistoriesResponseSchema)` to create a new message.
 */
export declare const SearchQueryHistoriesResponseSchema: GenMessage<SearchQueryHistoriesResponse>;

/**
 * @generated from message bytebase.v1.QueryHistory
 */
export declare type QueryHistory = Message<"bytebase.v1.QueryHistory"> & {
  /**
   * The name for the query history.
   * Format: queryHistories/{uid}
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The database name to execute the query.
   * Format: instances/{instance}/databases/{databaseName}
   *
   * @generated from field: string database = 2;
   */
  database: string;

  /**
   * @generated from field: string creator = 3;
   */
  creator: string;

  /**
   * @generated from field: google.protobuf.Timestamp create_time = 4;
   */
  createTime?: Timestamp;

  /**
   * @generated from field: string statement = 5;
   */
  statement: string;

  /**
   * @generated from field: optional string error = 6;
   */
  error?: string;

  /**
   * @generated from field: google.protobuf.Duration duration = 7;
   */
  duration?: Duration;

  /**
   * @generated from field: bytebase.v1.QueryHistory.Type type = 8;
   */
  type: QueryHistory_Type;
};

/**
 * Describes the message bytebase.v1.QueryHistory.
 * Use `create(QueryHistorySchema)` to create a new message.
 */
export declare const QueryHistorySchema: GenMessage<QueryHistory>;

/**
 * @generated from enum bytebase.v1.QueryHistory.Type
 */
export enum QueryHistory_Type {
  /**
   * @generated from enum value: TYPE_UNSPECIFIED = 0;
   */
  TYPE_UNSPECIFIED = 0,

  /**
   * @generated from enum value: QUERY = 1;
   */
  QUERY = 1,

  /**
   * @generated from enum value: EXPORT = 2;
   */
  EXPORT = 2,
}

/**
 * Describes the enum bytebase.v1.QueryHistory.Type.
 */
export declare const QueryHistory_TypeSchema: GenEnum<QueryHistory_Type>;

/**
 * @generated from message bytebase.v1.AICompletionRequest
 */
export declare type AICompletionRequest = Message<"bytebase.v1.AICompletionRequest"> & {
  /**
   * @generated from field: repeated bytebase.v1.AICompletionRequest.Message messages = 1;
   */
  messages: AICompletionRequest_Message[];
};

/**
 * Describes the message bytebase.v1.AICompletionRequest.
 * Use `create(AICompletionRequestSchema)` to create a new message.
 */
export declare const AICompletionRequestSchema: GenMessage<AICompletionRequest>;

/**
 * @generated from message bytebase.v1.AICompletionRequest.Message
 */
export declare type AICompletionRequest_Message = Message<"bytebase.v1.AICompletionRequest.Message"> & {
  /**
   * @generated from field: string role = 1;
   */
  role: string;

  /**
   * @generated from field: string content = 2;
   */
  content: string;
};

/**
 * Describes the message bytebase.v1.AICompletionRequest.Message.
 * Use `create(AICompletionRequest_MessageSchema)` to create a new message.
 */
export declare const AICompletionRequest_MessageSchema: GenMessage<AICompletionRequest_Message>;

/**
 * @generated from message bytebase.v1.AICompletionResponse
 */
export declare type AICompletionResponse = Message<"bytebase.v1.AICompletionResponse"> & {
  /**
   * candidates is used for results with multiple choices and candidates. Used
   * for OpenAI and Gemini.
   *
   * @generated from field: repeated bytebase.v1.AICompletionResponse.Candidate candidates = 1;
   */
  candidates: AICompletionResponse_Candidate[];
};

/**
 * Describes the message bytebase.v1.AICompletionResponse.
 * Use `create(AICompletionResponseSchema)` to create a new message.
 */
export declare const AICompletionResponseSchema: GenMessage<AICompletionResponse>;

/**
 * @generated from message bytebase.v1.AICompletionResponse.Candidate
 */
export declare type AICompletionResponse_Candidate = Message<"bytebase.v1.AICompletionResponse.Candidate"> & {
  /**
   * @generated from field: bytebase.v1.AICompletionResponse.Candidate.Content content = 1;
   */
  content?: AICompletionResponse_Candidate_Content;
};

/**
 * Describes the message bytebase.v1.AICompletionResponse.Candidate.
 * Use `create(AICompletionResponse_CandidateSchema)` to create a new message.
 */
export declare const AICompletionResponse_CandidateSchema: GenMessage<AICompletionResponse_Candidate>;

/**
 * @generated from message bytebase.v1.AICompletionResponse.Candidate.Content
 */
export declare type AICompletionResponse_Candidate_Content = Message<"bytebase.v1.AICompletionResponse.Candidate.Content"> & {
  /**
   * parts is used for a result content with multiple parts.
   *
   * @generated from field: repeated bytebase.v1.AICompletionResponse.Candidate.Content.Part parts = 1;
   */
  parts: AICompletionResponse_Candidate_Content_Part[];
};

/**
 * Describes the message bytebase.v1.AICompletionResponse.Candidate.Content.
 * Use `create(AICompletionResponse_Candidate_ContentSchema)` to create a new message.
 */
export declare const AICompletionResponse_Candidate_ContentSchema: GenMessage<AICompletionResponse_Candidate_Content>;

/**
 * @generated from message bytebase.v1.AICompletionResponse.Candidate.Content.Part
 */
export declare type AICompletionResponse_Candidate_Content_Part = Message<"bytebase.v1.AICompletionResponse.Candidate.Content.Part"> & {
  /**
   * @generated from field: string text = 1;
   */
  text: string;
};

/**
 * Describes the message bytebase.v1.AICompletionResponse.Candidate.Content.Part.
 * Use `create(AICompletionResponse_Candidate_Content_PartSchema)` to create a new message.
 */
export declare const AICompletionResponse_Candidate_Content_PartSchema: GenMessage<AICompletionResponse_Candidate_Content_Part>;

/**
 * @generated from service bytebase.v1.SQLService
 */
export declare const SQLService: GenService<{
  /**
   * @generated from rpc bytebase.v1.SQLService.Query
   */
  query: {
    methodKind: "unary";
    input: typeof QueryRequestSchema;
    output: typeof QueryResponseSchema;
  },
  /**
   * @generated from rpc bytebase.v1.SQLService.AdminExecute
   */
  adminExecute: {
    methodKind: "bidi_streaming";
    input: typeof AdminExecuteRequestSchema;
    output: typeof AdminExecuteResponseSchema;
  },
  /**
   * SearchQueryHistories searches query histories for the caller.
   *
   * @generated from rpc bytebase.v1.SQLService.SearchQueryHistories
   */
  searchQueryHistories: {
    methodKind: "unary";
    input: typeof SearchQueryHistoriesRequestSchema;
    output: typeof SearchQueryHistoriesResponseSchema;
  },
  /**
   * @generated from rpc bytebase.v1.SQLService.Export
   */
  export: {
    methodKind: "unary";
    input: typeof ExportRequestSchema;
    output: typeof ExportResponseSchema;
  },
  /**
   * @generated from rpc bytebase.v1.SQLService.Check
   */
  check: {
    methodKind: "unary";
    input: typeof CheckRequestSchema;
    output: typeof CheckResponseSchema;
  },
  /**
   * @generated from rpc bytebase.v1.SQLService.Pretty
   */
  pretty: {
    methodKind: "unary";
    input: typeof PrettyRequestSchema;
    output: typeof PrettyResponseSchema;
  },
  /**
   * @generated from rpc bytebase.v1.SQLService.DiffMetadata
   */
  diffMetadata: {
    methodKind: "unary";
    input: typeof DiffMetadataRequestSchema;
    output: typeof DiffMetadataResponseSchema;
  },
  /**
   * @generated from rpc bytebase.v1.SQLService.AICompletion
   */
  aICompletion: {
    methodKind: "unary";
    input: typeof AICompletionRequestSchema;
    output: typeof AICompletionResponseSchema;
  },
}>;

