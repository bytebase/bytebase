// @generated by protoc-gen-es v2.5.2
// @generated from file v1/iam_policy.proto (package bytebase.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";
import type { Expr } from "../google/type/expr_pb";
import type { Expr as Expr$1 } from "../google/api/expr/v1alpha1/syntax_pb";

/**
 * Describes the file v1/iam_policy.proto.
 */
export declare const file_v1_iam_policy: GenFile;

/**
 * @generated from message bytebase.v1.GetIamPolicyRequest
 */
export declare type GetIamPolicyRequest = Message<"bytebase.v1.GetIamPolicyRequest"> & {
  /**
   * The name of the resource to get the IAM policy.
   * Format: projects/{project}
   * Format: workspaces/{workspace}
   *
   * @generated from field: string resource = 1;
   */
  resource: string;
};

/**
 * Describes the message bytebase.v1.GetIamPolicyRequest.
 * Use `create(GetIamPolicyRequestSchema)` to create a new message.
 */
export declare const GetIamPolicyRequestSchema: GenMessage<GetIamPolicyRequest>;

/**
 * @generated from message bytebase.v1.SetIamPolicyRequest
 */
export declare type SetIamPolicyRequest = Message<"bytebase.v1.SetIamPolicyRequest"> & {
  /**
   * The name of the resource to set the IAM policy.
   * Format: projects/{project}
   * Format: workspaces/{workspace}
   *
   * @generated from field: string resource = 1;
   */
  resource: string;

  /**
   * @generated from field: bytebase.v1.IamPolicy policy = 2;
   */
  policy?: IamPolicy;

  /**
   * The current etag of the policy.
   *
   * @generated from field: string etag = 3;
   */
  etag: string;
};

/**
 * Describes the message bytebase.v1.SetIamPolicyRequest.
 * Use `create(SetIamPolicyRequestSchema)` to create a new message.
 */
export declare const SetIamPolicyRequestSchema: GenMessage<SetIamPolicyRequest>;

/**
 * @generated from message bytebase.v1.IamPolicy
 */
export declare type IamPolicy = Message<"bytebase.v1.IamPolicy"> & {
  /**
   * Collection of binding.
   * A binding binds one or more project members to a single project role.
   *
   * @generated from field: repeated bytebase.v1.Binding bindings = 1;
   */
  bindings: Binding[];

  /**
   * The current etag of the policy.
   * If an etag is provided and does not match the current etag of the poliy,
   * the call will be blocked and an ABORTED error will be returned.
   *
   * @generated from field: string etag = 2;
   */
  etag: string;
};

/**
 * Describes the message bytebase.v1.IamPolicy.
 * Use `create(IamPolicySchema)` to create a new message.
 */
export declare const IamPolicySchema: GenMessage<IamPolicy>;

/**
 * @generated from message bytebase.v1.Binding
 */
export declare type Binding = Message<"bytebase.v1.Binding"> & {
  /**
   * The role that is assigned to the members.
   * Format: roles/{role}
   *
   * @generated from field: string role = 1;
   */
  role: string;

  /**
   * Specifies the principals requesting access for a Bytebase resource.
   * For users, the member should be: user:{email}
   * For groups, the member should be: group:{email}
   *
   * @generated from field: repeated string members = 2;
   */
  members: string[];

  /**
   * The condition that is associated with this binding, only used in the project IAM policy.
   * If the condition evaluates to true, then this binding applies to the current request.
   * If the condition evaluates to false, then this binding does not apply to the current request. However, a different role binding might grant the same role to one or more of the principals in this binding.
   * The syntax and semantics of CEL are documented at https://github.com/google/cel-spec
   *
   * Support variables:
   * resource.database: the database full name in "instances/{instance}/databases/{database}" format, used by the "roles/sqlEditorUser" and "roles/projectExporter" role, support "==" operator.
   * resource.schema: the schema name, used by the "roles/sqlEditorUser" and "roles/projectExporter" role, support "==" operator.
   * resource.table: the table name, used by the "roles/sqlEditorUser" and "roles/projectExporter" role, support "==" operator.
   * request.time: the expiration. Only support "<" operation in `request.time < timestamp("{ISO datetime string format}")`.
   * request.row_limit: the maximum export rows, used by the "roles/projectExporter" role. Only support "<=" operation.
   *
   * For example:
   * resource.database == "instances/local-pg/databases/postgres" && resource.schema in ["public","another_schema"]
   * resource.database == "instances/local-pg/databases/bytebase" && resource.schema == "public" && resource.table in ["audit_log"]
   * request.time < timestamp("2025-04-26T11:24:48.655Z") && request.row_limit <= 1000
   *
   * @generated from field: google.type.Expr condition = 3;
   */
  condition?: Expr;

  /**
   * The parsed expression of the condition.
   *
   * @generated from field: google.api.expr.v1alpha1.Expr parsed_expr = 4;
   */
  parsedExpr?: Expr$1;
};

/**
 * Describes the message bytebase.v1.Binding.
 * Use `create(BindingSchema)` to create a new message.
 */
export declare const BindingSchema: GenMessage<Binding>;

/**
 * The difference delta between two policies.
 *
 * @generated from message bytebase.v1.PolicyDelta
 */
export declare type PolicyDelta = Message<"bytebase.v1.PolicyDelta"> & {
  /**
   * The delta for Bindings between two policies.
   *
   * @generated from field: repeated bytebase.v1.BindingDelta binding_deltas = 1;
   */
  bindingDeltas: BindingDelta[];
};

/**
 * Describes the message bytebase.v1.PolicyDelta.
 * Use `create(PolicyDeltaSchema)` to create a new message.
 */
export declare const PolicyDeltaSchema: GenMessage<PolicyDelta>;

/**
 * One delta entry for Binding. Each individual change (only one member in each
 * entry) to a binding will be a separate entry.
 *
 * @generated from message bytebase.v1.BindingDelta
 */
export declare type BindingDelta = Message<"bytebase.v1.BindingDelta"> & {
  /**
   * The action that was performed on a Binding.
   *
   * @generated from field: bytebase.v1.BindingDelta.Action action = 1;
   */
  action: BindingDelta_Action;

  /**
   * Role that is assigned to `members`.
   * For example, `roles/projectOwner`.
   *
   * @generated from field: string role = 2;
   */
  role: string;

  /**
   * Follows the same format of Binding.members.
   *
   * @generated from field: string member = 3;
   */
  member: string;

  /**
   * The condition that is associated with this binding.
   *
   * @generated from field: google.type.Expr condition = 4;
   */
  condition?: Expr;
};

/**
 * Describes the message bytebase.v1.BindingDelta.
 * Use `create(BindingDeltaSchema)` to create a new message.
 */
export declare const BindingDeltaSchema: GenMessage<BindingDelta>;

/**
 * The type of action performed on a Binding in a policy.
 *
 * @generated from enum bytebase.v1.BindingDelta.Action
 */
export enum BindingDelta_Action {
  /**
   * @generated from enum value: ACTION_UNSPECIFIED = 0;
   */
  ACTION_UNSPECIFIED = 0,

  /**
   * @generated from enum value: ADD = 1;
   */
  ADD = 1,

  /**
   * @generated from enum value: REMOVE = 2;
   */
  REMOVE = 2,
}

/**
 * Describes the enum bytebase.v1.BindingDelta.Action.
 */
export declare const BindingDelta_ActionSchema: GenEnum<BindingDelta_Action>;

