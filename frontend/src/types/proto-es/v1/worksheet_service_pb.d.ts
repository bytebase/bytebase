// @generated by protoc-gen-es v2.5.2
// @generated from file v1/worksheet_service.proto (package bytebase.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";
import type { EmptySchema, FieldMask, Timestamp } from "@bufbuild/protobuf/wkt";

/**
 * Describes the file v1/worksheet_service.proto.
 */
export declare const file_v1_worksheet_service: GenFile;

/**
 * @generated from message bytebase.v1.CreateWorksheetRequest
 */
export declare type CreateWorksheetRequest = Message<"bytebase.v1.CreateWorksheetRequest"> & {
  /**
   * The worksheet to create.
   *
   * @generated from field: bytebase.v1.Worksheet worksheet = 1;
   */
  worksheet?: Worksheet;
};

/**
 * Describes the message bytebase.v1.CreateWorksheetRequest.
 * Use `create(CreateWorksheetRequestSchema)` to create a new message.
 */
export declare const CreateWorksheetRequestSchema: GenMessage<CreateWorksheetRequest>;

/**
 * @generated from message bytebase.v1.GetWorksheetRequest
 */
export declare type GetWorksheetRequest = Message<"bytebase.v1.GetWorksheetRequest"> & {
  /**
   * The name of the worksheet to retrieve.
   * Format: worksheets/{worksheet}
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message bytebase.v1.GetWorksheetRequest.
 * Use `create(GetWorksheetRequestSchema)` to create a new message.
 */
export declare const GetWorksheetRequestSchema: GenMessage<GetWorksheetRequest>;

/**
 * @generated from message bytebase.v1.UpdateWorksheetRequest
 */
export declare type UpdateWorksheetRequest = Message<"bytebase.v1.UpdateWorksheetRequest"> & {
  /**
   * The worksheet to update.
   *
   * The worksheet's `name` field is used to identify the worksheet to update.
   * Format: worksheets/{worksheet}
   *
   * @generated from field: bytebase.v1.Worksheet worksheet = 1;
   */
  worksheet?: Worksheet;

  /**
   * The list of fields to be updated.
   * Fields are specified relative to the worksheet.
   * (e.g. `title`, `statement`; *not* `worksheet.title` or `worksheet.statement`)
   * Only support update the following fields for now:
   * - `title`
   * - `statement`
   * - `starred`
   * - `visibility`
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;
};

/**
 * Describes the message bytebase.v1.UpdateWorksheetRequest.
 * Use `create(UpdateWorksheetRequestSchema)` to create a new message.
 */
export declare const UpdateWorksheetRequestSchema: GenMessage<UpdateWorksheetRequest>;

/**
 * @generated from message bytebase.v1.UpdateWorksheetOrganizerRequest
 */
export declare type UpdateWorksheetOrganizerRequest = Message<"bytebase.v1.UpdateWorksheetOrganizerRequest"> & {
  /**
   * The organizer to update.
   *
   * The organizer's `worksheet` field is used to identify the worksheet.
   * Format: worksheets/{worksheet}
   *
   * @generated from field: bytebase.v1.WorksheetOrganizer organizer = 1;
   */
  organizer?: WorksheetOrganizer;

  /**
   * The list of fields to be updated.
   * Fields are specified relative to the worksheet organizer.
   * Only support update the following fields for now:
   * - `starred`
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;
};

/**
 * Describes the message bytebase.v1.UpdateWorksheetOrganizerRequest.
 * Use `create(UpdateWorksheetOrganizerRequestSchema)` to create a new message.
 */
export declare const UpdateWorksheetOrganizerRequestSchema: GenMessage<UpdateWorksheetOrganizerRequest>;

/**
 * @generated from message bytebase.v1.WorksheetOrganizer
 */
export declare type WorksheetOrganizer = Message<"bytebase.v1.WorksheetOrganizer"> & {
  /**
   * The name of the worksheet.
   * Format: worksheets/{worksheet}
   *
   * @generated from field: string worksheet = 1;
   */
  worksheet: string;

  /**
   * starred means if the worksheet is starred.
   *
   * @generated from field: bool starred = 2;
   */
  starred: boolean;
};

/**
 * Describes the message bytebase.v1.WorksheetOrganizer.
 * Use `create(WorksheetOrganizerSchema)` to create a new message.
 */
export declare const WorksheetOrganizerSchema: GenMessage<WorksheetOrganizer>;

/**
 * @generated from message bytebase.v1.DeleteWorksheetRequest
 */
export declare type DeleteWorksheetRequest = Message<"bytebase.v1.DeleteWorksheetRequest"> & {
  /**
   * The name of the worksheet to delete.
   * Format: worksheets/{worksheet}
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message bytebase.v1.DeleteWorksheetRequest.
 * Use `create(DeleteWorksheetRequestSchema)` to create a new message.
 */
export declare const DeleteWorksheetRequestSchema: GenMessage<DeleteWorksheetRequest>;

/**
 * @generated from message bytebase.v1.SearchWorksheetsRequest
 */
export declare type SearchWorksheetsRequest = Message<"bytebase.v1.SearchWorksheetsRequest"> & {
  /**
   * To filter the search result.
   * The syntax and semantics of CEL are documented at https://github.com/google/cel-spec
   *
   * Supported filter:
   * - creator: the worksheet creator in "users/{email}" format, support "==" and "!=" operator.
   * - starred: should be "true" or "false", filter starred/unstarred sheets, support "==" operator.
   * - visibility: check Visibility enum in the Worksheet message for values, support "==" and "in [xx]" operator.
   *
   * For example:
   * creator == "users/{email}"
   * creator != "users/{email}"
   * starred == true
   * starred == false
   * visibility in ["VISIBILITY_PRIVATE", "VISIBILITY_PROJECT_READ", "VISIBILITY_PROJECT_WRITE"]
   * visibility == "VISIBILITY_PRIVATE"
   *
   * @generated from field: string filter = 1;
   */
  filter: string;

  /**
   * Not used.
   * The maximum number of worksheets to return. The service may return fewer than
   * this value.
   * If unspecified, at most 10 worksheets will be returned.
   * The maximum value is 1000; values above 1000 will be coerced to 1000.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * Not used.
   * A page token, received from a previous `SearchWorksheets` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `SearchWorksheets` must match
   * the call that provided the page token.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;
};

/**
 * Describes the message bytebase.v1.SearchWorksheetsRequest.
 * Use `create(SearchWorksheetsRequestSchema)` to create a new message.
 */
export declare const SearchWorksheetsRequestSchema: GenMessage<SearchWorksheetsRequest>;

/**
 * @generated from message bytebase.v1.SearchWorksheetsResponse
 */
export declare type SearchWorksheetsResponse = Message<"bytebase.v1.SearchWorksheetsResponse"> & {
  /**
   * The worksheets that matched the search criteria.
   *
   * @generated from field: repeated bytebase.v1.Worksheet worksheets = 1;
   */
  worksheets: Worksheet[];

  /**
   * Not used. A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message bytebase.v1.SearchWorksheetsResponse.
 * Use `create(SearchWorksheetsResponseSchema)` to create a new message.
 */
export declare const SearchWorksheetsResponseSchema: GenMessage<SearchWorksheetsResponse>;

/**
 * @generated from message bytebase.v1.Worksheet
 */
export declare type Worksheet = Message<"bytebase.v1.Worksheet"> & {
  /**
   * The name of the worksheet resource, generated by the server.
   * Canonical parent is project.
   * Format: worksheets/{worksheet}
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The project resource name.
   * Format: projects/{project}
   *
   * @generated from field: string project = 2;
   */
  project: string;

  /**
   * The database resource name.
   * Format: instances/{instance}/databases/{database}
   * If the database parent doesn't exist, the database field is empty.
   *
   * @generated from field: string database = 3;
   */
  database: string;

  /**
   * The title of the worksheet.
   *
   * @generated from field: string title = 4;
   */
  title: string;

  /**
   * The creator of the Worksheet.
   * Format: users/{email}
   *
   * @generated from field: string creator = 5;
   */
  creator: string;

  /**
   * The create time of the worksheet.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 6;
   */
  createTime?: Timestamp;

  /**
   * The last update time of the worksheet.
   *
   * @generated from field: google.protobuf.Timestamp update_time = 7;
   */
  updateTime?: Timestamp;

  /**
   * The content of the worksheet.
   * By default, it will be cut off in SearchWorksheet() method. If it doesn't match the `content_size`, you can
   * use GetWorksheet() request to retrieve the full content.
   *
   * @generated from field: bytes content = 8;
   */
  content: Uint8Array;

  /**
   * content_size is the full size of the content, may not match the size of the `content` field.
   *
   * @generated from field: int64 content_size = 9;
   */
  contentSize: bigint;

  /**
   * @generated from field: bytebase.v1.Worksheet.Visibility visibility = 10;
   */
  visibility: Worksheet_Visibility;

  /**
   * starred indicates whether the worksheet is starred by the current authenticated user.
   *
   * @generated from field: bool starred = 11;
   */
  starred: boolean;
};

/**
 * Describes the message bytebase.v1.Worksheet.
 * Use `create(WorksheetSchema)` to create a new message.
 */
export declare const WorksheetSchema: GenMessage<Worksheet>;

/**
 * @generated from enum bytebase.v1.Worksheet.Visibility
 */
export enum Worksheet_Visibility {
  /**
   * @generated from enum value: VISIBILITY_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Read access in project scope, worksheet OWNER/DBA and project OWNER can read/write, other project members can read.
   *
   * @generated from enum value: VISIBILITY_PROJECT_READ = 1;
   */
  PROJECT_READ = 1,

  /**
   * Write access in project scope, worksheet OWNER/DBA and all members in the project can write the worksheet.
   *
   * @generated from enum value: VISIBILITY_PROJECT_WRITE = 2;
   */
  PROJECT_WRITE = 2,

  /**
   * Private, only worksheet OWNER can read/write.
   *
   * @generated from enum value: VISIBILITY_PRIVATE = 3;
   */
  PRIVATE = 3,
}

/**
 * Describes the enum bytebase.v1.Worksheet.Visibility.
 */
export declare const Worksheet_VisibilitySchema: GenEnum<Worksheet_Visibility>;

/**
 * @generated from service bytebase.v1.WorksheetService
 */
export declare const WorksheetService: GenService<{
  /**
   * Create a personal worksheet used in SQL Editor.
   *
   * @generated from rpc bytebase.v1.WorksheetService.CreateWorksheet
   */
  createWorksheet: {
    methodKind: "unary";
    input: typeof CreateWorksheetRequestSchema;
    output: typeof WorksheetSchema;
  },
  /**
   * Get a worksheet by name.
   * The users can access this method if,
   * - they are the creator of the worksheet;
   * - they have bb.worksheets.get permission on the workspace;
   * - the sheet is shared with them with PROJECT_READ and PROJECT_WRITE visibility, and they have bb.projects.get permission on the project.
   *
   * @generated from rpc bytebase.v1.WorksheetService.GetWorksheet
   */
  getWorksheet: {
    methodKind: "unary";
    input: typeof GetWorksheetRequestSchema;
    output: typeof WorksheetSchema;
  },
  /**
   * Search for worksheets.
   * This is used for finding my worksheets or worksheets shared by other people.
   * The sheet accessibility is the same as GetWorksheet().
   *
   * @generated from rpc bytebase.v1.WorksheetService.SearchWorksheets
   */
  searchWorksheets: {
    methodKind: "unary";
    input: typeof SearchWorksheetsRequestSchema;
    output: typeof SearchWorksheetsResponseSchema;
  },
  /**
   * Update a worksheet.
   * The users can access this method if,
   * - they are the creator of the worksheet;
   * - they have bb.worksheets.manage permission on the workspace;
   * - the sheet is shared with them with PROJECT_WRITE visibility, and they have bb.projects.get permission on the project.
   *
   * @generated from rpc bytebase.v1.WorksheetService.UpdateWorksheet
   */
  updateWorksheet: {
    methodKind: "unary";
    input: typeof UpdateWorksheetRequestSchema;
    output: typeof WorksheetSchema;
  },
  /**
   * Update the organizer of a worksheet.
   * The access is the same as UpdateWorksheet method.
   *
   * @generated from rpc bytebase.v1.WorksheetService.UpdateWorksheetOrganizer
   */
  updateWorksheetOrganizer: {
    methodKind: "unary";
    input: typeof UpdateWorksheetOrganizerRequestSchema;
    output: typeof WorksheetOrganizerSchema;
  },
  /**
   * Delete a worksheet.
   * The access is the same as UpdateWorksheet method.
   *
   * @generated from rpc bytebase.v1.WorksheetService.DeleteWorksheet
   */
  deleteWorksheet: {
    methodKind: "unary";
    input: typeof DeleteWorksheetRequestSchema;
    output: typeof EmptySchema;
  },
}>;

