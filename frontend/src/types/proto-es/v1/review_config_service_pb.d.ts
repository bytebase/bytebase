// @generated by protoc-gen-es v2.5.2
// @generated from file v1/review_config_service.proto (package bytebase.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";
import type { EmptySchema, FieldMask } from "@bufbuild/protobuf/wkt";
import type { SQLReviewRule } from "./org_policy_service_pb";

/**
 * Describes the file v1/review_config_service.proto.
 */
export declare const file_v1_review_config_service: GenFile;

/**
 * @generated from message bytebase.v1.ListReviewConfigsRequest
 */
export declare type ListReviewConfigsRequest = Message<"bytebase.v1.ListReviewConfigsRequest"> & {
  /**
   * Pagination is not currently implemented. This field is reserved for future use.
   * The maximum number of SQL review configs to return. The service may return fewer than
   * this value.
   * If unspecified, at most 10 SQL review configs will be returned.
   * The maximum value is 1000; values above 1000 will be coerced to 1000.
   *
   * @generated from field: int32 page_size = 1;
   */
  pageSize: number;

  /**
   * Pagination is not currently implemented. This field is reserved for future use.
   * A page token, provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListReviewConfigs` must match
   * the call that provided the page token.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken: string;
};

/**
 * Describes the message bytebase.v1.ListReviewConfigsRequest.
 * Use `create(ListReviewConfigsRequestSchema)` to create a new message.
 */
export declare const ListReviewConfigsRequestSchema: GenMessage<ListReviewConfigsRequest>;

/**
 * @generated from message bytebase.v1.ListReviewConfigsResponse
 */
export declare type ListReviewConfigsResponse = Message<"bytebase.v1.ListReviewConfigsResponse"> & {
  /**
   * The SQL review configs from the specified request.
   *
   * @generated from field: repeated bytebase.v1.ReviewConfig review_configs = 1;
   */
  reviewConfigs: ReviewConfig[];

  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message bytebase.v1.ListReviewConfigsResponse.
 * Use `create(ListReviewConfigsResponseSchema)` to create a new message.
 */
export declare const ListReviewConfigsResponseSchema: GenMessage<ListReviewConfigsResponse>;

/**
 * @generated from message bytebase.v1.CreateReviewConfigRequest
 */
export declare type CreateReviewConfigRequest = Message<"bytebase.v1.CreateReviewConfigRequest"> & {
  /**
   * The SQL review config to create.
   *
   * @generated from field: bytebase.v1.ReviewConfig review_config = 1;
   */
  reviewConfig?: ReviewConfig;
};

/**
 * Describes the message bytebase.v1.CreateReviewConfigRequest.
 * Use `create(CreateReviewConfigRequestSchema)` to create a new message.
 */
export declare const CreateReviewConfigRequestSchema: GenMessage<CreateReviewConfigRequest>;

/**
 * @generated from message bytebase.v1.UpdateReviewConfigRequest
 */
export declare type UpdateReviewConfigRequest = Message<"bytebase.v1.UpdateReviewConfigRequest"> & {
  /**
   * The SQL review config to update.
   *
   * The name field is used to identify the SQL review config to update.
   *
   * @generated from field: bytebase.v1.ReviewConfig review_config = 1;
   */
  reviewConfig?: ReviewConfig;

  /**
   * The list of fields to update.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;

  /**
   * If set to true, and the config is not found, a new config will be created.
   * In this situation, `update_mask` is ignored.
   *
   * @generated from field: bool allow_missing = 3;
   */
  allowMissing: boolean;
};

/**
 * Describes the message bytebase.v1.UpdateReviewConfigRequest.
 * Use `create(UpdateReviewConfigRequestSchema)` to create a new message.
 */
export declare const UpdateReviewConfigRequestSchema: GenMessage<UpdateReviewConfigRequest>;

/**
 * @generated from message bytebase.v1.GetReviewConfigRequest
 */
export declare type GetReviewConfigRequest = Message<"bytebase.v1.GetReviewConfigRequest"> & {
  /**
   * The name of the SQL review config to retrieve.
   * Format: reviewConfigs/{reviewConfig}
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message bytebase.v1.GetReviewConfigRequest.
 * Use `create(GetReviewConfigRequestSchema)` to create a new message.
 */
export declare const GetReviewConfigRequestSchema: GenMessage<GetReviewConfigRequest>;

/**
 * @generated from message bytebase.v1.DeleteReviewConfigRequest
 */
export declare type DeleteReviewConfigRequest = Message<"bytebase.v1.DeleteReviewConfigRequest"> & {
  /**
   * The name of the SQL review config to delete.
   * Format: reviewConfigs/{reviewConfig}
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message bytebase.v1.DeleteReviewConfigRequest.
 * Use `create(DeleteReviewConfigRequestSchema)` to create a new message.
 */
export declare const DeleteReviewConfigRequestSchema: GenMessage<DeleteReviewConfigRequest>;

/**
 * @generated from message bytebase.v1.ReviewConfig
 */
export declare type ReviewConfig = Message<"bytebase.v1.ReviewConfig"> & {
  /**
   * The name of the SQL review config.
   * Format: reviewConfigs/{reviewConfig}
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The title of the review configuration.
   *
   * @generated from field: string title = 2;
   */
  title: string;

  /**
   * Whether the review configuration is enabled.
   *
   * @generated from field: bool enabled = 3;
   */
  enabled: boolean;

  /**
   * The SQL review rules to enforce.
   *
   * @generated from field: repeated bytebase.v1.SQLReviewRule rules = 7;
   */
  rules: SQLReviewRule[];

  /**
   * Resources using the config.
   * Format: {resource}/{resource id}, e.g., environments/test.
   *
   * @generated from field: repeated string resources = 8;
   */
  resources: string[];
};

/**
 * Describes the message bytebase.v1.ReviewConfig.
 * Use `create(ReviewConfigSchema)` to create a new message.
 */
export declare const ReviewConfigSchema: GenMessage<ReviewConfig>;

/**
 * ReviewConfigService manages approval flow configurations.
 *
 * @generated from service bytebase.v1.ReviewConfigService
 */
export declare const ReviewConfigService: GenService<{
  /**
   * Creates a new SQL review configuration.
   * Permissions required: bb.reviewConfigs.create
   *
   * @generated from rpc bytebase.v1.ReviewConfigService.CreateReviewConfig
   */
  createReviewConfig: {
    methodKind: "unary";
    input: typeof CreateReviewConfigRequestSchema;
    output: typeof ReviewConfigSchema;
  },
  /**
   * Lists all SQL review configurations.
   * Permissions required: bb.reviewConfigs.list
   *
   * @generated from rpc bytebase.v1.ReviewConfigService.ListReviewConfigs
   */
  listReviewConfigs: {
    methodKind: "unary";
    input: typeof ListReviewConfigsRequestSchema;
    output: typeof ListReviewConfigsResponseSchema;
  },
  /**
   * Retrieves a SQL review configuration by name.
   * Permissions required: bb.reviewConfigs.get
   *
   * @generated from rpc bytebase.v1.ReviewConfigService.GetReviewConfig
   */
  getReviewConfig: {
    methodKind: "unary";
    input: typeof GetReviewConfigRequestSchema;
    output: typeof ReviewConfigSchema;
  },
  /**
   * Updates a SQL review configuration.
   * Permissions required: bb.reviewConfigs.update
   *
   * @generated from rpc bytebase.v1.ReviewConfigService.UpdateReviewConfig
   */
  updateReviewConfig: {
    methodKind: "unary";
    input: typeof UpdateReviewConfigRequestSchema;
    output: typeof ReviewConfigSchema;
  },
  /**
   * Deletes a SQL review configuration.
   * Permissions required: bb.reviewConfigs.delete
   *
   * @generated from rpc bytebase.v1.ReviewConfigService.DeleteReviewConfig
   */
  deleteReviewConfig: {
    methodKind: "unary";
    input: typeof DeleteReviewConfigRequestSchema;
    output: typeof EmptySchema;
  },
}>;

