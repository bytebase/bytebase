// @generated by protoc-gen-es v2.5.2
// @generated from file v1/sheet_service.proto (package bytebase.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";
import type { FieldMask, Timestamp } from "@bufbuild/protobuf/wkt";
import type { Engine } from "./common_pb";

/**
 * Describes the file v1/sheet_service.proto.
 */
export declare const file_v1_sheet_service: GenFile;

/**
 * @generated from message bytebase.v1.CreateSheetRequest
 */
export declare type CreateSheetRequest = Message<"bytebase.v1.CreateSheetRequest"> & {
  /**
   * The parent resource where this sheet will be created.
   * Format: projects/{project}
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * The sheet to create.
   *
   * @generated from field: bytebase.v1.Sheet sheet = 2;
   */
  sheet?: Sheet;
};

/**
 * Describes the message bytebase.v1.CreateSheetRequest.
 * Use `create(CreateSheetRequestSchema)` to create a new message.
 */
export declare const CreateSheetRequestSchema: GenMessage<CreateSheetRequest>;

/**
 * @generated from message bytebase.v1.BatchCreateSheetsRequest
 */
export declare type BatchCreateSheetsRequest = Message<"bytebase.v1.BatchCreateSheetsRequest"> & {
  /**
   * The parent resource where all sheets will be created.
   * Format: projects/{project}
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * @generated from field: repeated bytebase.v1.CreateSheetRequest requests = 2;
   */
  requests: CreateSheetRequest[];
};

/**
 * Describes the message bytebase.v1.BatchCreateSheetsRequest.
 * Use `create(BatchCreateSheetsRequestSchema)` to create a new message.
 */
export declare const BatchCreateSheetsRequestSchema: GenMessage<BatchCreateSheetsRequest>;

/**
 * @generated from message bytebase.v1.BatchCreateSheetsResponse
 */
export declare type BatchCreateSheetsResponse = Message<"bytebase.v1.BatchCreateSheetsResponse"> & {
  /**
   * @generated from field: repeated bytebase.v1.Sheet sheets = 1;
   */
  sheets: Sheet[];
};

/**
 * Describes the message bytebase.v1.BatchCreateSheetsResponse.
 * Use `create(BatchCreateSheetsResponseSchema)` to create a new message.
 */
export declare const BatchCreateSheetsResponseSchema: GenMessage<BatchCreateSheetsResponse>;

/**
 * @generated from message bytebase.v1.GetSheetRequest
 */
export declare type GetSheetRequest = Message<"bytebase.v1.GetSheetRequest"> & {
  /**
   * The name of the sheet to retrieve.
   * Format: projects/{project}/sheets/{sheet}
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * By default, the content of the sheet is cut off, set the `raw` to true to retrieve the full content.
   *
   * @generated from field: bool raw = 2;
   */
  raw: boolean;
};

/**
 * Describes the message bytebase.v1.GetSheetRequest.
 * Use `create(GetSheetRequestSchema)` to create a new message.
 */
export declare const GetSheetRequestSchema: GenMessage<GetSheetRequest>;

/**
 * @generated from message bytebase.v1.UpdateSheetRequest
 */
export declare type UpdateSheetRequest = Message<"bytebase.v1.UpdateSheetRequest"> & {
  /**
   * The sheet to update.
   *
   * The sheet's `name` field is used to identify the sheet to update.
   * Format: projects/{project}/sheets/{sheet}
   *
   * @generated from field: bytebase.v1.Sheet sheet = 1;
   */
  sheet?: Sheet;

  /**
   * The list of fields to be updated.
   * Fields are specified relative to the sheet.
   * (e.g. `title`, `statement`; *not* `sheet.title` or `sheet.statement`)
   * Only support update the following fields for now:
   * - `title`
   * - `statement`
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;
};

/**
 * Describes the message bytebase.v1.UpdateSheetRequest.
 * Use `create(UpdateSheetRequestSchema)` to create a new message.
 */
export declare const UpdateSheetRequestSchema: GenMessage<UpdateSheetRequest>;

/**
 * @generated from message bytebase.v1.Sheet
 */
export declare type Sheet = Message<"bytebase.v1.Sheet"> & {
  /**
   * The name of the sheet resource, generated by the server.
   * Canonical parent is project.
   * Format: projects/{project}/sheets/{sheet}
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The title of the sheet.
   *
   * @generated from field: string title = 3;
   */
  title: string;

  /**
   * The creator of the Sheet.
   * Format: users/{email}
   *
   * @generated from field: string creator = 4;
   */
  creator: string;

  /**
   * The create time of the sheet.
   *
   * @generated from field: google.protobuf.Timestamp create_time = 5;
   */
  createTime?: Timestamp;

  /**
   * The content of the sheet.
   * By default, it will be cut off, if it doesn't match the `content_size`, you can
   * set the `raw` to true in GetSheet request to retrieve the full content.
   *
   * @generated from field: bytes content = 7;
   */
  content: Uint8Array;

  /**
   * content_size is the full size of the content, may not match the size of the `content` field.
   *
   * @generated from field: int64 content_size = 8;
   */
  contentSize: bigint;

  /**
   * @generated from field: bytebase.v1.SheetPayload payload = 13;
   */
  payload?: SheetPayload;

  /**
   * The SQL dialect.
   *
   * @generated from field: bytebase.v1.Engine engine = 14;
   */
  engine: Engine;
};

/**
 * Describes the message bytebase.v1.Sheet.
 * Use `create(SheetSchema)` to create a new message.
 */
export declare const SheetSchema: GenMessage<Sheet>;

/**
 * @generated from message bytebase.v1.SheetPayload
 */
export declare type SheetPayload = Message<"bytebase.v1.SheetPayload"> & {
  /**
   * @generated from field: bytebase.v1.SheetPayload.Type type = 1;
   */
  type: SheetPayload_Type;

  /**
   * The start and end position of each command in the sheet statement.
   *
   * @generated from field: repeated bytebase.v1.SheetCommand commands = 4;
   */
  commands: SheetCommand[];
};

/**
 * Describes the message bytebase.v1.SheetPayload.
 * Use `create(SheetPayloadSchema)` to create a new message.
 */
export declare const SheetPayloadSchema: GenMessage<SheetPayload>;

/**
 * Type of the SheetPayload.
 *
 * @generated from enum bytebase.v1.SheetPayload.Type
 */
export enum SheetPayload_Type {
  /**
   * @generated from enum value: TYPE_UNSPECIFIED = 0;
   */
  TYPE_UNSPECIFIED = 0,

  /**
   * @generated from enum value: SCHEMA_DESIGN = 1;
   */
  SCHEMA_DESIGN = 1,
}

/**
 * Describes the enum bytebase.v1.SheetPayload.Type.
 */
export declare const SheetPayload_TypeSchema: GenEnum<SheetPayload_Type>;

/**
 * @generated from message bytebase.v1.SheetCommand
 */
export declare type SheetCommand = Message<"bytebase.v1.SheetCommand"> & {
  /**
   * @generated from field: int32 start = 1;
   */
  start: number;

  /**
   * @generated from field: int32 end = 2;
   */
  end: number;
};

/**
 * Describes the message bytebase.v1.SheetCommand.
 * Use `create(SheetCommandSchema)` to create a new message.
 */
export declare const SheetCommandSchema: GenMessage<SheetCommand>;

/**
 * @generated from service bytebase.v1.SheetService
 */
export declare const SheetService: GenService<{
  /**
   * @generated from rpc bytebase.v1.SheetService.CreateSheet
   */
  createSheet: {
    methodKind: "unary";
    input: typeof CreateSheetRequestSchema;
    output: typeof SheetSchema;
  },
  /**
   * @generated from rpc bytebase.v1.SheetService.BatchCreateSheets
   */
  batchCreateSheets: {
    methodKind: "unary";
    input: typeof BatchCreateSheetsRequestSchema;
    output: typeof BatchCreateSheetsResponseSchema;
  },
  /**
   * @generated from rpc bytebase.v1.SheetService.GetSheet
   */
  getSheet: {
    methodKind: "unary";
    input: typeof GetSheetRequestSchema;
    output: typeof SheetSchema;
  },
  /**
   * @generated from rpc bytebase.v1.SheetService.UpdateSheet
   */
  updateSheet: {
    methodKind: "unary";
    input: typeof UpdateSheetRequestSchema;
    output: typeof SheetSchema;
  },
}>;

