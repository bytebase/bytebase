// @generated by protoc-gen-es v2.5.2
// @generated from file v1/rollout_service.proto (package bytebase.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import type { Plan } from "./plan_service_pb";
import type { DatabaseChangeType, ExportFormat, MigrationType, Position } from "./common_pb";

/**
 * Describes the file v1/rollout_service.proto.
 */
export declare const file_v1_rollout_service: GenFile;

/**
 * @generated from message bytebase.v1.BatchRunTasksRequest
 */
export declare type BatchRunTasksRequest = Message<"bytebase.v1.BatchRunTasksRequest"> & {
  /**
   * The name of the parent of the tasks.
   * Format: projects/{project}/rollouts/{rollout}/stages/{stage}
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * The tasks to run.
   * Format: projects/{project}/rollouts/{rollout}/stages/{stage}/tasks/{task}
   *
   * @generated from field: repeated string tasks = 2;
   */
  tasks: string[];

  /**
   * The reason for running the tasks.
   *
   * @generated from field: string reason = 3;
   */
  reason: string;

  /**
   * The task run should run after run_time.
   *
   * @generated from field: optional google.protobuf.Timestamp run_time = 4;
   */
  runTime?: Timestamp;
};

/**
 * Describes the message bytebase.v1.BatchRunTasksRequest.
 * Use `create(BatchRunTasksRequestSchema)` to create a new message.
 */
export declare const BatchRunTasksRequestSchema: GenMessage<BatchRunTasksRequest>;

/**
 * @generated from message bytebase.v1.BatchRunTasksResponse
 */
export declare type BatchRunTasksResponse = Message<"bytebase.v1.BatchRunTasksResponse"> & {
};

/**
 * Describes the message bytebase.v1.BatchRunTasksResponse.
 * Use `create(BatchRunTasksResponseSchema)` to create a new message.
 */
export declare const BatchRunTasksResponseSchema: GenMessage<BatchRunTasksResponse>;

/**
 * @generated from message bytebase.v1.BatchSkipTasksRequest
 */
export declare type BatchSkipTasksRequest = Message<"bytebase.v1.BatchSkipTasksRequest"> & {
  /**
   * The name of the parent of the tasks.
   * Format: projects/{project}/rollouts/{rollout}/stages/{stage}
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * The tasks to skip.
   * Format: projects/{project}/rollouts/{rollout}/stages/{stage}/tasks/{task}
   *
   * @generated from field: repeated string tasks = 2;
   */
  tasks: string[];

  /**
   * The reason for skipping the tasks.
   *
   * @generated from field: string reason = 3;
   */
  reason: string;
};

/**
 * Describes the message bytebase.v1.BatchSkipTasksRequest.
 * Use `create(BatchSkipTasksRequestSchema)` to create a new message.
 */
export declare const BatchSkipTasksRequestSchema: GenMessage<BatchSkipTasksRequest>;

/**
 * @generated from message bytebase.v1.BatchSkipTasksResponse
 */
export declare type BatchSkipTasksResponse = Message<"bytebase.v1.BatchSkipTasksResponse"> & {
};

/**
 * Describes the message bytebase.v1.BatchSkipTasksResponse.
 * Use `create(BatchSkipTasksResponseSchema)` to create a new message.
 */
export declare const BatchSkipTasksResponseSchema: GenMessage<BatchSkipTasksResponse>;

/**
 * @generated from message bytebase.v1.BatchCancelTaskRunsRequest
 */
export declare type BatchCancelTaskRunsRequest = Message<"bytebase.v1.BatchCancelTaskRunsRequest"> & {
  /**
   * The name of the parent of the taskRuns.
   * Format: projects/{project}/rollouts/{rollout}/stages/{stage}/tasks/{task}
   * Use `projects/{project}/rollouts/{rollout}/stages/{stage}/tasks/-` to cancel task runs under the same stage.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * The taskRuns to cancel.
   * Format: projects/{project}/rollouts/{rollout}/stages/{stage}/tasks/{task}/taskRuns/{taskRun}
   *
   * @generated from field: repeated string task_runs = 2;
   */
  taskRuns: string[];

  /**
   * The reason for canceling the task runs.
   *
   * @generated from field: string reason = 3;
   */
  reason: string;
};

/**
 * Describes the message bytebase.v1.BatchCancelTaskRunsRequest.
 * Use `create(BatchCancelTaskRunsRequestSchema)` to create a new message.
 */
export declare const BatchCancelTaskRunsRequestSchema: GenMessage<BatchCancelTaskRunsRequest>;

/**
 * @generated from message bytebase.v1.BatchCancelTaskRunsResponse
 */
export declare type BatchCancelTaskRunsResponse = Message<"bytebase.v1.BatchCancelTaskRunsResponse"> & {
};

/**
 * Describes the message bytebase.v1.BatchCancelTaskRunsResponse.
 * Use `create(BatchCancelTaskRunsResponseSchema)` to create a new message.
 */
export declare const BatchCancelTaskRunsResponseSchema: GenMessage<BatchCancelTaskRunsResponse>;

/**
 * @generated from message bytebase.v1.GetRolloutRequest
 */
export declare type GetRolloutRequest = Message<"bytebase.v1.GetRolloutRequest"> & {
  /**
   * The name of the rollout to retrieve.
   * Format: projects/{project}/rollouts/{rollout}
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message bytebase.v1.GetRolloutRequest.
 * Use `create(GetRolloutRequestSchema)` to create a new message.
 */
export declare const GetRolloutRequestSchema: GenMessage<GetRolloutRequest>;

/**
 * @generated from message bytebase.v1.ListRolloutsRequest
 */
export declare type ListRolloutsRequest = Message<"bytebase.v1.ListRolloutsRequest"> & {
  /**
   * The parent, which owns this collection of rollouts.
   * Format: projects/{project}
   * Use "projects/-" to list all rollouts from all projects.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * The maximum number of rollouts to return. The service may return fewer than
   * this value.
   * If unspecified, at most 10 rollouts will be returned.
   * The maximum value is 1000; values above 1000 will be coerced to 1000.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * A page token, received from a previous `ListRollouts` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListRollouts` must match
   * the call that provided the page token.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;

  /**
   * Filter is used to filter rollouts returned in the list.
   * The syntax and semantics of CEL are documented at https://github.com/google/cel-spec
   *
   * Supported filters:
   * - creator: the rollout creator full name in "users/{email or id}" format, support "==" operator.
   * - update_time: rollout update time in "2006-01-02T15:04:05Z07:00" format, support ">=" or "<=" operator.
   * - task_type: the task type, support "==" and "in" operators, check the Task.Type enum for the values.
   *
   * For example:
   * creator == "users/ed@bytebase.com" && update_time >= "2025-01-02T15:04:05Z07:00"
   * task_type == "DATABASE_MIGRATE"
   * task_type in ["DATABASE_MIGRATE", "DATABASE_EXPORT"]
   *
   * @generated from field: string filter = 4;
   */
  filter: string;
};

/**
 * Describes the message bytebase.v1.ListRolloutsRequest.
 * Use `create(ListRolloutsRequestSchema)` to create a new message.
 */
export declare const ListRolloutsRequestSchema: GenMessage<ListRolloutsRequest>;

/**
 * @generated from message bytebase.v1.ListRolloutsResponse
 */
export declare type ListRolloutsResponse = Message<"bytebase.v1.ListRolloutsResponse"> & {
  /**
   * The rollouts from the specified request.
   *
   * @generated from field: repeated bytebase.v1.Rollout rollouts = 1;
   */
  rollouts: Rollout[];

  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message bytebase.v1.ListRolloutsResponse.
 * Use `create(ListRolloutsResponseSchema)` to create a new message.
 */
export declare const ListRolloutsResponseSchema: GenMessage<ListRolloutsResponse>;

/**
 * @generated from message bytebase.v1.CreateRolloutRequest
 */
export declare type CreateRolloutRequest = Message<"bytebase.v1.CreateRolloutRequest"> & {
  /**
   * The parent project where this rollout will be created.
   * Format: projects/{project}
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * The rollout to create.
   *
   * @generated from field: bytebase.v1.Rollout rollout = 2;
   */
  rollout?: Rollout;

  /**
   * Create the rollout and the stages up to the target stage.
   * Format: environments/{environment}
   * If unspecified, all stages are created.
   * If set to "", no stages are created.
   *
   * @generated from field: optional string target = 3;
   */
  target?: string;

  /**
   * If set, validate the request and preview the rollout, but
   * do not actually create it.
   *
   * @generated from field: bool validate_only = 4;
   */
  validateOnly: boolean;
};

/**
 * Describes the message bytebase.v1.CreateRolloutRequest.
 * Use `create(CreateRolloutRequestSchema)` to create a new message.
 */
export declare const CreateRolloutRequestSchema: GenMessage<CreateRolloutRequest>;

/**
 * @generated from message bytebase.v1.PreviewRolloutRequest
 */
export declare type PreviewRolloutRequest = Message<"bytebase.v1.PreviewRolloutRequest"> & {
  /**
   * The name of the project.
   * Format: projects/{project}
   *
   * @generated from field: string project = 1;
   */
  project: string;

  /**
   * The plan used to preview rollout.
   *
   * @generated from field: bytebase.v1.Plan plan = 2;
   */
  plan?: Plan;
};

/**
 * Describes the message bytebase.v1.PreviewRolloutRequest.
 * Use `create(PreviewRolloutRequestSchema)` to create a new message.
 */
export declare const PreviewRolloutRequestSchema: GenMessage<PreviewRolloutRequest>;

/**
 * @generated from message bytebase.v1.ListTaskRunsRequest
 */
export declare type ListTaskRunsRequest = Message<"bytebase.v1.ListTaskRunsRequest"> & {
  /**
   * The parent, which owns this collection of plans.
   * Format: projects/{project}/rollouts/{rollout}/stages/{stage}/tasks/{task}
   * Use "projects/{project}/rollouts/{rollout}/stages/-/tasks/-" to list all taskRuns from a rollout.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;
};

/**
 * Describes the message bytebase.v1.ListTaskRunsRequest.
 * Use `create(ListTaskRunsRequestSchema)` to create a new message.
 */
export declare const ListTaskRunsRequestSchema: GenMessage<ListTaskRunsRequest>;

/**
 * @generated from message bytebase.v1.ListTaskRunsResponse
 */
export declare type ListTaskRunsResponse = Message<"bytebase.v1.ListTaskRunsResponse"> & {
  /**
   * The taskRuns from the specified request.
   *
   * @generated from field: repeated bytebase.v1.TaskRun task_runs = 1;
   */
  taskRuns: TaskRun[];
};

/**
 * Describes the message bytebase.v1.ListTaskRunsResponse.
 * Use `create(ListTaskRunsResponseSchema)` to create a new message.
 */
export declare const ListTaskRunsResponseSchema: GenMessage<ListTaskRunsResponse>;

/**
 * @generated from message bytebase.v1.GetTaskRunRequest
 */
export declare type GetTaskRunRequest = Message<"bytebase.v1.GetTaskRunRequest"> & {
  /**
   * Format: projects/{project}/rollouts/{rollout}/stages/{stage}/tasks/{task}/taskRuns/{taskRun}
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message bytebase.v1.GetTaskRunRequest.
 * Use `create(GetTaskRunRequestSchema)` to create a new message.
 */
export declare const GetTaskRunRequestSchema: GenMessage<GetTaskRunRequest>;

/**
 * @generated from message bytebase.v1.GetTaskRunLogRequest
 */
export declare type GetTaskRunLogRequest = Message<"bytebase.v1.GetTaskRunLogRequest"> & {
  /**
   * Format: projects/{project}/rollouts/{rollout}/stages/{stage}/tasks/{task}/taskRuns/{taskRun}
   * TODO(d): check the resource_reference.
   *
   * @generated from field: string parent = 1;
   */
  parent: string;
};

/**
 * Describes the message bytebase.v1.GetTaskRunLogRequest.
 * Use `create(GetTaskRunLogRequestSchema)` to create a new message.
 */
export declare const GetTaskRunLogRequestSchema: GenMessage<GetTaskRunLogRequest>;

/**
 * @generated from message bytebase.v1.Rollout
 */
export declare type Rollout = Message<"bytebase.v1.Rollout"> & {
  /**
   * The resource name of the rollout.
   * Format: projects/{project}/rollouts/{rollout}
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The plan that this rollout is based on.
   * Format: projects/{project}/plans/{plan}
   *
   * @generated from field: string plan = 3;
   */
  plan: string;

  /**
   * The title of the rollout, inherited from the associated plan.
   * This field is output only and cannot be directly set.
   *
   * @generated from field: string title = 4;
   */
  title: string;

  /**
   * Stages and thus tasks of the rollout.
   *
   * @generated from field: repeated bytebase.v1.Stage stages = 5;
   */
  stages: Stage[];

  /**
   * Format: users/hello@world.com
   *
   * @generated from field: string creator = 6;
   */
  creator: string;

  /**
   * @generated from field: google.protobuf.Timestamp create_time = 7;
   */
  createTime?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp update_time = 8;
   */
  updateTime?: Timestamp;

  /**
   * The issue associated with the rollout. Could be empty.
   * Format: projects/{project}/issues/{issue}
   *
   * @generated from field: string issue = 9;
   */
  issue: string;
};

/**
 * Describes the message bytebase.v1.Rollout.
 * Use `create(RolloutSchema)` to create a new message.
 */
export declare const RolloutSchema: GenMessage<Rollout>;

/**
 * @generated from message bytebase.v1.Stage
 */
export declare type Stage = Message<"bytebase.v1.Stage"> & {
  /**
   * Format: projects/{project}/rollouts/{rollout}/stages/{stage}
   * Use "-" for {stage} when the stage has no environment or deleted environment.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * id is the environment id of the stage.
   * e.g., "prod".
   * Use "-" when the stage has no environment or deleted environment.
   *
   * @generated from field: string id = 3;
   */
  id: string;

  /**
   * environment is the environment of the stage.
   * Format: environments/{environment} for valid environments, or "environments/-" for stages without environment or with deleted environments.
   *
   * @generated from field: string environment = 4;
   */
  environment: string;

  /**
   * The tasks within this stage.
   *
   * @generated from field: repeated bytebase.v1.Task tasks = 5;
   */
  tasks: Task[];
};

/**
 * Describes the message bytebase.v1.Stage.
 * Use `create(StageSchema)` to create a new message.
 */
export declare const StageSchema: GenMessage<Stage>;

/**
 * @generated from message bytebase.v1.Task
 */
export declare type Task = Message<"bytebase.v1.Task"> & {
  /**
   * Format: projects/{project}/rollouts/{rollout}/stages/{stage}/tasks/{task}
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * A UUID4 string that uniquely identifies the Spec.
   * Could be empty if the rollout of the task does not have an associating plan.
   *
   * @generated from field: string spec_id = 4;
   */
  specId: string;

  /**
   * Status is the status of the task.
   *
   * @generated from field: bytebase.v1.Task.Status status = 5;
   */
  status: Task_Status;

  /**
   * The reason why the task was skipped.
   *
   * @generated from field: string skipped_reason = 15;
   */
  skippedReason: string;

  /**
   * @generated from field: bytebase.v1.Task.Type type = 6;
   */
  type: Task_Type;

  /**
   * Format: instances/{instance} if the task is DatabaseCreate.
   * Format: instances/{instance}/databases/{database}
   *
   * @generated from field: string target = 8;
   */
  target: string;

  /**
   * @generated from oneof bytebase.v1.Task.payload
   */
  payload: {
    /**
     * @generated from field: bytebase.v1.Task.DatabaseCreate database_create = 9;
     */
    value: Task_DatabaseCreate;
    case: "databaseCreate";
  } | {
    /**
     * @generated from field: bytebase.v1.Task.DatabaseUpdate database_update = 11;
     */
    value: Task_DatabaseUpdate;
    case: "databaseUpdate";
  } | {
    /**
     * @generated from field: bytebase.v1.Task.DatabaseDataExport database_data_export = 16;
     */
    value: Task_DatabaseDataExport;
    case: "databaseDataExport";
  } | { case: undefined; value?: undefined };

  /**
   * The update_time is the update time of latest task run.
   * If there are no task runs, it will be empty.
   *
   * @generated from field: optional google.protobuf.Timestamp update_time = 13;
   */
  updateTime?: Timestamp;

  /**
   * The run_time is the scheduled run time of latest task run.
   * If there are no task runs or the task run is not scheduled, it will be empty.
   *
   * @generated from field: optional google.protobuf.Timestamp run_time = 21;
   */
  runTime?: Timestamp;
};

/**
 * Describes the message bytebase.v1.Task.
 * Use `create(TaskSchema)` to create a new message.
 */
export declare const TaskSchema: GenMessage<Task>;

/**
 * Payload for creating a new database.
 *
 * @generated from message bytebase.v1.Task.DatabaseCreate
 */
export declare type Task_DatabaseCreate = Message<"bytebase.v1.Task.DatabaseCreate"> & {
  /**
   * The project owning the database.
   * Format: projects/{project}
   *
   * @generated from field: string project = 1;
   */
  project: string;

  /**
   * Database name.
   *
   * @generated from field: string database = 2;
   */
  database: string;

  /**
   * Table name.
   *
   * @generated from field: string table = 3;
   */
  table: string;

  /**
   * Format: projects/{project}/sheets/{sheet}
   *
   * @generated from field: string sheet = 4;
   */
  sheet: string;

  /**
   * The character set for the database.
   *
   * @generated from field: string character_set = 5;
   */
  characterSet: string;

  /**
   * The collation for the database.
   *
   * @generated from field: string collation = 6;
   */
  collation: string;

  /**
   * The environment the database belongs to.
   *
   * @generated from field: string environment = 7;
   */
  environment: string;
};

/**
 * Describes the message bytebase.v1.Task.DatabaseCreate.
 * Use `create(Task_DatabaseCreateSchema)` to create a new message.
 */
export declare const Task_DatabaseCreateSchema: GenMessage<Task_DatabaseCreate>;

/**
 * Payload for updating a database schema.
 *
 * @generated from message bytebase.v1.Task.DatabaseUpdate
 */
export declare type Task_DatabaseUpdate = Message<"bytebase.v1.Task.DatabaseUpdate"> & {
  /**
   * Format: projects/{project}/sheets/{sheet}
   *
   * @generated from field: string sheet = 1;
   */
  sheet: string;

  /**
   * The target schema version after this update.
   *
   * @generated from field: string schema_version = 2;
   */
  schemaVersion: string;

  /**
   * The type of database change (MIGRATE or SDL).
   *
   * @generated from field: bytebase.v1.DatabaseChangeType database_change_type = 3;
   */
  databaseChangeType: DatabaseChangeType;

  /**
   * migration_type is only set when database_change_type is MIGRATE.
   *
   * @generated from field: bytebase.v1.MigrationType migration_type = 4;
   */
  migrationType: MigrationType;
};

/**
 * Describes the message bytebase.v1.Task.DatabaseUpdate.
 * Use `create(Task_DatabaseUpdateSchema)` to create a new message.
 */
export declare const Task_DatabaseUpdateSchema: GenMessage<Task_DatabaseUpdate>;

/**
 * Payload for exporting database data.
 *
 * @generated from message bytebase.v1.Task.DatabaseDataExport
 */
export declare type Task_DatabaseDataExport = Message<"bytebase.v1.Task.DatabaseDataExport"> & {
  /**
   * The resource name of the target.
   * Format: instances/{instance-id}/databases/{database-name}
   *
   * @generated from field: string target = 1;
   */
  target: string;

  /**
   * The resource name of the sheet.
   * Format: projects/{project}/sheets/{sheet}
   *
   * @generated from field: string sheet = 2;
   */
  sheet: string;

  /**
   * The format of the exported file.
   *
   * @generated from field: bytebase.v1.ExportFormat format = 3;
   */
  format: ExportFormat;

  /**
   * The zip password provided by users.
   * Leave it empty if no needs to encrypt the zip file.
   *
   * @generated from field: optional string password = 4;
   */
  password?: string;
};

/**
 * Describes the message bytebase.v1.Task.DatabaseDataExport.
 * Use `create(Task_DatabaseDataExportSchema)` to create a new message.
 */
export declare const Task_DatabaseDataExportSchema: GenMessage<Task_DatabaseDataExport>;

/**
 * @generated from enum bytebase.v1.Task.Status
 */
export enum Task_Status {
  /**
   * Unspecified status.
   *
   * @generated from enum value: STATUS_UNSPECIFIED = 0;
   */
  STATUS_UNSPECIFIED = 0,

  /**
   * Task has not started and is awaiting its turn in the deployment sequence.
   *
   * @generated from enum value: NOT_STARTED = 1;
   */
  NOT_STARTED = 1,

  /**
   * Task is ready to run and waiting for approval or scheduled time.
   *
   * @generated from enum value: PENDING = 2;
   */
  PENDING = 2,

  /**
   * Task is currently executing.
   *
   * @generated from enum value: RUNNING = 3;
   */
  RUNNING = 3,

  /**
   * Task completed successfully.
   *
   * @generated from enum value: DONE = 4;
   */
  DONE = 4,

  /**
   * Task execution failed with errors.
   *
   * @generated from enum value: FAILED = 5;
   */
  FAILED = 5,

  /**
   * Task execution was canceled by a user.
   *
   * @generated from enum value: CANCELED = 6;
   */
  CANCELED = 6,

  /**
   * Task was skipped and will not be executed.
   *
   * @generated from enum value: SKIPPED = 7;
   */
  SKIPPED = 7,
}

/**
 * Describes the enum bytebase.v1.Task.Status.
 */
export declare const Task_StatusSchema: GenEnum<Task_Status>;

/**
 * @generated from enum bytebase.v1.Task.Type
 */
export enum Task_Type {
  /**
   * Unspecified task type.
   *
   * @generated from enum value: TYPE_UNSPECIFIED = 0;
   */
  TYPE_UNSPECIFIED = 0,

  /**
   * General task for miscellaneous operations.
   *
   * @generated from enum value: GENERAL = 1;
   */
  GENERAL = 1,

  /**
   * Database creation task that creates a new database.
   * Use payload DatabaseCreate.
   *
   * @generated from enum value: DATABASE_CREATE = 2;
   */
  DATABASE_CREATE = 2,

  /**
   * Database migration task that applies versioned schema changes.
   * Use payload DatabaseUpdate.
   *
   * @generated from enum value: DATABASE_MIGRATE = 3;
   */
  DATABASE_MIGRATE = 3,

  /**
   * Database SDL (Schema Definition Language) task that synchronizes declarative schema.
   * Use payload DatabaseUpdate.
   *
   * @generated from enum value: DATABASE_SDL = 6;
   */
  DATABASE_SDL = 6,

  /**
   * Database export task that exports query results or table data.
   * Use payload DatabaseDataExport.
   *
   * @generated from enum value: DATABASE_EXPORT = 5;
   */
  DATABASE_EXPORT = 5,
}

/**
 * Describes the enum bytebase.v1.Task.Type.
 */
export declare const Task_TypeSchema: GenEnum<Task_Type>;

/**
 * @generated from message bytebase.v1.TaskRun
 */
export declare type TaskRun = Message<"bytebase.v1.TaskRun"> & {
  /**
   * Format: projects/{project}/rollouts/{rollout}/stages/{stage}/tasks/{task}/taskRuns/{taskRun}
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Format: users/hello@world.com
   *
   * @generated from field: string creator = 3;
   */
  creator: string;

  /**
   * @generated from field: google.protobuf.Timestamp create_time = 5;
   */
  createTime?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp update_time = 6;
   */
  updateTime?: Timestamp;

  /**
   * The current execution status of the task run.
   *
   * @generated from field: bytebase.v1.TaskRun.Status status = 8;
   */
  status: TaskRun_Status;

  /**
   * Below are the results of a task run.
   * Detailed information about the task run result.
   *
   * @generated from field: string detail = 9;
   */
  detail: string;

  /**
   * The resource name of the changelog.
   * Format: instances/{instance}/databases/{database}/changelogs/{changelog}
   *
   * @generated from field: string changelog = 20;
   */
  changelog: string;

  /**
   * The schema version after this task run completes.
   *
   * @generated from field: string schema_version = 11;
   */
  schemaVersion: string;

  /**
   * The time when the task run started execution.
   *
   * @generated from field: google.protobuf.Timestamp start_time = 14;
   */
  startTime?: Timestamp;

  /**
   * The export archive status for data export tasks.
   *
   * @generated from field: bytebase.v1.TaskRun.ExportArchiveStatus export_archive_status = 16;
   */
  exportArchiveStatus: TaskRun_ExportArchiveStatus;

  /**
   * The prior backup detail that will be used to rollback the task run.
   *
   * @generated from field: bytebase.v1.TaskRun.PriorBackupDetail prior_backup_detail = 17;
   */
  priorBackupDetail?: TaskRun_PriorBackupDetail;

  /**
   * Scheduling information about the task run.
   *
   * @generated from field: bytebase.v1.TaskRun.SchedulerInfo scheduler_info = 18;
   */
  schedulerInfo?: TaskRun_SchedulerInfo;

  /**
   * Format: projects/{project}/sheets/{sheet}
   *
   * @generated from field: string sheet = 19;
   */
  sheet: string;

  /**
   * The task run should run after run_time.
   * This can only be set when creating the task run calling BatchRunTasks.
   *
   * @generated from field: optional google.protobuf.Timestamp run_time = 21;
   */
  runTime?: Timestamp;
};

/**
 * Describes the message bytebase.v1.TaskRun.
 * Use `create(TaskRunSchema)` to create a new message.
 */
export declare const TaskRunSchema: GenMessage<TaskRun>;

/**
 * Prior backup detail for rollback purposes.
 *
 * @generated from message bytebase.v1.TaskRun.PriorBackupDetail
 */
export declare type TaskRun_PriorBackupDetail = Message<"bytebase.v1.TaskRun.PriorBackupDetail"> & {
  /**
   * The list of backed up tables.
   *
   * @generated from field: repeated bytebase.v1.TaskRun.PriorBackupDetail.Item items = 1;
   */
  items: TaskRun_PriorBackupDetail_Item[];
};

/**
 * Describes the message bytebase.v1.TaskRun.PriorBackupDetail.
 * Use `create(TaskRun_PriorBackupDetailSchema)` to create a new message.
 */
export declare const TaskRun_PriorBackupDetailSchema: GenMessage<TaskRun_PriorBackupDetail>;

/**
 * A single backup table mapping.
 *
 * @generated from message bytebase.v1.TaskRun.PriorBackupDetail.Item
 */
export declare type TaskRun_PriorBackupDetail_Item = Message<"bytebase.v1.TaskRun.PriorBackupDetail.Item"> & {
  /**
   * The original table information.
   *
   * @generated from field: bytebase.v1.TaskRun.PriorBackupDetail.Item.Table source_table = 1;
   */
  sourceTable?: TaskRun_PriorBackupDetail_Item_Table;

  /**
   * The target backup table information.
   *
   * @generated from field: bytebase.v1.TaskRun.PriorBackupDetail.Item.Table target_table = 2;
   */
  targetTable?: TaskRun_PriorBackupDetail_Item_Table;

  /**
   * The start position in the SQL statement.
   *
   * @generated from field: bytebase.v1.Position start_position = 3;
   */
  startPosition?: Position;

  /**
   * The end position in the SQL statement.
   *
   * @generated from field: bytebase.v1.Position end_position = 4;
   */
  endPosition?: Position;
};

/**
 * Describes the message bytebase.v1.TaskRun.PriorBackupDetail.Item.
 * Use `create(TaskRun_PriorBackupDetail_ItemSchema)` to create a new message.
 */
export declare const TaskRun_PriorBackupDetail_ItemSchema: GenMessage<TaskRun_PriorBackupDetail_Item>;

/**
 * Table information.
 *
 * @generated from message bytebase.v1.TaskRun.PriorBackupDetail.Item.Table
 */
export declare type TaskRun_PriorBackupDetail_Item_Table = Message<"bytebase.v1.TaskRun.PriorBackupDetail.Item.Table"> & {
  /**
   * The database information.
   * Format: instances/{instance}/databases/{database}
   *
   * @generated from field: string database = 1;
   */
  database: string;

  /**
   * The schema name.
   *
   * @generated from field: string schema = 2;
   */
  schema: string;

  /**
   * The table name.
   *
   * @generated from field: string table = 3;
   */
  table: string;
};

/**
 * Describes the message bytebase.v1.TaskRun.PriorBackupDetail.Item.Table.
 * Use `create(TaskRun_PriorBackupDetail_Item_TableSchema)` to create a new message.
 */
export declare const TaskRun_PriorBackupDetail_Item_TableSchema: GenMessage<TaskRun_PriorBackupDetail_Item_Table>;

/**
 * Information about task run scheduling.
 *
 * @generated from message bytebase.v1.TaskRun.SchedulerInfo
 */
export declare type TaskRun_SchedulerInfo = Message<"bytebase.v1.TaskRun.SchedulerInfo"> & {
  /**
   * The time when the scheduling info was reported.
   *
   * @generated from field: google.protobuf.Timestamp report_time = 1;
   */
  reportTime?: Timestamp;

  /**
   * The cause for the task run waiting.
   *
   * @generated from field: bytebase.v1.TaskRun.SchedulerInfo.WaitingCause waiting_cause = 2;
   */
  waitingCause?: TaskRun_SchedulerInfo_WaitingCause;
};

/**
 * Describes the message bytebase.v1.TaskRun.SchedulerInfo.
 * Use `create(TaskRun_SchedulerInfoSchema)` to create a new message.
 */
export declare const TaskRun_SchedulerInfoSchema: GenMessage<TaskRun_SchedulerInfo>;

/**
 * Information about why a task run is waiting.
 *
 * @generated from message bytebase.v1.TaskRun.SchedulerInfo.WaitingCause
 */
export declare type TaskRun_SchedulerInfo_WaitingCause = Message<"bytebase.v1.TaskRun.SchedulerInfo.WaitingCause"> & {
  /**
   * The reason the task run is waiting.
   *
   * @generated from oneof bytebase.v1.TaskRun.SchedulerInfo.WaitingCause.cause
   */
  cause: {
    /**
     * Waiting due to connection limit reached.
     *
     * @generated from field: bool connection_limit = 1;
     */
    value: boolean;
    case: "connectionLimit";
  } | {
    /**
     * Waiting for another task to complete.
     *
     * @generated from field: bytebase.v1.TaskRun.SchedulerInfo.WaitingCause.Task task = 2;
     */
    value: TaskRun_SchedulerInfo_WaitingCause_Task;
    case: "task";
  } | {
    /**
     * Waiting due to parallel tasks limit.
     *
     * @generated from field: bool parallel_tasks_limit = 3;
     */
    value: boolean;
    case: "parallelTasksLimit";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message bytebase.v1.TaskRun.SchedulerInfo.WaitingCause.
 * Use `create(TaskRun_SchedulerInfo_WaitingCauseSchema)` to create a new message.
 */
export declare const TaskRun_SchedulerInfo_WaitingCauseSchema: GenMessage<TaskRun_SchedulerInfo_WaitingCause>;

/**
 * Information about a blocking task.
 *
 * @generated from message bytebase.v1.TaskRun.SchedulerInfo.WaitingCause.Task
 */
export declare type TaskRun_SchedulerInfo_WaitingCause_Task = Message<"bytebase.v1.TaskRun.SchedulerInfo.WaitingCause.Task"> & {
  /**
   * Format: projects/{project}/rollouts/{rollout}/stages/{stage}/tasks/{task}
   *
   * @generated from field: string task = 1;
   */
  task: string;

  /**
   * Format: projects/{project}/issues/{issue}
   *
   * @generated from field: string issue = 2;
   */
  issue: string;
};

/**
 * Describes the message bytebase.v1.TaskRun.SchedulerInfo.WaitingCause.Task.
 * Use `create(TaskRun_SchedulerInfo_WaitingCause_TaskSchema)` to create a new message.
 */
export declare const TaskRun_SchedulerInfo_WaitingCause_TaskSchema: GenMessage<TaskRun_SchedulerInfo_WaitingCause_Task>;

/**
 * @generated from enum bytebase.v1.TaskRun.Status
 */
export enum TaskRun_Status {
  /**
   * Unspecified status.
   *
   * @generated from enum value: STATUS_UNSPECIFIED = 0;
   */
  STATUS_UNSPECIFIED = 0,

  /**
   * Task run is queued and waiting to start execution.
   *
   * @generated from enum value: PENDING = 1;
   */
  PENDING = 1,

  /**
   * Task run is currently executing.
   *
   * @generated from enum value: RUNNING = 2;
   */
  RUNNING = 2,

  /**
   * Task run completed successfully.
   *
   * @generated from enum value: DONE = 3;
   */
  DONE = 3,

  /**
   * Task run execution failed with errors.
   *
   * @generated from enum value: FAILED = 4;
   */
  FAILED = 4,

  /**
   * Task run execution was canceled by a user.
   *
   * @generated from enum value: CANCELED = 5;
   */
  CANCELED = 5,
}

/**
 * Describes the enum bytebase.v1.TaskRun.Status.
 */
export declare const TaskRun_StatusSchema: GenEnum<TaskRun_Status>;

/**
 * @generated from enum bytebase.v1.TaskRun.ExportArchiveStatus
 */
export enum TaskRun_ExportArchiveStatus {
  /**
   * Unspecified export archive status.
   *
   * @generated from enum value: EXPORT_ARCHIVE_STATUS_UNSPECIFIED = 0;
   */
  EXPORT_ARCHIVE_STATUS_UNSPECIFIED = 0,

  /**
   * Export archive is ready for download.
   *
   * @generated from enum value: READY = 1;
   */
  READY = 1,

  /**
   * Export archive has been downloaded by the user.
   *
   * @generated from enum value: EXPORTED = 2;
   */
  EXPORTED = 2,
}

/**
 * Describes the enum bytebase.v1.TaskRun.ExportArchiveStatus.
 */
export declare const TaskRun_ExportArchiveStatusSchema: GenEnum<TaskRun_ExportArchiveStatus>;

/**
 * @generated from message bytebase.v1.TaskRunLog
 */
export declare type TaskRunLog = Message<"bytebase.v1.TaskRunLog"> & {
  /**
   * Format: projects/{project}/rollouts/{rollout}/stages/{stage}/tasks/{task}/taskRuns/{taskRun}/log
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The log entries for this task run.
   *
   * @generated from field: repeated bytebase.v1.TaskRunLogEntry entries = 2;
   */
  entries: TaskRunLogEntry[];
};

/**
 * Describes the message bytebase.v1.TaskRunLog.
 * Use `create(TaskRunLogSchema)` to create a new message.
 */
export declare const TaskRunLogSchema: GenMessage<TaskRunLog>;

/**
 * @generated from message bytebase.v1.TaskRunLogEntry
 */
export declare type TaskRunLogEntry = Message<"bytebase.v1.TaskRunLogEntry"> & {
  /**
   * The type of this log entry.
   *
   * @generated from field: bytebase.v1.TaskRunLogEntry.Type type = 1;
   */
  type: TaskRunLogEntry_Type;

  /**
   * The time when the log was recorded.
   *
   * @generated from field: google.protobuf.Timestamp log_time = 6;
   */
  logTime?: Timestamp;

  /**
   * The deployment ID for this log entry.
   *
   * @generated from field: string deploy_id = 12;
   */
  deployId: string;

  /**
   * Schema dump details (if type is SCHEMA_DUMP).
   *
   * @generated from field: bytebase.v1.TaskRunLogEntry.SchemaDump schema_dump = 2;
   */
  schemaDump?: TaskRunLogEntry_SchemaDump;

  /**
   * Command execution details (if type is COMMAND_EXECUTE).
   *
   * @generated from field: bytebase.v1.TaskRunLogEntry.CommandExecute command_execute = 3;
   */
  commandExecute?: TaskRunLogEntry_CommandExecute;

  /**
   * Database sync details (if type is DATABASE_SYNC).
   *
   * @generated from field: bytebase.v1.TaskRunLogEntry.DatabaseSync database_sync = 4;
   */
  databaseSync?: TaskRunLogEntry_DatabaseSync;

  /**
   * Task run status update details (if type is TASK_RUN_STATUS_UPDATE).
   *
   * @generated from field: bytebase.v1.TaskRunLogEntry.TaskRunStatusUpdate task_run_status_update = 5;
   */
  taskRunStatusUpdate?: TaskRunLogEntry_TaskRunStatusUpdate;

  /**
   * Transaction control details (if type is TRANSACTION_CONTROL).
   *
   * @generated from field: bytebase.v1.TaskRunLogEntry.TransactionControl transaction_control = 7;
   */
  transactionControl?: TaskRunLogEntry_TransactionControl;

  /**
   * Prior backup details (if type is PRIOR_BACKUP).
   *
   * @generated from field: bytebase.v1.TaskRunLogEntry.PriorBackup prior_backup = 8;
   */
  priorBackup?: TaskRunLogEntry_PriorBackup;

  /**
   * Retry information details (if type is RETRY_INFO).
   *
   * @generated from field: bytebase.v1.TaskRunLogEntry.RetryInfo retry_info = 9;
   */
  retryInfo?: TaskRunLogEntry_RetryInfo;

  /**
   * Compute diff details (if type is COMPUTE_DIFF).
   *
   * @generated from field: bytebase.v1.TaskRunLogEntry.ComputeDiff compute_diff = 10;
   */
  computeDiff?: TaskRunLogEntry_ComputeDiff;
};

/**
 * Describes the message bytebase.v1.TaskRunLogEntry.
 * Use `create(TaskRunLogEntrySchema)` to create a new message.
 */
export declare const TaskRunLogEntrySchema: GenMessage<TaskRunLogEntry>;

/**
 * Schema dump operation details.
 *
 * @generated from message bytebase.v1.TaskRunLogEntry.SchemaDump
 */
export declare type TaskRunLogEntry_SchemaDump = Message<"bytebase.v1.TaskRunLogEntry.SchemaDump"> & {
  /**
   * When the schema dump started.
   *
   * @generated from field: google.protobuf.Timestamp start_time = 1;
   */
  startTime?: Timestamp;

  /**
   * When the schema dump ended.
   *
   * @generated from field: google.protobuf.Timestamp end_time = 2;
   */
  endTime?: Timestamp;

  /**
   * Error message if the schema dump failed.
   *
   * @generated from field: string error = 3;
   */
  error: string;
};

/**
 * Describes the message bytebase.v1.TaskRunLogEntry.SchemaDump.
 * Use `create(TaskRunLogEntry_SchemaDumpSchema)` to create a new message.
 */
export declare const TaskRunLogEntry_SchemaDumpSchema: GenMessage<TaskRunLogEntry_SchemaDump>;

/**
 * Command execution details.
 *
 * @generated from message bytebase.v1.TaskRunLogEntry.CommandExecute
 */
export declare type TaskRunLogEntry_CommandExecute = Message<"bytebase.v1.TaskRunLogEntry.CommandExecute"> & {
  /**
   * When the command was logged.
   *
   * @generated from field: google.protobuf.Timestamp log_time = 1;
   */
  logTime?: Timestamp;

  /**
   * Either `command_indexes` or `statement` is set.
   * The indexes of the executed commands.
   *
   * @generated from field: repeated int32 command_indexes = 2;
   */
  commandIndexes: number[];

  /**
   * The executed statement.
   *
   * @generated from field: string statement = 4;
   */
  statement: string;

  /**
   * The response from executing the command.
   *
   * @generated from field: bytebase.v1.TaskRunLogEntry.CommandExecute.CommandResponse response = 3;
   */
  response?: TaskRunLogEntry_CommandExecute_CommandResponse;
};

/**
 * Describes the message bytebase.v1.TaskRunLogEntry.CommandExecute.
 * Use `create(TaskRunLogEntry_CommandExecuteSchema)` to create a new message.
 */
export declare const TaskRunLogEntry_CommandExecuteSchema: GenMessage<TaskRunLogEntry_CommandExecute>;

/**
 * Command execution response.
 *
 * @generated from message bytebase.v1.TaskRunLogEntry.CommandExecute.CommandResponse
 */
export declare type TaskRunLogEntry_CommandExecute_CommandResponse = Message<"bytebase.v1.TaskRunLogEntry.CommandExecute.CommandResponse"> & {
  /**
   * When the response was logged.
   *
   * @generated from field: google.protobuf.Timestamp log_time = 1;
   */
  logTime?: Timestamp;

  /**
   * Error message if command execution failed.
   *
   * @generated from field: string error = 2;
   */
  error: string;

  /**
   * Total affected rows.
   *
   * @generated from field: int64 affected_rows = 3;
   */
  affectedRows: bigint;

  /**
   * `all_affected_rows` is the affected rows of each command.
   * `all_affected_rows` may be unavailable if the database driver doesn't support it. Caller should fallback to `affected_rows` in that case.
   *
   * @generated from field: repeated int64 all_affected_rows = 4;
   */
  allAffectedRows: bigint[];
};

/**
 * Describes the message bytebase.v1.TaskRunLogEntry.CommandExecute.CommandResponse.
 * Use `create(TaskRunLogEntry_CommandExecute_CommandResponseSchema)` to create a new message.
 */
export declare const TaskRunLogEntry_CommandExecute_CommandResponseSchema: GenMessage<TaskRunLogEntry_CommandExecute_CommandResponse>;

/**
 * Database synchronization details.
 *
 * @generated from message bytebase.v1.TaskRunLogEntry.DatabaseSync
 */
export declare type TaskRunLogEntry_DatabaseSync = Message<"bytebase.v1.TaskRunLogEntry.DatabaseSync"> & {
  /**
   * When the database sync started.
   *
   * @generated from field: google.protobuf.Timestamp start_time = 1;
   */
  startTime?: Timestamp;

  /**
   * When the database sync ended.
   *
   * @generated from field: google.protobuf.Timestamp end_time = 2;
   */
  endTime?: Timestamp;

  /**
   * Error message if sync failed.
   *
   * @generated from field: string error = 3;
   */
  error: string;
};

/**
 * Describes the message bytebase.v1.TaskRunLogEntry.DatabaseSync.
 * Use `create(TaskRunLogEntry_DatabaseSyncSchema)` to create a new message.
 */
export declare const TaskRunLogEntry_DatabaseSyncSchema: GenMessage<TaskRunLogEntry_DatabaseSync>;

/**
 * Task run status update details.
 *
 * @generated from message bytebase.v1.TaskRunLogEntry.TaskRunStatusUpdate
 */
export declare type TaskRunLogEntry_TaskRunStatusUpdate = Message<"bytebase.v1.TaskRunLogEntry.TaskRunStatusUpdate"> & {
  /**
   * The new status.
   *
   * @generated from field: bytebase.v1.TaskRunLogEntry.TaskRunStatusUpdate.Status status = 1;
   */
  status: TaskRunLogEntry_TaskRunStatusUpdate_Status;
};

/**
 * Describes the message bytebase.v1.TaskRunLogEntry.TaskRunStatusUpdate.
 * Use `create(TaskRunLogEntry_TaskRunStatusUpdateSchema)` to create a new message.
 */
export declare const TaskRunLogEntry_TaskRunStatusUpdateSchema: GenMessage<TaskRunLogEntry_TaskRunStatusUpdate>;

/**
 * Internal status for task run execution.
 *
 * @generated from enum bytebase.v1.TaskRunLogEntry.TaskRunStatusUpdate.Status
 */
export enum TaskRunLogEntry_TaskRunStatusUpdate_Status {
  /**
   * Unspecified status.
   *
   * @generated from enum value: STATUS_UNSPECIFIED = 0;
   */
  STATUS_UNSPECIFIED = 0,

  /**
   * The task run is ready to be executed by the scheduler.
   *
   * @generated from enum value: RUNNING_WAITING = 1;
   */
  RUNNING_WAITING = 1,

  /**
   * The task run is being executed by the scheduler.
   *
   * @generated from enum value: RUNNING_RUNNING = 2;
   */
  RUNNING_RUNNING = 2,
}

/**
 * Describes the enum bytebase.v1.TaskRunLogEntry.TaskRunStatusUpdate.Status.
 */
export declare const TaskRunLogEntry_TaskRunStatusUpdate_StatusSchema: GenEnum<TaskRunLogEntry_TaskRunStatusUpdate_Status>;

/**
 * Transaction control operation details.
 *
 * @generated from message bytebase.v1.TaskRunLogEntry.TransactionControl
 */
export declare type TaskRunLogEntry_TransactionControl = Message<"bytebase.v1.TaskRunLogEntry.TransactionControl"> & {
  /**
   * The type of transaction control.
   *
   * @generated from field: bytebase.v1.TaskRunLogEntry.TransactionControl.Type type = 1;
   */
  type: TaskRunLogEntry_TransactionControl_Type;

  /**
   * Error message if the operation failed.
   *
   * @generated from field: string error = 2;
   */
  error: string;
};

/**
 * Describes the message bytebase.v1.TaskRunLogEntry.TransactionControl.
 * Use `create(TaskRunLogEntry_TransactionControlSchema)` to create a new message.
 */
export declare const TaskRunLogEntry_TransactionControlSchema: GenMessage<TaskRunLogEntry_TransactionControl>;

/**
 * Transaction control type.
 *
 * @generated from enum bytebase.v1.TaskRunLogEntry.TransactionControl.Type
 */
export enum TaskRunLogEntry_TransactionControl_Type {
  /**
   * Unspecified type.
   *
   * @generated from enum value: TYPE_UNSPECIFIED = 0;
   */
  TYPE_UNSPECIFIED = 0,

  /**
   * Begin transaction.
   *
   * @generated from enum value: BEGIN = 1;
   */
  BEGIN = 1,

  /**
   * Commit transaction.
   *
   * @generated from enum value: COMMIT = 2;
   */
  COMMIT = 2,

  /**
   * Rollback transaction.
   *
   * @generated from enum value: ROLLBACK = 3;
   */
  ROLLBACK = 3,
}

/**
 * Describes the enum bytebase.v1.TaskRunLogEntry.TransactionControl.Type.
 */
export declare const TaskRunLogEntry_TransactionControl_TypeSchema: GenEnum<TaskRunLogEntry_TransactionControl_Type>;

/**
 * Prior backup operation details.
 *
 * @generated from message bytebase.v1.TaskRunLogEntry.PriorBackup
 */
export declare type TaskRunLogEntry_PriorBackup = Message<"bytebase.v1.TaskRunLogEntry.PriorBackup"> & {
  /**
   * When the backup started.
   *
   * @generated from field: google.protobuf.Timestamp start_time = 1;
   */
  startTime?: Timestamp;

  /**
   * When the backup ended.
   *
   * @generated from field: google.protobuf.Timestamp end_time = 2;
   */
  endTime?: Timestamp;

  /**
   * The backup details.
   *
   * @generated from field: bytebase.v1.TaskRun.PriorBackupDetail prior_backup_detail = 3;
   */
  priorBackupDetail?: TaskRun_PriorBackupDetail;

  /**
   * Error message if the backup failed.
   *
   * @generated from field: string error = 4;
   */
  error: string;
};

/**
 * Describes the message bytebase.v1.TaskRunLogEntry.PriorBackup.
 * Use `create(TaskRunLogEntry_PriorBackupSchema)` to create a new message.
 */
export declare const TaskRunLogEntry_PriorBackupSchema: GenMessage<TaskRunLogEntry_PriorBackup>;

/**
 * Retry information for failed operations.
 *
 * @generated from message bytebase.v1.TaskRunLogEntry.RetryInfo
 */
export declare type TaskRunLogEntry_RetryInfo = Message<"bytebase.v1.TaskRunLogEntry.RetryInfo"> & {
  /**
   * The error that triggered the retry.
   *
   * @generated from field: string error = 1;
   */
  error: string;

  /**
   * Current retry attempt number.
   *
   * @generated from field: int32 retry_count = 2;
   */
  retryCount: number;

  /**
   * Maximum number of retries allowed.
   *
   * @generated from field: int32 maximum_retries = 3;
   */
  maximumRetries: number;
};

/**
 * Describes the message bytebase.v1.TaskRunLogEntry.RetryInfo.
 * Use `create(TaskRunLogEntry_RetryInfoSchema)` to create a new message.
 */
export declare const TaskRunLogEntry_RetryInfoSchema: GenMessage<TaskRunLogEntry_RetryInfo>;

/**
 * Schema diff computation details.
 *
 * @generated from message bytebase.v1.TaskRunLogEntry.ComputeDiff
 */
export declare type TaskRunLogEntry_ComputeDiff = Message<"bytebase.v1.TaskRunLogEntry.ComputeDiff"> & {
  /**
   * When diff computation started.
   *
   * @generated from field: google.protobuf.Timestamp start_time = 1;
   */
  startTime?: Timestamp;

  /**
   * When diff computation ended.
   *
   * @generated from field: google.protobuf.Timestamp end_time = 2;
   */
  endTime?: Timestamp;

  /**
   * Error message if computation failed.
   *
   * @generated from field: string error = 3;
   */
  error: string;
};

/**
 * Describes the message bytebase.v1.TaskRunLogEntry.ComputeDiff.
 * Use `create(TaskRunLogEntry_ComputeDiffSchema)` to create a new message.
 */
export declare const TaskRunLogEntry_ComputeDiffSchema: GenMessage<TaskRunLogEntry_ComputeDiff>;

/**
 * The type of log entry.
 *
 * @generated from enum bytebase.v1.TaskRunLogEntry.Type
 */
export enum TaskRunLogEntry_Type {
  /**
   * Unspecified type.
   *
   * @generated from enum value: TYPE_UNSPECIFIED = 0;
   */
  TYPE_UNSPECIFIED = 0,

  /**
   * Schema dump operation.
   *
   * @generated from enum value: SCHEMA_DUMP = 1;
   */
  SCHEMA_DUMP = 1,

  /**
   * Command execution.
   *
   * @generated from enum value: COMMAND_EXECUTE = 2;
   */
  COMMAND_EXECUTE = 2,

  /**
   * Database synchronization.
   *
   * @generated from enum value: DATABASE_SYNC = 3;
   */
  DATABASE_SYNC = 3,

  /**
   * Task run status update.
   *
   * @generated from enum value: TASK_RUN_STATUS_UPDATE = 4;
   */
  TASK_RUN_STATUS_UPDATE = 4,

  /**
   * Transaction control (BEGIN, COMMIT, ROLLBACK).
   *
   * @generated from enum value: TRANSACTION_CONTROL = 5;
   */
  TRANSACTION_CONTROL = 5,

  /**
   * Prior backup operation.
   *
   * @generated from enum value: PRIOR_BACKUP = 6;
   */
  PRIOR_BACKUP = 6,

  /**
   * Retry information.
   *
   * @generated from enum value: RETRY_INFO = 7;
   */
  RETRY_INFO = 7,

  /**
   * Schema diff computation.
   *
   * @generated from enum value: COMPUTE_DIFF = 8;
   */
  COMPUTE_DIFF = 8,
}

/**
 * Describes the enum bytebase.v1.TaskRunLogEntry.Type.
 */
export declare const TaskRunLogEntry_TypeSchema: GenEnum<TaskRunLogEntry_Type>;

/**
 * @generated from message bytebase.v1.GetTaskRunSessionRequest
 */
export declare type GetTaskRunSessionRequest = Message<"bytebase.v1.GetTaskRunSessionRequest"> & {
  /**
   * Format: projects/{project}/rollouts/{rollout}/stages/{stage}/tasks/{task}/taskRuns/{taskRun}
   *
   * @generated from field: string parent = 1;
   */
  parent: string;
};

/**
 * Describes the message bytebase.v1.GetTaskRunSessionRequest.
 * Use `create(GetTaskRunSessionRequestSchema)` to create a new message.
 */
export declare const GetTaskRunSessionRequestSchema: GenMessage<GetTaskRunSessionRequest>;

/**
 * @generated from message bytebase.v1.TaskRunSession
 */
export declare type TaskRunSession = Message<"bytebase.v1.TaskRunSession"> & {
  /**
   * Format: projects/{project}/rollouts/{rollout}/stages/{stage}/tasks/{task}/taskRuns/{taskRun}/session
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Database-specific session information.
   *
   * @generated from oneof bytebase.v1.TaskRunSession.session
   */
  session: {
    /**
     * PostgreSQL session information.
     *
     * @generated from field: bytebase.v1.TaskRunSession.Postgres postgres = 2;
     */
    value: TaskRunSession_Postgres;
    case: "postgres";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message bytebase.v1.TaskRunSession.
 * Use `create(TaskRunSessionSchema)` to create a new message.
 */
export declare const TaskRunSessionSchema: GenMessage<TaskRunSession>;

/**
 * PostgreSQL session information.
 *
 * @generated from message bytebase.v1.TaskRunSession.Postgres
 */
export declare type TaskRunSession_Postgres = Message<"bytebase.v1.TaskRunSession.Postgres"> & {
  /**
   * `session` is the session of the task run executing commands.
   *
   * @generated from field: bytebase.v1.TaskRunSession.Postgres.Session session = 1;
   */
  session?: TaskRunSession_Postgres_Session;

  /**
   * `blocking_sessions` block `session`.
   *
   * @generated from field: repeated bytebase.v1.TaskRunSession.Postgres.Session blocking_sessions = 2;
   */
  blockingSessions: TaskRunSession_Postgres_Session[];

  /**
   * `blocked_sessions` are blocked by `session`.
   *
   * @generated from field: repeated bytebase.v1.TaskRunSession.Postgres.Session blocked_sessions = 3;
   */
  blockedSessions: TaskRunSession_Postgres_Session[];
};

/**
 * Describes the message bytebase.v1.TaskRunSession.Postgres.
 * Use `create(TaskRunSession_PostgresSchema)` to create a new message.
 */
export declare const TaskRunSession_PostgresSchema: GenMessage<TaskRunSession_Postgres>;

/**
 * PostgreSQL session information read from `pg_stat_activity`.
 *
 * @generated from message bytebase.v1.TaskRunSession.Postgres.Session
 */
export declare type TaskRunSession_Postgres_Session = Message<"bytebase.v1.TaskRunSession.Postgres.Session"> & {
  /**
   * Process ID of the session.
   *
   * @generated from field: string pid = 1;
   */
  pid: string;

  /**
   * PIDs of sessions blocking this session.
   *
   * @generated from field: repeated string blocked_by_pids = 2;
   */
  blockedByPids: string[];

  /**
   * Current query being executed.
   *
   * @generated from field: string query = 3;
   */
  query: string;

  /**
   * Session state (active, idle, etc.).
   *
   * @generated from field: optional string state = 4;
   */
  state?: string;

  /**
   * Wait event type if session is waiting.
   *
   * @generated from field: optional string wait_event_type = 5;
   */
  waitEventType?: string;

  /**
   * Specific wait event if session is waiting.
   *
   * @generated from field: optional string wait_event = 6;
   */
  waitEvent?: string;

  /**
   * Database name.
   *
   * @generated from field: optional string datname = 7;
   */
  datname?: string;

  /**
   * User name.
   *
   * @generated from field: optional string usename = 8;
   */
  usename?: string;

  /**
   * Application name.
   *
   * @generated from field: string application_name = 9;
   */
  applicationName: string;

  /**
   * Client IP address.
   *
   * @generated from field: optional string client_addr = 10;
   */
  clientAddr?: string;

  /**
   * Client port number.
   *
   * @generated from field: optional string client_port = 11;
   */
  clientPort?: string;

  /**
   * When the backend process started.
   *
   * @generated from field: google.protobuf.Timestamp backend_start = 12;
   */
  backendStart?: Timestamp;

  /**
   * When the current transaction started.
   *
   * @generated from field: optional google.protobuf.Timestamp xact_start = 13;
   */
  xactStart?: Timestamp;

  /**
   * When the current query started.
   *
   * @generated from field: optional google.protobuf.Timestamp query_start = 14;
   */
  queryStart?: Timestamp;
};

/**
 * Describes the message bytebase.v1.TaskRunSession.Postgres.Session.
 * Use `create(TaskRunSession_Postgres_SessionSchema)` to create a new message.
 */
export declare const TaskRunSession_Postgres_SessionSchema: GenMessage<TaskRunSession_Postgres_Session>;

/**
 * @generated from message bytebase.v1.PreviewTaskRunRollbackRequest
 */
export declare type PreviewTaskRunRollbackRequest = Message<"bytebase.v1.PreviewTaskRunRollbackRequest"> & {
  /**
   * Format: projects/{project}/rollouts/{rollout}/stages/{stage}/tasks/{task}/taskRuns/{taskRun}
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message bytebase.v1.PreviewTaskRunRollbackRequest.
 * Use `create(PreviewTaskRunRollbackRequestSchema)` to create a new message.
 */
export declare const PreviewTaskRunRollbackRequestSchema: GenMessage<PreviewTaskRunRollbackRequest>;

/**
 * @generated from message bytebase.v1.PreviewTaskRunRollbackResponse
 */
export declare type PreviewTaskRunRollbackResponse = Message<"bytebase.v1.PreviewTaskRunRollbackResponse"> & {
  /**
   * The rollback SQL statement that would undo the task run.
   *
   * @generated from field: string statement = 1;
   */
  statement: string;
};

/**
 * Describes the message bytebase.v1.PreviewTaskRunRollbackResponse.
 * Use `create(PreviewTaskRunRollbackResponseSchema)` to create a new message.
 */
export declare const PreviewTaskRunRollbackResponseSchema: GenMessage<PreviewTaskRunRollbackResponse>;

/**
 * RolloutService manages the execution of deployment plans.
 *
 * @generated from service bytebase.v1.RolloutService
 */
export declare const RolloutService: GenService<{
  /**
   * Retrieves a rollout by name.
   * Permissions required: bb.rollouts.get
   *
   * @generated from rpc bytebase.v1.RolloutService.GetRollout
   */
  getRollout: {
    methodKind: "unary";
    input: typeof GetRolloutRequestSchema;
    output: typeof RolloutSchema;
  },
  /**
   * Lists rollouts in a project.
   * Permissions required: bb.rollouts.list
   *
   * @generated from rpc bytebase.v1.RolloutService.ListRollouts
   */
  listRollouts: {
    methodKind: "unary";
    input: typeof ListRolloutsRequestSchema;
    output: typeof ListRolloutsResponseSchema;
  },
  /**
   * Creates a new rollout from a plan.
   * Permissions required: bb.rollouts.create
   *
   * @generated from rpc bytebase.v1.RolloutService.CreateRollout
   */
  createRollout: {
    methodKind: "unary";
    input: typeof CreateRolloutRequestSchema;
    output: typeof RolloutSchema;
  },
  /**
   * Previews the rollout that would be created from a plan.
   * Permissions required: bb.rollouts.preview
   *
   * @generated from rpc bytebase.v1.RolloutService.PreviewRollout
   */
  previewRollout: {
    methodKind: "unary";
    input: typeof PreviewRolloutRequestSchema;
    output: typeof RolloutSchema;
  },
  /**
   * Lists task run executions for a task.
   * Permissions required: bb.taskRuns.list
   *
   * @generated from rpc bytebase.v1.RolloutService.ListTaskRuns
   */
  listTaskRuns: {
    methodKind: "unary";
    input: typeof ListTaskRunsRequestSchema;
    output: typeof ListTaskRunsResponseSchema;
  },
  /**
   * Retrieves a task run by name.
   * Permissions required: bb.taskRuns.list
   *
   * @generated from rpc bytebase.v1.RolloutService.GetTaskRun
   */
  getTaskRun: {
    methodKind: "unary";
    input: typeof GetTaskRunRequestSchema;
    output: typeof TaskRunSchema;
  },
  /**
   * Retrieves execution logs for a task run.
   * Permissions required: bb.taskRuns.list
   *
   * @generated from rpc bytebase.v1.RolloutService.GetTaskRunLog
   */
  getTaskRunLog: {
    methodKind: "unary";
    input: typeof GetTaskRunLogRequestSchema;
    output: typeof TaskRunLogSchema;
  },
  /**
   * Retrieves database session information for a running task.
   * Permissions required: bb.taskRuns.list
   *
   * @generated from rpc bytebase.v1.RolloutService.GetTaskRunSession
   */
  getTaskRunSession: {
    methodKind: "unary";
    input: typeof GetTaskRunSessionRequestSchema;
    output: typeof TaskRunSessionSchema;
  },
  /**
   * Executes multiple tasks in a rollout stage.
   * Permissions required: bb.taskRuns.create (or issue creator for data export issues, or user with rollout policy role for the environment)
   *
   * @generated from rpc bytebase.v1.RolloutService.BatchRunTasks
   */
  batchRunTasks: {
    methodKind: "unary";
    input: typeof BatchRunTasksRequestSchema;
    output: typeof BatchRunTasksResponseSchema;
  },
  /**
   * Skips multiple tasks in a rollout stage.
   * Permissions required: bb.taskRuns.create (or issue creator for data export issues, or user with rollout policy role for the environment)
   *
   * @generated from rpc bytebase.v1.RolloutService.BatchSkipTasks
   */
  batchSkipTasks: {
    methodKind: "unary";
    input: typeof BatchSkipTasksRequestSchema;
    output: typeof BatchSkipTasksResponseSchema;
  },
  /**
   * Cancels multiple running task executions.
   * Permissions required: bb.taskRuns.create (or issue creator for data export issues, or user with rollout policy role for the environment)
   *
   * @generated from rpc bytebase.v1.RolloutService.BatchCancelTaskRuns
   */
  batchCancelTaskRuns: {
    methodKind: "unary";
    input: typeof BatchCancelTaskRunsRequestSchema;
    output: typeof BatchCancelTaskRunsResponseSchema;
  },
  /**
   * Generates rollback SQL for a completed task run.
   * Permissions required: bb.taskRuns.list
   *
   * @generated from rpc bytebase.v1.RolloutService.PreviewTaskRunRollback
   */
  previewTaskRunRollback: {
    methodKind: "unary";
    input: typeof PreviewTaskRunRollbackRequestSchema;
    output: typeof PreviewTaskRunRollbackResponseSchema;
  },
}>;

