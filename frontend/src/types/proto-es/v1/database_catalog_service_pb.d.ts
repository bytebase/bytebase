// @generated by protoc-gen-es v2.5.2
// @generated from file v1/database_catalog_service.proto (package bytebase.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file v1/database_catalog_service.proto.
 */
export declare const file_v1_database_catalog_service: GenFile;

/**
 * Request message for getting a database catalog.
 *
 * @generated from message bytebase.v1.GetDatabaseCatalogRequest
 */
export declare type GetDatabaseCatalogRequest = Message<"bytebase.v1.GetDatabaseCatalogRequest"> & {
  /**
   * The name of the database catalog to retrieve.
   * Format: instances/{instance}/databases/{database}/catalog
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message bytebase.v1.GetDatabaseCatalogRequest.
 * Use `create(GetDatabaseCatalogRequestSchema)` to create a new message.
 */
export declare const GetDatabaseCatalogRequestSchema: GenMessage<GetDatabaseCatalogRequest>;

/**
 * Request message for updating a database catalog.
 *
 * @generated from message bytebase.v1.UpdateDatabaseCatalogRequest
 */
export declare type UpdateDatabaseCatalogRequest = Message<"bytebase.v1.UpdateDatabaseCatalogRequest"> & {
  /**
   * The database catalog to update.
   *
   * The catalog's `name` field is used to identify the database catalog to update.
   * Format: instances/{instance}/databases/{database}/catalog
   *
   * @generated from field: bytebase.v1.DatabaseCatalog catalog = 1;
   */
  catalog?: DatabaseCatalog;

  /**
   * If set to true, and the database catalog is not found, a new database catalog will be created.
   * In this situation, `update_mask` is ignored.
   *
   * @generated from field: bool allow_missing = 2;
   */
  allowMissing: boolean;
};

/**
 * Describes the message bytebase.v1.UpdateDatabaseCatalogRequest.
 * Use `create(UpdateDatabaseCatalogRequestSchema)` to create a new message.
 */
export declare const UpdateDatabaseCatalogRequestSchema: GenMessage<UpdateDatabaseCatalogRequest>;

/**
 * Catalog metadata for a database including schemas, tables, and columns.
 *
 * @generated from message bytebase.v1.DatabaseCatalog
 */
export declare type DatabaseCatalog = Message<"bytebase.v1.DatabaseCatalog"> & {
  /**
   * The name of the database catalog.
   * Format: instances/{instance}/databases/{database}/catalog
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The schemas in the database.
   *
   * @generated from field: repeated bytebase.v1.SchemaCatalog schemas = 2;
   */
  schemas: SchemaCatalog[];
};

/**
 * Describes the message bytebase.v1.DatabaseCatalog.
 * Use `create(DatabaseCatalogSchema)` to create a new message.
 */
export declare const DatabaseCatalogSchema: GenMessage<DatabaseCatalog>;

/**
 * Schema metadata within a database.
 *
 * @generated from message bytebase.v1.SchemaCatalog
 */
export declare type SchemaCatalog = Message<"bytebase.v1.SchemaCatalog"> & {
  /**
   * The schema name.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The tables in the schema.
   *
   * @generated from field: repeated bytebase.v1.TableCatalog tables = 2;
   */
  tables: TableCatalog[];
};

/**
 * Describes the message bytebase.v1.SchemaCatalog.
 * Use `create(SchemaCatalogSchema)` to create a new message.
 */
export declare const SchemaCatalogSchema: GenMessage<SchemaCatalog>;

/**
 * Table metadata within a schema.
 *
 * @generated from message bytebase.v1.TableCatalog
 */
export declare type TableCatalog = Message<"bytebase.v1.TableCatalog"> & {
  /**
   * The table name.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from oneof bytebase.v1.TableCatalog.kind
   */
  kind: {
    /**
     * Regular table columns.
     *
     * @generated from field: bytebase.v1.TableCatalog.Columns columns = 2;
     */
    value: TableCatalog_Columns;
    case: "columns";
  } | {
    /**
     * Object schema for JSON/XML columns.
     *
     * @generated from field: bytebase.v1.ObjectSchema object_schema = 3;
     */
    value: ObjectSchema;
    case: "objectSchema";
  } | { case: undefined; value?: undefined };

  /**
   * The data classification level for this table.
   *
   * @generated from field: string classification = 4;
   */
  classification: string;
};

/**
 * Describes the message bytebase.v1.TableCatalog.
 * Use `create(TableCatalogSchema)` to create a new message.
 */
export declare const TableCatalogSchema: GenMessage<TableCatalog>;

/**
 * Column list for regular tables.
 *
 * @generated from message bytebase.v1.TableCatalog.Columns
 */
export declare type TableCatalog_Columns = Message<"bytebase.v1.TableCatalog.Columns"> & {
  /**
   * The columns in the table.
   *
   * @generated from field: repeated bytebase.v1.ColumnCatalog columns = 1;
   */
  columns: ColumnCatalog[];
};

/**
 * Describes the message bytebase.v1.TableCatalog.Columns.
 * Use `create(TableCatalog_ColumnsSchema)` to create a new message.
 */
export declare const TableCatalog_ColumnsSchema: GenMessage<TableCatalog_Columns>;

/**
 * Column metadata within a table.
 *
 * @generated from message bytebase.v1.ColumnCatalog
 */
export declare type ColumnCatalog = Message<"bytebase.v1.ColumnCatalog"> & {
  /**
   * The column name.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The semantic type describing the data purpose.
   *
   * @generated from field: string semantic_type = 2;
   */
  semanticType: string;

  /**
   * User-defined labels for this column.
   *
   * @generated from field: map<string, string> labels = 3;
   */
  labels: { [key: string]: string };

  /**
   * The data classification level for this column.
   *
   * @generated from field: string classification = 4;
   */
  classification: string;

  /**
   * Object schema for complex column types like JSON.
   *
   * @generated from field: optional bytebase.v1.ObjectSchema object_schema = 5;
   */
  objectSchema?: ObjectSchema;
};

/**
 * Describes the message bytebase.v1.ColumnCatalog.
 * Use `create(ColumnCatalogSchema)` to create a new message.
 */
export declare const ColumnCatalogSchema: GenMessage<ColumnCatalog>;

/**
 * Schema definition for object-type columns.
 *
 * @generated from message bytebase.v1.ObjectSchema
 */
export declare type ObjectSchema = Message<"bytebase.v1.ObjectSchema"> & {
  /**
   * The data type of this object.
   *
   * @generated from field: bytebase.v1.ObjectSchema.Type type = 1;
   */
  type: ObjectSchema_Type;

  /**
   * @generated from oneof bytebase.v1.ObjectSchema.kind
   */
  kind: {
    /**
     * Struct schema.
     *
     * @generated from field: bytebase.v1.ObjectSchema.StructKind struct_kind = 2;
     */
    value: ObjectSchema_StructKind;
    case: "structKind";
  } | {
    /**
     * Array schema.
     *
     * @generated from field: bytebase.v1.ObjectSchema.ArrayKind array_kind = 3;
     */
    value: ObjectSchema_ArrayKind;
    case: "arrayKind";
  } | { case: undefined; value?: undefined };

  /**
   * The semantic type of this object.
   *
   * @generated from field: string semantic_type = 4;
   */
  semanticType: string;
};

/**
 * Describes the message bytebase.v1.ObjectSchema.
 * Use `create(ObjectSchemaSchema)` to create a new message.
 */
export declare const ObjectSchemaSchema: GenMessage<ObjectSchema>;

/**
 * Structure type with named properties.
 *
 * @generated from message bytebase.v1.ObjectSchema.StructKind
 */
export declare type ObjectSchema_StructKind = Message<"bytebase.v1.ObjectSchema.StructKind"> & {
  /**
   * Properties of the struct.
   *
   * @generated from field: map<string, bytebase.v1.ObjectSchema> properties = 1;
   */
  properties: { [key: string]: ObjectSchema };
};

/**
 * Describes the message bytebase.v1.ObjectSchema.StructKind.
 * Use `create(ObjectSchema_StructKindSchema)` to create a new message.
 */
export declare const ObjectSchema_StructKindSchema: GenMessage<ObjectSchema_StructKind>;

/**
 * Array type with element schema.
 *
 * @generated from message bytebase.v1.ObjectSchema.ArrayKind
 */
export declare type ObjectSchema_ArrayKind = Message<"bytebase.v1.ObjectSchema.ArrayKind"> & {
  /**
   * The schema of array elements.
   *
   * @generated from field: bytebase.v1.ObjectSchema kind = 1;
   */
  kind?: ObjectSchema;
};

/**
 * Describes the message bytebase.v1.ObjectSchema.ArrayKind.
 * Use `create(ObjectSchema_ArrayKindSchema)` to create a new message.
 */
export declare const ObjectSchema_ArrayKindSchema: GenMessage<ObjectSchema_ArrayKind>;

/**
 * Object schema data types.
 *
 * @generated from enum bytebase.v1.ObjectSchema.Type
 */
export enum ObjectSchema_Type {
  /**
   * Unspecified type.
   *
   * @generated from enum value: TYPE_UNSPECIFIED = 0;
   */
  TYPE_UNSPECIFIED = 0,

  /**
   * String type.
   *
   * @generated from enum value: STRING = 1;
   */
  STRING = 1,

  /**
   * Number type.
   *
   * @generated from enum value: NUMBER = 2;
   */
  NUMBER = 2,

  /**
   * Boolean type.
   *
   * @generated from enum value: BOOLEAN = 3;
   */
  BOOLEAN = 3,

  /**
   * Object/struct type.
   *
   * @generated from enum value: OBJECT = 4;
   */
  OBJECT = 4,

  /**
   * Array type.
   *
   * @generated from enum value: ARRAY = 5;
   */
  ARRAY = 5,
}

/**
 * Describes the enum bytebase.v1.ObjectSchema.Type.
 */
export declare const ObjectSchema_TypeSchema: GenEnum<ObjectSchema_Type>;

/**
 * DatabaseCatalogService manages database schema metadata and classification.
 *
 * @generated from service bytebase.v1.DatabaseCatalogService
 */
export declare const DatabaseCatalogService: GenService<{
  /**
   * Gets the catalog metadata for a database.
   * Permissions required: bb.databaseCatalogs.get
   *
   * @generated from rpc bytebase.v1.DatabaseCatalogService.GetDatabaseCatalog
   */
  getDatabaseCatalog: {
    methodKind: "unary";
    input: typeof GetDatabaseCatalogRequestSchema;
    output: typeof DatabaseCatalogSchema;
  },
  /**
   * Updates catalog metadata such as classifications and labels.
   * Permissions required: bb.databaseCatalogs.update
   *
   * @generated from rpc bytebase.v1.DatabaseCatalogService.UpdateDatabaseCatalog
   */
  updateDatabaseCatalog: {
    methodKind: "unary";
    input: typeof UpdateDatabaseCatalogRequestSchema;
    output: typeof DatabaseCatalogSchema;
  },
}>;

