// @generated by protoc-gen-es v2.5.2
// @generated from file v1/release_service.proto (package bytebase.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";
import type { EmptySchema, FieldMask, Timestamp } from "@bufbuild/protobuf/wkt";
import type { Advice } from "./sql_service_pb";
import type { State, VCSType } from "./common_pb";

/**
 * Describes the file v1/release_service.proto.
 */
export declare const file_v1_release_service: GenFile;

/**
 * @generated from message bytebase.v1.GetReleaseRequest
 */
export declare type GetReleaseRequest = Message<"bytebase.v1.GetReleaseRequest"> & {
  /**
   * Format: projects/{project}/releases/{release}
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message bytebase.v1.GetReleaseRequest.
 * Use `create(GetReleaseRequestSchema)` to create a new message.
 */
export declare const GetReleaseRequestSchema: GenMessage<GetReleaseRequest>;

/**
 * @generated from message bytebase.v1.ListReleasesRequest
 */
export declare type ListReleasesRequest = Message<"bytebase.v1.ListReleasesRequest"> & {
  /**
   * Format: projects/{project}
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * The maximum number of releases to return. The service may return fewer than this value.
   * If unspecified, at most 10 releases will be returned.
   * The maximum value is 1000; values above 1000 will be coerced to 1000.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * Not used.
   * A page token, received from a previous `ListReleases` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListReleases` must match
   * the call that provided the page token.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;

  /**
   * Show deleted releases if specified.
   *
   * @generated from field: bool show_deleted = 4;
   */
  showDeleted: boolean;
};

/**
 * Describes the message bytebase.v1.ListReleasesRequest.
 * Use `create(ListReleasesRequestSchema)` to create a new message.
 */
export declare const ListReleasesRequestSchema: GenMessage<ListReleasesRequest>;

/**
 * @generated from message bytebase.v1.ListReleasesResponse
 */
export declare type ListReleasesResponse = Message<"bytebase.v1.ListReleasesResponse"> & {
  /**
   * @generated from field: repeated bytebase.v1.Release releases = 1;
   */
  releases: Release[];

  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message bytebase.v1.ListReleasesResponse.
 * Use `create(ListReleasesResponseSchema)` to create a new message.
 */
export declare const ListReleasesResponseSchema: GenMessage<ListReleasesResponse>;

/**
 * @generated from message bytebase.v1.CreateReleaseRequest
 */
export declare type CreateReleaseRequest = Message<"bytebase.v1.CreateReleaseRequest"> & {
  /**
   * Format: projects/{project}
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * The release to create.
   *
   * @generated from field: bytebase.v1.Release release = 2;
   */
  release?: Release;
};

/**
 * Describes the message bytebase.v1.CreateReleaseRequest.
 * Use `create(CreateReleaseRequestSchema)` to create a new message.
 */
export declare const CreateReleaseRequestSchema: GenMessage<CreateReleaseRequest>;

/**
 * @generated from message bytebase.v1.UpdateReleaseRequest
 */
export declare type UpdateReleaseRequest = Message<"bytebase.v1.UpdateReleaseRequest"> & {
  /**
   * The release to update.
   *
   * @generated from field: bytebase.v1.Release release = 1;
   */
  release?: Release;

  /**
   * The list of fields to be updated.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;
};

/**
 * Describes the message bytebase.v1.UpdateReleaseRequest.
 * Use `create(UpdateReleaseRequestSchema)` to create a new message.
 */
export declare const UpdateReleaseRequestSchema: GenMessage<UpdateReleaseRequest>;

/**
 * @generated from message bytebase.v1.DeleteReleaseRequest
 */
export declare type DeleteReleaseRequest = Message<"bytebase.v1.DeleteReleaseRequest"> & {
  /**
   * The name of the release to delete.
   * Format: projects/{project}/releases/{release}
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message bytebase.v1.DeleteReleaseRequest.
 * Use `create(DeleteReleaseRequestSchema)` to create a new message.
 */
export declare const DeleteReleaseRequestSchema: GenMessage<DeleteReleaseRequest>;

/**
 * @generated from message bytebase.v1.UndeleteReleaseRequest
 */
export declare type UndeleteReleaseRequest = Message<"bytebase.v1.UndeleteReleaseRequest"> & {
  /**
   * The name of the deleted release.
   * Format: projects/{project}/releases/{release}
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message bytebase.v1.UndeleteReleaseRequest.
 * Use `create(UndeleteReleaseRequestSchema)` to create a new message.
 */
export declare const UndeleteReleaseRequestSchema: GenMessage<UndeleteReleaseRequest>;

/**
 * @generated from message bytebase.v1.CheckReleaseRequest
 */
export declare type CheckReleaseRequest = Message<"bytebase.v1.CheckReleaseRequest"> & {
  /**
   * Format: projects/{project}
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * The release to check.
   *
   * @generated from field: bytebase.v1.Release release = 2;
   */
  release?: Release;

  /**
   * The targets to dry-run the release.
   * Can be database or databaseGroup.
   * Format:
   * projects/{project}/databaseGroups/{databaseGroup}
   * instances/{instance}/databases/{database}
   *
   * @generated from field: repeated string targets = 3;
   */
  targets: string[];
};

/**
 * Describes the message bytebase.v1.CheckReleaseRequest.
 * Use `create(CheckReleaseRequestSchema)` to create a new message.
 */
export declare const CheckReleaseRequestSchema: GenMessage<CheckReleaseRequest>;

/**
 * @generated from message bytebase.v1.CheckReleaseResponse
 */
export declare type CheckReleaseResponse = Message<"bytebase.v1.CheckReleaseResponse"> & {
  /**
   * @generated from field: repeated bytebase.v1.CheckReleaseResponse.CheckResult results = 1;
   */
  results: CheckReleaseResponse_CheckResult[];

  /**
   * The affected rows of the check.
   *
   * @generated from field: int32 affected_rows = 2;
   */
  affectedRows: number;

  /**
   * The aggregated risk level of the check.
   *
   * @generated from field: bytebase.v1.CheckReleaseResponse.RiskLevel risk_level = 3;
   */
  riskLevel: CheckReleaseResponse_RiskLevel;
};

/**
 * Describes the message bytebase.v1.CheckReleaseResponse.
 * Use `create(CheckReleaseResponseSchema)` to create a new message.
 */
export declare const CheckReleaseResponseSchema: GenMessage<CheckReleaseResponse>;

/**
 * @generated from message bytebase.v1.CheckReleaseResponse.CheckResult
 */
export declare type CheckReleaseResponse_CheckResult = Message<"bytebase.v1.CheckReleaseResponse.CheckResult"> & {
  /**
   * The file path that is being checked.
   *
   * @generated from field: string file = 1;
   */
  file: string;

  /**
   * The target that the check is performed on.
   * Should be a database. Format: instances/{instance}/databases/{database}
   *
   * @generated from field: string target = 2;
   */
  target: string;

  /**
   * The list of advice for the file and the target.
   *
   * @generated from field: repeated bytebase.v1.Advice advices = 3;
   */
  advices: Advice[];

  /**
   * The count of affected rows of the statement on the target.
   *
   * @generated from field: int32 affected_rows = 4;
   */
  affectedRows: number;

  /**
   * The risk level of the statement on the target.
   *
   * @generated from field: bytebase.v1.CheckReleaseResponse.RiskLevel risk_level = 5;
   */
  riskLevel: CheckReleaseResponse_RiskLevel;
};

/**
 * Describes the message bytebase.v1.CheckReleaseResponse.CheckResult.
 * Use `create(CheckReleaseResponse_CheckResultSchema)` to create a new message.
 */
export declare const CheckReleaseResponse_CheckResultSchema: GenMessage<CheckReleaseResponse_CheckResult>;

/**
 * @generated from enum bytebase.v1.CheckReleaseResponse.RiskLevel
 */
export enum CheckReleaseResponse_RiskLevel {
  /**
   * @generated from enum value: RISK_LEVEL_UNSPECIFIED = 0;
   */
  RISK_LEVEL_UNSPECIFIED = 0,

  /**
   * @generated from enum value: LOW = 1;
   */
  LOW = 1,

  /**
   * @generated from enum value: MODERATE = 2;
   */
  MODERATE = 2,

  /**
   * @generated from enum value: HIGH = 3;
   */
  HIGH = 3,
}

/**
 * Describes the enum bytebase.v1.CheckReleaseResponse.RiskLevel.
 */
export declare const CheckReleaseResponse_RiskLevelSchema: GenEnum<CheckReleaseResponse_RiskLevel>;

/**
 * @generated from message bytebase.v1.Release
 */
export declare type Release = Message<"bytebase.v1.Release"> & {
  /**
   * Format: projects/{project}/releases/{release}
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: string title = 2;
   */
  title: string;

  /**
   * @generated from field: repeated bytebase.v1.Release.File files = 3;
   */
  files: Release_File[];

  /**
   * @generated from field: bytebase.v1.Release.VCSSource vcs_source = 4;
   */
  vcsSource?: Release_VCSSource;

  /**
   * Format: users/hello@world.com
   *
   * @generated from field: string creator = 5;
   */
  creator: string;

  /**
   * @generated from field: google.protobuf.Timestamp create_time = 6;
   */
  createTime?: Timestamp;

  /**
   * @generated from field: bytebase.v1.State state = 7;
   */
  state: State;
};

/**
 * Describes the message bytebase.v1.Release.
 * Use `create(ReleaseSchema)` to create a new message.
 */
export declare const ReleaseSchema: GenMessage<Release>;

/**
 * @generated from message bytebase.v1.Release.File
 */
export declare type Release_File = Message<"bytebase.v1.Release.File"> & {
  /**
   * The unique identifier for the file.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * The path of the file. e.g. `2.2/V0001_create_table.sql`.
   *
   * @generated from field: string path = 2;
   */
  path: string;

  /**
   * @generated from field: bytebase.v1.ReleaseFileType type = 5;
   */
  type: ReleaseFileType;

  /**
   * @generated from field: string version = 6;
   */
  version: string;

  /**
   * @generated from field: bytebase.v1.Release.File.ChangeType change_type = 9;
   */
  changeType: Release_File_ChangeType;

  /**
   * For inputs, we must either use `sheet` or `statement`.
   * For outputs, we always use `sheet`. `statement` is the preview of the sheet content.
   *
   * The sheet that holds the content.
   * Format: projects/{project}/sheets/{sheet}
   *
   * @generated from field: string sheet = 3;
   */
  sheet: string;

  /**
   * The raw SQL statement content.
   *
   * @generated from field: bytes statement = 7;
   */
  statement: Uint8Array;

  /**
   * The SHA256 hash value of the sheet content or the statement.
   *
   * @generated from field: string sheet_sha256 = 4;
   */
  sheetSha256: string;

  /**
   * The size of the statement in bytes.
   *
   * @generated from field: int64 statement_size = 8;
   */
  statementSize: bigint;
};

/**
 * Describes the message bytebase.v1.Release.File.
 * Use `create(Release_FileSchema)` to create a new message.
 */
export declare const Release_FileSchema: GenMessage<Release_File>;

/**
 * @generated from enum bytebase.v1.Release.File.ChangeType
 */
export enum Release_File_ChangeType {
  /**
   * @generated from enum value: CHANGE_TYPE_UNSPECIFIED = 0;
   */
  CHANGE_TYPE_UNSPECIFIED = 0,

  /**
   * @generated from enum value: DDL = 1;
   */
  DDL = 1,

  /**
   * @generated from enum value: DDL_GHOST = 2;
   */
  DDL_GHOST = 2,

  /**
   * @generated from enum value: DML = 3;
   */
  DML = 3,
}

/**
 * Describes the enum bytebase.v1.Release.File.ChangeType.
 */
export declare const Release_File_ChangeTypeSchema: GenEnum<Release_File_ChangeType>;

/**
 * @generated from message bytebase.v1.Release.VCSSource
 */
export declare type Release_VCSSource = Message<"bytebase.v1.Release.VCSSource"> & {
  /**
   * @generated from field: bytebase.v1.VCSType vcs_type = 1;
   */
  vcsType: VCSType;

  /**
   * The url link to the e.g. GitHub commit or pull request.
   *
   * @generated from field: string url = 2;
   */
  url: string;
};

/**
 * Describes the message bytebase.v1.Release.VCSSource.
 * Use `create(Release_VCSSourceSchema)` to create a new message.
 */
export declare const Release_VCSSourceSchema: GenMessage<Release_VCSSource>;

/**
 * @generated from enum bytebase.v1.ReleaseFileType
 */
export enum ReleaseFileType {
  /**
   * @generated from enum value: TYPE_UNSPECIFIED = 0;
   */
  TYPE_UNSPECIFIED = 0,

  /**
   * @generated from enum value: VERSIONED = 1;
   */
  VERSIONED = 1,
}

/**
 * Describes the enum bytebase.v1.ReleaseFileType.
 */
export declare const ReleaseFileTypeSchema: GenEnum<ReleaseFileType>;

/**
 * @generated from service bytebase.v1.ReleaseService
 */
export declare const ReleaseService: GenService<{
  /**
   * @generated from rpc bytebase.v1.ReleaseService.GetRelease
   */
  getRelease: {
    methodKind: "unary";
    input: typeof GetReleaseRequestSchema;
    output: typeof ReleaseSchema;
  },
  /**
   * @generated from rpc bytebase.v1.ReleaseService.ListReleases
   */
  listReleases: {
    methodKind: "unary";
    input: typeof ListReleasesRequestSchema;
    output: typeof ListReleasesResponseSchema;
  },
  /**
   * @generated from rpc bytebase.v1.ReleaseService.CreateRelease
   */
  createRelease: {
    methodKind: "unary";
    input: typeof CreateReleaseRequestSchema;
    output: typeof ReleaseSchema;
  },
  /**
   * @generated from rpc bytebase.v1.ReleaseService.UpdateRelease
   */
  updateRelease: {
    methodKind: "unary";
    input: typeof UpdateReleaseRequestSchema;
    output: typeof ReleaseSchema;
  },
  /**
   * @generated from rpc bytebase.v1.ReleaseService.DeleteRelease
   */
  deleteRelease: {
    methodKind: "unary";
    input: typeof DeleteReleaseRequestSchema;
    output: typeof EmptySchema;
  },
  /**
   * @generated from rpc bytebase.v1.ReleaseService.UndeleteRelease
   */
  undeleteRelease: {
    methodKind: "unary";
    input: typeof UndeleteReleaseRequestSchema;
    output: typeof ReleaseSchema;
  },
  /**
   * @generated from rpc bytebase.v1.ReleaseService.CheckRelease
   */
  checkRelease: {
    methodKind: "unary";
    input: typeof CheckReleaseRequestSchema;
    output: typeof CheckReleaseResponseSchema;
  },
}>;

