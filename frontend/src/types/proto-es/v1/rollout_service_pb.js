// @generated by protoc-gen-es v2.5.2
// @generated from file v1/rollout_service.proto (package bytebase.v1, syntax proto3)
/* eslint-disable */

import { enumDesc, fileDesc, messageDesc, serviceDesc, tsEnum } from "@bufbuild/protobuf/codegenv2";
import { file_google_api_annotations } from "../google/api/annotations_pb";
import { file_google_api_client } from "../google/api/client_pb";
import { file_google_api_field_behavior } from "../google/api/field_behavior_pb";
import { file_google_api_resource } from "../google/api/resource_pb";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import { file_v1_annotation } from "./annotation_pb";
import { file_v1_common } from "./common_pb";
import { file_v1_plan_service } from "./plan_service_pb";

/**
 * Describes the file v1/rollout_service.proto.
 */
export const file_v1_rollout_service = /*@__PURE__*/
  fileDesc("Chh2MS9yb2xsb3V0X3NlcnZpY2UucHJvdG8SC2J5dGViYXNlLnYxIoUBChRCYXRjaFJ1blRhc2tzUmVxdWVzdBIOCgZwYXJlbnQYASABKAkSDQoFdGFza3MYAiADKAkSDgoGcmVhc29uGAMgASgJEjEKCHJ1bl90aW1lGAQgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEgAiAEBQgsKCV9ydW5fdGltZSIXChVCYXRjaFJ1blRhc2tzUmVzcG9uc2UiRgoVQmF0Y2hTa2lwVGFza3NSZXF1ZXN0Eg4KBnBhcmVudBgBIAEoCRINCgV0YXNrcxgCIAMoCRIOCgZyZWFzb24YAyABKAkiGAoWQmF0Y2hTa2lwVGFza3NSZXNwb25zZSJPChpCYXRjaENhbmNlbFRhc2tSdW5zUmVxdWVzdBIOCgZwYXJlbnQYASABKAkSEQoJdGFza19ydW5zGAIgAygJEg4KBnJlYXNvbhgDIAEoCSIdChtCYXRjaENhbmNlbFRhc2tSdW5zUmVzcG9uc2UiQAoRR2V0Um9sbG91dFJlcXVlc3QSKwoEbmFtZRgBIAEoCUId4kEBAvpBFgoUYnl0ZWJhc2UuY29tL1JvbGxvdXQiawoTTGlzdFJvbGxvdXRzUmVxdWVzdBItCgZwYXJlbnQYASABKAlCHeJBAQL6QRYKFGJ5dGViYXNlLmNvbS9Qcm9qZWN0EhEKCXBhZ2Vfc2l6ZRgCIAEoBRISCgpwYWdlX3Rva2VuGAMgASgJIlcKFExpc3RSb2xsb3V0c1Jlc3BvbnNlEiYKCHJvbGxvdXRzGAEgAygLMhQuYnl0ZWJhc2UudjEuUm9sbG91dBIXCg9uZXh0X3BhZ2VfdG9rZW4YAiABKAkiqQEKFENyZWF0ZVJvbGxvdXRSZXF1ZXN0Ei0KBnBhcmVudBgBIAEoCUId4kEBAvpBFgoUYnl0ZWJhc2UuY29tL1Byb2plY3QSKwoHcm9sbG91dBgCIAEoCzIULmJ5dGViYXNlLnYxLlJvbGxvdXRCBOJBAQISEwoGdGFyZ2V0GAMgASgJSACIAQESFQoNdmFsaWRhdGVfb25seRgEIAEoCEIJCgdfdGFyZ2V0ImgKFVByZXZpZXdSb2xsb3V0UmVxdWVzdBIuCgdwcm9qZWN0GAEgASgJQh3iQQEC+kEWChRieXRlYmFzZS5jb20vUHJvamVjdBIfCgRwbGFuGAIgASgLMhEuYnl0ZWJhc2UudjEuUGxhbiJoChNMaXN0VGFza1J1bnNSZXF1ZXN0EioKBnBhcmVudBgBIAEoCUIa4kEBAvpBEwoRYnl0ZWJhc2UuY29tL1Rhc2sSEQoJcGFnZV9zaXplGAIgASgFEhIKCnBhZ2VfdG9rZW4YAyABKAkiWAoUTGlzdFRhc2tSdW5zUmVzcG9uc2USJwoJdGFza19ydW5zGAEgAygLMhQuYnl0ZWJhc2UudjEuVGFza1J1bhIXCg9uZXh0X3BhZ2VfdG9rZW4YAiABKAkiQAoRR2V0VGFza1J1blJlcXVlc3QSKwoEbmFtZRgBIAEoCUId4kEBAvpBFgoUYnl0ZWJhc2UuY29tL1Rhc2tSdW4iRQoUR2V0VGFza1J1bkxvZ1JlcXVlc3QSLQoGcGFyZW50GAEgASgJQh3iQQEC+kEWChRieXRlYmFzZS5jb20vVGFza1J1biKJAgoHUm9sbG91dBIMCgRuYW1lGAEgASgJEhIKBHBsYW4YAyABKAlCBOJBAQISDQoFdGl0bGUYBCABKAkSIgoGc3RhZ2VzGAUgAygLMhIuYnl0ZWJhc2UudjEuU3RhZ2USFQoHY3JlYXRvchgGIAEoCUIE4kEBAxI1CgtjcmVhdGVfdGltZRgHIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCBOJBAQMSEwoFaXNzdWUYCSABKAlCBOJBAQM6QOpBPQoUYnl0ZWJhc2UuY29tL1JvbGxvdXQSJXByb2plY3RzL3twcm9qZWN0fS9yb2xsb3V0cy97cm9sbG91dH1KBAgCEAMiswEKBVN0YWdlEgwKBG5hbWUYASABKAkSEAoCaWQYAyABKAlCBOJBAQMSEwoLZW52aXJvbm1lbnQYBCABKAkSIAoFdGFza3MYBSADKAsyES5ieXRlYmFzZS52MS5UYXNrOk3qQUoKEmJ5dGViYXNlLmNvbS9TdGFnZRI0cHJvamVjdHMve3Byb2plY3R9L3JvbGxvdXRzL3tyb2xsb3V0fS9zdGFnZXMve3N0YWdlfUoECAIQAyL8CQoEVGFzaxIMCgRuYW1lGAEgASgJEg8KB3NwZWNfaWQYBCABKAkSKAoGc3RhdHVzGAUgASgOMhguYnl0ZWJhc2UudjEuVGFzay5TdGF0dXMSFgoOc2tpcHBlZF9yZWFzb24YDyABKAkSJAoEdHlwZRgGIAEoDjIWLmJ5dGViYXNlLnYxLlRhc2suVHlwZRIOCgZ0YXJnZXQYCCABKAkSOwoPZGF0YWJhc2VfY3JlYXRlGAkgASgLMiAuYnl0ZWJhc2UudjEuVGFzay5EYXRhYmFzZUNyZWF0ZUgAEkgKFmRhdGFiYXNlX3NjaGVtYV91cGRhdGUYCyABKAsyJi5ieXRlYmFzZS52MS5UYXNrLkRhdGFiYXNlU2NoZW1hVXBkYXRlSAASRAoUZGF0YWJhc2VfZGF0YV91cGRhdGUYDCABKAsyJC5ieXRlYmFzZS52MS5UYXNrLkRhdGFiYXNlRGF0YVVwZGF0ZUgAEkQKFGRhdGFiYXNlX2RhdGFfZXhwb3J0GBAgASgLMiQuYnl0ZWJhc2UudjEuVGFzay5EYXRhYmFzZURhdGFFeHBvcnRIABqQAQoORGF0YWJhc2VDcmVhdGUSDwoHcHJvamVjdBgBIAEoCRIQCghkYXRhYmFzZRgCIAEoCRINCgV0YWJsZRgDIAEoCRINCgVzaGVldBgEIAEoCRIVCg1jaGFyYWN0ZXJfc2V0GAUgASgJEhEKCWNvbGxhdGlvbhgGIAEoCRITCgtlbnZpcm9ubWVudBgHIAEoCRo9ChREYXRhYmFzZVNjaGVtYVVwZGF0ZRINCgVzaGVldBgBIAEoCRIWCg5zY2hlbWFfdmVyc2lvbhgCIAEoCRo7ChJEYXRhYmFzZURhdGFVcGRhdGUSDQoFc2hlZXQYASABKAkSFgoOc2NoZW1hX3ZlcnNpb24YAiABKAkaggEKEkRhdGFiYXNlRGF0YUV4cG9ydBIOCgZ0YXJnZXQYASABKAkSDQoFc2hlZXQYAiABKAkSKQoGZm9ybWF0GAMgASgOMhkuYnl0ZWJhc2UudjEuRXhwb3J0Rm9ybWF0EhUKCHBhc3N3b3JkGAQgASgJSACIAQFCCwoJX3Bhc3N3b3JkInwKBlN0YXR1cxIWChJTVEFUVVNfVU5TUEVDSUZJRUQQABIPCgtOT1RfU1RBUlRFRBABEgsKB1BFTkRJTkcQAhILCgdSVU5OSU5HEAMSCAoERE9ORRAEEgoKBkZBSUxFRBAFEgwKCENBTkNFTEVEEAYSCwoHU0tJUFBFRBAHIssBCgRUeXBlEhQKEFRZUEVfVU5TUEVDSUZJRUQQABILCgdHRU5FUkFMEAESEwoPREFUQUJBU0VfQ1JFQVRFEAISGgoWREFUQUJBU0VfU0NIRU1BX1VQREFURRAEEh4KGkRBVEFCQVNFX1NDSEVNQV9VUERBVEVfU0RMEAUSIAocREFUQUJBU0VfU0NIRU1BX1VQREFURV9HSE9TVBAJEhgKFERBVEFCQVNFX0RBVEFfVVBEQVRFEAgSEwoPREFUQUJBU0VfRVhQT1JUEAw6WepBVgoRYnl0ZWJhc2UuY29tL1Rhc2sSQXByb2plY3RzL3twcm9qZWN0fS9yb2xsb3V0cy97cm9sbG91dH0vc3RhZ2VzL3tzdGFnZX0vdGFza3Mve3Rhc2t9QgkKB3BheWxvYWRKBAgCEAMi7gwKB1Rhc2tSdW4SDAoEbmFtZRgBIAEoCRIPCgdjcmVhdG9yGAMgASgJEjUKC2NyZWF0ZV90aW1lGAUgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEIE4kEBAxI1Cgt1cGRhdGVfdGltZRgGIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCBOJBAQMSKwoGc3RhdHVzGAggASgOMhsuYnl0ZWJhc2UudjEuVGFza1J1bi5TdGF0dXMSDgoGZGV0YWlsGAkgASgJEhcKCWNoYW5nZWxvZxgUIAEoCUIE4kEBAxIWCg5zY2hlbWFfdmVyc2lvbhgLIAEoCRI0CgpzdGFydF90aW1lGA4gASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEIE4kEBAxJHChVleHBvcnRfYXJjaGl2ZV9zdGF0dXMYECABKA4yKC5ieXRlYmFzZS52MS5UYXNrUnVuLkV4cG9ydEFyY2hpdmVTdGF0dXMSQwoTcHJpb3JfYmFja3VwX2RldGFpbBgRIAEoCzImLmJ5dGViYXNlLnYxLlRhc2tSdW4uUHJpb3JCYWNrdXBEZXRhaWwSQAoOc2NoZWR1bGVyX2luZm8YEiABKAsyIi5ieXRlYmFzZS52MS5UYXNrUnVuLlNjaGVkdWxlckluZm9CBOJBAQMSEwoFc2hlZXQYEyABKAlCBOJBAQMSNwoIcnVuX3RpbWUYFSABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wQgTiQQEDSACIAQEagAMKEVByaW9yQmFja3VwRGV0YWlsEjoKBWl0ZW1zGAEgAygLMisuYnl0ZWJhc2UudjEuVGFza1J1bi5QcmlvckJhY2t1cERldGFpbC5JdGVtGq4CCgRJdGVtEkcKDHNvdXJjZV90YWJsZRgBIAEoCzIxLmJ5dGViYXNlLnYxLlRhc2tSdW4uUHJpb3JCYWNrdXBEZXRhaWwuSXRlbS5UYWJsZRJHCgx0YXJnZXRfdGFibGUYAiABKAsyMS5ieXRlYmFzZS52MS5UYXNrUnVuLlByaW9yQmFja3VwRGV0YWlsLkl0ZW0uVGFibGUSLQoOc3RhcnRfcG9zaXRpb24YAyABKAsyFS5ieXRlYmFzZS52MS5Qb3NpdGlvbhIrCgxlbmRfcG9zaXRpb24YBCABKAsyFS5ieXRlYmFzZS52MS5Qb3NpdGlvbho4CgVUYWJsZRIQCghkYXRhYmFzZRgBIAEoCRIOCgZzY2hlbWEYAiABKAkSDQoFdGFibGUYAyABKAkayQIKDVNjaGVkdWxlckluZm8SLwoLcmVwb3J0X3RpbWUYASABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEkYKDXdhaXRpbmdfY2F1c2UYAiABKAsyLy5ieXRlYmFzZS52MS5UYXNrUnVuLlNjaGVkdWxlckluZm8uV2FpdGluZ0NhdXNlGr4BCgxXYWl0aW5nQ2F1c2USGgoQY29ubmVjdGlvbl9saW1pdBgBIAEoCEgAEkQKBHRhc2sYAiABKAsyNC5ieXRlYmFzZS52MS5UYXNrUnVuLlNjaGVkdWxlckluZm8uV2FpdGluZ0NhdXNlLlRhc2tIABIeChRwYXJhbGxlbF90YXNrc19saW1pdBgDIAEoCEgAGiMKBFRhc2sSDAoEdGFzaxgBIAEoCRINCgVpc3N1ZRgCIAEoCUIHCgVjYXVzZSJeCgZTdGF0dXMSFgoSU1RBVFVTX1VOU1BFQ0lGSUVEEAASCwoHUEVORElORxABEgsKB1JVTk5JTkcQAhIICgRET05FEAMSCgoGRkFJTEVEEAQSDAoIQ0FOQ0VMRUQQBSJVChNFeHBvcnRBcmNoaXZlU3RhdHVzEiUKIUVYUE9SVF9BUkNISVZFX1NUQVRVU19VTlNQRUNJRklFRBAAEgkKBVJFQURZEAESDAoIRVhQT1JURUQQAjpv6kFsChRieXRlYmFzZS5jb20vVGFza1J1bhJUcHJvamVjdHMve3Byb2plY3R9L3JvbGxvdXRzL3tyb2xsb3V0fS9zdGFnZXMve3N0YWdlfS90YXNrcy97dGFza30vdGFza1J1bnMve3Rhc2tSdW59QgsKCV9ydW5fdGltZUoECAIQA0oECAwQDUoECA8QECLBAQoKVGFza1J1bkxvZxIMCgRuYW1lGAEgASgJEi0KB2VudHJpZXMYAiADKAsyHC5ieXRlYmFzZS52MS5UYXNrUnVuTG9nRW50cnk6dupBcwoXYnl0ZWJhc2UuY29tL1Rhc2tSdW5Mb2cSWHByb2plY3RzL3twcm9qZWN0fS9yb2xsb3V0cy97cm9sbG91dH0vc3RhZ2VzL3tzdGFnZX0vdGFza3Mve3Rhc2t9L3Rhc2tSdW5zL3t0YXNrUnVufS9sb2cing8KD1Rhc2tSdW5Mb2dFbnRyeRIvCgR0eXBlGAEgASgOMiEuYnl0ZWJhc2UudjEuVGFza1J1bkxvZ0VudHJ5LlR5cGUSLAoIbG9nX3RpbWUYBiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEhEKCWRlcGxveV9pZBgMIAEoCRI8CgtzY2hlbWFfZHVtcBgCIAEoCzInLmJ5dGViYXNlLnYxLlRhc2tSdW5Mb2dFbnRyeS5TY2hlbWFEdW1wEkQKD2NvbW1hbmRfZXhlY3V0ZRgDIAEoCzIrLmJ5dGViYXNlLnYxLlRhc2tSdW5Mb2dFbnRyeS5Db21tYW5kRXhlY3V0ZRJACg1kYXRhYmFzZV9zeW5jGAQgASgLMikuYnl0ZWJhc2UudjEuVGFza1J1bkxvZ0VudHJ5LkRhdGFiYXNlU3luYxJQChZ0YXNrX3J1bl9zdGF0dXNfdXBkYXRlGAUgASgLMjAuYnl0ZWJhc2UudjEuVGFza1J1bkxvZ0VudHJ5LlRhc2tSdW5TdGF0dXNVcGRhdGUSTAoTdHJhbnNhY3Rpb25fY29udHJvbBgHIAEoCzIvLmJ5dGViYXNlLnYxLlRhc2tSdW5Mb2dFbnRyeS5UcmFuc2FjdGlvbkNvbnRyb2wSPgoMcHJpb3JfYmFja3VwGAggASgLMiguYnl0ZWJhc2UudjEuVGFza1J1bkxvZ0VudHJ5LlByaW9yQmFja3VwEjoKCnJldHJ5X2luZm8YCSABKAsyJi5ieXRlYmFzZS52MS5UYXNrUnVuTG9nRW50cnkuUmV0cnlJbmZvGnkKClNjaGVtYUR1bXASLgoKc3RhcnRfdGltZRgBIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASLAoIZW5kX3RpbWUYAiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEg0KBWVycm9yGAMgASgJGqkCCg5Db21tYW5kRXhlY3V0ZRIsCghsb2dfdGltZRgBIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASFwoPY29tbWFuZF9pbmRleGVzGAIgAygFEk0KCHJlc3BvbnNlGAMgASgLMjsuYnl0ZWJhc2UudjEuVGFza1J1bkxvZ0VudHJ5LkNvbW1hbmRFeGVjdXRlLkNvbW1hbmRSZXNwb25zZRqAAQoPQ29tbWFuZFJlc3BvbnNlEiwKCGxvZ190aW1lGAEgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBINCgVlcnJvchgCIAEoCRIVCg1hZmZlY3RlZF9yb3dzGAMgASgFEhkKEWFsbF9hZmZlY3RlZF9yb3dzGAQgAygFGnsKDERhdGFiYXNlU3luYxIuCgpzdGFydF90aW1lGAEgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIsCghlbmRfdGltZRgCIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASDQoFZXJyb3IYAyABKAkaqgEKE1Rhc2tSdW5TdGF0dXNVcGRhdGUSRwoGc3RhdHVzGAEgASgOMjcuYnl0ZWJhc2UudjEuVGFza1J1bkxvZ0VudHJ5LlRhc2tSdW5TdGF0dXNVcGRhdGUuU3RhdHVzIkoKBlN0YXR1cxIWChJTVEFUVVNfVU5TUEVDSUZJRUQQABITCg9SVU5OSU5HX1dBSVRJTkcQARITCg9SVU5OSU5HX1JVTk5JTkcQAhqqAQoSVHJhbnNhY3Rpb25Db250cm9sEkIKBHR5cGUYASABKA4yNC5ieXRlYmFzZS52MS5UYXNrUnVuTG9nRW50cnkuVHJhbnNhY3Rpb25Db250cm9sLlR5cGUSDQoFZXJyb3IYAiABKAkiQQoEVHlwZRIUChBUWVBFX1VOU1BFQ0lGSUVEEAASCQoFQkVHSU4QARIKCgZDT01NSVQQAhIMCghST0xMQkFDSxADGr8BCgtQcmlvckJhY2t1cBIuCgpzdGFydF90aW1lGAEgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBIsCghlbmRfdGltZRgCIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXASQwoTcHJpb3JfYmFja3VwX2RldGFpbBgDIAEoCzImLmJ5dGViYXNlLnYxLlRhc2tSdW4uUHJpb3JCYWNrdXBEZXRhaWwSDQoFZXJyb3IYBCABKAkaSAoJUmV0cnlJbmZvEg0KBWVycm9yGAEgASgJEhMKC3JldHJ5X2NvdW50GAIgASgFEhcKD21heGltdW1fcmV0cmllcxgDIAEoBSKsAQoEVHlwZRIUChBUWVBFX1VOU1BFQ0lGSUVEEAASDwoLU0NIRU1BX0RVTVAQARITCg9DT01NQU5EX0VYRUNVVEUQAhIRCg1EQVRBQkFTRV9TWU5DEAMSGgoWVEFTS19SVU5fU1RBVFVTX1VQREFURRAEEhcKE1RSQU5TQUNUSU9OX0NPTlRST0wQBRIQCgxQUklPUl9CQUNLVVAQBhIOCgpSRVRSWV9JTkZPEAciSQoYR2V0VGFza1J1blNlc3Npb25SZXF1ZXN0Ei0KBnBhcmVudBgBIAEoCUId4kEBAvpBFgoUYnl0ZWJhc2UuY29tL1Rhc2tSdW4i6AcKDlRhc2tSdW5TZXNzaW9uEgwKBG5hbWUYASABKAkSOAoIcG9zdGdyZXMYAiABKAsyJC5ieXRlYmFzZS52MS5UYXNrUnVuU2Vzc2lvbi5Qb3N0Z3Jlc0gAGoIGCghQb3N0Z3JlcxI9CgdzZXNzaW9uGAEgASgLMiwuYnl0ZWJhc2UudjEuVGFza1J1blNlc3Npb24uUG9zdGdyZXMuU2Vzc2lvbhJHChFibG9ja2luZ19zZXNzaW9ucxgCIAMoCzIsLmJ5dGViYXNlLnYxLlRhc2tSdW5TZXNzaW9uLlBvc3RncmVzLlNlc3Npb24SRgoQYmxvY2tlZF9zZXNzaW9ucxgDIAMoCzIsLmJ5dGViYXNlLnYxLlRhc2tSdW5TZXNzaW9uLlBvc3RncmVzLlNlc3Npb24apQQKB1Nlc3Npb24SCwoDcGlkGAEgASgJEhcKD2Jsb2NrZWRfYnlfcGlkcxgCIAMoCRINCgVxdWVyeRgDIAEoCRISCgVzdGF0ZRgEIAEoCUgAiAEBEhwKD3dhaXRfZXZlbnRfdHlwZRgFIAEoCUgBiAEBEhcKCndhaXRfZXZlbnQYBiABKAlIAogBARIUCgdkYXRuYW1lGAcgASgJSAOIAQESFAoHdXNlbmFtZRgIIAEoCUgEiAEBEhgKEGFwcGxpY2F0aW9uX25hbWUYCSABKAkSGAoLY2xpZW50X2FkZHIYCiABKAlIBYgBARIYCgtjbGllbnRfcG9ydBgLIAEoCUgGiAEBEjEKDWJhY2tlbmRfc3RhcnQYDCABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wEjMKCnhhY3Rfc3RhcnQYDSABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wSAeIAQESNAoLcXVlcnlfc3RhcnQYDiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wSAiIAQFCCAoGX3N0YXRlQhIKEF93YWl0X2V2ZW50X3R5cGVCDQoLX3dhaXRfZXZlbnRCCgoIX2RhdG5hbWVCCgoIX3VzZW5hbWVCDgoMX2NsaWVudF9hZGRyQg4KDF9jbGllbnRfcG9ydEINCgtfeGFjdF9zdGFydEIOCgxfcXVlcnlfc3RhcnQ6fupBewobYnl0ZWJhc2UuY29tL1Rhc2tSdW5TZXNzaW9uElxwcm9qZWN0cy97cHJvamVjdH0vcm9sbG91dHMve3JvbGxvdXR9L3N0YWdlcy97c3RhZ2V9L3Rhc2tzL3t0YXNrfS90YXNrUnVucy97dGFza1J1bn0vc2Vzc2lvbkIJCgdzZXNzaW9uIkwKHVByZXZpZXdUYXNrUnVuUm9sbGJhY2tSZXF1ZXN0EisKBG5hbWUYASABKAlCHeJBAQL6QRYKFGJ5dGViYXNlLmNvbS9UYXNrUnVuIjMKHlByZXZpZXdUYXNrUnVuUm9sbGJhY2tSZXNwb25zZRIRCglzdGF0ZW1lbnQYASABKAkykhEKDlJvbGxvdXRTZXJ2aWNlEooBCgpHZXRSb2xsb3V0Eh4uYnl0ZWJhc2UudjEuR2V0Um9sbG91dFJlcXVlc3QaFC5ieXRlYmFzZS52MS5Sb2xsb3V0IkbaQQRuYW1liuowD2JiLnJvbGxvdXRzLmdldJDqMAGC0+STAiISIC92MS97bmFtZT1wcm9qZWN0cy8qL3JvbGxvdXRzLyp9Ep4BCgxMaXN0Um9sbG91dHMSIC5ieXRlYmFzZS52MS5MaXN0Um9sbG91dHNSZXF1ZXN0GiEuYnl0ZWJhc2UudjEuTGlzdFJvbGxvdXRzUmVzcG9uc2UiSdpBBnBhcmVudIrqMBBiYi5yb2xsb3V0cy5saXN0kOowAYLT5JMCIhIgL3YxL3twYXJlbnQ9cHJvamVjdHMvKn0vcm9sbG91dHMSqgEKDUNyZWF0ZVJvbGxvdXQSIS5ieXRlYmFzZS52MS5DcmVhdGVSb2xsb3V0UmVxdWVzdBoULmJ5dGViYXNlLnYxLlJvbGxvdXQiYNpBDnBhcmVudCxyb2xsb3V0iuowEmJiLnJvbGxvdXRzLmNyZWF0ZZDqMAGY6jABgtPkkwIrOgdyb2xsb3V0IiAvdjEve3BhcmVudD1wcm9qZWN0cy8qfS9yb2xsb3V0cxKgAQoOUHJldmlld1JvbGxvdXQSIi5ieXRlYmFzZS52MS5QcmV2aWV3Um9sbG91dFJlcXVlc3QaFC5ieXRlYmFzZS52MS5Sb2xsb3V0IlTaQQRuYW1liuowE2JiLnJvbGxvdXRzLnByZXZpZXeQ6jABgtPkkwIsOgEqIicvdjEve3Byb2plY3Q9cHJvamVjdHMvKn06cHJldmlld1JvbGxvdXQSugEKDExpc3RUYXNrUnVucxIgLmJ5dGViYXNlLnYxLkxpc3RUYXNrUnVuc1JlcXVlc3QaIS5ieXRlYmFzZS52MS5MaXN0VGFza1J1bnNSZXNwb25zZSJl2kEGcGFyZW50iuowEGJiLnRhc2tSdW5zLmxpc3SQ6jABgtPkkwI+EjwvdjEve3BhcmVudD1wcm9qZWN0cy8qL3JvbGxvdXRzLyovc3RhZ2VzLyovdGFza3MvKn0vdGFza1J1bnMSpwEKCkdldFRhc2tSdW4SHi5ieXRlYmFzZS52MS5HZXRUYXNrUnVuUmVxdWVzdBoULmJ5dGViYXNlLnYxLlRhc2tSdW4iY9pBBG5hbWWK6jAQYmIudGFza1J1bnMubGlzdJDqMAGC0+STAj4SPC92MS97bmFtZT1wcm9qZWN0cy8qL3JvbGxvdXRzLyovc3RhZ2VzLyovdGFza3MvKi90YXNrUnVucy8qfRK4AQoNR2V0VGFza1J1bkxvZxIhLmJ5dGViYXNlLnYxLkdldFRhc2tSdW5Mb2dSZXF1ZXN0GhcuYnl0ZWJhc2UudjEuVGFza1J1bkxvZyJr2kEGcGFyZW50iuowEGJiLnRhc2tSdW5zLmxpc3SQ6jABgtPkkwJEEkIvdjEve3BhcmVudD1wcm9qZWN0cy8qL3JvbGxvdXRzLyovc3RhZ2VzLyovdGFza3MvKi90YXNrUnVucy8qfS9sb2cSyAEKEUdldFRhc2tSdW5TZXNzaW9uEiUuYnl0ZWJhc2UudjEuR2V0VGFza1J1blNlc3Npb25SZXF1ZXN0GhsuYnl0ZWJhc2UudjEuVGFza1J1blNlc3Npb24ib9pBBnBhcmVudIrqMBBiYi50YXNrUnVucy5saXN0kOowAYLT5JMCSBJGL3YxL3twYXJlbnQ9cHJvamVjdHMvKi9yb2xsb3V0cy8qL3N0YWdlcy8qL3Rhc2tzLyovdGFza1J1bnMvKn0vc2Vzc2lvbhKqAQoNQmF0Y2hSdW5UYXNrcxIhLmJ5dGViYXNlLnYxLkJhdGNoUnVuVGFza3NSZXF1ZXN0GiIuYnl0ZWJhc2UudjEuQmF0Y2hSdW5UYXNrc1Jlc3BvbnNlIlLaQQZwYXJlbnSQ6jACgtPkkwI/OgEqIjovdjEve3BhcmVudD1wcm9qZWN0cy8qL3JvbGxvdXRzLyovc3RhZ2VzLyp9L3Rhc2tzOmJhdGNoUnVuEq4BCg5CYXRjaFNraXBUYXNrcxIiLmJ5dGViYXNlLnYxLkJhdGNoU2tpcFRhc2tzUmVxdWVzdBojLmJ5dGViYXNlLnYxLkJhdGNoU2tpcFRhc2tzUmVzcG9uc2UiU9pBBnBhcmVudJDqMAKC0+STAkA6ASoiOy92MS97cGFyZW50PXByb2plY3RzLyovcm9sbG91dHMvKi9zdGFnZXMvKn0vdGFza3M6YmF0Y2hTa2lwEsoBChNCYXRjaENhbmNlbFRhc2tSdW5zEicuYnl0ZWJhc2UudjEuQmF0Y2hDYW5jZWxUYXNrUnVuc1JlcXVlc3QaKC5ieXRlYmFzZS52MS5CYXRjaENhbmNlbFRhc2tSdW5zUmVzcG9uc2UiYNpBBnBhcmVudJDqMAKC0+STAk06ASoiSC92MS97cGFyZW50PXByb2plY3RzLyovcm9sbG91dHMvKi9zdGFnZXMvKi90YXNrcy8qfS90YXNrUnVuczpiYXRjaENhbmNlbBLpAQoWUHJldmlld1Rhc2tSdW5Sb2xsYmFjaxIqLmJ5dGViYXNlLnYxLlByZXZpZXdUYXNrUnVuUm9sbGJhY2tSZXF1ZXN0GisuYnl0ZWJhc2UudjEuUHJldmlld1Rhc2tSdW5Sb2xsYmFja1Jlc3BvbnNlInbaQQRuYW1liuowEGJiLnRhc2tSdW5zLmxpc3SQ6jABgtPkkwJROgEqIkwvdjEve25hbWU9cHJvamVjdHMvKi9yb2xsb3V0cy8qL3N0YWdlcy8qL3Rhc2tzLyovdGFza1J1bnMvKn06cHJldmlld1JvbGxiYWNrQjRaMmdpdGh1Yi5jb20vYnl0ZWJhc2UvYnl0ZWJhc2UvcHJvdG8vZ2VuZXJhdGVkLWdvL3YxYgZwcm90bzM", [file_google_api_annotations, file_google_api_client, file_google_api_field_behavior, file_google_api_resource, file_google_protobuf_timestamp, file_v1_annotation, file_v1_common, file_v1_plan_service]);

/**
 * Describes the message bytebase.v1.BatchRunTasksRequest.
 * Use `create(BatchRunTasksRequestSchema)` to create a new message.
 */
export const BatchRunTasksRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 0);

/**
 * Describes the message bytebase.v1.BatchRunTasksResponse.
 * Use `create(BatchRunTasksResponseSchema)` to create a new message.
 */
export const BatchRunTasksResponseSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 1);

/**
 * Describes the message bytebase.v1.BatchSkipTasksRequest.
 * Use `create(BatchSkipTasksRequestSchema)` to create a new message.
 */
export const BatchSkipTasksRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 2);

/**
 * Describes the message bytebase.v1.BatchSkipTasksResponse.
 * Use `create(BatchSkipTasksResponseSchema)` to create a new message.
 */
export const BatchSkipTasksResponseSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 3);

/**
 * Describes the message bytebase.v1.BatchCancelTaskRunsRequest.
 * Use `create(BatchCancelTaskRunsRequestSchema)` to create a new message.
 */
export const BatchCancelTaskRunsRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 4);

/**
 * Describes the message bytebase.v1.BatchCancelTaskRunsResponse.
 * Use `create(BatchCancelTaskRunsResponseSchema)` to create a new message.
 */
export const BatchCancelTaskRunsResponseSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 5);

/**
 * Describes the message bytebase.v1.GetRolloutRequest.
 * Use `create(GetRolloutRequestSchema)` to create a new message.
 */
export const GetRolloutRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 6);

/**
 * Describes the message bytebase.v1.ListRolloutsRequest.
 * Use `create(ListRolloutsRequestSchema)` to create a new message.
 */
export const ListRolloutsRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 7);

/**
 * Describes the message bytebase.v1.ListRolloutsResponse.
 * Use `create(ListRolloutsResponseSchema)` to create a new message.
 */
export const ListRolloutsResponseSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 8);

/**
 * Describes the message bytebase.v1.CreateRolloutRequest.
 * Use `create(CreateRolloutRequestSchema)` to create a new message.
 */
export const CreateRolloutRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 9);

/**
 * Describes the message bytebase.v1.PreviewRolloutRequest.
 * Use `create(PreviewRolloutRequestSchema)` to create a new message.
 */
export const PreviewRolloutRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 10);

/**
 * Describes the message bytebase.v1.ListTaskRunsRequest.
 * Use `create(ListTaskRunsRequestSchema)` to create a new message.
 */
export const ListTaskRunsRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 11);

/**
 * Describes the message bytebase.v1.ListTaskRunsResponse.
 * Use `create(ListTaskRunsResponseSchema)` to create a new message.
 */
export const ListTaskRunsResponseSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 12);

/**
 * Describes the message bytebase.v1.GetTaskRunRequest.
 * Use `create(GetTaskRunRequestSchema)` to create a new message.
 */
export const GetTaskRunRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 13);

/**
 * Describes the message bytebase.v1.GetTaskRunLogRequest.
 * Use `create(GetTaskRunLogRequestSchema)` to create a new message.
 */
export const GetTaskRunLogRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 14);

/**
 * Describes the message bytebase.v1.Rollout.
 * Use `create(RolloutSchema)` to create a new message.
 */
export const RolloutSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 15);

/**
 * Describes the message bytebase.v1.Stage.
 * Use `create(StageSchema)` to create a new message.
 */
export const StageSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 16);

/**
 * Describes the message bytebase.v1.Task.
 * Use `create(TaskSchema)` to create a new message.
 */
export const TaskSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 17);

/**
 * Describes the message bytebase.v1.Task.DatabaseCreate.
 * Use `create(Task_DatabaseCreateSchema)` to create a new message.
 */
export const Task_DatabaseCreateSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 17, 0);

/**
 * Describes the message bytebase.v1.Task.DatabaseSchemaUpdate.
 * Use `create(Task_DatabaseSchemaUpdateSchema)` to create a new message.
 */
export const Task_DatabaseSchemaUpdateSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 17, 1);

/**
 * Describes the message bytebase.v1.Task.DatabaseDataUpdate.
 * Use `create(Task_DatabaseDataUpdateSchema)` to create a new message.
 */
export const Task_DatabaseDataUpdateSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 17, 2);

/**
 * Describes the message bytebase.v1.Task.DatabaseDataExport.
 * Use `create(Task_DatabaseDataExportSchema)` to create a new message.
 */
export const Task_DatabaseDataExportSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 17, 3);

/**
 * Describes the enum bytebase.v1.Task.Status.
 */
export const Task_StatusSchema = /*@__PURE__*/
  enumDesc(file_v1_rollout_service, 17, 0);

/**
 * @generated from enum bytebase.v1.Task.Status
 */
export const Task_Status = /*@__PURE__*/
  tsEnum(Task_StatusSchema);

/**
 * Describes the enum bytebase.v1.Task.Type.
 */
export const Task_TypeSchema = /*@__PURE__*/
  enumDesc(file_v1_rollout_service, 17, 1);

/**
 * @generated from enum bytebase.v1.Task.Type
 */
export const Task_Type = /*@__PURE__*/
  tsEnum(Task_TypeSchema);

/**
 * Describes the message bytebase.v1.TaskRun.
 * Use `create(TaskRunSchema)` to create a new message.
 */
export const TaskRunSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 18);

/**
 * Describes the message bytebase.v1.TaskRun.PriorBackupDetail.
 * Use `create(TaskRun_PriorBackupDetailSchema)` to create a new message.
 */
export const TaskRun_PriorBackupDetailSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 18, 0);

/**
 * Describes the message bytebase.v1.TaskRun.PriorBackupDetail.Item.
 * Use `create(TaskRun_PriorBackupDetail_ItemSchema)` to create a new message.
 */
export const TaskRun_PriorBackupDetail_ItemSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 18, 0, 0);

/**
 * Describes the message bytebase.v1.TaskRun.PriorBackupDetail.Item.Table.
 * Use `create(TaskRun_PriorBackupDetail_Item_TableSchema)` to create a new message.
 */
export const TaskRun_PriorBackupDetail_Item_TableSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 18, 0, 0, 0);

/**
 * Describes the message bytebase.v1.TaskRun.SchedulerInfo.
 * Use `create(TaskRun_SchedulerInfoSchema)` to create a new message.
 */
export const TaskRun_SchedulerInfoSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 18, 1);

/**
 * Describes the message bytebase.v1.TaskRun.SchedulerInfo.WaitingCause.
 * Use `create(TaskRun_SchedulerInfo_WaitingCauseSchema)` to create a new message.
 */
export const TaskRun_SchedulerInfo_WaitingCauseSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 18, 1, 0);

/**
 * Describes the message bytebase.v1.TaskRun.SchedulerInfo.WaitingCause.Task.
 * Use `create(TaskRun_SchedulerInfo_WaitingCause_TaskSchema)` to create a new message.
 */
export const TaskRun_SchedulerInfo_WaitingCause_TaskSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 18, 1, 0, 0);

/**
 * Describes the enum bytebase.v1.TaskRun.Status.
 */
export const TaskRun_StatusSchema = /*@__PURE__*/
  enumDesc(file_v1_rollout_service, 18, 0);

/**
 * @generated from enum bytebase.v1.TaskRun.Status
 */
export const TaskRun_Status = /*@__PURE__*/
  tsEnum(TaskRun_StatusSchema);

/**
 * Describes the enum bytebase.v1.TaskRun.ExportArchiveStatus.
 */
export const TaskRun_ExportArchiveStatusSchema = /*@__PURE__*/
  enumDesc(file_v1_rollout_service, 18, 1);

/**
 * @generated from enum bytebase.v1.TaskRun.ExportArchiveStatus
 */
export const TaskRun_ExportArchiveStatus = /*@__PURE__*/
  tsEnum(TaskRun_ExportArchiveStatusSchema);

/**
 * Describes the message bytebase.v1.TaskRunLog.
 * Use `create(TaskRunLogSchema)` to create a new message.
 */
export const TaskRunLogSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 19);

/**
 * Describes the message bytebase.v1.TaskRunLogEntry.
 * Use `create(TaskRunLogEntrySchema)` to create a new message.
 */
export const TaskRunLogEntrySchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 20);

/**
 * Describes the message bytebase.v1.TaskRunLogEntry.SchemaDump.
 * Use `create(TaskRunLogEntry_SchemaDumpSchema)` to create a new message.
 */
export const TaskRunLogEntry_SchemaDumpSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 20, 0);

/**
 * Describes the message bytebase.v1.TaskRunLogEntry.CommandExecute.
 * Use `create(TaskRunLogEntry_CommandExecuteSchema)` to create a new message.
 */
export const TaskRunLogEntry_CommandExecuteSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 20, 1);

/**
 * Describes the message bytebase.v1.TaskRunLogEntry.CommandExecute.CommandResponse.
 * Use `create(TaskRunLogEntry_CommandExecute_CommandResponseSchema)` to create a new message.
 */
export const TaskRunLogEntry_CommandExecute_CommandResponseSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 20, 1, 0);

/**
 * Describes the message bytebase.v1.TaskRunLogEntry.DatabaseSync.
 * Use `create(TaskRunLogEntry_DatabaseSyncSchema)` to create a new message.
 */
export const TaskRunLogEntry_DatabaseSyncSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 20, 2);

/**
 * Describes the message bytebase.v1.TaskRunLogEntry.TaskRunStatusUpdate.
 * Use `create(TaskRunLogEntry_TaskRunStatusUpdateSchema)` to create a new message.
 */
export const TaskRunLogEntry_TaskRunStatusUpdateSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 20, 3);

/**
 * Describes the enum bytebase.v1.TaskRunLogEntry.TaskRunStatusUpdate.Status.
 */
export const TaskRunLogEntry_TaskRunStatusUpdate_StatusSchema = /*@__PURE__*/
  enumDesc(file_v1_rollout_service, 20, 3, 0);

/**
 * @generated from enum bytebase.v1.TaskRunLogEntry.TaskRunStatusUpdate.Status
 */
export const TaskRunLogEntry_TaskRunStatusUpdate_Status = /*@__PURE__*/
  tsEnum(TaskRunLogEntry_TaskRunStatusUpdate_StatusSchema);

/**
 * Describes the message bytebase.v1.TaskRunLogEntry.TransactionControl.
 * Use `create(TaskRunLogEntry_TransactionControlSchema)` to create a new message.
 */
export const TaskRunLogEntry_TransactionControlSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 20, 4);

/**
 * Describes the enum bytebase.v1.TaskRunLogEntry.TransactionControl.Type.
 */
export const TaskRunLogEntry_TransactionControl_TypeSchema = /*@__PURE__*/
  enumDesc(file_v1_rollout_service, 20, 4, 0);

/**
 * @generated from enum bytebase.v1.TaskRunLogEntry.TransactionControl.Type
 */
export const TaskRunLogEntry_TransactionControl_Type = /*@__PURE__*/
  tsEnum(TaskRunLogEntry_TransactionControl_TypeSchema);

/**
 * Describes the message bytebase.v1.TaskRunLogEntry.PriorBackup.
 * Use `create(TaskRunLogEntry_PriorBackupSchema)` to create a new message.
 */
export const TaskRunLogEntry_PriorBackupSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 20, 5);

/**
 * Describes the message bytebase.v1.TaskRunLogEntry.RetryInfo.
 * Use `create(TaskRunLogEntry_RetryInfoSchema)` to create a new message.
 */
export const TaskRunLogEntry_RetryInfoSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 20, 6);

/**
 * Describes the enum bytebase.v1.TaskRunLogEntry.Type.
 */
export const TaskRunLogEntry_TypeSchema = /*@__PURE__*/
  enumDesc(file_v1_rollout_service, 20, 0);

/**
 * @generated from enum bytebase.v1.TaskRunLogEntry.Type
 */
export const TaskRunLogEntry_Type = /*@__PURE__*/
  tsEnum(TaskRunLogEntry_TypeSchema);

/**
 * Describes the message bytebase.v1.GetTaskRunSessionRequest.
 * Use `create(GetTaskRunSessionRequestSchema)` to create a new message.
 */
export const GetTaskRunSessionRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 21);

/**
 * Describes the message bytebase.v1.TaskRunSession.
 * Use `create(TaskRunSessionSchema)` to create a new message.
 */
export const TaskRunSessionSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 22);

/**
 * Describes the message bytebase.v1.TaskRunSession.Postgres.
 * Use `create(TaskRunSession_PostgresSchema)` to create a new message.
 */
export const TaskRunSession_PostgresSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 22, 0);

/**
 * Describes the message bytebase.v1.TaskRunSession.Postgres.Session.
 * Use `create(TaskRunSession_Postgres_SessionSchema)` to create a new message.
 */
export const TaskRunSession_Postgres_SessionSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 22, 0, 0);

/**
 * Describes the message bytebase.v1.PreviewTaskRunRollbackRequest.
 * Use `create(PreviewTaskRunRollbackRequestSchema)` to create a new message.
 */
export const PreviewTaskRunRollbackRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 23);

/**
 * Describes the message bytebase.v1.PreviewTaskRunRollbackResponse.
 * Use `create(PreviewTaskRunRollbackResponseSchema)` to create a new message.
 */
export const PreviewTaskRunRollbackResponseSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 24);

/**
 * @generated from service bytebase.v1.RolloutService
 */
export const RolloutService = /*@__PURE__*/
  serviceDesc(file_v1_rollout_service, 0);

