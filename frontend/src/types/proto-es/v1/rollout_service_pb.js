// @generated by protoc-gen-es v2.5.2
// @generated from file v1/rollout_service.proto (package bytebase.v1, syntax proto3)
/* eslint-disable */

import { enumDesc, fileDesc, messageDesc, serviceDesc, tsEnum } from "@bufbuild/protobuf/codegenv2";
import { file_google_api_annotations } from "../google/api/annotations_pb";
import { file_google_api_client } from "../google/api/client_pb";
import { file_google_api_field_behavior } from "../google/api/field_behavior_pb";
import { file_google_api_resource } from "../google/api/resource_pb";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import { file_v1_annotation } from "./annotation_pb";
import { file_v1_common } from "./common_pb";
import { file_v1_plan_service } from "./plan_service_pb";

/**
 * Describes the file v1/rollout_service.proto.
 */
export const file_v1_rollout_service = /*@__PURE__*/
  fileDesc("", [file_google_api_annotations, file_google_api_client, file_google_api_field_behavior, file_google_api_resource, file_google_protobuf_timestamp, file_v1_annotation, file_v1_common, file_v1_plan_service]);

/**
 * Describes the message bytebase.v1.BatchRunTasksRequest.
 * Use `create(BatchRunTasksRequestSchema)` to create a new message.
 */
export const BatchRunTasksRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 0);

/**
 * Describes the message bytebase.v1.BatchRunTasksResponse.
 * Use `create(BatchRunTasksResponseSchema)` to create a new message.
 */
export const BatchRunTasksResponseSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 1);

/**
 * Describes the message bytebase.v1.BatchSkipTasksRequest.
 * Use `create(BatchSkipTasksRequestSchema)` to create a new message.
 */
export const BatchSkipTasksRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 2);

/**
 * Describes the message bytebase.v1.BatchSkipTasksResponse.
 * Use `create(BatchSkipTasksResponseSchema)` to create a new message.
 */
export const BatchSkipTasksResponseSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 3);

/**
 * Describes the message bytebase.v1.BatchCancelTaskRunsRequest.
 * Use `create(BatchCancelTaskRunsRequestSchema)` to create a new message.
 */
export const BatchCancelTaskRunsRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 4);

/**
 * Describes the message bytebase.v1.BatchCancelTaskRunsResponse.
 * Use `create(BatchCancelTaskRunsResponseSchema)` to create a new message.
 */
export const BatchCancelTaskRunsResponseSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 5);

/**
 * Describes the message bytebase.v1.GetRolloutRequest.
 * Use `create(GetRolloutRequestSchema)` to create a new message.
 */
export const GetRolloutRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 6);

/**
 * Describes the message bytebase.v1.ListRolloutsRequest.
 * Use `create(ListRolloutsRequestSchema)` to create a new message.
 */
export const ListRolloutsRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 7);

/**
 * Describes the message bytebase.v1.ListRolloutsResponse.
 * Use `create(ListRolloutsResponseSchema)` to create a new message.
 */
export const ListRolloutsResponseSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 8);

/**
 * Describes the message bytebase.v1.CreateRolloutRequest.
 * Use `create(CreateRolloutRequestSchema)` to create a new message.
 */
export const CreateRolloutRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 9);

/**
 * Describes the message bytebase.v1.PreviewRolloutRequest.
 * Use `create(PreviewRolloutRequestSchema)` to create a new message.
 */
export const PreviewRolloutRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 10);

/**
 * Describes the message bytebase.v1.ListTaskRunsRequest.
 * Use `create(ListTaskRunsRequestSchema)` to create a new message.
 */
export const ListTaskRunsRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 11);

/**
 * Describes the message bytebase.v1.ListTaskRunsResponse.
 * Use `create(ListTaskRunsResponseSchema)` to create a new message.
 */
export const ListTaskRunsResponseSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 12);

/**
 * Describes the message bytebase.v1.GetTaskRunRequest.
 * Use `create(GetTaskRunRequestSchema)` to create a new message.
 */
export const GetTaskRunRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 13);

/**
 * Describes the message bytebase.v1.GetTaskRunLogRequest.
 * Use `create(GetTaskRunLogRequestSchema)` to create a new message.
 */
export const GetTaskRunLogRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 14);

/**
 * Describes the message bytebase.v1.Rollout.
 * Use `create(RolloutSchema)` to create a new message.
 */
export const RolloutSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 15);

/**
 * Describes the message bytebase.v1.Stage.
 * Use `create(StageSchema)` to create a new message.
 */
export const StageSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 16);

/**
 * Describes the message bytebase.v1.Task.
 * Use `create(TaskSchema)` to create a new message.
 */
export const TaskSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 17);

/**
 * Describes the message bytebase.v1.Task.DatabaseCreate.
 * Use `create(Task_DatabaseCreateSchema)` to create a new message.
 */
export const Task_DatabaseCreateSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 17, 0);

/**
 * Describes the message bytebase.v1.Task.DatabaseUpdate.
 * Use `create(Task_DatabaseUpdateSchema)` to create a new message.
 */
export const Task_DatabaseUpdateSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 17, 1);

/**
 * Describes the message bytebase.v1.Task.DatabaseDataExport.
 * Use `create(Task_DatabaseDataExportSchema)` to create a new message.
 */
export const Task_DatabaseDataExportSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 17, 2);

/**
 * Describes the enum bytebase.v1.Task.Status.
 */
export const Task_StatusSchema = /*@__PURE__*/
  enumDesc(file_v1_rollout_service, 17, 0);

/**
 * @generated from enum bytebase.v1.Task.Status
 */
export const Task_Status = /*@__PURE__*/
  tsEnum(Task_StatusSchema);

/**
 * Describes the enum bytebase.v1.Task.Type.
 */
export const Task_TypeSchema = /*@__PURE__*/
  enumDesc(file_v1_rollout_service, 17, 1);

/**
 * @generated from enum bytebase.v1.Task.Type
 */
export const Task_Type = /*@__PURE__*/
  tsEnum(Task_TypeSchema);

/**
 * Describes the message bytebase.v1.TaskRun.
 * Use `create(TaskRunSchema)` to create a new message.
 */
export const TaskRunSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 18);

/**
 * Describes the message bytebase.v1.TaskRun.PriorBackupDetail.
 * Use `create(TaskRun_PriorBackupDetailSchema)` to create a new message.
 */
export const TaskRun_PriorBackupDetailSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 18, 0);

/**
 * Describes the message bytebase.v1.TaskRun.PriorBackupDetail.Item.
 * Use `create(TaskRun_PriorBackupDetail_ItemSchema)` to create a new message.
 */
export const TaskRun_PriorBackupDetail_ItemSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 18, 0, 0);

/**
 * Describes the message bytebase.v1.TaskRun.PriorBackupDetail.Item.Table.
 * Use `create(TaskRun_PriorBackupDetail_Item_TableSchema)` to create a new message.
 */
export const TaskRun_PriorBackupDetail_Item_TableSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 18, 0, 0, 0);

/**
 * Describes the message bytebase.v1.TaskRun.SchedulerInfo.
 * Use `create(TaskRun_SchedulerInfoSchema)` to create a new message.
 */
export const TaskRun_SchedulerInfoSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 18, 1);

/**
 * Describes the message bytebase.v1.TaskRun.SchedulerInfo.WaitingCause.
 * Use `create(TaskRun_SchedulerInfo_WaitingCauseSchema)` to create a new message.
 */
export const TaskRun_SchedulerInfo_WaitingCauseSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 18, 1, 0);

/**
 * Describes the message bytebase.v1.TaskRun.SchedulerInfo.WaitingCause.Task.
 * Use `create(TaskRun_SchedulerInfo_WaitingCause_TaskSchema)` to create a new message.
 */
export const TaskRun_SchedulerInfo_WaitingCause_TaskSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 18, 1, 0, 0);

/**
 * Describes the enum bytebase.v1.TaskRun.Status.
 */
export const TaskRun_StatusSchema = /*@__PURE__*/
  enumDesc(file_v1_rollout_service, 18, 0);

/**
 * @generated from enum bytebase.v1.TaskRun.Status
 */
export const TaskRun_Status = /*@__PURE__*/
  tsEnum(TaskRun_StatusSchema);

/**
 * Describes the enum bytebase.v1.TaskRun.ExportArchiveStatus.
 */
export const TaskRun_ExportArchiveStatusSchema = /*@__PURE__*/
  enumDesc(file_v1_rollout_service, 18, 1);

/**
 * @generated from enum bytebase.v1.TaskRun.ExportArchiveStatus
 */
export const TaskRun_ExportArchiveStatus = /*@__PURE__*/
  tsEnum(TaskRun_ExportArchiveStatusSchema);

/**
 * Describes the message bytebase.v1.TaskRunLog.
 * Use `create(TaskRunLogSchema)` to create a new message.
 */
export const TaskRunLogSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 19);

/**
 * Describes the message bytebase.v1.TaskRunLogEntry.
 * Use `create(TaskRunLogEntrySchema)` to create a new message.
 */
export const TaskRunLogEntrySchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 20);

/**
 * Describes the message bytebase.v1.TaskRunLogEntry.SchemaDump.
 * Use `create(TaskRunLogEntry_SchemaDumpSchema)` to create a new message.
 */
export const TaskRunLogEntry_SchemaDumpSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 20, 0);

/**
 * Describes the message bytebase.v1.TaskRunLogEntry.CommandExecute.
 * Use `create(TaskRunLogEntry_CommandExecuteSchema)` to create a new message.
 */
export const TaskRunLogEntry_CommandExecuteSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 20, 1);

/**
 * Describes the message bytebase.v1.TaskRunLogEntry.CommandExecute.CommandResponse.
 * Use `create(TaskRunLogEntry_CommandExecute_CommandResponseSchema)` to create a new message.
 */
export const TaskRunLogEntry_CommandExecute_CommandResponseSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 20, 1, 0);

/**
 * Describes the message bytebase.v1.TaskRunLogEntry.DatabaseSync.
 * Use `create(TaskRunLogEntry_DatabaseSyncSchema)` to create a new message.
 */
export const TaskRunLogEntry_DatabaseSyncSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 20, 2);

/**
 * Describes the message bytebase.v1.TaskRunLogEntry.TaskRunStatusUpdate.
 * Use `create(TaskRunLogEntry_TaskRunStatusUpdateSchema)` to create a new message.
 */
export const TaskRunLogEntry_TaskRunStatusUpdateSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 20, 3);

/**
 * Describes the enum bytebase.v1.TaskRunLogEntry.TaskRunStatusUpdate.Status.
 */
export const TaskRunLogEntry_TaskRunStatusUpdate_StatusSchema = /*@__PURE__*/
  enumDesc(file_v1_rollout_service, 20, 3, 0);

/**
 * @generated from enum bytebase.v1.TaskRunLogEntry.TaskRunStatusUpdate.Status
 */
export const TaskRunLogEntry_TaskRunStatusUpdate_Status = /*@__PURE__*/
  tsEnum(TaskRunLogEntry_TaskRunStatusUpdate_StatusSchema);

/**
 * Describes the message bytebase.v1.TaskRunLogEntry.TransactionControl.
 * Use `create(TaskRunLogEntry_TransactionControlSchema)` to create a new message.
 */
export const TaskRunLogEntry_TransactionControlSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 20, 4);

/**
 * Describes the enum bytebase.v1.TaskRunLogEntry.TransactionControl.Type.
 */
export const TaskRunLogEntry_TransactionControl_TypeSchema = /*@__PURE__*/
  enumDesc(file_v1_rollout_service, 20, 4, 0);

/**
 * @generated from enum bytebase.v1.TaskRunLogEntry.TransactionControl.Type
 */
export const TaskRunLogEntry_TransactionControl_Type = /*@__PURE__*/
  tsEnum(TaskRunLogEntry_TransactionControl_TypeSchema);

/**
 * Describes the message bytebase.v1.TaskRunLogEntry.PriorBackup.
 * Use `create(TaskRunLogEntry_PriorBackupSchema)` to create a new message.
 */
export const TaskRunLogEntry_PriorBackupSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 20, 5);

/**
 * Describes the message bytebase.v1.TaskRunLogEntry.RetryInfo.
 * Use `create(TaskRunLogEntry_RetryInfoSchema)` to create a new message.
 */
export const TaskRunLogEntry_RetryInfoSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 20, 6);

/**
 * Describes the message bytebase.v1.TaskRunLogEntry.ComputeDiff.
 * Use `create(TaskRunLogEntry_ComputeDiffSchema)` to create a new message.
 */
export const TaskRunLogEntry_ComputeDiffSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 20, 7);

/**
 * Describes the enum bytebase.v1.TaskRunLogEntry.Type.
 */
export const TaskRunLogEntry_TypeSchema = /*@__PURE__*/
  enumDesc(file_v1_rollout_service, 20, 0);

/**
 * @generated from enum bytebase.v1.TaskRunLogEntry.Type
 */
export const TaskRunLogEntry_Type = /*@__PURE__*/
  tsEnum(TaskRunLogEntry_TypeSchema);

/**
 * Describes the message bytebase.v1.GetTaskRunSessionRequest.
 * Use `create(GetTaskRunSessionRequestSchema)` to create a new message.
 */
export const GetTaskRunSessionRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 21);

/**
 * Describes the message bytebase.v1.TaskRunSession.
 * Use `create(TaskRunSessionSchema)` to create a new message.
 */
export const TaskRunSessionSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 22);

/**
 * Describes the message bytebase.v1.TaskRunSession.Postgres.
 * Use `create(TaskRunSession_PostgresSchema)` to create a new message.
 */
export const TaskRunSession_PostgresSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 22, 0);

/**
 * Describes the message bytebase.v1.TaskRunSession.Postgres.Session.
 * Use `create(TaskRunSession_Postgres_SessionSchema)` to create a new message.
 */
export const TaskRunSession_Postgres_SessionSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 22, 0, 0);

/**
 * Describes the message bytebase.v1.PreviewTaskRunRollbackRequest.
 * Use `create(PreviewTaskRunRollbackRequestSchema)` to create a new message.
 */
export const PreviewTaskRunRollbackRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 23);

/**
 * Describes the message bytebase.v1.PreviewTaskRunRollbackResponse.
 * Use `create(PreviewTaskRunRollbackResponseSchema)` to create a new message.
 */
export const PreviewTaskRunRollbackResponseSchema = /*@__PURE__*/
  messageDesc(file_v1_rollout_service, 24);

/**
 * @generated from service bytebase.v1.RolloutService
 */
export const RolloutService = /*@__PURE__*/
  serviceDesc(file_v1_rollout_service, 0);

