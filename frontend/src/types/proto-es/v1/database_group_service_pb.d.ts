// @generated by protoc-gen-es v2.5.2
// @generated from file v1/database_group_service.proto (package bytebase.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";
import type { EmptySchema, FieldMask } from "@bufbuild/protobuf/wkt";
import type { Expr } from "../google/type/expr_pb";

/**
 * Describes the file v1/database_group_service.proto.
 */
export declare const file_v1_database_group_service: GenFile;

/**
 * @generated from message bytebase.v1.ListDatabaseGroupsRequest
 */
export declare type ListDatabaseGroupsRequest = Message<"bytebase.v1.ListDatabaseGroupsRequest"> & {
  /**
   * The parent resource whose database groups are to be listed.
   * Format: projects/{project}
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * Not used.
   * The maximum number of database groups to return. The service may return fewer than
   * this value.
   * If unspecified, at most 50 database groups will be returned.
   * The maximum value is 1000; values above 1000 will be coerced to 1000.
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize: number;

  /**
   * Not used.
   * A page token, received from a previous `ListDatabaseGroups` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListDatabaseGroups` must match
   * the call that provided the page token.
   *
   * @generated from field: string page_token = 3;
   */
  pageToken: string;

  /**
   * The view to return. Defaults to DATABASE_GROUP_VIEW_BASIC.
   *
   * @generated from field: bytebase.v1.DatabaseGroupView view = 4;
   */
  view: DatabaseGroupView;
};

/**
 * Describes the message bytebase.v1.ListDatabaseGroupsRequest.
 * Use `create(ListDatabaseGroupsRequestSchema)` to create a new message.
 */
export declare const ListDatabaseGroupsRequestSchema: GenMessage<ListDatabaseGroupsRequest>;

/**
 * @generated from message bytebase.v1.ListDatabaseGroupsResponse
 */
export declare type ListDatabaseGroupsResponse = Message<"bytebase.v1.ListDatabaseGroupsResponse"> & {
  /**
   * database_groups is the list of database groups.
   *
   * @generated from field: repeated bytebase.v1.DatabaseGroup database_groups = 1;
   */
  databaseGroups: DatabaseGroup[];

  /**
   * Not used. A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message bytebase.v1.ListDatabaseGroupsResponse.
 * Use `create(ListDatabaseGroupsResponseSchema)` to create a new message.
 */
export declare const ListDatabaseGroupsResponseSchema: GenMessage<ListDatabaseGroupsResponse>;

/**
 * @generated from message bytebase.v1.GetDatabaseGroupRequest
 */
export declare type GetDatabaseGroupRequest = Message<"bytebase.v1.GetDatabaseGroupRequest"> & {
  /**
   * The name of the database group to retrieve.
   * Format: projects/{project}/databaseGroups/{databaseGroup}
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The view to return. Defaults to DATABASE_GROUP_VIEW_BASIC.
   *
   * @generated from field: bytebase.v1.DatabaseGroupView view = 2;
   */
  view: DatabaseGroupView;
};

/**
 * Describes the message bytebase.v1.GetDatabaseGroupRequest.
 * Use `create(GetDatabaseGroupRequestSchema)` to create a new message.
 */
export declare const GetDatabaseGroupRequestSchema: GenMessage<GetDatabaseGroupRequest>;

/**
 * @generated from message bytebase.v1.CreateDatabaseGroupRequest
 */
export declare type CreateDatabaseGroupRequest = Message<"bytebase.v1.CreateDatabaseGroupRequest"> & {
  /**
   * The parent resource where this database group will be created.
   * Format: projects/{project}
   *
   * @generated from field: string parent = 1;
   */
  parent: string;

  /**
   * The database group to create.
   *
   * @generated from field: bytebase.v1.DatabaseGroup database_group = 2;
   */
  databaseGroup?: DatabaseGroup;

  /**
   * The ID to use for the database group, which will become the final component of
   * the database group's resource name.
   *
   * This value should be 4-63 characters, and valid characters
   * are /[a-z][0-9]-/.
   *
   * @generated from field: string database_group_id = 3;
   */
  databaseGroupId: string;

  /**
   * If set, validate the create request and preview the full database group response, but do not actually create it.
   *
   * @generated from field: bool validate_only = 4;
   */
  validateOnly: boolean;
};

/**
 * Describes the message bytebase.v1.CreateDatabaseGroupRequest.
 * Use `create(CreateDatabaseGroupRequestSchema)` to create a new message.
 */
export declare const CreateDatabaseGroupRequestSchema: GenMessage<CreateDatabaseGroupRequest>;

/**
 * @generated from message bytebase.v1.UpdateDatabaseGroupRequest
 */
export declare type UpdateDatabaseGroupRequest = Message<"bytebase.v1.UpdateDatabaseGroupRequest"> & {
  /**
   * The database group to update.
   *
   * The database group's `name` field is used to identify the database group to update.
   * Format: projects/{project}/databaseGroups/{databaseGroup}
   *
   * @generated from field: bytebase.v1.DatabaseGroup database_group = 1;
   */
  databaseGroup?: DatabaseGroup;

  /**
   * The list of fields to update.
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 2;
   */
  updateMask?: FieldMask;
};

/**
 * Describes the message bytebase.v1.UpdateDatabaseGroupRequest.
 * Use `create(UpdateDatabaseGroupRequestSchema)` to create a new message.
 */
export declare const UpdateDatabaseGroupRequestSchema: GenMessage<UpdateDatabaseGroupRequest>;

/**
 * @generated from message bytebase.v1.DeleteDatabaseGroupRequest
 */
export declare type DeleteDatabaseGroupRequest = Message<"bytebase.v1.DeleteDatabaseGroupRequest"> & {
  /**
   * The name of the database group to delete.
   * Format: projects/{project}/databaseGroups/{databaseGroup}
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message bytebase.v1.DeleteDatabaseGroupRequest.
 * Use `create(DeleteDatabaseGroupRequestSchema)` to create a new message.
 */
export declare const DeleteDatabaseGroupRequestSchema: GenMessage<DeleteDatabaseGroupRequest>;

/**
 * @generated from message bytebase.v1.DatabaseGroup
 */
export declare type DatabaseGroup = Message<"bytebase.v1.DatabaseGroup"> & {
  /**
   * The name of the database group.
   * Format: projects/{project}/databaseGroups/{databaseGroup}
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The short name used in actual databases specified by users.
   *
   * @generated from field: string title = 2;
   */
  title: string;

  /**
   * The condition that is associated with this database group.
   * The syntax and semantics of CEL are documented at https://github.com/google/cel-spec
   *
   * Support variables:
   * resource.environment_name: the environment resource id. Support "==", "!=", "in [XX]", "!(in [xx])" operations.
   * resource.instance_id: the instance resource id. Support "==", "!=", "in [XX]", "!(in [xx])", "contains", "matches", "startsWith", "endsWith" operations.
   * resource.database_name: the database name. Support "==", "!=", "in [XX]", "!(in [xx])", "contains", "matches", "startsWith", "endsWith" operations.
   * All variables should join with "&&" condition.
   *
   * For example:
   * resource.environment_name == "test" && resource.database_name.startsWith("sample_")
   *
   * @generated from field: google.type.Expr database_expr = 3;
   */
  databaseExpr?: Expr;

  /**
   * The list of databases that match the database group condition.
   *
   * @generated from field: repeated bytebase.v1.DatabaseGroup.Database matched_databases = 4;
   */
  matchedDatabases: DatabaseGroup_Database[];

  /**
   * The list of databases that match the database group condition.
   *
   * @generated from field: repeated bytebase.v1.DatabaseGroup.Database unmatched_databases = 5;
   */
  unmatchedDatabases: DatabaseGroup_Database[];
};

/**
 * Describes the message bytebase.v1.DatabaseGroup.
 * Use `create(DatabaseGroupSchema)` to create a new message.
 */
export declare const DatabaseGroupSchema: GenMessage<DatabaseGroup>;

/**
 * @generated from message bytebase.v1.DatabaseGroup.Database
 */
export declare type DatabaseGroup_Database = Message<"bytebase.v1.DatabaseGroup.Database"> & {
  /**
   * The resource name of the database.
   * Format: instances/{instance}/databases/{database}
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message bytebase.v1.DatabaseGroup.Database.
 * Use `create(DatabaseGroup_DatabaseSchema)` to create a new message.
 */
export declare const DatabaseGroup_DatabaseSchema: GenMessage<DatabaseGroup_Database>;

/**
 * @generated from enum bytebase.v1.DatabaseGroupView
 */
export enum DatabaseGroupView {
  /**
   * The default / unset value.
   * The API will default to the BASIC view.
   *
   * @generated from enum value: DATABASE_GROUP_VIEW_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Include basic information about the database group, but exclude the list of matched databases and unmatched databases.
   *
   * @generated from enum value: DATABASE_GROUP_VIEW_BASIC = 1;
   */
  BASIC = 1,

  /**
   * Include everything.
   *
   * @generated from enum value: DATABASE_GROUP_VIEW_FULL = 2;
   */
  FULL = 2,
}

/**
 * Describes the enum bytebase.v1.DatabaseGroupView.
 */
export declare const DatabaseGroupViewSchema: GenEnum<DatabaseGroupView>;

/**
 * @generated from service bytebase.v1.DatabaseGroupService
 */
export declare const DatabaseGroupService: GenService<{
  /**
   * @generated from rpc bytebase.v1.DatabaseGroupService.ListDatabaseGroups
   */
  listDatabaseGroups: {
    methodKind: "unary";
    input: typeof ListDatabaseGroupsRequestSchema;
    output: typeof ListDatabaseGroupsResponseSchema;
  },
  /**
   * @generated from rpc bytebase.v1.DatabaseGroupService.GetDatabaseGroup
   */
  getDatabaseGroup: {
    methodKind: "unary";
    input: typeof GetDatabaseGroupRequestSchema;
    output: typeof DatabaseGroupSchema;
  },
  /**
   * @generated from rpc bytebase.v1.DatabaseGroupService.CreateDatabaseGroup
   */
  createDatabaseGroup: {
    methodKind: "unary";
    input: typeof CreateDatabaseGroupRequestSchema;
    output: typeof DatabaseGroupSchema;
  },
  /**
   * @generated from rpc bytebase.v1.DatabaseGroupService.UpdateDatabaseGroup
   */
  updateDatabaseGroup: {
    methodKind: "unary";
    input: typeof UpdateDatabaseGroupRequestSchema;
    output: typeof DatabaseGroupSchema;
  },
  /**
   * @generated from rpc bytebase.v1.DatabaseGroupService.DeleteDatabaseGroup
   */
  deleteDatabaseGroup: {
    methodKind: "unary";
    input: typeof DeleteDatabaseGroupRequestSchema;
    output: typeof EmptySchema;
  },
}>;

