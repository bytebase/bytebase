// @generated by protoc-gen-es v2.5.2
// @generated from file v1/setting_service.proto (package bytebase.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import type { Message } from "@bufbuild/protobuf";
import type { Duration, FieldMask } from "@bufbuild/protobuf/wkt";
import type { ApprovalTemplate } from "./issue_service_pb";
import type { Expr } from "../google/type/expr_pb";
import type { Engine } from "./common_pb";
import type { ColumnMetadata, TableMetadata } from "./database_service_pb";
import type { ColumnCatalog, TableCatalog } from "./database_catalog_service_pb";

/**
 * Describes the file v1/setting_service.proto.
 */
export declare const file_v1_setting_service: GenFile;

/**
 * @generated from message bytebase.v1.ListSettingsRequest
 */
export declare type ListSettingsRequest = Message<"bytebase.v1.ListSettingsRequest"> & {
  /**
   * Not used.
   * The maximum number of settings to return. The service may return fewer than
   * this value.
   * If unspecified, at most 10 settings will be returned.
   * The maximum value is 1000; values above 1000 will be coerced to 1000.
   *
   * @generated from field: int32 page_size = 1;
   */
  pageSize: number;

  /**
   * Not used.
   * A page token, received from a previous `ListSettings` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListSettings` must match
   * the call that provided the page token.
   *
   * @generated from field: string page_token = 2;
   */
  pageToken: string;
};

/**
 * Describes the message bytebase.v1.ListSettingsRequest.
 * Use `create(ListSettingsRequestSchema)` to create a new message.
 */
export declare const ListSettingsRequestSchema: GenMessage<ListSettingsRequest>;

/**
 * @generated from message bytebase.v1.ListSettingsResponse
 */
export declare type ListSettingsResponse = Message<"bytebase.v1.ListSettingsResponse"> & {
  /**
   * The settings from the specified request.
   *
   * @generated from field: repeated bytebase.v1.Setting settings = 1;
   */
  settings: Setting[];

  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   *
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken: string;
};

/**
 * Describes the message bytebase.v1.ListSettingsResponse.
 * Use `create(ListSettingsResponseSchema)` to create a new message.
 */
export declare const ListSettingsResponseSchema: GenMessage<ListSettingsResponse>;

/**
 * The request message for getting a setting.
 *
 * @generated from message bytebase.v1.GetSettingRequest
 */
export declare type GetSettingRequest = Message<"bytebase.v1.GetSettingRequest"> & {
  /**
   * The resource name of the setting.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message bytebase.v1.GetSettingRequest.
 * Use `create(GetSettingRequestSchema)` to create a new message.
 */
export declare const GetSettingRequestSchema: GenMessage<GetSettingRequest>;

/**
 * The response message for getting a setting.
 *
 * @generated from message bytebase.v1.GetSettingResponse
 */
export declare type GetSettingResponse = Message<"bytebase.v1.GetSettingResponse"> & {
  /**
   * @generated from field: bytebase.v1.Setting setting = 1;
   */
  setting?: Setting;
};

/**
 * Describes the message bytebase.v1.GetSettingResponse.
 * Use `create(GetSettingResponseSchema)` to create a new message.
 */
export declare const GetSettingResponseSchema: GenMessage<GetSettingResponse>;

/**
 * The request message for updating or creating a setting.
 *
 * @generated from message bytebase.v1.UpdateSettingRequest
 */
export declare type UpdateSettingRequest = Message<"bytebase.v1.UpdateSettingRequest"> & {
  /**
   * The setting to update.
   *
   * @generated from field: bytebase.v1.Setting setting = 1;
   */
  setting?: Setting;

  /**
   * validate_only is a flag to indicate whether to validate the setting value,
   * server would not persist the setting value if it is true.
   *
   * @generated from field: bool validate_only = 2;
   */
  validateOnly: boolean;

  /**
   * @generated from field: bool allow_missing = 3;
   */
  allowMissing: boolean;

  /**
   * @generated from field: google.protobuf.FieldMask update_mask = 4;
   */
  updateMask?: FieldMask;
};

/**
 * Describes the message bytebase.v1.UpdateSettingRequest.
 * Use `create(UpdateSettingRequestSchema)` to create a new message.
 */
export declare const UpdateSettingRequestSchema: GenMessage<UpdateSettingRequest>;

/**
 * The schema of setting.
 *
 * @generated from message bytebase.v1.Setting
 */
export declare type Setting = Message<"bytebase.v1.Setting"> & {
  /**
   * The resource name of the setting. Must be one of the following forms:
   *
   * - `setting/{setting}`
   * For example, "settings/bb.branding.logo"
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The value of the setting.
   *
   * @generated from field: bytebase.v1.Value value = 2;
   */
  value?: Value;
};

/**
 * Describes the message bytebase.v1.Setting.
 * Use `create(SettingSchema)` to create a new message.
 */
export declare const SettingSchema: GenMessage<Setting>;

/**
 * @generated from enum bytebase.v1.Setting.SettingName
 */
export enum Setting_SettingName {
  /**
   * @generated from enum value: SETTING_NAME_UNSPECIFIED = 0;
   */
  SETTING_NAME_UNSPECIFIED = 0,

  /**
   * @generated from enum value: AUTH_SECRET = 1;
   */
  AUTH_SECRET = 1,

  /**
   * @generated from enum value: BRANDING_LOGO = 2;
   */
  BRANDING_LOGO = 2,

  /**
   * @generated from enum value: WORKSPACE_ID = 3;
   */
  WORKSPACE_ID = 3,

  /**
   * @generated from enum value: WORKSPACE_PROFILE = 4;
   */
  WORKSPACE_PROFILE = 4,

  /**
   * @generated from enum value: WORKSPACE_APPROVAL = 5;
   */
  WORKSPACE_APPROVAL = 5,

  /**
   * @generated from enum value: WORKSPACE_EXTERNAL_APPROVAL = 6;
   */
  WORKSPACE_EXTERNAL_APPROVAL = 6,

  /**
   * @generated from enum value: ENTERPRISE_LICENSE = 7;
   */
  ENTERPRISE_LICENSE = 7,

  /**
   * @generated from enum value: APP_IM = 8;
   */
  APP_IM = 8,

  /**
   * @generated from enum value: WATERMARK = 9;
   */
  WATERMARK = 9,

  /**
   * @generated from enum value: AI = 10;
   */
  AI = 10,

  /**
   * @generated from enum value: PLUGIN_AGENT = 11;
   */
  PLUGIN_AGENT = 11,

  /**
   * @generated from enum value: SCHEMA_TEMPLATE = 13;
   */
  SCHEMA_TEMPLATE = 13,

  /**
   * @generated from enum value: DATA_CLASSIFICATION = 14;
   */
  DATA_CLASSIFICATION = 14,

  /**
   * @generated from enum value: SEMANTIC_TYPES = 15;
   */
  SEMANTIC_TYPES = 15,

  /**
   * @generated from enum value: SQL_RESULT_SIZE_LIMIT = 16;
   */
  SQL_RESULT_SIZE_LIMIT = 16,

  /**
   * @generated from enum value: SCIM = 17;
   */
  SCIM = 17,

  /**
   * @generated from enum value: PASSWORD_RESTRICTION = 18;
   */
  PASSWORD_RESTRICTION = 18,

  /**
   * @generated from enum value: ENVIRONMENT = 19;
   */
  ENVIRONMENT = 19,
}

/**
 * Describes the enum bytebase.v1.Setting.SettingName.
 */
export declare const Setting_SettingNameSchema: GenEnum<Setting_SettingName>;

/**
 * The data in setting value.
 *
 * @generated from message bytebase.v1.Value
 */
export declare type Value = Message<"bytebase.v1.Value"> & {
  /**
   * Value is a oneof field for setting value.
   *
   * @generated from oneof bytebase.v1.Value.value
   */
  value: {
    /**
     * Defines this value as being a string value.
     *
     * @generated from field: string string_value = 1;
     */
    value: string;
    case: "stringValue";
  } | {
    /**
     * @generated from field: bytebase.v1.AppIMSetting app_im_setting_value = 3;
     */
    value: AppIMSetting;
    case: "appImSettingValue";
  } | {
    /**
     * @generated from field: bytebase.v1.AgentPluginSetting agent_plugin_setting_value = 4;
     */
    value: AgentPluginSetting;
    case: "agentPluginSettingValue";
  } | {
    /**
     * @generated from field: bytebase.v1.WorkspaceProfileSetting workspace_profile_setting_value = 5;
     */
    value: WorkspaceProfileSetting;
    case: "workspaceProfileSettingValue";
  } | {
    /**
     * @generated from field: bytebase.v1.WorkspaceApprovalSetting workspace_approval_setting_value = 6;
     */
    value: WorkspaceApprovalSetting;
    case: "workspaceApprovalSettingValue";
  } | {
    /**
     * @generated from field: bytebase.v1.SchemaTemplateSetting schema_template_setting_value = 9;
     */
    value: SchemaTemplateSetting;
    case: "schemaTemplateSettingValue";
  } | {
    /**
     * @generated from field: bytebase.v1.DataClassificationSetting data_classification_setting_value = 10;
     */
    value: DataClassificationSetting;
    case: "dataClassificationSettingValue";
  } | {
    /**
     * @generated from field: bytebase.v1.SemanticTypeSetting semantic_type_setting_value = 11;
     */
    value: SemanticTypeSetting;
    case: "semanticTypeSettingValue";
  } | {
    /**
     * @generated from field: bytebase.v1.MaximumSQLResultSizeSetting maximum_sql_result_size_setting = 13;
     */
    value: MaximumSQLResultSizeSetting;
    case: "maximumSqlResultSizeSetting";
  } | {
    /**
     * @generated from field: bytebase.v1.SCIMSetting scim_setting = 14;
     */
    value: SCIMSetting;
    case: "scimSetting";
  } | {
    /**
     * @generated from field: bytebase.v1.PasswordRestrictionSetting password_restriction_setting = 15;
     */
    value: PasswordRestrictionSetting;
    case: "passwordRestrictionSetting";
  } | {
    /**
     * @generated from field: bytebase.v1.AISetting ai_setting = 16;
     */
    value: AISetting;
    case: "aiSetting";
  } | {
    /**
     * @generated from field: bytebase.v1.EnvironmentSetting environment_setting = 17;
     */
    value: EnvironmentSetting;
    case: "environmentSetting";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message bytebase.v1.Value.
 * Use `create(ValueSchema)` to create a new message.
 */
export declare const ValueSchema: GenMessage<Value>;

/**
 * @generated from message bytebase.v1.AppIMSetting
 */
export declare type AppIMSetting = Message<"bytebase.v1.AppIMSetting"> & {
  /**
   * @generated from field: bytebase.v1.AppIMSetting.Slack slack = 1;
   */
  slack?: AppIMSetting_Slack;

  /**
   * @generated from field: bytebase.v1.AppIMSetting.Feishu feishu = 2;
   */
  feishu?: AppIMSetting_Feishu;

  /**
   * @generated from field: bytebase.v1.AppIMSetting.Wecom wecom = 3;
   */
  wecom?: AppIMSetting_Wecom;

  /**
   * @generated from field: bytebase.v1.AppIMSetting.Lark lark = 4;
   */
  lark?: AppIMSetting_Lark;

  /**
   * @generated from field: bytebase.v1.AppIMSetting.DingTalk dingtalk = 5;
   */
  dingtalk?: AppIMSetting_DingTalk;
};

/**
 * Describes the message bytebase.v1.AppIMSetting.
 * Use `create(AppIMSettingSchema)` to create a new message.
 */
export declare const AppIMSettingSchema: GenMessage<AppIMSetting>;

/**
 * @generated from message bytebase.v1.AppIMSetting.Slack
 */
export declare type AppIMSetting_Slack = Message<"bytebase.v1.AppIMSetting.Slack"> & {
  /**
   * @generated from field: bool enabled = 1;
   */
  enabled: boolean;

  /**
   * @generated from field: string token = 2;
   */
  token: string;
};

/**
 * Describes the message bytebase.v1.AppIMSetting.Slack.
 * Use `create(AppIMSetting_SlackSchema)` to create a new message.
 */
export declare const AppIMSetting_SlackSchema: GenMessage<AppIMSetting_Slack>;

/**
 * @generated from message bytebase.v1.AppIMSetting.Feishu
 */
export declare type AppIMSetting_Feishu = Message<"bytebase.v1.AppIMSetting.Feishu"> & {
  /**
   * @generated from field: bool enabled = 1;
   */
  enabled: boolean;

  /**
   * @generated from field: string app_id = 2;
   */
  appId: string;

  /**
   * @generated from field: string app_secret = 3;
   */
  appSecret: string;
};

/**
 * Describes the message bytebase.v1.AppIMSetting.Feishu.
 * Use `create(AppIMSetting_FeishuSchema)` to create a new message.
 */
export declare const AppIMSetting_FeishuSchema: GenMessage<AppIMSetting_Feishu>;

/**
 * @generated from message bytebase.v1.AppIMSetting.Wecom
 */
export declare type AppIMSetting_Wecom = Message<"bytebase.v1.AppIMSetting.Wecom"> & {
  /**
   * @generated from field: bool enabled = 1;
   */
  enabled: boolean;

  /**
   * @generated from field: string corp_id = 2;
   */
  corpId: string;

  /**
   * @generated from field: string agent_id = 3;
   */
  agentId: string;

  /**
   * @generated from field: string secret = 4;
   */
  secret: string;
};

/**
 * Describes the message bytebase.v1.AppIMSetting.Wecom.
 * Use `create(AppIMSetting_WecomSchema)` to create a new message.
 */
export declare const AppIMSetting_WecomSchema: GenMessage<AppIMSetting_Wecom>;

/**
 * @generated from message bytebase.v1.AppIMSetting.Lark
 */
export declare type AppIMSetting_Lark = Message<"bytebase.v1.AppIMSetting.Lark"> & {
  /**
   * @generated from field: bool enabled = 1;
   */
  enabled: boolean;

  /**
   * @generated from field: string app_id = 2;
   */
  appId: string;

  /**
   * @generated from field: string app_secret = 3;
   */
  appSecret: string;
};

/**
 * Describes the message bytebase.v1.AppIMSetting.Lark.
 * Use `create(AppIMSetting_LarkSchema)` to create a new message.
 */
export declare const AppIMSetting_LarkSchema: GenMessage<AppIMSetting_Lark>;

/**
 * @generated from message bytebase.v1.AppIMSetting.DingTalk
 */
export declare type AppIMSetting_DingTalk = Message<"bytebase.v1.AppIMSetting.DingTalk"> & {
  /**
   * @generated from field: bool enabled = 1;
   */
  enabled: boolean;

  /**
   * @generated from field: string client_id = 2;
   */
  clientId: string;

  /**
   * @generated from field: string client_secret = 3;
   */
  clientSecret: string;

  /**
   * @generated from field: string robot_code = 4;
   */
  robotCode: string;
};

/**
 * Describes the message bytebase.v1.AppIMSetting.DingTalk.
 * Use `create(AppIMSetting_DingTalkSchema)` to create a new message.
 */
export declare const AppIMSetting_DingTalkSchema: GenMessage<AppIMSetting_DingTalk>;

/**
 * @generated from message bytebase.v1.AgentPluginSetting
 */
export declare type AgentPluginSetting = Message<"bytebase.v1.AgentPluginSetting"> & {
  /**
   * The URL for the agent API.
   *
   * @generated from field: string url = 1;
   */
  url: string;

  /**
   * The token for the agent.
   *
   * @generated from field: string token = 2;
   */
  token: string;
};

/**
 * Describes the message bytebase.v1.AgentPluginSetting.
 * Use `create(AgentPluginSettingSchema)` to create a new message.
 */
export declare const AgentPluginSettingSchema: GenMessage<AgentPluginSetting>;

/**
 * @generated from message bytebase.v1.WorkspaceProfileSetting
 */
export declare type WorkspaceProfileSetting = Message<"bytebase.v1.WorkspaceProfileSetting"> & {
  /**
   * The external URL is used for sso authentication callback.
   *
   * @generated from field: string external_url = 1;
   */
  externalUrl: string;

  /**
   * Disallow self-service signup, users can only be invited by the owner.
   *
   * @generated from field: bool disallow_signup = 2;
   */
  disallowSignup: boolean;

  /**
   * Require 2FA for all users.
   *
   * @generated from field: bool require_2fa = 3;
   */
  require2fa: boolean;

  /**
   * outbound_ip_list is the outbound IP for Bytebase instance in SaaS mode.
   *
   * @generated from field: repeated string outbound_ip_list = 4;
   */
  outboundIpList: string[];

  /**
   * The duration for token.
   *
   * @generated from field: google.protobuf.Duration token_duration = 6;
   */
  tokenDuration?: Duration;

  /**
   * The setting of custom announcement
   *
   * @generated from field: bytebase.v1.Announcement announcement = 7;
   */
  announcement?: Announcement;

  /**
   * The max duration for role expired.
   *
   * @generated from field: google.protobuf.Duration maximum_role_expiration = 8;
   */
  maximumRoleExpiration?: Duration;

  /**
   * The workspace domain, e.g. bytebase.com.
   *
   * @generated from field: repeated string domains = 9;
   */
  domains: string[];

  /**
   * Only user and group from the domains can be created and login.
   *
   * @generated from field: bool enforce_identity_domain = 10;
   */
  enforceIdentityDomain: boolean;

  /**
   * The workspace database change mode.
   *
   * @generated from field: bytebase.v1.DatabaseChangeMode database_change_mode = 11;
   */
  databaseChangeMode: DatabaseChangeMode;

  /**
   * Whether to disallow password signin. (Except workspace admins)
   *
   * @generated from field: bool disallow_password_signin = 12;
   */
  disallowPasswordSignin: boolean;
};

/**
 * Describes the message bytebase.v1.WorkspaceProfileSetting.
 * Use `create(WorkspaceProfileSettingSchema)` to create a new message.
 */
export declare const WorkspaceProfileSettingSchema: GenMessage<WorkspaceProfileSetting>;

/**
 * @generated from message bytebase.v1.Announcement
 */
export declare type Announcement = Message<"bytebase.v1.Announcement"> & {
  /**
   * The alert level of announcemnt
   *
   * @generated from field: bytebase.v1.Announcement.AlertLevel level = 1;
   */
  level: Announcement_AlertLevel;

  /**
   * The text of announcemnt
   *
   * @generated from field: string text = 2;
   */
  text: string;

  /**
   * The optional link, user can follow the link to check extra details
   *
   * @generated from field: string link = 3;
   */
  link: string;
};

/**
 * Describes the message bytebase.v1.Announcement.
 * Use `create(AnnouncementSchema)` to create a new message.
 */
export declare const AnnouncementSchema: GenMessage<Announcement>;

/**
 * We support three levels of AlertLevel: INFO, WARNING, and ERROR.
 *
 * @generated from enum bytebase.v1.Announcement.AlertLevel
 */
export enum Announcement_AlertLevel {
  /**
   * @generated from enum value: ALERT_LEVEL_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: ALERT_LEVEL_INFO = 1;
   */
  INFO = 1,

  /**
   * @generated from enum value: ALERT_LEVEL_WARNING = 2;
   */
  WARNING = 2,

  /**
   * @generated from enum value: ALERT_LEVEL_CRITICAL = 3;
   */
  CRITICAL = 3,
}

/**
 * Describes the enum bytebase.v1.Announcement.AlertLevel.
 */
export declare const Announcement_AlertLevelSchema: GenEnum<Announcement_AlertLevel>;

/**
 * @generated from message bytebase.v1.WorkspaceApprovalSetting
 */
export declare type WorkspaceApprovalSetting = Message<"bytebase.v1.WorkspaceApprovalSetting"> & {
  /**
   * @generated from field: repeated bytebase.v1.WorkspaceApprovalSetting.Rule rules = 1;
   */
  rules: WorkspaceApprovalSetting_Rule[];
};

/**
 * Describes the message bytebase.v1.WorkspaceApprovalSetting.
 * Use `create(WorkspaceApprovalSettingSchema)` to create a new message.
 */
export declare const WorkspaceApprovalSettingSchema: GenMessage<WorkspaceApprovalSetting>;

/**
 * @generated from message bytebase.v1.WorkspaceApprovalSetting.Rule
 */
export declare type WorkspaceApprovalSetting_Rule = Message<"bytebase.v1.WorkspaceApprovalSetting.Rule"> & {
  /**
   * @generated from field: bytebase.v1.ApprovalTemplate template = 2;
   */
  template?: ApprovalTemplate;

  /**
   * The condition that is associated with the rule.
   * The syntax and semantics of CEL are documented at https://github.com/google/cel-spec
   *
   * Support variables:
   * source: the risk source, check the Source enum in the Risk message for the values, support "==" operator.
   * level: the risk level, support 100 (low), 200 (moderate) and 300 (high), support "==" operator.
   *
   * For examples:
   * (source == "DML" && level == 200) || (source == "DDL" && level == 300)
   *
   * @generated from field: google.type.Expr condition = 3;
   */
  condition?: Expr;
};

/**
 * Describes the message bytebase.v1.WorkspaceApprovalSetting.Rule.
 * Use `create(WorkspaceApprovalSetting_RuleSchema)` to create a new message.
 */
export declare const WorkspaceApprovalSetting_RuleSchema: GenMessage<WorkspaceApprovalSetting_Rule>;

/**
 * @generated from message bytebase.v1.SchemaTemplateSetting
 */
export declare type SchemaTemplateSetting = Message<"bytebase.v1.SchemaTemplateSetting"> & {
  /**
   * @generated from field: repeated bytebase.v1.SchemaTemplateSetting.FieldTemplate field_templates = 1;
   */
  fieldTemplates: SchemaTemplateSetting_FieldTemplate[];

  /**
   * @generated from field: repeated bytebase.v1.SchemaTemplateSetting.ColumnType column_types = 2;
   */
  columnTypes: SchemaTemplateSetting_ColumnType[];

  /**
   * @generated from field: repeated bytebase.v1.SchemaTemplateSetting.TableTemplate table_templates = 3;
   */
  tableTemplates: SchemaTemplateSetting_TableTemplate[];
};

/**
 * Describes the message bytebase.v1.SchemaTemplateSetting.
 * Use `create(SchemaTemplateSettingSchema)` to create a new message.
 */
export declare const SchemaTemplateSettingSchema: GenMessage<SchemaTemplateSetting>;

/**
 * @generated from message bytebase.v1.SchemaTemplateSetting.FieldTemplate
 */
export declare type SchemaTemplateSetting_FieldTemplate = Message<"bytebase.v1.SchemaTemplateSetting.FieldTemplate"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: bytebase.v1.Engine engine = 2;
   */
  engine: Engine;

  /**
   * @generated from field: string category = 3;
   */
  category: string;

  /**
   * @generated from field: bytebase.v1.ColumnMetadata column = 4;
   */
  column?: ColumnMetadata;

  /**
   * @generated from field: bytebase.v1.ColumnCatalog catalog = 5;
   */
  catalog?: ColumnCatalog;
};

/**
 * Describes the message bytebase.v1.SchemaTemplateSetting.FieldTemplate.
 * Use `create(SchemaTemplateSetting_FieldTemplateSchema)` to create a new message.
 */
export declare const SchemaTemplateSetting_FieldTemplateSchema: GenMessage<SchemaTemplateSetting_FieldTemplate>;

/**
 * @generated from message bytebase.v1.SchemaTemplateSetting.ColumnType
 */
export declare type SchemaTemplateSetting_ColumnType = Message<"bytebase.v1.SchemaTemplateSetting.ColumnType"> & {
  /**
   * @generated from field: bytebase.v1.Engine engine = 1;
   */
  engine: Engine;

  /**
   * @generated from field: bool enabled = 2;
   */
  enabled: boolean;

  /**
   * @generated from field: repeated string types = 3;
   */
  types: string[];
};

/**
 * Describes the message bytebase.v1.SchemaTemplateSetting.ColumnType.
 * Use `create(SchemaTemplateSetting_ColumnTypeSchema)` to create a new message.
 */
export declare const SchemaTemplateSetting_ColumnTypeSchema: GenMessage<SchemaTemplateSetting_ColumnType>;

/**
 * @generated from message bytebase.v1.SchemaTemplateSetting.TableTemplate
 */
export declare type SchemaTemplateSetting_TableTemplate = Message<"bytebase.v1.SchemaTemplateSetting.TableTemplate"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: bytebase.v1.Engine engine = 2;
   */
  engine: Engine;

  /**
   * @generated from field: string category = 3;
   */
  category: string;

  /**
   * @generated from field: bytebase.v1.TableMetadata table = 4;
   */
  table?: TableMetadata;

  /**
   * @generated from field: bytebase.v1.TableCatalog catalog = 5;
   */
  catalog?: TableCatalog;
};

/**
 * Describes the message bytebase.v1.SchemaTemplateSetting.TableTemplate.
 * Use `create(SchemaTemplateSetting_TableTemplateSchema)` to create a new message.
 */
export declare const SchemaTemplateSetting_TableTemplateSchema: GenMessage<SchemaTemplateSetting_TableTemplate>;

/**
 * @generated from message bytebase.v1.DataClassificationSetting
 */
export declare type DataClassificationSetting = Message<"bytebase.v1.DataClassificationSetting"> & {
  /**
   * @generated from field: repeated bytebase.v1.DataClassificationSetting.DataClassificationConfig configs = 1;
   */
  configs: DataClassificationSetting_DataClassificationConfig[];
};

/**
 * Describes the message bytebase.v1.DataClassificationSetting.
 * Use `create(DataClassificationSettingSchema)` to create a new message.
 */
export declare const DataClassificationSettingSchema: GenMessage<DataClassificationSetting>;

/**
 * @generated from message bytebase.v1.DataClassificationSetting.DataClassificationConfig
 */
export declare type DataClassificationSetting_DataClassificationConfig = Message<"bytebase.v1.DataClassificationSetting.DataClassificationConfig"> & {
  /**
   * id is the uuid for classification. Each project can chose one classification config.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string title = 2;
   */
  title: string;

  /**
   * levels is user defined level list for classification.
   * The order for the level decides its priority.
   *
   * @generated from field: repeated bytebase.v1.DataClassificationSetting.DataClassificationConfig.Level levels = 3;
   */
  levels: DataClassificationSetting_DataClassificationConfig_Level[];

  /**
   * classification is the id - DataClassification map.
   * The id should in [0-9]+-[0-9]+-[0-9]+ format.
   *
   * @generated from field: map<string, bytebase.v1.DataClassificationSetting.DataClassificationConfig.DataClassification> classification = 4;
   */
  classification: { [key: string]: DataClassificationSetting_DataClassificationConfig_DataClassification };

  /**
   * If true, we will only store the classification in the config.
   * Otherwise we will get the classification from table/column comment,
   * and write back to the schema metadata.
   *
   * @generated from field: bool classification_from_config = 5;
   */
  classificationFromConfig: boolean;
};

/**
 * Describes the message bytebase.v1.DataClassificationSetting.DataClassificationConfig.
 * Use `create(DataClassificationSetting_DataClassificationConfigSchema)` to create a new message.
 */
export declare const DataClassificationSetting_DataClassificationConfigSchema: GenMessage<DataClassificationSetting_DataClassificationConfig>;

/**
 * @generated from message bytebase.v1.DataClassificationSetting.DataClassificationConfig.Level
 */
export declare type DataClassificationSetting_DataClassificationConfig_Level = Message<"bytebase.v1.DataClassificationSetting.DataClassificationConfig.Level"> & {
  /**
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string title = 2;
   */
  title: string;

  /**
   * @generated from field: string description = 3;
   */
  description: string;
};

/**
 * Describes the message bytebase.v1.DataClassificationSetting.DataClassificationConfig.Level.
 * Use `create(DataClassificationSetting_DataClassificationConfig_LevelSchema)` to create a new message.
 */
export declare const DataClassificationSetting_DataClassificationConfig_LevelSchema: GenMessage<DataClassificationSetting_DataClassificationConfig_Level>;

/**
 * @generated from message bytebase.v1.DataClassificationSetting.DataClassificationConfig.DataClassification
 */
export declare type DataClassificationSetting_DataClassificationConfig_DataClassification = Message<"bytebase.v1.DataClassificationSetting.DataClassificationConfig.DataClassification"> & {
  /**
   * id is the classification id in [0-9]+-[0-9]+-[0-9]+ format.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * @generated from field: string title = 2;
   */
  title: string;

  /**
   * @generated from field: string description = 3;
   */
  description: string;

  /**
   * @generated from field: optional string level_id = 4;
   */
  levelId?: string;
};

/**
 * Describes the message bytebase.v1.DataClassificationSetting.DataClassificationConfig.DataClassification.
 * Use `create(DataClassificationSetting_DataClassificationConfig_DataClassificationSchema)` to create a new message.
 */
export declare const DataClassificationSetting_DataClassificationConfig_DataClassificationSchema: GenMessage<DataClassificationSetting_DataClassificationConfig_DataClassification>;

/**
 * @generated from message bytebase.v1.SemanticTypeSetting
 */
export declare type SemanticTypeSetting = Message<"bytebase.v1.SemanticTypeSetting"> & {
  /**
   * @generated from field: repeated bytebase.v1.SemanticTypeSetting.SemanticType types = 1;
   */
  types: SemanticTypeSetting_SemanticType[];
};

/**
 * Describes the message bytebase.v1.SemanticTypeSetting.
 * Use `create(SemanticTypeSettingSchema)` to create a new message.
 */
export declare const SemanticTypeSettingSchema: GenMessage<SemanticTypeSetting>;

/**
 * @generated from message bytebase.v1.SemanticTypeSetting.SemanticType
 */
export declare type SemanticTypeSetting_SemanticType = Message<"bytebase.v1.SemanticTypeSetting.SemanticType"> & {
  /**
   * id is the uuid for semantic type.
   *
   * @generated from field: string id = 1;
   */
  id: string;

  /**
   * the title of the semantic type, it should not be empty.
   *
   * @generated from field: string title = 2;
   */
  title: string;

  /**
   * the description of the semantic type, it can be empty.
   *
   * @generated from field: string description = 3;
   */
  description: string;

  /**
   * @generated from field: bytebase.v1.Algorithm algorithm = 6;
   */
  algorithm?: Algorithm;
};

/**
 * Describes the message bytebase.v1.SemanticTypeSetting.SemanticType.
 * Use `create(SemanticTypeSetting_SemanticTypeSchema)` to create a new message.
 */
export declare const SemanticTypeSetting_SemanticTypeSchema: GenMessage<SemanticTypeSetting_SemanticType>;

/**
 * @generated from message bytebase.v1.Algorithm
 */
export declare type Algorithm = Message<"bytebase.v1.Algorithm"> & {
  /**
   * @generated from oneof bytebase.v1.Algorithm.mask
   */
  mask: {
    /**
     * @generated from field: bytebase.v1.Algorithm.FullMask full_mask = 5;
     */
    value: Algorithm_FullMask;
    case: "fullMask";
  } | {
    /**
     * @generated from field: bytebase.v1.Algorithm.RangeMask range_mask = 6;
     */
    value: Algorithm_RangeMask;
    case: "rangeMask";
  } | {
    /**
     * @generated from field: bytebase.v1.Algorithm.MD5Mask md5_mask = 7;
     */
    value: Algorithm_MD5Mask;
    case: "md5Mask";
  } | {
    /**
     * @generated from field: bytebase.v1.Algorithm.InnerOuterMask inner_outer_mask = 8;
     */
    value: Algorithm_InnerOuterMask;
    case: "innerOuterMask";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message bytebase.v1.Algorithm.
 * Use `create(AlgorithmSchema)` to create a new message.
 */
export declare const AlgorithmSchema: GenMessage<Algorithm>;

/**
 * @generated from message bytebase.v1.Algorithm.FullMask
 */
export declare type Algorithm_FullMask = Message<"bytebase.v1.Algorithm.FullMask"> & {
  /**
   * substitution is the string used to replace the original value, the
   * max length of the string is 16 bytes.
   *
   * @generated from field: string substitution = 1;
   */
  substitution: string;
};

/**
 * Describes the message bytebase.v1.Algorithm.FullMask.
 * Use `create(Algorithm_FullMaskSchema)` to create a new message.
 */
export declare const Algorithm_FullMaskSchema: GenMessage<Algorithm_FullMask>;

/**
 * @generated from message bytebase.v1.Algorithm.RangeMask
 */
export declare type Algorithm_RangeMask = Message<"bytebase.v1.Algorithm.RangeMask"> & {
  /**
   * We store it as a repeated field to face the fact that the original value may have multiple parts should be masked.
   * But frontend can be started with a single rule easily.
   *
   * @generated from field: repeated bytebase.v1.Algorithm.RangeMask.Slice slices = 1;
   */
  slices: Algorithm_RangeMask_Slice[];
};

/**
 * Describes the message bytebase.v1.Algorithm.RangeMask.
 * Use `create(Algorithm_RangeMaskSchema)` to create a new message.
 */
export declare const Algorithm_RangeMaskSchema: GenMessage<Algorithm_RangeMask>;

/**
 * @generated from message bytebase.v1.Algorithm.RangeMask.Slice
 */
export declare type Algorithm_RangeMask_Slice = Message<"bytebase.v1.Algorithm.RangeMask.Slice"> & {
  /**
   * start is the start index of the original value, start from 0 and should be less than stop.
   *
   * @generated from field: int32 start = 1;
   */
  start: number;

  /**
   * stop is the stop index of the original value, should be less than the length of the original value.
   *
   * @generated from field: int32 end = 2;
   */
  end: number;

  /**
   * substitution is the string used to replace the OriginalValue[start:end).
   *
   * @generated from field: string substitution = 3;
   */
  substitution: string;
};

/**
 * Describes the message bytebase.v1.Algorithm.RangeMask.Slice.
 * Use `create(Algorithm_RangeMask_SliceSchema)` to create a new message.
 */
export declare const Algorithm_RangeMask_SliceSchema: GenMessage<Algorithm_RangeMask_Slice>;

/**
 * @generated from message bytebase.v1.Algorithm.MD5Mask
 */
export declare type Algorithm_MD5Mask = Message<"bytebase.v1.Algorithm.MD5Mask"> & {
  /**
   * salt is the salt value to generate a different hash that with the word alone.
   *
   * @generated from field: string salt = 1;
   */
  salt: string;
};

/**
 * Describes the message bytebase.v1.Algorithm.MD5Mask.
 * Use `create(Algorithm_MD5MaskSchema)` to create a new message.
 */
export declare const Algorithm_MD5MaskSchema: GenMessage<Algorithm_MD5Mask>;

/**
 * @generated from message bytebase.v1.Algorithm.InnerOuterMask
 */
export declare type Algorithm_InnerOuterMask = Message<"bytebase.v1.Algorithm.InnerOuterMask"> & {
  /**
   * @generated from field: int32 prefix_len = 1;
   */
  prefixLen: number;

  /**
   * @generated from field: int32 suffix_len = 2;
   */
  suffixLen: number;

  /**
   * @generated from field: bytebase.v1.Algorithm.InnerOuterMask.MaskType type = 3;
   */
  type: Algorithm_InnerOuterMask_MaskType;

  /**
   * @generated from field: string substitution = 4;
   */
  substitution: string;
};

/**
 * Describes the message bytebase.v1.Algorithm.InnerOuterMask.
 * Use `create(Algorithm_InnerOuterMaskSchema)` to create a new message.
 */
export declare const Algorithm_InnerOuterMaskSchema: GenMessage<Algorithm_InnerOuterMask>;

/**
 * @generated from enum bytebase.v1.Algorithm.InnerOuterMask.MaskType
 */
export enum Algorithm_InnerOuterMask_MaskType {
  /**
   * @generated from enum value: MASK_TYPE_UNSPECIFIED = 0;
   */
  MASK_TYPE_UNSPECIFIED = 0,

  /**
   * @generated from enum value: INNER = 1;
   */
  INNER = 1,

  /**
   * @generated from enum value: OUTER = 2;
   */
  OUTER = 2,
}

/**
 * Describes the enum bytebase.v1.Algorithm.InnerOuterMask.MaskType.
 */
export declare const Algorithm_InnerOuterMask_MaskTypeSchema: GenEnum<Algorithm_InnerOuterMask_MaskType>;

/**
 * @generated from message bytebase.v1.MaximumSQLResultSizeSetting
 */
export declare type MaximumSQLResultSizeSetting = Message<"bytebase.v1.MaximumSQLResultSizeSetting"> & {
  /**
   * The limit is in bytes.
   * The default value is 100MB, we will use the default value if the setting not exists, or the limit <= 0.
   *
   * @generated from field: int64 limit = 1;
   */
  limit: bigint;
};

/**
 * Describes the message bytebase.v1.MaximumSQLResultSizeSetting.
 * Use `create(MaximumSQLResultSizeSettingSchema)` to create a new message.
 */
export declare const MaximumSQLResultSizeSettingSchema: GenMessage<MaximumSQLResultSizeSetting>;

/**
 * @generated from message bytebase.v1.SCIMSetting
 */
export declare type SCIMSetting = Message<"bytebase.v1.SCIMSetting"> & {
  /**
   * @generated from field: string token = 1;
   */
  token: string;
};

/**
 * Describes the message bytebase.v1.SCIMSetting.
 * Use `create(SCIMSettingSchema)` to create a new message.
 */
export declare const SCIMSettingSchema: GenMessage<SCIMSetting>;

/**
 * @generated from message bytebase.v1.PasswordRestrictionSetting
 */
export declare type PasswordRestrictionSetting = Message<"bytebase.v1.PasswordRestrictionSetting"> & {
  /**
   * min_length is the minimum length for password, should no less than 8.
   *
   * @generated from field: int32 min_length = 1;
   */
  minLength: number;

  /**
   * require_number requires the password must contains at least one number.
   *
   * @generated from field: bool require_number = 2;
   */
  requireNumber: boolean;

  /**
   * require_letter requires the password must contains at least one letter, regardless of upper case or lower case
   *
   * @generated from field: bool require_letter = 3;
   */
  requireLetter: boolean;

  /**
   * require_uppercase_letter requires the password must contains at least one upper case letter.
   *
   * @generated from field: bool require_uppercase_letter = 4;
   */
  requireUppercaseLetter: boolean;

  /**
   * require_uppercase_letter requires the password must contains at least one special character.
   *
   * @generated from field: bool require_special_character = 5;
   */
  requireSpecialCharacter: boolean;

  /**
   * require_reset_password_for_first_login requires users to reset their password after the 1st login.
   *
   * @generated from field: bool require_reset_password_for_first_login = 6;
   */
  requireResetPasswordForFirstLogin: boolean;

  /**
   * password_rotation requires users to reset their password after the duration.
   *
   * @generated from field: google.protobuf.Duration password_rotation = 7;
   */
  passwordRotation?: Duration;
};

/**
 * Describes the message bytebase.v1.PasswordRestrictionSetting.
 * Use `create(PasswordRestrictionSettingSchema)` to create a new message.
 */
export declare const PasswordRestrictionSettingSchema: GenMessage<PasswordRestrictionSetting>;

/**
 * @generated from message bytebase.v1.AISetting
 */
export declare type AISetting = Message<"bytebase.v1.AISetting"> & {
  /**
   * @generated from field: bool enabled = 1;
   */
  enabled: boolean;

  /**
   * @generated from field: bytebase.v1.AISetting.Provider provider = 2;
   */
  provider: AISetting_Provider;

  /**
   * @generated from field: string endpoint = 3;
   */
  endpoint: string;

  /**
   * @generated from field: string api_key = 4;
   */
  apiKey: string;

  /**
   * @generated from field: string model = 5;
   */
  model: string;

  /**
   * @generated from field: string version = 6;
   */
  version: string;
};

/**
 * Describes the message bytebase.v1.AISetting.
 * Use `create(AISettingSchema)` to create a new message.
 */
export declare const AISettingSchema: GenMessage<AISetting>;

/**
 * @generated from enum bytebase.v1.AISetting.Provider
 */
export enum AISetting_Provider {
  /**
   * @generated from enum value: PROVIDER_UNSPECIFIED = 0;
   */
  PROVIDER_UNSPECIFIED = 0,

  /**
   * @generated from enum value: OPEN_AI = 1;
   */
  OPEN_AI = 1,

  /**
   * @generated from enum value: CLAUDE = 2;
   */
  CLAUDE = 2,

  /**
   * @generated from enum value: GEMINI = 3;
   */
  GEMINI = 3,

  /**
   * @generated from enum value: AZURE_OPENAI = 4;
   */
  AZURE_OPENAI = 4,
}

/**
 * Describes the enum bytebase.v1.AISetting.Provider.
 */
export declare const AISetting_ProviderSchema: GenEnum<AISetting_Provider>;

/**
 * @generated from message bytebase.v1.EnvironmentSetting
 */
export declare type EnvironmentSetting = Message<"bytebase.v1.EnvironmentSetting"> & {
  /**
   * @generated from field: repeated bytebase.v1.EnvironmentSetting.Environment environments = 1;
   */
  environments: EnvironmentSetting_Environment[];
};

/**
 * Describes the message bytebase.v1.EnvironmentSetting.
 * Use `create(EnvironmentSettingSchema)` to create a new message.
 */
export declare const EnvironmentSettingSchema: GenMessage<EnvironmentSetting>;

/**
 * @generated from message bytebase.v1.EnvironmentSetting.Environment
 */
export declare type EnvironmentSetting_Environment = Message<"bytebase.v1.EnvironmentSetting.Environment"> & {
  /**
   * The resource name of the environment.
   * Format: environments/{environment}.
   * Output only.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * The resource id of the environment.
   * This value should be 4-63 characters, and valid characters
   * are /[a-z][0-9]-/.
   *
   * @generated from field: string id = 2;
   */
  id: string;

  /**
   * The display name of the environment.
   *
   * @generated from field: string title = 3;
   */
  title: string;

  /**
   * @generated from field: map<string, string> tags = 4;
   */
  tags: { [key: string]: string };

  /**
   * @generated from field: string color = 5;
   */
  color: string;
};

/**
 * Describes the message bytebase.v1.EnvironmentSetting.Environment.
 * Use `create(EnvironmentSetting_EnvironmentSchema)` to create a new message.
 */
export declare const EnvironmentSetting_EnvironmentSchema: GenMessage<EnvironmentSetting_Environment>;

/**
 * @generated from enum bytebase.v1.DatabaseChangeMode
 */
export enum DatabaseChangeMode {
  /**
   * @generated from enum value: DATABASE_CHANGE_MODE_UNSPECIFIED = 0;
   */
  DATABASE_CHANGE_MODE_UNSPECIFIED = 0,

  /**
   * A more advanced database change process, including custom approval workflows and other advanced features.
   * Default to this mode.
   *
   * @generated from enum value: PIPELINE = 1;
   */
  PIPELINE = 1,

  /**
   * A simple database change process in SQL editor. Users can execute SQL directly.
   *
   * @generated from enum value: EDITOR = 2;
   */
  EDITOR = 2,
}

/**
 * Describes the enum bytebase.v1.DatabaseChangeMode.
 */
export declare const DatabaseChangeModeSchema: GenEnum<DatabaseChangeMode>;

/**
 * @generated from service bytebase.v1.SettingService
 */
export declare const SettingService: GenService<{
  /**
   * @generated from rpc bytebase.v1.SettingService.ListSettings
   */
  listSettings: {
    methodKind: "unary";
    input: typeof ListSettingsRequestSchema;
    output: typeof ListSettingsResponseSchema;
  },
  /**
   * @generated from rpc bytebase.v1.SettingService.GetSetting
   */
  getSetting: {
    methodKind: "unary";
    input: typeof GetSettingRequestSchema;
    output: typeof SettingSchema;
  },
  /**
   * @generated from rpc bytebase.v1.SettingService.UpdateSetting
   */
  updateSetting: {
    methodKind: "unary";
    input: typeof UpdateSettingRequestSchema;
    output: typeof SettingSchema;
  },
}>;

