// @generated by protoc-gen-es v2.5.2
// @generated from file v1/plan_service.proto (package bytebase.v1, syntax proto3)
/* eslint-disable */

import { enumDesc, fileDesc, messageDesc, serviceDesc, tsEnum } from "@bufbuild/protobuf/codegenv2";
import { file_google_api_annotations } from "../google/api/annotations_pb";
import { file_google_api_client } from "../google/api/client_pb";
import { file_google_api_field_behavior } from "../google/api/field_behavior_pb";
import { file_google_api_resource } from "../google/api/resource_pb";
import { file_google_protobuf_field_mask, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import { file_v1_annotation } from "./annotation_pb";
import { file_v1_common } from "./common_pb";
import { file_v1_database_service } from "./database_service_pb";
import { file_v1_sql_service } from "./sql_service_pb";

/**
 * Describes the file v1/plan_service.proto.
 */
export const file_v1_plan_service = /*@__PURE__*/
  fileDesc("ChV2MS9wbGFuX3NlcnZpY2UucHJvdG8SC2J5dGViYXNlLnYxIjkKDkdldFBsYW5SZXF1ZXN0EicKBG5hbWUYASABKAlCGeBBAvpBEwoRYnl0ZWJhc2UuY29tL1BsYW4iZwoQTGlzdFBsYW5zUmVxdWVzdBIsCgZwYXJlbnQYASABKAlCHOBBAvpBFgoUYnl0ZWJhc2UuY29tL1Byb2plY3QSEQoJcGFnZV9zaXplGAIgASgFEhIKCnBhZ2VfdG9rZW4YAyABKAkiTgoRTGlzdFBsYW5zUmVzcG9uc2USIAoFcGxhbnMYASADKAsyES5ieXRlYmFzZS52MS5QbGFuEhcKD25leHRfcGFnZV90b2tlbhgCIAEoCSJgChJTZWFyY2hQbGFuc1JlcXVlc3QSEwoGcGFyZW50GAEgASgJQgPgQQISEQoJcGFnZV9zaXplGAIgASgFEhIKCnBhZ2VfdG9rZW4YAyABKAkSDgoGZmlsdGVyGAQgASgJIlAKE1NlYXJjaFBsYW5zUmVzcG9uc2USIAoFcGxhbnMYASADKAsyES5ieXRlYmFzZS52MS5QbGFuEhcKD25leHRfcGFnZV90b2tlbhgCIAEoCSJnChFDcmVhdGVQbGFuUmVxdWVzdBIsCgZwYXJlbnQYASABKAlCHOBBAvpBFgoUYnl0ZWJhc2UuY29tL1Byb2plY3QSJAoEcGxhbhgCIAEoCzIRLmJ5dGViYXNlLnYxLlBsYW5CA+BBAiKGAQoRVXBkYXRlUGxhblJlcXVlc3QSJAoEcGxhbhgBIAEoCzIRLmJ5dGViYXNlLnYxLlBsYW5CA+BBAhI0Cgt1cGRhdGVfbWFzaxgCIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5GaWVsZE1hc2tCA+BBAhIVCg1hbGxvd19taXNzaW5nGAMgASgIIqoNCgRQbGFuEgwKBG5hbWUYASABKAkSIQoFc3RhdGUYAiABKA4yEi5ieXRlYmFzZS52MS5TdGF0ZRISCgVpc3N1ZRgDIAEoCUID4EEDEhQKB3JvbGxvdXQYDyABKAlCA+BBAxINCgV0aXRsZRgEIAEoCRITCgtkZXNjcmlwdGlvbhgFIAEoCRIlCgVzcGVjcxgOIAMoCzIWLmJ5dGViYXNlLnYxLlBsYW4uU3BlYxIUCgdjcmVhdG9yGAggASgJQgPgQQMSNAoLY3JlYXRlX3RpbWUYCSABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wQgPgQQMSNAoLdXBkYXRlX3RpbWUYCiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wQgPgQQMSWAobcGxhbl9jaGVja19ydW5fc3RhdHVzX2NvdW50GAsgAygLMi4uYnl0ZWJhc2UudjEuUGxhbi5QbGFuQ2hlY2tSdW5TdGF0dXNDb3VudEVudHJ5QgPgQQMSMAoKZGVwbG95bWVudBgNIAEoCzIcLmJ5dGViYXNlLnYxLlBsYW4uRGVwbG95bWVudBryAQoEU3BlYxIKCgJpZBgFIAEoCRJIChZjcmVhdGVfZGF0YWJhc2VfY29uZmlnGAEgASgLMiYuYnl0ZWJhc2UudjEuUGxhbi5DcmVhdGVEYXRhYmFzZUNvbmZpZ0gAEkgKFmNoYW5nZV9kYXRhYmFzZV9jb25maWcYAiABKAsyJi5ieXRlYmFzZS52MS5QbGFuLkNoYW5nZURhdGFiYXNlQ29uZmlnSAASQAoSZXhwb3J0X2RhdGFfY29uZmlnGAcgASgLMiIuYnl0ZWJhc2UudjEuUGxhbi5FeHBvcnREYXRhQ29uZmlnSABCCAoGY29uZmlnGj4KHFBsYW5DaGVja1J1blN0YXR1c0NvdW50RW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgFOgI4ARrOAQoUQ3JlYXRlRGF0YWJhc2VDb25maWcSEwoGdGFyZ2V0GAEgASgJQgPgQQISFQoIZGF0YWJhc2UYAiABKAlCA+BBAhISCgV0YWJsZRgDIAEoCUID4EEBEhoKDWNoYXJhY3Rlcl9zZXQYBCABKAlCA+BBARIWCgljb2xsYXRpb24YBSABKAlCA+BBARIUCgdjbHVzdGVyGAYgASgJQgPgQQESEgoFb3duZXIYByABKAlCA+BBARIYCgtlbnZpcm9ubWVudBgJIAEoCUID4EEBGu4CChRDaGFuZ2VEYXRhYmFzZUNvbmZpZxIPCgd0YXJnZXRzGAogAygJEg0KBXNoZWV0GAIgASgJEioKB3JlbGVhc2UYCSABKAlCGfpBFgoUYnl0ZWJhc2UuY29tL1JlbGVhc2USLQoEdHlwZRgDIAEoDjIfLmJ5dGViYXNlLnYxLkRhdGFiYXNlQ2hhbmdlVHlwZRIyCg5taWdyYXRpb25fdHlwZRgLIAEoDjIaLmJ5dGViYXNlLnYxLk1pZ3JhdGlvblR5cGUSSwoLZ2hvc3RfZmxhZ3MYByADKAsyNi5ieXRlYmFzZS52MS5QbGFuLkNoYW5nZURhdGFiYXNlQ29uZmlnLkdob3N0RmxhZ3NFbnRyeRIbChNlbmFibGVfcHJpb3JfYmFja3VwGAggASgIGjEKD0dob3N0RmxhZ3NFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBSgQIBRAGSgQIBhAHGoEBChBFeHBvcnREYXRhQ29uZmlnEg8KB3RhcmdldHMYBSADKAkSDQoFc2hlZXQYAiABKAkSKQoGZm9ybWF0GAMgASgOMhkuYnl0ZWJhc2UudjEuRXhwb3J0Rm9ybWF0EhUKCHBhc3N3b3JkGAQgASgJSACIAQFCCwoJX3Bhc3N3b3JkGrkBCgpEZXBsb3ltZW50EhQKDGVudmlyb25tZW50cxgBIAMoCRJSChdkYXRhYmFzZV9ncm91cF9tYXBwaW5ncxgCIAMoCzIxLmJ5dGViYXNlLnYxLlBsYW4uRGVwbG95bWVudC5EYXRhYmFzZUdyb3VwTWFwcGluZxpBChREYXRhYmFzZUdyb3VwTWFwcGluZxIWCg5kYXRhYmFzZV9ncm91cBgBIAEoCRIRCglkYXRhYmFzZXMYAiADKAk6N+pBNAoRYnl0ZWJhc2UuY29tL1BsYW4SH3Byb2plY3RzL3twcm9qZWN0fS9wbGFucy97cGxhbn0iagoYTGlzdFBsYW5DaGVja1J1bnNSZXF1ZXN0EikKBnBhcmVudBgBIAEoCUIZ4EEC+kETChFieXRlYmFzZS5jb20vUGxhbhITCgtsYXRlc3Rfb25seRgCIAEoCBIOCgZmaWx0ZXIYAyABKAkiTwoZTGlzdFBsYW5DaGVja1J1bnNSZXNwb25zZRIyCg9wbGFuX2NoZWNrX3J1bnMYASADKAsyGS5ieXRlYmFzZS52MS5QbGFuQ2hlY2tSdW4iYQoUUnVuUGxhbkNoZWNrc1JlcXVlc3QSJwoEbmFtZRgBIAEoCUIZ4EEC+kETChFieXRlYmFzZS5jb20vUGxhbhIUCgdzcGVjX2lkGAIgASgJSACIAQFCCgoIX3NwZWNfaWQiFwoVUnVuUGxhbkNoZWNrc1Jlc3BvbnNlImUKH0JhdGNoQ2FuY2VsUGxhbkNoZWNrUnVuc1JlcXVlc3QSKQoGcGFyZW50GAEgASgJQhngQQL6QRMKEWJ5dGViYXNlLmNvbS9QbGFuEhcKD3BsYW5fY2hlY2tfcnVucxgCIAMoCSIiCiBCYXRjaENhbmNlbFBsYW5DaGVja1J1bnNSZXNwb25zZSK/CAoMUGxhbkNoZWNrUnVuEgwKBG5hbWUYASABKAkSLAoEdHlwZRgDIAEoDjIeLmJ5dGViYXNlLnYxLlBsYW5DaGVja1J1bi5UeXBlEjAKBnN0YXR1cxgEIAEoDjIgLmJ5dGViYXNlLnYxLlBsYW5DaGVja1J1bi5TdGF0dXMSDgoGdGFyZ2V0GAUgASgJEg0KBXNoZWV0GAYgASgJEjEKB3Jlc3VsdHMYByADKAsyIC5ieXRlYmFzZS52MS5QbGFuQ2hlY2tSdW4uUmVzdWx0Eg0KBWVycm9yGAggASgJEjQKC2NyZWF0ZV90aW1lGAkgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEID4EEDGpgECgZSZXN1bHQSKQoGc3RhdHVzGAEgASgOMhkuYnl0ZWJhc2UudjEuQWR2aWNlLkxldmVsEg0KBXRpdGxlGAIgASgJEg8KB2NvbnRlbnQYAyABKAkSDAoEY29kZRgEIAEoBRJPChJzcWxfc3VtbWFyeV9yZXBvcnQYBSABKAsyMS5ieXRlYmFzZS52MS5QbGFuQ2hlY2tSdW4uUmVzdWx0LlNxbFN1bW1hcnlSZXBvcnRIABJNChFzcWxfcmV2aWV3X3JlcG9ydBgGIAEoCzIwLmJ5dGViYXNlLnYxLlBsYW5DaGVja1J1bi5SZXN1bHQuU3FsUmV2aWV3UmVwb3J0SAAaggEKEFNxbFN1bW1hcnlSZXBvcnQSFwoPc3RhdGVtZW50X3R5cGVzGAIgAygJEhUKDWFmZmVjdGVkX3Jvd3MYAyABKAMSOAoRY2hhbmdlZF9yZXNvdXJjZXMYBCABKAsyHS5ieXRlYmFzZS52MS5DaGFuZ2VkUmVzb3VyY2VzSgQIARACGoUBCg9TcWxSZXZpZXdSZXBvcnQSLQoOc3RhcnRfcG9zaXRpb24YBSABKAsyFS5ieXRlYmFzZS52MS5Qb3NpdGlvbhIrCgxlbmRfcG9zaXRpb24YBiABKAsyFS5ieXRlYmFzZS52MS5Qb3NpdGlvbkoECAEQAkoECAIQA0oECAMQBEoECAQQBUIICgZyZXBvcnQitQEKBFR5cGUSFAoQVFlQRV9VTlNQRUNJRklFRBAAEiIKHkRBVEFCQVNFX1NUQVRFTUVOVF9GQUtFX0FEVklTRRABEh0KGURBVEFCQVNFX1NUQVRFTUVOVF9BRFZJU0UQAxIlCiFEQVRBQkFTRV9TVEFURU1FTlRfU1VNTUFSWV9SRVBPUlQQBRIUChBEQVRBQkFTRV9DT05ORUNUEAYSFwoTREFUQUJBU0VfR0hPU1RfU1lOQxAHIlEKBlN0YXR1cxIWChJTVEFUVVNfVU5TUEVDSUZJRUQQABILCgdSVU5OSU5HEAESCAoERE9ORRACEgoKBkZBSUxFRBADEgwKCENBTkNFTEVEEARKBAgCEAMy0goKC1BsYW5TZXJ2aWNlEnsKB0dldFBsYW4SGy5ieXRlYmFzZS52MS5HZXRQbGFuUmVxdWVzdBoRLmJ5dGViYXNlLnYxLlBsYW4iQNpBBG5hbWWK6jAMYmIucGxhbnMuZ2V0kOowAYLT5JMCHxIdL3YxL3tuYW1lPXByb2plY3RzLyovcGxhbnMvKn0SjwEKCUxpc3RQbGFucxIdLmJ5dGViYXNlLnYxLkxpc3RQbGFuc1JlcXVlc3QaHi5ieXRlYmFzZS52MS5MaXN0UGxhbnNSZXNwb25zZSJD2kEGcGFyZW50iuowDWJiLnBsYW5zLmxpc3SQ6jABgtPkkwIfEh0vdjEve3BhcmVudD1wcm9qZWN0cy8qfS9wbGFucxKeAQoLU2VhcmNoUGxhbnMSHy5ieXRlYmFzZS52MS5TZWFyY2hQbGFuc1JlcXVlc3QaIC5ieXRlYmFzZS52MS5TZWFyY2hQbGFuc1Jlc3BvbnNlIkzaQQZwYXJlbnSK6jAMYmIucGxhbnMuZ2V0kOowAoLT5JMCKToBKiIkL3YxL3twYXJlbnQ9cHJvamVjdHMvKn0vcGxhbnM6c2VhcmNoEpUBCgpDcmVhdGVQbGFuEh4uYnl0ZWJhc2UudjEuQ3JlYXRlUGxhblJlcXVlc3QaES5ieXRlYmFzZS52MS5QbGFuIlTaQQtwYXJlbnQscGxhborqMA9iYi5wbGFucy5jcmVhdGWQ6jABmOowAYLT5JMCJToEcGxhbiIdL3YxL3twYXJlbnQ9cHJvamVjdHMvKn0vcGxhbnMSnwEKClVwZGF0ZVBsYW4SHi5ieXRlYmFzZS52MS5VcGRhdGVQbGFuUmVxdWVzdBoRLmJ5dGViYXNlLnYxLlBsYW4iXtpBEHBsYW4sdXBkYXRlX21hc2uK6jAPYmIucGxhbnMudXBkYXRlkOowApjqMAGC0+STAio6BHBsYW4yIi92MS97cGxhbi5uYW1lPXByb2plY3RzLyovcGxhbnMvKn0SvwEKEUxpc3RQbGFuQ2hlY2tSdW5zEiUuYnl0ZWJhc2UudjEuTGlzdFBsYW5DaGVja1J1bnNSZXF1ZXN0GiYuYnl0ZWJhc2UudjEuTGlzdFBsYW5DaGVja1J1bnNSZXNwb25zZSJb2kEGcGFyZW50iuowFWJiLnBsYW5DaGVja1J1bnMubGlzdJDqMAGC0+STAi8SLS92MS97cGFyZW50PXByb2plY3RzLyovcGxhbnMvKn0vcGxhbkNoZWNrUnVucxKxAQoNUnVuUGxhbkNoZWNrcxIhLmJ5dGViYXNlLnYxLlJ1blBsYW5DaGVja3NSZXF1ZXN0GiIuYnl0ZWJhc2UudjEuUnVuUGxhbkNoZWNrc1Jlc3BvbnNlIlnaQQRuYW1liuowFGJiLnBsYW5DaGVja1J1bnMucnVukOowAYLT5JMCMDoBKiIrL3YxL3tuYW1lPXByb2plY3RzLyovcGxhbnMvKn06cnVuUGxhbkNoZWNrcxLiAQoYQmF0Y2hDYW5jZWxQbGFuQ2hlY2tSdW5zEiwuYnl0ZWJhc2UudjEuQmF0Y2hDYW5jZWxQbGFuQ2hlY2tSdW5zUmVxdWVzdBotLmJ5dGViYXNlLnYxLkJhdGNoQ2FuY2VsUGxhbkNoZWNrUnVuc1Jlc3BvbnNlImnaQQZwYXJlbnSK6jAUYmIucGxhbkNoZWNrUnVucy5ydW6Q6jABgtPkkwI+OgEqIjkvdjEve3BhcmVudD1wcm9qZWN0cy8qL3BsYW5zLyp9L3BsYW5DaGVja1J1bnM6YmF0Y2hDYW5jZWxCpgEKD2NvbS5ieXRlYmFzZS52MUIQUGxhblNlcnZpY2VQcm90b1ABWjRnaXRodWIuY29tL2J5dGViYXNlL2J5dGViYXNlL2JhY2tlbmQvZ2VuZXJhdGVkLWdvL3YxogIDQlhYqgILQnl0ZWJhc2UuVjHKAgtCeXRlYmFzZVxWMeICF0J5dGViYXNlXFYxXEdQQk1ldGFkYXRh6gIMQnl0ZWJhc2U6OlYxYgZwcm90bzM", [file_google_api_annotations, file_google_api_client, file_google_api_field_behavior, file_google_api_resource, file_google_protobuf_field_mask, file_google_protobuf_timestamp, file_v1_annotation, file_v1_common, file_v1_database_service, file_v1_sql_service]);

/**
 * Describes the message bytebase.v1.GetPlanRequest.
 * Use `create(GetPlanRequestSchema)` to create a new message.
 */
export const GetPlanRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 0);

/**
 * Describes the message bytebase.v1.ListPlansRequest.
 * Use `create(ListPlansRequestSchema)` to create a new message.
 */
export const ListPlansRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 1);

/**
 * Describes the message bytebase.v1.ListPlansResponse.
 * Use `create(ListPlansResponseSchema)` to create a new message.
 */
export const ListPlansResponseSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 2);

/**
 * Describes the message bytebase.v1.SearchPlansRequest.
 * Use `create(SearchPlansRequestSchema)` to create a new message.
 */
export const SearchPlansRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 3);

/**
 * Describes the message bytebase.v1.SearchPlansResponse.
 * Use `create(SearchPlansResponseSchema)` to create a new message.
 */
export const SearchPlansResponseSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 4);

/**
 * Describes the message bytebase.v1.CreatePlanRequest.
 * Use `create(CreatePlanRequestSchema)` to create a new message.
 */
export const CreatePlanRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 5);

/**
 * Describes the message bytebase.v1.UpdatePlanRequest.
 * Use `create(UpdatePlanRequestSchema)` to create a new message.
 */
export const UpdatePlanRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 6);

/**
 * Describes the message bytebase.v1.Plan.
 * Use `create(PlanSchema)` to create a new message.
 */
export const PlanSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 7);

/**
 * Describes the message bytebase.v1.Plan.Spec.
 * Use `create(Plan_SpecSchema)` to create a new message.
 */
export const Plan_SpecSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 7, 0);

/**
 * Describes the message bytebase.v1.Plan.CreateDatabaseConfig.
 * Use `create(Plan_CreateDatabaseConfigSchema)` to create a new message.
 */
export const Plan_CreateDatabaseConfigSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 7, 1);

/**
 * Describes the message bytebase.v1.Plan.ChangeDatabaseConfig.
 * Use `create(Plan_ChangeDatabaseConfigSchema)` to create a new message.
 */
export const Plan_ChangeDatabaseConfigSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 7, 2);

/**
 * Describes the message bytebase.v1.Plan.ExportDataConfig.
 * Use `create(Plan_ExportDataConfigSchema)` to create a new message.
 */
export const Plan_ExportDataConfigSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 7, 3);

/**
 * Describes the message bytebase.v1.Plan.Deployment.
 * Use `create(Plan_DeploymentSchema)` to create a new message.
 */
export const Plan_DeploymentSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 7, 4);

/**
 * Describes the message bytebase.v1.Plan.Deployment.DatabaseGroupMapping.
 * Use `create(Plan_Deployment_DatabaseGroupMappingSchema)` to create a new message.
 */
export const Plan_Deployment_DatabaseGroupMappingSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 7, 4, 0);

/**
 * Describes the message bytebase.v1.ListPlanCheckRunsRequest.
 * Use `create(ListPlanCheckRunsRequestSchema)` to create a new message.
 */
export const ListPlanCheckRunsRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 8);

/**
 * Describes the message bytebase.v1.ListPlanCheckRunsResponse.
 * Use `create(ListPlanCheckRunsResponseSchema)` to create a new message.
 */
export const ListPlanCheckRunsResponseSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 9);

/**
 * Describes the message bytebase.v1.RunPlanChecksRequest.
 * Use `create(RunPlanChecksRequestSchema)` to create a new message.
 */
export const RunPlanChecksRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 10);

/**
 * Describes the message bytebase.v1.RunPlanChecksResponse.
 * Use `create(RunPlanChecksResponseSchema)` to create a new message.
 */
export const RunPlanChecksResponseSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 11);

/**
 * Describes the message bytebase.v1.BatchCancelPlanCheckRunsRequest.
 * Use `create(BatchCancelPlanCheckRunsRequestSchema)` to create a new message.
 */
export const BatchCancelPlanCheckRunsRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 12);

/**
 * Describes the message bytebase.v1.BatchCancelPlanCheckRunsResponse.
 * Use `create(BatchCancelPlanCheckRunsResponseSchema)` to create a new message.
 */
export const BatchCancelPlanCheckRunsResponseSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 13);

/**
 * Describes the message bytebase.v1.PlanCheckRun.
 * Use `create(PlanCheckRunSchema)` to create a new message.
 */
export const PlanCheckRunSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 14);

/**
 * Describes the message bytebase.v1.PlanCheckRun.Result.
 * Use `create(PlanCheckRun_ResultSchema)` to create a new message.
 */
export const PlanCheckRun_ResultSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 14, 0);

/**
 * Describes the message bytebase.v1.PlanCheckRun.Result.SqlSummaryReport.
 * Use `create(PlanCheckRun_Result_SqlSummaryReportSchema)` to create a new message.
 */
export const PlanCheckRun_Result_SqlSummaryReportSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 14, 0, 0);

/**
 * Describes the message bytebase.v1.PlanCheckRun.Result.SqlReviewReport.
 * Use `create(PlanCheckRun_Result_SqlReviewReportSchema)` to create a new message.
 */
export const PlanCheckRun_Result_SqlReviewReportSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 14, 0, 1);

/**
 * Describes the enum bytebase.v1.PlanCheckRun.Type.
 */
export const PlanCheckRun_TypeSchema = /*@__PURE__*/
  enumDesc(file_v1_plan_service, 14, 0);

/**
 * @generated from enum bytebase.v1.PlanCheckRun.Type
 */
export const PlanCheckRun_Type = /*@__PURE__*/
  tsEnum(PlanCheckRun_TypeSchema);

/**
 * Describes the enum bytebase.v1.PlanCheckRun.Status.
 */
export const PlanCheckRun_StatusSchema = /*@__PURE__*/
  enumDesc(file_v1_plan_service, 14, 1);

/**
 * @generated from enum bytebase.v1.PlanCheckRun.Status
 */
export const PlanCheckRun_Status = /*@__PURE__*/
  tsEnum(PlanCheckRun_StatusSchema);

/**
 * PlanService manages deployment plans for database changes.
 *
 * @generated from service bytebase.v1.PlanService
 */
export const PlanService = /*@__PURE__*/
  serviceDesc(file_v1_plan_service, 0);

