// @generated by protoc-gen-es v2.5.2
// @generated from file v1/plan_service.proto (package bytebase.v1, syntax proto3)
/* eslint-disable */

import { enumDesc, fileDesc, messageDesc, serviceDesc, tsEnum } from "@bufbuild/protobuf/codegenv2";
import { file_google_api_annotations } from "../google/api/annotations_pb";
import { file_google_api_client } from "../google/api/client_pb";
import { file_google_api_field_behavior } from "../google/api/field_behavior_pb";
import { file_google_api_resource } from "../google/api/resource_pb";
import { file_google_protobuf_field_mask, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import { file_v1_annotation } from "./annotation_pb";
import { file_v1_common } from "./common_pb";
import { file_v1_database_service } from "./database_service_pb";

/**
 * Describes the file v1/plan_service.proto.
 */
export const file_v1_plan_service = /*@__PURE__*/
  fileDesc("ChV2MS9wbGFuX3NlcnZpY2UucHJvdG8SC2J5dGViYXNlLnYxIjoKDkdldFBsYW5SZXF1ZXN0EigKBG5hbWUYASABKAlCGuJBAQL6QRMKEWJ5dGViYXNlLmNvbS9QbGFuImgKEExpc3RQbGFuc1JlcXVlc3QSLQoGcGFyZW50GAEgASgJQh3iQQEC+kEWChRieXRlYmFzZS5jb20vUHJvamVjdBIRCglwYWdlX3NpemUYAiABKAUSEgoKcGFnZV90b2tlbhgDIAEoCSJOChFMaXN0UGxhbnNSZXNwb25zZRIgCgVwbGFucxgBIAMoCzIRLmJ5dGViYXNlLnYxLlBsYW4SFwoPbmV4dF9wYWdlX3Rva2VuGAIgASgJImEKElNlYXJjaFBsYW5zUmVxdWVzdBIUCgZwYXJlbnQYASABKAlCBOJBAQISEQoJcGFnZV9zaXplGAIgASgFEhIKCnBhZ2VfdG9rZW4YAyABKAkSDgoGZmlsdGVyGAQgASgJIlAKE1NlYXJjaFBsYW5zUmVzcG9uc2USIAoFcGxhbnMYASADKAsyES5ieXRlYmFzZS52MS5QbGFuEhcKD25leHRfcGFnZV90b2tlbhgCIAEoCSJpChFDcmVhdGVQbGFuUmVxdWVzdBItCgZwYXJlbnQYASABKAlCHeJBAQL6QRYKFGJ5dGViYXNlLmNvbS9Qcm9qZWN0EiUKBHBsYW4YAiABKAsyES5ieXRlYmFzZS52MS5QbGFuQgTiQQECInEKEVVwZGF0ZVBsYW5SZXF1ZXN0EiUKBHBsYW4YASABKAsyES5ieXRlYmFzZS52MS5QbGFuQgTiQQECEjUKC3VwZGF0ZV9tYXNrGAIgASgLMhouZ29vZ2xlLnByb3RvYnVmLkZpZWxkTWFza0IE4kEBAiLMDQoEUGxhbhIMCgRuYW1lGAEgASgJEhMKBWlzc3VlGAMgASgJQgTiQQEDEhUKB3JvbGxvdXQYDyABKAlCBOJBAQMSDQoFdGl0bGUYBCABKAkSEwoLZGVzY3JpcHRpb24YBSABKAkSJQoFc3BlY3MYDiADKAsyFi5ieXRlYmFzZS52MS5QbGFuLlNwZWMSFQoHY3JlYXRvchgIIAEoCUIE4kEBAxI1CgtjcmVhdGVfdGltZRgJIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCBOJBAQMSNQoLdXBkYXRlX3RpbWUYCiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wQgTiQQEDElkKG3BsYW5fY2hlY2tfcnVuX3N0YXR1c19jb3VudBgLIAMoCzIuLmJ5dGViYXNlLnYxLlBsYW4uUGxhbkNoZWNrUnVuU3RhdHVzQ291bnRFbnRyeUIE4kEBAxIwCgpkZXBsb3ltZW50GA0gASgLMhwuYnl0ZWJhc2UudjEuUGxhbi5EZXBsb3ltZW50GvIBCgRTcGVjEgoKAmlkGAUgASgJEkgKFmNyZWF0ZV9kYXRhYmFzZV9jb25maWcYASABKAsyJi5ieXRlYmFzZS52MS5QbGFuLkNyZWF0ZURhdGFiYXNlQ29uZmlnSAASSAoWY2hhbmdlX2RhdGFiYXNlX2NvbmZpZxgCIAEoCzImLmJ5dGViYXNlLnYxLlBsYW4uQ2hhbmdlRGF0YWJhc2VDb25maWdIABJAChJleHBvcnRfZGF0YV9jb25maWcYByABKAsyIi5ieXRlYmFzZS52MS5QbGFuLkV4cG9ydERhdGFDb25maWdIAEIICgZjb25maWcaPgocUGxhbkNoZWNrUnVuU3RhdHVzQ291bnRFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAU6AjgBGtYBChRDcmVhdGVEYXRhYmFzZUNvbmZpZxIUCgZ0YXJnZXQYASABKAlCBOJBAQISFgoIZGF0YWJhc2UYAiABKAlCBOJBAQISEwoFdGFibGUYAyABKAlCBOJBAQESGwoNY2hhcmFjdGVyX3NldBgEIAEoCUIE4kEBARIXCgljb2xsYXRpb24YBSABKAlCBOJBAQESFQoHY2x1c3RlchgGIAEoCUIE4kEBARITCgVvd25lchgHIAEoCUIE4kEBARIZCgtlbnZpcm9ubWVudBgJIAEoCUIE4kEBARqfAwoUQ2hhbmdlRGF0YWJhc2VDb25maWcSDwoHdGFyZ2V0cxgKIAMoCRINCgVzaGVldBgCIAEoCRIqCgdyZWxlYXNlGAkgASgJQhn6QRYKFGJ5dGViYXNlLmNvbS9SZWxlYXNlEjkKBHR5cGUYAyABKA4yKy5ieXRlYmFzZS52MS5QbGFuLkNoYW5nZURhdGFiYXNlQ29uZmlnLlR5cGUSSwoLZ2hvc3RfZmxhZ3MYByADKAsyNi5ieXRlYmFzZS52MS5QbGFuLkNoYW5nZURhdGFiYXNlQ29uZmlnLkdob3N0RmxhZ3NFbnRyeRIbChNlbmFibGVfcHJpb3JfYmFja3VwGAggASgIGjEKD0dob3N0RmxhZ3NFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBIlcKBFR5cGUSFAoQVFlQRV9VTlNQRUNJRklFRBAAEgsKB01JR1JBVEUQAhIPCgtNSUdSQVRFX1NETBADEhEKDU1JR1JBVEVfR0hPU1QQBBIICgREQVRBEAZKBAgFEAZKBAgGEAcagQEKEEV4cG9ydERhdGFDb25maWcSDwoHdGFyZ2V0cxgFIAMoCRINCgVzaGVldBgCIAEoCRIpCgZmb3JtYXQYAyABKA4yGS5ieXRlYmFzZS52MS5FeHBvcnRGb3JtYXQSFQoIcGFzc3dvcmQYBCABKAlIAIgBAUILCglfcGFzc3dvcmQauQEKCkRlcGxveW1lbnQSFAoMZW52aXJvbm1lbnRzGAEgAygJElIKF2RhdGFiYXNlX2dyb3VwX21hcHBpbmdzGAIgAygLMjEuYnl0ZWJhc2UudjEuUGxhbi5EZXBsb3ltZW50LkRhdGFiYXNlR3JvdXBNYXBwaW5nGkEKFERhdGFiYXNlR3JvdXBNYXBwaW5nEhYKDmRhdGFiYXNlX2dyb3VwGAEgASgJEhEKCWRhdGFiYXNlcxgCIAMoCTo36kE0ChFieXRlYmFzZS5jb20vUGxhbhIfcHJvamVjdHMve3Byb2plY3R9L3BsYW5zL3twbGFufUoECAIQAyKSAQoYTGlzdFBsYW5DaGVja1J1bnNSZXF1ZXN0EioKBnBhcmVudBgBIAEoCUIa4kEBAvpBEwoRYnl0ZWJhc2UuY29tL1BsYW4SEQoJcGFnZV9zaXplGAIgASgFEhIKCnBhZ2VfdG9rZW4YAyABKAkSEwoLbGF0ZXN0X29ubHkYBCABKAgSDgoGZmlsdGVyGAUgASgJImgKGUxpc3RQbGFuQ2hlY2tSdW5zUmVzcG9uc2USMgoPcGxhbl9jaGVja19ydW5zGAEgAygLMhkuYnl0ZWJhc2UudjEuUGxhbkNoZWNrUnVuEhcKD25leHRfcGFnZV90b2tlbhgCIAEoCSJiChRSdW5QbGFuQ2hlY2tzUmVxdWVzdBIoCgRuYW1lGAEgASgJQhriQQEC+kETChFieXRlYmFzZS5jb20vUGxhbhIUCgdzcGVjX2lkGAIgASgJSACIAQFCCgoIX3NwZWNfaWQiFwoVUnVuUGxhbkNoZWNrc1Jlc3BvbnNlImYKH0JhdGNoQ2FuY2VsUGxhbkNoZWNrUnVuc1JlcXVlc3QSKgoGcGFyZW50GAEgASgJQhriQQEC+kETChFieXRlYmFzZS5jb20vUGxhbhIXCg9wbGFuX2NoZWNrX3J1bnMYAiADKAkiIgogQmF0Y2hDYW5jZWxQbGFuQ2hlY2tSdW5zUmVzcG9uc2UipwkKDFBsYW5DaGVja1J1bhIMCgRuYW1lGAEgASgJEiwKBHR5cGUYAyABKA4yHi5ieXRlYmFzZS52MS5QbGFuQ2hlY2tSdW4uVHlwZRIwCgZzdGF0dXMYBCABKA4yIC5ieXRlYmFzZS52MS5QbGFuQ2hlY2tSdW4uU3RhdHVzEg4KBnRhcmdldBgFIAEoCRINCgVzaGVldBgGIAEoCRIxCgdyZXN1bHRzGAcgAygLMiAuYnl0ZWJhc2UudjEuUGxhbkNoZWNrUnVuLlJlc3VsdBINCgVlcnJvchgIIAEoCRI1CgtjcmVhdGVfdGltZRgJIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCBOJBAQMa/wQKBlJlc3VsdBI3CgZzdGF0dXMYASABKA4yJy5ieXRlYmFzZS52MS5QbGFuQ2hlY2tSdW4uUmVzdWx0LlN0YXR1cxINCgV0aXRsZRgCIAEoCRIPCgdjb250ZW50GAMgASgJEgwKBGNvZGUYBCABKAUSTwoSc3FsX3N1bW1hcnlfcmVwb3J0GAUgASgLMjEuYnl0ZWJhc2UudjEuUGxhbkNoZWNrUnVuLlJlc3VsdC5TcWxTdW1tYXJ5UmVwb3J0SAASTQoRc3FsX3Jldmlld19yZXBvcnQYBiABKAsyMC5ieXRlYmFzZS52MS5QbGFuQ2hlY2tSdW4uUmVzdWx0LlNxbFJldmlld1JlcG9ydEgAGoIBChBTcWxTdW1tYXJ5UmVwb3J0EhcKD3N0YXRlbWVudF90eXBlcxgCIAMoCRIVCg1hZmZlY3RlZF9yb3dzGAMgASgFEjgKEWNoYW5nZWRfcmVzb3VyY2VzGAQgASgLMh0uYnl0ZWJhc2UudjEuQ2hhbmdlZFJlc291cmNlc0oECAEQAhqXAQoPU3FsUmV2aWV3UmVwb3J0EgwKBGxpbmUYASABKAUSDgoGY29sdW1uGAIgASgFEi0KDnN0YXJ0X3Bvc2l0aW9uGAUgASgLMhUuYnl0ZWJhc2UudjEuUG9zaXRpb24SKwoMZW5kX3Bvc2l0aW9uGAYgASgLMhUuYnl0ZWJhc2UudjEuUG9zaXRpb25KBAgDEARKBAgEEAUiRQoGU3RhdHVzEhYKElNUQVRVU19VTlNQRUNJRklFRBAAEgkKBUVSUk9SEAESCwoHV0FSTklORxACEgsKB1NVQ0NFU1MQA0IICgZyZXBvcnQitQEKBFR5cGUSFAoQVFlQRV9VTlNQRUNJRklFRBAAEiIKHkRBVEFCQVNFX1NUQVRFTUVOVF9GQUtFX0FEVklTRRABEh0KGURBVEFCQVNFX1NUQVRFTUVOVF9BRFZJU0UQAxIlCiFEQVRBQkFTRV9TVEFURU1FTlRfU1VNTUFSWV9SRVBPUlQQBRIUChBEQVRBQkFTRV9DT05ORUNUEAYSFwoTREFUQUJBU0VfR0hPU1RfU1lOQxAHIlEKBlN0YXR1cxIWChJTVEFUVVNfVU5TUEVDSUZJRUQQABILCgdSVU5OSU5HEAESCAoERE9ORRACEgoKBkZBSUxFRBADEgwKCENBTkNFTEVEEARKBAgCEAMy0goKC1BsYW5TZXJ2aWNlEnsKB0dldFBsYW4SGy5ieXRlYmFzZS52MS5HZXRQbGFuUmVxdWVzdBoRLmJ5dGViYXNlLnYxLlBsYW4iQNpBBG5hbWWK6jAMYmIucGxhbnMuZ2V0kOowAYLT5JMCHxIdL3YxL3tuYW1lPXByb2plY3RzLyovcGxhbnMvKn0SjwEKCUxpc3RQbGFucxIdLmJ5dGViYXNlLnYxLkxpc3RQbGFuc1JlcXVlc3QaHi5ieXRlYmFzZS52MS5MaXN0UGxhbnNSZXNwb25zZSJD2kEGcGFyZW50iuowDWJiLnBsYW5zLmxpc3SQ6jABgtPkkwIfEh0vdjEve3BhcmVudD1wcm9qZWN0cy8qfS9wbGFucxKeAQoLU2VhcmNoUGxhbnMSHy5ieXRlYmFzZS52MS5TZWFyY2hQbGFuc1JlcXVlc3QaIC5ieXRlYmFzZS52MS5TZWFyY2hQbGFuc1Jlc3BvbnNlIkzaQQZwYXJlbnSK6jAMYmIucGxhbnMuZ2V0kOowAoLT5JMCKToBKiIkL3YxL3twYXJlbnQ9cHJvamVjdHMvKn0vcGxhbnM6c2VhcmNoEpUBCgpDcmVhdGVQbGFuEh4uYnl0ZWJhc2UudjEuQ3JlYXRlUGxhblJlcXVlc3QaES5ieXRlYmFzZS52MS5QbGFuIlTaQQtwYXJlbnQscGxhborqMA9iYi5wbGFucy5jcmVhdGWQ6jABmOowAYLT5JMCJToEcGxhbiIdL3YxL3twYXJlbnQ9cHJvamVjdHMvKn0vcGxhbnMSnwEKClVwZGF0ZVBsYW4SHi5ieXRlYmFzZS52MS5VcGRhdGVQbGFuUmVxdWVzdBoRLmJ5dGViYXNlLnYxLlBsYW4iXtpBEHBsYW4sdXBkYXRlX21hc2uK6jAPYmIucGxhbnMudXBkYXRlkOowApjqMAGC0+STAio6BHBsYW4yIi92MS97cGxhbi5uYW1lPXByb2plY3RzLyovcGxhbnMvKn0SvwEKEUxpc3RQbGFuQ2hlY2tSdW5zEiUuYnl0ZWJhc2UudjEuTGlzdFBsYW5DaGVja1J1bnNSZXF1ZXN0GiYuYnl0ZWJhc2UudjEuTGlzdFBsYW5DaGVja1J1bnNSZXNwb25zZSJb2kEGcGFyZW50iuowFWJiLnBsYW5DaGVja1J1bnMubGlzdJDqMAGC0+STAi8SLS92MS97cGFyZW50PXByb2plY3RzLyovcGxhbnMvKn0vcGxhbkNoZWNrUnVucxKxAQoNUnVuUGxhbkNoZWNrcxIhLmJ5dGViYXNlLnYxLlJ1blBsYW5DaGVja3NSZXF1ZXN0GiIuYnl0ZWJhc2UudjEuUnVuUGxhbkNoZWNrc1Jlc3BvbnNlIlnaQQRuYW1liuowFGJiLnBsYW5DaGVja1J1bnMucnVukOowAYLT5JMCMDoBKiIrL3YxL3tuYW1lPXByb2plY3RzLyovcGxhbnMvKn06cnVuUGxhbkNoZWNrcxLiAQoYQmF0Y2hDYW5jZWxQbGFuQ2hlY2tSdW5zEiwuYnl0ZWJhc2UudjEuQmF0Y2hDYW5jZWxQbGFuQ2hlY2tSdW5zUmVxdWVzdBotLmJ5dGViYXNlLnYxLkJhdGNoQ2FuY2VsUGxhbkNoZWNrUnVuc1Jlc3BvbnNlImnaQQZwYXJlbnSK6jAUYmIucGxhbkNoZWNrUnVucy5ydW6Q6jABgtPkkwI+OgEqIjkvdjEve3BhcmVudD1wcm9qZWN0cy8qL3BsYW5zLyp9L3BsYW5DaGVja1J1bnM6YmF0Y2hDYW5jZWxCNFoyZ2l0aHViLmNvbS9ieXRlYmFzZS9ieXRlYmFzZS9wcm90by9nZW5lcmF0ZWQtZ28vdjFiBnByb3RvMw", [file_google_api_annotations, file_google_api_client, file_google_api_field_behavior, file_google_api_resource, file_google_protobuf_field_mask, file_google_protobuf_timestamp, file_v1_annotation, file_v1_common, file_v1_database_service]);

/**
 * Describes the message bytebase.v1.GetPlanRequest.
 * Use `create(GetPlanRequestSchema)` to create a new message.
 */
export const GetPlanRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 0);

/**
 * Describes the message bytebase.v1.ListPlansRequest.
 * Use `create(ListPlansRequestSchema)` to create a new message.
 */
export const ListPlansRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 1);

/**
 * Describes the message bytebase.v1.ListPlansResponse.
 * Use `create(ListPlansResponseSchema)` to create a new message.
 */
export const ListPlansResponseSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 2);

/**
 * Describes the message bytebase.v1.SearchPlansRequest.
 * Use `create(SearchPlansRequestSchema)` to create a new message.
 */
export const SearchPlansRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 3);

/**
 * Describes the message bytebase.v1.SearchPlansResponse.
 * Use `create(SearchPlansResponseSchema)` to create a new message.
 */
export const SearchPlansResponseSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 4);

/**
 * Describes the message bytebase.v1.CreatePlanRequest.
 * Use `create(CreatePlanRequestSchema)` to create a new message.
 */
export const CreatePlanRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 5);

/**
 * Describes the message bytebase.v1.UpdatePlanRequest.
 * Use `create(UpdatePlanRequestSchema)` to create a new message.
 */
export const UpdatePlanRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 6);

/**
 * Describes the message bytebase.v1.Plan.
 * Use `create(PlanSchema)` to create a new message.
 */
export const PlanSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 7);

/**
 * Describes the message bytebase.v1.Plan.Spec.
 * Use `create(Plan_SpecSchema)` to create a new message.
 */
export const Plan_SpecSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 7, 0);

/**
 * Describes the message bytebase.v1.Plan.CreateDatabaseConfig.
 * Use `create(Plan_CreateDatabaseConfigSchema)` to create a new message.
 */
export const Plan_CreateDatabaseConfigSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 7, 1);

/**
 * Describes the message bytebase.v1.Plan.ChangeDatabaseConfig.
 * Use `create(Plan_ChangeDatabaseConfigSchema)` to create a new message.
 */
export const Plan_ChangeDatabaseConfigSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 7, 2);

/**
 * Describes the enum bytebase.v1.Plan.ChangeDatabaseConfig.Type.
 */
export const Plan_ChangeDatabaseConfig_TypeSchema = /*@__PURE__*/
  enumDesc(file_v1_plan_service, 7, 2, 0);

/**
 * Type is the database change type.
 *
 * @generated from enum bytebase.v1.Plan.ChangeDatabaseConfig.Type
 */
export const Plan_ChangeDatabaseConfig_Type = /*@__PURE__*/
  tsEnum(Plan_ChangeDatabaseConfig_TypeSchema);

/**
 * Describes the message bytebase.v1.Plan.ExportDataConfig.
 * Use `create(Plan_ExportDataConfigSchema)` to create a new message.
 */
export const Plan_ExportDataConfigSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 7, 3);

/**
 * Describes the message bytebase.v1.Plan.Deployment.
 * Use `create(Plan_DeploymentSchema)` to create a new message.
 */
export const Plan_DeploymentSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 7, 4);

/**
 * Describes the message bytebase.v1.Plan.Deployment.DatabaseGroupMapping.
 * Use `create(Plan_Deployment_DatabaseGroupMappingSchema)` to create a new message.
 */
export const Plan_Deployment_DatabaseGroupMappingSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 7, 4, 0);

/**
 * Describes the message bytebase.v1.ListPlanCheckRunsRequest.
 * Use `create(ListPlanCheckRunsRequestSchema)` to create a new message.
 */
export const ListPlanCheckRunsRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 8);

/**
 * Describes the message bytebase.v1.ListPlanCheckRunsResponse.
 * Use `create(ListPlanCheckRunsResponseSchema)` to create a new message.
 */
export const ListPlanCheckRunsResponseSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 9);

/**
 * Describes the message bytebase.v1.RunPlanChecksRequest.
 * Use `create(RunPlanChecksRequestSchema)` to create a new message.
 */
export const RunPlanChecksRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 10);

/**
 * Describes the message bytebase.v1.RunPlanChecksResponse.
 * Use `create(RunPlanChecksResponseSchema)` to create a new message.
 */
export const RunPlanChecksResponseSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 11);

/**
 * Describes the message bytebase.v1.BatchCancelPlanCheckRunsRequest.
 * Use `create(BatchCancelPlanCheckRunsRequestSchema)` to create a new message.
 */
export const BatchCancelPlanCheckRunsRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 12);

/**
 * Describes the message bytebase.v1.BatchCancelPlanCheckRunsResponse.
 * Use `create(BatchCancelPlanCheckRunsResponseSchema)` to create a new message.
 */
export const BatchCancelPlanCheckRunsResponseSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 13);

/**
 * Describes the message bytebase.v1.PlanCheckRun.
 * Use `create(PlanCheckRunSchema)` to create a new message.
 */
export const PlanCheckRunSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 14);

/**
 * Describes the message bytebase.v1.PlanCheckRun.Result.
 * Use `create(PlanCheckRun_ResultSchema)` to create a new message.
 */
export const PlanCheckRun_ResultSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 14, 0);

/**
 * Describes the message bytebase.v1.PlanCheckRun.Result.SqlSummaryReport.
 * Use `create(PlanCheckRun_Result_SqlSummaryReportSchema)` to create a new message.
 */
export const PlanCheckRun_Result_SqlSummaryReportSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 14, 0, 0);

/**
 * Describes the message bytebase.v1.PlanCheckRun.Result.SqlReviewReport.
 * Use `create(PlanCheckRun_Result_SqlReviewReportSchema)` to create a new message.
 */
export const PlanCheckRun_Result_SqlReviewReportSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 14, 0, 1);

/**
 * Describes the enum bytebase.v1.PlanCheckRun.Result.Status.
 */
export const PlanCheckRun_Result_StatusSchema = /*@__PURE__*/
  enumDesc(file_v1_plan_service, 14, 0, 0);

/**
 * @generated from enum bytebase.v1.PlanCheckRun.Result.Status
 */
export const PlanCheckRun_Result_Status = /*@__PURE__*/
  tsEnum(PlanCheckRun_Result_StatusSchema);

/**
 * Describes the enum bytebase.v1.PlanCheckRun.Type.
 */
export const PlanCheckRun_TypeSchema = /*@__PURE__*/
  enumDesc(file_v1_plan_service, 14, 0);

/**
 * @generated from enum bytebase.v1.PlanCheckRun.Type
 */
export const PlanCheckRun_Type = /*@__PURE__*/
  tsEnum(PlanCheckRun_TypeSchema);

/**
 * Describes the enum bytebase.v1.PlanCheckRun.Status.
 */
export const PlanCheckRun_StatusSchema = /*@__PURE__*/
  enumDesc(file_v1_plan_service, 14, 1);

/**
 * @generated from enum bytebase.v1.PlanCheckRun.Status
 */
export const PlanCheckRun_Status = /*@__PURE__*/
  tsEnum(PlanCheckRun_StatusSchema);

/**
 * @generated from service bytebase.v1.PlanService
 */
export const PlanService = /*@__PURE__*/
  serviceDesc(file_v1_plan_service, 0);

