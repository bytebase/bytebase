// @generated by protoc-gen-es v2.5.2
// @generated from file v1/plan_service.proto (package bytebase.v1, syntax proto3)
/* eslint-disable */

import { enumDesc, fileDesc, messageDesc, serviceDesc, tsEnum } from "@bufbuild/protobuf/codegenv2";
import { file_google_api_annotations } from "../google/api/annotations_pb";
import { file_google_api_client } from "../google/api/client_pb";
import { file_google_api_field_behavior } from "../google/api/field_behavior_pb";
import { file_google_api_resource } from "../google/api/resource_pb";
import { file_google_protobuf_field_mask, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import { file_v1_annotation } from "./annotation_pb";
import { file_v1_common } from "./common_pb";
import { file_v1_database_service } from "./database_service_pb";

/**
 * Describes the file v1/plan_service.proto.
 */
export const file_v1_plan_service = /*@__PURE__*/
  fileDesc("ChV2MS9wbGFuX3NlcnZpY2UucHJvdG8SC2J5dGViYXNlLnYxIjkKDkdldFBsYW5SZXF1ZXN0EicKBG5hbWUYASABKAlCGeBBAvpBEwoRYnl0ZWJhc2UuY29tL1BsYW4iZwoQTGlzdFBsYW5zUmVxdWVzdBIsCgZwYXJlbnQYASABKAlCHOBBAvpBFgoUYnl0ZWJhc2UuY29tL1Byb2plY3QSEQoJcGFnZV9zaXplGAIgASgFEhIKCnBhZ2VfdG9rZW4YAyABKAkiTgoRTGlzdFBsYW5zUmVzcG9uc2USIAoFcGxhbnMYASADKAsyES5ieXRlYmFzZS52MS5QbGFuEhcKD25leHRfcGFnZV90b2tlbhgCIAEoCSJgChJTZWFyY2hQbGFuc1JlcXVlc3QSEwoGcGFyZW50GAEgASgJQgPgQQISEQoJcGFnZV9zaXplGAIgASgFEhIKCnBhZ2VfdG9rZW4YAyABKAkSDgoGZmlsdGVyGAQgASgJIlAKE1NlYXJjaFBsYW5zUmVzcG9uc2USIAoFcGxhbnMYASADKAsyES5ieXRlYmFzZS52MS5QbGFuEhcKD25leHRfcGFnZV90b2tlbhgCIAEoCSJnChFDcmVhdGVQbGFuUmVxdWVzdBIsCgZwYXJlbnQYASABKAlCHOBBAvpBFgoUYnl0ZWJhc2UuY29tL1Byb2plY3QSJAoEcGxhbhgCIAEoCzIRLmJ5dGViYXNlLnYxLlBsYW5CA+BBAiJvChFVcGRhdGVQbGFuUmVxdWVzdBIkCgRwbGFuGAEgASgLMhEuYnl0ZWJhc2UudjEuUGxhbkID4EECEjQKC3VwZGF0ZV9tYXNrGAIgASgLMhouZ29vZ2xlLnByb3RvYnVmLkZpZWxkTWFza0ID4EECItsNCgRQbGFuEgwKBG5hbWUYASABKAkSIQoFc3RhdGUYAiABKA4yEi5ieXRlYmFzZS52MS5TdGF0ZRISCgVpc3N1ZRgDIAEoCUID4EEDEhQKB3JvbGxvdXQYDyABKAlCA+BBAxINCgV0aXRsZRgEIAEoCRITCgtkZXNjcmlwdGlvbhgFIAEoCRIlCgVzcGVjcxgOIAMoCzIWLmJ5dGViYXNlLnYxLlBsYW4uU3BlYxIUCgdjcmVhdG9yGAggASgJQgPgQQMSNAoLY3JlYXRlX3RpbWUYCSABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wQgPgQQMSNAoLdXBkYXRlX3RpbWUYCiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wQgPgQQMSWAobcGxhbl9jaGVja19ydW5fc3RhdHVzX2NvdW50GAsgAygLMi4uYnl0ZWJhc2UudjEuUGxhbi5QbGFuQ2hlY2tSdW5TdGF0dXNDb3VudEVudHJ5QgPgQQMSMAoKZGVwbG95bWVudBgNIAEoCzIcLmJ5dGViYXNlLnYxLlBsYW4uRGVwbG95bWVudBryAQoEU3BlYxIKCgJpZBgFIAEoCRJIChZjcmVhdGVfZGF0YWJhc2VfY29uZmlnGAEgASgLMiYuYnl0ZWJhc2UudjEuUGxhbi5DcmVhdGVEYXRhYmFzZUNvbmZpZ0gAEkgKFmNoYW5nZV9kYXRhYmFzZV9jb25maWcYAiABKAsyJi5ieXRlYmFzZS52MS5QbGFuLkNoYW5nZURhdGFiYXNlQ29uZmlnSAASQAoSZXhwb3J0X2RhdGFfY29uZmlnGAcgASgLMiIuYnl0ZWJhc2UudjEuUGxhbi5FeHBvcnREYXRhQ29uZmlnSABCCAoGY29uZmlnGj4KHFBsYW5DaGVja1J1blN0YXR1c0NvdW50RW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgFOgI4ARrOAQoUQ3JlYXRlRGF0YWJhc2VDb25maWcSEwoGdGFyZ2V0GAEgASgJQgPgQQISFQoIZGF0YWJhc2UYAiABKAlCA+BBAhISCgV0YWJsZRgDIAEoCUID4EEBEhoKDWNoYXJhY3Rlcl9zZXQYBCABKAlCA+BBARIWCgljb2xsYXRpb24YBSABKAlCA+BBARIUCgdjbHVzdGVyGAYgASgJQgPgQQESEgoFb3duZXIYByABKAlCA+BBARIYCgtlbnZpcm9ubWVudBgJIAEoCUID4EEBGp8DChRDaGFuZ2VEYXRhYmFzZUNvbmZpZxIPCgd0YXJnZXRzGAogAygJEg0KBXNoZWV0GAIgASgJEioKB3JlbGVhc2UYCSABKAlCGfpBFgoUYnl0ZWJhc2UuY29tL1JlbGVhc2USOQoEdHlwZRgDIAEoDjIrLmJ5dGViYXNlLnYxLlBsYW4uQ2hhbmdlRGF0YWJhc2VDb25maWcuVHlwZRJLCgtnaG9zdF9mbGFncxgHIAMoCzI2LmJ5dGViYXNlLnYxLlBsYW4uQ2hhbmdlRGF0YWJhc2VDb25maWcuR2hvc3RGbGFnc0VudHJ5EhsKE2VuYWJsZV9wcmlvcl9iYWNrdXAYCCABKAgaMQoPR2hvc3RGbGFnc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEiVwoEVHlwZRIUChBUWVBFX1VOU1BFQ0lGSUVEEAASCwoHTUlHUkFURRACEg8KC01JR1JBVEVfU0RMEAMSEQoNTUlHUkFURV9HSE9TVBAEEggKBERBVEEQBkoECAUQBkoECAYQBxqBAQoQRXhwb3J0RGF0YUNvbmZpZxIPCgd0YXJnZXRzGAUgAygJEg0KBXNoZWV0GAIgASgJEikKBmZvcm1hdBgDIAEoDjIZLmJ5dGViYXNlLnYxLkV4cG9ydEZvcm1hdBIVCghwYXNzd29yZBgEIAEoCUgAiAEBQgsKCV9wYXNzd29yZBq5AQoKRGVwbG95bWVudBIUCgxlbnZpcm9ubWVudHMYASADKAkSUgoXZGF0YWJhc2VfZ3JvdXBfbWFwcGluZ3MYAiADKAsyMS5ieXRlYmFzZS52MS5QbGFuLkRlcGxveW1lbnQuRGF0YWJhc2VHcm91cE1hcHBpbmcaQQoURGF0YWJhc2VHcm91cE1hcHBpbmcSFgoOZGF0YWJhc2VfZ3JvdXAYASABKAkSEQoJZGF0YWJhc2VzGAIgAygJOjfqQTQKEWJ5dGViYXNlLmNvbS9QbGFuEh9wcm9qZWN0cy97cHJvamVjdH0vcGxhbnMve3BsYW59IpEBChhMaXN0UGxhbkNoZWNrUnVuc1JlcXVlc3QSKQoGcGFyZW50GAEgASgJQhngQQL6QRMKEWJ5dGViYXNlLmNvbS9QbGFuEhEKCXBhZ2Vfc2l6ZRgCIAEoBRISCgpwYWdlX3Rva2VuGAMgASgJEhMKC2xhdGVzdF9vbmx5GAQgASgIEg4KBmZpbHRlchgFIAEoCSJoChlMaXN0UGxhbkNoZWNrUnVuc1Jlc3BvbnNlEjIKD3BsYW5fY2hlY2tfcnVucxgBIAMoCzIZLmJ5dGViYXNlLnYxLlBsYW5DaGVja1J1bhIXCg9uZXh0X3BhZ2VfdG9rZW4YAiABKAkiYQoUUnVuUGxhbkNoZWNrc1JlcXVlc3QSJwoEbmFtZRgBIAEoCUIZ4EEC+kETChFieXRlYmFzZS5jb20vUGxhbhIUCgdzcGVjX2lkGAIgASgJSACIAQFCCgoIX3NwZWNfaWQiFwoVUnVuUGxhbkNoZWNrc1Jlc3BvbnNlImUKH0JhdGNoQ2FuY2VsUGxhbkNoZWNrUnVuc1JlcXVlc3QSKQoGcGFyZW50GAEgASgJQhngQQL6QRMKEWJ5dGViYXNlLmNvbS9QbGFuEhcKD3BsYW5fY2hlY2tfcnVucxgCIAMoCSIiCiBCYXRjaENhbmNlbFBsYW5DaGVja1J1bnNSZXNwb25zZSKmCQoMUGxhbkNoZWNrUnVuEgwKBG5hbWUYASABKAkSLAoEdHlwZRgDIAEoDjIeLmJ5dGViYXNlLnYxLlBsYW5DaGVja1J1bi5UeXBlEjAKBnN0YXR1cxgEIAEoDjIgLmJ5dGViYXNlLnYxLlBsYW5DaGVja1J1bi5TdGF0dXMSDgoGdGFyZ2V0GAUgASgJEg0KBXNoZWV0GAYgASgJEjEKB3Jlc3VsdHMYByADKAsyIC5ieXRlYmFzZS52MS5QbGFuQ2hlY2tSdW4uUmVzdWx0Eg0KBWVycm9yGAggASgJEjQKC2NyZWF0ZV90aW1lGAkgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEID4EEDGv8ECgZSZXN1bHQSNwoGc3RhdHVzGAEgASgOMicuYnl0ZWJhc2UudjEuUGxhbkNoZWNrUnVuLlJlc3VsdC5TdGF0dXMSDQoFdGl0bGUYAiABKAkSDwoHY29udGVudBgDIAEoCRIMCgRjb2RlGAQgASgFEk8KEnNxbF9zdW1tYXJ5X3JlcG9ydBgFIAEoCzIxLmJ5dGViYXNlLnYxLlBsYW5DaGVja1J1bi5SZXN1bHQuU3FsU3VtbWFyeVJlcG9ydEgAEk0KEXNxbF9yZXZpZXdfcmVwb3J0GAYgASgLMjAuYnl0ZWJhc2UudjEuUGxhbkNoZWNrUnVuLlJlc3VsdC5TcWxSZXZpZXdSZXBvcnRIABqCAQoQU3FsU3VtbWFyeVJlcG9ydBIXCg9zdGF0ZW1lbnRfdHlwZXMYAiADKAkSFQoNYWZmZWN0ZWRfcm93cxgDIAEoBRI4ChFjaGFuZ2VkX3Jlc291cmNlcxgEIAEoCzIdLmJ5dGViYXNlLnYxLkNoYW5nZWRSZXNvdXJjZXNKBAgBEAIalwEKD1NxbFJldmlld1JlcG9ydBIMCgRsaW5lGAEgASgFEg4KBmNvbHVtbhgCIAEoBRItCg5zdGFydF9wb3NpdGlvbhgFIAEoCzIVLmJ5dGViYXNlLnYxLlBvc2l0aW9uEisKDGVuZF9wb3NpdGlvbhgGIAEoCzIVLmJ5dGViYXNlLnYxLlBvc2l0aW9uSgQIAxAESgQIBBAFIkUKBlN0YXR1cxIWChJTVEFUVVNfVU5TUEVDSUZJRUQQABIJCgVFUlJPUhABEgsKB1dBUk5JTkcQAhILCgdTVUNDRVNTEANCCAoGcmVwb3J0IrUBCgRUeXBlEhQKEFRZUEVfVU5TUEVDSUZJRUQQABIiCh5EQVRBQkFTRV9TVEFURU1FTlRfRkFLRV9BRFZJU0UQARIdChlEQVRBQkFTRV9TVEFURU1FTlRfQURWSVNFEAMSJQohREFUQUJBU0VfU1RBVEVNRU5UX1NVTU1BUllfUkVQT1JUEAUSFAoQREFUQUJBU0VfQ09OTkVDVBAGEhcKE0RBVEFCQVNFX0dIT1NUX1NZTkMQByJRCgZTdGF0dXMSFgoSU1RBVFVTX1VOU1BFQ0lGSUVEEAASCwoHUlVOTklORxABEggKBERPTkUQAhIKCgZGQUlMRUQQAxIMCghDQU5DRUxFRBAESgQIAhADMtIKCgtQbGFuU2VydmljZRJ7CgdHZXRQbGFuEhsuYnl0ZWJhc2UudjEuR2V0UGxhblJlcXVlc3QaES5ieXRlYmFzZS52MS5QbGFuIkDaQQRuYW1liuowDGJiLnBsYW5zLmdldJDqMAGC0+STAh8SHS92MS97bmFtZT1wcm9qZWN0cy8qL3BsYW5zLyp9Eo8BCglMaXN0UGxhbnMSHS5ieXRlYmFzZS52MS5MaXN0UGxhbnNSZXF1ZXN0Gh4uYnl0ZWJhc2UudjEuTGlzdFBsYW5zUmVzcG9uc2UiQ9pBBnBhcmVudIrqMA1iYi5wbGFucy5saXN0kOowAYLT5JMCHxIdL3YxL3twYXJlbnQ9cHJvamVjdHMvKn0vcGxhbnMSngEKC1NlYXJjaFBsYW5zEh8uYnl0ZWJhc2UudjEuU2VhcmNoUGxhbnNSZXF1ZXN0GiAuYnl0ZWJhc2UudjEuU2VhcmNoUGxhbnNSZXNwb25zZSJM2kEGcGFyZW50iuowDGJiLnBsYW5zLmdldJDqMAKC0+STAik6ASoiJC92MS97cGFyZW50PXByb2plY3RzLyp9L3BsYW5zOnNlYXJjaBKVAQoKQ3JlYXRlUGxhbhIeLmJ5dGViYXNlLnYxLkNyZWF0ZVBsYW5SZXF1ZXN0GhEuYnl0ZWJhc2UudjEuUGxhbiJU2kELcGFyZW50LHBsYW6K6jAPYmIucGxhbnMuY3JlYXRlkOowAZjqMAGC0+STAiU6BHBsYW4iHS92MS97cGFyZW50PXByb2plY3RzLyp9L3BsYW5zEp8BCgpVcGRhdGVQbGFuEh4uYnl0ZWJhc2UudjEuVXBkYXRlUGxhblJlcXVlc3QaES5ieXRlYmFzZS52MS5QbGFuIl7aQRBwbGFuLHVwZGF0ZV9tYXNriuowD2JiLnBsYW5zLnVwZGF0ZZDqMAKY6jABgtPkkwIqOgRwbGFuMiIvdjEve3BsYW4ubmFtZT1wcm9qZWN0cy8qL3BsYW5zLyp9Er8BChFMaXN0UGxhbkNoZWNrUnVucxIlLmJ5dGViYXNlLnYxLkxpc3RQbGFuQ2hlY2tSdW5zUmVxdWVzdBomLmJ5dGViYXNlLnYxLkxpc3RQbGFuQ2hlY2tSdW5zUmVzcG9uc2UiW9pBBnBhcmVudIrqMBViYi5wbGFuQ2hlY2tSdW5zLmxpc3SQ6jABgtPkkwIvEi0vdjEve3BhcmVudD1wcm9qZWN0cy8qL3BsYW5zLyp9L3BsYW5DaGVja1J1bnMSsQEKDVJ1blBsYW5DaGVja3MSIS5ieXRlYmFzZS52MS5SdW5QbGFuQ2hlY2tzUmVxdWVzdBoiLmJ5dGViYXNlLnYxLlJ1blBsYW5DaGVja3NSZXNwb25zZSJZ2kEEbmFtZYrqMBRiYi5wbGFuQ2hlY2tSdW5zLnJ1bpDqMAGC0+STAjA6ASoiKy92MS97bmFtZT1wcm9qZWN0cy8qL3BsYW5zLyp9OnJ1blBsYW5DaGVja3MS4gEKGEJhdGNoQ2FuY2VsUGxhbkNoZWNrUnVucxIsLmJ5dGViYXNlLnYxLkJhdGNoQ2FuY2VsUGxhbkNoZWNrUnVuc1JlcXVlc3QaLS5ieXRlYmFzZS52MS5CYXRjaENhbmNlbFBsYW5DaGVja1J1bnNSZXNwb25zZSJp2kEGcGFyZW50iuowFGJiLnBsYW5DaGVja1J1bnMucnVukOowAYLT5JMCPjoBKiI5L3YxL3twYXJlbnQ9cHJvamVjdHMvKi9wbGFucy8qfS9wbGFuQ2hlY2tSdW5zOmJhdGNoQ2FuY2VsQjZaNGdpdGh1Yi5jb20vYnl0ZWJhc2UvYnl0ZWJhc2UvYmFja2VuZC9nZW5lcmF0ZWQtZ28vdjFiBnByb3RvMw", [file_google_api_annotations, file_google_api_client, file_google_api_field_behavior, file_google_api_resource, file_google_protobuf_field_mask, file_google_protobuf_timestamp, file_v1_annotation, file_v1_common, file_v1_database_service]);

/**
 * Describes the message bytebase.v1.GetPlanRequest.
 * Use `create(GetPlanRequestSchema)` to create a new message.
 */
export const GetPlanRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 0);

/**
 * Describes the message bytebase.v1.ListPlansRequest.
 * Use `create(ListPlansRequestSchema)` to create a new message.
 */
export const ListPlansRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 1);

/**
 * Describes the message bytebase.v1.ListPlansResponse.
 * Use `create(ListPlansResponseSchema)` to create a new message.
 */
export const ListPlansResponseSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 2);

/**
 * Describes the message bytebase.v1.SearchPlansRequest.
 * Use `create(SearchPlansRequestSchema)` to create a new message.
 */
export const SearchPlansRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 3);

/**
 * Describes the message bytebase.v1.SearchPlansResponse.
 * Use `create(SearchPlansResponseSchema)` to create a new message.
 */
export const SearchPlansResponseSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 4);

/**
 * Describes the message bytebase.v1.CreatePlanRequest.
 * Use `create(CreatePlanRequestSchema)` to create a new message.
 */
export const CreatePlanRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 5);

/**
 * Describes the message bytebase.v1.UpdatePlanRequest.
 * Use `create(UpdatePlanRequestSchema)` to create a new message.
 */
export const UpdatePlanRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 6);

/**
 * Describes the message bytebase.v1.Plan.
 * Use `create(PlanSchema)` to create a new message.
 */
export const PlanSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 7);

/**
 * Describes the message bytebase.v1.Plan.Spec.
 * Use `create(Plan_SpecSchema)` to create a new message.
 */
export const Plan_SpecSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 7, 0);

/**
 * Describes the message bytebase.v1.Plan.CreateDatabaseConfig.
 * Use `create(Plan_CreateDatabaseConfigSchema)` to create a new message.
 */
export const Plan_CreateDatabaseConfigSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 7, 1);

/**
 * Describes the message bytebase.v1.Plan.ChangeDatabaseConfig.
 * Use `create(Plan_ChangeDatabaseConfigSchema)` to create a new message.
 */
export const Plan_ChangeDatabaseConfigSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 7, 2);

/**
 * Describes the enum bytebase.v1.Plan.ChangeDatabaseConfig.Type.
 */
export const Plan_ChangeDatabaseConfig_TypeSchema = /*@__PURE__*/
  enumDesc(file_v1_plan_service, 7, 2, 0);

/**
 * Type is the database change type.
 *
 * @generated from enum bytebase.v1.Plan.ChangeDatabaseConfig.Type
 */
export const Plan_ChangeDatabaseConfig_Type = /*@__PURE__*/
  tsEnum(Plan_ChangeDatabaseConfig_TypeSchema);

/**
 * Describes the message bytebase.v1.Plan.ExportDataConfig.
 * Use `create(Plan_ExportDataConfigSchema)` to create a new message.
 */
export const Plan_ExportDataConfigSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 7, 3);

/**
 * Describes the message bytebase.v1.Plan.Deployment.
 * Use `create(Plan_DeploymentSchema)` to create a new message.
 */
export const Plan_DeploymentSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 7, 4);

/**
 * Describes the message bytebase.v1.Plan.Deployment.DatabaseGroupMapping.
 * Use `create(Plan_Deployment_DatabaseGroupMappingSchema)` to create a new message.
 */
export const Plan_Deployment_DatabaseGroupMappingSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 7, 4, 0);

/**
 * Describes the message bytebase.v1.ListPlanCheckRunsRequest.
 * Use `create(ListPlanCheckRunsRequestSchema)` to create a new message.
 */
export const ListPlanCheckRunsRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 8);

/**
 * Describes the message bytebase.v1.ListPlanCheckRunsResponse.
 * Use `create(ListPlanCheckRunsResponseSchema)` to create a new message.
 */
export const ListPlanCheckRunsResponseSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 9);

/**
 * Describes the message bytebase.v1.RunPlanChecksRequest.
 * Use `create(RunPlanChecksRequestSchema)` to create a new message.
 */
export const RunPlanChecksRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 10);

/**
 * Describes the message bytebase.v1.RunPlanChecksResponse.
 * Use `create(RunPlanChecksResponseSchema)` to create a new message.
 */
export const RunPlanChecksResponseSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 11);

/**
 * Describes the message bytebase.v1.BatchCancelPlanCheckRunsRequest.
 * Use `create(BatchCancelPlanCheckRunsRequestSchema)` to create a new message.
 */
export const BatchCancelPlanCheckRunsRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 12);

/**
 * Describes the message bytebase.v1.BatchCancelPlanCheckRunsResponse.
 * Use `create(BatchCancelPlanCheckRunsResponseSchema)` to create a new message.
 */
export const BatchCancelPlanCheckRunsResponseSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 13);

/**
 * Describes the message bytebase.v1.PlanCheckRun.
 * Use `create(PlanCheckRunSchema)` to create a new message.
 */
export const PlanCheckRunSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 14);

/**
 * Describes the message bytebase.v1.PlanCheckRun.Result.
 * Use `create(PlanCheckRun_ResultSchema)` to create a new message.
 */
export const PlanCheckRun_ResultSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 14, 0);

/**
 * Describes the message bytebase.v1.PlanCheckRun.Result.SqlSummaryReport.
 * Use `create(PlanCheckRun_Result_SqlSummaryReportSchema)` to create a new message.
 */
export const PlanCheckRun_Result_SqlSummaryReportSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 14, 0, 0);

/**
 * Describes the message bytebase.v1.PlanCheckRun.Result.SqlReviewReport.
 * Use `create(PlanCheckRun_Result_SqlReviewReportSchema)` to create a new message.
 */
export const PlanCheckRun_Result_SqlReviewReportSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 14, 0, 1);

/**
 * Describes the enum bytebase.v1.PlanCheckRun.Result.Status.
 */
export const PlanCheckRun_Result_StatusSchema = /*@__PURE__*/
  enumDesc(file_v1_plan_service, 14, 0, 0);

/**
 * @generated from enum bytebase.v1.PlanCheckRun.Result.Status
 */
export const PlanCheckRun_Result_Status = /*@__PURE__*/
  tsEnum(PlanCheckRun_Result_StatusSchema);

/**
 * Describes the enum bytebase.v1.PlanCheckRun.Type.
 */
export const PlanCheckRun_TypeSchema = /*@__PURE__*/
  enumDesc(file_v1_plan_service, 14, 0);

/**
 * @generated from enum bytebase.v1.PlanCheckRun.Type
 */
export const PlanCheckRun_Type = /*@__PURE__*/
  tsEnum(PlanCheckRun_TypeSchema);

/**
 * Describes the enum bytebase.v1.PlanCheckRun.Status.
 */
export const PlanCheckRun_StatusSchema = /*@__PURE__*/
  enumDesc(file_v1_plan_service, 14, 1);

/**
 * @generated from enum bytebase.v1.PlanCheckRun.Status
 */
export const PlanCheckRun_Status = /*@__PURE__*/
  tsEnum(PlanCheckRun_StatusSchema);

/**
 * @generated from service bytebase.v1.PlanService
 */
export const PlanService = /*@__PURE__*/
  serviceDesc(file_v1_plan_service, 0);

