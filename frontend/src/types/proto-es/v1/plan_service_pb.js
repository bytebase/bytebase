// @generated by protoc-gen-es v2.5.2
// @generated from file v1/plan_service.proto (package bytebase.v1, syntax proto3)
/* eslint-disable */

import { enumDesc, fileDesc, messageDesc, serviceDesc, tsEnum } from "@bufbuild/protobuf/codegenv2";
import { file_google_api_annotations } from "../google/api/annotations_pb";
import { file_google_api_client } from "../google/api/client_pb";
import { file_google_api_field_behavior } from "../google/api/field_behavior_pb";
import { file_google_api_resource } from "../google/api/resource_pb";
import { file_google_protobuf_field_mask, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import { file_v1_annotation } from "./annotation_pb";
import { file_v1_common } from "./common_pb";
import { file_v1_database_service } from "./database_service_pb";
import { file_v1_sql_service } from "./sql_service_pb";

/**
 * Describes the file v1/plan_service.proto.
 */
export const file_v1_plan_service = /*@__PURE__*/
  fileDesc("ChV2MS9wbGFuX3NlcnZpY2UucHJvdG8SC2J5dGViYXNlLnYxIjkKDkdldFBsYW5SZXF1ZXN0EicKBG5hbWUYASABKAlCGeBBAvpBEwoRYnl0ZWJhc2UuY29tL1BsYW4iZwoQTGlzdFBsYW5zUmVxdWVzdBIsCgZwYXJlbnQYASABKAlCHOBBAvpBFgoUYnl0ZWJhc2UuY29tL1Byb2plY3QSEQoJcGFnZV9zaXplGAIgASgFEhIKCnBhZ2VfdG9rZW4YAyABKAkiTgoRTGlzdFBsYW5zUmVzcG9uc2USIAoFcGxhbnMYASADKAsyES5ieXRlYmFzZS52MS5QbGFuEhcKD25leHRfcGFnZV90b2tlbhgCIAEoCSJgChJTZWFyY2hQbGFuc1JlcXVlc3QSEwoGcGFyZW50GAEgASgJQgPgQQISEQoJcGFnZV9zaXplGAIgASgFEhIKCnBhZ2VfdG9rZW4YAyABKAkSDgoGZmlsdGVyGAQgASgJIlAKE1NlYXJjaFBsYW5zUmVzcG9uc2USIAoFcGxhbnMYASADKAsyES5ieXRlYmFzZS52MS5QbGFuEhcKD25leHRfcGFnZV90b2tlbhgCIAEoCSJnChFDcmVhdGVQbGFuUmVxdWVzdBIsCgZwYXJlbnQYASABKAlCHOBBAvpBFgoUYnl0ZWJhc2UuY29tL1Byb2plY3QSJAoEcGxhbhgCIAEoCzIRLmJ5dGViYXNlLnYxLlBsYW5CA+BBAiKGAQoRVXBkYXRlUGxhblJlcXVlc3QSJAoEcGxhbhgBIAEoCzIRLmJ5dGViYXNlLnYxLlBsYW5CA+BBAhI0Cgt1cGRhdGVfbWFzaxgCIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5GaWVsZE1hc2tCA+BBAhIVCg1hbGxvd19taXNzaW5nGAMgASgIIqoNCgRQbGFuEgwKBG5hbWUYASABKAkSIQoFc3RhdGUYAiABKA4yEi5ieXRlYmFzZS52MS5TdGF0ZRISCgVpc3N1ZRgDIAEoCUID4EEDEhQKB3JvbGxvdXQYDyABKAlCA+BBAxINCgV0aXRsZRgEIAEoCRITCgtkZXNjcmlwdGlvbhgFIAEoCRIlCgVzcGVjcxgOIAMoCzIWLmJ5dGViYXNlLnYxLlBsYW4uU3BlYxIUCgdjcmVhdG9yGAggASgJQgPgQQMSNAoLY3JlYXRlX3RpbWUYCSABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wQgPgQQMSNAoLdXBkYXRlX3RpbWUYCiABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wQgPgQQMSWAobcGxhbl9jaGVja19ydW5fc3RhdHVzX2NvdW50GAsgAygLMi4uYnl0ZWJhc2UudjEuUGxhbi5QbGFuQ2hlY2tSdW5TdGF0dXNDb3VudEVudHJ5QgPgQQMSMAoKZGVwbG95bWVudBgNIAEoCzIcLmJ5dGViYXNlLnYxLlBsYW4uRGVwbG95bWVudBryAQoEU3BlYxIKCgJpZBgFIAEoCRJIChZjcmVhdGVfZGF0YWJhc2VfY29uZmlnGAEgASgLMiYuYnl0ZWJhc2UudjEuUGxhbi5DcmVhdGVEYXRhYmFzZUNvbmZpZ0gAEkgKFmNoYW5nZV9kYXRhYmFzZV9jb25maWcYAiABKAsyJi5ieXRlYmFzZS52MS5QbGFuLkNoYW5nZURhdGFiYXNlQ29uZmlnSAASQAoSZXhwb3J0X2RhdGFfY29uZmlnGAcgASgLMiIuYnl0ZWJhc2UudjEuUGxhbi5FeHBvcnREYXRhQ29uZmlnSABCCAoGY29uZmlnGj4KHFBsYW5DaGVja1J1blN0YXR1c0NvdW50RW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgFOgI4ARrOAQoUQ3JlYXRlRGF0YWJhc2VDb25maWcSEwoGdGFyZ2V0GAEgASgJQgPgQQISFQoIZGF0YWJhc2UYAiABKAlCA+BBAhISCgV0YWJsZRgDIAEoCUID4EEBEhoKDWNoYXJhY3Rlcl9zZXQYBCABKAlCA+BBARIWCgljb2xsYXRpb24YBSABKAlCA+BBARIUCgdjbHVzdGVyGAYgASgJQgPgQQESEgoFb3duZXIYByABKAlCA+BBARIYCgtlbnZpcm9ubWVudBgJIAEoCUID4EEBGu4CChRDaGFuZ2VEYXRhYmFzZUNvbmZpZxIPCgd0YXJnZXRzGAogAygJEg0KBXNoZWV0GAIgASgJEioKB3JlbGVhc2UYCSABKAlCGfpBFgoUYnl0ZWJhc2UuY29tL1JlbGVhc2USLQoEdHlwZRgDIAEoDjIfLmJ5dGViYXNlLnYxLkRhdGFiYXNlQ2hhbmdlVHlwZRIyCg5taWdyYXRpb25fdHlwZRgLIAEoDjIaLmJ5dGViYXNlLnYxLk1pZ3JhdGlvblR5cGUSSwoLZ2hvc3RfZmxhZ3MYByADKAsyNi5ieXRlYmFzZS52MS5QbGFuLkNoYW5nZURhdGFiYXNlQ29uZmlnLkdob3N0RmxhZ3NFbnRyeRIbChNlbmFibGVfcHJpb3JfYmFja3VwGAggASgIGjEKD0dob3N0RmxhZ3NFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBSgQIBRAGSgQIBhAHGoEBChBFeHBvcnREYXRhQ29uZmlnEg8KB3RhcmdldHMYBSADKAkSDQoFc2hlZXQYAiABKAkSKQoGZm9ybWF0GAMgASgOMhkuYnl0ZWJhc2UudjEuRXhwb3J0Rm9ybWF0EhUKCHBhc3N3b3JkGAQgASgJSACIAQFCCwoJX3Bhc3N3b3JkGrkBCgpEZXBsb3ltZW50EhQKDGVudmlyb25tZW50cxgBIAMoCRJSChdkYXRhYmFzZV9ncm91cF9tYXBwaW5ncxgCIAMoCzIxLmJ5dGViYXNlLnYxLlBsYW4uRGVwbG95bWVudC5EYXRhYmFzZUdyb3VwTWFwcGluZxpBChREYXRhYmFzZUdyb3VwTWFwcGluZxIWCg5kYXRhYmFzZV9ncm91cBgBIAEoCRIRCglkYXRhYmFzZXMYAiADKAk6N+pBNAoRYnl0ZWJhc2UuY29tL1BsYW4SH3Byb2plY3RzL3twcm9qZWN0fS9wbGFucy97cGxhbn0ikQEKGExpc3RQbGFuQ2hlY2tSdW5zUmVxdWVzdBIpCgZwYXJlbnQYASABKAlCGeBBAvpBEwoRYnl0ZWJhc2UuY29tL1BsYW4SEQoJcGFnZV9zaXplGAIgASgFEhIKCnBhZ2VfdG9rZW4YAyABKAkSEwoLbGF0ZXN0X29ubHkYBCABKAgSDgoGZmlsdGVyGAUgASgJImgKGUxpc3RQbGFuQ2hlY2tSdW5zUmVzcG9uc2USMgoPcGxhbl9jaGVja19ydW5zGAEgAygLMhkuYnl0ZWJhc2UudjEuUGxhbkNoZWNrUnVuEhcKD25leHRfcGFnZV90b2tlbhgCIAEoCSJhChRSdW5QbGFuQ2hlY2tzUmVxdWVzdBInCgRuYW1lGAEgASgJQhngQQL6QRMKEWJ5dGViYXNlLmNvbS9QbGFuEhQKB3NwZWNfaWQYAiABKAlIAIgBAUIKCghfc3BlY19pZCIXChVSdW5QbGFuQ2hlY2tzUmVzcG9uc2UiZQofQmF0Y2hDYW5jZWxQbGFuQ2hlY2tSdW5zUmVxdWVzdBIpCgZwYXJlbnQYASABKAlCGeBBAvpBEwoRYnl0ZWJhc2UuY29tL1BsYW4SFwoPcGxhbl9jaGVja19ydW5zGAIgAygJIiIKIEJhdGNoQ2FuY2VsUGxhbkNoZWNrUnVuc1Jlc3BvbnNlIr8ICgxQbGFuQ2hlY2tSdW4SDAoEbmFtZRgBIAEoCRIsCgR0eXBlGAMgASgOMh4uYnl0ZWJhc2UudjEuUGxhbkNoZWNrUnVuLlR5cGUSMAoGc3RhdHVzGAQgASgOMiAuYnl0ZWJhc2UudjEuUGxhbkNoZWNrUnVuLlN0YXR1cxIOCgZ0YXJnZXQYBSABKAkSDQoFc2hlZXQYBiABKAkSMQoHcmVzdWx0cxgHIAMoCzIgLmJ5dGViYXNlLnYxLlBsYW5DaGVja1J1bi5SZXN1bHQSDQoFZXJyb3IYCCABKAkSNAoLY3JlYXRlX3RpbWUYCSABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wQgPgQQMamAQKBlJlc3VsdBIpCgZzdGF0dXMYASABKA4yGS5ieXRlYmFzZS52MS5BZHZpY2UuTGV2ZWwSDQoFdGl0bGUYAiABKAkSDwoHY29udGVudBgDIAEoCRIMCgRjb2RlGAQgASgFEk8KEnNxbF9zdW1tYXJ5X3JlcG9ydBgFIAEoCzIxLmJ5dGViYXNlLnYxLlBsYW5DaGVja1J1bi5SZXN1bHQuU3FsU3VtbWFyeVJlcG9ydEgAEk0KEXNxbF9yZXZpZXdfcmVwb3J0GAYgASgLMjAuYnl0ZWJhc2UudjEuUGxhbkNoZWNrUnVuLlJlc3VsdC5TcWxSZXZpZXdSZXBvcnRIABqCAQoQU3FsU3VtbWFyeVJlcG9ydBIXCg9zdGF0ZW1lbnRfdHlwZXMYAiADKAkSFQoNYWZmZWN0ZWRfcm93cxgDIAEoAxI4ChFjaGFuZ2VkX3Jlc291cmNlcxgEIAEoCzIdLmJ5dGViYXNlLnYxLkNoYW5nZWRSZXNvdXJjZXNKBAgBEAIahQEKD1NxbFJldmlld1JlcG9ydBItCg5zdGFydF9wb3NpdGlvbhgFIAEoCzIVLmJ5dGViYXNlLnYxLlBvc2l0aW9uEisKDGVuZF9wb3NpdGlvbhgGIAEoCzIVLmJ5dGViYXNlLnYxLlBvc2l0aW9uSgQIARACSgQIAhADSgQIAxAESgQIBBAFQggKBnJlcG9ydCK1AQoEVHlwZRIUChBUWVBFX1VOU1BFQ0lGSUVEEAASIgoeREFUQUJBU0VfU1RBVEVNRU5UX0ZBS0VfQURWSVNFEAESHQoZREFUQUJBU0VfU1RBVEVNRU5UX0FEVklTRRADEiUKIURBVEFCQVNFX1NUQVRFTUVOVF9TVU1NQVJZX1JFUE9SVBAFEhQKEERBVEFCQVNFX0NPTk5FQ1QQBhIXChNEQVRBQkFTRV9HSE9TVF9TWU5DEAciUQoGU3RhdHVzEhYKElNUQVRVU19VTlNQRUNJRklFRBAAEgsKB1JVTk5JTkcQARIICgRET05FEAISCgoGRkFJTEVEEAMSDAoIQ0FOQ0VMRUQQBEoECAIQAzLSCgoLUGxhblNlcnZpY2USewoHR2V0UGxhbhIbLmJ5dGViYXNlLnYxLkdldFBsYW5SZXF1ZXN0GhEuYnl0ZWJhc2UudjEuUGxhbiJA2kEEbmFtZYrqMAxiYi5wbGFucy5nZXSQ6jABgtPkkwIfEh0vdjEve25hbWU9cHJvamVjdHMvKi9wbGFucy8qfRKPAQoJTGlzdFBsYW5zEh0uYnl0ZWJhc2UudjEuTGlzdFBsYW5zUmVxdWVzdBoeLmJ5dGViYXNlLnYxLkxpc3RQbGFuc1Jlc3BvbnNlIkPaQQZwYXJlbnSK6jANYmIucGxhbnMubGlzdJDqMAGC0+STAh8SHS92MS97cGFyZW50PXByb2plY3RzLyp9L3BsYW5zEp4BCgtTZWFyY2hQbGFucxIfLmJ5dGViYXNlLnYxLlNlYXJjaFBsYW5zUmVxdWVzdBogLmJ5dGViYXNlLnYxLlNlYXJjaFBsYW5zUmVzcG9uc2UiTNpBBnBhcmVudIrqMAxiYi5wbGFucy5nZXSQ6jACgtPkkwIpOgEqIiQvdjEve3BhcmVudD1wcm9qZWN0cy8qfS9wbGFuczpzZWFyY2gSlQEKCkNyZWF0ZVBsYW4SHi5ieXRlYmFzZS52MS5DcmVhdGVQbGFuUmVxdWVzdBoRLmJ5dGViYXNlLnYxLlBsYW4iVNpBC3BhcmVudCxwbGFuiuowD2JiLnBsYW5zLmNyZWF0ZZDqMAGY6jABgtPkkwIlOgRwbGFuIh0vdjEve3BhcmVudD1wcm9qZWN0cy8qfS9wbGFucxKfAQoKVXBkYXRlUGxhbhIeLmJ5dGViYXNlLnYxLlVwZGF0ZVBsYW5SZXF1ZXN0GhEuYnl0ZWJhc2UudjEuUGxhbiJe2kEQcGxhbix1cGRhdGVfbWFza4rqMA9iYi5wbGFucy51cGRhdGWQ6jACmOowAYLT5JMCKjoEcGxhbjIiL3YxL3twbGFuLm5hbWU9cHJvamVjdHMvKi9wbGFucy8qfRK/AQoRTGlzdFBsYW5DaGVja1J1bnMSJS5ieXRlYmFzZS52MS5MaXN0UGxhbkNoZWNrUnVuc1JlcXVlc3QaJi5ieXRlYmFzZS52MS5MaXN0UGxhbkNoZWNrUnVuc1Jlc3BvbnNlIlvaQQZwYXJlbnSK6jAVYmIucGxhbkNoZWNrUnVucy5saXN0kOowAYLT5JMCLxItL3YxL3twYXJlbnQ9cHJvamVjdHMvKi9wbGFucy8qfS9wbGFuQ2hlY2tSdW5zErEBCg1SdW5QbGFuQ2hlY2tzEiEuYnl0ZWJhc2UudjEuUnVuUGxhbkNoZWNrc1JlcXVlc3QaIi5ieXRlYmFzZS52MS5SdW5QbGFuQ2hlY2tzUmVzcG9uc2UiWdpBBG5hbWWK6jAUYmIucGxhbkNoZWNrUnVucy5ydW6Q6jABgtPkkwIwOgEqIisvdjEve25hbWU9cHJvamVjdHMvKi9wbGFucy8qfTpydW5QbGFuQ2hlY2tzEuIBChhCYXRjaENhbmNlbFBsYW5DaGVja1J1bnMSLC5ieXRlYmFzZS52MS5CYXRjaENhbmNlbFBsYW5DaGVja1J1bnNSZXF1ZXN0Gi0uYnl0ZWJhc2UudjEuQmF0Y2hDYW5jZWxQbGFuQ2hlY2tSdW5zUmVzcG9uc2UiadpBBnBhcmVudIrqMBRiYi5wbGFuQ2hlY2tSdW5zLnJ1bpDqMAGC0+STAj46ASoiOS92MS97cGFyZW50PXByb2plY3RzLyovcGxhbnMvKn0vcGxhbkNoZWNrUnVuczpiYXRjaENhbmNlbEI2WjRnaXRodWIuY29tL2J5dGViYXNlL2J5dGViYXNlL2JhY2tlbmQvZ2VuZXJhdGVkLWdvL3YxYgZwcm90bzM", [file_google_api_annotations, file_google_api_client, file_google_api_field_behavior, file_google_api_resource, file_google_protobuf_field_mask, file_google_protobuf_timestamp, file_v1_annotation, file_v1_common, file_v1_database_service, file_v1_sql_service]);

/**
 * Describes the message bytebase.v1.GetPlanRequest.
 * Use `create(GetPlanRequestSchema)` to create a new message.
 */
export const GetPlanRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 0);

/**
 * Describes the message bytebase.v1.ListPlansRequest.
 * Use `create(ListPlansRequestSchema)` to create a new message.
 */
export const ListPlansRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 1);

/**
 * Describes the message bytebase.v1.ListPlansResponse.
 * Use `create(ListPlansResponseSchema)` to create a new message.
 */
export const ListPlansResponseSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 2);

/**
 * Describes the message bytebase.v1.SearchPlansRequest.
 * Use `create(SearchPlansRequestSchema)` to create a new message.
 */
export const SearchPlansRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 3);

/**
 * Describes the message bytebase.v1.SearchPlansResponse.
 * Use `create(SearchPlansResponseSchema)` to create a new message.
 */
export const SearchPlansResponseSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 4);

/**
 * Describes the message bytebase.v1.CreatePlanRequest.
 * Use `create(CreatePlanRequestSchema)` to create a new message.
 */
export const CreatePlanRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 5);

/**
 * Describes the message bytebase.v1.UpdatePlanRequest.
 * Use `create(UpdatePlanRequestSchema)` to create a new message.
 */
export const UpdatePlanRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 6);

/**
 * Describes the message bytebase.v1.Plan.
 * Use `create(PlanSchema)` to create a new message.
 */
export const PlanSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 7);

/**
 * Describes the message bytebase.v1.Plan.Spec.
 * Use `create(Plan_SpecSchema)` to create a new message.
 */
export const Plan_SpecSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 7, 0);

/**
 * Describes the message bytebase.v1.Plan.CreateDatabaseConfig.
 * Use `create(Plan_CreateDatabaseConfigSchema)` to create a new message.
 */
export const Plan_CreateDatabaseConfigSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 7, 1);

/**
 * Describes the message bytebase.v1.Plan.ChangeDatabaseConfig.
 * Use `create(Plan_ChangeDatabaseConfigSchema)` to create a new message.
 */
export const Plan_ChangeDatabaseConfigSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 7, 2);

/**
 * Describes the message bytebase.v1.Plan.ExportDataConfig.
 * Use `create(Plan_ExportDataConfigSchema)` to create a new message.
 */
export const Plan_ExportDataConfigSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 7, 3);

/**
 * Describes the message bytebase.v1.Plan.Deployment.
 * Use `create(Plan_DeploymentSchema)` to create a new message.
 */
export const Plan_DeploymentSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 7, 4);

/**
 * Describes the message bytebase.v1.Plan.Deployment.DatabaseGroupMapping.
 * Use `create(Plan_Deployment_DatabaseGroupMappingSchema)` to create a new message.
 */
export const Plan_Deployment_DatabaseGroupMappingSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 7, 4, 0);

/**
 * Describes the message bytebase.v1.ListPlanCheckRunsRequest.
 * Use `create(ListPlanCheckRunsRequestSchema)` to create a new message.
 */
export const ListPlanCheckRunsRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 8);

/**
 * Describes the message bytebase.v1.ListPlanCheckRunsResponse.
 * Use `create(ListPlanCheckRunsResponseSchema)` to create a new message.
 */
export const ListPlanCheckRunsResponseSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 9);

/**
 * Describes the message bytebase.v1.RunPlanChecksRequest.
 * Use `create(RunPlanChecksRequestSchema)` to create a new message.
 */
export const RunPlanChecksRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 10);

/**
 * Describes the message bytebase.v1.RunPlanChecksResponse.
 * Use `create(RunPlanChecksResponseSchema)` to create a new message.
 */
export const RunPlanChecksResponseSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 11);

/**
 * Describes the message bytebase.v1.BatchCancelPlanCheckRunsRequest.
 * Use `create(BatchCancelPlanCheckRunsRequestSchema)` to create a new message.
 */
export const BatchCancelPlanCheckRunsRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 12);

/**
 * Describes the message bytebase.v1.BatchCancelPlanCheckRunsResponse.
 * Use `create(BatchCancelPlanCheckRunsResponseSchema)` to create a new message.
 */
export const BatchCancelPlanCheckRunsResponseSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 13);

/**
 * Describes the message bytebase.v1.PlanCheckRun.
 * Use `create(PlanCheckRunSchema)` to create a new message.
 */
export const PlanCheckRunSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 14);

/**
 * Describes the message bytebase.v1.PlanCheckRun.Result.
 * Use `create(PlanCheckRun_ResultSchema)` to create a new message.
 */
export const PlanCheckRun_ResultSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 14, 0);

/**
 * Describes the message bytebase.v1.PlanCheckRun.Result.SqlSummaryReport.
 * Use `create(PlanCheckRun_Result_SqlSummaryReportSchema)` to create a new message.
 */
export const PlanCheckRun_Result_SqlSummaryReportSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 14, 0, 0);

/**
 * Describes the message bytebase.v1.PlanCheckRun.Result.SqlReviewReport.
 * Use `create(PlanCheckRun_Result_SqlReviewReportSchema)` to create a new message.
 */
export const PlanCheckRun_Result_SqlReviewReportSchema = /*@__PURE__*/
  messageDesc(file_v1_plan_service, 14, 0, 1);

/**
 * Describes the enum bytebase.v1.PlanCheckRun.Type.
 */
export const PlanCheckRun_TypeSchema = /*@__PURE__*/
  enumDesc(file_v1_plan_service, 14, 0);

/**
 * @generated from enum bytebase.v1.PlanCheckRun.Type
 */
export const PlanCheckRun_Type = /*@__PURE__*/
  tsEnum(PlanCheckRun_TypeSchema);

/**
 * Describes the enum bytebase.v1.PlanCheckRun.Status.
 */
export const PlanCheckRun_StatusSchema = /*@__PURE__*/
  enumDesc(file_v1_plan_service, 14, 1);

/**
 * @generated from enum bytebase.v1.PlanCheckRun.Status
 */
export const PlanCheckRun_Status = /*@__PURE__*/
  tsEnum(PlanCheckRun_StatusSchema);

/**
 * PlanService manages deployment plans for database changes.
 *
 * @generated from service bytebase.v1.PlanService
 */
export const PlanService = /*@__PURE__*/
  serviceDesc(file_v1_plan_service, 0);

