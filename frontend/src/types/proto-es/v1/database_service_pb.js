// @generated by protoc-gen-es v2.5.2
// @generated from file v1/database_service.proto (package bytebase.v1, syntax proto3)
/* eslint-disable */

import { enumDesc, fileDesc, messageDesc, serviceDesc, tsEnum } from "@bufbuild/protobuf/codegenv2";
import { file_google_api_annotations } from "../google/api/annotations_pb";
import { file_google_api_client } from "../google/api/client_pb";
import { file_google_api_field_behavior } from "../google/api/field_behavior_pb";
import { file_google_api_resource } from "../google/api/resource_pb";
import { file_google_protobuf_field_mask, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import { file_v1_annotation } from "./annotation_pb";
import { file_v1_common } from "./common_pb";
import { file_v1_instance_service } from "./instance_service_pb";

/**
 * Describes the file v1/database_service.proto.
 */
export const file_v1_database_service = /*@__PURE__*/
  fileDesc("Chl2MS9kYXRhYmFzZV9zZXJ2aWNlLnByb3RvEgtieXRlYmFzZS52MSJBChJHZXREYXRhYmFzZVJlcXVlc3QSKwoEbmFtZRgBIAEoCUId4EEC+kEXChVieXRlYmFzZS5jb20vRGF0YWJhc2UidwoYQmF0Y2hHZXREYXRhYmFzZXNSZXF1ZXN0Ei0KBnBhcmVudBgBIAEoCUId4EEC+kEXEhVieXRlYmFzZS5jb20vRGF0YWJhc2USLAoFbmFtZXMYAiADKAlCHeBBAvpBFwoVYnl0ZWJhc2UuY29tL0RhdGFiYXNlIkUKGUJhdGNoR2V0RGF0YWJhc2VzUmVzcG9uc2USKAoJZGF0YWJhc2VzGAEgAygLMhUuYnl0ZWJhc2UudjEuRGF0YWJhc2UikgEKFExpc3REYXRhYmFzZXNSZXF1ZXN0Ei0KBnBhcmVudBgBIAEoCUId4EEC+kEXEhVieXRlYmFzZS5jb20vRGF0YWJhc2USEQoJcGFnZV9zaXplGAIgASgFEhIKCnBhZ2VfdG9rZW4YAyABKAkSDgoGZmlsdGVyGAQgASgJEhQKDHNob3dfZGVsZXRlZBgFIAEoCCJaChVMaXN0RGF0YWJhc2VzUmVzcG9uc2USKAoJZGF0YWJhc2VzGAEgAygLMhUuYnl0ZWJhc2UudjEuRGF0YWJhc2USFwoPbmV4dF9wYWdlX3Rva2VuGAIgASgJInYKFVVwZGF0ZURhdGFiYXNlUmVxdWVzdBIsCghkYXRhYmFzZRgBIAEoCzIVLmJ5dGViYXNlLnYxLkRhdGFiYXNlQgPgQQISLwoLdXBkYXRlX21hc2sYAiABKAsyGi5nb29nbGUucHJvdG9idWYuRmllbGRNYXNrImgKG0JhdGNoVXBkYXRlRGF0YWJhc2VzUmVxdWVzdBIOCgZwYXJlbnQYASABKAkSOQoIcmVxdWVzdHMYAiADKAsyIi5ieXRlYmFzZS52MS5VcGRhdGVEYXRhYmFzZVJlcXVlc3RCA+BBAiJIChxCYXRjaFVwZGF0ZURhdGFiYXNlc1Jlc3BvbnNlEigKCWRhdGFiYXNlcxgBIAMoCzIVLmJ5dGViYXNlLnYxLkRhdGFiYXNlIlkKGUJhdGNoU3luY0RhdGFiYXNlc1JlcXVlc3QSDgoGcGFyZW50GAEgASgJEiwKBW5hbWVzGAIgAygJQh3gQQL6QRcKFWJ5dGViYXNlLmNvbS9EYXRhYmFzZSIcChpCYXRjaFN5bmNEYXRhYmFzZXNSZXNwb25zZSJCChNTeW5jRGF0YWJhc2VSZXF1ZXN0EisKBG5hbWUYASABKAlCHeBBAvpBFwoVYnl0ZWJhc2UuY29tL0RhdGFiYXNlIhYKFFN5bmNEYXRhYmFzZVJlc3BvbnNlImEKGkdldERhdGFiYXNlTWV0YWRhdGFSZXF1ZXN0EjMKBG5hbWUYASABKAlCJeBBAvpBHwodYnl0ZWJhc2UuY29tL0RhdGFiYXNlTWV0YWRhdGESDgoGZmlsdGVyGAIgASgJImEKGEdldERhdGFiYXNlU2NoZW1hUmVxdWVzdBIxCgRuYW1lGAEgASgJQiPgQQL6QR0KG2J5dGViYXNlLmNvbS9EYXRhYmFzZVNjaGVtYRISCgpzZGxfZm9ybWF0GAIgASgIIoUBChFEaWZmU2NoZW1hUmVxdWVzdBIrCgRuYW1lGAEgASgJQh3gQQL6QRcKFWJ5dGViYXNlLmNvbS9EYXRhYmFzZRIQCgZzY2hlbWEYAiABKAlIABITCgljaGFuZ2Vsb2cYAyABKAlIABISCgpzZGxfZm9ybWF0GAQgASgIQggKBnRhcmdldCIiChJEaWZmU2NoZW1hUmVzcG9uc2USDAoEZGlmZhgBIAEoCSKOBAoIRGF0YWJhc2USDAoEbmFtZRgBIAEoCRImCgVzdGF0ZRgDIAEoDjISLmJ5dGViYXNlLnYxLlN0YXRlQgPgQQMSPQoUc3VjY2Vzc2Z1bF9zeW5jX3RpbWUYBCABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wQgPgQQMSDwoHcHJvamVjdBgFIAEoCRIbCg5zY2hlbWFfdmVyc2lvbhgGIAEoCUID4EEDEhgKC2Vudmlyb25tZW50GAcgASgJQgPgQQESIgoVZWZmZWN0aXZlX2Vudmlyb25tZW50GAggASgJQgPgQQMSMQoGbGFiZWxzGAkgAygLMiEuYnl0ZWJhc2UudjEuRGF0YWJhc2UuTGFiZWxzRW50cnkSPQoRaW5zdGFuY2VfcmVzb3VyY2UYCiABKAsyHS5ieXRlYmFzZS52MS5JbnN0YW5jZVJlc291cmNlQgPgQQMSHQoQYmFja3VwX2F2YWlsYWJsZRgLIAEoCEID4EEDEhQKB2RyaWZ0ZWQYDCABKAhCA+BBAxotCgtMYWJlbHNFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBOkXqQUIKFWJ5dGViYXNlLmNvbS9EYXRhYmFzZRIpaW5zdGFuY2VzL3tpbnN0YW5jZX0vZGF0YWJhc2VzL3tkYXRhYmFzZX1KBAgCEAMiqQIKEERhdGFiYXNlTWV0YWRhdGESDAoEbmFtZRgBIAEoCRIsCgdzY2hlbWFzGAIgAygLMhsuYnl0ZWJhc2UudjEuU2NoZW1hTWV0YWRhdGESFQoNY2hhcmFjdGVyX3NldBgDIAEoCRIRCgljb2xsYXRpb24YBCABKAkSMgoKZXh0ZW5zaW9ucxgFIAMoCzIeLmJ5dGViYXNlLnYxLkV4dGVuc2lvbk1ldGFkYXRhEg0KBW93bmVyGAcgASgJEhMKC3NlYXJjaF9wYXRoGAggASgJOlfqQVQKHWJ5dGViYXNlLmNvbS9EYXRhYmFzZU1ldGFkYXRhEjNieXRlYmFzZS5jb20vRGF0YWJhc2UvZGF0YWJhc2VzL3tkYXRhYmFzZX0vbWV0YWRhdGEipgUKDlNjaGVtYU1ldGFkYXRhEgwKBG5hbWUYASABKAkSKgoGdGFibGVzGAIgAygLMhouYnl0ZWJhc2UudjEuVGFibGVNZXRhZGF0YRI7Cg9leHRlcm5hbF90YWJsZXMYAyADKAsyIi5ieXRlYmFzZS52MS5FeHRlcm5hbFRhYmxlTWV0YWRhdGESKAoFdmlld3MYBCADKAsyGS5ieXRlYmFzZS52MS5WaWV3TWV0YWRhdGESMAoJZnVuY3Rpb25zGAUgAygLMh0uYnl0ZWJhc2UudjEuRnVuY3Rpb25NZXRhZGF0YRIyCgpwcm9jZWR1cmVzGAYgAygLMh4uYnl0ZWJhc2UudjEuUHJvY2VkdXJlTWV0YWRhdGESLAoHc3RyZWFtcxgHIAMoCzIbLmJ5dGViYXNlLnYxLlN0cmVhbU1ldGFkYXRhEigKBXRhc2tzGAggAygLMhkuYnl0ZWJhc2UudjEuVGFza01ldGFkYXRhEkEKEm1hdGVyaWFsaXplZF92aWV3cxgJIAMoCzIlLmJ5dGViYXNlLnYxLk1hdGVyaWFsaXplZFZpZXdNZXRhZGF0YRIuCghwYWNrYWdlcxgKIAMoCzIcLmJ5dGViYXNlLnYxLlBhY2thZ2VNZXRhZGF0YRINCgVvd25lchgLIAEoCRIwCglzZXF1ZW5jZXMYDSADKAsyHS5ieXRlYmFzZS52MS5TZXF1ZW5jZU1ldGFkYXRhEioKBmV2ZW50cxgOIAMoCzIaLmJ5dGViYXNlLnYxLkV2ZW50TWV0YWRhdGESMQoKZW51bV90eXBlcxgPIAMoCzIdLmJ5dGViYXNlLnYxLkVudW1UeXBlTWV0YWRhdGESEQoJc2tpcF9kdW1wGBAgASgIEg8KB2NvbW1lbnQYESABKAkiVAoQRW51bVR5cGVNZXRhZGF0YRIMCgRuYW1lGAEgASgJEg4KBnZhbHVlcxgCIAMoCRIPCgdjb21tZW50GAMgASgJEhEKCXNraXBfZHVtcBgEIAEoCCKjAQoNRXZlbnRNZXRhZGF0YRIMCgRuYW1lGAEgASgJEhIKCmRlZmluaXRpb24YAiABKAkSEQoJdGltZV96b25lGAMgASgJEhAKCHNxbF9tb2RlGAQgASgJEhwKFGNoYXJhY3Rlcl9zZXRfY2xpZW50GAUgASgJEhwKFGNvbGxhdGlvbl9jb25uZWN0aW9uGAYgASgJEg8KB2NvbW1lbnQYByABKAkigQIKEFNlcXVlbmNlTWV0YWRhdGESDAoEbmFtZRgBIAEoCRIRCglkYXRhX3R5cGUYAiABKAkSDQoFc3RhcnQYAyABKAkSEQoJbWluX3ZhbHVlGAQgASgJEhEKCW1heF92YWx1ZRgFIAEoCRIRCglpbmNyZW1lbnQYBiABKAkSDQoFY3ljbGUYByABKAgSEgoKY2FjaGVfc2l6ZRgIIAEoCRISCgpsYXN0X3ZhbHVlGAkgASgJEhMKC293bmVyX3RhYmxlGAogASgJEhQKDG93bmVyX2NvbHVtbhgLIAEoCRIPCgdjb21tZW50GAwgASgJEhEKCXNraXBfZHVtcBgNIAEoCCK+AQoPVHJpZ2dlck1ldGFkYXRhEgwKBG5hbWUYASABKAkSDQoFZXZlbnQYAyABKAkSDgoGdGltaW5nGAQgASgJEgwKBGJvZHkYBSABKAkSEAoIc3FsX21vZGUYBiABKAkSHAoUY2hhcmFjdGVyX3NldF9jbGllbnQYByABKAkSHAoUY29sbGF0aW9uX2Nvbm5lY3Rpb24YCCABKAkSDwoHY29tbWVudBgJIAEoCRIRCglza2lwX2R1bXAYCiABKAgikQEKFUV4dGVybmFsVGFibGVNZXRhZGF0YRIMCgRuYW1lGAEgASgJEhwKFGV4dGVybmFsX3NlcnZlcl9uYW1lGAIgASgJEh4KFmV4dGVybmFsX2RhdGFiYXNlX25hbWUYAyABKAkSLAoHY29sdW1ucxgEIAMoCzIbLmJ5dGViYXNlLnYxLkNvbHVtbk1ldGFkYXRhIoIFCg1UYWJsZU1ldGFkYXRhEgwKBG5hbWUYASABKAkSLAoHY29sdW1ucxgCIAMoCzIbLmJ5dGViYXNlLnYxLkNvbHVtbk1ldGFkYXRhEisKB2luZGV4ZXMYAyADKAsyGi5ieXRlYmFzZS52MS5JbmRleE1ldGFkYXRhEg4KBmVuZ2luZRgEIAEoCRIRCgljb2xsYXRpb24YBSABKAkSDwoHY2hhcnNldBgRIAEoCRIRCglyb3dfY291bnQYBiABKAMSEQoJZGF0YV9zaXplGAcgASgDEhIKCmluZGV4X3NpemUYCCABKAMSEQoJZGF0YV9mcmVlGAkgASgDEhYKDmNyZWF0ZV9vcHRpb25zGAogASgJEg8KB2NvbW1lbnQYCyABKAkSFAoMdXNlcl9jb21tZW50GA4gASgJEjUKDGZvcmVpZ25fa2V5cxgMIAMoCzIfLmJ5dGViYXNlLnYxLkZvcmVpZ25LZXlNZXRhZGF0YRI3CgpwYXJ0aXRpb25zGA8gAygLMiMuYnl0ZWJhc2UudjEuVGFibGVQYXJ0aXRpb25NZXRhZGF0YRI/ChFjaGVja19jb25zdHJhaW50cxgQIAMoCzIkLmJ5dGViYXNlLnYxLkNoZWNrQ29uc3RyYWludE1ldGFkYXRhEg0KBW93bmVyGBIgASgJEhQKDHNvcnRpbmdfa2V5cxgTIAMoCRIuCgh0cmlnZ2VycxgUIAMoCzIcLmJ5dGViYXNlLnYxLlRyaWdnZXJNZXRhZGF0YRIRCglza2lwX2R1bXAYFSABKAgSFQoNc2hhcmRpbmdfaW5mbxgWIAEoCRIYChBwcmltYXJ5X2tleV90eXBlGBcgASgJIjsKF0NoZWNrQ29uc3RyYWludE1ldGFkYXRhEgwKBG5hbWUYASABKAkSEgoKZXhwcmVzc2lvbhgCIAEoCSLNAwoWVGFibGVQYXJ0aXRpb25NZXRhZGF0YRIMCgRuYW1lGAEgASgJEjYKBHR5cGUYAiABKA4yKC5ieXRlYmFzZS52MS5UYWJsZVBhcnRpdGlvbk1ldGFkYXRhLlR5cGUSEgoKZXhwcmVzc2lvbhgDIAEoCRINCgV2YWx1ZRgEIAEoCRITCgt1c2VfZGVmYXVsdBgFIAEoCRI6Cg1zdWJwYXJ0aXRpb25zGAYgAygLMiMuYnl0ZWJhc2UudjEuVGFibGVQYXJ0aXRpb25NZXRhZGF0YRIrCgdpbmRleGVzGAcgAygLMhouYnl0ZWJhc2UudjEuSW5kZXhNZXRhZGF0YRI/ChFjaGVja19jb25zdHJhaW50cxgIIAMoCzIkLmJ5dGViYXNlLnYxLkNoZWNrQ29uc3RyYWludE1ldGFkYXRhIooBCgRUeXBlEhQKEFRZUEVfVU5TUEVDSUZJRUQQABIJCgVSQU5HRRABEhEKDVJBTkdFX0NPTFVNTlMQAhIICgRMSVNUEAMSEAoMTElTVF9DT0xVTU5TEAQSCAoESEFTSBAFEg8KC0xJTkVBUl9IQVNIEAYSBwoDS0VZEAcSDgoKTElORUFSX0tFWRAIIscECg5Db2x1bW5NZXRhZGF0YRIMCgRuYW1lGAEgASgJEhAKCHBvc2l0aW9uGAIgASgFEhMKC2hhc19kZWZhdWx0GAMgASgIEg8KB2RlZmF1bHQYFyABKAkSFwoPZGVmYXVsdF9vbl9udWxsGBIgASgIEhEKCW9uX3VwZGF0ZRgPIAEoCRIQCghudWxsYWJsZRgHIAEoCBIMCgR0eXBlGAggASgJEhUKDWNoYXJhY3Rlcl9zZXQYCSABKAkSEQoJY29sbGF0aW9uGAogASgJEg8KB2NvbW1lbnQYCyABKAkSFAoMdXNlcl9jb21tZW50GA0gASgJEjMKCmdlbmVyYXRpb24YECABKAsyHy5ieXRlYmFzZS52MS5HZW5lcmF0aW9uTWV0YWRhdGESEwoLaXNfaWRlbnRpdHkYEyABKAgSSwoTaWRlbnRpdHlfZ2VuZXJhdGlvbhgRIAEoDjIuLmJ5dGViYXNlLnYxLkNvbHVtbk1ldGFkYXRhLklkZW50aXR5R2VuZXJhdGlvbhIVCg1pZGVudGl0eV9zZWVkGBQgASgDEhoKEmlkZW50aXR5X2luY3JlbWVudBgVIAEoAxIfChdkZWZhdWx0X2NvbnN0cmFpbnRfbmFtZRgWIAEoCSJVChJJZGVudGl0eUdlbmVyYXRpb24SIwofSURFTlRJVFlfR0VORVJBVElPTl9VTlNQRUNJRklFRBAAEgoKBkFMV0FZUxABEg4KCkJZX0RFRkFVTFQQAkoECAQQBUoECAUQBkoECAYQByKTAQoSR2VuZXJhdGlvbk1ldGFkYXRhEjIKBHR5cGUYASABKA4yJC5ieXRlYmFzZS52MS5HZW5lcmF0aW9uTWV0YWRhdGEuVHlwZRISCgpleHByZXNzaW9uGAIgASgJIjUKBFR5cGUSFAoQVFlQRV9VTlNQRUNJRklFRBAAEgsKB1ZJUlRVQUwQARIKCgZTVE9SRUQQAiLtAQoMVmlld01ldGFkYXRhEgwKBG5hbWUYASABKAkSEgoKZGVmaW5pdGlvbhgCIAEoCRIPCgdjb21tZW50GAMgASgJEjkKEmRlcGVuZGVuY3lfY29sdW1ucxgEIAMoCzIdLmJ5dGViYXNlLnYxLkRlcGVuZGVuY3lDb2x1bW4SLAoHY29sdW1ucxgFIAMoCzIbLmJ5dGViYXNlLnYxLkNvbHVtbk1ldGFkYXRhEi4KCHRyaWdnZXJzGAYgAygLMhwuYnl0ZWJhc2UudjEuVHJpZ2dlck1ldGFkYXRhEhEKCXNraXBfZHVtcBgHIAEoCCJBChBEZXBlbmRlbmN5Q29sdW1uEg4KBnNjaGVtYRgBIAEoCRINCgV0YWJsZRgCIAEoCRIOCgZjb2x1bW4YAyABKAki+AEKGE1hdGVyaWFsaXplZFZpZXdNZXRhZGF0YRIMCgRuYW1lGAEgASgJEhIKCmRlZmluaXRpb24YAiABKAkSDwoHY29tbWVudBgDIAEoCRI5ChJkZXBlbmRlbmN5X2NvbHVtbnMYBCADKAsyHS5ieXRlYmFzZS52MS5EZXBlbmRlbmN5Q29sdW1uEi4KCHRyaWdnZXJzGAUgAygLMhwuYnl0ZWJhc2UudjEuVHJpZ2dlck1ldGFkYXRhEisKB2luZGV4ZXMYBiADKAsyGi5ieXRlYmFzZS52MS5JbmRleE1ldGFkYXRhEhEKCXNraXBfZHVtcBgHIAEoCCIwCg9EZXBlbmRlbmN5VGFibGUSDgoGc2NoZW1hGAEgASgJEg0KBXRhYmxlGAIgASgJIo4CChBGdW5jdGlvbk1ldGFkYXRhEgwKBG5hbWUYASABKAkSEgoKZGVmaW5pdGlvbhgCIAEoCRIRCglzaWduYXR1cmUYAyABKAkSHAoUY2hhcmFjdGVyX3NldF9jbGllbnQYBCABKAkSHAoUY29sbGF0aW9uX2Nvbm5lY3Rpb24YBSABKAkSGgoSZGF0YWJhc2VfY29sbGF0aW9uGAYgASgJEhAKCHNxbF9tb2RlGAcgASgJEg8KB2NvbW1lbnQYCCABKAkSNwoRZGVwZW5kZW5jeV90YWJsZXMYCSADKAsyHC5ieXRlYmFzZS52MS5EZXBlbmRlbmN5VGFibGUSEQoJc2tpcF9kdW1wGAogASgIItYBChFQcm9jZWR1cmVNZXRhZGF0YRIMCgRuYW1lGAEgASgJEhIKCmRlZmluaXRpb24YAiABKAkSEQoJc2lnbmF0dXJlGAMgASgJEhwKFGNoYXJhY3Rlcl9zZXRfY2xpZW50GAQgASgJEhwKFGNvbGxhdGlvbl9jb25uZWN0aW9uGAUgASgJEhoKEmRhdGFiYXNlX2NvbGxhdGlvbhgGIAEoCRIQCghzcWxfbW9kZRgHIAEoCRIPCgdjb21tZW50GAkgASgJEhEKCXNraXBfZHVtcBgIIAEoCCIzCg9QYWNrYWdlTWV0YWRhdGESDAoEbmFtZRgBIAEoCRISCgpkZWZpbml0aW9uGAIgASgJIpYCCgxUYXNrTWV0YWRhdGESDAoEbmFtZRgBIAEoCRIKCgJpZBgCIAEoCRINCgVvd25lchgDIAEoCRIPCgdjb21tZW50GAQgASgJEhEKCXdhcmVob3VzZRgFIAEoCRIQCghzY2hlZHVsZRgGIAEoCRIUCgxwcmVkZWNlc3NvcnMYByADKAkSLgoFc3RhdGUYCCABKA4yHy5ieXRlYmFzZS52MS5UYXNrTWV0YWRhdGEuU3RhdGUSEQoJY29uZGl0aW9uGAkgASgJEhIKCmRlZmluaXRpb24YCiABKAkiOgoFU3RhdGUSFQoRU1RBVEVfVU5TUEVDSUZJRUQQABILCgdTVEFSVEVEEAESDQoJU1VTUEVOREVEEAIiywIKDlN0cmVhbU1ldGFkYXRhEgwKBG5hbWUYASABKAkSEgoKdGFibGVfbmFtZRgCIAEoCRINCgVvd25lchgDIAEoCRIPCgdjb21tZW50GAQgASgJEi4KBHR5cGUYBSABKA4yIC5ieXRlYmFzZS52MS5TdHJlYW1NZXRhZGF0YS5UeXBlEg0KBXN0YWxlGAYgASgIEi4KBG1vZGUYByABKA4yIC5ieXRlYmFzZS52MS5TdHJlYW1NZXRhZGF0YS5Nb2RlEhIKCmRlZmluaXRpb24YCCABKAkiJwoEVHlwZRIUChBUWVBFX1VOU1BFQ0lGSUVEEAASCQoFREVMVEEQASJLCgRNb2RlEhQKEE1PREVfVU5TUEVDSUZJRUQQABILCgdERUZBVUxUEAESDwoLQVBQRU5EX09OTFkQAhIPCgtJTlNFUlRfT05MWRADIr0BChJTcGF0aWFsSW5kZXhDb25maWcSDgoGbWV0aG9kGAEgASgJEjUKDHRlc3NlbGxhdGlvbhgCIAEoCzIfLmJ5dGViYXNlLnYxLlRlc3NlbGxhdGlvbkNvbmZpZxIrCgdzdG9yYWdlGAMgASgLMhouYnl0ZWJhc2UudjEuU3RvcmFnZUNvbmZpZxIzCgtkaW1lbnNpb25hbBgEIAEoCzIeLmJ5dGViYXNlLnYxLkRpbWVuc2lvbmFsQ29uZmlnIpsBChJUZXNzZWxsYXRpb25Db25maWcSDgoGc2NoZW1lGAEgASgJEisKC2dyaWRfbGV2ZWxzGAIgAygLMhYuYnl0ZWJhc2UudjEuR3JpZExldmVsEhgKEGNlbGxzX3Blcl9vYmplY3QYAyABKAUSLgoMYm91bmRpbmdfYm94GAQgASgLMhguYnl0ZWJhc2UudjEuQm91bmRpbmdCb3giKwoJR3JpZExldmVsEg0KBWxldmVsGAEgASgFEg8KB2RlbnNpdHkYAiABKAkiRQoLQm91bmRpbmdCb3gSDAoEeG1pbhgBIAEoARIMCgR5bWluGAIgASgBEgwKBHhtYXgYAyABKAESDAoEeW1heBgEIAEoASK+AgoNU3RvcmFnZUNvbmZpZxISCgpmaWxsZmFjdG9yGAEgASgFEhEKCWJ1ZmZlcmluZxgCIAEoCRISCgp0YWJsZXNwYWNlGAMgASgJEhcKD3dvcmtfdGFibGVzcGFjZRgEIAEoCRIRCglzZG9fbGV2ZWwYBSABKAUSFwoPY29tbWl0X2ludGVydmFsGAYgASgFEhEKCXBhZF9pbmRleBgHIAEoCBIWCg5zb3J0X2luX3RlbXBkYhgIIAEoCRIVCg1kcm9wX2V4aXN0aW5nGAkgASgIEg4KBm9ubGluZRgKIAEoCBIXCg9hbGxvd19yb3dfbG9ja3MYCyABKAgSGAoQYWxsb3dfcGFnZV9sb2NrcxgMIAEoCBIOCgZtYXhkb3AYDSABKAUSGAoQZGF0YV9jb21wcmVzc2lvbhgOIAEoCSJ/ChFEaW1lbnNpb25hbENvbmZpZxISCgpkaW1lbnNpb25zGAEgASgFEhEKCWRhdGFfdHlwZRgCIAEoCRIMCgRzcmlkGAMgASgFEjUKC2NvbnN0cmFpbnRzGAQgAygLMiAuYnl0ZWJhc2UudjEuRGltZW5zaW9uQ29uc3RyYWludCJhChNEaW1lbnNpb25Db25zdHJhaW50EhEKCWRpbWVuc2lvbhgBIAEoCRIRCgltaW5fdmFsdWUYAiABKAESEQoJbWF4X3ZhbHVlGAMgASgBEhEKCXRvbGVyYW5jZRgEIAEoASLcAgoNSW5kZXhNZXRhZGF0YRIMCgRuYW1lGAEgASgJEhMKC2V4cHJlc3Npb25zGAIgAygJEhIKCmtleV9sZW5ndGgYCSADKAMSEgoKZGVzY2VuZGluZxgKIAMoCBIMCgR0eXBlGAMgASgJEg4KBnVuaXF1ZRgEIAEoCBIPCgdwcmltYXJ5GAUgASgIEg8KB3Zpc2libGUYBiABKAgSDwoHY29tbWVudBgHIAEoCRISCgpkZWZpbml0aW9uGAggASgJEhsKE3BhcmVudF9pbmRleF9zY2hlbWEYCyABKAkSGQoRcGFyZW50X2luZGV4X25hbWUYDCABKAkSEwoLZ3JhbnVsYXJpdHkYDSABKAMSFQoNaXNfY29uc3RyYWludBgOIAEoCBI3Cg5zcGF0aWFsX2NvbmZpZxgPIAEoCzIfLmJ5dGViYXNlLnYxLlNwYXRpYWxJbmRleENvbmZpZyJXChFFeHRlbnNpb25NZXRhZGF0YRIMCgRuYW1lGAEgASgJEg4KBnNjaGVtYRgCIAEoCRIPCgd2ZXJzaW9uGAMgASgJEhMKC2Rlc2NyaXB0aW9uGAQgASgJIr4BChJGb3JlaWduS2V5TWV0YWRhdGESDAoEbmFtZRgBIAEoCRIPCgdjb2x1bW5zGAIgAygJEhkKEXJlZmVyZW5jZWRfc2NoZW1hGAMgASgJEhgKEHJlZmVyZW5jZWRfdGFibGUYBCABKAkSGgoScmVmZXJlbmNlZF9jb2x1bW5zGAUgAygJEhEKCW9uX2RlbGV0ZRgGIAEoCRIRCglvbl91cGRhdGUYByABKAkSEgoKbWF0Y2hfdHlwZRgIIAEoCSIgCg5EYXRhYmFzZVNjaGVtYRIOCgZzY2hlbWEYASABKAkiSwoQQ2hhbmdlZFJlc291cmNlcxI3CglkYXRhYmFzZXMYASADKAsyJC5ieXRlYmFzZS52MS5DaGFuZ2VkUmVzb3VyY2VEYXRhYmFzZSJcChdDaGFuZ2VkUmVzb3VyY2VEYXRhYmFzZRIMCgRuYW1lGAEgASgJEjMKB3NjaGVtYXMYAiADKAsyIi5ieXRlYmFzZS52MS5DaGFuZ2VkUmVzb3VyY2VTY2hlbWEi/QEKFUNoYW5nZWRSZXNvdXJjZVNjaGVtYRIMCgRuYW1lGAEgASgJEjEKBnRhYmxlcxgCIAMoCzIhLmJ5dGViYXNlLnYxLkNoYW5nZWRSZXNvdXJjZVRhYmxlEi8KBXZpZXdzGAMgAygLMiAuYnl0ZWJhc2UudjEuQ2hhbmdlZFJlc291cmNlVmlldxI3CglmdW5jdGlvbnMYBCADKAsyJC5ieXRlYmFzZS52MS5DaGFuZ2VkUmVzb3VyY2VGdW5jdGlvbhI5Cgpwcm9jZWR1cmVzGAUgAygLMiUuYnl0ZWJhc2UudjEuQ2hhbmdlZFJlc291cmNlUHJvY2VkdXJlIkgKFENoYW5nZWRSZXNvdXJjZVRhYmxlEgwKBG5hbWUYASABKAkSIgoGcmFuZ2VzGAMgAygLMhIuYnl0ZWJhc2UudjEuUmFuZ2UiRwoTQ2hhbmdlZFJlc291cmNlVmlldxIMCgRuYW1lGAEgASgJEiIKBnJhbmdlcxgCIAMoCzISLmJ5dGViYXNlLnYxLlJhbmdlIksKF0NoYW5nZWRSZXNvdXJjZUZ1bmN0aW9uEgwKBG5hbWUYASABKAkSIgoGcmFuZ2VzGAIgAygLMhIuYnl0ZWJhc2UudjEuUmFuZ2UiTAoYQ2hhbmdlZFJlc291cmNlUHJvY2VkdXJlEgwKBG5hbWUYASABKAkSIgoGcmFuZ2VzGAIgAygLMhIuYnl0ZWJhc2UudjEuUmFuZ2UipwEKFUxpc3RDaGFuZ2Vsb2dzUmVxdWVzdBItCgZwYXJlbnQYASABKAlCHeBBAvpBFwoVYnl0ZWJhc2UuY29tL0RhdGFiYXNlEhEKCXBhZ2Vfc2l6ZRgCIAEoBRISCgpwYWdlX3Rva2VuGAMgASgJEigKBHZpZXcYBCABKA4yGi5ieXRlYmFzZS52MS5DaGFuZ2Vsb2dWaWV3Eg4KBmZpbHRlchgFIAEoCSJdChZMaXN0Q2hhbmdlbG9nc1Jlc3BvbnNlEioKCmNoYW5nZWxvZ3MYASADKAsyFi5ieXRlYmFzZS52MS5DaGFuZ2Vsb2cSFwoPbmV4dF9wYWdlX3Rva2VuGAIgASgJIokBChNHZXRDaGFuZ2Vsb2dSZXF1ZXN0EjQKBG5hbWUYASABKAlCJuBBAvpBIAoeYnl0ZWJhc2UuY29tL0RhdGFiYXNlQ2hhbmdlbG9nEigKBHZpZXcYAiABKA4yGi5ieXRlYmFzZS52MS5DaGFuZ2Vsb2dWaWV3EhIKCnNkbF9mb3JtYXQYAyABKAgizQUKCUNoYW5nZWxvZxIMCgRuYW1lGAEgASgJEi8KC2NyZWF0ZV90aW1lGAMgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcBItCgZzdGF0dXMYBCABKA4yHS5ieXRlYmFzZS52MS5DaGFuZ2Vsb2cuU3RhdHVzEhEKCXN0YXRlbWVudBgFIAEoCRIWCg5zdGF0ZW1lbnRfc2l6ZRgGIAEoAxIXCg9zdGF0ZW1lbnRfc2hlZXQYByABKAkSDgoGc2NoZW1hGAggASgJEhMKC3NjaGVtYV9zaXplGAkgASgDEhMKC3ByZXZfc2NoZW1hGAogASgJEhgKEHByZXZfc2NoZW1hX3NpemUYCyABKAMSDQoFaXNzdWUYDCABKAkSEAoIdGFza19ydW4YDSABKAkSDwoHdmVyc2lvbhgOIAEoCRIQCghyZXZpc2lvbhgPIAEoCRI4ChFjaGFuZ2VkX3Jlc291cmNlcxgQIAEoCzIdLmJ5dGViYXNlLnYxLkNoYW5nZWRSZXNvdXJjZXMSKQoEdHlwZRgRIAEoDjIbLmJ5dGViYXNlLnYxLkNoYW5nZWxvZy5UeXBlIkMKBlN0YXR1cxIWChJTVEFUVVNfVU5TUEVDSUZJRUQQABILCgdQRU5ESU5HEAESCAoERE9ORRACEgoKBkZBSUxFRBADImUKBFR5cGUSFAoQVFlQRV9VTlNQRUNJRklFRBAAEgwKCEJBU0VMSU5FEAESCwoHTUlHUkFURRACEg8KC01JR1JBVEVfU0RMEAMSEQoNTUlHUkFURV9HSE9TVBAEEggKBERBVEEQBjpl6kFiCh5ieXRlYmFzZS5jb20vRGF0YWJhc2VDaGFuZ2Vsb2cSQGluc3RhbmNlcy97aW5zdGFuY2V9L2RhdGFiYXNlcy97ZGF0YWJhc2V9L2NoYW5nZWxvZ3Mve2NoYW5nZWxvZ30i8QIKFkdldFNjaGVtYVN0cmluZ1JlcXVlc3QSKwoEbmFtZRgBIAEoCUId4EEC+kEXChVieXRlYmFzZS5jb20vRGF0YWJhc2USPAoEdHlwZRgCIAEoDjIuLmJ5dGViYXNlLnYxLkdldFNjaGVtYVN0cmluZ1JlcXVlc3QuT2JqZWN0VHlwZRIOCgZzY2hlbWEYAyABKAkSDgoGb2JqZWN0GAQgASgJEi8KCG1ldGFkYXRhGAUgASgLMh0uYnl0ZWJhc2UudjEuRGF0YWJhc2VNZXRhZGF0YSKaAQoKT2JqZWN0VHlwZRIbChdPQkpFQ1RfVFlQRV9VTlNQRUNJRklFRBAAEgwKCERBVEFCQVNFEAESCgoGU0NIRU1BEAISCQoFVEFCTEUQAxIICgRWSUVXEAQSFQoRTUFURVJJQUxJWkVEX1ZJRVcQBRIMCghGVU5DVElPThAGEg0KCVBST0NFRFVSRRAHEgwKCFNFUVVFTkNFEAgiMAoXR2V0U2NoZW1hU3RyaW5nUmVzcG9uc2USFQoNc2NoZW1hX3N0cmluZxgBIAEoCSpiCg1DaGFuZ2Vsb2dWaWV3Eh4KGkNIQU5HRUxPR19WSUVXX1VOU1BFQ0lGSUVEEAASGAoUQ0hBTkdFTE9HX1ZJRVdfQkFTSUMQARIXChNDSEFOR0VMT0dfVklFV19GVUxMEAIytRMKD0RhdGFiYXNlU2VydmljZRKQAQoLR2V0RGF0YWJhc2USHy5ieXRlYmFzZS52MS5HZXREYXRhYmFzZVJlcXVlc3QaFS5ieXRlYmFzZS52MS5EYXRhYmFzZSJJ2kEEbmFtZYrqMBBiYi5kYXRhYmFzZXMuZ2V0kOowAYLT5JMCJBIiL3YxL3tuYW1lPWluc3RhbmNlcy8qL2RhdGFiYXNlcy8qfRLdAQoRQmF0Y2hHZXREYXRhYmFzZXMSJS5ieXRlYmFzZS52MS5CYXRjaEdldERhdGFiYXNlc1JlcXVlc3QaJi5ieXRlYmFzZS52MS5CYXRjaEdldERhdGFiYXNlc1Jlc3BvbnNlInmK6jAQYmIuZGF0YWJhc2VzLmdldJDqMAKC0+STAltaLRIrL3YxL3twYXJlbnQ9aW5zdGFuY2VzLyp9L2RhdGFiYXNlczpiYXRjaEdldBIqL3YxL3twYXJlbnQ9cHJvamVjdHMvKn0vZGF0YWJhc2VzOmJhdGNoR2V0EusBCg1MaXN0RGF0YWJhc2VzEiEuYnl0ZWJhc2UudjEuTGlzdERhdGFiYXNlc1JlcXVlc3QaIi5ieXRlYmFzZS52MS5MaXN0RGF0YWJhc2VzUmVzcG9uc2UikgHaQQCK6jARYmIuZGF0YWJhc2VzLmxpc3SQ6jACgtPkkwJwWiQSIi92MS97cGFyZW50PWluc3RhbmNlcy8qfS9kYXRhYmFzZXNaJRIjL3YxL3twYXJlbnQ9d29ya3NwYWNlcy8qfS9kYXRhYmFzZXMSIS92MS97cGFyZW50PXByb2plY3RzLyp9L2RhdGFiYXNlcxLAAQoOVXBkYXRlRGF0YWJhc2USIi5ieXRlYmFzZS52MS5VcGRhdGVEYXRhYmFzZVJlcXVlc3QaFS5ieXRlYmFzZS52MS5EYXRhYmFzZSJz2kEUZGF0YWJhc2UsdXBkYXRlX21hc2uK6jATYmIuZGF0YWJhc2VzLnVwZGF0ZZDqMAGY6jABgtPkkwI3OghkYXRhYmFzZTIrL3YxL3tkYXRhYmFzZS5uYW1lPWluc3RhbmNlcy8qL2RhdGFiYXNlcy8qfRLFAQoUQmF0Y2hVcGRhdGVEYXRhYmFzZXMSKC5ieXRlYmFzZS52MS5CYXRjaFVwZGF0ZURhdGFiYXNlc1JlcXVlc3QaKS5ieXRlYmFzZS52MS5CYXRjaFVwZGF0ZURhdGFiYXNlc1Jlc3BvbnNlIliK6jATYmIuZGF0YWJhc2VzLnVwZGF0ZZDqMAGY6jABgtPkkwIzOgEqIi4vdjEve3BhcmVudD1pbnN0YW5jZXMvKn0vZGF0YWJhc2VzOmJhdGNoVXBkYXRlEqABCgxTeW5jRGF0YWJhc2USIC5ieXRlYmFzZS52MS5TeW5jRGF0YWJhc2VSZXF1ZXN0GiEuYnl0ZWJhc2UudjEuU3luY0RhdGFiYXNlUmVzcG9uc2UiS4rqMBFiYi5kYXRhYmFzZXMuc3luY5DqMAGC0+STAiw6ASoiJy92MS97bmFtZT1pbnN0YW5jZXMvKi9kYXRhYmFzZXMvKn06c3luYxK3AQoSQmF0Y2hTeW5jRGF0YWJhc2VzEiYuYnl0ZWJhc2UudjEuQmF0Y2hTeW5jRGF0YWJhc2VzUmVxdWVzdBonLmJ5dGViYXNlLnYxLkJhdGNoU3luY0RhdGFiYXNlc1Jlc3BvbnNlIlCK6jARYmIuZGF0YWJhc2VzLnN5bmOQ6jABgtPkkwIxOgEqIiwvdjEve3BhcmVudD1pbnN0YW5jZXMvKn0vZGF0YWJhc2VzOmJhdGNoU3luYxKwAQoTR2V0RGF0YWJhc2VNZXRhZGF0YRInLmJ5dGViYXNlLnYxLkdldERhdGFiYXNlTWV0YWRhdGFSZXF1ZXN0Gh0uYnl0ZWJhc2UudjEuRGF0YWJhc2VNZXRhZGF0YSJRiuowFmJiLmRhdGFiYXNlcy5nZXRTY2hlbWGQ6jABgtPkkwItEisvdjEve25hbWU9aW5zdGFuY2VzLyovZGF0YWJhc2VzLyovbWV0YWRhdGF9EqgBChFHZXREYXRhYmFzZVNjaGVtYRIlLmJ5dGViYXNlLnYxLkdldERhdGFiYXNlU2NoZW1hUmVxdWVzdBobLmJ5dGViYXNlLnYxLkRhdGFiYXNlU2NoZW1hIk+K6jAWYmIuZGF0YWJhc2VzLmdldFNjaGVtYZDqMAGC0+STAisSKS92MS97bmFtZT1pbnN0YW5jZXMvKi9kYXRhYmFzZXMvKi9zY2hlbWF9EuEBCgpEaWZmU2NoZW1hEh4uYnl0ZWJhc2UudjEuRGlmZlNjaGVtYVJlcXVlc3QaHy5ieXRlYmFzZS52MS5EaWZmU2NoZW1hUmVzcG9uc2UikQGK6jAQYmIuZGF0YWJhc2VzLmdldJDqMAGC0+STAnM6ASpaPzoBKiI6L3YxL3tuYW1lPWluc3RhbmNlcy8qL2RhdGFiYXNlcy8qL2NoYW5nZWxvZ3MvKn06ZGlmZlNjaGVtYSItL3YxL3tuYW1lPWluc3RhbmNlcy8qL2RhdGFiYXNlcy8qfTpkaWZmU2NoZW1hErUBCg5MaXN0Q2hhbmdlbG9ncxIiLmJ5dGViYXNlLnYxLkxpc3RDaGFuZ2Vsb2dzUmVxdWVzdBojLmJ5dGViYXNlLnYxLkxpc3RDaGFuZ2Vsb2dzUmVzcG9uc2UiWtpBBnBhcmVudIrqMBJiYi5jaGFuZ2Vsb2dzLmxpc3SQ6jABgtPkkwIxEi8vdjEve3BhcmVudD1pbnN0YW5jZXMvKi9kYXRhYmFzZXMvKn0vY2hhbmdlbG9ncxKhAQoMR2V0Q2hhbmdlbG9nEiAuYnl0ZWJhc2UudjEuR2V0Q2hhbmdlbG9nUmVxdWVzdBoWLmJ5dGViYXNlLnYxLkNoYW5nZWxvZyJX2kEEbmFtZYrqMBFiYi5jaGFuZ2Vsb2dzLmdldJDqMAGC0+STAjESLy92MS97bmFtZT1pbnN0YW5jZXMvKi9kYXRhYmFzZXMvKi9jaGFuZ2Vsb2dzLyp9EroBCg9HZXRTY2hlbWFTdHJpbmcSIy5ieXRlYmFzZS52MS5HZXRTY2hlbWFTdHJpbmdSZXF1ZXN0GiQuYnl0ZWJhc2UudjEuR2V0U2NoZW1hU3RyaW5nUmVzcG9uc2UiXNpBBG5hbWWK6jAWYmIuZGF0YWJhc2VzLmdldFNjaGVtYZDqMAGC0+STAjESLy92MS97bmFtZT1pbnN0YW5jZXMvKi9kYXRhYmFzZXMvKi9zY2hlbWFTdHJpbmd9QjZaNGdpdGh1Yi5jb20vYnl0ZWJhc2UvYnl0ZWJhc2UvYmFja2VuZC9nZW5lcmF0ZWQtZ28vdjFiBnByb3RvMw", [file_google_api_annotations, file_google_api_client, file_google_api_field_behavior, file_google_api_resource, file_google_protobuf_field_mask, file_google_protobuf_timestamp, file_v1_annotation, file_v1_common, file_v1_instance_service]);

/**
 * Describes the message bytebase.v1.GetDatabaseRequest.
 * Use `create(GetDatabaseRequestSchema)` to create a new message.
 */
export const GetDatabaseRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 0);

/**
 * Describes the message bytebase.v1.BatchGetDatabasesRequest.
 * Use `create(BatchGetDatabasesRequestSchema)` to create a new message.
 */
export const BatchGetDatabasesRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 1);

/**
 * Describes the message bytebase.v1.BatchGetDatabasesResponse.
 * Use `create(BatchGetDatabasesResponseSchema)` to create a new message.
 */
export const BatchGetDatabasesResponseSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 2);

/**
 * Describes the message bytebase.v1.ListDatabasesRequest.
 * Use `create(ListDatabasesRequestSchema)` to create a new message.
 */
export const ListDatabasesRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 3);

/**
 * Describes the message bytebase.v1.ListDatabasesResponse.
 * Use `create(ListDatabasesResponseSchema)` to create a new message.
 */
export const ListDatabasesResponseSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 4);

/**
 * Describes the message bytebase.v1.UpdateDatabaseRequest.
 * Use `create(UpdateDatabaseRequestSchema)` to create a new message.
 */
export const UpdateDatabaseRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 5);

/**
 * Describes the message bytebase.v1.BatchUpdateDatabasesRequest.
 * Use `create(BatchUpdateDatabasesRequestSchema)` to create a new message.
 */
export const BatchUpdateDatabasesRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 6);

/**
 * Describes the message bytebase.v1.BatchUpdateDatabasesResponse.
 * Use `create(BatchUpdateDatabasesResponseSchema)` to create a new message.
 */
export const BatchUpdateDatabasesResponseSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 7);

/**
 * Describes the message bytebase.v1.BatchSyncDatabasesRequest.
 * Use `create(BatchSyncDatabasesRequestSchema)` to create a new message.
 */
export const BatchSyncDatabasesRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 8);

/**
 * Describes the message bytebase.v1.BatchSyncDatabasesResponse.
 * Use `create(BatchSyncDatabasesResponseSchema)` to create a new message.
 */
export const BatchSyncDatabasesResponseSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 9);

/**
 * Describes the message bytebase.v1.SyncDatabaseRequest.
 * Use `create(SyncDatabaseRequestSchema)` to create a new message.
 */
export const SyncDatabaseRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 10);

/**
 * Describes the message bytebase.v1.SyncDatabaseResponse.
 * Use `create(SyncDatabaseResponseSchema)` to create a new message.
 */
export const SyncDatabaseResponseSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 11);

/**
 * Describes the message bytebase.v1.GetDatabaseMetadataRequest.
 * Use `create(GetDatabaseMetadataRequestSchema)` to create a new message.
 */
export const GetDatabaseMetadataRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 12);

/**
 * Describes the message bytebase.v1.GetDatabaseSchemaRequest.
 * Use `create(GetDatabaseSchemaRequestSchema)` to create a new message.
 */
export const GetDatabaseSchemaRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 13);

/**
 * Describes the message bytebase.v1.DiffSchemaRequest.
 * Use `create(DiffSchemaRequestSchema)` to create a new message.
 */
export const DiffSchemaRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 14);

/**
 * Describes the message bytebase.v1.DiffSchemaResponse.
 * Use `create(DiffSchemaResponseSchema)` to create a new message.
 */
export const DiffSchemaResponseSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 15);

/**
 * Describes the message bytebase.v1.Database.
 * Use `create(DatabaseSchema$)` to create a new message.
 */
export const DatabaseSchema$ = /*@__PURE__*/
  messageDesc(file_v1_database_service, 16);

/**
 * Describes the message bytebase.v1.DatabaseMetadata.
 * Use `create(DatabaseMetadataSchema)` to create a new message.
 */
export const DatabaseMetadataSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 17);

/**
 * Describes the message bytebase.v1.SchemaMetadata.
 * Use `create(SchemaMetadataSchema)` to create a new message.
 */
export const SchemaMetadataSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 18);

/**
 * Describes the message bytebase.v1.EnumTypeMetadata.
 * Use `create(EnumTypeMetadataSchema)` to create a new message.
 */
export const EnumTypeMetadataSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 19);

/**
 * Describes the message bytebase.v1.EventMetadata.
 * Use `create(EventMetadataSchema)` to create a new message.
 */
export const EventMetadataSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 20);

/**
 * Describes the message bytebase.v1.SequenceMetadata.
 * Use `create(SequenceMetadataSchema)` to create a new message.
 */
export const SequenceMetadataSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 21);

/**
 * Describes the message bytebase.v1.TriggerMetadata.
 * Use `create(TriggerMetadataSchema)` to create a new message.
 */
export const TriggerMetadataSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 22);

/**
 * Describes the message bytebase.v1.ExternalTableMetadata.
 * Use `create(ExternalTableMetadataSchema)` to create a new message.
 */
export const ExternalTableMetadataSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 23);

/**
 * Describes the message bytebase.v1.TableMetadata.
 * Use `create(TableMetadataSchema)` to create a new message.
 */
export const TableMetadataSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 24);

/**
 * Describes the message bytebase.v1.CheckConstraintMetadata.
 * Use `create(CheckConstraintMetadataSchema)` to create a new message.
 */
export const CheckConstraintMetadataSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 25);

/**
 * Describes the message bytebase.v1.TablePartitionMetadata.
 * Use `create(TablePartitionMetadataSchema)` to create a new message.
 */
export const TablePartitionMetadataSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 26);

/**
 * Describes the enum bytebase.v1.TablePartitionMetadata.Type.
 */
export const TablePartitionMetadata_TypeSchema = /*@__PURE__*/
  enumDesc(file_v1_database_service, 26, 0);

/**
 * Type is the type of a table partition, some database engines may not
 * support all types. Only avilable for the following database engines now:
 * MySQL: RANGE, RANGE COLUMNS, LIST, LIST COLUMNS, HASH, LINEAR HASH, KEY,
 * LINEAR_KEY
 * (https://dev.mysql.com/doc/refman/8.0/en/partitioning-types.html) TiDB:
 * RANGE, RANGE COLUMNS, LIST, LIST COLUMNS, HASH, KEY PostgreSQL: RANGE,
 * LIST, HASH (https://www.postgresql.org/docs/current/ddl-partitioning.html)
 *
 * @generated from enum bytebase.v1.TablePartitionMetadata.Type
 */
export const TablePartitionMetadata_Type = /*@__PURE__*/
  tsEnum(TablePartitionMetadata_TypeSchema);

/**
 * Describes the message bytebase.v1.ColumnMetadata.
 * Use `create(ColumnMetadataSchema)` to create a new message.
 */
export const ColumnMetadataSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 27);

/**
 * Describes the enum bytebase.v1.ColumnMetadata.IdentityGeneration.
 */
export const ColumnMetadata_IdentityGenerationSchema = /*@__PURE__*/
  enumDesc(file_v1_database_service, 27, 0);

/**
 * @generated from enum bytebase.v1.ColumnMetadata.IdentityGeneration
 */
export const ColumnMetadata_IdentityGeneration = /*@__PURE__*/
  tsEnum(ColumnMetadata_IdentityGenerationSchema);

/**
 * Describes the message bytebase.v1.GenerationMetadata.
 * Use `create(GenerationMetadataSchema)` to create a new message.
 */
export const GenerationMetadataSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 28);

/**
 * Describes the enum bytebase.v1.GenerationMetadata.Type.
 */
export const GenerationMetadata_TypeSchema = /*@__PURE__*/
  enumDesc(file_v1_database_service, 28, 0);

/**
 * @generated from enum bytebase.v1.GenerationMetadata.Type
 */
export const GenerationMetadata_Type = /*@__PURE__*/
  tsEnum(GenerationMetadata_TypeSchema);

/**
 * Describes the message bytebase.v1.ViewMetadata.
 * Use `create(ViewMetadataSchema)` to create a new message.
 */
export const ViewMetadataSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 29);

/**
 * Describes the message bytebase.v1.DependencyColumn.
 * Use `create(DependencyColumnSchema)` to create a new message.
 */
export const DependencyColumnSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 30);

/**
 * Describes the message bytebase.v1.MaterializedViewMetadata.
 * Use `create(MaterializedViewMetadataSchema)` to create a new message.
 */
export const MaterializedViewMetadataSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 31);

/**
 * Describes the message bytebase.v1.DependencyTable.
 * Use `create(DependencyTableSchema)` to create a new message.
 */
export const DependencyTableSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 32);

/**
 * Describes the message bytebase.v1.FunctionMetadata.
 * Use `create(FunctionMetadataSchema)` to create a new message.
 */
export const FunctionMetadataSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 33);

/**
 * Describes the message bytebase.v1.ProcedureMetadata.
 * Use `create(ProcedureMetadataSchema)` to create a new message.
 */
export const ProcedureMetadataSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 34);

/**
 * Describes the message bytebase.v1.PackageMetadata.
 * Use `create(PackageMetadataSchema)` to create a new message.
 */
export const PackageMetadataSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 35);

/**
 * Describes the message bytebase.v1.TaskMetadata.
 * Use `create(TaskMetadataSchema)` to create a new message.
 */
export const TaskMetadataSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 36);

/**
 * Describes the enum bytebase.v1.TaskMetadata.State.
 */
export const TaskMetadata_StateSchema = /*@__PURE__*/
  enumDesc(file_v1_database_service, 36, 0);

/**
 * @generated from enum bytebase.v1.TaskMetadata.State
 */
export const TaskMetadata_State = /*@__PURE__*/
  tsEnum(TaskMetadata_StateSchema);

/**
 * Describes the message bytebase.v1.StreamMetadata.
 * Use `create(StreamMetadataSchema)` to create a new message.
 */
export const StreamMetadataSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 37);

/**
 * Describes the enum bytebase.v1.StreamMetadata.Type.
 */
export const StreamMetadata_TypeSchema = /*@__PURE__*/
  enumDesc(file_v1_database_service, 37, 0);

/**
 * @generated from enum bytebase.v1.StreamMetadata.Type
 */
export const StreamMetadata_Type = /*@__PURE__*/
  tsEnum(StreamMetadata_TypeSchema);

/**
 * Describes the enum bytebase.v1.StreamMetadata.Mode.
 */
export const StreamMetadata_ModeSchema = /*@__PURE__*/
  enumDesc(file_v1_database_service, 37, 1);

/**
 * @generated from enum bytebase.v1.StreamMetadata.Mode
 */
export const StreamMetadata_Mode = /*@__PURE__*/
  tsEnum(StreamMetadata_ModeSchema);

/**
 * Describes the message bytebase.v1.SpatialIndexConfig.
 * Use `create(SpatialIndexConfigSchema)` to create a new message.
 */
export const SpatialIndexConfigSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 38);

/**
 * Describes the message bytebase.v1.TessellationConfig.
 * Use `create(TessellationConfigSchema)` to create a new message.
 */
export const TessellationConfigSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 39);

/**
 * Describes the message bytebase.v1.GridLevel.
 * Use `create(GridLevelSchema)` to create a new message.
 */
export const GridLevelSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 40);

/**
 * Describes the message bytebase.v1.BoundingBox.
 * Use `create(BoundingBoxSchema)` to create a new message.
 */
export const BoundingBoxSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 41);

/**
 * Describes the message bytebase.v1.StorageConfig.
 * Use `create(StorageConfigSchema)` to create a new message.
 */
export const StorageConfigSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 42);

/**
 * Describes the message bytebase.v1.DimensionalConfig.
 * Use `create(DimensionalConfigSchema)` to create a new message.
 */
export const DimensionalConfigSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 43);

/**
 * Describes the message bytebase.v1.DimensionConstraint.
 * Use `create(DimensionConstraintSchema)` to create a new message.
 */
export const DimensionConstraintSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 44);

/**
 * Describes the message bytebase.v1.IndexMetadata.
 * Use `create(IndexMetadataSchema)` to create a new message.
 */
export const IndexMetadataSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 45);

/**
 * Describes the message bytebase.v1.ExtensionMetadata.
 * Use `create(ExtensionMetadataSchema)` to create a new message.
 */
export const ExtensionMetadataSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 46);

/**
 * Describes the message bytebase.v1.ForeignKeyMetadata.
 * Use `create(ForeignKeyMetadataSchema)` to create a new message.
 */
export const ForeignKeyMetadataSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 47);

/**
 * Describes the message bytebase.v1.DatabaseSchema.
 * Use `create(DatabaseSchemaSchema)` to create a new message.
 */
export const DatabaseSchemaSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 48);

/**
 * Describes the message bytebase.v1.ChangedResources.
 * Use `create(ChangedResourcesSchema)` to create a new message.
 */
export const ChangedResourcesSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 49);

/**
 * Describes the message bytebase.v1.ChangedResourceDatabase.
 * Use `create(ChangedResourceDatabaseSchema)` to create a new message.
 */
export const ChangedResourceDatabaseSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 50);

/**
 * Describes the message bytebase.v1.ChangedResourceSchema.
 * Use `create(ChangedResourceSchemaSchema)` to create a new message.
 */
export const ChangedResourceSchemaSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 51);

/**
 * Describes the message bytebase.v1.ChangedResourceTable.
 * Use `create(ChangedResourceTableSchema)` to create a new message.
 */
export const ChangedResourceTableSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 52);

/**
 * Describes the message bytebase.v1.ChangedResourceView.
 * Use `create(ChangedResourceViewSchema)` to create a new message.
 */
export const ChangedResourceViewSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 53);

/**
 * Describes the message bytebase.v1.ChangedResourceFunction.
 * Use `create(ChangedResourceFunctionSchema)` to create a new message.
 */
export const ChangedResourceFunctionSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 54);

/**
 * Describes the message bytebase.v1.ChangedResourceProcedure.
 * Use `create(ChangedResourceProcedureSchema)` to create a new message.
 */
export const ChangedResourceProcedureSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 55);

/**
 * Describes the message bytebase.v1.ListChangelogsRequest.
 * Use `create(ListChangelogsRequestSchema)` to create a new message.
 */
export const ListChangelogsRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 56);

/**
 * Describes the message bytebase.v1.ListChangelogsResponse.
 * Use `create(ListChangelogsResponseSchema)` to create a new message.
 */
export const ListChangelogsResponseSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 57);

/**
 * Describes the message bytebase.v1.GetChangelogRequest.
 * Use `create(GetChangelogRequestSchema)` to create a new message.
 */
export const GetChangelogRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 58);

/**
 * Describes the message bytebase.v1.Changelog.
 * Use `create(ChangelogSchema)` to create a new message.
 */
export const ChangelogSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 59);

/**
 * Describes the enum bytebase.v1.Changelog.Status.
 */
export const Changelog_StatusSchema = /*@__PURE__*/
  enumDesc(file_v1_database_service, 59, 0);

/**
 * @generated from enum bytebase.v1.Changelog.Status
 */
export const Changelog_Status = /*@__PURE__*/
  tsEnum(Changelog_StatusSchema);

/**
 * Describes the enum bytebase.v1.Changelog.Type.
 */
export const Changelog_TypeSchema = /*@__PURE__*/
  enumDesc(file_v1_database_service, 59, 1);

/**
 * @generated from enum bytebase.v1.Changelog.Type
 */
export const Changelog_Type = /*@__PURE__*/
  tsEnum(Changelog_TypeSchema);

/**
 * Describes the message bytebase.v1.GetSchemaStringRequest.
 * Use `create(GetSchemaStringRequestSchema)` to create a new message.
 */
export const GetSchemaStringRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 60);

/**
 * Describes the enum bytebase.v1.GetSchemaStringRequest.ObjectType.
 */
export const GetSchemaStringRequest_ObjectTypeSchema = /*@__PURE__*/
  enumDesc(file_v1_database_service, 60, 0);

/**
 * @generated from enum bytebase.v1.GetSchemaStringRequest.ObjectType
 */
export const GetSchemaStringRequest_ObjectType = /*@__PURE__*/
  tsEnum(GetSchemaStringRequest_ObjectTypeSchema);

/**
 * Describes the message bytebase.v1.GetSchemaStringResponse.
 * Use `create(GetSchemaStringResponseSchema)` to create a new message.
 */
export const GetSchemaStringResponseSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 61);

/**
 * Describes the enum bytebase.v1.ChangelogView.
 */
export const ChangelogViewSchema = /*@__PURE__*/
  enumDesc(file_v1_database_service, 0);

/**
 * @generated from enum bytebase.v1.ChangelogView
 */
export const ChangelogView = /*@__PURE__*/
  tsEnum(ChangelogViewSchema);

/**
 * @generated from service bytebase.v1.DatabaseService
 */
export const DatabaseService = /*@__PURE__*/
  serviceDesc(file_v1_database_service, 0);

