// @generated by protoc-gen-es v2.5.2
// @generated from file v1/database_service.proto (package bytebase.v1, syntax proto3)
/* eslint-disable */

import { enumDesc, fileDesc, messageDesc, serviceDesc, tsEnum } from "@bufbuild/protobuf/codegenv2";
import { file_google_api_annotations } from "../google/api/annotations_pb";
import { file_google_api_client } from "../google/api/client_pb";
import { file_google_api_field_behavior } from "../google/api/field_behavior_pb";
import { file_google_api_resource } from "../google/api/resource_pb";
import { file_google_protobuf_field_mask, file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import { file_v1_annotation } from "./annotation_pb";
import { file_v1_common } from "./common_pb";
import { file_v1_instance_service } from "./instance_service_pb";

/**
 * Describes the file v1/database_service.proto.
 */
export const file_v1_database_service = /*@__PURE__*/
  fileDesc("", [file_google_api_annotations, file_google_api_client, file_google_api_field_behavior, file_google_api_resource, file_google_protobuf_field_mask, file_google_protobuf_timestamp, file_v1_annotation, file_v1_common, file_v1_instance_service]);

/**
 * Describes the message bytebase.v1.GetDatabaseRequest.
 * Use `create(GetDatabaseRequestSchema)` to create a new message.
 */
export const GetDatabaseRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 0);

/**
 * Describes the message bytebase.v1.BatchGetDatabasesRequest.
 * Use `create(BatchGetDatabasesRequestSchema)` to create a new message.
 */
export const BatchGetDatabasesRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 1);

/**
 * Describes the message bytebase.v1.BatchGetDatabasesResponse.
 * Use `create(BatchGetDatabasesResponseSchema)` to create a new message.
 */
export const BatchGetDatabasesResponseSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 2);

/**
 * Describes the message bytebase.v1.ListDatabasesRequest.
 * Use `create(ListDatabasesRequestSchema)` to create a new message.
 */
export const ListDatabasesRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 3);

/**
 * Describes the message bytebase.v1.ListDatabasesResponse.
 * Use `create(ListDatabasesResponseSchema)` to create a new message.
 */
export const ListDatabasesResponseSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 4);

/**
 * Describes the message bytebase.v1.UpdateDatabaseRequest.
 * Use `create(UpdateDatabaseRequestSchema)` to create a new message.
 */
export const UpdateDatabaseRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 5);

/**
 * Describes the message bytebase.v1.BatchUpdateDatabasesRequest.
 * Use `create(BatchUpdateDatabasesRequestSchema)` to create a new message.
 */
export const BatchUpdateDatabasesRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 6);

/**
 * Describes the message bytebase.v1.BatchUpdateDatabasesResponse.
 * Use `create(BatchUpdateDatabasesResponseSchema)` to create a new message.
 */
export const BatchUpdateDatabasesResponseSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 7);

/**
 * Describes the message bytebase.v1.BatchSyncDatabasesRequest.
 * Use `create(BatchSyncDatabasesRequestSchema)` to create a new message.
 */
export const BatchSyncDatabasesRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 8);

/**
 * Describes the message bytebase.v1.BatchSyncDatabasesResponse.
 * Use `create(BatchSyncDatabasesResponseSchema)` to create a new message.
 */
export const BatchSyncDatabasesResponseSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 9);

/**
 * Describes the message bytebase.v1.SyncDatabaseRequest.
 * Use `create(SyncDatabaseRequestSchema)` to create a new message.
 */
export const SyncDatabaseRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 10);

/**
 * Describes the message bytebase.v1.SyncDatabaseResponse.
 * Use `create(SyncDatabaseResponseSchema)` to create a new message.
 */
export const SyncDatabaseResponseSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 11);

/**
 * Describes the message bytebase.v1.GetDatabaseMetadataRequest.
 * Use `create(GetDatabaseMetadataRequestSchema)` to create a new message.
 */
export const GetDatabaseMetadataRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 12);

/**
 * Describes the message bytebase.v1.GetDatabaseSchemaRequest.
 * Use `create(GetDatabaseSchemaRequestSchema)` to create a new message.
 */
export const GetDatabaseSchemaRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 13);

/**
 * Describes the message bytebase.v1.GetDatabaseSDLSchemaRequest.
 * Use `create(GetDatabaseSDLSchemaRequestSchema)` to create a new message.
 */
export const GetDatabaseSDLSchemaRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 14);

/**
 * Describes the enum bytebase.v1.GetDatabaseSDLSchemaRequest.SDLFormat.
 */
export const GetDatabaseSDLSchemaRequest_SDLFormatSchema = /*@__PURE__*/
  enumDesc(file_v1_database_service, 14, 0);

/**
 * SDLFormat specifies the output format for SDL schema.
 *
 * @generated from enum bytebase.v1.GetDatabaseSDLSchemaRequest.SDLFormat
 */
export const GetDatabaseSDLSchemaRequest_SDLFormat = /*@__PURE__*/
  tsEnum(GetDatabaseSDLSchemaRequest_SDLFormatSchema);

/**
 * Describes the message bytebase.v1.DiffSchemaRequest.
 * Use `create(DiffSchemaRequestSchema)` to create a new message.
 */
export const DiffSchemaRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 15);

/**
 * Describes the message bytebase.v1.DiffSchemaResponse.
 * Use `create(DiffSchemaResponseSchema)` to create a new message.
 */
export const DiffSchemaResponseSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 16);

/**
 * Describes the message bytebase.v1.Database.
 * Use `create(DatabaseSchema$)` to create a new message.
 */
export const DatabaseSchema$ = /*@__PURE__*/
  messageDesc(file_v1_database_service, 17);

/**
 * Describes the message bytebase.v1.DatabaseMetadata.
 * Use `create(DatabaseMetadataSchema)` to create a new message.
 */
export const DatabaseMetadataSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 18);

/**
 * Describes the message bytebase.v1.SchemaMetadata.
 * Use `create(SchemaMetadataSchema)` to create a new message.
 */
export const SchemaMetadataSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 19);

/**
 * Describes the message bytebase.v1.EnumTypeMetadata.
 * Use `create(EnumTypeMetadataSchema)` to create a new message.
 */
export const EnumTypeMetadataSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 20);

/**
 * Describes the message bytebase.v1.EventMetadata.
 * Use `create(EventMetadataSchema)` to create a new message.
 */
export const EventMetadataSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 21);

/**
 * Describes the message bytebase.v1.SequenceMetadata.
 * Use `create(SequenceMetadataSchema)` to create a new message.
 */
export const SequenceMetadataSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 22);

/**
 * Describes the message bytebase.v1.TriggerMetadata.
 * Use `create(TriggerMetadataSchema)` to create a new message.
 */
export const TriggerMetadataSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 23);

/**
 * Describes the message bytebase.v1.ExternalTableMetadata.
 * Use `create(ExternalTableMetadataSchema)` to create a new message.
 */
export const ExternalTableMetadataSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 24);

/**
 * Describes the message bytebase.v1.TableMetadata.
 * Use `create(TableMetadataSchema)` to create a new message.
 */
export const TableMetadataSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 25);

/**
 * Describes the message bytebase.v1.CheckConstraintMetadata.
 * Use `create(CheckConstraintMetadataSchema)` to create a new message.
 */
export const CheckConstraintMetadataSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 26);

/**
 * Describes the message bytebase.v1.TablePartitionMetadata.
 * Use `create(TablePartitionMetadataSchema)` to create a new message.
 */
export const TablePartitionMetadataSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 27);

/**
 * Describes the enum bytebase.v1.TablePartitionMetadata.Type.
 */
export const TablePartitionMetadata_TypeSchema = /*@__PURE__*/
  enumDesc(file_v1_database_service, 27, 0);

/**
 * Type is the type of a table partition, some database engines may not
 * support all types. Only avilable for the following database engines now:
 * MySQL: RANGE, RANGE COLUMNS, LIST, LIST COLUMNS, HASH, LINEAR HASH, KEY,
 * LINEAR_KEY
 * (https://dev.mysql.com/doc/refman/8.0/en/partitioning-types.html) TiDB:
 * RANGE, RANGE COLUMNS, LIST, LIST COLUMNS, HASH, KEY PostgreSQL: RANGE,
 * LIST, HASH (https://www.postgresql.org/docs/current/ddl-partitioning.html)
 *
 * @generated from enum bytebase.v1.TablePartitionMetadata.Type
 */
export const TablePartitionMetadata_Type = /*@__PURE__*/
  tsEnum(TablePartitionMetadata_TypeSchema);

/**
 * Describes the message bytebase.v1.ColumnMetadata.
 * Use `create(ColumnMetadataSchema)` to create a new message.
 */
export const ColumnMetadataSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 28);

/**
 * Describes the enum bytebase.v1.ColumnMetadata.IdentityGeneration.
 */
export const ColumnMetadata_IdentityGenerationSchema = /*@__PURE__*/
  enumDesc(file_v1_database_service, 28, 0);

/**
 * @generated from enum bytebase.v1.ColumnMetadata.IdentityGeneration
 */
export const ColumnMetadata_IdentityGeneration = /*@__PURE__*/
  tsEnum(ColumnMetadata_IdentityGenerationSchema);

/**
 * Describes the message bytebase.v1.GenerationMetadata.
 * Use `create(GenerationMetadataSchema)` to create a new message.
 */
export const GenerationMetadataSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 29);

/**
 * Describes the enum bytebase.v1.GenerationMetadata.Type.
 */
export const GenerationMetadata_TypeSchema = /*@__PURE__*/
  enumDesc(file_v1_database_service, 29, 0);

/**
 * @generated from enum bytebase.v1.GenerationMetadata.Type
 */
export const GenerationMetadata_Type = /*@__PURE__*/
  tsEnum(GenerationMetadata_TypeSchema);

/**
 * Describes the message bytebase.v1.ViewMetadata.
 * Use `create(ViewMetadataSchema)` to create a new message.
 */
export const ViewMetadataSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 30);

/**
 * Describes the message bytebase.v1.DependencyColumn.
 * Use `create(DependencyColumnSchema)` to create a new message.
 */
export const DependencyColumnSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 31);

/**
 * Describes the message bytebase.v1.MaterializedViewMetadata.
 * Use `create(MaterializedViewMetadataSchema)` to create a new message.
 */
export const MaterializedViewMetadataSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 32);

/**
 * Describes the message bytebase.v1.DependencyTable.
 * Use `create(DependencyTableSchema)` to create a new message.
 */
export const DependencyTableSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 33);

/**
 * Describes the message bytebase.v1.FunctionMetadata.
 * Use `create(FunctionMetadataSchema)` to create a new message.
 */
export const FunctionMetadataSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 34);

/**
 * Describes the message bytebase.v1.ProcedureMetadata.
 * Use `create(ProcedureMetadataSchema)` to create a new message.
 */
export const ProcedureMetadataSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 35);

/**
 * Describes the message bytebase.v1.PackageMetadata.
 * Use `create(PackageMetadataSchema)` to create a new message.
 */
export const PackageMetadataSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 36);

/**
 * Describes the message bytebase.v1.TaskMetadata.
 * Use `create(TaskMetadataSchema)` to create a new message.
 */
export const TaskMetadataSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 37);

/**
 * Describes the enum bytebase.v1.TaskMetadata.State.
 */
export const TaskMetadata_StateSchema = /*@__PURE__*/
  enumDesc(file_v1_database_service, 37, 0);

/**
 * @generated from enum bytebase.v1.TaskMetadata.State
 */
export const TaskMetadata_State = /*@__PURE__*/
  tsEnum(TaskMetadata_StateSchema);

/**
 * Describes the message bytebase.v1.StreamMetadata.
 * Use `create(StreamMetadataSchema)` to create a new message.
 */
export const StreamMetadataSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 38);

/**
 * Describes the enum bytebase.v1.StreamMetadata.Type.
 */
export const StreamMetadata_TypeSchema = /*@__PURE__*/
  enumDesc(file_v1_database_service, 38, 0);

/**
 * @generated from enum bytebase.v1.StreamMetadata.Type
 */
export const StreamMetadata_Type = /*@__PURE__*/
  tsEnum(StreamMetadata_TypeSchema);

/**
 * Describes the enum bytebase.v1.StreamMetadata.Mode.
 */
export const StreamMetadata_ModeSchema = /*@__PURE__*/
  enumDesc(file_v1_database_service, 38, 1);

/**
 * @generated from enum bytebase.v1.StreamMetadata.Mode
 */
export const StreamMetadata_Mode = /*@__PURE__*/
  tsEnum(StreamMetadata_ModeSchema);

/**
 * Describes the message bytebase.v1.SpatialIndexConfig.
 * Use `create(SpatialIndexConfigSchema)` to create a new message.
 */
export const SpatialIndexConfigSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 39);

/**
 * Describes the message bytebase.v1.TessellationConfig.
 * Use `create(TessellationConfigSchema)` to create a new message.
 */
export const TessellationConfigSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 40);

/**
 * Describes the message bytebase.v1.GridLevel.
 * Use `create(GridLevelSchema)` to create a new message.
 */
export const GridLevelSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 41);

/**
 * Describes the message bytebase.v1.BoundingBox.
 * Use `create(BoundingBoxSchema)` to create a new message.
 */
export const BoundingBoxSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 42);

/**
 * Describes the message bytebase.v1.StorageConfig.
 * Use `create(StorageConfigSchema)` to create a new message.
 */
export const StorageConfigSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 43);

/**
 * Describes the message bytebase.v1.DimensionalConfig.
 * Use `create(DimensionalConfigSchema)` to create a new message.
 */
export const DimensionalConfigSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 44);

/**
 * Describes the message bytebase.v1.DimensionConstraint.
 * Use `create(DimensionConstraintSchema)` to create a new message.
 */
export const DimensionConstraintSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 45);

/**
 * Describes the message bytebase.v1.IndexMetadata.
 * Use `create(IndexMetadataSchema)` to create a new message.
 */
export const IndexMetadataSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 46);

/**
 * Describes the message bytebase.v1.ExtensionMetadata.
 * Use `create(ExtensionMetadataSchema)` to create a new message.
 */
export const ExtensionMetadataSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 47);

/**
 * Describes the message bytebase.v1.ForeignKeyMetadata.
 * Use `create(ForeignKeyMetadataSchema)` to create a new message.
 */
export const ForeignKeyMetadataSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 48);

/**
 * Describes the message bytebase.v1.DatabaseSchema.
 * Use `create(DatabaseSchemaSchema)` to create a new message.
 */
export const DatabaseSchemaSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 49);

/**
 * Describes the message bytebase.v1.DatabaseSDLSchema.
 * Use `create(DatabaseSDLSchemaSchema)` to create a new message.
 */
export const DatabaseSDLSchemaSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 50);

/**
 * Describes the message bytebase.v1.ChangedResources.
 * Use `create(ChangedResourcesSchema)` to create a new message.
 */
export const ChangedResourcesSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 51);

/**
 * Describes the message bytebase.v1.ChangedResourceDatabase.
 * Use `create(ChangedResourceDatabaseSchema)` to create a new message.
 */
export const ChangedResourceDatabaseSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 52);

/**
 * Describes the message bytebase.v1.ChangedResourceSchema.
 * Use `create(ChangedResourceSchemaSchema)` to create a new message.
 */
export const ChangedResourceSchemaSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 53);

/**
 * Describes the message bytebase.v1.ChangedResourceTable.
 * Use `create(ChangedResourceTableSchema)` to create a new message.
 */
export const ChangedResourceTableSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 54);

/**
 * Describes the message bytebase.v1.ChangedResourceView.
 * Use `create(ChangedResourceViewSchema)` to create a new message.
 */
export const ChangedResourceViewSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 55);

/**
 * Describes the message bytebase.v1.ChangedResourceFunction.
 * Use `create(ChangedResourceFunctionSchema)` to create a new message.
 */
export const ChangedResourceFunctionSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 56);

/**
 * Describes the message bytebase.v1.ChangedResourceProcedure.
 * Use `create(ChangedResourceProcedureSchema)` to create a new message.
 */
export const ChangedResourceProcedureSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 57);

/**
 * Describes the message bytebase.v1.ListChangelogsRequest.
 * Use `create(ListChangelogsRequestSchema)` to create a new message.
 */
export const ListChangelogsRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 58);

/**
 * Describes the message bytebase.v1.ListChangelogsResponse.
 * Use `create(ListChangelogsResponseSchema)` to create a new message.
 */
export const ListChangelogsResponseSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 59);

/**
 * Describes the message bytebase.v1.GetChangelogRequest.
 * Use `create(GetChangelogRequestSchema)` to create a new message.
 */
export const GetChangelogRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 60);

/**
 * Describes the message bytebase.v1.Changelog.
 * Use `create(ChangelogSchema)` to create a new message.
 */
export const ChangelogSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 61);

/**
 * Describes the enum bytebase.v1.Changelog.Status.
 */
export const Changelog_StatusSchema = /*@__PURE__*/
  enumDesc(file_v1_database_service, 61, 0);

/**
 * @generated from enum bytebase.v1.Changelog.Status
 */
export const Changelog_Status = /*@__PURE__*/
  tsEnum(Changelog_StatusSchema);

/**
 * Describes the enum bytebase.v1.Changelog.Type.
 */
export const Changelog_TypeSchema = /*@__PURE__*/
  enumDesc(file_v1_database_service, 61, 1);

/**
 * @generated from enum bytebase.v1.Changelog.Type
 */
export const Changelog_Type = /*@__PURE__*/
  tsEnum(Changelog_TypeSchema);

/**
 * Describes the enum bytebase.v1.Changelog.MigrationType.
 */
export const Changelog_MigrationTypeSchema = /*@__PURE__*/
  enumDesc(file_v1_database_service, 61, 2);

/**
 * MigrationType is the type for imperative schema migration.
 *
 * @generated from enum bytebase.v1.Changelog.MigrationType
 */
export const Changelog_MigrationType = /*@__PURE__*/
  tsEnum(Changelog_MigrationTypeSchema);

/**
 * Describes the message bytebase.v1.GetSchemaStringRequest.
 * Use `create(GetSchemaStringRequestSchema)` to create a new message.
 */
export const GetSchemaStringRequestSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 62);

/**
 * Describes the enum bytebase.v1.GetSchemaStringRequest.ObjectType.
 */
export const GetSchemaStringRequest_ObjectTypeSchema = /*@__PURE__*/
  enumDesc(file_v1_database_service, 62, 0);

/**
 * @generated from enum bytebase.v1.GetSchemaStringRequest.ObjectType
 */
export const GetSchemaStringRequest_ObjectType = /*@__PURE__*/
  tsEnum(GetSchemaStringRequest_ObjectTypeSchema);

/**
 * Describes the message bytebase.v1.GetSchemaStringResponse.
 * Use `create(GetSchemaStringResponseSchema)` to create a new message.
 */
export const GetSchemaStringResponseSchema = /*@__PURE__*/
  messageDesc(file_v1_database_service, 63);

/**
 * Describes the enum bytebase.v1.ChangelogView.
 */
export const ChangelogViewSchema = /*@__PURE__*/
  enumDesc(file_v1_database_service, 0);

/**
 * @generated from enum bytebase.v1.ChangelogView
 */
export const ChangelogView = /*@__PURE__*/
  tsEnum(ChangelogViewSchema);

/**
 * DatabaseService manages databases and their schemas.
 *
 * @generated from service bytebase.v1.DatabaseService
 */
export const DatabaseService = /*@__PURE__*/
  serviceDesc(file_v1_database_service, 0);

