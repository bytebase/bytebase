/* eslint-disable */
import type { CallContext, CallOptions } from "nice-grpc-common";
import * as _m0 from "protobufjs/minimal";
import { Empty } from "../google/protobuf/empty";
import { FieldMask } from "../google/protobuf/field_mask";

export const protobufPackage = "bytebase.v1";

export interface CreateExternalVersionControlRequest {
  externalVersionControl?: ExternalVersionControl;
}

export interface GetExternalVersionControlRequest {
  /**
   * The name of the external version control to retrieve.
   * Format: externalVersionControls/{externalVersionControl}
   */
  name: string;
}

export interface ListExternalVersionControlsRequest {
  /**
   * Not used. The maximum number of external version control to return. The service may return fewer than this value.
   * If unspecified, at most 100 external version control will be returned.
   * The maximum value is 1000; values above 1000 will be coerced to 1000.
   */
  pageSize: number;
  /**
   * Not used. A page token, received from a previous `ListExternalVersionControls` call.
   * Provide this to retrieve the subsequent page.
   */
  pageToken: string;
}

export interface ListExternalVersionControlsResponse {
  /** The list of external version control. */
  externalVersionControls: ExternalVersionControl[];
  /**
   * Not used. A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

export interface UpdateExternalVersionControlRequest {
  externalVersionControl?: ExternalVersionControl;
  /** The list of fields to be updated. */
  updateMask?: string[];
}

export interface DeleteExternalVersionControlRequest {
  /**
   * The name of the external version control to delete.
   * Format: externalVersionControls/{externalVersionControl}
   */
  name: string;
}

export interface ExternalVersionControl {
  /**
   * The name of the external version control, generated by the server, and also is the unique identifier.
   * Format: externalVersionControls/{externalVersionControl}
   */
  name: string;
  /** The title of the external version control. It is used to display in the UI. Specified by the client. */
  title: string;
  type: ExternalVersionControl_Type;
  /**
   * The url of the external version control. Specified by the client.
   * For example: github.com, gitlab.com, gitlab.bytebase.com.
   */
  url: string;
  /** The API url of the external version control. Derived from the url. */
  apiUrl: string;
  /** The application ID of the external version control. Specified by the client. */
  applicationId: string;
  /** The application secret of the external version control. Specified by the client. */
  secret: string;
}

export enum ExternalVersionControl_Type {
  TYPE_UNSPECIFIED = 0,
  /** TYPE_GITHUB - GitHub type. Using for GitHub community edition(ce). */
  TYPE_GITHUB = 1,
  /** TYPE_GITLAB - GitLab type. Using for GitLab community edition(ce) and enterprise edition(ee). */
  TYPE_GITLAB = 2,
  UNRECOGNIZED = -1,
}

export function externalVersionControl_TypeFromJSON(object: any): ExternalVersionControl_Type {
  switch (object) {
    case 0:
    case "TYPE_UNSPECIFIED":
      return ExternalVersionControl_Type.TYPE_UNSPECIFIED;
    case 1:
    case "TYPE_GITHUB":
      return ExternalVersionControl_Type.TYPE_GITHUB;
    case 2:
    case "TYPE_GITLAB":
      return ExternalVersionControl_Type.TYPE_GITLAB;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ExternalVersionControl_Type.UNRECOGNIZED;
  }
}

export function externalVersionControl_TypeToJSON(object: ExternalVersionControl_Type): string {
  switch (object) {
    case ExternalVersionControl_Type.TYPE_UNSPECIFIED:
      return "TYPE_UNSPECIFIED";
    case ExternalVersionControl_Type.TYPE_GITHUB:
      return "TYPE_GITHUB";
    case ExternalVersionControl_Type.TYPE_GITLAB:
      return "TYPE_GITLAB";
    case ExternalVersionControl_Type.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseCreateExternalVersionControlRequest(): CreateExternalVersionControlRequest {
  return { externalVersionControl: undefined };
}

export const CreateExternalVersionControlRequest = {
  encode(message: CreateExternalVersionControlRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.externalVersionControl !== undefined) {
      ExternalVersionControl.encode(message.externalVersionControl, writer.uint32(10).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CreateExternalVersionControlRequest {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateExternalVersionControlRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.externalVersionControl = ExternalVersionControl.decode(reader, reader.uint32());
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): CreateExternalVersionControlRequest {
    return {
      externalVersionControl: isSet(object.externalVersionControl)
        ? ExternalVersionControl.fromJSON(object.externalVersionControl)
        : undefined,
    };
  },

  toJSON(message: CreateExternalVersionControlRequest): unknown {
    const obj: any = {};
    message.externalVersionControl !== undefined && (obj.externalVersionControl = message.externalVersionControl
      ? ExternalVersionControl.toJSON(message.externalVersionControl)
      : undefined);
    return obj;
  },

  fromPartial(object: DeepPartial<CreateExternalVersionControlRequest>): CreateExternalVersionControlRequest {
    const message = createBaseCreateExternalVersionControlRequest();
    message.externalVersionControl =
      (object.externalVersionControl !== undefined && object.externalVersionControl !== null)
        ? ExternalVersionControl.fromPartial(object.externalVersionControl)
        : undefined;
    return message;
  },
};

function createBaseGetExternalVersionControlRequest(): GetExternalVersionControlRequest {
  return { name: "" };
}

export const GetExternalVersionControlRequest = {
  encode(message: GetExternalVersionControlRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetExternalVersionControlRequest {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetExternalVersionControlRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.name = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): GetExternalVersionControlRequest {
    return { name: isSet(object.name) ? String(object.name) : "" };
  },

  toJSON(message: GetExternalVersionControlRequest): unknown {
    const obj: any = {};
    message.name !== undefined && (obj.name = message.name);
    return obj;
  },

  fromPartial(object: DeepPartial<GetExternalVersionControlRequest>): GetExternalVersionControlRequest {
    const message = createBaseGetExternalVersionControlRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseListExternalVersionControlsRequest(): ListExternalVersionControlsRequest {
  return { pageSize: 0, pageToken: "" };
}

export const ListExternalVersionControlsRequest = {
  encode(message: ListExternalVersionControlsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.pageSize !== 0) {
      writer.uint32(8).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(18).string(message.pageToken);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListExternalVersionControlsRequest {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListExternalVersionControlsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.pageSize = reader.int32();
          break;
        case 2:
          message.pageToken = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): ListExternalVersionControlsRequest {
    return {
      pageSize: isSet(object.pageSize) ? Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? String(object.pageToken) : "",
    };
  },

  toJSON(message: ListExternalVersionControlsRequest): unknown {
    const obj: any = {};
    message.pageSize !== undefined && (obj.pageSize = Math.round(message.pageSize));
    message.pageToken !== undefined && (obj.pageToken = message.pageToken);
    return obj;
  },

  fromPartial(object: DeepPartial<ListExternalVersionControlsRequest>): ListExternalVersionControlsRequest {
    const message = createBaseListExternalVersionControlsRequest();
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListExternalVersionControlsResponse(): ListExternalVersionControlsResponse {
  return { externalVersionControls: [], nextPageToken: "" };
}

export const ListExternalVersionControlsResponse = {
  encode(message: ListExternalVersionControlsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.externalVersionControls) {
      ExternalVersionControl.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ListExternalVersionControlsResponse {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListExternalVersionControlsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.externalVersionControls.push(ExternalVersionControl.decode(reader, reader.uint32()));
          break;
        case 2:
          message.nextPageToken = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): ListExternalVersionControlsResponse {
    return {
      externalVersionControls: Array.isArray(object?.externalVersionControls)
        ? object.externalVersionControls.map((e: any) => ExternalVersionControl.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListExternalVersionControlsResponse): unknown {
    const obj: any = {};
    if (message.externalVersionControls) {
      obj.externalVersionControls = message.externalVersionControls.map((e) =>
        e ? ExternalVersionControl.toJSON(e) : undefined
      );
    } else {
      obj.externalVersionControls = [];
    }
    message.nextPageToken !== undefined && (obj.nextPageToken = message.nextPageToken);
    return obj;
  },

  fromPartial(object: DeepPartial<ListExternalVersionControlsResponse>): ListExternalVersionControlsResponse {
    const message = createBaseListExternalVersionControlsResponse();
    message.externalVersionControls =
      object.externalVersionControls?.map((e) => ExternalVersionControl.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseUpdateExternalVersionControlRequest(): UpdateExternalVersionControlRequest {
  return { externalVersionControl: undefined, updateMask: undefined };
}

export const UpdateExternalVersionControlRequest = {
  encode(message: UpdateExternalVersionControlRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.externalVersionControl !== undefined) {
      ExternalVersionControl.encode(message.externalVersionControl, writer.uint32(10).fork()).ldelim();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateExternalVersionControlRequest {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateExternalVersionControlRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.externalVersionControl = ExternalVersionControl.decode(reader, reader.uint32());
          break;
        case 2:
          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): UpdateExternalVersionControlRequest {
    return {
      externalVersionControl: isSet(object.externalVersionControl)
        ? ExternalVersionControl.fromJSON(object.externalVersionControl)
        : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateExternalVersionControlRequest): unknown {
    const obj: any = {};
    message.externalVersionControl !== undefined && (obj.externalVersionControl = message.externalVersionControl
      ? ExternalVersionControl.toJSON(message.externalVersionControl)
      : undefined);
    message.updateMask !== undefined && (obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask)));
    return obj;
  },

  fromPartial(object: DeepPartial<UpdateExternalVersionControlRequest>): UpdateExternalVersionControlRequest {
    const message = createBaseUpdateExternalVersionControlRequest();
    message.externalVersionControl =
      (object.externalVersionControl !== undefined && object.externalVersionControl !== null)
        ? ExternalVersionControl.fromPartial(object.externalVersionControl)
        : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDeleteExternalVersionControlRequest(): DeleteExternalVersionControlRequest {
  return { name: "" };
}

export const DeleteExternalVersionControlRequest = {
  encode(message: DeleteExternalVersionControlRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeleteExternalVersionControlRequest {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteExternalVersionControlRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.name = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): DeleteExternalVersionControlRequest {
    return { name: isSet(object.name) ? String(object.name) : "" };
  },

  toJSON(message: DeleteExternalVersionControlRequest): unknown {
    const obj: any = {};
    message.name !== undefined && (obj.name = message.name);
    return obj;
  },

  fromPartial(object: DeepPartial<DeleteExternalVersionControlRequest>): DeleteExternalVersionControlRequest {
    const message = createBaseDeleteExternalVersionControlRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseExternalVersionControl(): ExternalVersionControl {
  return { name: "", title: "", type: 0, url: "", apiUrl: "", applicationId: "", secret: "" };
}

export const ExternalVersionControl = {
  encode(message: ExternalVersionControl, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.type !== 0) {
      writer.uint32(24).int32(message.type);
    }
    if (message.url !== "") {
      writer.uint32(34).string(message.url);
    }
    if (message.apiUrl !== "") {
      writer.uint32(42).string(message.apiUrl);
    }
    if (message.applicationId !== "") {
      writer.uint32(50).string(message.applicationId);
    }
    if (message.secret !== "") {
      writer.uint32(58).string(message.secret);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): ExternalVersionControl {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExternalVersionControl();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.name = reader.string();
          break;
        case 2:
          message.title = reader.string();
          break;
        case 3:
          message.type = reader.int32() as any;
          break;
        case 4:
          message.url = reader.string();
          break;
        case 5:
          message.apiUrl = reader.string();
          break;
        case 6:
          message.applicationId = reader.string();
          break;
        case 7:
          message.secret = reader.string();
          break;
        default:
          reader.skipType(tag & 7);
          break;
      }
    }
    return message;
  },

  fromJSON(object: any): ExternalVersionControl {
    return {
      name: isSet(object.name) ? String(object.name) : "",
      title: isSet(object.title) ? String(object.title) : "",
      type: isSet(object.type) ? externalVersionControl_TypeFromJSON(object.type) : 0,
      url: isSet(object.url) ? String(object.url) : "",
      apiUrl: isSet(object.apiUrl) ? String(object.apiUrl) : "",
      applicationId: isSet(object.applicationId) ? String(object.applicationId) : "",
      secret: isSet(object.secret) ? String(object.secret) : "",
    };
  },

  toJSON(message: ExternalVersionControl): unknown {
    const obj: any = {};
    message.name !== undefined && (obj.name = message.name);
    message.title !== undefined && (obj.title = message.title);
    message.type !== undefined && (obj.type = externalVersionControl_TypeToJSON(message.type));
    message.url !== undefined && (obj.url = message.url);
    message.apiUrl !== undefined && (obj.apiUrl = message.apiUrl);
    message.applicationId !== undefined && (obj.applicationId = message.applicationId);
    message.secret !== undefined && (obj.secret = message.secret);
    return obj;
  },

  fromPartial(object: DeepPartial<ExternalVersionControl>): ExternalVersionControl {
    const message = createBaseExternalVersionControl();
    message.name = object.name ?? "";
    message.title = object.title ?? "";
    message.type = object.type ?? 0;
    message.url = object.url ?? "";
    message.apiUrl = object.apiUrl ?? "";
    message.applicationId = object.applicationId ?? "";
    message.secret = object.secret ?? "";
    return message;
  },
};

export type ExternalVersionControlServiceDefinition = typeof ExternalVersionControlServiceDefinition;
export const ExternalVersionControlServiceDefinition = {
  name: "ExternalVersionControlService",
  fullName: "bytebase.v1.ExternalVersionControlService",
  methods: {
    getExternalVersionControl: {
      name: "GetExternalVersionControl",
      requestType: GetExternalVersionControlRequest,
      requestStream: false,
      responseType: ExternalVersionControl,
      responseStream: false,
      options: {},
    },
    listExternalVersionControls: {
      name: "ListExternalVersionControls",
      requestType: ListExternalVersionControlsRequest,
      requestStream: false,
      responseType: ListExternalVersionControlsResponse,
      responseStream: false,
      options: {},
    },
    createExternalVersionControl: {
      name: "CreateExternalVersionControl",
      requestType: CreateExternalVersionControlRequest,
      requestStream: false,
      responseType: ExternalVersionControl,
      responseStream: false,
      options: {},
    },
    updateExternalVersionControl: {
      name: "UpdateExternalVersionControl",
      requestType: UpdateExternalVersionControlRequest,
      requestStream: false,
      responseType: ExternalVersionControl,
      responseStream: false,
      options: {},
    },
    deleteExternalVersionControl: {
      name: "DeleteExternalVersionControl",
      requestType: DeleteExternalVersionControlRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {},
    },
  },
} as const;

export interface ExternalVersionControlServiceImplementation<CallContextExt = {}> {
  getExternalVersionControl(
    request: GetExternalVersionControlRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ExternalVersionControl>>;
  listExternalVersionControls(
    request: ListExternalVersionControlsRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ListExternalVersionControlsResponse>>;
  createExternalVersionControl(
    request: CreateExternalVersionControlRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ExternalVersionControl>>;
  updateExternalVersionControl(
    request: UpdateExternalVersionControlRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<ExternalVersionControl>>;
  deleteExternalVersionControl(
    request: DeleteExternalVersionControlRequest,
    context: CallContext & CallContextExt,
  ): Promise<DeepPartial<Empty>>;
}

export interface ExternalVersionControlServiceClient<CallOptionsExt = {}> {
  getExternalVersionControl(
    request: DeepPartial<GetExternalVersionControlRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ExternalVersionControl>;
  listExternalVersionControls(
    request: DeepPartial<ListExternalVersionControlsRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ListExternalVersionControlsResponse>;
  createExternalVersionControl(
    request: DeepPartial<CreateExternalVersionControlRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ExternalVersionControl>;
  updateExternalVersionControl(
    request: DeepPartial<UpdateExternalVersionControlRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<ExternalVersionControl>;
  deleteExternalVersionControl(
    request: DeepPartial<DeleteExternalVersionControlRequest>,
    options?: CallOptions & CallOptionsExt,
  ): Promise<Empty>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
