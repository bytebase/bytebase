/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { Empty } from "../google/protobuf/empty";
import { FieldMask } from "../google/protobuf/field_mask";
import { Timestamp } from "../google/protobuf/timestamp";
import { DatabaseConfig } from "./database_service";
import { PushEvent } from "./vcs";

export const protobufPackage = "bytebase.v1";

export interface CreateSheetRequest {
  /**
   * The parent resource where this sheet will be created.
   * Format: projects/{project}
   */
  parent: string;
  /** The sheet to create. */
  sheet: Sheet | undefined;
}

export interface GetSheetRequest {
  /**
   * The name of the sheet to retrieve.
   * Format: projects/{project}/sheets/{sheet}
   */
  name: string;
  /** By default, the content of the sheet is cut off, set the `raw` to true to retrieve the full content. */
  raw: boolean;
}

export interface UpdateSheetRequest {
  /**
   * The sheet to update.
   *
   * The sheet's `name` field is used to identify the sheet to update.
   * Format: projects/{project}/sheets/{sheet}
   */
  sheet:
    | Sheet
    | undefined;
  /**
   * The list of fields to be updated.
   * Fields are specified relative to the sheet.
   * (e.g. `title`, `statement`; *not* `sheet.title` or `sheet.statement`)
   * Only support update the following fields for now:
   * - `title`
   * - `statement`
   * - `starred`
   * - `visibility`
   */
  updateMask: string[] | undefined;
}

export interface UpdateSheetOrganizerRequest {
  /**
   * The organizer to update.
   *
   * The organizer's `sheet` field is used to identify the sheet.
   * Format: projects/{project}/sheets/{sheet}
   */
  organizer:
    | SheetOrganizer
    | undefined;
  /**
   * The list of fields to be updated.
   * Fields are specified relative to the sheet organizer.
   * Only support update the following fields for now:
   * - `starred`
   * - `pinned`
   */
  updateMask: string[] | undefined;
}

export interface SheetOrganizer {
  /**
   * The name of the sheet.
   * Format: projects/{project}/sheets/{sheet}
   */
  sheet: string;
  /** starred means if the sheet is starred. */
  starred: boolean;
  /** pinned means if the sheet is pinned. */
  pinned: boolean;
}

export interface DeleteSheetRequest {
  /**
   * The name of the sheet to delete.
   * Format: projects/{project}/sheets/{sheet}
   */
  name: string;
}

export interface SearchSheetsRequest {
  /**
   * The parent resource of the sheet.
   * Format: projects/{project}
   */
  parent: string;
  /**
   * To filter the search result.
   * Format: only support the following spec for now:
   * - `creator = users/{email}`, `creator != users/{email}`
   * - `starred = true`, `starred = false`.
   * Not support empty filter for now.
   */
  filter: string;
  /**
   * Not used. The maximum number of sheets to return. The service may return fewer than
   * this value.
   * If unspecified, at most 50 sheets will be returned.
   * The maximum value is 1000; values above 1000 will be coerced to 1000.
   */
  pageSize: number;
  /**
   * Not used. A page token, received from a previous `SearchSheets` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `SearchSheets` must match
   * the call that provided the page token.
   */
  pageToken: string;
}

export interface SearchSheetsResponse {
  /** The sheets that matched the search criteria. */
  sheets: Sheet[];
  /**
   * Not used. A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

export interface Sheet {
  /**
   * The name of the sheet resource, generated by the server.
   * Canonical parent is project.
   * Format: projects/{project}/sheets/{sheet}
   */
  name: string;
  /**
   * The database resource name.
   * Format: instances/{instance}/databases/{database}
   * If the database parent doesn't exist, the database field is empty.
   */
  database: string;
  /** The title of the sheet. */
  title: string;
  /**
   * The creator of the Sheet.
   * Format: users/{email}
   */
  creator: string;
  /** The create time of the sheet. */
  createTime:
    | Date
    | undefined;
  /** The last update time of the sheet. */
  updateTime:
    | Date
    | undefined;
  /**
   * The content of the sheet.
   * By default, it will be cut off, if it doesn't match the `content_size`, you can
   * set the `raw` to true in GetSheet request to retrieve the full content.
   */
  content: Uint8Array;
  /** content_size is the full size of the content, may not match the size of the `content` field. */
  contentSize: Long;
  visibility: Sheet_Visibility;
  /** The source of the sheet. */
  source: Sheet_Source;
  /** The type of the sheet. */
  type: Sheet_Type;
  /** starred indicates whether the sheet is starred by the current authenticated user. */
  starred: boolean;
  payload: SheetPayload | undefined;
  pushEvent: PushEvent | undefined;
}

export enum Sheet_Visibility {
  VISIBILITY_UNSPECIFIED = 0,
  /** VISIBILITY_PUBLIC - Public, sheet OWNER can read/write, and all others can read. */
  VISIBILITY_PUBLIC = 1,
  /** VISIBILITY_PROJECT - Project, sheet OWNER and project OWNER can read/write, and project DEVELOPER can read. */
  VISIBILITY_PROJECT = 2,
  /** VISIBILITY_PRIVATE - Private, only sheet OWNER can read/write. */
  VISIBILITY_PRIVATE = 3,
  UNRECOGNIZED = -1,
}

export function sheet_VisibilityFromJSON(object: any): Sheet_Visibility {
  switch (object) {
    case 0:
    case "VISIBILITY_UNSPECIFIED":
      return Sheet_Visibility.VISIBILITY_UNSPECIFIED;
    case 1:
    case "VISIBILITY_PUBLIC":
      return Sheet_Visibility.VISIBILITY_PUBLIC;
    case 2:
    case "VISIBILITY_PROJECT":
      return Sheet_Visibility.VISIBILITY_PROJECT;
    case 3:
    case "VISIBILITY_PRIVATE":
      return Sheet_Visibility.VISIBILITY_PRIVATE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Sheet_Visibility.UNRECOGNIZED;
  }
}

export function sheet_VisibilityToJSON(object: Sheet_Visibility): string {
  switch (object) {
    case Sheet_Visibility.VISIBILITY_UNSPECIFIED:
      return "VISIBILITY_UNSPECIFIED";
    case Sheet_Visibility.VISIBILITY_PUBLIC:
      return "VISIBILITY_PUBLIC";
    case Sheet_Visibility.VISIBILITY_PROJECT:
      return "VISIBILITY_PROJECT";
    case Sheet_Visibility.VISIBILITY_PRIVATE:
      return "VISIBILITY_PRIVATE";
    case Sheet_Visibility.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum Sheet_Source {
  SOURCE_UNSPECIFIED = 0,
  /** SOURCE_BYTEBASE - BYTEBASE is the sheet created in SQL Editor. */
  SOURCE_BYTEBASE = 1,
  /** SOURCE_BYTEBASE_ARTIFACT - BYTEBASE_ARTIFACT is the artifact sheet such as DDL/DML. */
  SOURCE_BYTEBASE_ARTIFACT = 2,
  UNRECOGNIZED = -1,
}

export function sheet_SourceFromJSON(object: any): Sheet_Source {
  switch (object) {
    case 0:
    case "SOURCE_UNSPECIFIED":
      return Sheet_Source.SOURCE_UNSPECIFIED;
    case 1:
    case "SOURCE_BYTEBASE":
      return Sheet_Source.SOURCE_BYTEBASE;
    case 2:
    case "SOURCE_BYTEBASE_ARTIFACT":
      return Sheet_Source.SOURCE_BYTEBASE_ARTIFACT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Sheet_Source.UNRECOGNIZED;
  }
}

export function sheet_SourceToJSON(object: Sheet_Source): string {
  switch (object) {
    case Sheet_Source.SOURCE_UNSPECIFIED:
      return "SOURCE_UNSPECIFIED";
    case Sheet_Source.SOURCE_BYTEBASE:
      return "SOURCE_BYTEBASE";
    case Sheet_Source.SOURCE_BYTEBASE_ARTIFACT:
      return "SOURCE_BYTEBASE_ARTIFACT";
    case Sheet_Source.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum Sheet_Type {
  TYPE_UNSPECIFIED = 0,
  TYPE_SQL = 1,
  UNRECOGNIZED = -1,
}

export function sheet_TypeFromJSON(object: any): Sheet_Type {
  switch (object) {
    case 0:
    case "TYPE_UNSPECIFIED":
      return Sheet_Type.TYPE_UNSPECIFIED;
    case 1:
    case "TYPE_SQL":
      return Sheet_Type.TYPE_SQL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Sheet_Type.UNRECOGNIZED;
  }
}

export function sheet_TypeToJSON(object: Sheet_Type): string {
  switch (object) {
    case Sheet_Type.TYPE_UNSPECIFIED:
      return "TYPE_UNSPECIFIED";
    case Sheet_Type.TYPE_SQL:
      return "TYPE_SQL";
    case Sheet_Type.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface SheetPayload {
  type: SheetPayload_Type;
  /** The snapshot of the database config when creating the sheet, be used to compare with the baseline_database_config and apply the diff to the database. */
  databaseConfig:
    | DatabaseConfig
    | undefined;
  /** The snapshot of the baseline database config when creating the sheet. */
  baselineDatabaseConfig: DatabaseConfig | undefined;
}

/** Type of the SheetPayload. */
export enum SheetPayload_Type {
  TYPE_UNSPECIFIED = 0,
  SCHEMA_DESIGN = 1,
  UNRECOGNIZED = -1,
}

export function sheetPayload_TypeFromJSON(object: any): SheetPayload_Type {
  switch (object) {
    case 0:
    case "TYPE_UNSPECIFIED":
      return SheetPayload_Type.TYPE_UNSPECIFIED;
    case 1:
    case "SCHEMA_DESIGN":
      return SheetPayload_Type.SCHEMA_DESIGN;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SheetPayload_Type.UNRECOGNIZED;
  }
}

export function sheetPayload_TypeToJSON(object: SheetPayload_Type): string {
  switch (object) {
    case SheetPayload_Type.TYPE_UNSPECIFIED:
      return "TYPE_UNSPECIFIED";
    case SheetPayload_Type.SCHEMA_DESIGN:
      return "SCHEMA_DESIGN";
    case SheetPayload_Type.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseCreateSheetRequest(): CreateSheetRequest {
  return { parent: "", sheet: undefined };
}

export const CreateSheetRequest = {
  encode(message: CreateSheetRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.sheet !== undefined) {
      Sheet.encode(message.sheet, writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): CreateSheetRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateSheetRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.sheet = Sheet.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateSheetRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      sheet: isSet(object.sheet) ? Sheet.fromJSON(object.sheet) : undefined,
    };
  },

  toJSON(message: CreateSheetRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.sheet !== undefined) {
      obj.sheet = Sheet.toJSON(message.sheet);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateSheetRequest>): CreateSheetRequest {
    return CreateSheetRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateSheetRequest>): CreateSheetRequest {
    const message = createBaseCreateSheetRequest();
    message.parent = object.parent ?? "";
    message.sheet = (object.sheet !== undefined && object.sheet !== null) ? Sheet.fromPartial(object.sheet) : undefined;
    return message;
  },
};

function createBaseGetSheetRequest(): GetSheetRequest {
  return { name: "", raw: false };
}

export const GetSheetRequest = {
  encode(message: GetSheetRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.raw === true) {
      writer.uint32(16).bool(message.raw);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): GetSheetRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSheetRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.raw = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetSheetRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      raw: isSet(object.raw) ? globalThis.Boolean(object.raw) : false,
    };
  },

  toJSON(message: GetSheetRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.raw === true) {
      obj.raw = message.raw;
    }
    return obj;
  },

  create(base?: DeepPartial<GetSheetRequest>): GetSheetRequest {
    return GetSheetRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetSheetRequest>): GetSheetRequest {
    const message = createBaseGetSheetRequest();
    message.name = object.name ?? "";
    message.raw = object.raw ?? false;
    return message;
  },
};

function createBaseUpdateSheetRequest(): UpdateSheetRequest {
  return { sheet: undefined, updateMask: undefined };
}

export const UpdateSheetRequest = {
  encode(message: UpdateSheetRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.sheet !== undefined) {
      Sheet.encode(message.sheet, writer.uint32(10).fork()).ldelim();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateSheetRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSheetRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sheet = Sheet.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSheetRequest {
    return {
      sheet: isSet(object.sheet) ? Sheet.fromJSON(object.sheet) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateSheetRequest): unknown {
    const obj: any = {};
    if (message.sheet !== undefined) {
      obj.sheet = Sheet.toJSON(message.sheet);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateSheetRequest>): UpdateSheetRequest {
    return UpdateSheetRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateSheetRequest>): UpdateSheetRequest {
    const message = createBaseUpdateSheetRequest();
    message.sheet = (object.sheet !== undefined && object.sheet !== null) ? Sheet.fromPartial(object.sheet) : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseUpdateSheetOrganizerRequest(): UpdateSheetOrganizerRequest {
  return { organizer: undefined, updateMask: undefined };
}

export const UpdateSheetOrganizerRequest = {
  encode(message: UpdateSheetOrganizerRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.organizer !== undefined) {
      SheetOrganizer.encode(message.organizer, writer.uint32(10).fork()).ldelim();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): UpdateSheetOrganizerRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSheetOrganizerRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.organizer = SheetOrganizer.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateSheetOrganizerRequest {
    return {
      organizer: isSet(object.organizer) ? SheetOrganizer.fromJSON(object.organizer) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateSheetOrganizerRequest): unknown {
    const obj: any = {};
    if (message.organizer !== undefined) {
      obj.organizer = SheetOrganizer.toJSON(message.organizer);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateSheetOrganizerRequest>): UpdateSheetOrganizerRequest {
    return UpdateSheetOrganizerRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateSheetOrganizerRequest>): UpdateSheetOrganizerRequest {
    const message = createBaseUpdateSheetOrganizerRequest();
    message.organizer = (object.organizer !== undefined && object.organizer !== null)
      ? SheetOrganizer.fromPartial(object.organizer)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseSheetOrganizer(): SheetOrganizer {
  return { sheet: "", starred: false, pinned: false };
}

export const SheetOrganizer = {
  encode(message: SheetOrganizer, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.sheet !== "") {
      writer.uint32(10).string(message.sheet);
    }
    if (message.starred === true) {
      writer.uint32(16).bool(message.starred);
    }
    if (message.pinned === true) {
      writer.uint32(24).bool(message.pinned);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SheetOrganizer {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSheetOrganizer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sheet = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.starred = reader.bool();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pinned = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SheetOrganizer {
    return {
      sheet: isSet(object.sheet) ? globalThis.String(object.sheet) : "",
      starred: isSet(object.starred) ? globalThis.Boolean(object.starred) : false,
      pinned: isSet(object.pinned) ? globalThis.Boolean(object.pinned) : false,
    };
  },

  toJSON(message: SheetOrganizer): unknown {
    const obj: any = {};
    if (message.sheet !== "") {
      obj.sheet = message.sheet;
    }
    if (message.starred === true) {
      obj.starred = message.starred;
    }
    if (message.pinned === true) {
      obj.pinned = message.pinned;
    }
    return obj;
  },

  create(base?: DeepPartial<SheetOrganizer>): SheetOrganizer {
    return SheetOrganizer.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SheetOrganizer>): SheetOrganizer {
    const message = createBaseSheetOrganizer();
    message.sheet = object.sheet ?? "";
    message.starred = object.starred ?? false;
    message.pinned = object.pinned ?? false;
    return message;
  },
};

function createBaseDeleteSheetRequest(): DeleteSheetRequest {
  return { name: "" };
}

export const DeleteSheetRequest = {
  encode(message: DeleteSheetRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): DeleteSheetRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteSheetRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteSheetRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteSheetRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteSheetRequest>): DeleteSheetRequest {
    return DeleteSheetRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteSheetRequest>): DeleteSheetRequest {
    const message = createBaseDeleteSheetRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseSearchSheetsRequest(): SearchSheetsRequest {
  return { parent: "", filter: "", pageSize: 0, pageToken: "" };
}

export const SearchSheetsRequest = {
  encode(message: SearchSheetsRequest, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.filter !== "") {
      writer.uint32(18).string(message.filter);
    }
    if (message.pageSize !== 0) {
      writer.uint32(24).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(34).string(message.pageToken);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SearchSheetsRequest {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchSheetsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.filter = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchSheetsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      filter: isSet(object.filter) ? globalThis.String(object.filter) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
    };
  },

  toJSON(message: SearchSheetsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.filter !== "") {
      obj.filter = message.filter;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<SearchSheetsRequest>): SearchSheetsRequest {
    return SearchSheetsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SearchSheetsRequest>): SearchSheetsRequest {
    const message = createBaseSearchSheetsRequest();
    message.parent = object.parent ?? "";
    message.filter = object.filter ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseSearchSheetsResponse(): SearchSheetsResponse {
  return { sheets: [], nextPageToken: "" };
}

export const SearchSheetsResponse = {
  encode(message: SearchSheetsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    for (const v of message.sheets) {
      Sheet.encode(v!, writer.uint32(10).fork()).ldelim();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SearchSheetsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSearchSheetsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.sheets.push(Sheet.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SearchSheetsResponse {
    return {
      sheets: globalThis.Array.isArray(object?.sheets) ? object.sheets.map((e: any) => Sheet.fromJSON(e)) : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: SearchSheetsResponse): unknown {
    const obj: any = {};
    if (message.sheets?.length) {
      obj.sheets = message.sheets.map((e) => Sheet.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<SearchSheetsResponse>): SearchSheetsResponse {
    return SearchSheetsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SearchSheetsResponse>): SearchSheetsResponse {
    const message = createBaseSearchSheetsResponse();
    message.sheets = object.sheets?.map((e) => Sheet.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseSheet(): Sheet {
  return {
    name: "",
    database: "",
    title: "",
    creator: "",
    createTime: undefined,
    updateTime: undefined,
    content: new Uint8Array(0),
    contentSize: Long.ZERO,
    visibility: 0,
    source: 0,
    type: 0,
    starred: false,
    payload: undefined,
    pushEvent: undefined,
  };
}

export const Sheet = {
  encode(message: Sheet, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.database !== "") {
      writer.uint32(18).string(message.database);
    }
    if (message.title !== "") {
      writer.uint32(26).string(message.title);
    }
    if (message.creator !== "") {
      writer.uint32(34).string(message.creator);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(42).fork()).ldelim();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(50).fork()).ldelim();
    }
    if (message.content.length !== 0) {
      writer.uint32(58).bytes(message.content);
    }
    if (!message.contentSize.isZero()) {
      writer.uint32(64).int64(message.contentSize);
    }
    if (message.visibility !== 0) {
      writer.uint32(72).int32(message.visibility);
    }
    if (message.source !== 0) {
      writer.uint32(80).int32(message.source);
    }
    if (message.type !== 0) {
      writer.uint32(88).int32(message.type);
    }
    if (message.starred === true) {
      writer.uint32(96).bool(message.starred);
    }
    if (message.payload !== undefined) {
      SheetPayload.encode(message.payload, writer.uint32(106).fork()).ldelim();
    }
    if (message.pushEvent !== undefined) {
      PushEvent.encode(message.pushEvent, writer.uint32(114).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): Sheet {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSheet();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.database = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.title = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.creator = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.content = reader.bytes();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.contentSize = reader.int64() as Long;
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.visibility = reader.int32() as any;
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.source = reader.int32() as any;
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 12:
          if (tag !== 96) {
            break;
          }

          message.starred = reader.bool();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.payload = SheetPayload.decode(reader, reader.uint32());
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.pushEvent = PushEvent.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Sheet {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      database: isSet(object.database) ? globalThis.String(object.database) : "",
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
      content: isSet(object.content) ? bytesFromBase64(object.content) : new Uint8Array(0),
      contentSize: isSet(object.contentSize) ? Long.fromValue(object.contentSize) : Long.ZERO,
      visibility: isSet(object.visibility) ? sheet_VisibilityFromJSON(object.visibility) : 0,
      source: isSet(object.source) ? sheet_SourceFromJSON(object.source) : 0,
      type: isSet(object.type) ? sheet_TypeFromJSON(object.type) : 0,
      starred: isSet(object.starred) ? globalThis.Boolean(object.starred) : false,
      payload: isSet(object.payload) ? SheetPayload.fromJSON(object.payload) : undefined,
      pushEvent: isSet(object.pushEvent) ? PushEvent.fromJSON(object.pushEvent) : undefined,
    };
  },

  toJSON(message: Sheet): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.database !== "") {
      obj.database = message.database;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.createTime !== undefined) {
      obj.createTime = message.createTime.toISOString();
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = message.updateTime.toISOString();
    }
    if (message.content.length !== 0) {
      obj.content = base64FromBytes(message.content);
    }
    if (!message.contentSize.isZero()) {
      obj.contentSize = (message.contentSize || Long.ZERO).toString();
    }
    if (message.visibility !== 0) {
      obj.visibility = sheet_VisibilityToJSON(message.visibility);
    }
    if (message.source !== 0) {
      obj.source = sheet_SourceToJSON(message.source);
    }
    if (message.type !== 0) {
      obj.type = sheet_TypeToJSON(message.type);
    }
    if (message.starred === true) {
      obj.starred = message.starred;
    }
    if (message.payload !== undefined) {
      obj.payload = SheetPayload.toJSON(message.payload);
    }
    if (message.pushEvent !== undefined) {
      obj.pushEvent = PushEvent.toJSON(message.pushEvent);
    }
    return obj;
  },

  create(base?: DeepPartial<Sheet>): Sheet {
    return Sheet.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Sheet>): Sheet {
    const message = createBaseSheet();
    message.name = object.name ?? "";
    message.database = object.database ?? "";
    message.title = object.title ?? "";
    message.creator = object.creator ?? "";
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    message.content = object.content ?? new Uint8Array(0);
    message.contentSize = (object.contentSize !== undefined && object.contentSize !== null)
      ? Long.fromValue(object.contentSize)
      : Long.ZERO;
    message.visibility = object.visibility ?? 0;
    message.source = object.source ?? 0;
    message.type = object.type ?? 0;
    message.starred = object.starred ?? false;
    message.payload = (object.payload !== undefined && object.payload !== null)
      ? SheetPayload.fromPartial(object.payload)
      : undefined;
    message.pushEvent = (object.pushEvent !== undefined && object.pushEvent !== null)
      ? PushEvent.fromPartial(object.pushEvent)
      : undefined;
    return message;
  },
};

function createBaseSheetPayload(): SheetPayload {
  return { type: 0, databaseConfig: undefined, baselineDatabaseConfig: undefined };
}

export const SheetPayload = {
  encode(message: SheetPayload, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.databaseConfig !== undefined) {
      DatabaseConfig.encode(message.databaseConfig, writer.uint32(18).fork()).ldelim();
    }
    if (message.baselineDatabaseConfig !== undefined) {
      DatabaseConfig.encode(message.baselineDatabaseConfig, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): SheetPayload {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSheetPayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.databaseConfig = DatabaseConfig.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.baselineDatabaseConfig = DatabaseConfig.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SheetPayload {
    return {
      type: isSet(object.type) ? sheetPayload_TypeFromJSON(object.type) : 0,
      databaseConfig: isSet(object.databaseConfig) ? DatabaseConfig.fromJSON(object.databaseConfig) : undefined,
      baselineDatabaseConfig: isSet(object.baselineDatabaseConfig)
        ? DatabaseConfig.fromJSON(object.baselineDatabaseConfig)
        : undefined,
    };
  },

  toJSON(message: SheetPayload): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = sheetPayload_TypeToJSON(message.type);
    }
    if (message.databaseConfig !== undefined) {
      obj.databaseConfig = DatabaseConfig.toJSON(message.databaseConfig);
    }
    if (message.baselineDatabaseConfig !== undefined) {
      obj.baselineDatabaseConfig = DatabaseConfig.toJSON(message.baselineDatabaseConfig);
    }
    return obj;
  },

  create(base?: DeepPartial<SheetPayload>): SheetPayload {
    return SheetPayload.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SheetPayload>): SheetPayload {
    const message = createBaseSheetPayload();
    message.type = object.type ?? 0;
    message.databaseConfig = (object.databaseConfig !== undefined && object.databaseConfig !== null)
      ? DatabaseConfig.fromPartial(object.databaseConfig)
      : undefined;
    message.baselineDatabaseConfig =
      (object.baselineDatabaseConfig !== undefined && object.baselineDatabaseConfig !== null)
        ? DatabaseConfig.fromPartial(object.baselineDatabaseConfig)
        : undefined;
    return message;
  },
};

export type SheetServiceDefinition = typeof SheetServiceDefinition;
export const SheetServiceDefinition = {
  name: "SheetService",
  fullName: "bytebase.v1.SheetService",
  methods: {
    createSheet: {
      name: "CreateSheet",
      requestType: CreateSheetRequest,
      requestStream: false,
      responseType: Sheet,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [new Uint8Array([12, 112, 97, 114, 101, 110, 116, 44, 115, 104, 101, 101, 116])],
          578365826: [
            new Uint8Array([
              39,
              58,
              5,
              115,
              104,
              101,
              101,
              116,
              34,
              30,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              115,
              104,
              101,
              101,
              116,
              115,
            ]),
          ],
        },
      },
    },
    getSheet: {
      name: "GetSheet",
      requestType: GetSheetRequest,
      requestStream: false,
      responseType: Sheet,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [new Uint8Array([4, 110, 97, 109, 101])],
          578365826: [
            new Uint8Array([
              32,
              18,
              30,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              115,
              104,
              101,
              101,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    searchSheets: {
      name: "SearchSheets",
      requestType: SearchSheetsRequest,
      requestStream: false,
      responseType: SearchSheetsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              39,
              18,
              37,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              125,
              47,
              115,
              104,
              101,
              101,
              116,
              115,
              58,
              115,
              101,
              97,
              114,
              99,
              104,
            ]),
          ],
        },
      },
    },
    updateSheet: {
      name: "UpdateSheet",
      requestType: UpdateSheetRequest,
      requestStream: false,
      responseType: Sheet,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [new Uint8Array([17, 115, 104, 101, 101, 116, 44, 117, 112, 100, 97, 116, 101, 95, 109, 97, 115, 107])],
          578365826: [
            new Uint8Array([
              45,
              58,
              5,
              115,
              104,
              101,
              101,
              116,
              50,
              36,
              47,
              118,
              49,
              47,
              123,
              115,
              104,
              101,
              101,
              116,
              46,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              115,
              104,
              101,
              101,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    updateSheetOrganizer: {
      name: "UpdateSheetOrganizer",
      requestType: UpdateSheetOrganizerRequest,
      requestStream: false,
      responseType: SheetOrganizer,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            new Uint8Array([
              21,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              101,
              114,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          578365826: [
            new Uint8Array([
              64,
              58,
              9,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              101,
              114,
              26,
              51,
              47,
              118,
              49,
              47,
              123,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              101,
              114,
              46,
              115,
              104,
              101,
              101,
              116,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              115,
              104,
              101,
              101,
              116,
              115,
              47,
              42,
              125,
              47,
              111,
              114,
              103,
              97,
              110,
              105,
              122,
              101,
              114,
            ]),
          ],
        },
      },
    },
    deleteSheet: {
      name: "DeleteSheet",
      requestType: DeleteSheetRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [new Uint8Array([4, 110, 97, 109, 101])],
          578365826: [
            new Uint8Array([
              32,
              42,
              30,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              112,
              114,
              111,
              106,
              101,
              99,
              116,
              115,
              47,
              42,
              47,
              115,
              104,
              101,
              101,
              116,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

function bytesFromBase64(b64: string): Uint8Array {
  if (globalThis.Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if (globalThis.Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
