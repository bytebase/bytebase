// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: v1/subscription_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../google/protobuf/timestamp";

export const protobufPackage = "bytebase.v1";

export enum PlanType {
  PLAN_TYPE_UNSPECIFIED = "PLAN_TYPE_UNSPECIFIED",
  FREE = "FREE",
  TEAM = "TEAM",
  ENTERPRISE = "ENTERPRISE",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function planTypeFromJSON(object: any): PlanType {
  switch (object) {
    case 0:
    case "PLAN_TYPE_UNSPECIFIED":
      return PlanType.PLAN_TYPE_UNSPECIFIED;
    case 1:
    case "FREE":
      return PlanType.FREE;
    case 2:
    case "TEAM":
      return PlanType.TEAM;
    case 3:
    case "ENTERPRISE":
      return PlanType.ENTERPRISE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PlanType.UNRECOGNIZED;
  }
}

export function planTypeToJSON(object: PlanType): string {
  switch (object) {
    case PlanType.PLAN_TYPE_UNSPECIFIED:
      return "PLAN_TYPE_UNSPECIFIED";
    case PlanType.FREE:
      return "FREE";
    case PlanType.TEAM:
      return "TEAM";
    case PlanType.ENTERPRISE:
      return "ENTERPRISE";
    case PlanType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export function planTypeToNumber(object: PlanType): number {
  switch (object) {
    case PlanType.PLAN_TYPE_UNSPECIFIED:
      return 0;
    case PlanType.FREE:
      return 1;
    case PlanType.TEAM:
      return 2;
    case PlanType.ENTERPRISE:
      return 3;
    case PlanType.UNRECOGNIZED:
    default:
      return -1;
  }
}

export interface GetSubscriptionRequest {
}

export interface GetFeatureMatrixRequest {
}

export interface UpdateSubscriptionRequest {
  patch: PatchSubscription | undefined;
}

export interface PatchSubscription {
  license: string;
}

export interface Subscription {
  seatCount: number;
  instanceCount: number;
  expiresTime: Timestamp | undefined;
  startedTime: Timestamp | undefined;
  plan: PlanType;
  trialing: boolean;
  orgId: string;
  orgName: string;
}

export interface FeatureMatrix {
  features: Feature[];
}

export interface Feature {
  /** Name is the feature name. */
  name: string;
  /** Matrix is the feature matrix for different plan. The key is the plan enum in string value. */
  matrix: { [key: string]: boolean };
}

export interface Feature_MatrixEntry {
  key: string;
  value: boolean;
}

/** PlanConfig represents the configuration for all plans loaded from plan.yaml */
export interface PlanConfig {
  plans: PlanLimitConfig[];
}

/** PlanLimitConfig represents a single plan's configuration */
export interface PlanLimitConfig {
  type: PlanType;
  maximumInstanceCount: number;
  maximumSeatCount: number;
  features: PlanLimitConfig_Feature[];
}

/** Feature represents the available features in Bytebase */
export enum PlanLimitConfig_Feature {
  FEATURE_UNSPECIFIED = "FEATURE_UNSPECIFIED",
  /** DATABASE_CHANGE - Database Change Management */
  DATABASE_CHANGE = "DATABASE_CHANGE",
  GIT_BASED_SCHEMA_VERSION_CONTROL = "GIT_BASED_SCHEMA_VERSION_CONTROL",
  DECLARATIVE_SCHEMA_MIGRATION = "DECLARATIVE_SCHEMA_MIGRATION",
  COMPARE_AND_SYNC_SCHEMA = "COMPARE_AND_SYNC_SCHEMA",
  ONLINE_SCHEMA_CHANGE = "ONLINE_SCHEMA_CHANGE",
  PRE_DEPLOYMENT_SQL_REVIEW = "PRE_DEPLOYMENT_SQL_REVIEW",
  AUTOMATIC_BACKUP_BEFORE_DATA_CHANGES = "AUTOMATIC_BACKUP_BEFORE_DATA_CHANGES",
  ONE_CLICK_DATA_ROLLBACK = "ONE_CLICK_DATA_ROLLBACK",
  MULTI_DATABASE_BATCH_CHANGES = "MULTI_DATABASE_BATCH_CHANGES",
  PROGRESSIVE_ENVIRONMENT_DEPLOYMENT = "PROGRESSIVE_ENVIRONMENT_DEPLOYMENT",
  SCHEDULED_ROLLOUT_TIME = "SCHEDULED_ROLLOUT_TIME",
  DATABASE_CHANGELOG = "DATABASE_CHANGELOG",
  SCHEMA_DRIFT_DETECTION = "SCHEMA_DRIFT_DETECTION",
  CHANGELIST = "CHANGELIST",
  SCHEMA_TEMPLATE = "SCHEMA_TEMPLATE",
  ROLLOUT_POLICY = "ROLLOUT_POLICY",
  /** WEB_BASED_SQL_EDITOR - SQL Editor & Development */
  WEB_BASED_SQL_EDITOR = "WEB_BASED_SQL_EDITOR",
  SQL_EDITOR_ADMIN_MODE = "SQL_EDITOR_ADMIN_MODE",
  NATURAL_LANGUAGE_TO_SQL = "NATURAL_LANGUAGE_TO_SQL",
  AI_QUERY_EXPLANATION = "AI_QUERY_EXPLANATION",
  AI_QUERY_SUGGESTIONS = "AI_QUERY_SUGGESTIONS",
  AUTO_COMPLETE = "AUTO_COMPLETE",
  SCHEMA_DIAGRAM = "SCHEMA_DIAGRAM",
  SCHEMA_EDITOR = "SCHEMA_EDITOR",
  DATA_EXPORT = "DATA_EXPORT",
  QUERY_HISTORY = "QUERY_HISTORY",
  SAVED_AND_SHARED_SQL_SCRIPTS = "SAVED_AND_SHARED_SQL_SCRIPTS",
  SQL_EDITOR_DDL_DML_RESTRICTION = "SQL_EDITOR_DDL_DML_RESTRICTION",
  BATCH_QUERY = "BATCH_QUERY",
  INSTANCE_READ_ONLY_CONNECTION = "INSTANCE_READ_ONLY_CONNECTION",
  RESTRICT_COPYING_DATA = "RESTRICT_COPYING_DATA",
  /** IAM - Security & Compliance */
  IAM = "IAM",
  INSTANCE_SSL_CONNECTION = "INSTANCE_SSL_CONNECTION",
  INSTANCE_CONNECTION_OVER_SSH_TUNNEL = "INSTANCE_CONNECTION_OVER_SSH_TUNNEL",
  INSTANCE_CONNECTION_IAM_AUTHENTICATION = "INSTANCE_CONNECTION_IAM_AUTHENTICATION",
  GOOGLE_AND_GITHUB_SSO = "GOOGLE_AND_GITHUB_SSO",
  USER_GROUPS = "USER_GROUPS",
  DISALLOW_SELF_SERVICE_SIGNUP = "DISALLOW_SELF_SERVICE_SIGNUP",
  DATABASE_SECRET_VARIABLES = "DATABASE_SECRET_VARIABLES",
  QUERY_DATASOURCE_RESTRICTION = "QUERY_DATASOURCE_RESTRICTION",
  CUSTOM_INSTANCE_SYNC_TIME = "CUSTOM_INSTANCE_SYNC_TIME",
  CUSTOM_INSTANCE_CONNECTION_LIMIT = "CUSTOM_INSTANCE_CONNECTION_LIMIT",
  RISK_ASSESSMENT = "RISK_ASSESSMENT",
  APPROVAL_WORKFLOW = "APPROVAL_WORKFLOW",
  AUDIT_LOG = "AUDIT_LOG",
  ENTERPRISE_SSO = "ENTERPRISE_SSO",
  TWO_FA = "TWO_FA",
  PASSWORD_RESTRICTIONS = "PASSWORD_RESTRICTIONS",
  CUSTOM_ROLES = "CUSTOM_ROLES",
  REQUEST_ROLE_WORKFLOW = "REQUEST_ROLE_WORKFLOW",
  DATA_MASKING = "DATA_MASKING",
  DATA_CLASSIFICATION = "DATA_CLASSIFICATION",
  SCIM = "SCIM",
  DIRECTORY_SYNC_ENTRA_ID = "DIRECTORY_SYNC_ENTRA_ID",
  DIRECTORY_SYNC_OKTA = "DIRECTORY_SYNC_OKTA",
  SIGN_IN_FREQUENCY_CONTROL = "SIGN_IN_FREQUENCY_CONTROL",
  EXTERNAL_SECRET_MANAGER = "EXTERNAL_SECRET_MANAGER",
  USER_EMAIL_DOMAIN_RESTRICTION = "USER_EMAIL_DOMAIN_RESTRICTION",
  /** ENVIRONMENT_MANAGEMENT - Administration & Support */
  ENVIRONMENT_MANAGEMENT = "ENVIRONMENT_MANAGEMENT",
  IM_NOTIFICATIONS = "IM_NOTIFICATIONS",
  TERRAFORM_PROVIDER = "TERRAFORM_PROVIDER",
  DATABASE_GROUPS = "DATABASE_GROUPS",
  ENVIRONMENT_TIERS = "ENVIRONMENT_TIERS",
  DASHBOARD_ANNOUNCEMENT = "DASHBOARD_ANNOUNCEMENT",
  API_INTEGRATION_GUIDANCE = "API_INTEGRATION_GUIDANCE",
  CUSTOM_LOGO = "CUSTOM_LOGO",
  WATERMARK = "WATERMARK",
  ROADMAP_PRIORITIZATION = "ROADMAP_PRIORITIZATION",
  CUSTOM_MSA = "CUSTOM_MSA",
  COMMUNITY_SUPPORT = "COMMUNITY_SUPPORT",
  EMAIL_SUPPORT = "EMAIL_SUPPORT",
  DEDICATED_SUPPORT_WITH_SLA = "DEDICATED_SUPPORT_WITH_SLA",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function planLimitConfig_FeatureFromJSON(object: any): PlanLimitConfig_Feature {
  switch (object) {
    case 0:
    case "FEATURE_UNSPECIFIED":
      return PlanLimitConfig_Feature.FEATURE_UNSPECIFIED;
    case 1:
    case "DATABASE_CHANGE":
      return PlanLimitConfig_Feature.DATABASE_CHANGE;
    case 2:
    case "GIT_BASED_SCHEMA_VERSION_CONTROL":
      return PlanLimitConfig_Feature.GIT_BASED_SCHEMA_VERSION_CONTROL;
    case 3:
    case "DECLARATIVE_SCHEMA_MIGRATION":
      return PlanLimitConfig_Feature.DECLARATIVE_SCHEMA_MIGRATION;
    case 4:
    case "COMPARE_AND_SYNC_SCHEMA":
      return PlanLimitConfig_Feature.COMPARE_AND_SYNC_SCHEMA;
    case 5:
    case "ONLINE_SCHEMA_CHANGE":
      return PlanLimitConfig_Feature.ONLINE_SCHEMA_CHANGE;
    case 6:
    case "PRE_DEPLOYMENT_SQL_REVIEW":
      return PlanLimitConfig_Feature.PRE_DEPLOYMENT_SQL_REVIEW;
    case 7:
    case "AUTOMATIC_BACKUP_BEFORE_DATA_CHANGES":
      return PlanLimitConfig_Feature.AUTOMATIC_BACKUP_BEFORE_DATA_CHANGES;
    case 8:
    case "ONE_CLICK_DATA_ROLLBACK":
      return PlanLimitConfig_Feature.ONE_CLICK_DATA_ROLLBACK;
    case 9:
    case "MULTI_DATABASE_BATCH_CHANGES":
      return PlanLimitConfig_Feature.MULTI_DATABASE_BATCH_CHANGES;
    case 10:
    case "PROGRESSIVE_ENVIRONMENT_DEPLOYMENT":
      return PlanLimitConfig_Feature.PROGRESSIVE_ENVIRONMENT_DEPLOYMENT;
    case 11:
    case "SCHEDULED_ROLLOUT_TIME":
      return PlanLimitConfig_Feature.SCHEDULED_ROLLOUT_TIME;
    case 12:
    case "DATABASE_CHANGELOG":
      return PlanLimitConfig_Feature.DATABASE_CHANGELOG;
    case 13:
    case "SCHEMA_DRIFT_DETECTION":
      return PlanLimitConfig_Feature.SCHEMA_DRIFT_DETECTION;
    case 14:
    case "CHANGELIST":
      return PlanLimitConfig_Feature.CHANGELIST;
    case 15:
    case "SCHEMA_TEMPLATE":
      return PlanLimitConfig_Feature.SCHEMA_TEMPLATE;
    case 16:
    case "ROLLOUT_POLICY":
      return PlanLimitConfig_Feature.ROLLOUT_POLICY;
    case 17:
    case "WEB_BASED_SQL_EDITOR":
      return PlanLimitConfig_Feature.WEB_BASED_SQL_EDITOR;
    case 18:
    case "SQL_EDITOR_ADMIN_MODE":
      return PlanLimitConfig_Feature.SQL_EDITOR_ADMIN_MODE;
    case 19:
    case "NATURAL_LANGUAGE_TO_SQL":
      return PlanLimitConfig_Feature.NATURAL_LANGUAGE_TO_SQL;
    case 20:
    case "AI_QUERY_EXPLANATION":
      return PlanLimitConfig_Feature.AI_QUERY_EXPLANATION;
    case 21:
    case "AI_QUERY_SUGGESTIONS":
      return PlanLimitConfig_Feature.AI_QUERY_SUGGESTIONS;
    case 22:
    case "AUTO_COMPLETE":
      return PlanLimitConfig_Feature.AUTO_COMPLETE;
    case 23:
    case "SCHEMA_DIAGRAM":
      return PlanLimitConfig_Feature.SCHEMA_DIAGRAM;
    case 24:
    case "SCHEMA_EDITOR":
      return PlanLimitConfig_Feature.SCHEMA_EDITOR;
    case 25:
    case "DATA_EXPORT":
      return PlanLimitConfig_Feature.DATA_EXPORT;
    case 26:
    case "QUERY_HISTORY":
      return PlanLimitConfig_Feature.QUERY_HISTORY;
    case 27:
    case "SAVED_AND_SHARED_SQL_SCRIPTS":
      return PlanLimitConfig_Feature.SAVED_AND_SHARED_SQL_SCRIPTS;
    case 28:
    case "SQL_EDITOR_DDL_DML_RESTRICTION":
      return PlanLimitConfig_Feature.SQL_EDITOR_DDL_DML_RESTRICTION;
    case 29:
    case "BATCH_QUERY":
      return PlanLimitConfig_Feature.BATCH_QUERY;
    case 30:
    case "INSTANCE_READ_ONLY_CONNECTION":
      return PlanLimitConfig_Feature.INSTANCE_READ_ONLY_CONNECTION;
    case 31:
    case "RESTRICT_COPYING_DATA":
      return PlanLimitConfig_Feature.RESTRICT_COPYING_DATA;
    case 32:
    case "IAM":
      return PlanLimitConfig_Feature.IAM;
    case 33:
    case "INSTANCE_SSL_CONNECTION":
      return PlanLimitConfig_Feature.INSTANCE_SSL_CONNECTION;
    case 34:
    case "INSTANCE_CONNECTION_OVER_SSH_TUNNEL":
      return PlanLimitConfig_Feature.INSTANCE_CONNECTION_OVER_SSH_TUNNEL;
    case 35:
    case "INSTANCE_CONNECTION_IAM_AUTHENTICATION":
      return PlanLimitConfig_Feature.INSTANCE_CONNECTION_IAM_AUTHENTICATION;
    case 36:
    case "GOOGLE_AND_GITHUB_SSO":
      return PlanLimitConfig_Feature.GOOGLE_AND_GITHUB_SSO;
    case 37:
    case "USER_GROUPS":
      return PlanLimitConfig_Feature.USER_GROUPS;
    case 38:
    case "DISALLOW_SELF_SERVICE_SIGNUP":
      return PlanLimitConfig_Feature.DISALLOW_SELF_SERVICE_SIGNUP;
    case 39:
    case "DATABASE_SECRET_VARIABLES":
      return PlanLimitConfig_Feature.DATABASE_SECRET_VARIABLES;
    case 40:
    case "QUERY_DATASOURCE_RESTRICTION":
      return PlanLimitConfig_Feature.QUERY_DATASOURCE_RESTRICTION;
    case 41:
    case "CUSTOM_INSTANCE_SYNC_TIME":
      return PlanLimitConfig_Feature.CUSTOM_INSTANCE_SYNC_TIME;
    case 42:
    case "CUSTOM_INSTANCE_CONNECTION_LIMIT":
      return PlanLimitConfig_Feature.CUSTOM_INSTANCE_CONNECTION_LIMIT;
    case 43:
    case "RISK_ASSESSMENT":
      return PlanLimitConfig_Feature.RISK_ASSESSMENT;
    case 44:
    case "APPROVAL_WORKFLOW":
      return PlanLimitConfig_Feature.APPROVAL_WORKFLOW;
    case 45:
    case "AUDIT_LOG":
      return PlanLimitConfig_Feature.AUDIT_LOG;
    case 46:
    case "ENTERPRISE_SSO":
      return PlanLimitConfig_Feature.ENTERPRISE_SSO;
    case 47:
    case "TWO_FA":
      return PlanLimitConfig_Feature.TWO_FA;
    case 48:
    case "PASSWORD_RESTRICTIONS":
      return PlanLimitConfig_Feature.PASSWORD_RESTRICTIONS;
    case 49:
    case "CUSTOM_ROLES":
      return PlanLimitConfig_Feature.CUSTOM_ROLES;
    case 50:
    case "REQUEST_ROLE_WORKFLOW":
      return PlanLimitConfig_Feature.REQUEST_ROLE_WORKFLOW;
    case 51:
    case "DATA_MASKING":
      return PlanLimitConfig_Feature.DATA_MASKING;
    case 52:
    case "DATA_CLASSIFICATION":
      return PlanLimitConfig_Feature.DATA_CLASSIFICATION;
    case 53:
    case "SCIM":
      return PlanLimitConfig_Feature.SCIM;
    case 54:
    case "DIRECTORY_SYNC_ENTRA_ID":
      return PlanLimitConfig_Feature.DIRECTORY_SYNC_ENTRA_ID;
    case 55:
    case "DIRECTORY_SYNC_OKTA":
      return PlanLimitConfig_Feature.DIRECTORY_SYNC_OKTA;
    case 56:
    case "SIGN_IN_FREQUENCY_CONTROL":
      return PlanLimitConfig_Feature.SIGN_IN_FREQUENCY_CONTROL;
    case 57:
    case "EXTERNAL_SECRET_MANAGER":
      return PlanLimitConfig_Feature.EXTERNAL_SECRET_MANAGER;
    case 58:
    case "USER_EMAIL_DOMAIN_RESTRICTION":
      return PlanLimitConfig_Feature.USER_EMAIL_DOMAIN_RESTRICTION;
    case 59:
    case "ENVIRONMENT_MANAGEMENT":
      return PlanLimitConfig_Feature.ENVIRONMENT_MANAGEMENT;
    case 60:
    case "IM_NOTIFICATIONS":
      return PlanLimitConfig_Feature.IM_NOTIFICATIONS;
    case 61:
    case "TERRAFORM_PROVIDER":
      return PlanLimitConfig_Feature.TERRAFORM_PROVIDER;
    case 62:
    case "DATABASE_GROUPS":
      return PlanLimitConfig_Feature.DATABASE_GROUPS;
    case 63:
    case "ENVIRONMENT_TIERS":
      return PlanLimitConfig_Feature.ENVIRONMENT_TIERS;
    case 64:
    case "DASHBOARD_ANNOUNCEMENT":
      return PlanLimitConfig_Feature.DASHBOARD_ANNOUNCEMENT;
    case 65:
    case "API_INTEGRATION_GUIDANCE":
      return PlanLimitConfig_Feature.API_INTEGRATION_GUIDANCE;
    case 66:
    case "CUSTOM_LOGO":
      return PlanLimitConfig_Feature.CUSTOM_LOGO;
    case 67:
    case "WATERMARK":
      return PlanLimitConfig_Feature.WATERMARK;
    case 68:
    case "ROADMAP_PRIORITIZATION":
      return PlanLimitConfig_Feature.ROADMAP_PRIORITIZATION;
    case 69:
    case "CUSTOM_MSA":
      return PlanLimitConfig_Feature.CUSTOM_MSA;
    case 70:
    case "COMMUNITY_SUPPORT":
      return PlanLimitConfig_Feature.COMMUNITY_SUPPORT;
    case 71:
    case "EMAIL_SUPPORT":
      return PlanLimitConfig_Feature.EMAIL_SUPPORT;
    case 72:
    case "DEDICATED_SUPPORT_WITH_SLA":
      return PlanLimitConfig_Feature.DEDICATED_SUPPORT_WITH_SLA;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PlanLimitConfig_Feature.UNRECOGNIZED;
  }
}

export function planLimitConfig_FeatureToJSON(object: PlanLimitConfig_Feature): string {
  switch (object) {
    case PlanLimitConfig_Feature.FEATURE_UNSPECIFIED:
      return "FEATURE_UNSPECIFIED";
    case PlanLimitConfig_Feature.DATABASE_CHANGE:
      return "DATABASE_CHANGE";
    case PlanLimitConfig_Feature.GIT_BASED_SCHEMA_VERSION_CONTROL:
      return "GIT_BASED_SCHEMA_VERSION_CONTROL";
    case PlanLimitConfig_Feature.DECLARATIVE_SCHEMA_MIGRATION:
      return "DECLARATIVE_SCHEMA_MIGRATION";
    case PlanLimitConfig_Feature.COMPARE_AND_SYNC_SCHEMA:
      return "COMPARE_AND_SYNC_SCHEMA";
    case PlanLimitConfig_Feature.ONLINE_SCHEMA_CHANGE:
      return "ONLINE_SCHEMA_CHANGE";
    case PlanLimitConfig_Feature.PRE_DEPLOYMENT_SQL_REVIEW:
      return "PRE_DEPLOYMENT_SQL_REVIEW";
    case PlanLimitConfig_Feature.AUTOMATIC_BACKUP_BEFORE_DATA_CHANGES:
      return "AUTOMATIC_BACKUP_BEFORE_DATA_CHANGES";
    case PlanLimitConfig_Feature.ONE_CLICK_DATA_ROLLBACK:
      return "ONE_CLICK_DATA_ROLLBACK";
    case PlanLimitConfig_Feature.MULTI_DATABASE_BATCH_CHANGES:
      return "MULTI_DATABASE_BATCH_CHANGES";
    case PlanLimitConfig_Feature.PROGRESSIVE_ENVIRONMENT_DEPLOYMENT:
      return "PROGRESSIVE_ENVIRONMENT_DEPLOYMENT";
    case PlanLimitConfig_Feature.SCHEDULED_ROLLOUT_TIME:
      return "SCHEDULED_ROLLOUT_TIME";
    case PlanLimitConfig_Feature.DATABASE_CHANGELOG:
      return "DATABASE_CHANGELOG";
    case PlanLimitConfig_Feature.SCHEMA_DRIFT_DETECTION:
      return "SCHEMA_DRIFT_DETECTION";
    case PlanLimitConfig_Feature.CHANGELIST:
      return "CHANGELIST";
    case PlanLimitConfig_Feature.SCHEMA_TEMPLATE:
      return "SCHEMA_TEMPLATE";
    case PlanLimitConfig_Feature.ROLLOUT_POLICY:
      return "ROLLOUT_POLICY";
    case PlanLimitConfig_Feature.WEB_BASED_SQL_EDITOR:
      return "WEB_BASED_SQL_EDITOR";
    case PlanLimitConfig_Feature.SQL_EDITOR_ADMIN_MODE:
      return "SQL_EDITOR_ADMIN_MODE";
    case PlanLimitConfig_Feature.NATURAL_LANGUAGE_TO_SQL:
      return "NATURAL_LANGUAGE_TO_SQL";
    case PlanLimitConfig_Feature.AI_QUERY_EXPLANATION:
      return "AI_QUERY_EXPLANATION";
    case PlanLimitConfig_Feature.AI_QUERY_SUGGESTIONS:
      return "AI_QUERY_SUGGESTIONS";
    case PlanLimitConfig_Feature.AUTO_COMPLETE:
      return "AUTO_COMPLETE";
    case PlanLimitConfig_Feature.SCHEMA_DIAGRAM:
      return "SCHEMA_DIAGRAM";
    case PlanLimitConfig_Feature.SCHEMA_EDITOR:
      return "SCHEMA_EDITOR";
    case PlanLimitConfig_Feature.DATA_EXPORT:
      return "DATA_EXPORT";
    case PlanLimitConfig_Feature.QUERY_HISTORY:
      return "QUERY_HISTORY";
    case PlanLimitConfig_Feature.SAVED_AND_SHARED_SQL_SCRIPTS:
      return "SAVED_AND_SHARED_SQL_SCRIPTS";
    case PlanLimitConfig_Feature.SQL_EDITOR_DDL_DML_RESTRICTION:
      return "SQL_EDITOR_DDL_DML_RESTRICTION";
    case PlanLimitConfig_Feature.BATCH_QUERY:
      return "BATCH_QUERY";
    case PlanLimitConfig_Feature.INSTANCE_READ_ONLY_CONNECTION:
      return "INSTANCE_READ_ONLY_CONNECTION";
    case PlanLimitConfig_Feature.RESTRICT_COPYING_DATA:
      return "RESTRICT_COPYING_DATA";
    case PlanLimitConfig_Feature.IAM:
      return "IAM";
    case PlanLimitConfig_Feature.INSTANCE_SSL_CONNECTION:
      return "INSTANCE_SSL_CONNECTION";
    case PlanLimitConfig_Feature.INSTANCE_CONNECTION_OVER_SSH_TUNNEL:
      return "INSTANCE_CONNECTION_OVER_SSH_TUNNEL";
    case PlanLimitConfig_Feature.INSTANCE_CONNECTION_IAM_AUTHENTICATION:
      return "INSTANCE_CONNECTION_IAM_AUTHENTICATION";
    case PlanLimitConfig_Feature.GOOGLE_AND_GITHUB_SSO:
      return "GOOGLE_AND_GITHUB_SSO";
    case PlanLimitConfig_Feature.USER_GROUPS:
      return "USER_GROUPS";
    case PlanLimitConfig_Feature.DISALLOW_SELF_SERVICE_SIGNUP:
      return "DISALLOW_SELF_SERVICE_SIGNUP";
    case PlanLimitConfig_Feature.DATABASE_SECRET_VARIABLES:
      return "DATABASE_SECRET_VARIABLES";
    case PlanLimitConfig_Feature.QUERY_DATASOURCE_RESTRICTION:
      return "QUERY_DATASOURCE_RESTRICTION";
    case PlanLimitConfig_Feature.CUSTOM_INSTANCE_SYNC_TIME:
      return "CUSTOM_INSTANCE_SYNC_TIME";
    case PlanLimitConfig_Feature.CUSTOM_INSTANCE_CONNECTION_LIMIT:
      return "CUSTOM_INSTANCE_CONNECTION_LIMIT";
    case PlanLimitConfig_Feature.RISK_ASSESSMENT:
      return "RISK_ASSESSMENT";
    case PlanLimitConfig_Feature.APPROVAL_WORKFLOW:
      return "APPROVAL_WORKFLOW";
    case PlanLimitConfig_Feature.AUDIT_LOG:
      return "AUDIT_LOG";
    case PlanLimitConfig_Feature.ENTERPRISE_SSO:
      return "ENTERPRISE_SSO";
    case PlanLimitConfig_Feature.TWO_FA:
      return "TWO_FA";
    case PlanLimitConfig_Feature.PASSWORD_RESTRICTIONS:
      return "PASSWORD_RESTRICTIONS";
    case PlanLimitConfig_Feature.CUSTOM_ROLES:
      return "CUSTOM_ROLES";
    case PlanLimitConfig_Feature.REQUEST_ROLE_WORKFLOW:
      return "REQUEST_ROLE_WORKFLOW";
    case PlanLimitConfig_Feature.DATA_MASKING:
      return "DATA_MASKING";
    case PlanLimitConfig_Feature.DATA_CLASSIFICATION:
      return "DATA_CLASSIFICATION";
    case PlanLimitConfig_Feature.SCIM:
      return "SCIM";
    case PlanLimitConfig_Feature.DIRECTORY_SYNC_ENTRA_ID:
      return "DIRECTORY_SYNC_ENTRA_ID";
    case PlanLimitConfig_Feature.DIRECTORY_SYNC_OKTA:
      return "DIRECTORY_SYNC_OKTA";
    case PlanLimitConfig_Feature.SIGN_IN_FREQUENCY_CONTROL:
      return "SIGN_IN_FREQUENCY_CONTROL";
    case PlanLimitConfig_Feature.EXTERNAL_SECRET_MANAGER:
      return "EXTERNAL_SECRET_MANAGER";
    case PlanLimitConfig_Feature.USER_EMAIL_DOMAIN_RESTRICTION:
      return "USER_EMAIL_DOMAIN_RESTRICTION";
    case PlanLimitConfig_Feature.ENVIRONMENT_MANAGEMENT:
      return "ENVIRONMENT_MANAGEMENT";
    case PlanLimitConfig_Feature.IM_NOTIFICATIONS:
      return "IM_NOTIFICATIONS";
    case PlanLimitConfig_Feature.TERRAFORM_PROVIDER:
      return "TERRAFORM_PROVIDER";
    case PlanLimitConfig_Feature.DATABASE_GROUPS:
      return "DATABASE_GROUPS";
    case PlanLimitConfig_Feature.ENVIRONMENT_TIERS:
      return "ENVIRONMENT_TIERS";
    case PlanLimitConfig_Feature.DASHBOARD_ANNOUNCEMENT:
      return "DASHBOARD_ANNOUNCEMENT";
    case PlanLimitConfig_Feature.API_INTEGRATION_GUIDANCE:
      return "API_INTEGRATION_GUIDANCE";
    case PlanLimitConfig_Feature.CUSTOM_LOGO:
      return "CUSTOM_LOGO";
    case PlanLimitConfig_Feature.WATERMARK:
      return "WATERMARK";
    case PlanLimitConfig_Feature.ROADMAP_PRIORITIZATION:
      return "ROADMAP_PRIORITIZATION";
    case PlanLimitConfig_Feature.CUSTOM_MSA:
      return "CUSTOM_MSA";
    case PlanLimitConfig_Feature.COMMUNITY_SUPPORT:
      return "COMMUNITY_SUPPORT";
    case PlanLimitConfig_Feature.EMAIL_SUPPORT:
      return "EMAIL_SUPPORT";
    case PlanLimitConfig_Feature.DEDICATED_SUPPORT_WITH_SLA:
      return "DEDICATED_SUPPORT_WITH_SLA";
    case PlanLimitConfig_Feature.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export function planLimitConfig_FeatureToNumber(object: PlanLimitConfig_Feature): number {
  switch (object) {
    case PlanLimitConfig_Feature.FEATURE_UNSPECIFIED:
      return 0;
    case PlanLimitConfig_Feature.DATABASE_CHANGE:
      return 1;
    case PlanLimitConfig_Feature.GIT_BASED_SCHEMA_VERSION_CONTROL:
      return 2;
    case PlanLimitConfig_Feature.DECLARATIVE_SCHEMA_MIGRATION:
      return 3;
    case PlanLimitConfig_Feature.COMPARE_AND_SYNC_SCHEMA:
      return 4;
    case PlanLimitConfig_Feature.ONLINE_SCHEMA_CHANGE:
      return 5;
    case PlanLimitConfig_Feature.PRE_DEPLOYMENT_SQL_REVIEW:
      return 6;
    case PlanLimitConfig_Feature.AUTOMATIC_BACKUP_BEFORE_DATA_CHANGES:
      return 7;
    case PlanLimitConfig_Feature.ONE_CLICK_DATA_ROLLBACK:
      return 8;
    case PlanLimitConfig_Feature.MULTI_DATABASE_BATCH_CHANGES:
      return 9;
    case PlanLimitConfig_Feature.PROGRESSIVE_ENVIRONMENT_DEPLOYMENT:
      return 10;
    case PlanLimitConfig_Feature.SCHEDULED_ROLLOUT_TIME:
      return 11;
    case PlanLimitConfig_Feature.DATABASE_CHANGELOG:
      return 12;
    case PlanLimitConfig_Feature.SCHEMA_DRIFT_DETECTION:
      return 13;
    case PlanLimitConfig_Feature.CHANGELIST:
      return 14;
    case PlanLimitConfig_Feature.SCHEMA_TEMPLATE:
      return 15;
    case PlanLimitConfig_Feature.ROLLOUT_POLICY:
      return 16;
    case PlanLimitConfig_Feature.WEB_BASED_SQL_EDITOR:
      return 17;
    case PlanLimitConfig_Feature.SQL_EDITOR_ADMIN_MODE:
      return 18;
    case PlanLimitConfig_Feature.NATURAL_LANGUAGE_TO_SQL:
      return 19;
    case PlanLimitConfig_Feature.AI_QUERY_EXPLANATION:
      return 20;
    case PlanLimitConfig_Feature.AI_QUERY_SUGGESTIONS:
      return 21;
    case PlanLimitConfig_Feature.AUTO_COMPLETE:
      return 22;
    case PlanLimitConfig_Feature.SCHEMA_DIAGRAM:
      return 23;
    case PlanLimitConfig_Feature.SCHEMA_EDITOR:
      return 24;
    case PlanLimitConfig_Feature.DATA_EXPORT:
      return 25;
    case PlanLimitConfig_Feature.QUERY_HISTORY:
      return 26;
    case PlanLimitConfig_Feature.SAVED_AND_SHARED_SQL_SCRIPTS:
      return 27;
    case PlanLimitConfig_Feature.SQL_EDITOR_DDL_DML_RESTRICTION:
      return 28;
    case PlanLimitConfig_Feature.BATCH_QUERY:
      return 29;
    case PlanLimitConfig_Feature.INSTANCE_READ_ONLY_CONNECTION:
      return 30;
    case PlanLimitConfig_Feature.RESTRICT_COPYING_DATA:
      return 31;
    case PlanLimitConfig_Feature.IAM:
      return 32;
    case PlanLimitConfig_Feature.INSTANCE_SSL_CONNECTION:
      return 33;
    case PlanLimitConfig_Feature.INSTANCE_CONNECTION_OVER_SSH_TUNNEL:
      return 34;
    case PlanLimitConfig_Feature.INSTANCE_CONNECTION_IAM_AUTHENTICATION:
      return 35;
    case PlanLimitConfig_Feature.GOOGLE_AND_GITHUB_SSO:
      return 36;
    case PlanLimitConfig_Feature.USER_GROUPS:
      return 37;
    case PlanLimitConfig_Feature.DISALLOW_SELF_SERVICE_SIGNUP:
      return 38;
    case PlanLimitConfig_Feature.DATABASE_SECRET_VARIABLES:
      return 39;
    case PlanLimitConfig_Feature.QUERY_DATASOURCE_RESTRICTION:
      return 40;
    case PlanLimitConfig_Feature.CUSTOM_INSTANCE_SYNC_TIME:
      return 41;
    case PlanLimitConfig_Feature.CUSTOM_INSTANCE_CONNECTION_LIMIT:
      return 42;
    case PlanLimitConfig_Feature.RISK_ASSESSMENT:
      return 43;
    case PlanLimitConfig_Feature.APPROVAL_WORKFLOW:
      return 44;
    case PlanLimitConfig_Feature.AUDIT_LOG:
      return 45;
    case PlanLimitConfig_Feature.ENTERPRISE_SSO:
      return 46;
    case PlanLimitConfig_Feature.TWO_FA:
      return 47;
    case PlanLimitConfig_Feature.PASSWORD_RESTRICTIONS:
      return 48;
    case PlanLimitConfig_Feature.CUSTOM_ROLES:
      return 49;
    case PlanLimitConfig_Feature.REQUEST_ROLE_WORKFLOW:
      return 50;
    case PlanLimitConfig_Feature.DATA_MASKING:
      return 51;
    case PlanLimitConfig_Feature.DATA_CLASSIFICATION:
      return 52;
    case PlanLimitConfig_Feature.SCIM:
      return 53;
    case PlanLimitConfig_Feature.DIRECTORY_SYNC_ENTRA_ID:
      return 54;
    case PlanLimitConfig_Feature.DIRECTORY_SYNC_OKTA:
      return 55;
    case PlanLimitConfig_Feature.SIGN_IN_FREQUENCY_CONTROL:
      return 56;
    case PlanLimitConfig_Feature.EXTERNAL_SECRET_MANAGER:
      return 57;
    case PlanLimitConfig_Feature.USER_EMAIL_DOMAIN_RESTRICTION:
      return 58;
    case PlanLimitConfig_Feature.ENVIRONMENT_MANAGEMENT:
      return 59;
    case PlanLimitConfig_Feature.IM_NOTIFICATIONS:
      return 60;
    case PlanLimitConfig_Feature.TERRAFORM_PROVIDER:
      return 61;
    case PlanLimitConfig_Feature.DATABASE_GROUPS:
      return 62;
    case PlanLimitConfig_Feature.ENVIRONMENT_TIERS:
      return 63;
    case PlanLimitConfig_Feature.DASHBOARD_ANNOUNCEMENT:
      return 64;
    case PlanLimitConfig_Feature.API_INTEGRATION_GUIDANCE:
      return 65;
    case PlanLimitConfig_Feature.CUSTOM_LOGO:
      return 66;
    case PlanLimitConfig_Feature.WATERMARK:
      return 67;
    case PlanLimitConfig_Feature.ROADMAP_PRIORITIZATION:
      return 68;
    case PlanLimitConfig_Feature.CUSTOM_MSA:
      return 69;
    case PlanLimitConfig_Feature.COMMUNITY_SUPPORT:
      return 70;
    case PlanLimitConfig_Feature.EMAIL_SUPPORT:
      return 71;
    case PlanLimitConfig_Feature.DEDICATED_SUPPORT_WITH_SLA:
      return 72;
    case PlanLimitConfig_Feature.UNRECOGNIZED:
    default:
      return -1;
  }
}

function createBaseGetSubscriptionRequest(): GetSubscriptionRequest {
  return {};
}

export const GetSubscriptionRequest: MessageFns<GetSubscriptionRequest> = {
  encode(_: GetSubscriptionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetSubscriptionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetSubscriptionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  toJSON(_: GetSubscriptionRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<GetSubscriptionRequest>): GetSubscriptionRequest {
    return GetSubscriptionRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<GetSubscriptionRequest>): GetSubscriptionRequest {
    const message = createBaseGetSubscriptionRequest();
    return message;
  },
};

function createBaseGetFeatureMatrixRequest(): GetFeatureMatrixRequest {
  return {};
}

export const GetFeatureMatrixRequest: MessageFns<GetFeatureMatrixRequest> = {
  encode(_: GetFeatureMatrixRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetFeatureMatrixRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetFeatureMatrixRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  toJSON(_: GetFeatureMatrixRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<GetFeatureMatrixRequest>): GetFeatureMatrixRequest {
    return GetFeatureMatrixRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<GetFeatureMatrixRequest>): GetFeatureMatrixRequest {
    const message = createBaseGetFeatureMatrixRequest();
    return message;
  },
};

function createBaseUpdateSubscriptionRequest(): UpdateSubscriptionRequest {
  return { patch: undefined };
}

export const UpdateSubscriptionRequest: MessageFns<UpdateSubscriptionRequest> = {
  encode(message: UpdateSubscriptionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.patch !== undefined) {
      PatchSubscription.encode(message.patch, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateSubscriptionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateSubscriptionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.patch = PatchSubscription.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  toJSON(message: UpdateSubscriptionRequest): unknown {
    const obj: any = {};
    if (message.patch !== undefined) {
      obj.patch = PatchSubscription.toJSON(message.patch);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateSubscriptionRequest>): UpdateSubscriptionRequest {
    return UpdateSubscriptionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateSubscriptionRequest>): UpdateSubscriptionRequest {
    const message = createBaseUpdateSubscriptionRequest();
    message.patch = (object.patch !== undefined && object.patch !== null)
      ? PatchSubscription.fromPartial(object.patch)
      : undefined;
    return message;
  },
};

function createBasePatchSubscription(): PatchSubscription {
  return { license: "" };
}

export const PatchSubscription: MessageFns<PatchSubscription> = {
  encode(message: PatchSubscription, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.license !== "") {
      writer.uint32(10).string(message.license);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PatchSubscription {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePatchSubscription();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.license = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  toJSON(message: PatchSubscription): unknown {
    const obj: any = {};
    if (message.license !== "") {
      obj.license = message.license;
    }
    return obj;
  },

  create(base?: DeepPartial<PatchSubscription>): PatchSubscription {
    return PatchSubscription.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PatchSubscription>): PatchSubscription {
    const message = createBasePatchSubscription();
    message.license = object.license ?? "";
    return message;
  },
};

function createBaseSubscription(): Subscription {
  return {
    seatCount: 0,
    instanceCount: 0,
    expiresTime: undefined,
    startedTime: undefined,
    plan: PlanType.PLAN_TYPE_UNSPECIFIED,
    trialing: false,
    orgId: "",
    orgName: "",
  };
}

export const Subscription: MessageFns<Subscription> = {
  encode(message: Subscription, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.seatCount !== 0) {
      writer.uint32(8).int32(message.seatCount);
    }
    if (message.instanceCount !== 0) {
      writer.uint32(16).int32(message.instanceCount);
    }
    if (message.expiresTime !== undefined) {
      Timestamp.encode(message.expiresTime, writer.uint32(26).fork()).join();
    }
    if (message.startedTime !== undefined) {
      Timestamp.encode(message.startedTime, writer.uint32(34).fork()).join();
    }
    if (message.plan !== PlanType.PLAN_TYPE_UNSPECIFIED) {
      writer.uint32(40).int32(planTypeToNumber(message.plan));
    }
    if (message.trialing !== false) {
      writer.uint32(48).bool(message.trialing);
    }
    if (message.orgId !== "") {
      writer.uint32(58).string(message.orgId);
    }
    if (message.orgName !== "") {
      writer.uint32(66).string(message.orgName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Subscription {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSubscription();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.seatCount = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.instanceCount = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.expiresTime = Timestamp.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.startedTime = Timestamp.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.plan = planTypeFromJSON(reader.int32());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.trialing = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.orgId = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.orgName = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  toJSON(message: Subscription): unknown {
    const obj: any = {};
    if (message.seatCount !== 0) {
      obj.seatCount = Math.round(message.seatCount);
    }
    if (message.instanceCount !== 0) {
      obj.instanceCount = Math.round(message.instanceCount);
    }
    if (message.expiresTime !== undefined) {
      obj.expiresTime = fromTimestamp(message.expiresTime).toISOString();
    }
    if (message.startedTime !== undefined) {
      obj.startedTime = fromTimestamp(message.startedTime).toISOString();
    }
    if (message.plan !== PlanType.PLAN_TYPE_UNSPECIFIED) {
      obj.plan = planTypeToJSON(message.plan);
    }
    if (message.trialing !== false) {
      obj.trialing = message.trialing;
    }
    if (message.orgId !== "") {
      obj.orgId = message.orgId;
    }
    if (message.orgName !== "") {
      obj.orgName = message.orgName;
    }
    return obj;
  },

  create(base?: DeepPartial<Subscription>): Subscription {
    return Subscription.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Subscription>): Subscription {
    const message = createBaseSubscription();
    message.seatCount = object.seatCount ?? 0;
    message.instanceCount = object.instanceCount ?? 0;
    message.expiresTime = (object.expiresTime !== undefined && object.expiresTime !== null)
      ? Timestamp.fromPartial(object.expiresTime)
      : undefined;
    message.startedTime = (object.startedTime !== undefined && object.startedTime !== null)
      ? Timestamp.fromPartial(object.startedTime)
      : undefined;
    message.plan = object.plan ?? PlanType.PLAN_TYPE_UNSPECIFIED;
    message.trialing = object.trialing ?? false;
    message.orgId = object.orgId ?? "";
    message.orgName = object.orgName ?? "";
    return message;
  },
};

function createBaseFeatureMatrix(): FeatureMatrix {
  return { features: [] };
}

export const FeatureMatrix: MessageFns<FeatureMatrix> = {
  encode(message: FeatureMatrix, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.features) {
      Feature.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FeatureMatrix {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeatureMatrix();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.features.push(Feature.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  toJSON(message: FeatureMatrix): unknown {
    const obj: any = {};
    if (message.features?.length) {
      obj.features = message.features.map((e) => Feature.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<FeatureMatrix>): FeatureMatrix {
    return FeatureMatrix.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FeatureMatrix>): FeatureMatrix {
    const message = createBaseFeatureMatrix();
    message.features = object.features?.map((e) => Feature.fromPartial(e)) || [];
    return message;
  },
};

function createBaseFeature(): Feature {
  return { name: "", matrix: {} };
}

export const Feature: MessageFns<Feature> = {
  encode(message: Feature, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    Object.entries(message.matrix).forEach(([key, value]) => {
      Feature_MatrixEntry.encode({ key: key as any, value }, writer.uint32(18).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Feature {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeature();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          const entry2 = Feature_MatrixEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.matrix[entry2.key] = entry2.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  toJSON(message: Feature): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.matrix) {
      const entries = Object.entries(message.matrix);
      if (entries.length > 0) {
        obj.matrix = {};
        entries.forEach(([k, v]) => {
          obj.matrix[k] = v;
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<Feature>): Feature {
    return Feature.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Feature>): Feature {
    const message = createBaseFeature();
    message.name = object.name ?? "";
    message.matrix = Object.entries(object.matrix ?? {}).reduce<{ [key: string]: boolean }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.Boolean(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseFeature_MatrixEntry(): Feature_MatrixEntry {
  return { key: "", value: false };
}

export const Feature_MatrixEntry: MessageFns<Feature_MatrixEntry> = {
  encode(message: Feature_MatrixEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== false) {
      writer.uint32(16).bool(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Feature_MatrixEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFeature_MatrixEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.value = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  toJSON(message: Feature_MatrixEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== false) {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<Feature_MatrixEntry>): Feature_MatrixEntry {
    return Feature_MatrixEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Feature_MatrixEntry>): Feature_MatrixEntry {
    const message = createBaseFeature_MatrixEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? false;
    return message;
  },
};

function createBasePlanConfig(): PlanConfig {
  return { plans: [] };
}

export const PlanConfig: MessageFns<PlanConfig> = {
  encode(message: PlanConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.plans) {
      PlanLimitConfig.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlanConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlanConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.plans.push(PlanLimitConfig.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  toJSON(message: PlanConfig): unknown {
    const obj: any = {};
    if (message.plans?.length) {
      obj.plans = message.plans.map((e) => PlanLimitConfig.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<PlanConfig>): PlanConfig {
    return PlanConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PlanConfig>): PlanConfig {
    const message = createBasePlanConfig();
    message.plans = object.plans?.map((e) => PlanLimitConfig.fromPartial(e)) || [];
    return message;
  },
};

function createBasePlanLimitConfig(): PlanLimitConfig {
  return { type: PlanType.PLAN_TYPE_UNSPECIFIED, maximumInstanceCount: 0, maximumSeatCount: 0, features: [] };
}

export const PlanLimitConfig: MessageFns<PlanLimitConfig> = {
  encode(message: PlanLimitConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== PlanType.PLAN_TYPE_UNSPECIFIED) {
      writer.uint32(8).int32(planTypeToNumber(message.type));
    }
    if (message.maximumInstanceCount !== 0) {
      writer.uint32(16).int32(message.maximumInstanceCount);
    }
    if (message.maximumSeatCount !== 0) {
      writer.uint32(24).int32(message.maximumSeatCount);
    }
    writer.uint32(34).fork();
    for (const v of message.features) {
      writer.int32(planLimitConfig_FeatureToNumber(v));
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlanLimitConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlanLimitConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = planTypeFromJSON(reader.int32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.maximumInstanceCount = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.maximumSeatCount = reader.int32();
          continue;
        }
        case 4: {
          if (tag === 32) {
            message.features.push(planLimitConfig_FeatureFromJSON(reader.int32()));

            continue;
          }

          if (tag === 34) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.features.push(planLimitConfig_FeatureFromJSON(reader.int32()));
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  toJSON(message: PlanLimitConfig): unknown {
    const obj: any = {};
    if (message.type !== PlanType.PLAN_TYPE_UNSPECIFIED) {
      obj.type = planTypeToJSON(message.type);
    }
    if (message.maximumInstanceCount !== 0) {
      obj.maximumInstanceCount = Math.round(message.maximumInstanceCount);
    }
    if (message.maximumSeatCount !== 0) {
      obj.maximumSeatCount = Math.round(message.maximumSeatCount);
    }
    if (message.features?.length) {
      obj.features = message.features.map((e) => planLimitConfig_FeatureToJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<PlanLimitConfig>): PlanLimitConfig {
    return PlanLimitConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PlanLimitConfig>): PlanLimitConfig {
    const message = createBasePlanLimitConfig();
    message.type = object.type ?? PlanType.PLAN_TYPE_UNSPECIFIED;
    message.maximumInstanceCount = object.maximumInstanceCount ?? 0;
    message.maximumSeatCount = object.maximumSeatCount ?? 0;
    message.features = object.features?.map((e) => e) || [];
    return message;
  },
};

export type SubscriptionServiceDefinition = typeof SubscriptionServiceDefinition;
export const SubscriptionServiceDefinition = {
  name: "SubscriptionService",
  fullName: "bytebase.v1.SubscriptionService",
  methods: {
    getSubscription: {
      name: "GetSubscription",
      requestType: GetSubscriptionRequest,
      requestStream: false,
      responseType: Subscription,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [new Uint8Array([0])],
          800000: [new Uint8Array([1])],
          578365826: [
            new Uint8Array([18, 18, 16, 47, 118, 49, 47, 115, 117, 98, 115, 99, 114, 105, 112, 116, 105, 111, 110]),
          ],
        },
      },
    },
    getFeatureMatrix: {
      name: "GetFeatureMatrix",
      requestType: GetFeatureMatrixRequest,
      requestStream: false,
      responseType: FeatureMatrix,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [new Uint8Array([0])],
          800000: [new Uint8Array([1])],
          578365826: [new Uint8Array([13, 18, 11, 47, 118, 49, 47, 102, 101, 97, 116, 117, 114, 101])],
        },
      },
    },
    updateSubscription: {
      name: "UpdateSubscription",
      requestType: UpdateSubscriptionRequest,
      requestStream: false,
      responseType: Subscription,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [new Uint8Array([5, 112, 97, 116, 99, 104])],
          800010: [new Uint8Array([15, 98, 98, 46, 115, 101, 116, 116, 105, 110, 103, 115, 46, 115, 101, 116])],
          800016: [new Uint8Array([1])],
          578365826: [
            new Uint8Array([
              25,
              58,
              5,
              112,
              97,
              116,
              99,
              104,
              50,
              16,
              47,
              118,
              49,
              47,
              115,
              117,
              98,
              115,
              99,
              114,
              105,
              112,
              116,
              105,
              111,
              110,
            ]),
          ],
        },
      },
    },
  },
} as const;

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
