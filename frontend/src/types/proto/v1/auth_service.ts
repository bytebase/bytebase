// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: v1/auth_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Empty } from "../google/protobuf/empty";
import { User } from "./user_service";

export const protobufPackage = "bytebase.v1";

export interface LoginRequest {
  email: string;
  password: string;
  /** If web is set, we will set access token, refresh token, and user to the cookie. */
  web: boolean;
  /**
   * The name of the identity provider.
   * Format: idps/{idp}
   */
  idpName: string;
  /** The idp_context is using to get the user information from identity provider. */
  idpContext:
    | IdentityProviderContext
    | undefined;
  /** The otp_code is used to verify the user's identity by MFA. */
  otpCode?:
    | string
    | undefined;
  /** The recovery_code is used to recovery the user's identity with MFA. */
  recoveryCode?:
    | string
    | undefined;
  /** The mfa_temp_token is used to verify the user's identity by MFA. */
  mfaTempToken?: string | undefined;
}

export interface IdentityProviderContext {
  oauth2Context?: OAuth2IdentityProviderContext | undefined;
  oidcContext?: OIDCIdentityProviderContext | undefined;
}

export interface OAuth2IdentityProviderContext {
  code: string;
}

export interface OIDCIdentityProviderContext {
}

export interface LoginResponse {
  token: string;
  mfaTempToken?: string | undefined;
  requireResetPassword: boolean;
  /** The user of successful login. */
  user: User | undefined;
}

export interface LogoutRequest {
}

function createBaseLoginRequest(): LoginRequest {
  return {
    email: "",
    password: "",
    web: false,
    idpName: "",
    idpContext: undefined,
    otpCode: undefined,
    recoveryCode: undefined,
    mfaTempToken: undefined,
  };
}

export const LoginRequest: MessageFns<LoginRequest> = {
  encode(message: LoginRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.email !== "") {
      writer.uint32(10).string(message.email);
    }
    if (message.password !== "") {
      writer.uint32(18).string(message.password);
    }
    if (message.web !== false) {
      writer.uint32(24).bool(message.web);
    }
    if (message.idpName !== "") {
      writer.uint32(34).string(message.idpName);
    }
    if (message.idpContext !== undefined) {
      IdentityProviderContext.encode(message.idpContext, writer.uint32(42).fork()).join();
    }
    if (message.otpCode !== undefined) {
      writer.uint32(50).string(message.otpCode);
    }
    if (message.recoveryCode !== undefined) {
      writer.uint32(58).string(message.recoveryCode);
    }
    if (message.mfaTempToken !== undefined) {
      writer.uint32(66).string(message.mfaTempToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LoginRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLoginRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.email = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.password = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.web = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.idpName = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.idpContext = IdentityProviderContext.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.otpCode = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.recoveryCode = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.mfaTempToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LoginRequest {
    return {
      email: isSet(object.email) ? globalThis.String(object.email) : "",
      password: isSet(object.password) ? globalThis.String(object.password) : "",
      web: isSet(object.web) ? globalThis.Boolean(object.web) : false,
      idpName: isSet(object.idpName) ? globalThis.String(object.idpName) : "",
      idpContext: isSet(object.idpContext) ? IdentityProviderContext.fromJSON(object.idpContext) : undefined,
      otpCode: isSet(object.otpCode) ? globalThis.String(object.otpCode) : undefined,
      recoveryCode: isSet(object.recoveryCode) ? globalThis.String(object.recoveryCode) : undefined,
      mfaTempToken: isSet(object.mfaTempToken) ? globalThis.String(object.mfaTempToken) : undefined,
    };
  },

  toJSON(message: LoginRequest): unknown {
    const obj: any = {};
    if (message.email !== "") {
      obj.email = message.email;
    }
    if (message.password !== "") {
      obj.password = message.password;
    }
    if (message.web !== false) {
      obj.web = message.web;
    }
    if (message.idpName !== "") {
      obj.idpName = message.idpName;
    }
    if (message.idpContext !== undefined) {
      obj.idpContext = IdentityProviderContext.toJSON(message.idpContext);
    }
    if (message.otpCode !== undefined) {
      obj.otpCode = message.otpCode;
    }
    if (message.recoveryCode !== undefined) {
      obj.recoveryCode = message.recoveryCode;
    }
    if (message.mfaTempToken !== undefined) {
      obj.mfaTempToken = message.mfaTempToken;
    }
    return obj;
  },

  create(base?: DeepPartial<LoginRequest>): LoginRequest {
    return LoginRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LoginRequest>): LoginRequest {
    const message = createBaseLoginRequest();
    message.email = object.email ?? "";
    message.password = object.password ?? "";
    message.web = object.web ?? false;
    message.idpName = object.idpName ?? "";
    message.idpContext = (object.idpContext !== undefined && object.idpContext !== null)
      ? IdentityProviderContext.fromPartial(object.idpContext)
      : undefined;
    message.otpCode = object.otpCode ?? undefined;
    message.recoveryCode = object.recoveryCode ?? undefined;
    message.mfaTempToken = object.mfaTempToken ?? undefined;
    return message;
  },
};

function createBaseIdentityProviderContext(): IdentityProviderContext {
  return { oauth2Context: undefined, oidcContext: undefined };
}

export const IdentityProviderContext: MessageFns<IdentityProviderContext> = {
  encode(message: IdentityProviderContext, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.oauth2Context !== undefined) {
      OAuth2IdentityProviderContext.encode(message.oauth2Context, writer.uint32(10).fork()).join();
    }
    if (message.oidcContext !== undefined) {
      OIDCIdentityProviderContext.encode(message.oidcContext, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IdentityProviderContext {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIdentityProviderContext();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.oauth2Context = OAuth2IdentityProviderContext.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.oidcContext = OIDCIdentityProviderContext.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IdentityProviderContext {
    return {
      oauth2Context: isSet(object.oauth2Context)
        ? OAuth2IdentityProviderContext.fromJSON(object.oauth2Context)
        : undefined,
      oidcContext: isSet(object.oidcContext) ? OIDCIdentityProviderContext.fromJSON(object.oidcContext) : undefined,
    };
  },

  toJSON(message: IdentityProviderContext): unknown {
    const obj: any = {};
    if (message.oauth2Context !== undefined) {
      obj.oauth2Context = OAuth2IdentityProviderContext.toJSON(message.oauth2Context);
    }
    if (message.oidcContext !== undefined) {
      obj.oidcContext = OIDCIdentityProviderContext.toJSON(message.oidcContext);
    }
    return obj;
  },

  create(base?: DeepPartial<IdentityProviderContext>): IdentityProviderContext {
    return IdentityProviderContext.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<IdentityProviderContext>): IdentityProviderContext {
    const message = createBaseIdentityProviderContext();
    message.oauth2Context = (object.oauth2Context !== undefined && object.oauth2Context !== null)
      ? OAuth2IdentityProviderContext.fromPartial(object.oauth2Context)
      : undefined;
    message.oidcContext = (object.oidcContext !== undefined && object.oidcContext !== null)
      ? OIDCIdentityProviderContext.fromPartial(object.oidcContext)
      : undefined;
    return message;
  },
};

function createBaseOAuth2IdentityProviderContext(): OAuth2IdentityProviderContext {
  return { code: "" };
}

export const OAuth2IdentityProviderContext: MessageFns<OAuth2IdentityProviderContext> = {
  encode(message: OAuth2IdentityProviderContext, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== "") {
      writer.uint32(10).string(message.code);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OAuth2IdentityProviderContext {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOAuth2IdentityProviderContext();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.code = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OAuth2IdentityProviderContext {
    return { code: isSet(object.code) ? globalThis.String(object.code) : "" };
  },

  toJSON(message: OAuth2IdentityProviderContext): unknown {
    const obj: any = {};
    if (message.code !== "") {
      obj.code = message.code;
    }
    return obj;
  },

  create(base?: DeepPartial<OAuth2IdentityProviderContext>): OAuth2IdentityProviderContext {
    return OAuth2IdentityProviderContext.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<OAuth2IdentityProviderContext>): OAuth2IdentityProviderContext {
    const message = createBaseOAuth2IdentityProviderContext();
    message.code = object.code ?? "";
    return message;
  },
};

function createBaseOIDCIdentityProviderContext(): OIDCIdentityProviderContext {
  return {};
}

export const OIDCIdentityProviderContext: MessageFns<OIDCIdentityProviderContext> = {
  encode(_: OIDCIdentityProviderContext, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OIDCIdentityProviderContext {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOIDCIdentityProviderContext();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): OIDCIdentityProviderContext {
    return {};
  },

  toJSON(_: OIDCIdentityProviderContext): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<OIDCIdentityProviderContext>): OIDCIdentityProviderContext {
    return OIDCIdentityProviderContext.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<OIDCIdentityProviderContext>): OIDCIdentityProviderContext {
    const message = createBaseOIDCIdentityProviderContext();
    return message;
  },
};

function createBaseLoginResponse(): LoginResponse {
  return { token: "", mfaTempToken: undefined, requireResetPassword: false, user: undefined };
}

export const LoginResponse: MessageFns<LoginResponse> = {
  encode(message: LoginResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.token !== "") {
      writer.uint32(10).string(message.token);
    }
    if (message.mfaTempToken !== undefined) {
      writer.uint32(18).string(message.mfaTempToken);
    }
    if (message.requireResetPassword !== false) {
      writer.uint32(24).bool(message.requireResetPassword);
    }
    if (message.user !== undefined) {
      User.encode(message.user, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LoginResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLoginResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.token = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.mfaTempToken = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.requireResetPassword = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.user = User.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LoginResponse {
    return {
      token: isSet(object.token) ? globalThis.String(object.token) : "",
      mfaTempToken: isSet(object.mfaTempToken) ? globalThis.String(object.mfaTempToken) : undefined,
      requireResetPassword: isSet(object.requireResetPassword)
        ? globalThis.Boolean(object.requireResetPassword)
        : false,
      user: isSet(object.user) ? User.fromJSON(object.user) : undefined,
    };
  },

  toJSON(message: LoginResponse): unknown {
    const obj: any = {};
    if (message.token !== "") {
      obj.token = message.token;
    }
    if (message.mfaTempToken !== undefined) {
      obj.mfaTempToken = message.mfaTempToken;
    }
    if (message.requireResetPassword !== false) {
      obj.requireResetPassword = message.requireResetPassword;
    }
    if (message.user !== undefined) {
      obj.user = User.toJSON(message.user);
    }
    return obj;
  },

  create(base?: DeepPartial<LoginResponse>): LoginResponse {
    return LoginResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LoginResponse>): LoginResponse {
    const message = createBaseLoginResponse();
    message.token = object.token ?? "";
    message.mfaTempToken = object.mfaTempToken ?? undefined;
    message.requireResetPassword = object.requireResetPassword ?? false;
    message.user = (object.user !== undefined && object.user !== null) ? User.fromPartial(object.user) : undefined;
    return message;
  },
};

function createBaseLogoutRequest(): LogoutRequest {
  return {};
}

export const LogoutRequest: MessageFns<LogoutRequest> = {
  encode(_: LogoutRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LogoutRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLogoutRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): LogoutRequest {
    return {};
  },

  toJSON(_: LogoutRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<LogoutRequest>): LogoutRequest {
    return LogoutRequest.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<LogoutRequest>): LogoutRequest {
    const message = createBaseLogoutRequest();
    return message;
  },
};

export type AuthServiceDefinition = typeof AuthServiceDefinition;
export const AuthServiceDefinition = {
  name: "AuthService",
  fullName: "bytebase.v1.AuthService",
  methods: {
    login: {
      name: "Login",
      requestType: LoginRequest,
      requestStream: false,
      responseType: LoginResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          800000: [new Uint8Array([1])],
          800024: [new Uint8Array([1])],
          578365826: [
            new Uint8Array([19, 58, 1, 42, 34, 14, 47, 118, 49, 47, 97, 117, 116, 104, 47, 108, 111, 103, 105, 110]),
          ],
        },
      },
    },
    logout: {
      name: "Logout",
      requestType: LogoutRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          800000: [new Uint8Array([1])],
          800024: [new Uint8Array([1])],
          578365826: [
            new Uint8Array([
              20,
              58,
              1,
              42,
              34,
              15,
              47,
              118,
              49,
              47,
              97,
              117,
              116,
              104,
              47,
              108,
              111,
              103,
              111,
              117,
              116,
            ]),
          ],
        },
      },
    },
  },
} as const;

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
