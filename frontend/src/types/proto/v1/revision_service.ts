// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: v1/revision_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Empty } from "../google/protobuf/empty";
import { Timestamp } from "../google/protobuf/timestamp";

export const protobufPackage = "bytebase.v1";

export interface ListRevisionsRequest {
  /**
   * The parent of the revisions.
   * Format: instances/{instance}/databases/{database}
   */
  parent: string;
  /**
   * The maximum number of revisions to return. The service may return fewer
   * than this value. If unspecified, at most 10 revisions will be returned. The
   * maximum value is 1000; values above 1000 will be coerced to 1000.
   */
  pageSize: number;
  /**
   * A page token, received from a previous `ListRevisions` call.
   * Provide this to retrieve the subsequent page.
   *
   * When paginating, all other parameters provided to `ListRevisions` must
   * match the call that provided the page token.
   */
  pageToken: string;
  showDeleted: boolean;
}

export interface ListRevisionsResponse {
  revisions: Revision[];
  /**
   * A token, which can be sent as `page_token` to retrieve the next page.
   * If this field is omitted, there are no subsequent pages.
   */
  nextPageToken: string;
}

export interface CreateRevisionRequest {
  /** Format: instances/{instance}/databases/{database} */
  parent: string;
  /** The revision to create. */
  revision: Revision | undefined;
}

export interface BatchCreateRevisionsRequest {
  /**
   * The parent resource shared by all revisions being created.
   * Format: instances/{instance}/databases/{database}
   */
  parent: string;
  /**
   * The request message specifying the revisions to create.
   * A maximum of 100 revisions can be created in a batch.
   */
  requests: CreateRevisionRequest[];
}

export interface BatchCreateRevisionsResponse {
  /** The created revisions. */
  revisions: Revision[];
}

export interface GetRevisionRequest {
  /**
   * The name of the revision.
   * Format: instances/{instance}/databases/{database}/revisions/{revision}
   */
  name: string;
}

export interface DeleteRevisionRequest {
  /**
   * The name of the revision to delete.
   * Format: instances/{instance}/databases/{database}/revisions/{revision}
   */
  name: string;
}

export interface Revision {
  /** Format: instances/{instance}/databases/{database}/revisions/{revision} */
  name: string;
  /**
   * Format: projects/{project}/releases/{release}
   * Can be empty.
   */
  release: string;
  createTime:
    | Timestamp
    | undefined;
  /**
   * Format: users/hello@world.com
   * Can be empty.
   */
  deleter: string;
  /** Can be empty. */
  deleteTime:
    | Timestamp
    | undefined;
  /**
   * Format: projects/{project}/releases/{release}/files/{id}
   * Can be empty.
   */
  file: string;
  version: string;
  /**
   * The sheet that holds the content.
   * Format: projects/{project}/sheets/{sheet}
   */
  sheet: string;
  /** The SHA256 hash value of the sheet. */
  sheetSha256: string;
  /** The statement is used for preview purpose. */
  statement: string;
  statementSize: Long;
  /**
   * The issue associated with the revision.
   * Can be empty.
   * Format: projects/{project}/issues/{issue}
   */
  issue: string;
  /**
   * The task run associated with the revision.
   * Can be empty.
   * Format:
   * projects/{project}/rollouts/{rollout}/stages/{stage}/tasks/{task}/taskRuns/{taskRun}
   */
  taskRun: string;
}

function createBaseListRevisionsRequest(): ListRevisionsRequest {
  return { parent: "", pageSize: 0, pageToken: "", showDeleted: false };
}

export const ListRevisionsRequest: MessageFns<ListRevisionsRequest> = {
  encode(message: ListRevisionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    if (message.showDeleted !== false) {
      writer.uint32(32).bool(message.showDeleted);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListRevisionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListRevisionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.showDeleted = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListRevisionsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      pageSize: isSet(object.pageSize) ? globalThis.Number(object.pageSize) : 0,
      pageToken: isSet(object.pageToken) ? globalThis.String(object.pageToken) : "",
      showDeleted: isSet(object.showDeleted) ? globalThis.Boolean(object.showDeleted) : false,
    };
  },

  toJSON(message: ListRevisionsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.pageSize !== 0) {
      obj.pageSize = Math.round(message.pageSize);
    }
    if (message.pageToken !== "") {
      obj.pageToken = message.pageToken;
    }
    if (message.showDeleted !== false) {
      obj.showDeleted = message.showDeleted;
    }
    return obj;
  },

  create(base?: DeepPartial<ListRevisionsRequest>): ListRevisionsRequest {
    return ListRevisionsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListRevisionsRequest>): ListRevisionsRequest {
    const message = createBaseListRevisionsRequest();
    message.parent = object.parent ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    message.showDeleted = object.showDeleted ?? false;
    return message;
  },
};

function createBaseListRevisionsResponse(): ListRevisionsResponse {
  return { revisions: [], nextPageToken: "" };
}

export const ListRevisionsResponse: MessageFns<ListRevisionsResponse> = {
  encode(message: ListRevisionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.revisions) {
      Revision.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListRevisionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListRevisionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.revisions.push(Revision.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListRevisionsResponse {
    return {
      revisions: globalThis.Array.isArray(object?.revisions)
        ? object.revisions.map((e: any) => Revision.fromJSON(e))
        : [],
      nextPageToken: isSet(object.nextPageToken) ? globalThis.String(object.nextPageToken) : "",
    };
  },

  toJSON(message: ListRevisionsResponse): unknown {
    const obj: any = {};
    if (message.revisions?.length) {
      obj.revisions = message.revisions.map((e) => Revision.toJSON(e));
    }
    if (message.nextPageToken !== "") {
      obj.nextPageToken = message.nextPageToken;
    }
    return obj;
  },

  create(base?: DeepPartial<ListRevisionsResponse>): ListRevisionsResponse {
    return ListRevisionsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListRevisionsResponse>): ListRevisionsResponse {
    const message = createBaseListRevisionsResponse();
    message.revisions = object.revisions?.map((e) => Revision.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseCreateRevisionRequest(): CreateRevisionRequest {
  return { parent: "", revision: undefined };
}

export const CreateRevisionRequest: MessageFns<CreateRevisionRequest> = {
  encode(message: CreateRevisionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    if (message.revision !== undefined) {
      Revision.encode(message.revision, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateRevisionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateRevisionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.revision = Revision.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateRevisionRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      revision: isSet(object.revision) ? Revision.fromJSON(object.revision) : undefined,
    };
  },

  toJSON(message: CreateRevisionRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.revision !== undefined) {
      obj.revision = Revision.toJSON(message.revision);
    }
    return obj;
  },

  create(base?: DeepPartial<CreateRevisionRequest>): CreateRevisionRequest {
    return CreateRevisionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateRevisionRequest>): CreateRevisionRequest {
    const message = createBaseCreateRevisionRequest();
    message.parent = object.parent ?? "";
    message.revision = (object.revision !== undefined && object.revision !== null)
      ? Revision.fromPartial(object.revision)
      : undefined;
    return message;
  },
};

function createBaseBatchCreateRevisionsRequest(): BatchCreateRevisionsRequest {
  return { parent: "", requests: [] };
}

export const BatchCreateRevisionsRequest: MessageFns<BatchCreateRevisionsRequest> = {
  encode(message: BatchCreateRevisionsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.parent !== "") {
      writer.uint32(10).string(message.parent);
    }
    for (const v of message.requests) {
      CreateRevisionRequest.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchCreateRevisionsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchCreateRevisionsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.parent = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.requests.push(CreateRevisionRequest.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchCreateRevisionsRequest {
    return {
      parent: isSet(object.parent) ? globalThis.String(object.parent) : "",
      requests: globalThis.Array.isArray(object?.requests)
        ? object.requests.map((e: any) => CreateRevisionRequest.fromJSON(e))
        : [],
    };
  },

  toJSON(message: BatchCreateRevisionsRequest): unknown {
    const obj: any = {};
    if (message.parent !== "") {
      obj.parent = message.parent;
    }
    if (message.requests?.length) {
      obj.requests = message.requests.map((e) => CreateRevisionRequest.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<BatchCreateRevisionsRequest>): BatchCreateRevisionsRequest {
    return BatchCreateRevisionsRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BatchCreateRevisionsRequest>): BatchCreateRevisionsRequest {
    const message = createBaseBatchCreateRevisionsRequest();
    message.parent = object.parent ?? "";
    message.requests = object.requests?.map((e) => CreateRevisionRequest.fromPartial(e)) || [];
    return message;
  },
};

function createBaseBatchCreateRevisionsResponse(): BatchCreateRevisionsResponse {
  return { revisions: [] };
}

export const BatchCreateRevisionsResponse: MessageFns<BatchCreateRevisionsResponse> = {
  encode(message: BatchCreateRevisionsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.revisions) {
      Revision.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BatchCreateRevisionsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBatchCreateRevisionsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.revisions.push(Revision.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BatchCreateRevisionsResponse {
    return {
      revisions: globalThis.Array.isArray(object?.revisions)
        ? object.revisions.map((e: any) => Revision.fromJSON(e))
        : [],
    };
  },

  toJSON(message: BatchCreateRevisionsResponse): unknown {
    const obj: any = {};
    if (message.revisions?.length) {
      obj.revisions = message.revisions.map((e) => Revision.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<BatchCreateRevisionsResponse>): BatchCreateRevisionsResponse {
    return BatchCreateRevisionsResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<BatchCreateRevisionsResponse>): BatchCreateRevisionsResponse {
    const message = createBaseBatchCreateRevisionsResponse();
    message.revisions = object.revisions?.map((e) => Revision.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetRevisionRequest(): GetRevisionRequest {
  return { name: "" };
}

export const GetRevisionRequest: MessageFns<GetRevisionRequest> = {
  encode(message: GetRevisionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetRevisionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetRevisionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetRevisionRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetRevisionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetRevisionRequest>): GetRevisionRequest {
    return GetRevisionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetRevisionRequest>): GetRevisionRequest {
    const message = createBaseGetRevisionRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseDeleteRevisionRequest(): DeleteRevisionRequest {
  return { name: "" };
}

export const DeleteRevisionRequest: MessageFns<DeleteRevisionRequest> = {
  encode(message: DeleteRevisionRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteRevisionRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteRevisionRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteRevisionRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DeleteRevisionRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DeleteRevisionRequest>): DeleteRevisionRequest {
    return DeleteRevisionRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteRevisionRequest>): DeleteRevisionRequest {
    const message = createBaseDeleteRevisionRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseRevision(): Revision {
  return {
    name: "",
    release: "",
    createTime: undefined,
    deleter: "",
    deleteTime: undefined,
    file: "",
    version: "",
    sheet: "",
    sheetSha256: "",
    statement: "",
    statementSize: Long.ZERO,
    issue: "",
    taskRun: "",
  };
}

export const Revision: MessageFns<Revision> = {
  encode(message: Revision, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.release !== "") {
      writer.uint32(18).string(message.release);
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(message.createTime, writer.uint32(34).fork()).join();
    }
    if (message.deleter !== "") {
      writer.uint32(42).string(message.deleter);
    }
    if (message.deleteTime !== undefined) {
      Timestamp.encode(message.deleteTime, writer.uint32(50).fork()).join();
    }
    if (message.file !== "") {
      writer.uint32(58).string(message.file);
    }
    if (message.version !== "") {
      writer.uint32(66).string(message.version);
    }
    if (message.sheet !== "") {
      writer.uint32(74).string(message.sheet);
    }
    if (message.sheetSha256 !== "") {
      writer.uint32(82).string(message.sheetSha256);
    }
    if (message.statement !== "") {
      writer.uint32(90).string(message.statement);
    }
    if (!message.statementSize.equals(Long.ZERO)) {
      writer.uint32(96).int64(message.statementSize.toString());
    }
    if (message.issue !== "") {
      writer.uint32(106).string(message.issue);
    }
    if (message.taskRun !== "") {
      writer.uint32(114).string(message.taskRun);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Revision {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRevision();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.release = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.createTime = Timestamp.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.deleter = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.deleteTime = Timestamp.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.file = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.version = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.sheet = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.sheetSha256 = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.statement = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.statementSize = Long.fromString(reader.int64().toString());
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.issue = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.taskRun = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Revision {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      release: isSet(object.release) ? globalThis.String(object.release) : "",
      createTime: isSet(object.createTime) ? fromJsonTimestamp(object.createTime) : undefined,
      deleter: isSet(object.deleter) ? globalThis.String(object.deleter) : "",
      deleteTime: isSet(object.deleteTime) ? fromJsonTimestamp(object.deleteTime) : undefined,
      file: isSet(object.file) ? globalThis.String(object.file) : "",
      version: isSet(object.version) ? globalThis.String(object.version) : "",
      sheet: isSet(object.sheet) ? globalThis.String(object.sheet) : "",
      sheetSha256: isSet(object.sheetSha256) ? globalThis.String(object.sheetSha256) : "",
      statement: isSet(object.statement) ? globalThis.String(object.statement) : "",
      statementSize: isSet(object.statementSize) ? Long.fromValue(object.statementSize) : Long.ZERO,
      issue: isSet(object.issue) ? globalThis.String(object.issue) : "",
      taskRun: isSet(object.taskRun) ? globalThis.String(object.taskRun) : "",
    };
  },

  toJSON(message: Revision): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.release !== "") {
      obj.release = message.release;
    }
    if (message.createTime !== undefined) {
      obj.createTime = fromTimestamp(message.createTime).toISOString();
    }
    if (message.deleter !== "") {
      obj.deleter = message.deleter;
    }
    if (message.deleteTime !== undefined) {
      obj.deleteTime = fromTimestamp(message.deleteTime).toISOString();
    }
    if (message.file !== "") {
      obj.file = message.file;
    }
    if (message.version !== "") {
      obj.version = message.version;
    }
    if (message.sheet !== "") {
      obj.sheet = message.sheet;
    }
    if (message.sheetSha256 !== "") {
      obj.sheetSha256 = message.sheetSha256;
    }
    if (message.statement !== "") {
      obj.statement = message.statement;
    }
    if (!message.statementSize.equals(Long.ZERO)) {
      obj.statementSize = (message.statementSize || Long.ZERO).toString();
    }
    if (message.issue !== "") {
      obj.issue = message.issue;
    }
    if (message.taskRun !== "") {
      obj.taskRun = message.taskRun;
    }
    return obj;
  },

  create(base?: DeepPartial<Revision>): Revision {
    return Revision.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Revision>): Revision {
    const message = createBaseRevision();
    message.name = object.name ?? "";
    message.release = object.release ?? "";
    message.createTime = (object.createTime !== undefined && object.createTime !== null)
      ? Timestamp.fromPartial(object.createTime)
      : undefined;
    message.deleter = object.deleter ?? "";
    message.deleteTime = (object.deleteTime !== undefined && object.deleteTime !== null)
      ? Timestamp.fromPartial(object.deleteTime)
      : undefined;
    message.file = object.file ?? "";
    message.version = object.version ?? "";
    message.sheet = object.sheet ?? "";
    message.sheetSha256 = object.sheetSha256 ?? "";
    message.statement = object.statement ?? "";
    message.statementSize = (object.statementSize !== undefined && object.statementSize !== null)
      ? Long.fromValue(object.statementSize)
      : Long.ZERO;
    message.issue = object.issue ?? "";
    message.taskRun = object.taskRun ?? "";
    return message;
  },
};

export type RevisionServiceDefinition = typeof RevisionServiceDefinition;
export const RevisionServiceDefinition = {
  name: "RevisionService",
  fullName: "bytebase.v1.RevisionService",
  methods: {
    listRevisions: {
      name: "ListRevisions",
      requestType: ListRevisionsRequest,
      requestStream: false,
      responseType: ListRevisionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [new Uint8Array([6, 112, 97, 114, 101, 110, 116])],
          800010: [
            new Uint8Array([17, 98, 98, 46, 114, 101, 118, 105, 115, 105, 111, 110, 115, 46, 108, 105, 115, 116]),
          ],
          800016: [new Uint8Array([1])],
          578365826: [
            new Uint8Array([
              48,
              18,
              46,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              115,
              47,
              42,
              125,
              47,
              114,
              101,
              118,
              105,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    getRevision: {
      name: "GetRevision",
      requestType: GetRevisionRequest,
      requestStream: false,
      responseType: Revision,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [new Uint8Array([4, 110, 97, 109, 101])],
          800010: [new Uint8Array([16, 98, 98, 46, 114, 101, 118, 105, 115, 105, 111, 110, 115, 46, 103, 101, 116])],
          800016: [new Uint8Array([1])],
          578365826: [
            new Uint8Array([
              48,
              18,
              46,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              115,
              47,
              42,
              47,
              114,
              101,
              118,
              105,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
    createRevision: {
      name: "CreateRevision",
      requestType: CreateRevisionRequest,
      requestStream: false,
      responseType: Revision,
      responseStream: false,
      options: {
        _unknownFields: {
          800010: [
            new Uint8Array([
              19,
              98,
              98,
              46,
              114,
              101,
              118,
              105,
              115,
              105,
              111,
              110,
              115,
              46,
              99,
              114,
              101,
              97,
              116,
              101,
            ]),
          ],
          800016: [new Uint8Array([1])],
          578365826: [
            new Uint8Array([
              58,
              58,
              8,
              114,
              101,
              118,
              105,
              115,
              105,
              111,
              110,
              34,
              46,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              115,
              47,
              42,
              125,
              47,
              114,
              101,
              118,
              105,
              115,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    batchCreateRevisions: {
      name: "BatchCreateRevisions",
      requestType: BatchCreateRevisionsRequest,
      requestStream: false,
      responseType: BatchCreateRevisionsResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          800010: [
            new Uint8Array([
              19,
              98,
              98,
              46,
              114,
              101,
              118,
              105,
              115,
              105,
              111,
              110,
              115,
              46,
              99,
              114,
              101,
              97,
              116,
              101,
            ]),
          ],
          800016: [new Uint8Array([1])],
          578365826: [
            new Uint8Array([
              63,
              58,
              1,
              42,
              34,
              58,
              47,
              118,
              49,
              47,
              123,
              112,
              97,
              114,
              101,
              110,
              116,
              61,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              115,
              47,
              42,
              125,
              47,
              114,
              101,
              118,
              105,
              115,
              105,
              111,
              110,
              115,
              58,
              98,
              97,
              116,
              99,
              104,
              67,
              114,
              101,
              97,
              116,
              101,
            ]),
          ],
        },
      },
    },
    deleteRevision: {
      name: "DeleteRevision",
      requestType: DeleteRevisionRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [new Uint8Array([4, 110, 97, 109, 101])],
          800010: [
            new Uint8Array([
              19,
              98,
              98,
              46,
              114,
              101,
              118,
              105,
              115,
              105,
              111,
              110,
              115,
              46,
              100,
              101,
              108,
              101,
              116,
              101,
            ]),
          ],
          800016: [new Uint8Array([1])],
          578365826: [
            new Uint8Array([
              48,
              42,
              46,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              115,
              47,
              42,
              47,
              114,
              101,
              118,
              105,
              115,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Timestamp {
  if (o instanceof globalThis.Date) {
    return toTimestamp(o);
  } else if (typeof o === "string") {
    return toTimestamp(new globalThis.Date(o));
  } else {
    return Timestamp.fromJSON(o);
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
