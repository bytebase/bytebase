// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: v1/database_catalog_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { FieldMask } from "../google/protobuf/field_mask";

export const protobufPackage = "bytebase.v1";

export interface GetDatabaseCatalogRequest {
  /**
   * The name of the database catalog to retrieve.
   * Format: instances/{instance}/databases/{database}/catalog
   */
  name: string;
}

export interface UpdateDatabaseCatalogRequest {
  /**
   * The database catalog to update.
   *
   * The catalog's `name` field is used to identify the database catalog to update.
   * Format: instances/{instance}/databases/{database}/catalog
   */
  catalog:
    | DatabaseCatalog
    | undefined;
  /** The list of fields to update. */
  updateMask: string[] | undefined;
}

export interface DatabaseCatalog {
  /**
   * The name of the database catalog.
   * Format: instances/{instance}/databases/{database}/catalog
   */
  name: string;
}

function createBaseGetDatabaseCatalogRequest(): GetDatabaseCatalogRequest {
  return { name: "" };
}

export const GetDatabaseCatalogRequest: MessageFns<GetDatabaseCatalogRequest> = {
  encode(message: GetDatabaseCatalogRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetDatabaseCatalogRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetDatabaseCatalogRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetDatabaseCatalogRequest {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: GetDatabaseCatalogRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<GetDatabaseCatalogRequest>): GetDatabaseCatalogRequest {
    return GetDatabaseCatalogRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetDatabaseCatalogRequest>): GetDatabaseCatalogRequest {
    const message = createBaseGetDatabaseCatalogRequest();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseUpdateDatabaseCatalogRequest(): UpdateDatabaseCatalogRequest {
  return { catalog: undefined, updateMask: undefined };
}

export const UpdateDatabaseCatalogRequest: MessageFns<UpdateDatabaseCatalogRequest> = {
  encode(message: UpdateDatabaseCatalogRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.catalog !== undefined) {
      DatabaseCatalog.encode(message.catalog, writer.uint32(10).fork()).join();
    }
    if (message.updateMask !== undefined) {
      FieldMask.encode(FieldMask.wrap(message.updateMask), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateDatabaseCatalogRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateDatabaseCatalogRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.catalog = DatabaseCatalog.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.updateMask = FieldMask.unwrap(FieldMask.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateDatabaseCatalogRequest {
    return {
      catalog: isSet(object.catalog) ? DatabaseCatalog.fromJSON(object.catalog) : undefined,
      updateMask: isSet(object.updateMask) ? FieldMask.unwrap(FieldMask.fromJSON(object.updateMask)) : undefined,
    };
  },

  toJSON(message: UpdateDatabaseCatalogRequest): unknown {
    const obj: any = {};
    if (message.catalog !== undefined) {
      obj.catalog = DatabaseCatalog.toJSON(message.catalog);
    }
    if (message.updateMask !== undefined) {
      obj.updateMask = FieldMask.toJSON(FieldMask.wrap(message.updateMask));
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateDatabaseCatalogRequest>): UpdateDatabaseCatalogRequest {
    return UpdateDatabaseCatalogRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateDatabaseCatalogRequest>): UpdateDatabaseCatalogRequest {
    const message = createBaseUpdateDatabaseCatalogRequest();
    message.catalog = (object.catalog !== undefined && object.catalog !== null)
      ? DatabaseCatalog.fromPartial(object.catalog)
      : undefined;
    message.updateMask = object.updateMask ?? undefined;
    return message;
  },
};

function createBaseDatabaseCatalog(): DatabaseCatalog {
  return { name: "" };
}

export const DatabaseCatalog: MessageFns<DatabaseCatalog> = {
  encode(message: DatabaseCatalog, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DatabaseCatalog {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDatabaseCatalog();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DatabaseCatalog {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DatabaseCatalog): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DatabaseCatalog>): DatabaseCatalog {
    return DatabaseCatalog.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DatabaseCatalog>): DatabaseCatalog {
    const message = createBaseDatabaseCatalog();
    message.name = object.name ?? "";
    return message;
  },
};

export type DatabaseCatalogServiceDefinition = typeof DatabaseCatalogServiceDefinition;
export const DatabaseCatalogServiceDefinition = {
  name: "DatabaseCatalogService",
  fullName: "bytebase.v1.DatabaseCatalogService",
  methods: {
    getDatabaseCatalog: {
      name: "GetDatabaseCatalog",
      requestType: GetDatabaseCatalogRequest,
      requestStream: false,
      responseType: DatabaseCatalog,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [new Uint8Array([4, 110, 97, 109, 101])],
          800010: [
            new Uint8Array([
              23,
              98,
              98,
              46,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              67,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              46,
              103,
              101,
              116,
            ]),
          ],
          800016: [new Uint8Array([1])],
          578365826: [
            new Uint8Array([
              44,
              18,
              42,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              125,
            ]),
          ],
        },
      },
    },
    updateDatabaseCatalog: {
      name: "UpdateDatabaseCatalog",
      requestType: UpdateDatabaseCatalogRequest,
      requestStream: false,
      responseType: DatabaseCatalog,
      responseStream: false,
      options: {
        _unknownFields: {
          8410: [
            new Uint8Array([
              19,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              44,
              117,
              112,
              100,
              97,
              116,
              101,
              95,
              109,
              97,
              115,
              107,
            ]),
          ],
          800010: [
            new Uint8Array([
              26,
              98,
              98,
              46,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              67,
              97,
              116,
              97,
              108,
              111,
              103,
              115,
              46,
              117,
              112,
              100,
              97,
              116,
              101,
            ]),
          ],
          800016: [new Uint8Array([1])],
          800024: [new Uint8Array([1])],
          578365826: [
            new Uint8Array([
              61,
              58,
              7,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              50,
              50,
              47,
              118,
              49,
              47,
              123,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              46,
              110,
              97,
              109,
              101,
              61,
              105,
              110,
              115,
              116,
              97,
              110,
              99,
              101,
              115,
              47,
              42,
              47,
              100,
              97,
              116,
              97,
              98,
              97,
              115,
              101,
              115,
              47,
              42,
              47,
              99,
              97,
              116,
              97,
              108,
              111,
              103,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
