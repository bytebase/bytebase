// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: store/deployment_config.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";

export const protobufPackage = "bytebase.store";

export interface DeploymentConfig {
  schedule: Schedule | undefined;
}

/** Schedule is the message for deployment schedule. */
export interface Schedule {
  deployments: ScheduleDeployment[];
}

export interface ScheduleDeployment {
  /** The title of the deployment (stage) in a schedule. */
  title: string;
  id: string;
  spec: DeploymentSpec | undefined;
}

export interface DeploymentSpec {
  selector: LabelSelector | undefined;
}

export interface LabelSelector {
  /** match_expressions is a list of label selector requirements. The requirements are ANDed. */
  matchExpressions: LabelSelectorRequirement[];
}

export interface LabelSelectorRequirement {
  key: string;
  operator: LabelSelectorRequirement_OperatorType;
  /** Values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch. */
  values: string[];
}

export enum LabelSelectorRequirement_OperatorType {
  /** OPERATOR_TYPE_UNSPECIFIED - The operator is not specified. */
  OPERATOR_TYPE_UNSPECIFIED = "OPERATOR_TYPE_UNSPECIFIED",
  /** IN - The operator is "In". */
  IN = "IN",
  /** EXISTS - The operator is "Exists". */
  EXISTS = "EXISTS",
  /** NOT_IN - The operator is "Not In". */
  NOT_IN = "NOT_IN",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function labelSelectorRequirement_OperatorTypeFromJSON(object: any): LabelSelectorRequirement_OperatorType {
  switch (object) {
    case 0:
    case "OPERATOR_TYPE_UNSPECIFIED":
      return LabelSelectorRequirement_OperatorType.OPERATOR_TYPE_UNSPECIFIED;
    case 1:
    case "IN":
      return LabelSelectorRequirement_OperatorType.IN;
    case 2:
    case "EXISTS":
      return LabelSelectorRequirement_OperatorType.EXISTS;
    case 3:
    case "NOT_IN":
      return LabelSelectorRequirement_OperatorType.NOT_IN;
    case -1:
    case "UNRECOGNIZED":
    default:
      return LabelSelectorRequirement_OperatorType.UNRECOGNIZED;
  }
}

export function labelSelectorRequirement_OperatorTypeToJSON(object: LabelSelectorRequirement_OperatorType): string {
  switch (object) {
    case LabelSelectorRequirement_OperatorType.OPERATOR_TYPE_UNSPECIFIED:
      return "OPERATOR_TYPE_UNSPECIFIED";
    case LabelSelectorRequirement_OperatorType.IN:
      return "IN";
    case LabelSelectorRequirement_OperatorType.EXISTS:
      return "EXISTS";
    case LabelSelectorRequirement_OperatorType.NOT_IN:
      return "NOT_IN";
    case LabelSelectorRequirement_OperatorType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export function labelSelectorRequirement_OperatorTypeToNumber(object: LabelSelectorRequirement_OperatorType): number {
  switch (object) {
    case LabelSelectorRequirement_OperatorType.OPERATOR_TYPE_UNSPECIFIED:
      return 0;
    case LabelSelectorRequirement_OperatorType.IN:
      return 1;
    case LabelSelectorRequirement_OperatorType.EXISTS:
      return 2;
    case LabelSelectorRequirement_OperatorType.NOT_IN:
      return 3;
    case LabelSelectorRequirement_OperatorType.UNRECOGNIZED:
    default:
      return -1;
  }
}

function createBaseDeploymentConfig(): DeploymentConfig {
  return { schedule: undefined };
}

export const DeploymentConfig: MessageFns<DeploymentConfig> = {
  encode(message: DeploymentConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.schedule !== undefined) {
      Schedule.encode(message.schedule, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeploymentConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeploymentConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.schedule = Schedule.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeploymentConfig {
    return { schedule: isSet(object.schedule) ? Schedule.fromJSON(object.schedule) : undefined };
  },

  toJSON(message: DeploymentConfig): unknown {
    const obj: any = {};
    if (message.schedule !== undefined) {
      obj.schedule = Schedule.toJSON(message.schedule);
    }
    return obj;
  },

  create(base?: DeepPartial<DeploymentConfig>): DeploymentConfig {
    return DeploymentConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeploymentConfig>): DeploymentConfig {
    const message = createBaseDeploymentConfig();
    message.schedule = (object.schedule !== undefined && object.schedule !== null)
      ? Schedule.fromPartial(object.schedule)
      : undefined;
    return message;
  },
};

function createBaseSchedule(): Schedule {
  return { deployments: [] };
}

export const Schedule: MessageFns<Schedule> = {
  encode(message: Schedule, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.deployments) {
      ScheduleDeployment.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Schedule {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSchedule();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.deployments.push(ScheduleDeployment.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Schedule {
    return {
      deployments: globalThis.Array.isArray(object?.deployments)
        ? object.deployments.map((e: any) => ScheduleDeployment.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Schedule): unknown {
    const obj: any = {};
    if (message.deployments?.length) {
      obj.deployments = message.deployments.map((e) => ScheduleDeployment.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Schedule>): Schedule {
    return Schedule.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Schedule>): Schedule {
    const message = createBaseSchedule();
    message.deployments = object.deployments?.map((e) => ScheduleDeployment.fromPartial(e)) || [];
    return message;
  },
};

function createBaseScheduleDeployment(): ScheduleDeployment {
  return { title: "", id: "", spec: undefined };
}

export const ScheduleDeployment: MessageFns<ScheduleDeployment> = {
  encode(message: ScheduleDeployment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    if (message.spec !== undefined) {
      DeploymentSpec.encode(message.spec, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ScheduleDeployment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseScheduleDeployment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.spec = DeploymentSpec.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ScheduleDeployment {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      spec: isSet(object.spec) ? DeploymentSpec.fromJSON(object.spec) : undefined,
    };
  },

  toJSON(message: ScheduleDeployment): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.spec !== undefined) {
      obj.spec = DeploymentSpec.toJSON(message.spec);
    }
    return obj;
  },

  create(base?: DeepPartial<ScheduleDeployment>): ScheduleDeployment {
    return ScheduleDeployment.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ScheduleDeployment>): ScheduleDeployment {
    const message = createBaseScheduleDeployment();
    message.title = object.title ?? "";
    message.id = object.id ?? "";
    message.spec = (object.spec !== undefined && object.spec !== null)
      ? DeploymentSpec.fromPartial(object.spec)
      : undefined;
    return message;
  },
};

function createBaseDeploymentSpec(): DeploymentSpec {
  return { selector: undefined };
}

export const DeploymentSpec: MessageFns<DeploymentSpec> = {
  encode(message: DeploymentSpec, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.selector !== undefined) {
      LabelSelector.encode(message.selector, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeploymentSpec {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeploymentSpec();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.selector = LabelSelector.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeploymentSpec {
    return { selector: isSet(object.selector) ? LabelSelector.fromJSON(object.selector) : undefined };
  },

  toJSON(message: DeploymentSpec): unknown {
    const obj: any = {};
    if (message.selector !== undefined) {
      obj.selector = LabelSelector.toJSON(message.selector);
    }
    return obj;
  },

  create(base?: DeepPartial<DeploymentSpec>): DeploymentSpec {
    return DeploymentSpec.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeploymentSpec>): DeploymentSpec {
    const message = createBaseDeploymentSpec();
    message.selector = (object.selector !== undefined && object.selector !== null)
      ? LabelSelector.fromPartial(object.selector)
      : undefined;
    return message;
  },
};

function createBaseLabelSelector(): LabelSelector {
  return { matchExpressions: [] };
}

export const LabelSelector: MessageFns<LabelSelector> = {
  encode(message: LabelSelector, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.matchExpressions) {
      LabelSelectorRequirement.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LabelSelector {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLabelSelector();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.matchExpressions.push(LabelSelectorRequirement.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LabelSelector {
    return {
      matchExpressions: globalThis.Array.isArray(object?.matchExpressions)
        ? object.matchExpressions.map((e: any) => LabelSelectorRequirement.fromJSON(e))
        : [],
    };
  },

  toJSON(message: LabelSelector): unknown {
    const obj: any = {};
    if (message.matchExpressions?.length) {
      obj.matchExpressions = message.matchExpressions.map((e) => LabelSelectorRequirement.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<LabelSelector>): LabelSelector {
    return LabelSelector.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LabelSelector>): LabelSelector {
    const message = createBaseLabelSelector();
    message.matchExpressions = object.matchExpressions?.map((e) => LabelSelectorRequirement.fromPartial(e)) || [];
    return message;
  },
};

function createBaseLabelSelectorRequirement(): LabelSelectorRequirement {
  return { key: "", operator: LabelSelectorRequirement_OperatorType.OPERATOR_TYPE_UNSPECIFIED, values: [] };
}

export const LabelSelectorRequirement: MessageFns<LabelSelectorRequirement> = {
  encode(message: LabelSelectorRequirement, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.operator !== LabelSelectorRequirement_OperatorType.OPERATOR_TYPE_UNSPECIFIED) {
      writer.uint32(16).int32(labelSelectorRequirement_OperatorTypeToNumber(message.operator));
    }
    for (const v of message.values) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LabelSelectorRequirement {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLabelSelectorRequirement();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.operator = labelSelectorRequirement_OperatorTypeFromJSON(reader.int32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.values.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LabelSelectorRequirement {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      operator: isSet(object.operator)
        ? labelSelectorRequirement_OperatorTypeFromJSON(object.operator)
        : LabelSelectorRequirement_OperatorType.OPERATOR_TYPE_UNSPECIFIED,
      values: globalThis.Array.isArray(object?.values) ? object.values.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: LabelSelectorRequirement): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.operator !== LabelSelectorRequirement_OperatorType.OPERATOR_TYPE_UNSPECIFIED) {
      obj.operator = labelSelectorRequirement_OperatorTypeToJSON(message.operator);
    }
    if (message.values?.length) {
      obj.values = message.values;
    }
    return obj;
  },

  create(base?: DeepPartial<LabelSelectorRequirement>): LabelSelectorRequirement {
    return LabelSelectorRequirement.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LabelSelectorRequirement>): LabelSelectorRequirement {
    const message = createBaseLabelSelectorRequirement();
    message.key = object.key ?? "";
    message.operator = object.operator ?? LabelSelectorRequirement_OperatorType.OPERATOR_TYPE_UNSPECIFIED;
    message.values = object.values?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
