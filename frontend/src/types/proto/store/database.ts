// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: store/database.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Timestamp } from "../google/protobuf/timestamp";
import { StringValue } from "../google/protobuf/wrappers";
import { MaskingLevel, maskingLevelFromJSON, maskingLevelToJSON, maskingLevelToNumber } from "./common";

export const protobufPackage = "bytebase.store";

/** DatabaseMetadata is the metadata for databases. */
export interface DatabaseMetadata {
  labels: { [key: string]: string };
  lastSyncTime: Timestamp | undefined;
  backupAvailable: boolean;
}

export interface DatabaseMetadata_LabelsEntry {
  key: string;
  value: string;
}

/** DatabaseSchemaMetadata is the schema metadata for databases. */
export interface DatabaseSchemaMetadata {
  name: string;
  /** The schemas is the list of schemas in a database. */
  schemas: SchemaMetadata[];
  /** The character_set is the character set of a database. */
  characterSet: string;
  /** The collation is the collation of a database. */
  collation: string;
  /** The extensions is the list of extensions in a database. */
  extensions: ExtensionMetadata[];
  /** The database belongs to a datashare. */
  datashare: boolean;
  /** The service name of the database. It's the Oracle specific concept. */
  serviceName: string;
  linkedDatabases: LinkedDatabaseMetadata[];
  owner: string;
}

export interface LinkedDatabaseMetadata {
  name: string;
  username: string;
  host: string;
}

/**
 * SchemaMetadata is the metadata for schemas.
 * This is the concept of schema in Postgres, but it's a no-op for MySQL.
 */
export interface SchemaMetadata {
  /**
   * The name is the schema name.
   * It is an empty string for databases without such concept such as MySQL.
   */
  name: string;
  /** The tables is the list of tables in a schema. */
  tables: TableMetadata[];
  /** The external_tables is the list of external tables in a schema. */
  externalTables: ExternalTableMetadata[];
  /** The views is the list of views in a schema. */
  views: ViewMetadata[];
  /** The functions is the list of functions in a schema. */
  functions: FunctionMetadata[];
  /** The procedures is the list of procedures in a schema. */
  procedures: ProcedureMetadata[];
  /**
   * The streams is the list of streams in a schema, currently, only used for
   * Snowflake.
   */
  streams: StreamMetadata[];
  /**
   * The routines is the list of routines in a schema, currently, only used for
   * Snowflake.
   */
  tasks: TaskMetadata[];
  /** The materialized_views is the list of materialized views in a schema. */
  materializedViews: MaterializedViewMetadata[];
  /** The sequences is the list of sequences in a schema. */
  sequences: SequenceMetadata[];
  /** The packages is the list of packages in a schema. */
  packages: PackageMetadata[];
  owner: string;
  /**
   * The triggers is the list of triggers in a schema, triggers are sorted by
   * table_name, event, timing, action_order.
   */
  triggers: TriggerMetadata[];
  events: EventMetadata[];
  enumTypes: EnumTypeMetadata[];
}

export interface EnumTypeMetadata {
  /** The name of a type. */
  name: string;
  /** The enum values of a type. */
  values: string[];
}

export interface EventMetadata {
  /** The name of the event. */
  name: string;
  /** The schedule of the event. */
  definition: string;
  /** The time zone of the event. */
  timeZone: string;
  sqlMode: string;
  characterSetClient: string;
  collationConnection: string;
}

export interface SequenceMetadata {
  /** The name of a sequence. */
  name: string;
  /** The data type of a sequence. */
  dataType: string;
  /** The start value of a sequence. */
  start: string;
  /** The minimum value of a sequence. */
  minValue: string;
  /** The maximum value of a sequence. */
  maxValue: string;
  /** Increment value of a sequence. */
  increment: string;
  /** Cycle is whether the sequence cycles. */
  cycle: boolean;
  /** Cache size of a sequence. */
  cacheSize: string;
  /** Last value of a sequence. */
  lastValue: string;
  /** The owner table of the sequence. */
  ownerTable: string;
  /** The owner column of the sequence. */
  ownerColumn: string;
}

export interface TriggerMetadata {
  /** The name is the name of the trigger. */
  name: string;
  /** The schema name of the table/view that the trigger is created. */
  schemaName: string;
  /**
   * The table_name is the name of the table/view that the trigger is created
   * on.
   */
  tableName: string;
  /**
   * The event is the event of the trigger, such as INSERT, UPDATE, DELETE,
   * TRUNCATE.
   */
  event: string;
  /** The timing is the timing of the trigger, such as BEFORE, AFTER. */
  timing: string;
  /** The body is the body of the trigger. */
  body: string;
  sqlMode: string;
  characterSetClient: string;
  collationConnection: string;
  /** For Postgres, identifies whether the trigger fires once for each processed row or once for each statement (ROW or STATEMENT). */
  actionOrientation: string;
  /** For Postgres, the WHEN condition of the trigger. */
  condition: string;
}

export interface TaskMetadata {
  /** The name is the name of a task. */
  name: string;
  /**
   * The id is the snowflake-generated id of a task.
   * Example: 01ad32a0-1bb6-5e93-0000-000000000001
   */
  id: string;
  /** The owner of the task. */
  owner: string;
  /** The comment of the task. */
  comment: string;
  /** The warehouse of the task. */
  warehouse: string;
  /** The schedule interval of the task. */
  schedule: string;
  /** The predecessor tasks of the task. */
  predecessors: string[];
  /** The state of the task. */
  state: TaskMetadata_State;
  /** The condition of the task. */
  condition: string;
  /** The definition of the task. */
  definition: string;
}

export enum TaskMetadata_State {
  STATE_UNSPECIFIED = "STATE_UNSPECIFIED",
  STATE_STARTED = "STATE_STARTED",
  STATE_SUSPENDED = "STATE_SUSPENDED",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function taskMetadata_StateFromJSON(object: any): TaskMetadata_State {
  switch (object) {
    case 0:
    case "STATE_UNSPECIFIED":
      return TaskMetadata_State.STATE_UNSPECIFIED;
    case 1:
    case "STATE_STARTED":
      return TaskMetadata_State.STATE_STARTED;
    case 2:
    case "STATE_SUSPENDED":
      return TaskMetadata_State.STATE_SUSPENDED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TaskMetadata_State.UNRECOGNIZED;
  }
}

export function taskMetadata_StateToJSON(object: TaskMetadata_State): string {
  switch (object) {
    case TaskMetadata_State.STATE_UNSPECIFIED:
      return "STATE_UNSPECIFIED";
    case TaskMetadata_State.STATE_STARTED:
      return "STATE_STARTED";
    case TaskMetadata_State.STATE_SUSPENDED:
      return "STATE_SUSPENDED";
    case TaskMetadata_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export function taskMetadata_StateToNumber(object: TaskMetadata_State): number {
  switch (object) {
    case TaskMetadata_State.STATE_UNSPECIFIED:
      return 0;
    case TaskMetadata_State.STATE_STARTED:
      return 1;
    case TaskMetadata_State.STATE_SUSPENDED:
      return 2;
    case TaskMetadata_State.UNRECOGNIZED:
    default:
      return -1;
  }
}

export interface StreamMetadata {
  /** The name is the name of a stream. */
  name: string;
  /** The table_name is the name of the table/view that the stream is created on. */
  tableName: string;
  /** The owner of the stream. */
  owner: string;
  /** The comment of the stream. */
  comment: string;
  /** The type of the stream. */
  type: StreamMetadata_Type;
  /** Indicates whether the stream was last read before the `stale_after` time. */
  stale: boolean;
  /** The mode of the stream. */
  mode: StreamMetadata_Mode;
  /** The definition of the stream. */
  definition: string;
}

export enum StreamMetadata_Type {
  TYPE_UNSPECIFIED = "TYPE_UNSPECIFIED",
  TYPE_DELTA = "TYPE_DELTA",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function streamMetadata_TypeFromJSON(object: any): StreamMetadata_Type {
  switch (object) {
    case 0:
    case "TYPE_UNSPECIFIED":
      return StreamMetadata_Type.TYPE_UNSPECIFIED;
    case 1:
    case "TYPE_DELTA":
      return StreamMetadata_Type.TYPE_DELTA;
    case -1:
    case "UNRECOGNIZED":
    default:
      return StreamMetadata_Type.UNRECOGNIZED;
  }
}

export function streamMetadata_TypeToJSON(object: StreamMetadata_Type): string {
  switch (object) {
    case StreamMetadata_Type.TYPE_UNSPECIFIED:
      return "TYPE_UNSPECIFIED";
    case StreamMetadata_Type.TYPE_DELTA:
      return "TYPE_DELTA";
    case StreamMetadata_Type.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export function streamMetadata_TypeToNumber(object: StreamMetadata_Type): number {
  switch (object) {
    case StreamMetadata_Type.TYPE_UNSPECIFIED:
      return 0;
    case StreamMetadata_Type.TYPE_DELTA:
      return 1;
    case StreamMetadata_Type.UNRECOGNIZED:
    default:
      return -1;
  }
}

export enum StreamMetadata_Mode {
  MODE_UNSPECIFIED = "MODE_UNSPECIFIED",
  MODE_DEFAULT = "MODE_DEFAULT",
  MODE_APPEND_ONLY = "MODE_APPEND_ONLY",
  MODE_INSERT_ONLY = "MODE_INSERT_ONLY",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function streamMetadata_ModeFromJSON(object: any): StreamMetadata_Mode {
  switch (object) {
    case 0:
    case "MODE_UNSPECIFIED":
      return StreamMetadata_Mode.MODE_UNSPECIFIED;
    case 1:
    case "MODE_DEFAULT":
      return StreamMetadata_Mode.MODE_DEFAULT;
    case 2:
    case "MODE_APPEND_ONLY":
      return StreamMetadata_Mode.MODE_APPEND_ONLY;
    case 3:
    case "MODE_INSERT_ONLY":
      return StreamMetadata_Mode.MODE_INSERT_ONLY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return StreamMetadata_Mode.UNRECOGNIZED;
  }
}

export function streamMetadata_ModeToJSON(object: StreamMetadata_Mode): string {
  switch (object) {
    case StreamMetadata_Mode.MODE_UNSPECIFIED:
      return "MODE_UNSPECIFIED";
    case StreamMetadata_Mode.MODE_DEFAULT:
      return "MODE_DEFAULT";
    case StreamMetadata_Mode.MODE_APPEND_ONLY:
      return "MODE_APPEND_ONLY";
    case StreamMetadata_Mode.MODE_INSERT_ONLY:
      return "MODE_INSERT_ONLY";
    case StreamMetadata_Mode.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export function streamMetadata_ModeToNumber(object: StreamMetadata_Mode): number {
  switch (object) {
    case StreamMetadata_Mode.MODE_UNSPECIFIED:
      return 0;
    case StreamMetadata_Mode.MODE_DEFAULT:
      return 1;
    case StreamMetadata_Mode.MODE_APPEND_ONLY:
      return 2;
    case StreamMetadata_Mode.MODE_INSERT_ONLY:
      return 3;
    case StreamMetadata_Mode.UNRECOGNIZED:
    default:
      return -1;
  }
}

/** TableMetadata is the metadata for tables. */
export interface TableMetadata {
  /** The name is the name of a table. */
  name: string;
  /** The columns is the ordered list of columns in a table. */
  columns: ColumnMetadata[];
  /** The indexes is the list of indexes in a table. */
  indexes: IndexMetadata[];
  /** The engine is the engine of a table. */
  engine: string;
  /** The collation is the collation of a table. */
  collation: string;
  /** The character set of table. */
  charset: string;
  /** The row_count is the estimated number of rows of a table. */
  rowCount: Long;
  /** The data_size is the estimated data size of a table. */
  dataSize: Long;
  /** The index_size is the estimated index size of a table. */
  indexSize: Long;
  /** The data_free is the estimated free data size of a table. */
  dataFree: Long;
  /** The create_options is the create option of a table. */
  createOptions: string;
  /**
   * The comment is the comment of a table.
   * classification and user_comment is parsed from the comment.
   */
  comment: string;
  /** The user_comment is the user comment of a table parsed from the comment. */
  userComment: string;
  /** The foreign_keys is the list of foreign keys in a table. */
  foreignKeys: ForeignKeyMetadata[];
  /** The partitions is the list of partitions in a table. */
  partitions: TablePartitionMetadata[];
  /** The check_constraints is the list of check constraints in a table. */
  checkConstraints: CheckConstraintMetadata[];
  owner: string;
  /**
   * The sorting_keys is a tuple of column names or arbitrary expressions. ClickHouse specific field.
   * Reference: https://clickhouse.com/docs/en/engines/table-engines/mergetree-family/mergetree#order_by
   */
  sortingKeys: string[];
}

export interface CheckConstraintMetadata {
  /** The name is the name of a check constraint. */
  name: string;
  /** The expression is the expression of a check constraint. */
  expression: string;
}

export interface ExternalTableMetadata {
  /** The name is the name of a external table. */
  name: string;
  /** The external_server_name is the name of the external server. */
  externalServerName: string;
  /** The external_database_name is the name of the external database. */
  externalDatabaseName: string;
  /** The columns is the ordered list of columns in a foreign table. */
  columns: ColumnMetadata[];
}

/** TablePartitionMetadata is the metadata for table partitions. */
export interface TablePartitionMetadata {
  /** The name is the name of a table partition. */
  name: string;
  /** The type of a table partition. */
  type: TablePartitionMetadata_Type;
  /**
   * The expression is the expression of a table partition.
   * For PostgreSQL, the expression is the text of {FOR VALUES
   * partition_bound_spec}, see
   * https://www.postgresql.org/docs/current/sql-createtable.html. For MySQL,
   * the expression is the `expr` or `column_list` of the following syntax.
   * PARTITION BY
   *    { [LINEAR] HASH(expr)
   *    | [LINEAR] KEY [ALGORITHM={1 | 2}] (column_list)
   *    | RANGE{(expr) | COLUMNS(column_list)}
   *    | LIST{(expr) | COLUMNS(column_list)} }.
   */
  expression: string;
  /**
   * The value is the value of a table partition.
   * For MySQL, the value is for RANGE and LIST partition types,
   * - For a RANGE partition, it contains the value set in the partition's
   * VALUES LESS THAN clause, which can be either an integer or MAXVALUE.
   * - For a LIST partition, this column contains the values defined in the
   * partition's VALUES IN clause, which is a list of comma-separated integer
   * values.
   * - For others, it's an empty string.
   */
  value: string;
  /**
   * The use_default is whether the users use the default partition, it stores
   * the different value for different database engines. For MySQL, it's [INT]
   * type, 0 means not use default partition, otherwise, it's equals to number
   * in syntax [SUB]PARTITION {number}.
   */
  useDefault: string;
  /** The subpartitions is the list of subpartitions in a table partition. */
  subpartitions: TablePartitionMetadata[];
  indexes: IndexMetadata[];
}

/**
 * Type is the type of a table partition, some database engines may not
 * support all types. Only avilable for the following database engines now:
 * MySQL: RANGE, RANGE COLUMNS, LIST, LIST COLUMNS, HASH, LINEAR HASH, KEY,
 * LINEAR_KEY
 * (https://dev.mysql.com/doc/refman/8.0/en/partitioning-types.html) TiDB:
 * RANGE, RANGE COLUMNS, LIST, LIST COLUMNS, HASH, KEY PostgreSQL: RANGE,
 * LIST, HASH (https://www.postgresql.org/docs/current/ddl-partitioning.html)
 */
export enum TablePartitionMetadata_Type {
  TYPE_UNSPECIFIED = "TYPE_UNSPECIFIED",
  RANGE = "RANGE",
  RANGE_COLUMNS = "RANGE_COLUMNS",
  LIST = "LIST",
  LIST_COLUMNS = "LIST_COLUMNS",
  HASH = "HASH",
  LINEAR_HASH = "LINEAR_HASH",
  KEY = "KEY",
  LINEAR_KEY = "LINEAR_KEY",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function tablePartitionMetadata_TypeFromJSON(object: any): TablePartitionMetadata_Type {
  switch (object) {
    case 0:
    case "TYPE_UNSPECIFIED":
      return TablePartitionMetadata_Type.TYPE_UNSPECIFIED;
    case 1:
    case "RANGE":
      return TablePartitionMetadata_Type.RANGE;
    case 2:
    case "RANGE_COLUMNS":
      return TablePartitionMetadata_Type.RANGE_COLUMNS;
    case 3:
    case "LIST":
      return TablePartitionMetadata_Type.LIST;
    case 4:
    case "LIST_COLUMNS":
      return TablePartitionMetadata_Type.LIST_COLUMNS;
    case 5:
    case "HASH":
      return TablePartitionMetadata_Type.HASH;
    case 6:
    case "LINEAR_HASH":
      return TablePartitionMetadata_Type.LINEAR_HASH;
    case 7:
    case "KEY":
      return TablePartitionMetadata_Type.KEY;
    case 8:
    case "LINEAR_KEY":
      return TablePartitionMetadata_Type.LINEAR_KEY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TablePartitionMetadata_Type.UNRECOGNIZED;
  }
}

export function tablePartitionMetadata_TypeToJSON(object: TablePartitionMetadata_Type): string {
  switch (object) {
    case TablePartitionMetadata_Type.TYPE_UNSPECIFIED:
      return "TYPE_UNSPECIFIED";
    case TablePartitionMetadata_Type.RANGE:
      return "RANGE";
    case TablePartitionMetadata_Type.RANGE_COLUMNS:
      return "RANGE_COLUMNS";
    case TablePartitionMetadata_Type.LIST:
      return "LIST";
    case TablePartitionMetadata_Type.LIST_COLUMNS:
      return "LIST_COLUMNS";
    case TablePartitionMetadata_Type.HASH:
      return "HASH";
    case TablePartitionMetadata_Type.LINEAR_HASH:
      return "LINEAR_HASH";
    case TablePartitionMetadata_Type.KEY:
      return "KEY";
    case TablePartitionMetadata_Type.LINEAR_KEY:
      return "LINEAR_KEY";
    case TablePartitionMetadata_Type.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export function tablePartitionMetadata_TypeToNumber(object: TablePartitionMetadata_Type): number {
  switch (object) {
    case TablePartitionMetadata_Type.TYPE_UNSPECIFIED:
      return 0;
    case TablePartitionMetadata_Type.RANGE:
      return 1;
    case TablePartitionMetadata_Type.RANGE_COLUMNS:
      return 2;
    case TablePartitionMetadata_Type.LIST:
      return 3;
    case TablePartitionMetadata_Type.LIST_COLUMNS:
      return 4;
    case TablePartitionMetadata_Type.HASH:
      return 5;
    case TablePartitionMetadata_Type.LINEAR_HASH:
      return 6;
    case TablePartitionMetadata_Type.KEY:
      return 7;
    case TablePartitionMetadata_Type.LINEAR_KEY:
      return 8;
    case TablePartitionMetadata_Type.UNRECOGNIZED:
    default:
      return -1;
  }
}

/** ColumnMetadata is the metadata for columns. */
export interface ColumnMetadata {
  /** The name is the name of a column. */
  name: string;
  /** The position is the position in columns. */
  position: number;
  /**
   * The default is the default of a column. Use google.protobuf.StringValue
   * to distinguish between an empty string default value or no default.
   */
  default?: string | undefined;
  defaultNull?: boolean | undefined;
  defaultExpression?:
    | string
    | undefined;
  /**
   * The on_update is the on update action of a column.
   * For MySQL like databases, it's only supported for TIMESTAMP columns with
   * CURRENT_TIMESTAMP as on update value.
   */
  onUpdate: string;
  /** The nullable is the nullable of a column. */
  nullable: boolean;
  /** The type is the type of a column. */
  type: string;
  /** The character_set is the character_set of a column. */
  characterSet: string;
  /** The collation is the collation of a column. */
  collation: string;
  /**
   * The comment is the comment of a column.
   * classification and user_comment is parsed from the comment.
   */
  comment: string;
  /** The user_comment is the user comment of a table parsed from the comment. */
  userComment: string;
  /** The generation is for generated columns. */
  generation: GenerationMetadata | undefined;
}

export interface GenerationMetadata {
  type: GenerationMetadata_Type;
  expression: string;
}

export enum GenerationMetadata_Type {
  TYPE_UNSPECIFIED = "TYPE_UNSPECIFIED",
  TYPE_VIRTUAL = "TYPE_VIRTUAL",
  TYPE_STORED = "TYPE_STORED",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function generationMetadata_TypeFromJSON(object: any): GenerationMetadata_Type {
  switch (object) {
    case 0:
    case "TYPE_UNSPECIFIED":
      return GenerationMetadata_Type.TYPE_UNSPECIFIED;
    case 1:
    case "TYPE_VIRTUAL":
      return GenerationMetadata_Type.TYPE_VIRTUAL;
    case 2:
    case "TYPE_STORED":
      return GenerationMetadata_Type.TYPE_STORED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return GenerationMetadata_Type.UNRECOGNIZED;
  }
}

export function generationMetadata_TypeToJSON(object: GenerationMetadata_Type): string {
  switch (object) {
    case GenerationMetadata_Type.TYPE_UNSPECIFIED:
      return "TYPE_UNSPECIFIED";
    case GenerationMetadata_Type.TYPE_VIRTUAL:
      return "TYPE_VIRTUAL";
    case GenerationMetadata_Type.TYPE_STORED:
      return "TYPE_STORED";
    case GenerationMetadata_Type.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export function generationMetadata_TypeToNumber(object: GenerationMetadata_Type): number {
  switch (object) {
    case GenerationMetadata_Type.TYPE_UNSPECIFIED:
      return 0;
    case GenerationMetadata_Type.TYPE_VIRTUAL:
      return 1;
    case GenerationMetadata_Type.TYPE_STORED:
      return 2;
    case GenerationMetadata_Type.UNRECOGNIZED:
    default:
      return -1;
  }
}

/** ViewMetadata is the metadata for views. */
export interface ViewMetadata {
  /** The name is the name of a view. */
  name: string;
  /** The definition is the definition of a view. */
  definition: string;
  /** The comment is the comment of a view. */
  comment: string;
  /** The dependent_columns is the list of dependent columns of a view. */
  dependentColumns: DependentColumn[];
  /** The columns is the ordered list of columns in a table. */
  columns: ColumnMetadata[];
}

/** DependentColumn is the metadata for dependent columns. */
export interface DependentColumn {
  /** The schema is the schema of a reference column. */
  schema: string;
  /** The table is the table of a reference column. */
  table: string;
  /** The column is the name of a reference column. */
  column: string;
}

/** MaterializedViewMetadata is the metadata for materialized views. */
export interface MaterializedViewMetadata {
  /** The name is the name of a view. */
  name: string;
  /** The definition is the definition of a view. */
  definition: string;
  /** The comment is the comment of a view. */
  comment: string;
  /** The dependent_columns is the list of dependent columns of a view. */
  dependentColumns: DependentColumn[];
}

/** FunctionMetadata is the metadata for functions. */
export interface FunctionMetadata {
  /** The name is the name of a function. */
  name: string;
  /** The definition is the definition of a function. */
  definition: string;
  /**
   * The signature is the name with the number and type of input arguments the
   * function takes.
   */
  signature: string;
  /** MySQL specific metadata. */
  characterSetClient: string;
  collationConnection: string;
  databaseCollation: string;
  sqlMode: string;
}

/** ProcedureMetadata is the metadata for procedures. */
export interface ProcedureMetadata {
  /** The name is the name of a procedure. */
  name: string;
  /** The definition is the definition of a procedure. */
  definition: string;
  /**
   * The signature is the name with the number and type of input arguments the
   * function takes.
   */
  signature: string;
  /** MySQL specific metadata. */
  characterSetClient: string;
  collationConnection: string;
  databaseCollation: string;
  sqlMode: string;
}

/** PackageMetadata is the metadata for packages. */
export interface PackageMetadata {
  /** The name is the name of a package. */
  name: string;
  /** The definition is the definition of a package. */
  definition: string;
}

/** IndexMetadata is the metadata for indexes. */
export interface IndexMetadata {
  /** The name is the name of an index. */
  name: string;
  /**
   * The expressions are the ordered columns or expressions of an index.
   * This could refer to a column or an expression.
   */
  expressions: string[];
  /**
   * The key_lengths are the ordered key lengths of an index.
   * If the key length is not specified, it's -1.
   */
  keyLength: Long[];
  /** The descending is the ordered descending of an index. */
  descending: boolean[];
  /** The type is the type of an index. */
  type: string;
  /** The unique is whether the index is unique. */
  unique: boolean;
  /** The primary is whether the index is a primary key index. */
  primary: boolean;
  /** The visible is whether the index is visible. */
  visible: boolean;
  /** The comment is the comment of an index. */
  comment: string;
  /** The definition of an index. */
  definition: string;
  /** The schema name of the parent index. */
  parentIndexSchema: string;
  /** The index name of the parent index. */
  parentIndexName: string;
  /** The number of granules in the block. It's a ClickHouse specific field. */
  granularity: Long;
}

/** ExtensionMetadata is the metadata for extensions. */
export interface ExtensionMetadata {
  /** The name is the name of an extension. */
  name: string;
  /**
   * The schema is the extension that is installed to. But the extension usage
   * is not limited to the schema.
   */
  schema: string;
  /** The version is the version of an extension. */
  version: string;
  /** The description is the description of an extension. */
  description: string;
}

/** ForeignKeyMetadata is the metadata for foreign keys. */
export interface ForeignKeyMetadata {
  /** The name is the name of a foreign key. */
  name: string;
  /** The columns are the ordered referencing columns of a foreign key. */
  columns: string[];
  /**
   * The referenced_schema is the referenced schema name of a foreign key.
   * It is an empty string for databases without such concept such as MySQL.
   */
  referencedSchema: string;
  /** The referenced_table is the referenced table name of a foreign key. */
  referencedTable: string;
  /** The referenced_columns are the ordered referenced columns of a foreign key. */
  referencedColumns: string[];
  /** The on_delete is the on delete action of a foreign key. */
  onDelete: string;
  /** The on_update is the on update action of a foreign key. */
  onUpdate: string;
  /**
   * The match_type is the match type of a foreign key.
   * The match_type is the PostgreSQL specific field.
   * It's empty string for other databases.
   */
  matchType: string;
}

/** InstanceRoleMetadata is the message for instance role. */
export interface InstanceRoleMetadata {
  /** The role name. It's unique within the instance. */
  name: string;
  /**
   * The grant display string on the instance. It's generated by database
   * engine.
   */
  grant: string;
}

export interface Secrets {
  /** The list of secrets. */
  items: SecretItem[];
}

export interface SecretItem {
  /** The name is the name of the secret. */
  name: string;
  /** The value is the value of the secret. */
  value: string;
  /** The description is the description of the secret. */
  description: string;
}

export interface DatabaseConfig {
  name: string;
  /** The schema_configs is the list of configs for schemas in a database. */
  schemaConfigs: SchemaConfig[];
}

export interface SchemaConfig {
  /**
   * The name is the schema name.
   * It is an empty string for databases without such concept such as MySQL.
   */
  name: string;
  /** The table_configs is the list of configs for tables in a schema. */
  tableConfigs: TableConfig[];
  functionConfigs: FunctionConfig[];
  procedureConfigs: ProcedureConfig[];
  viewConfigs: ViewConfig[];
}

export interface TableConfig {
  /** The name is the name of a table. */
  name: string;
  /** The column_configs is the ordered list of configs for columns in a table. */
  columnConfigs: ColumnConfig[];
  classificationId: string;
  /**
   * The last updater of the table in branch.
   * Format: users/{userUID}.
   */
  updater: string;
  /**
   * The last change come from branch.
   * Format: projcets/{project}/branches/{branch}
   */
  sourceBranch: string;
  /** The timestamp when the table is updated in branch. */
  updateTime: Timestamp | undefined;
}

export interface FunctionConfig {
  /** The name is the name of a function. */
  name: string;
  /**
   * The last updater of the function in branch.
   * Format: users/{userUID}.
   */
  updater: string;
  /**
   * The last change come from branch.
   * Format: projcets/{project}/branches/{branch}
   */
  sourceBranch: string;
  /** The timestamp when the function is updated in branch. */
  updateTime: Timestamp | undefined;
}

export interface ProcedureConfig {
  /** The name is the name of a procedure. */
  name: string;
  /**
   * The last updater of the procedure in branch.
   * Format: users/{userUID}.
   */
  updater: string;
  /**
   * The last change come from branch.
   * Format: projcets/{project}/branches/{branch}
   */
  sourceBranch: string;
  /** The timestamp when the procedure is updated in branch. */
  updateTime: Timestamp | undefined;
}

export interface ViewConfig {
  /** The name is the name of a view. */
  name: string;
  /**
   * The last updater of the view in branch.
   * Format: users/{userUID}.
   */
  updater: string;
  /**
   * The last change come from branch.
   * Format: projcets/{project}/branches/{branch}
   */
  sourceBranch: string;
  /** The timestamp when the view is updated in branch. */
  updateTime: Timestamp | undefined;
}

export interface ColumnConfig {
  /** The name is the name of a column. */
  name: string;
  semanticTypeId: string;
  /** The user labels for a column. */
  labels: { [key: string]: string };
  classificationId: string;
  maskingLevel: MaskingLevel;
  fullMaskingAlgorithmId: string;
  partialMaskingAlgorithmId: string;
}

export interface ColumnConfig_LabelsEntry {
  key: string;
  value: string;
}

function createBaseDatabaseMetadata(): DatabaseMetadata {
  return { labels: {}, lastSyncTime: undefined, backupAvailable: false };
}

export const DatabaseMetadata: MessageFns<DatabaseMetadata> = {
  encode(message: DatabaseMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.labels).forEach(([key, value]) => {
      DatabaseMetadata_LabelsEntry.encode({ key: key as any, value }, writer.uint32(10).fork()).join();
    });
    if (message.lastSyncTime !== undefined) {
      Timestamp.encode(message.lastSyncTime, writer.uint32(18).fork()).join();
    }
    if (message.backupAvailable !== false) {
      writer.uint32(24).bool(message.backupAvailable);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DatabaseMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDatabaseMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          const entry1 = DatabaseMetadata_LabelsEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.labels[entry1.key] = entry1.value;
          }
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.lastSyncTime = Timestamp.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.backupAvailable = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DatabaseMetadata {
    return {
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      lastSyncTime: isSet(object.lastSyncTime) ? fromJsonTimestamp(object.lastSyncTime) : undefined,
      backupAvailable: isSet(object.backupAvailable) ? globalThis.Boolean(object.backupAvailable) : false,
    };
  },

  toJSON(message: DatabaseMetadata): unknown {
    const obj: any = {};
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.lastSyncTime !== undefined) {
      obj.lastSyncTime = fromTimestamp(message.lastSyncTime).toISOString();
    }
    if (message.backupAvailable !== false) {
      obj.backupAvailable = message.backupAvailable;
    }
    return obj;
  },

  create(base?: DeepPartial<DatabaseMetadata>): DatabaseMetadata {
    return DatabaseMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DatabaseMetadata>): DatabaseMetadata {
    const message = createBaseDatabaseMetadata();
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.lastSyncTime = (object.lastSyncTime !== undefined && object.lastSyncTime !== null)
      ? Timestamp.fromPartial(object.lastSyncTime)
      : undefined;
    message.backupAvailable = object.backupAvailable ?? false;
    return message;
  },
};

function createBaseDatabaseMetadata_LabelsEntry(): DatabaseMetadata_LabelsEntry {
  return { key: "", value: "" };
}

export const DatabaseMetadata_LabelsEntry: MessageFns<DatabaseMetadata_LabelsEntry> = {
  encode(message: DatabaseMetadata_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DatabaseMetadata_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDatabaseMetadata_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DatabaseMetadata_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: DatabaseMetadata_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<DatabaseMetadata_LabelsEntry>): DatabaseMetadata_LabelsEntry {
    return DatabaseMetadata_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DatabaseMetadata_LabelsEntry>): DatabaseMetadata_LabelsEntry {
    const message = createBaseDatabaseMetadata_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseDatabaseSchemaMetadata(): DatabaseSchemaMetadata {
  return {
    name: "",
    schemas: [],
    characterSet: "",
    collation: "",
    extensions: [],
    datashare: false,
    serviceName: "",
    linkedDatabases: [],
    owner: "",
  };
}

export const DatabaseSchemaMetadata: MessageFns<DatabaseSchemaMetadata> = {
  encode(message: DatabaseSchemaMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    for (const v of message.schemas) {
      SchemaMetadata.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.characterSet !== "") {
      writer.uint32(26).string(message.characterSet);
    }
    if (message.collation !== "") {
      writer.uint32(34).string(message.collation);
    }
    for (const v of message.extensions) {
      ExtensionMetadata.encode(v!, writer.uint32(42).fork()).join();
    }
    if (message.datashare !== false) {
      writer.uint32(48).bool(message.datashare);
    }
    if (message.serviceName !== "") {
      writer.uint32(58).string(message.serviceName);
    }
    for (const v of message.linkedDatabases) {
      LinkedDatabaseMetadata.encode(v!, writer.uint32(66).fork()).join();
    }
    if (message.owner !== "") {
      writer.uint32(74).string(message.owner);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DatabaseSchemaMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDatabaseSchemaMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.schemas.push(SchemaMetadata.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.characterSet = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.collation = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.extensions.push(ExtensionMetadata.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.datashare = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.serviceName = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.linkedDatabases.push(LinkedDatabaseMetadata.decode(reader, reader.uint32()));
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DatabaseSchemaMetadata {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      schemas: globalThis.Array.isArray(object?.schemas)
        ? object.schemas.map((e: any) => SchemaMetadata.fromJSON(e))
        : [],
      characterSet: isSet(object.characterSet) ? globalThis.String(object.characterSet) : "",
      collation: isSet(object.collation) ? globalThis.String(object.collation) : "",
      extensions: globalThis.Array.isArray(object?.extensions)
        ? object.extensions.map((e: any) => ExtensionMetadata.fromJSON(e))
        : [],
      datashare: isSet(object.datashare) ? globalThis.Boolean(object.datashare) : false,
      serviceName: isSet(object.serviceName) ? globalThis.String(object.serviceName) : "",
      linkedDatabases: globalThis.Array.isArray(object?.linkedDatabases)
        ? object.linkedDatabases.map((e: any) => LinkedDatabaseMetadata.fromJSON(e))
        : [],
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
    };
  },

  toJSON(message: DatabaseSchemaMetadata): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.schemas?.length) {
      obj.schemas = message.schemas.map((e) => SchemaMetadata.toJSON(e));
    }
    if (message.characterSet !== "") {
      obj.characterSet = message.characterSet;
    }
    if (message.collation !== "") {
      obj.collation = message.collation;
    }
    if (message.extensions?.length) {
      obj.extensions = message.extensions.map((e) => ExtensionMetadata.toJSON(e));
    }
    if (message.datashare !== false) {
      obj.datashare = message.datashare;
    }
    if (message.serviceName !== "") {
      obj.serviceName = message.serviceName;
    }
    if (message.linkedDatabases?.length) {
      obj.linkedDatabases = message.linkedDatabases.map((e) => LinkedDatabaseMetadata.toJSON(e));
    }
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    return obj;
  },

  create(base?: DeepPartial<DatabaseSchemaMetadata>): DatabaseSchemaMetadata {
    return DatabaseSchemaMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DatabaseSchemaMetadata>): DatabaseSchemaMetadata {
    const message = createBaseDatabaseSchemaMetadata();
    message.name = object.name ?? "";
    message.schemas = object.schemas?.map((e) => SchemaMetadata.fromPartial(e)) || [];
    message.characterSet = object.characterSet ?? "";
    message.collation = object.collation ?? "";
    message.extensions = object.extensions?.map((e) => ExtensionMetadata.fromPartial(e)) || [];
    message.datashare = object.datashare ?? false;
    message.serviceName = object.serviceName ?? "";
    message.linkedDatabases = object.linkedDatabases?.map((e) => LinkedDatabaseMetadata.fromPartial(e)) || [];
    message.owner = object.owner ?? "";
    return message;
  },
};

function createBaseLinkedDatabaseMetadata(): LinkedDatabaseMetadata {
  return { name: "", username: "", host: "" };
}

export const LinkedDatabaseMetadata: MessageFns<LinkedDatabaseMetadata> = {
  encode(message: LinkedDatabaseMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.username !== "") {
      writer.uint32(18).string(message.username);
    }
    if (message.host !== "") {
      writer.uint32(26).string(message.host);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LinkedDatabaseMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLinkedDatabaseMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.username = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.host = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LinkedDatabaseMetadata {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      username: isSet(object.username) ? globalThis.String(object.username) : "",
      host: isSet(object.host) ? globalThis.String(object.host) : "",
    };
  },

  toJSON(message: LinkedDatabaseMetadata): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.username !== "") {
      obj.username = message.username;
    }
    if (message.host !== "") {
      obj.host = message.host;
    }
    return obj;
  },

  create(base?: DeepPartial<LinkedDatabaseMetadata>): LinkedDatabaseMetadata {
    return LinkedDatabaseMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<LinkedDatabaseMetadata>): LinkedDatabaseMetadata {
    const message = createBaseLinkedDatabaseMetadata();
    message.name = object.name ?? "";
    message.username = object.username ?? "";
    message.host = object.host ?? "";
    return message;
  },
};

function createBaseSchemaMetadata(): SchemaMetadata {
  return {
    name: "",
    tables: [],
    externalTables: [],
    views: [],
    functions: [],
    procedures: [],
    streams: [],
    tasks: [],
    materializedViews: [],
    sequences: [],
    packages: [],
    owner: "",
    triggers: [],
    events: [],
    enumTypes: [],
  };
}

export const SchemaMetadata: MessageFns<SchemaMetadata> = {
  encode(message: SchemaMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    for (const v of message.tables) {
      TableMetadata.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.externalTables) {
      ExternalTableMetadata.encode(v!, writer.uint32(26).fork()).join();
    }
    for (const v of message.views) {
      ViewMetadata.encode(v!, writer.uint32(34).fork()).join();
    }
    for (const v of message.functions) {
      FunctionMetadata.encode(v!, writer.uint32(42).fork()).join();
    }
    for (const v of message.procedures) {
      ProcedureMetadata.encode(v!, writer.uint32(50).fork()).join();
    }
    for (const v of message.streams) {
      StreamMetadata.encode(v!, writer.uint32(58).fork()).join();
    }
    for (const v of message.tasks) {
      TaskMetadata.encode(v!, writer.uint32(66).fork()).join();
    }
    for (const v of message.materializedViews) {
      MaterializedViewMetadata.encode(v!, writer.uint32(74).fork()).join();
    }
    for (const v of message.sequences) {
      SequenceMetadata.encode(v!, writer.uint32(82).fork()).join();
    }
    for (const v of message.packages) {
      PackageMetadata.encode(v!, writer.uint32(90).fork()).join();
    }
    if (message.owner !== "") {
      writer.uint32(98).string(message.owner);
    }
    for (const v of message.triggers) {
      TriggerMetadata.encode(v!, writer.uint32(106).fork()).join();
    }
    for (const v of message.events) {
      EventMetadata.encode(v!, writer.uint32(114).fork()).join();
    }
    for (const v of message.enumTypes) {
      EnumTypeMetadata.encode(v!, writer.uint32(122).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SchemaMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSchemaMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.tables.push(TableMetadata.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.externalTables.push(ExternalTableMetadata.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.views.push(ViewMetadata.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.functions.push(FunctionMetadata.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.procedures.push(ProcedureMetadata.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.streams.push(StreamMetadata.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.tasks.push(TaskMetadata.decode(reader, reader.uint32()));
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.materializedViews.push(MaterializedViewMetadata.decode(reader, reader.uint32()));
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.sequences.push(SequenceMetadata.decode(reader, reader.uint32()));
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.packages.push(PackageMetadata.decode(reader, reader.uint32()));
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.triggers.push(TriggerMetadata.decode(reader, reader.uint32()));
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.events.push(EventMetadata.decode(reader, reader.uint32()));
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.enumTypes.push(EnumTypeMetadata.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SchemaMetadata {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      tables: globalThis.Array.isArray(object?.tables) ? object.tables.map((e: any) => TableMetadata.fromJSON(e)) : [],
      externalTables: globalThis.Array.isArray(object?.externalTables)
        ? object.externalTables.map((e: any) => ExternalTableMetadata.fromJSON(e))
        : [],
      views: globalThis.Array.isArray(object?.views) ? object.views.map((e: any) => ViewMetadata.fromJSON(e)) : [],
      functions: globalThis.Array.isArray(object?.functions)
        ? object.functions.map((e: any) => FunctionMetadata.fromJSON(e))
        : [],
      procedures: globalThis.Array.isArray(object?.procedures)
        ? object.procedures.map((e: any) => ProcedureMetadata.fromJSON(e))
        : [],
      streams: globalThis.Array.isArray(object?.streams)
        ? object.streams.map((e: any) => StreamMetadata.fromJSON(e))
        : [],
      tasks: globalThis.Array.isArray(object?.tasks) ? object.tasks.map((e: any) => TaskMetadata.fromJSON(e)) : [],
      materializedViews: globalThis.Array.isArray(object?.materializedViews)
        ? object.materializedViews.map((e: any) => MaterializedViewMetadata.fromJSON(e))
        : [],
      sequences: globalThis.Array.isArray(object?.sequences)
        ? object.sequences.map((e: any) => SequenceMetadata.fromJSON(e))
        : [],
      packages: globalThis.Array.isArray(object?.packages)
        ? object.packages.map((e: any) => PackageMetadata.fromJSON(e))
        : [],
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
      triggers: globalThis.Array.isArray(object?.triggers)
        ? object.triggers.map((e: any) => TriggerMetadata.fromJSON(e))
        : [],
      events: globalThis.Array.isArray(object?.events)
        ? object.events.map((e: any) => EventMetadata.fromJSON(e))
        : [],
      enumTypes: globalThis.Array.isArray(object?.enumTypes)
        ? object.enumTypes.map((e: any) => EnumTypeMetadata.fromJSON(e))
        : [],
    };
  },

  toJSON(message: SchemaMetadata): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.tables?.length) {
      obj.tables = message.tables.map((e) => TableMetadata.toJSON(e));
    }
    if (message.externalTables?.length) {
      obj.externalTables = message.externalTables.map((e) => ExternalTableMetadata.toJSON(e));
    }
    if (message.views?.length) {
      obj.views = message.views.map((e) => ViewMetadata.toJSON(e));
    }
    if (message.functions?.length) {
      obj.functions = message.functions.map((e) => FunctionMetadata.toJSON(e));
    }
    if (message.procedures?.length) {
      obj.procedures = message.procedures.map((e) => ProcedureMetadata.toJSON(e));
    }
    if (message.streams?.length) {
      obj.streams = message.streams.map((e) => StreamMetadata.toJSON(e));
    }
    if (message.tasks?.length) {
      obj.tasks = message.tasks.map((e) => TaskMetadata.toJSON(e));
    }
    if (message.materializedViews?.length) {
      obj.materializedViews = message.materializedViews.map((e) => MaterializedViewMetadata.toJSON(e));
    }
    if (message.sequences?.length) {
      obj.sequences = message.sequences.map((e) => SequenceMetadata.toJSON(e));
    }
    if (message.packages?.length) {
      obj.packages = message.packages.map((e) => PackageMetadata.toJSON(e));
    }
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    if (message.triggers?.length) {
      obj.triggers = message.triggers.map((e) => TriggerMetadata.toJSON(e));
    }
    if (message.events?.length) {
      obj.events = message.events.map((e) => EventMetadata.toJSON(e));
    }
    if (message.enumTypes?.length) {
      obj.enumTypes = message.enumTypes.map((e) => EnumTypeMetadata.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<SchemaMetadata>): SchemaMetadata {
    return SchemaMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SchemaMetadata>): SchemaMetadata {
    const message = createBaseSchemaMetadata();
    message.name = object.name ?? "";
    message.tables = object.tables?.map((e) => TableMetadata.fromPartial(e)) || [];
    message.externalTables = object.externalTables?.map((e) => ExternalTableMetadata.fromPartial(e)) || [];
    message.views = object.views?.map((e) => ViewMetadata.fromPartial(e)) || [];
    message.functions = object.functions?.map((e) => FunctionMetadata.fromPartial(e)) || [];
    message.procedures = object.procedures?.map((e) => ProcedureMetadata.fromPartial(e)) || [];
    message.streams = object.streams?.map((e) => StreamMetadata.fromPartial(e)) || [];
    message.tasks = object.tasks?.map((e) => TaskMetadata.fromPartial(e)) || [];
    message.materializedViews = object.materializedViews?.map((e) => MaterializedViewMetadata.fromPartial(e)) || [];
    message.sequences = object.sequences?.map((e) => SequenceMetadata.fromPartial(e)) || [];
    message.packages = object.packages?.map((e) => PackageMetadata.fromPartial(e)) || [];
    message.owner = object.owner ?? "";
    message.triggers = object.triggers?.map((e) => TriggerMetadata.fromPartial(e)) || [];
    message.events = object.events?.map((e) => EventMetadata.fromPartial(e)) || [];
    message.enumTypes = object.enumTypes?.map((e) => EnumTypeMetadata.fromPartial(e)) || [];
    return message;
  },
};

function createBaseEnumTypeMetadata(): EnumTypeMetadata {
  return { name: "", values: [] };
}

export const EnumTypeMetadata: MessageFns<EnumTypeMetadata> = {
  encode(message: EnumTypeMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    for (const v of message.values) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EnumTypeMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEnumTypeMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.values.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EnumTypeMetadata {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      values: globalThis.Array.isArray(object?.values) ? object.values.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: EnumTypeMetadata): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.values?.length) {
      obj.values = message.values;
    }
    return obj;
  },

  create(base?: DeepPartial<EnumTypeMetadata>): EnumTypeMetadata {
    return EnumTypeMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EnumTypeMetadata>): EnumTypeMetadata {
    const message = createBaseEnumTypeMetadata();
    message.name = object.name ?? "";
    message.values = object.values?.map((e) => e) || [];
    return message;
  },
};

function createBaseEventMetadata(): EventMetadata {
  return { name: "", definition: "", timeZone: "", sqlMode: "", characterSetClient: "", collationConnection: "" };
}

export const EventMetadata: MessageFns<EventMetadata> = {
  encode(message: EventMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.definition !== "") {
      writer.uint32(18).string(message.definition);
    }
    if (message.timeZone !== "") {
      writer.uint32(26).string(message.timeZone);
    }
    if (message.sqlMode !== "") {
      writer.uint32(34).string(message.sqlMode);
    }
    if (message.characterSetClient !== "") {
      writer.uint32(42).string(message.characterSetClient);
    }
    if (message.collationConnection !== "") {
      writer.uint32(50).string(message.collationConnection);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.definition = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.timeZone = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.sqlMode = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.characterSetClient = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.collationConnection = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventMetadata {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      definition: isSet(object.definition) ? globalThis.String(object.definition) : "",
      timeZone: isSet(object.timeZone) ? globalThis.String(object.timeZone) : "",
      sqlMode: isSet(object.sqlMode) ? globalThis.String(object.sqlMode) : "",
      characterSetClient: isSet(object.characterSetClient) ? globalThis.String(object.characterSetClient) : "",
      collationConnection: isSet(object.collationConnection) ? globalThis.String(object.collationConnection) : "",
    };
  },

  toJSON(message: EventMetadata): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.definition !== "") {
      obj.definition = message.definition;
    }
    if (message.timeZone !== "") {
      obj.timeZone = message.timeZone;
    }
    if (message.sqlMode !== "") {
      obj.sqlMode = message.sqlMode;
    }
    if (message.characterSetClient !== "") {
      obj.characterSetClient = message.characterSetClient;
    }
    if (message.collationConnection !== "") {
      obj.collationConnection = message.collationConnection;
    }
    return obj;
  },

  create(base?: DeepPartial<EventMetadata>): EventMetadata {
    return EventMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EventMetadata>): EventMetadata {
    const message = createBaseEventMetadata();
    message.name = object.name ?? "";
    message.definition = object.definition ?? "";
    message.timeZone = object.timeZone ?? "";
    message.sqlMode = object.sqlMode ?? "";
    message.characterSetClient = object.characterSetClient ?? "";
    message.collationConnection = object.collationConnection ?? "";
    return message;
  },
};

function createBaseSequenceMetadata(): SequenceMetadata {
  return {
    name: "",
    dataType: "",
    start: "",
    minValue: "",
    maxValue: "",
    increment: "",
    cycle: false,
    cacheSize: "",
    lastValue: "",
    ownerTable: "",
    ownerColumn: "",
  };
}

export const SequenceMetadata: MessageFns<SequenceMetadata> = {
  encode(message: SequenceMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.dataType !== "") {
      writer.uint32(18).string(message.dataType);
    }
    if (message.start !== "") {
      writer.uint32(26).string(message.start);
    }
    if (message.minValue !== "") {
      writer.uint32(34).string(message.minValue);
    }
    if (message.maxValue !== "") {
      writer.uint32(42).string(message.maxValue);
    }
    if (message.increment !== "") {
      writer.uint32(50).string(message.increment);
    }
    if (message.cycle !== false) {
      writer.uint32(56).bool(message.cycle);
    }
    if (message.cacheSize !== "") {
      writer.uint32(66).string(message.cacheSize);
    }
    if (message.lastValue !== "") {
      writer.uint32(74).string(message.lastValue);
    }
    if (message.ownerTable !== "") {
      writer.uint32(82).string(message.ownerTable);
    }
    if (message.ownerColumn !== "") {
      writer.uint32(90).string(message.ownerColumn);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SequenceMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSequenceMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.dataType = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.start = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.minValue = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.maxValue = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.increment = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.cycle = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.cacheSize = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.lastValue = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.ownerTable = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.ownerColumn = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SequenceMetadata {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      dataType: isSet(object.dataType) ? globalThis.String(object.dataType) : "",
      start: isSet(object.start) ? globalThis.String(object.start) : "",
      minValue: isSet(object.minValue) ? globalThis.String(object.minValue) : "",
      maxValue: isSet(object.maxValue) ? globalThis.String(object.maxValue) : "",
      increment: isSet(object.increment) ? globalThis.String(object.increment) : "",
      cycle: isSet(object.cycle) ? globalThis.Boolean(object.cycle) : false,
      cacheSize: isSet(object.cacheSize) ? globalThis.String(object.cacheSize) : "",
      lastValue: isSet(object.lastValue) ? globalThis.String(object.lastValue) : "",
      ownerTable: isSet(object.ownerTable) ? globalThis.String(object.ownerTable) : "",
      ownerColumn: isSet(object.ownerColumn) ? globalThis.String(object.ownerColumn) : "",
    };
  },

  toJSON(message: SequenceMetadata): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.dataType !== "") {
      obj.dataType = message.dataType;
    }
    if (message.start !== "") {
      obj.start = message.start;
    }
    if (message.minValue !== "") {
      obj.minValue = message.minValue;
    }
    if (message.maxValue !== "") {
      obj.maxValue = message.maxValue;
    }
    if (message.increment !== "") {
      obj.increment = message.increment;
    }
    if (message.cycle !== false) {
      obj.cycle = message.cycle;
    }
    if (message.cacheSize !== "") {
      obj.cacheSize = message.cacheSize;
    }
    if (message.lastValue !== "") {
      obj.lastValue = message.lastValue;
    }
    if (message.ownerTable !== "") {
      obj.ownerTable = message.ownerTable;
    }
    if (message.ownerColumn !== "") {
      obj.ownerColumn = message.ownerColumn;
    }
    return obj;
  },

  create(base?: DeepPartial<SequenceMetadata>): SequenceMetadata {
    return SequenceMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SequenceMetadata>): SequenceMetadata {
    const message = createBaseSequenceMetadata();
    message.name = object.name ?? "";
    message.dataType = object.dataType ?? "";
    message.start = object.start ?? "";
    message.minValue = object.minValue ?? "";
    message.maxValue = object.maxValue ?? "";
    message.increment = object.increment ?? "";
    message.cycle = object.cycle ?? false;
    message.cacheSize = object.cacheSize ?? "";
    message.lastValue = object.lastValue ?? "";
    message.ownerTable = object.ownerTable ?? "";
    message.ownerColumn = object.ownerColumn ?? "";
    return message;
  },
};

function createBaseTriggerMetadata(): TriggerMetadata {
  return {
    name: "",
    schemaName: "",
    tableName: "",
    event: "",
    timing: "",
    body: "",
    sqlMode: "",
    characterSetClient: "",
    collationConnection: "",
    actionOrientation: "",
    condition: "",
  };
}

export const TriggerMetadata: MessageFns<TriggerMetadata> = {
  encode(message: TriggerMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.schemaName !== "") {
      writer.uint32(74).string(message.schemaName);
    }
    if (message.tableName !== "") {
      writer.uint32(18).string(message.tableName);
    }
    if (message.event !== "") {
      writer.uint32(26).string(message.event);
    }
    if (message.timing !== "") {
      writer.uint32(34).string(message.timing);
    }
    if (message.body !== "") {
      writer.uint32(42).string(message.body);
    }
    if (message.sqlMode !== "") {
      writer.uint32(50).string(message.sqlMode);
    }
    if (message.characterSetClient !== "") {
      writer.uint32(58).string(message.characterSetClient);
    }
    if (message.collationConnection !== "") {
      writer.uint32(66).string(message.collationConnection);
    }
    if (message.actionOrientation !== "") {
      writer.uint32(82).string(message.actionOrientation);
    }
    if (message.condition !== "") {
      writer.uint32(90).string(message.condition);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TriggerMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTriggerMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.schemaName = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.tableName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.event = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.timing = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.body = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.sqlMode = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.characterSetClient = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.collationConnection = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.actionOrientation = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.condition = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TriggerMetadata {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      schemaName: isSet(object.schemaName) ? globalThis.String(object.schemaName) : "",
      tableName: isSet(object.tableName) ? globalThis.String(object.tableName) : "",
      event: isSet(object.event) ? globalThis.String(object.event) : "",
      timing: isSet(object.timing) ? globalThis.String(object.timing) : "",
      body: isSet(object.body) ? globalThis.String(object.body) : "",
      sqlMode: isSet(object.sqlMode) ? globalThis.String(object.sqlMode) : "",
      characterSetClient: isSet(object.characterSetClient) ? globalThis.String(object.characterSetClient) : "",
      collationConnection: isSet(object.collationConnection) ? globalThis.String(object.collationConnection) : "",
      actionOrientation: isSet(object.actionOrientation) ? globalThis.String(object.actionOrientation) : "",
      condition: isSet(object.condition) ? globalThis.String(object.condition) : "",
    };
  },

  toJSON(message: TriggerMetadata): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.schemaName !== "") {
      obj.schemaName = message.schemaName;
    }
    if (message.tableName !== "") {
      obj.tableName = message.tableName;
    }
    if (message.event !== "") {
      obj.event = message.event;
    }
    if (message.timing !== "") {
      obj.timing = message.timing;
    }
    if (message.body !== "") {
      obj.body = message.body;
    }
    if (message.sqlMode !== "") {
      obj.sqlMode = message.sqlMode;
    }
    if (message.characterSetClient !== "") {
      obj.characterSetClient = message.characterSetClient;
    }
    if (message.collationConnection !== "") {
      obj.collationConnection = message.collationConnection;
    }
    if (message.actionOrientation !== "") {
      obj.actionOrientation = message.actionOrientation;
    }
    if (message.condition !== "") {
      obj.condition = message.condition;
    }
    return obj;
  },

  create(base?: DeepPartial<TriggerMetadata>): TriggerMetadata {
    return TriggerMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TriggerMetadata>): TriggerMetadata {
    const message = createBaseTriggerMetadata();
    message.name = object.name ?? "";
    message.schemaName = object.schemaName ?? "";
    message.tableName = object.tableName ?? "";
    message.event = object.event ?? "";
    message.timing = object.timing ?? "";
    message.body = object.body ?? "";
    message.sqlMode = object.sqlMode ?? "";
    message.characterSetClient = object.characterSetClient ?? "";
    message.collationConnection = object.collationConnection ?? "";
    message.actionOrientation = object.actionOrientation ?? "";
    message.condition = object.condition ?? "";
    return message;
  },
};

function createBaseTaskMetadata(): TaskMetadata {
  return {
    name: "",
    id: "",
    owner: "",
    comment: "",
    warehouse: "",
    schedule: "",
    predecessors: [],
    state: TaskMetadata_State.STATE_UNSPECIFIED,
    condition: "",
    definition: "",
  };
}

export const TaskMetadata: MessageFns<TaskMetadata> = {
  encode(message: TaskMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.id !== "") {
      writer.uint32(18).string(message.id);
    }
    if (message.owner !== "") {
      writer.uint32(26).string(message.owner);
    }
    if (message.comment !== "") {
      writer.uint32(34).string(message.comment);
    }
    if (message.warehouse !== "") {
      writer.uint32(42).string(message.warehouse);
    }
    if (message.schedule !== "") {
      writer.uint32(50).string(message.schedule);
    }
    for (const v of message.predecessors) {
      writer.uint32(58).string(v!);
    }
    if (message.state !== TaskMetadata_State.STATE_UNSPECIFIED) {
      writer.uint32(64).int32(taskMetadata_StateToNumber(message.state));
    }
    if (message.condition !== "") {
      writer.uint32(74).string(message.condition);
    }
    if (message.definition !== "") {
      writer.uint32(82).string(message.definition);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TaskMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTaskMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.comment = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.warehouse = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.schedule = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.predecessors.push(reader.string());
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.state = taskMetadata_StateFromJSON(reader.int32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.condition = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.definition = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TaskMetadata {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
      comment: isSet(object.comment) ? globalThis.String(object.comment) : "",
      warehouse: isSet(object.warehouse) ? globalThis.String(object.warehouse) : "",
      schedule: isSet(object.schedule) ? globalThis.String(object.schedule) : "",
      predecessors: globalThis.Array.isArray(object?.predecessors)
        ? object.predecessors.map((e: any) => globalThis.String(e))
        : [],
      state: isSet(object.state) ? taskMetadata_StateFromJSON(object.state) : TaskMetadata_State.STATE_UNSPECIFIED,
      condition: isSet(object.condition) ? globalThis.String(object.condition) : "",
      definition: isSet(object.definition) ? globalThis.String(object.definition) : "",
    };
  },

  toJSON(message: TaskMetadata): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    if (message.comment !== "") {
      obj.comment = message.comment;
    }
    if (message.warehouse !== "") {
      obj.warehouse = message.warehouse;
    }
    if (message.schedule !== "") {
      obj.schedule = message.schedule;
    }
    if (message.predecessors?.length) {
      obj.predecessors = message.predecessors;
    }
    if (message.state !== TaskMetadata_State.STATE_UNSPECIFIED) {
      obj.state = taskMetadata_StateToJSON(message.state);
    }
    if (message.condition !== "") {
      obj.condition = message.condition;
    }
    if (message.definition !== "") {
      obj.definition = message.definition;
    }
    return obj;
  },

  create(base?: DeepPartial<TaskMetadata>): TaskMetadata {
    return TaskMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TaskMetadata>): TaskMetadata {
    const message = createBaseTaskMetadata();
    message.name = object.name ?? "";
    message.id = object.id ?? "";
    message.owner = object.owner ?? "";
    message.comment = object.comment ?? "";
    message.warehouse = object.warehouse ?? "";
    message.schedule = object.schedule ?? "";
    message.predecessors = object.predecessors?.map((e) => e) || [];
    message.state = object.state ?? TaskMetadata_State.STATE_UNSPECIFIED;
    message.condition = object.condition ?? "";
    message.definition = object.definition ?? "";
    return message;
  },
};

function createBaseStreamMetadata(): StreamMetadata {
  return {
    name: "",
    tableName: "",
    owner: "",
    comment: "",
    type: StreamMetadata_Type.TYPE_UNSPECIFIED,
    stale: false,
    mode: StreamMetadata_Mode.MODE_UNSPECIFIED,
    definition: "",
  };
}

export const StreamMetadata: MessageFns<StreamMetadata> = {
  encode(message: StreamMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.tableName !== "") {
      writer.uint32(18).string(message.tableName);
    }
    if (message.owner !== "") {
      writer.uint32(26).string(message.owner);
    }
    if (message.comment !== "") {
      writer.uint32(34).string(message.comment);
    }
    if (message.type !== StreamMetadata_Type.TYPE_UNSPECIFIED) {
      writer.uint32(40).int32(streamMetadata_TypeToNumber(message.type));
    }
    if (message.stale !== false) {
      writer.uint32(48).bool(message.stale);
    }
    if (message.mode !== StreamMetadata_Mode.MODE_UNSPECIFIED) {
      writer.uint32(56).int32(streamMetadata_ModeToNumber(message.mode));
    }
    if (message.definition !== "") {
      writer.uint32(66).string(message.definition);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.tableName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.comment = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.type = streamMetadata_TypeFromJSON(reader.int32());
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.stale = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.mode = streamMetadata_ModeFromJSON(reader.int32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.definition = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamMetadata {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      tableName: isSet(object.tableName) ? globalThis.String(object.tableName) : "",
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
      comment: isSet(object.comment) ? globalThis.String(object.comment) : "",
      type: isSet(object.type) ? streamMetadata_TypeFromJSON(object.type) : StreamMetadata_Type.TYPE_UNSPECIFIED,
      stale: isSet(object.stale) ? globalThis.Boolean(object.stale) : false,
      mode: isSet(object.mode) ? streamMetadata_ModeFromJSON(object.mode) : StreamMetadata_Mode.MODE_UNSPECIFIED,
      definition: isSet(object.definition) ? globalThis.String(object.definition) : "",
    };
  },

  toJSON(message: StreamMetadata): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.tableName !== "") {
      obj.tableName = message.tableName;
    }
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    if (message.comment !== "") {
      obj.comment = message.comment;
    }
    if (message.type !== StreamMetadata_Type.TYPE_UNSPECIFIED) {
      obj.type = streamMetadata_TypeToJSON(message.type);
    }
    if (message.stale !== false) {
      obj.stale = message.stale;
    }
    if (message.mode !== StreamMetadata_Mode.MODE_UNSPECIFIED) {
      obj.mode = streamMetadata_ModeToJSON(message.mode);
    }
    if (message.definition !== "") {
      obj.definition = message.definition;
    }
    return obj;
  },

  create(base?: DeepPartial<StreamMetadata>): StreamMetadata {
    return StreamMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StreamMetadata>): StreamMetadata {
    const message = createBaseStreamMetadata();
    message.name = object.name ?? "";
    message.tableName = object.tableName ?? "";
    message.owner = object.owner ?? "";
    message.comment = object.comment ?? "";
    message.type = object.type ?? StreamMetadata_Type.TYPE_UNSPECIFIED;
    message.stale = object.stale ?? false;
    message.mode = object.mode ?? StreamMetadata_Mode.MODE_UNSPECIFIED;
    message.definition = object.definition ?? "";
    return message;
  },
};

function createBaseTableMetadata(): TableMetadata {
  return {
    name: "",
    columns: [],
    indexes: [],
    engine: "",
    collation: "",
    charset: "",
    rowCount: Long.ZERO,
    dataSize: Long.ZERO,
    indexSize: Long.ZERO,
    dataFree: Long.ZERO,
    createOptions: "",
    comment: "",
    userComment: "",
    foreignKeys: [],
    partitions: [],
    checkConstraints: [],
    owner: "",
    sortingKeys: [],
  };
}

export const TableMetadata: MessageFns<TableMetadata> = {
  encode(message: TableMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    for (const v of message.columns) {
      ColumnMetadata.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.indexes) {
      IndexMetadata.encode(v!, writer.uint32(26).fork()).join();
    }
    if (message.engine !== "") {
      writer.uint32(34).string(message.engine);
    }
    if (message.collation !== "") {
      writer.uint32(42).string(message.collation);
    }
    if (message.charset !== "") {
      writer.uint32(138).string(message.charset);
    }
    if (!message.rowCount.equals(Long.ZERO)) {
      writer.uint32(48).int64(message.rowCount.toString());
    }
    if (!message.dataSize.equals(Long.ZERO)) {
      writer.uint32(56).int64(message.dataSize.toString());
    }
    if (!message.indexSize.equals(Long.ZERO)) {
      writer.uint32(64).int64(message.indexSize.toString());
    }
    if (!message.dataFree.equals(Long.ZERO)) {
      writer.uint32(72).int64(message.dataFree.toString());
    }
    if (message.createOptions !== "") {
      writer.uint32(82).string(message.createOptions);
    }
    if (message.comment !== "") {
      writer.uint32(90).string(message.comment);
    }
    if (message.userComment !== "") {
      writer.uint32(114).string(message.userComment);
    }
    for (const v of message.foreignKeys) {
      ForeignKeyMetadata.encode(v!, writer.uint32(98).fork()).join();
    }
    for (const v of message.partitions) {
      TablePartitionMetadata.encode(v!, writer.uint32(122).fork()).join();
    }
    for (const v of message.checkConstraints) {
      CheckConstraintMetadata.encode(v!, writer.uint32(130).fork()).join();
    }
    if (message.owner !== "") {
      writer.uint32(146).string(message.owner);
    }
    for (const v of message.sortingKeys) {
      writer.uint32(154).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TableMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTableMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.columns.push(ColumnMetadata.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.indexes.push(IndexMetadata.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.engine = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.collation = reader.string();
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.charset = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.rowCount = Long.fromString(reader.int64().toString());
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.dataSize = Long.fromString(reader.int64().toString());
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.indexSize = Long.fromString(reader.int64().toString());
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.dataFree = Long.fromString(reader.int64().toString());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.createOptions = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.comment = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.userComment = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.foreignKeys.push(ForeignKeyMetadata.decode(reader, reader.uint32()));
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.partitions.push(TablePartitionMetadata.decode(reader, reader.uint32()));
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.checkConstraints.push(CheckConstraintMetadata.decode(reader, reader.uint32()));
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.owner = reader.string();
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.sortingKeys.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TableMetadata {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      columns: globalThis.Array.isArray(object?.columns)
        ? object.columns.map((e: any) => ColumnMetadata.fromJSON(e))
        : [],
      indexes: globalThis.Array.isArray(object?.indexes)
        ? object.indexes.map((e: any) => IndexMetadata.fromJSON(e))
        : [],
      engine: isSet(object.engine) ? globalThis.String(object.engine) : "",
      collation: isSet(object.collation) ? globalThis.String(object.collation) : "",
      charset: isSet(object.charset) ? globalThis.String(object.charset) : "",
      rowCount: isSet(object.rowCount) ? Long.fromValue(object.rowCount) : Long.ZERO,
      dataSize: isSet(object.dataSize) ? Long.fromValue(object.dataSize) : Long.ZERO,
      indexSize: isSet(object.indexSize) ? Long.fromValue(object.indexSize) : Long.ZERO,
      dataFree: isSet(object.dataFree) ? Long.fromValue(object.dataFree) : Long.ZERO,
      createOptions: isSet(object.createOptions) ? globalThis.String(object.createOptions) : "",
      comment: isSet(object.comment) ? globalThis.String(object.comment) : "",
      userComment: isSet(object.userComment) ? globalThis.String(object.userComment) : "",
      foreignKeys: globalThis.Array.isArray(object?.foreignKeys)
        ? object.foreignKeys.map((e: any) => ForeignKeyMetadata.fromJSON(e))
        : [],
      partitions: globalThis.Array.isArray(object?.partitions)
        ? object.partitions.map((e: any) => TablePartitionMetadata.fromJSON(e))
        : [],
      checkConstraints: globalThis.Array.isArray(object?.checkConstraints)
        ? object.checkConstraints.map((e: any) => CheckConstraintMetadata.fromJSON(e))
        : [],
      owner: isSet(object.owner) ? globalThis.String(object.owner) : "",
      sortingKeys: globalThis.Array.isArray(object?.sortingKeys)
        ? object.sortingKeys.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: TableMetadata): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.columns?.length) {
      obj.columns = message.columns.map((e) => ColumnMetadata.toJSON(e));
    }
    if (message.indexes?.length) {
      obj.indexes = message.indexes.map((e) => IndexMetadata.toJSON(e));
    }
    if (message.engine !== "") {
      obj.engine = message.engine;
    }
    if (message.collation !== "") {
      obj.collation = message.collation;
    }
    if (message.charset !== "") {
      obj.charset = message.charset;
    }
    if (!message.rowCount.equals(Long.ZERO)) {
      obj.rowCount = (message.rowCount || Long.ZERO).toString();
    }
    if (!message.dataSize.equals(Long.ZERO)) {
      obj.dataSize = (message.dataSize || Long.ZERO).toString();
    }
    if (!message.indexSize.equals(Long.ZERO)) {
      obj.indexSize = (message.indexSize || Long.ZERO).toString();
    }
    if (!message.dataFree.equals(Long.ZERO)) {
      obj.dataFree = (message.dataFree || Long.ZERO).toString();
    }
    if (message.createOptions !== "") {
      obj.createOptions = message.createOptions;
    }
    if (message.comment !== "") {
      obj.comment = message.comment;
    }
    if (message.userComment !== "") {
      obj.userComment = message.userComment;
    }
    if (message.foreignKeys?.length) {
      obj.foreignKeys = message.foreignKeys.map((e) => ForeignKeyMetadata.toJSON(e));
    }
    if (message.partitions?.length) {
      obj.partitions = message.partitions.map((e) => TablePartitionMetadata.toJSON(e));
    }
    if (message.checkConstraints?.length) {
      obj.checkConstraints = message.checkConstraints.map((e) => CheckConstraintMetadata.toJSON(e));
    }
    if (message.owner !== "") {
      obj.owner = message.owner;
    }
    if (message.sortingKeys?.length) {
      obj.sortingKeys = message.sortingKeys;
    }
    return obj;
  },

  create(base?: DeepPartial<TableMetadata>): TableMetadata {
    return TableMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TableMetadata>): TableMetadata {
    const message = createBaseTableMetadata();
    message.name = object.name ?? "";
    message.columns = object.columns?.map((e) => ColumnMetadata.fromPartial(e)) || [];
    message.indexes = object.indexes?.map((e) => IndexMetadata.fromPartial(e)) || [];
    message.engine = object.engine ?? "";
    message.collation = object.collation ?? "";
    message.charset = object.charset ?? "";
    message.rowCount = (object.rowCount !== undefined && object.rowCount !== null)
      ? Long.fromValue(object.rowCount)
      : Long.ZERO;
    message.dataSize = (object.dataSize !== undefined && object.dataSize !== null)
      ? Long.fromValue(object.dataSize)
      : Long.ZERO;
    message.indexSize = (object.indexSize !== undefined && object.indexSize !== null)
      ? Long.fromValue(object.indexSize)
      : Long.ZERO;
    message.dataFree = (object.dataFree !== undefined && object.dataFree !== null)
      ? Long.fromValue(object.dataFree)
      : Long.ZERO;
    message.createOptions = object.createOptions ?? "";
    message.comment = object.comment ?? "";
    message.userComment = object.userComment ?? "";
    message.foreignKeys = object.foreignKeys?.map((e) => ForeignKeyMetadata.fromPartial(e)) || [];
    message.partitions = object.partitions?.map((e) => TablePartitionMetadata.fromPartial(e)) || [];
    message.checkConstraints = object.checkConstraints?.map((e) => CheckConstraintMetadata.fromPartial(e)) || [];
    message.owner = object.owner ?? "";
    message.sortingKeys = object.sortingKeys?.map((e) => e) || [];
    return message;
  },
};

function createBaseCheckConstraintMetadata(): CheckConstraintMetadata {
  return { name: "", expression: "" };
}

export const CheckConstraintMetadata: MessageFns<CheckConstraintMetadata> = {
  encode(message: CheckConstraintMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.expression !== "") {
      writer.uint32(18).string(message.expression);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CheckConstraintMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCheckConstraintMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.expression = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CheckConstraintMetadata {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      expression: isSet(object.expression) ? globalThis.String(object.expression) : "",
    };
  },

  toJSON(message: CheckConstraintMetadata): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.expression !== "") {
      obj.expression = message.expression;
    }
    return obj;
  },

  create(base?: DeepPartial<CheckConstraintMetadata>): CheckConstraintMetadata {
    return CheckConstraintMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CheckConstraintMetadata>): CheckConstraintMetadata {
    const message = createBaseCheckConstraintMetadata();
    message.name = object.name ?? "";
    message.expression = object.expression ?? "";
    return message;
  },
};

function createBaseExternalTableMetadata(): ExternalTableMetadata {
  return { name: "", externalServerName: "", externalDatabaseName: "", columns: [] };
}

export const ExternalTableMetadata: MessageFns<ExternalTableMetadata> = {
  encode(message: ExternalTableMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.externalServerName !== "") {
      writer.uint32(18).string(message.externalServerName);
    }
    if (message.externalDatabaseName !== "") {
      writer.uint32(26).string(message.externalDatabaseName);
    }
    for (const v of message.columns) {
      ColumnMetadata.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExternalTableMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExternalTableMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.externalServerName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.externalDatabaseName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.columns.push(ColumnMetadata.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExternalTableMetadata {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      externalServerName: isSet(object.externalServerName) ? globalThis.String(object.externalServerName) : "",
      externalDatabaseName: isSet(object.externalDatabaseName) ? globalThis.String(object.externalDatabaseName) : "",
      columns: globalThis.Array.isArray(object?.columns)
        ? object.columns.map((e: any) => ColumnMetadata.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ExternalTableMetadata): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.externalServerName !== "") {
      obj.externalServerName = message.externalServerName;
    }
    if (message.externalDatabaseName !== "") {
      obj.externalDatabaseName = message.externalDatabaseName;
    }
    if (message.columns?.length) {
      obj.columns = message.columns.map((e) => ColumnMetadata.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ExternalTableMetadata>): ExternalTableMetadata {
    return ExternalTableMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExternalTableMetadata>): ExternalTableMetadata {
    const message = createBaseExternalTableMetadata();
    message.name = object.name ?? "";
    message.externalServerName = object.externalServerName ?? "";
    message.externalDatabaseName = object.externalDatabaseName ?? "";
    message.columns = object.columns?.map((e) => ColumnMetadata.fromPartial(e)) || [];
    return message;
  },
};

function createBaseTablePartitionMetadata(): TablePartitionMetadata {
  return {
    name: "",
    type: TablePartitionMetadata_Type.TYPE_UNSPECIFIED,
    expression: "",
    value: "",
    useDefault: "",
    subpartitions: [],
    indexes: [],
  };
}

export const TablePartitionMetadata: MessageFns<TablePartitionMetadata> = {
  encode(message: TablePartitionMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.type !== TablePartitionMetadata_Type.TYPE_UNSPECIFIED) {
      writer.uint32(16).int32(tablePartitionMetadata_TypeToNumber(message.type));
    }
    if (message.expression !== "") {
      writer.uint32(26).string(message.expression);
    }
    if (message.value !== "") {
      writer.uint32(34).string(message.value);
    }
    if (message.useDefault !== "") {
      writer.uint32(42).string(message.useDefault);
    }
    for (const v of message.subpartitions) {
      TablePartitionMetadata.encode(v!, writer.uint32(50).fork()).join();
    }
    for (const v of message.indexes) {
      IndexMetadata.encode(v!, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TablePartitionMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTablePartitionMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.type = tablePartitionMetadata_TypeFromJSON(reader.int32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.expression = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.value = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.useDefault = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.subpartitions.push(TablePartitionMetadata.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.indexes.push(IndexMetadata.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TablePartitionMetadata {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      type: isSet(object.type)
        ? tablePartitionMetadata_TypeFromJSON(object.type)
        : TablePartitionMetadata_Type.TYPE_UNSPECIFIED,
      expression: isSet(object.expression) ? globalThis.String(object.expression) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
      useDefault: isSet(object.useDefault) ? globalThis.String(object.useDefault) : "",
      subpartitions: globalThis.Array.isArray(object?.subpartitions)
        ? object.subpartitions.map((e: any) => TablePartitionMetadata.fromJSON(e))
        : [],
      indexes: globalThis.Array.isArray(object?.indexes)
        ? object.indexes.map((e: any) => IndexMetadata.fromJSON(e))
        : [],
    };
  },

  toJSON(message: TablePartitionMetadata): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.type !== TablePartitionMetadata_Type.TYPE_UNSPECIFIED) {
      obj.type = tablePartitionMetadata_TypeToJSON(message.type);
    }
    if (message.expression !== "") {
      obj.expression = message.expression;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    if (message.useDefault !== "") {
      obj.useDefault = message.useDefault;
    }
    if (message.subpartitions?.length) {
      obj.subpartitions = message.subpartitions.map((e) => TablePartitionMetadata.toJSON(e));
    }
    if (message.indexes?.length) {
      obj.indexes = message.indexes.map((e) => IndexMetadata.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<TablePartitionMetadata>): TablePartitionMetadata {
    return TablePartitionMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TablePartitionMetadata>): TablePartitionMetadata {
    const message = createBaseTablePartitionMetadata();
    message.name = object.name ?? "";
    message.type = object.type ?? TablePartitionMetadata_Type.TYPE_UNSPECIFIED;
    message.expression = object.expression ?? "";
    message.value = object.value ?? "";
    message.useDefault = object.useDefault ?? "";
    message.subpartitions = object.subpartitions?.map((e) => TablePartitionMetadata.fromPartial(e)) || [];
    message.indexes = object.indexes?.map((e) => IndexMetadata.fromPartial(e)) || [];
    return message;
  },
};

function createBaseColumnMetadata(): ColumnMetadata {
  return {
    name: "",
    position: 0,
    default: undefined,
    defaultNull: undefined,
    defaultExpression: undefined,
    onUpdate: "",
    nullable: false,
    type: "",
    characterSet: "",
    collation: "",
    comment: "",
    userComment: "",
    generation: undefined,
  };
}

export const ColumnMetadata: MessageFns<ColumnMetadata> = {
  encode(message: ColumnMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.position !== 0) {
      writer.uint32(16).int32(message.position);
    }
    if (message.default !== undefined) {
      StringValue.encode({ value: message.default! }, writer.uint32(26).fork()).join();
    }
    if (message.defaultNull !== undefined) {
      writer.uint32(32).bool(message.defaultNull);
    }
    if (message.defaultExpression !== undefined) {
      writer.uint32(42).string(message.defaultExpression);
    }
    if (message.onUpdate !== "") {
      writer.uint32(106).string(message.onUpdate);
    }
    if (message.nullable !== false) {
      writer.uint32(48).bool(message.nullable);
    }
    if (message.type !== "") {
      writer.uint32(58).string(message.type);
    }
    if (message.characterSet !== "") {
      writer.uint32(66).string(message.characterSet);
    }
    if (message.collation !== "") {
      writer.uint32(74).string(message.collation);
    }
    if (message.comment !== "") {
      writer.uint32(82).string(message.comment);
    }
    if (message.userComment !== "") {
      writer.uint32(98).string(message.userComment);
    }
    if (message.generation !== undefined) {
      GenerationMetadata.encode(message.generation, writer.uint32(114).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ColumnMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseColumnMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.position = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.default = StringValue.decode(reader, reader.uint32()).value;
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.defaultNull = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.defaultExpression = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.onUpdate = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.nullable = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.characterSet = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.collation = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.comment = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.userComment = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.generation = GenerationMetadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ColumnMetadata {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      position: isSet(object.position) ? globalThis.Number(object.position) : 0,
      default: isSet(object.default) ? String(object.default) : undefined,
      defaultNull: isSet(object.defaultNull) ? globalThis.Boolean(object.defaultNull) : undefined,
      defaultExpression: isSet(object.defaultExpression) ? globalThis.String(object.defaultExpression) : undefined,
      onUpdate: isSet(object.onUpdate) ? globalThis.String(object.onUpdate) : "",
      nullable: isSet(object.nullable) ? globalThis.Boolean(object.nullable) : false,
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      characterSet: isSet(object.characterSet) ? globalThis.String(object.characterSet) : "",
      collation: isSet(object.collation) ? globalThis.String(object.collation) : "",
      comment: isSet(object.comment) ? globalThis.String(object.comment) : "",
      userComment: isSet(object.userComment) ? globalThis.String(object.userComment) : "",
      generation: isSet(object.generation) ? GenerationMetadata.fromJSON(object.generation) : undefined,
    };
  },

  toJSON(message: ColumnMetadata): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.position !== 0) {
      obj.position = Math.round(message.position);
    }
    if (message.default !== undefined) {
      obj.default = message.default;
    }
    if (message.defaultNull !== undefined) {
      obj.defaultNull = message.defaultNull;
    }
    if (message.defaultExpression !== undefined) {
      obj.defaultExpression = message.defaultExpression;
    }
    if (message.onUpdate !== "") {
      obj.onUpdate = message.onUpdate;
    }
    if (message.nullable !== false) {
      obj.nullable = message.nullable;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.characterSet !== "") {
      obj.characterSet = message.characterSet;
    }
    if (message.collation !== "") {
      obj.collation = message.collation;
    }
    if (message.comment !== "") {
      obj.comment = message.comment;
    }
    if (message.userComment !== "") {
      obj.userComment = message.userComment;
    }
    if (message.generation !== undefined) {
      obj.generation = GenerationMetadata.toJSON(message.generation);
    }
    return obj;
  },

  create(base?: DeepPartial<ColumnMetadata>): ColumnMetadata {
    return ColumnMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ColumnMetadata>): ColumnMetadata {
    const message = createBaseColumnMetadata();
    message.name = object.name ?? "";
    message.position = object.position ?? 0;
    message.default = object.default ?? undefined;
    message.defaultNull = object.defaultNull ?? undefined;
    message.defaultExpression = object.defaultExpression ?? undefined;
    message.onUpdate = object.onUpdate ?? "";
    message.nullable = object.nullable ?? false;
    message.type = object.type ?? "";
    message.characterSet = object.characterSet ?? "";
    message.collation = object.collation ?? "";
    message.comment = object.comment ?? "";
    message.userComment = object.userComment ?? "";
    message.generation = (object.generation !== undefined && object.generation !== null)
      ? GenerationMetadata.fromPartial(object.generation)
      : undefined;
    return message;
  },
};

function createBaseGenerationMetadata(): GenerationMetadata {
  return { type: GenerationMetadata_Type.TYPE_UNSPECIFIED, expression: "" };
}

export const GenerationMetadata: MessageFns<GenerationMetadata> = {
  encode(message: GenerationMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== GenerationMetadata_Type.TYPE_UNSPECIFIED) {
      writer.uint32(8).int32(generationMetadata_TypeToNumber(message.type));
    }
    if (message.expression !== "") {
      writer.uint32(18).string(message.expression);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenerationMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenerationMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = generationMetadata_TypeFromJSON(reader.int32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.expression = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenerationMetadata {
    return {
      type: isSet(object.type)
        ? generationMetadata_TypeFromJSON(object.type)
        : GenerationMetadata_Type.TYPE_UNSPECIFIED,
      expression: isSet(object.expression) ? globalThis.String(object.expression) : "",
    };
  },

  toJSON(message: GenerationMetadata): unknown {
    const obj: any = {};
    if (message.type !== GenerationMetadata_Type.TYPE_UNSPECIFIED) {
      obj.type = generationMetadata_TypeToJSON(message.type);
    }
    if (message.expression !== "") {
      obj.expression = message.expression;
    }
    return obj;
  },

  create(base?: DeepPartial<GenerationMetadata>): GenerationMetadata {
    return GenerationMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GenerationMetadata>): GenerationMetadata {
    const message = createBaseGenerationMetadata();
    message.type = object.type ?? GenerationMetadata_Type.TYPE_UNSPECIFIED;
    message.expression = object.expression ?? "";
    return message;
  },
};

function createBaseViewMetadata(): ViewMetadata {
  return { name: "", definition: "", comment: "", dependentColumns: [], columns: [] };
}

export const ViewMetadata: MessageFns<ViewMetadata> = {
  encode(message: ViewMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.definition !== "") {
      writer.uint32(18).string(message.definition);
    }
    if (message.comment !== "") {
      writer.uint32(26).string(message.comment);
    }
    for (const v of message.dependentColumns) {
      DependentColumn.encode(v!, writer.uint32(34).fork()).join();
    }
    for (const v of message.columns) {
      ColumnMetadata.encode(v!, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ViewMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseViewMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.definition = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.comment = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.dependentColumns.push(DependentColumn.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.columns.push(ColumnMetadata.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ViewMetadata {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      definition: isSet(object.definition) ? globalThis.String(object.definition) : "",
      comment: isSet(object.comment) ? globalThis.String(object.comment) : "",
      dependentColumns: globalThis.Array.isArray(object?.dependentColumns)
        ? object.dependentColumns.map((e: any) => DependentColumn.fromJSON(e))
        : [],
      columns: globalThis.Array.isArray(object?.columns)
        ? object.columns.map((e: any) => ColumnMetadata.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ViewMetadata): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.definition !== "") {
      obj.definition = message.definition;
    }
    if (message.comment !== "") {
      obj.comment = message.comment;
    }
    if (message.dependentColumns?.length) {
      obj.dependentColumns = message.dependentColumns.map((e) => DependentColumn.toJSON(e));
    }
    if (message.columns?.length) {
      obj.columns = message.columns.map((e) => ColumnMetadata.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ViewMetadata>): ViewMetadata {
    return ViewMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ViewMetadata>): ViewMetadata {
    const message = createBaseViewMetadata();
    message.name = object.name ?? "";
    message.definition = object.definition ?? "";
    message.comment = object.comment ?? "";
    message.dependentColumns = object.dependentColumns?.map((e) => DependentColumn.fromPartial(e)) || [];
    message.columns = object.columns?.map((e) => ColumnMetadata.fromPartial(e)) || [];
    return message;
  },
};

function createBaseDependentColumn(): DependentColumn {
  return { schema: "", table: "", column: "" };
}

export const DependentColumn: MessageFns<DependentColumn> = {
  encode(message: DependentColumn, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.schema !== "") {
      writer.uint32(10).string(message.schema);
    }
    if (message.table !== "") {
      writer.uint32(18).string(message.table);
    }
    if (message.column !== "") {
      writer.uint32(26).string(message.column);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DependentColumn {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDependentColumn();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.schema = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.table = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.column = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DependentColumn {
    return {
      schema: isSet(object.schema) ? globalThis.String(object.schema) : "",
      table: isSet(object.table) ? globalThis.String(object.table) : "",
      column: isSet(object.column) ? globalThis.String(object.column) : "",
    };
  },

  toJSON(message: DependentColumn): unknown {
    const obj: any = {};
    if (message.schema !== "") {
      obj.schema = message.schema;
    }
    if (message.table !== "") {
      obj.table = message.table;
    }
    if (message.column !== "") {
      obj.column = message.column;
    }
    return obj;
  },

  create(base?: DeepPartial<DependentColumn>): DependentColumn {
    return DependentColumn.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DependentColumn>): DependentColumn {
    const message = createBaseDependentColumn();
    message.schema = object.schema ?? "";
    message.table = object.table ?? "";
    message.column = object.column ?? "";
    return message;
  },
};

function createBaseMaterializedViewMetadata(): MaterializedViewMetadata {
  return { name: "", definition: "", comment: "", dependentColumns: [] };
}

export const MaterializedViewMetadata: MessageFns<MaterializedViewMetadata> = {
  encode(message: MaterializedViewMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.definition !== "") {
      writer.uint32(18).string(message.definition);
    }
    if (message.comment !== "") {
      writer.uint32(26).string(message.comment);
    }
    for (const v of message.dependentColumns) {
      DependentColumn.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MaterializedViewMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMaterializedViewMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.definition = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.comment = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.dependentColumns.push(DependentColumn.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MaterializedViewMetadata {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      definition: isSet(object.definition) ? globalThis.String(object.definition) : "",
      comment: isSet(object.comment) ? globalThis.String(object.comment) : "",
      dependentColumns: globalThis.Array.isArray(object?.dependentColumns)
        ? object.dependentColumns.map((e: any) => DependentColumn.fromJSON(e))
        : [],
    };
  },

  toJSON(message: MaterializedViewMetadata): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.definition !== "") {
      obj.definition = message.definition;
    }
    if (message.comment !== "") {
      obj.comment = message.comment;
    }
    if (message.dependentColumns?.length) {
      obj.dependentColumns = message.dependentColumns.map((e) => DependentColumn.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<MaterializedViewMetadata>): MaterializedViewMetadata {
    return MaterializedViewMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MaterializedViewMetadata>): MaterializedViewMetadata {
    const message = createBaseMaterializedViewMetadata();
    message.name = object.name ?? "";
    message.definition = object.definition ?? "";
    message.comment = object.comment ?? "";
    message.dependentColumns = object.dependentColumns?.map((e) => DependentColumn.fromPartial(e)) || [];
    return message;
  },
};

function createBaseFunctionMetadata(): FunctionMetadata {
  return {
    name: "",
    definition: "",
    signature: "",
    characterSetClient: "",
    collationConnection: "",
    databaseCollation: "",
    sqlMode: "",
  };
}

export const FunctionMetadata: MessageFns<FunctionMetadata> = {
  encode(message: FunctionMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.definition !== "") {
      writer.uint32(18).string(message.definition);
    }
    if (message.signature !== "") {
      writer.uint32(26).string(message.signature);
    }
    if (message.characterSetClient !== "") {
      writer.uint32(34).string(message.characterSetClient);
    }
    if (message.collationConnection !== "") {
      writer.uint32(42).string(message.collationConnection);
    }
    if (message.databaseCollation !== "") {
      writer.uint32(50).string(message.databaseCollation);
    }
    if (message.sqlMode !== "") {
      writer.uint32(58).string(message.sqlMode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FunctionMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFunctionMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.definition = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.signature = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.characterSetClient = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.collationConnection = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.databaseCollation = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.sqlMode = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FunctionMetadata {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      definition: isSet(object.definition) ? globalThis.String(object.definition) : "",
      signature: isSet(object.signature) ? globalThis.String(object.signature) : "",
      characterSetClient: isSet(object.characterSetClient) ? globalThis.String(object.characterSetClient) : "",
      collationConnection: isSet(object.collationConnection) ? globalThis.String(object.collationConnection) : "",
      databaseCollation: isSet(object.databaseCollation) ? globalThis.String(object.databaseCollation) : "",
      sqlMode: isSet(object.sqlMode) ? globalThis.String(object.sqlMode) : "",
    };
  },

  toJSON(message: FunctionMetadata): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.definition !== "") {
      obj.definition = message.definition;
    }
    if (message.signature !== "") {
      obj.signature = message.signature;
    }
    if (message.characterSetClient !== "") {
      obj.characterSetClient = message.characterSetClient;
    }
    if (message.collationConnection !== "") {
      obj.collationConnection = message.collationConnection;
    }
    if (message.databaseCollation !== "") {
      obj.databaseCollation = message.databaseCollation;
    }
    if (message.sqlMode !== "") {
      obj.sqlMode = message.sqlMode;
    }
    return obj;
  },

  create(base?: DeepPartial<FunctionMetadata>): FunctionMetadata {
    return FunctionMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FunctionMetadata>): FunctionMetadata {
    const message = createBaseFunctionMetadata();
    message.name = object.name ?? "";
    message.definition = object.definition ?? "";
    message.signature = object.signature ?? "";
    message.characterSetClient = object.characterSetClient ?? "";
    message.collationConnection = object.collationConnection ?? "";
    message.databaseCollation = object.databaseCollation ?? "";
    message.sqlMode = object.sqlMode ?? "";
    return message;
  },
};

function createBaseProcedureMetadata(): ProcedureMetadata {
  return {
    name: "",
    definition: "",
    signature: "",
    characterSetClient: "",
    collationConnection: "",
    databaseCollation: "",
    sqlMode: "",
  };
}

export const ProcedureMetadata: MessageFns<ProcedureMetadata> = {
  encode(message: ProcedureMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.definition !== "") {
      writer.uint32(18).string(message.definition);
    }
    if (message.signature !== "") {
      writer.uint32(26).string(message.signature);
    }
    if (message.characterSetClient !== "") {
      writer.uint32(34).string(message.characterSetClient);
    }
    if (message.collationConnection !== "") {
      writer.uint32(42).string(message.collationConnection);
    }
    if (message.databaseCollation !== "") {
      writer.uint32(50).string(message.databaseCollation);
    }
    if (message.sqlMode !== "") {
      writer.uint32(58).string(message.sqlMode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProcedureMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProcedureMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.definition = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.signature = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.characterSetClient = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.collationConnection = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.databaseCollation = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.sqlMode = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProcedureMetadata {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      definition: isSet(object.definition) ? globalThis.String(object.definition) : "",
      signature: isSet(object.signature) ? globalThis.String(object.signature) : "",
      characterSetClient: isSet(object.characterSetClient) ? globalThis.String(object.characterSetClient) : "",
      collationConnection: isSet(object.collationConnection) ? globalThis.String(object.collationConnection) : "",
      databaseCollation: isSet(object.databaseCollation) ? globalThis.String(object.databaseCollation) : "",
      sqlMode: isSet(object.sqlMode) ? globalThis.String(object.sqlMode) : "",
    };
  },

  toJSON(message: ProcedureMetadata): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.definition !== "") {
      obj.definition = message.definition;
    }
    if (message.signature !== "") {
      obj.signature = message.signature;
    }
    if (message.characterSetClient !== "") {
      obj.characterSetClient = message.characterSetClient;
    }
    if (message.collationConnection !== "") {
      obj.collationConnection = message.collationConnection;
    }
    if (message.databaseCollation !== "") {
      obj.databaseCollation = message.databaseCollation;
    }
    if (message.sqlMode !== "") {
      obj.sqlMode = message.sqlMode;
    }
    return obj;
  },

  create(base?: DeepPartial<ProcedureMetadata>): ProcedureMetadata {
    return ProcedureMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ProcedureMetadata>): ProcedureMetadata {
    const message = createBaseProcedureMetadata();
    message.name = object.name ?? "";
    message.definition = object.definition ?? "";
    message.signature = object.signature ?? "";
    message.characterSetClient = object.characterSetClient ?? "";
    message.collationConnection = object.collationConnection ?? "";
    message.databaseCollation = object.databaseCollation ?? "";
    message.sqlMode = object.sqlMode ?? "";
    return message;
  },
};

function createBasePackageMetadata(): PackageMetadata {
  return { name: "", definition: "" };
}

export const PackageMetadata: MessageFns<PackageMetadata> = {
  encode(message: PackageMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.definition !== "") {
      writer.uint32(18).string(message.definition);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PackageMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePackageMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.definition = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PackageMetadata {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      definition: isSet(object.definition) ? globalThis.String(object.definition) : "",
    };
  },

  toJSON(message: PackageMetadata): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.definition !== "") {
      obj.definition = message.definition;
    }
    return obj;
  },

  create(base?: DeepPartial<PackageMetadata>): PackageMetadata {
    return PackageMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PackageMetadata>): PackageMetadata {
    const message = createBasePackageMetadata();
    message.name = object.name ?? "";
    message.definition = object.definition ?? "";
    return message;
  },
};

function createBaseIndexMetadata(): IndexMetadata {
  return {
    name: "",
    expressions: [],
    keyLength: [],
    descending: [],
    type: "",
    unique: false,
    primary: false,
    visible: false,
    comment: "",
    definition: "",
    parentIndexSchema: "",
    parentIndexName: "",
    granularity: Long.ZERO,
  };
}

export const IndexMetadata: MessageFns<IndexMetadata> = {
  encode(message: IndexMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    for (const v of message.expressions) {
      writer.uint32(18).string(v!);
    }
    writer.uint32(74).fork();
    for (const v of message.keyLength) {
      writer.int64(v.toString());
    }
    writer.join();
    writer.uint32(82).fork();
    for (const v of message.descending) {
      writer.bool(v);
    }
    writer.join();
    if (message.type !== "") {
      writer.uint32(26).string(message.type);
    }
    if (message.unique !== false) {
      writer.uint32(32).bool(message.unique);
    }
    if (message.primary !== false) {
      writer.uint32(40).bool(message.primary);
    }
    if (message.visible !== false) {
      writer.uint32(48).bool(message.visible);
    }
    if (message.comment !== "") {
      writer.uint32(58).string(message.comment);
    }
    if (message.definition !== "") {
      writer.uint32(66).string(message.definition);
    }
    if (message.parentIndexSchema !== "") {
      writer.uint32(90).string(message.parentIndexSchema);
    }
    if (message.parentIndexName !== "") {
      writer.uint32(98).string(message.parentIndexName);
    }
    if (!message.granularity.equals(Long.ZERO)) {
      writer.uint32(104).int64(message.granularity.toString());
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): IndexMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseIndexMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.expressions.push(reader.string());
          continue;
        }
        case 9: {
          if (tag === 72) {
            message.keyLength.push(Long.fromString(reader.int64().toString()));

            continue;
          }

          if (tag === 74) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.keyLength.push(Long.fromString(reader.int64().toString()));
            }

            continue;
          }

          break;
        }
        case 10: {
          if (tag === 80) {
            message.descending.push(reader.bool());

            continue;
          }

          if (tag === 82) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.descending.push(reader.bool());
            }

            continue;
          }

          break;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.type = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.unique = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.primary = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.visible = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.comment = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.definition = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.parentIndexSchema = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.parentIndexName = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.granularity = Long.fromString(reader.int64().toString());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): IndexMetadata {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      expressions: globalThis.Array.isArray(object?.expressions)
        ? object.expressions.map((e: any) => globalThis.String(e))
        : [],
      keyLength: globalThis.Array.isArray(object?.keyLength) ? object.keyLength.map((e: any) => Long.fromValue(e)) : [],
      descending: globalThis.Array.isArray(object?.descending)
        ? object.descending.map((e: any) => globalThis.Boolean(e))
        : [],
      type: isSet(object.type) ? globalThis.String(object.type) : "",
      unique: isSet(object.unique) ? globalThis.Boolean(object.unique) : false,
      primary: isSet(object.primary) ? globalThis.Boolean(object.primary) : false,
      visible: isSet(object.visible) ? globalThis.Boolean(object.visible) : false,
      comment: isSet(object.comment) ? globalThis.String(object.comment) : "",
      definition: isSet(object.definition) ? globalThis.String(object.definition) : "",
      parentIndexSchema: isSet(object.parentIndexSchema) ? globalThis.String(object.parentIndexSchema) : "",
      parentIndexName: isSet(object.parentIndexName) ? globalThis.String(object.parentIndexName) : "",
      granularity: isSet(object.granularity) ? Long.fromValue(object.granularity) : Long.ZERO,
    };
  },

  toJSON(message: IndexMetadata): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.expressions?.length) {
      obj.expressions = message.expressions;
    }
    if (message.keyLength?.length) {
      obj.keyLength = message.keyLength.map((e) => (e || Long.ZERO).toString());
    }
    if (message.descending?.length) {
      obj.descending = message.descending;
    }
    if (message.type !== "") {
      obj.type = message.type;
    }
    if (message.unique !== false) {
      obj.unique = message.unique;
    }
    if (message.primary !== false) {
      obj.primary = message.primary;
    }
    if (message.visible !== false) {
      obj.visible = message.visible;
    }
    if (message.comment !== "") {
      obj.comment = message.comment;
    }
    if (message.definition !== "") {
      obj.definition = message.definition;
    }
    if (message.parentIndexSchema !== "") {
      obj.parentIndexSchema = message.parentIndexSchema;
    }
    if (message.parentIndexName !== "") {
      obj.parentIndexName = message.parentIndexName;
    }
    if (!message.granularity.equals(Long.ZERO)) {
      obj.granularity = (message.granularity || Long.ZERO).toString();
    }
    return obj;
  },

  create(base?: DeepPartial<IndexMetadata>): IndexMetadata {
    return IndexMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<IndexMetadata>): IndexMetadata {
    const message = createBaseIndexMetadata();
    message.name = object.name ?? "";
    message.expressions = object.expressions?.map((e) => e) || [];
    message.keyLength = object.keyLength?.map((e) => Long.fromValue(e)) || [];
    message.descending = object.descending?.map((e) => e) || [];
    message.type = object.type ?? "";
    message.unique = object.unique ?? false;
    message.primary = object.primary ?? false;
    message.visible = object.visible ?? false;
    message.comment = object.comment ?? "";
    message.definition = object.definition ?? "";
    message.parentIndexSchema = object.parentIndexSchema ?? "";
    message.parentIndexName = object.parentIndexName ?? "";
    message.granularity = (object.granularity !== undefined && object.granularity !== null)
      ? Long.fromValue(object.granularity)
      : Long.ZERO;
    return message;
  },
};

function createBaseExtensionMetadata(): ExtensionMetadata {
  return { name: "", schema: "", version: "", description: "" };
}

export const ExtensionMetadata: MessageFns<ExtensionMetadata> = {
  encode(message: ExtensionMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.schema !== "") {
      writer.uint32(18).string(message.schema);
    }
    if (message.version !== "") {
      writer.uint32(26).string(message.version);
    }
    if (message.description !== "") {
      writer.uint32(34).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExtensionMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExtensionMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.schema = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.version = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.description = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExtensionMetadata {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      schema: isSet(object.schema) ? globalThis.String(object.schema) : "",
      version: isSet(object.version) ? globalThis.String(object.version) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
    };
  },

  toJSON(message: ExtensionMetadata): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.schema !== "") {
      obj.schema = message.schema;
    }
    if (message.version !== "") {
      obj.version = message.version;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    return obj;
  },

  create(base?: DeepPartial<ExtensionMetadata>): ExtensionMetadata {
    return ExtensionMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ExtensionMetadata>): ExtensionMetadata {
    const message = createBaseExtensionMetadata();
    message.name = object.name ?? "";
    message.schema = object.schema ?? "";
    message.version = object.version ?? "";
    message.description = object.description ?? "";
    return message;
  },
};

function createBaseForeignKeyMetadata(): ForeignKeyMetadata {
  return {
    name: "",
    columns: [],
    referencedSchema: "",
    referencedTable: "",
    referencedColumns: [],
    onDelete: "",
    onUpdate: "",
    matchType: "",
  };
}

export const ForeignKeyMetadata: MessageFns<ForeignKeyMetadata> = {
  encode(message: ForeignKeyMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    for (const v of message.columns) {
      writer.uint32(18).string(v!);
    }
    if (message.referencedSchema !== "") {
      writer.uint32(26).string(message.referencedSchema);
    }
    if (message.referencedTable !== "") {
      writer.uint32(34).string(message.referencedTable);
    }
    for (const v of message.referencedColumns) {
      writer.uint32(42).string(v!);
    }
    if (message.onDelete !== "") {
      writer.uint32(50).string(message.onDelete);
    }
    if (message.onUpdate !== "") {
      writer.uint32(58).string(message.onUpdate);
    }
    if (message.matchType !== "") {
      writer.uint32(66).string(message.matchType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ForeignKeyMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseForeignKeyMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.columns.push(reader.string());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.referencedSchema = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.referencedTable = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.referencedColumns.push(reader.string());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.onDelete = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.onUpdate = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.matchType = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ForeignKeyMetadata {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      columns: globalThis.Array.isArray(object?.columns) ? object.columns.map((e: any) => globalThis.String(e)) : [],
      referencedSchema: isSet(object.referencedSchema) ? globalThis.String(object.referencedSchema) : "",
      referencedTable: isSet(object.referencedTable) ? globalThis.String(object.referencedTable) : "",
      referencedColumns: globalThis.Array.isArray(object?.referencedColumns)
        ? object.referencedColumns.map((e: any) => globalThis.String(e))
        : [],
      onDelete: isSet(object.onDelete) ? globalThis.String(object.onDelete) : "",
      onUpdate: isSet(object.onUpdate) ? globalThis.String(object.onUpdate) : "",
      matchType: isSet(object.matchType) ? globalThis.String(object.matchType) : "",
    };
  },

  toJSON(message: ForeignKeyMetadata): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.columns?.length) {
      obj.columns = message.columns;
    }
    if (message.referencedSchema !== "") {
      obj.referencedSchema = message.referencedSchema;
    }
    if (message.referencedTable !== "") {
      obj.referencedTable = message.referencedTable;
    }
    if (message.referencedColumns?.length) {
      obj.referencedColumns = message.referencedColumns;
    }
    if (message.onDelete !== "") {
      obj.onDelete = message.onDelete;
    }
    if (message.onUpdate !== "") {
      obj.onUpdate = message.onUpdate;
    }
    if (message.matchType !== "") {
      obj.matchType = message.matchType;
    }
    return obj;
  },

  create(base?: DeepPartial<ForeignKeyMetadata>): ForeignKeyMetadata {
    return ForeignKeyMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ForeignKeyMetadata>): ForeignKeyMetadata {
    const message = createBaseForeignKeyMetadata();
    message.name = object.name ?? "";
    message.columns = object.columns?.map((e) => e) || [];
    message.referencedSchema = object.referencedSchema ?? "";
    message.referencedTable = object.referencedTable ?? "";
    message.referencedColumns = object.referencedColumns?.map((e) => e) || [];
    message.onDelete = object.onDelete ?? "";
    message.onUpdate = object.onUpdate ?? "";
    message.matchType = object.matchType ?? "";
    return message;
  },
};

function createBaseInstanceRoleMetadata(): InstanceRoleMetadata {
  return { name: "", grant: "" };
}

export const InstanceRoleMetadata: MessageFns<InstanceRoleMetadata> = {
  encode(message: InstanceRoleMetadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.grant !== "") {
      writer.uint32(58).string(message.grant);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InstanceRoleMetadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInstanceRoleMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.grant = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InstanceRoleMetadata {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      grant: isSet(object.grant) ? globalThis.String(object.grant) : "",
    };
  },

  toJSON(message: InstanceRoleMetadata): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.grant !== "") {
      obj.grant = message.grant;
    }
    return obj;
  },

  create(base?: DeepPartial<InstanceRoleMetadata>): InstanceRoleMetadata {
    return InstanceRoleMetadata.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<InstanceRoleMetadata>): InstanceRoleMetadata {
    const message = createBaseInstanceRoleMetadata();
    message.name = object.name ?? "";
    message.grant = object.grant ?? "";
    return message;
  },
};

function createBaseSecrets(): Secrets {
  return { items: [] };
}

export const Secrets: MessageFns<Secrets> = {
  encode(message: Secrets, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.items) {
      SecretItem.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Secrets {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSecrets();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.items.push(SecretItem.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Secrets {
    return {
      items: globalThis.Array.isArray(object?.items) ? object.items.map((e: any) => SecretItem.fromJSON(e)) : [],
    };
  },

  toJSON(message: Secrets): unknown {
    const obj: any = {};
    if (message.items?.length) {
      obj.items = message.items.map((e) => SecretItem.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Secrets>): Secrets {
    return Secrets.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Secrets>): Secrets {
    const message = createBaseSecrets();
    message.items = object.items?.map((e) => SecretItem.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSecretItem(): SecretItem {
  return { name: "", value: "", description: "" };
}

export const SecretItem: MessageFns<SecretItem> = {
  encode(message: SecretItem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SecretItem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSecretItem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SecretItem {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
    };
  },

  toJSON(message: SecretItem): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    return obj;
  },

  create(base?: DeepPartial<SecretItem>): SecretItem {
    return SecretItem.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SecretItem>): SecretItem {
    const message = createBaseSecretItem();
    message.name = object.name ?? "";
    message.value = object.value ?? "";
    message.description = object.description ?? "";
    return message;
  },
};

function createBaseDatabaseConfig(): DatabaseConfig {
  return { name: "", schemaConfigs: [] };
}

export const DatabaseConfig: MessageFns<DatabaseConfig> = {
  encode(message: DatabaseConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    for (const v of message.schemaConfigs) {
      SchemaConfig.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DatabaseConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDatabaseConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.schemaConfigs.push(SchemaConfig.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DatabaseConfig {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      schemaConfigs: globalThis.Array.isArray(object?.schemaConfigs)
        ? object.schemaConfigs.map((e: any) => SchemaConfig.fromJSON(e))
        : [],
    };
  },

  toJSON(message: DatabaseConfig): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.schemaConfigs?.length) {
      obj.schemaConfigs = message.schemaConfigs.map((e) => SchemaConfig.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<DatabaseConfig>): DatabaseConfig {
    return DatabaseConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DatabaseConfig>): DatabaseConfig {
    const message = createBaseDatabaseConfig();
    message.name = object.name ?? "";
    message.schemaConfigs = object.schemaConfigs?.map((e) => SchemaConfig.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSchemaConfig(): SchemaConfig {
  return { name: "", tableConfigs: [], functionConfigs: [], procedureConfigs: [], viewConfigs: [] };
}

export const SchemaConfig: MessageFns<SchemaConfig> = {
  encode(message: SchemaConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    for (const v of message.tableConfigs) {
      TableConfig.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.functionConfigs) {
      FunctionConfig.encode(v!, writer.uint32(26).fork()).join();
    }
    for (const v of message.procedureConfigs) {
      ProcedureConfig.encode(v!, writer.uint32(34).fork()).join();
    }
    for (const v of message.viewConfigs) {
      ViewConfig.encode(v!, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SchemaConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSchemaConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.tableConfigs.push(TableConfig.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.functionConfigs.push(FunctionConfig.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.procedureConfigs.push(ProcedureConfig.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.viewConfigs.push(ViewConfig.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SchemaConfig {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      tableConfigs: globalThis.Array.isArray(object?.tableConfigs)
        ? object.tableConfigs.map((e: any) => TableConfig.fromJSON(e))
        : [],
      functionConfigs: globalThis.Array.isArray(object?.functionConfigs)
        ? object.functionConfigs.map((e: any) => FunctionConfig.fromJSON(e))
        : [],
      procedureConfigs: globalThis.Array.isArray(object?.procedureConfigs)
        ? object.procedureConfigs.map((e: any) => ProcedureConfig.fromJSON(e))
        : [],
      viewConfigs: globalThis.Array.isArray(object?.viewConfigs)
        ? object.viewConfigs.map((e: any) => ViewConfig.fromJSON(e))
        : [],
    };
  },

  toJSON(message: SchemaConfig): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.tableConfigs?.length) {
      obj.tableConfigs = message.tableConfigs.map((e) => TableConfig.toJSON(e));
    }
    if (message.functionConfigs?.length) {
      obj.functionConfigs = message.functionConfigs.map((e) => FunctionConfig.toJSON(e));
    }
    if (message.procedureConfigs?.length) {
      obj.procedureConfigs = message.procedureConfigs.map((e) => ProcedureConfig.toJSON(e));
    }
    if (message.viewConfigs?.length) {
      obj.viewConfigs = message.viewConfigs.map((e) => ViewConfig.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<SchemaConfig>): SchemaConfig {
    return SchemaConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SchemaConfig>): SchemaConfig {
    const message = createBaseSchemaConfig();
    message.name = object.name ?? "";
    message.tableConfigs = object.tableConfigs?.map((e) => TableConfig.fromPartial(e)) || [];
    message.functionConfigs = object.functionConfigs?.map((e) => FunctionConfig.fromPartial(e)) || [];
    message.procedureConfigs = object.procedureConfigs?.map((e) => ProcedureConfig.fromPartial(e)) || [];
    message.viewConfigs = object.viewConfigs?.map((e) => ViewConfig.fromPartial(e)) || [];
    return message;
  },
};

function createBaseTableConfig(): TableConfig {
  return { name: "", columnConfigs: [], classificationId: "", updater: "", sourceBranch: "", updateTime: undefined };
}

export const TableConfig: MessageFns<TableConfig> = {
  encode(message: TableConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    for (const v of message.columnConfigs) {
      ColumnConfig.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.classificationId !== "") {
      writer.uint32(26).string(message.classificationId);
    }
    if (message.updater !== "") {
      writer.uint32(34).string(message.updater);
    }
    if (message.sourceBranch !== "") {
      writer.uint32(50).string(message.sourceBranch);
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(message.updateTime, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TableConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTableConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.columnConfigs.push(ColumnConfig.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.classificationId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.updater = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.sourceBranch = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.updateTime = Timestamp.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TableConfig {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      columnConfigs: globalThis.Array.isArray(object?.columnConfigs)
        ? object.columnConfigs.map((e: any) => ColumnConfig.fromJSON(e))
        : [],
      classificationId: isSet(object.classificationId) ? globalThis.String(object.classificationId) : "",
      updater: isSet(object.updater) ? globalThis.String(object.updater) : "",
      sourceBranch: isSet(object.sourceBranch) ? globalThis.String(object.sourceBranch) : "",
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
    };
  },

  toJSON(message: TableConfig): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.columnConfigs?.length) {
      obj.columnConfigs = message.columnConfigs.map((e) => ColumnConfig.toJSON(e));
    }
    if (message.classificationId !== "") {
      obj.classificationId = message.classificationId;
    }
    if (message.updater !== "") {
      obj.updater = message.updater;
    }
    if (message.sourceBranch !== "") {
      obj.sourceBranch = message.sourceBranch;
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = fromTimestamp(message.updateTime).toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<TableConfig>): TableConfig {
    return TableConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TableConfig>): TableConfig {
    const message = createBaseTableConfig();
    message.name = object.name ?? "";
    message.columnConfigs = object.columnConfigs?.map((e) => ColumnConfig.fromPartial(e)) || [];
    message.classificationId = object.classificationId ?? "";
    message.updater = object.updater ?? "";
    message.sourceBranch = object.sourceBranch ?? "";
    message.updateTime = (object.updateTime !== undefined && object.updateTime !== null)
      ? Timestamp.fromPartial(object.updateTime)
      : undefined;
    return message;
  },
};

function createBaseFunctionConfig(): FunctionConfig {
  return { name: "", updater: "", sourceBranch: "", updateTime: undefined };
}

export const FunctionConfig: MessageFns<FunctionConfig> = {
  encode(message: FunctionConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.updater !== "") {
      writer.uint32(18).string(message.updater);
    }
    if (message.sourceBranch !== "") {
      writer.uint32(34).string(message.sourceBranch);
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(message.updateTime, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FunctionConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFunctionConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.updater = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.sourceBranch = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.updateTime = Timestamp.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FunctionConfig {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      updater: isSet(object.updater) ? globalThis.String(object.updater) : "",
      sourceBranch: isSet(object.sourceBranch) ? globalThis.String(object.sourceBranch) : "",
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
    };
  },

  toJSON(message: FunctionConfig): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.updater !== "") {
      obj.updater = message.updater;
    }
    if (message.sourceBranch !== "") {
      obj.sourceBranch = message.sourceBranch;
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = fromTimestamp(message.updateTime).toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<FunctionConfig>): FunctionConfig {
    return FunctionConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FunctionConfig>): FunctionConfig {
    const message = createBaseFunctionConfig();
    message.name = object.name ?? "";
    message.updater = object.updater ?? "";
    message.sourceBranch = object.sourceBranch ?? "";
    message.updateTime = (object.updateTime !== undefined && object.updateTime !== null)
      ? Timestamp.fromPartial(object.updateTime)
      : undefined;
    return message;
  },
};

function createBaseProcedureConfig(): ProcedureConfig {
  return { name: "", updater: "", sourceBranch: "", updateTime: undefined };
}

export const ProcedureConfig: MessageFns<ProcedureConfig> = {
  encode(message: ProcedureConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.updater !== "") {
      writer.uint32(18).string(message.updater);
    }
    if (message.sourceBranch !== "") {
      writer.uint32(34).string(message.sourceBranch);
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(message.updateTime, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProcedureConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProcedureConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.updater = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.sourceBranch = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.updateTime = Timestamp.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProcedureConfig {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      updater: isSet(object.updater) ? globalThis.String(object.updater) : "",
      sourceBranch: isSet(object.sourceBranch) ? globalThis.String(object.sourceBranch) : "",
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
    };
  },

  toJSON(message: ProcedureConfig): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.updater !== "") {
      obj.updater = message.updater;
    }
    if (message.sourceBranch !== "") {
      obj.sourceBranch = message.sourceBranch;
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = fromTimestamp(message.updateTime).toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<ProcedureConfig>): ProcedureConfig {
    return ProcedureConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ProcedureConfig>): ProcedureConfig {
    const message = createBaseProcedureConfig();
    message.name = object.name ?? "";
    message.updater = object.updater ?? "";
    message.sourceBranch = object.sourceBranch ?? "";
    message.updateTime = (object.updateTime !== undefined && object.updateTime !== null)
      ? Timestamp.fromPartial(object.updateTime)
      : undefined;
    return message;
  },
};

function createBaseViewConfig(): ViewConfig {
  return { name: "", updater: "", sourceBranch: "", updateTime: undefined };
}

export const ViewConfig: MessageFns<ViewConfig> = {
  encode(message: ViewConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.updater !== "") {
      writer.uint32(18).string(message.updater);
    }
    if (message.sourceBranch !== "") {
      writer.uint32(34).string(message.sourceBranch);
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(message.updateTime, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ViewConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseViewConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.updater = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.sourceBranch = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.updateTime = Timestamp.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ViewConfig {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      updater: isSet(object.updater) ? globalThis.String(object.updater) : "",
      sourceBranch: isSet(object.sourceBranch) ? globalThis.String(object.sourceBranch) : "",
      updateTime: isSet(object.updateTime) ? fromJsonTimestamp(object.updateTime) : undefined,
    };
  },

  toJSON(message: ViewConfig): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.updater !== "") {
      obj.updater = message.updater;
    }
    if (message.sourceBranch !== "") {
      obj.sourceBranch = message.sourceBranch;
    }
    if (message.updateTime !== undefined) {
      obj.updateTime = fromTimestamp(message.updateTime).toISOString();
    }
    return obj;
  },

  create(base?: DeepPartial<ViewConfig>): ViewConfig {
    return ViewConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ViewConfig>): ViewConfig {
    const message = createBaseViewConfig();
    message.name = object.name ?? "";
    message.updater = object.updater ?? "";
    message.sourceBranch = object.sourceBranch ?? "";
    message.updateTime = (object.updateTime !== undefined && object.updateTime !== null)
      ? Timestamp.fromPartial(object.updateTime)
      : undefined;
    return message;
  },
};

function createBaseColumnConfig(): ColumnConfig {
  return {
    name: "",
    semanticTypeId: "",
    labels: {},
    classificationId: "",
    maskingLevel: MaskingLevel.MASKING_LEVEL_UNSPECIFIED,
    fullMaskingAlgorithmId: "",
    partialMaskingAlgorithmId: "",
  };
}

export const ColumnConfig: MessageFns<ColumnConfig> = {
  encode(message: ColumnConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.semanticTypeId !== "") {
      writer.uint32(18).string(message.semanticTypeId);
    }
    Object.entries(message.labels).forEach(([key, value]) => {
      ColumnConfig_LabelsEntry.encode({ key: key as any, value }, writer.uint32(26).fork()).join();
    });
    if (message.classificationId !== "") {
      writer.uint32(34).string(message.classificationId);
    }
    if (message.maskingLevel !== MaskingLevel.MASKING_LEVEL_UNSPECIFIED) {
      writer.uint32(40).int32(maskingLevelToNumber(message.maskingLevel));
    }
    if (message.fullMaskingAlgorithmId !== "") {
      writer.uint32(50).string(message.fullMaskingAlgorithmId);
    }
    if (message.partialMaskingAlgorithmId !== "") {
      writer.uint32(58).string(message.partialMaskingAlgorithmId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ColumnConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseColumnConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.semanticTypeId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          const entry3 = ColumnConfig_LabelsEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.labels[entry3.key] = entry3.value;
          }
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.classificationId = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.maskingLevel = maskingLevelFromJSON(reader.int32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.fullMaskingAlgorithmId = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.partialMaskingAlgorithmId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ColumnConfig {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      semanticTypeId: isSet(object.semanticTypeId) ? globalThis.String(object.semanticTypeId) : "",
      labels: isObject(object.labels)
        ? Object.entries(object.labels).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      classificationId: isSet(object.classificationId) ? globalThis.String(object.classificationId) : "",
      maskingLevel: isSet(object.maskingLevel)
        ? maskingLevelFromJSON(object.maskingLevel)
        : MaskingLevel.MASKING_LEVEL_UNSPECIFIED,
      fullMaskingAlgorithmId: isSet(object.fullMaskingAlgorithmId)
        ? globalThis.String(object.fullMaskingAlgorithmId)
        : "",
      partialMaskingAlgorithmId: isSet(object.partialMaskingAlgorithmId)
        ? globalThis.String(object.partialMaskingAlgorithmId)
        : "",
    };
  },

  toJSON(message: ColumnConfig): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.semanticTypeId !== "") {
      obj.semanticTypeId = message.semanticTypeId;
    }
    if (message.labels) {
      const entries = Object.entries(message.labels);
      if (entries.length > 0) {
        obj.labels = {};
        entries.forEach(([k, v]) => {
          obj.labels[k] = v;
        });
      }
    }
    if (message.classificationId !== "") {
      obj.classificationId = message.classificationId;
    }
    if (message.maskingLevel !== MaskingLevel.MASKING_LEVEL_UNSPECIFIED) {
      obj.maskingLevel = maskingLevelToJSON(message.maskingLevel);
    }
    if (message.fullMaskingAlgorithmId !== "") {
      obj.fullMaskingAlgorithmId = message.fullMaskingAlgorithmId;
    }
    if (message.partialMaskingAlgorithmId !== "") {
      obj.partialMaskingAlgorithmId = message.partialMaskingAlgorithmId;
    }
    return obj;
  },

  create(base?: DeepPartial<ColumnConfig>): ColumnConfig {
    return ColumnConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ColumnConfig>): ColumnConfig {
    const message = createBaseColumnConfig();
    message.name = object.name ?? "";
    message.semanticTypeId = object.semanticTypeId ?? "";
    message.labels = Object.entries(object.labels ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.classificationId = object.classificationId ?? "";
    message.maskingLevel = object.maskingLevel ?? MaskingLevel.MASKING_LEVEL_UNSPECIFIED;
    message.fullMaskingAlgorithmId = object.fullMaskingAlgorithmId ?? "";
    message.partialMaskingAlgorithmId = object.partialMaskingAlgorithmId ?? "";
    return message;
  },
};

function createBaseColumnConfig_LabelsEntry(): ColumnConfig_LabelsEntry {
  return { key: "", value: "" };
}

export const ColumnConfig_LabelsEntry: MessageFns<ColumnConfig_LabelsEntry> = {
  encode(message: ColumnConfig_LabelsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ColumnConfig_LabelsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseColumnConfig_LabelsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ColumnConfig_LabelsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: ColumnConfig_LabelsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<ColumnConfig_LabelsEntry>): ColumnConfig_LabelsEntry {
    return ColumnConfig_LabelsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ColumnConfig_LabelsEntry>): ColumnConfig_LabelsEntry {
    const message = createBaseColumnConfig_LabelsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = numberToLong(Math.trunc(date.getTime() / 1_000));
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds.toNumber() || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Timestamp {
  if (o instanceof globalThis.Date) {
    return toTimestamp(o);
  } else if (typeof o === "string") {
    return toTimestamp(new globalThis.Date(o));
  } else {
    return Timestamp.fromJSON(o);
  }
}

function numberToLong(number: number) {
  return Long.fromNumber(number);
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
