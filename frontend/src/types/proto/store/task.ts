// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: store/task.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { ExportFormat, exportFormatFromJSON, exportFormatToJSON, exportFormatToNumber } from "./common";
import { PreUpdateBackupDetail } from "./plan_check_run";

export const protobufPackage = "bytebase.store";

export interface TaskPayload {
  /** common fields */
  skipped: boolean;
  skippedReason: string;
  specId: string;
  sheetId: number;
  /** Create database fields. */
  environmentId: string;
  databaseName: string;
  tableName: string;
  characterSet: string;
  collation: string;
  /** Update database fields. */
  schemaVersion: string;
  preUpdateBackupDetail:
    | PreUpdateBackupDetail
    | undefined;
  /** ghost flags. */
  flags: { [key: string]: string };
  taskReleaseSource:
    | TaskReleaseSource
    | undefined;
  /** Export data fields. */
  password: string;
  format: ExportFormat;
}

export interface TaskPayload_FlagsEntry {
  key: string;
  value: string;
}

export interface TaskReleaseSource {
  /** Format: projects/{project}/releases/{release}/files/{id} */
  file: string;
}

function createBaseTaskPayload(): TaskPayload {
  return {
    skipped: false,
    skippedReason: "",
    specId: "",
    sheetId: 0,
    environmentId: "",
    databaseName: "",
    tableName: "",
    characterSet: "",
    collation: "",
    schemaVersion: "",
    preUpdateBackupDetail: undefined,
    flags: {},
    taskReleaseSource: undefined,
    password: "",
    format: ExportFormat.FORMAT_UNSPECIFIED,
  };
}

export const TaskPayload: MessageFns<TaskPayload> = {
  encode(message: TaskPayload, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.skipped !== false) {
      writer.uint32(8).bool(message.skipped);
    }
    if (message.skippedReason !== "") {
      writer.uint32(18).string(message.skippedReason);
    }
    if (message.specId !== "") {
      writer.uint32(26).string(message.specId);
    }
    if (message.sheetId !== 0) {
      writer.uint32(32).int32(message.sheetId);
    }
    if (message.environmentId !== "") {
      writer.uint32(42).string(message.environmentId);
    }
    if (message.databaseName !== "") {
      writer.uint32(50).string(message.databaseName);
    }
    if (message.tableName !== "") {
      writer.uint32(58).string(message.tableName);
    }
    if (message.characterSet !== "") {
      writer.uint32(66).string(message.characterSet);
    }
    if (message.collation !== "") {
      writer.uint32(74).string(message.collation);
    }
    if (message.schemaVersion !== "") {
      writer.uint32(82).string(message.schemaVersion);
    }
    if (message.preUpdateBackupDetail !== undefined) {
      PreUpdateBackupDetail.encode(message.preUpdateBackupDetail, writer.uint32(90).fork()).join();
    }
    Object.entries(message.flags).forEach(([key, value]) => {
      TaskPayload_FlagsEntry.encode({ key: key as any, value }, writer.uint32(98).fork()).join();
    });
    if (message.taskReleaseSource !== undefined) {
      TaskReleaseSource.encode(message.taskReleaseSource, writer.uint32(106).fork()).join();
    }
    if (message.password !== "") {
      writer.uint32(114).string(message.password);
    }
    if (message.format !== ExportFormat.FORMAT_UNSPECIFIED) {
      writer.uint32(120).int32(exportFormatToNumber(message.format));
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TaskPayload {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTaskPayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.skipped = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.skippedReason = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.specId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.sheetId = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.environmentId = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.databaseName = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.tableName = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.characterSet = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.collation = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.schemaVersion = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.preUpdateBackupDetail = PreUpdateBackupDetail.decode(reader, reader.uint32());
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          const entry12 = TaskPayload_FlagsEntry.decode(reader, reader.uint32());
          if (entry12.value !== undefined) {
            message.flags[entry12.key] = entry12.value;
          }
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.taskReleaseSource = TaskReleaseSource.decode(reader, reader.uint32());
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.password = reader.string();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.format = exportFormatFromJSON(reader.int32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TaskPayload {
    return {
      skipped: isSet(object.skipped) ? globalThis.Boolean(object.skipped) : false,
      skippedReason: isSet(object.skippedReason) ? globalThis.String(object.skippedReason) : "",
      specId: isSet(object.specId) ? globalThis.String(object.specId) : "",
      sheetId: isSet(object.sheetId) ? globalThis.Number(object.sheetId) : 0,
      environmentId: isSet(object.environmentId) ? globalThis.String(object.environmentId) : "",
      databaseName: isSet(object.databaseName) ? globalThis.String(object.databaseName) : "",
      tableName: isSet(object.tableName) ? globalThis.String(object.tableName) : "",
      characterSet: isSet(object.characterSet) ? globalThis.String(object.characterSet) : "",
      collation: isSet(object.collation) ? globalThis.String(object.collation) : "",
      schemaVersion: isSet(object.schemaVersion) ? globalThis.String(object.schemaVersion) : "",
      preUpdateBackupDetail: isSet(object.preUpdateBackupDetail)
        ? PreUpdateBackupDetail.fromJSON(object.preUpdateBackupDetail)
        : undefined,
      flags: isObject(object.flags)
        ? Object.entries(object.flags).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      taskReleaseSource: isSet(object.taskReleaseSource)
        ? TaskReleaseSource.fromJSON(object.taskReleaseSource)
        : undefined,
      password: isSet(object.password) ? globalThis.String(object.password) : "",
      format: isSet(object.format) ? exportFormatFromJSON(object.format) : ExportFormat.FORMAT_UNSPECIFIED,
    };
  },

  toJSON(message: TaskPayload): unknown {
    const obj: any = {};
    if (message.skipped !== false) {
      obj.skipped = message.skipped;
    }
    if (message.skippedReason !== "") {
      obj.skippedReason = message.skippedReason;
    }
    if (message.specId !== "") {
      obj.specId = message.specId;
    }
    if (message.sheetId !== 0) {
      obj.sheetId = Math.round(message.sheetId);
    }
    if (message.environmentId !== "") {
      obj.environmentId = message.environmentId;
    }
    if (message.databaseName !== "") {
      obj.databaseName = message.databaseName;
    }
    if (message.tableName !== "") {
      obj.tableName = message.tableName;
    }
    if (message.characterSet !== "") {
      obj.characterSet = message.characterSet;
    }
    if (message.collation !== "") {
      obj.collation = message.collation;
    }
    if (message.schemaVersion !== "") {
      obj.schemaVersion = message.schemaVersion;
    }
    if (message.preUpdateBackupDetail !== undefined) {
      obj.preUpdateBackupDetail = PreUpdateBackupDetail.toJSON(message.preUpdateBackupDetail);
    }
    if (message.flags) {
      const entries = Object.entries(message.flags);
      if (entries.length > 0) {
        obj.flags = {};
        entries.forEach(([k, v]) => {
          obj.flags[k] = v;
        });
      }
    }
    if (message.taskReleaseSource !== undefined) {
      obj.taskReleaseSource = TaskReleaseSource.toJSON(message.taskReleaseSource);
    }
    if (message.password !== "") {
      obj.password = message.password;
    }
    if (message.format !== ExportFormat.FORMAT_UNSPECIFIED) {
      obj.format = exportFormatToJSON(message.format);
    }
    return obj;
  },

  create(base?: DeepPartial<TaskPayload>): TaskPayload {
    return TaskPayload.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TaskPayload>): TaskPayload {
    const message = createBaseTaskPayload();
    message.skipped = object.skipped ?? false;
    message.skippedReason = object.skippedReason ?? "";
    message.specId = object.specId ?? "";
    message.sheetId = object.sheetId ?? 0;
    message.environmentId = object.environmentId ?? "";
    message.databaseName = object.databaseName ?? "";
    message.tableName = object.tableName ?? "";
    message.characterSet = object.characterSet ?? "";
    message.collation = object.collation ?? "";
    message.schemaVersion = object.schemaVersion ?? "";
    message.preUpdateBackupDetail =
      (object.preUpdateBackupDetail !== undefined && object.preUpdateBackupDetail !== null)
        ? PreUpdateBackupDetail.fromPartial(object.preUpdateBackupDetail)
        : undefined;
    message.flags = Object.entries(object.flags ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.taskReleaseSource = (object.taskReleaseSource !== undefined && object.taskReleaseSource !== null)
      ? TaskReleaseSource.fromPartial(object.taskReleaseSource)
      : undefined;
    message.password = object.password ?? "";
    message.format = object.format ?? ExportFormat.FORMAT_UNSPECIFIED;
    return message;
  },
};

function createBaseTaskPayload_FlagsEntry(): TaskPayload_FlagsEntry {
  return { key: "", value: "" };
}

export const TaskPayload_FlagsEntry: MessageFns<TaskPayload_FlagsEntry> = {
  encode(message: TaskPayload_FlagsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TaskPayload_FlagsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTaskPayload_FlagsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TaskPayload_FlagsEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: TaskPayload_FlagsEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<TaskPayload_FlagsEntry>): TaskPayload_FlagsEntry {
    return TaskPayload_FlagsEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TaskPayload_FlagsEntry>): TaskPayload_FlagsEntry {
    const message = createBaseTaskPayload_FlagsEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseTaskReleaseSource(): TaskReleaseSource {
  return { file: "" };
}

export const TaskReleaseSource: MessageFns<TaskReleaseSource> = {
  encode(message: TaskReleaseSource, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.file !== "") {
      writer.uint32(10).string(message.file);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TaskReleaseSource {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTaskReleaseSource();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.file = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TaskReleaseSource {
    return { file: isSet(object.file) ? globalThis.String(object.file) : "" };
  },

  toJSON(message: TaskReleaseSource): unknown {
    const obj: any = {};
    if (message.file !== "") {
      obj.file = message.file;
    }
    return obj;
  },

  create(base?: DeepPartial<TaskReleaseSource>): TaskReleaseSource {
    return TaskReleaseSource.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TaskReleaseSource>): TaskReleaseSource {
    const message = createBaseTaskReleaseSource();
    message.file = object.file ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
