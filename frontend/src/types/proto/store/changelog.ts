// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: store/changelog.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { Range } from "./common";

export const protobufPackage = "bytebase.store";

export interface ChangelogPayload {
  /** Format: projects/{project}/rollouts/{rollout}/stages/{stage}/tasks/{task}/taskruns/{taskrun} */
  taskRun: string;
  /** Format: projects/{project}/issues/{issue} */
  issue: string;
  /**
   * The revision uid.
   * optional
   */
  revision: Long;
  changedResources:
    | ChangedResources
    | undefined;
  /**
   * The sheet that holds the content.
   * Format: projects/{project}/sheets/{sheet}
   */
  sheet: string;
  version: string;
  type: ChangelogPayload_Type;
}

export enum ChangelogPayload_Type {
  TYPE_UNSPECIFIED = "TYPE_UNSPECIFIED",
  BASELINE = "BASELINE",
  MIGRATE = "MIGRATE",
  MIGRATE_SDL = "MIGRATE_SDL",
  MIGRATE_GHOST = "MIGRATE_GHOST",
  DATA = "DATA",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function changelogPayload_TypeFromJSON(object: any): ChangelogPayload_Type {
  switch (object) {
    case 0:
    case "TYPE_UNSPECIFIED":
      return ChangelogPayload_Type.TYPE_UNSPECIFIED;
    case 1:
    case "BASELINE":
      return ChangelogPayload_Type.BASELINE;
    case 2:
    case "MIGRATE":
      return ChangelogPayload_Type.MIGRATE;
    case 3:
    case "MIGRATE_SDL":
      return ChangelogPayload_Type.MIGRATE_SDL;
    case 4:
    case "MIGRATE_GHOST":
      return ChangelogPayload_Type.MIGRATE_GHOST;
    case 6:
    case "DATA":
      return ChangelogPayload_Type.DATA;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ChangelogPayload_Type.UNRECOGNIZED;
  }
}

export function changelogPayload_TypeToJSON(object: ChangelogPayload_Type): string {
  switch (object) {
    case ChangelogPayload_Type.TYPE_UNSPECIFIED:
      return "TYPE_UNSPECIFIED";
    case ChangelogPayload_Type.BASELINE:
      return "BASELINE";
    case ChangelogPayload_Type.MIGRATE:
      return "MIGRATE";
    case ChangelogPayload_Type.MIGRATE_SDL:
      return "MIGRATE_SDL";
    case ChangelogPayload_Type.MIGRATE_GHOST:
      return "MIGRATE_GHOST";
    case ChangelogPayload_Type.DATA:
      return "DATA";
    case ChangelogPayload_Type.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export function changelogPayload_TypeToNumber(object: ChangelogPayload_Type): number {
  switch (object) {
    case ChangelogPayload_Type.TYPE_UNSPECIFIED:
      return 0;
    case ChangelogPayload_Type.BASELINE:
      return 1;
    case ChangelogPayload_Type.MIGRATE:
      return 2;
    case ChangelogPayload_Type.MIGRATE_SDL:
      return 3;
    case ChangelogPayload_Type.MIGRATE_GHOST:
      return 4;
    case ChangelogPayload_Type.DATA:
      return 6;
    case ChangelogPayload_Type.UNRECOGNIZED:
    default:
      return -1;
  }
}

export interface ChangedResources {
  databases: ChangedResourceDatabase[];
}

export interface ChangedResourceDatabase {
  name: string;
  schemas: ChangedResourceSchema[];
}

export interface ChangedResourceSchema {
  name: string;
  tables: ChangedResourceTable[];
  views: ChangedResourceView[];
  functions: ChangedResourceFunction[];
  procedures: ChangedResourceProcedure[];
}

export interface ChangedResourceTable {
  name: string;
  /** estimated row count of the table */
  tableRows: Long;
  /** The ranges of sub-strings correspond to the statements on the sheet. */
  ranges: Range[];
}

export interface ChangedResourceView {
  name: string;
  /** The ranges of sub-strings correspond to the statements on the sheet. */
  ranges: Range[];
}

export interface ChangedResourceFunction {
  name: string;
  /** The ranges of sub-strings correspond to the statements on the sheet. */
  ranges: Range[];
}

export interface ChangedResourceProcedure {
  name: string;
  /** The ranges of sub-strings correspond to the statements on the sheet. */
  ranges: Range[];
}

function createBaseChangelogPayload(): ChangelogPayload {
  return {
    taskRun: "",
    issue: "",
    revision: Long.ZERO,
    changedResources: undefined,
    sheet: "",
    version: "",
    type: ChangelogPayload_Type.TYPE_UNSPECIFIED,
  };
}

export const ChangelogPayload: MessageFns<ChangelogPayload> = {
  encode(message: ChangelogPayload, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.taskRun !== "") {
      writer.uint32(10).string(message.taskRun);
    }
    if (message.issue !== "") {
      writer.uint32(18).string(message.issue);
    }
    if (!message.revision.equals(Long.ZERO)) {
      writer.uint32(24).int64(message.revision.toString());
    }
    if (message.changedResources !== undefined) {
      ChangedResources.encode(message.changedResources, writer.uint32(34).fork()).join();
    }
    if (message.sheet !== "") {
      writer.uint32(42).string(message.sheet);
    }
    if (message.version !== "") {
      writer.uint32(50).string(message.version);
    }
    if (message.type !== ChangelogPayload_Type.TYPE_UNSPECIFIED) {
      writer.uint32(56).int32(changelogPayload_TypeToNumber(message.type));
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChangelogPayload {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChangelogPayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.taskRun = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.issue = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.revision = Long.fromString(reader.int64().toString());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.changedResources = ChangedResources.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.sheet = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.version = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.type = changelogPayload_TypeFromJSON(reader.int32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChangelogPayload {
    return {
      taskRun: isSet(object.taskRun) ? globalThis.String(object.taskRun) : "",
      issue: isSet(object.issue) ? globalThis.String(object.issue) : "",
      revision: isSet(object.revision) ? Long.fromValue(object.revision) : Long.ZERO,
      changedResources: isSet(object.changedResources) ? ChangedResources.fromJSON(object.changedResources) : undefined,
      sheet: isSet(object.sheet) ? globalThis.String(object.sheet) : "",
      version: isSet(object.version) ? globalThis.String(object.version) : "",
      type: isSet(object.type) ? changelogPayload_TypeFromJSON(object.type) : ChangelogPayload_Type.TYPE_UNSPECIFIED,
    };
  },

  toJSON(message: ChangelogPayload): unknown {
    const obj: any = {};
    if (message.taskRun !== "") {
      obj.taskRun = message.taskRun;
    }
    if (message.issue !== "") {
      obj.issue = message.issue;
    }
    if (!message.revision.equals(Long.ZERO)) {
      obj.revision = (message.revision || Long.ZERO).toString();
    }
    if (message.changedResources !== undefined) {
      obj.changedResources = ChangedResources.toJSON(message.changedResources);
    }
    if (message.sheet !== "") {
      obj.sheet = message.sheet;
    }
    if (message.version !== "") {
      obj.version = message.version;
    }
    if (message.type !== ChangelogPayload_Type.TYPE_UNSPECIFIED) {
      obj.type = changelogPayload_TypeToJSON(message.type);
    }
    return obj;
  },

  create(base?: DeepPartial<ChangelogPayload>): ChangelogPayload {
    return ChangelogPayload.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ChangelogPayload>): ChangelogPayload {
    const message = createBaseChangelogPayload();
    message.taskRun = object.taskRun ?? "";
    message.issue = object.issue ?? "";
    message.revision = (object.revision !== undefined && object.revision !== null)
      ? Long.fromValue(object.revision)
      : Long.ZERO;
    message.changedResources = (object.changedResources !== undefined && object.changedResources !== null)
      ? ChangedResources.fromPartial(object.changedResources)
      : undefined;
    message.sheet = object.sheet ?? "";
    message.version = object.version ?? "";
    message.type = object.type ?? ChangelogPayload_Type.TYPE_UNSPECIFIED;
    return message;
  },
};

function createBaseChangedResources(): ChangedResources {
  return { databases: [] };
}

export const ChangedResources: MessageFns<ChangedResources> = {
  encode(message: ChangedResources, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.databases) {
      ChangedResourceDatabase.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChangedResources {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChangedResources();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.databases.push(ChangedResourceDatabase.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChangedResources {
    return {
      databases: globalThis.Array.isArray(object?.databases)
        ? object.databases.map((e: any) => ChangedResourceDatabase.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ChangedResources): unknown {
    const obj: any = {};
    if (message.databases?.length) {
      obj.databases = message.databases.map((e) => ChangedResourceDatabase.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ChangedResources>): ChangedResources {
    return ChangedResources.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ChangedResources>): ChangedResources {
    const message = createBaseChangedResources();
    message.databases = object.databases?.map((e) => ChangedResourceDatabase.fromPartial(e)) || [];
    return message;
  },
};

function createBaseChangedResourceDatabase(): ChangedResourceDatabase {
  return { name: "", schemas: [] };
}

export const ChangedResourceDatabase: MessageFns<ChangedResourceDatabase> = {
  encode(message: ChangedResourceDatabase, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    for (const v of message.schemas) {
      ChangedResourceSchema.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChangedResourceDatabase {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChangedResourceDatabase();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.schemas.push(ChangedResourceSchema.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChangedResourceDatabase {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      schemas: globalThis.Array.isArray(object?.schemas)
        ? object.schemas.map((e: any) => ChangedResourceSchema.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ChangedResourceDatabase): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.schemas?.length) {
      obj.schemas = message.schemas.map((e) => ChangedResourceSchema.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ChangedResourceDatabase>): ChangedResourceDatabase {
    return ChangedResourceDatabase.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ChangedResourceDatabase>): ChangedResourceDatabase {
    const message = createBaseChangedResourceDatabase();
    message.name = object.name ?? "";
    message.schemas = object.schemas?.map((e) => ChangedResourceSchema.fromPartial(e)) || [];
    return message;
  },
};

function createBaseChangedResourceSchema(): ChangedResourceSchema {
  return { name: "", tables: [], views: [], functions: [], procedures: [] };
}

export const ChangedResourceSchema: MessageFns<ChangedResourceSchema> = {
  encode(message: ChangedResourceSchema, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    for (const v of message.tables) {
      ChangedResourceTable.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.views) {
      ChangedResourceView.encode(v!, writer.uint32(26).fork()).join();
    }
    for (const v of message.functions) {
      ChangedResourceFunction.encode(v!, writer.uint32(34).fork()).join();
    }
    for (const v of message.procedures) {
      ChangedResourceProcedure.encode(v!, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChangedResourceSchema {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChangedResourceSchema();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.tables.push(ChangedResourceTable.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.views.push(ChangedResourceView.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.functions.push(ChangedResourceFunction.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.procedures.push(ChangedResourceProcedure.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChangedResourceSchema {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      tables: globalThis.Array.isArray(object?.tables)
        ? object.tables.map((e: any) => ChangedResourceTable.fromJSON(e))
        : [],
      views: globalThis.Array.isArray(object?.views)
        ? object.views.map((e: any) => ChangedResourceView.fromJSON(e))
        : [],
      functions: globalThis.Array.isArray(object?.functions)
        ? object.functions.map((e: any) => ChangedResourceFunction.fromJSON(e))
        : [],
      procedures: globalThis.Array.isArray(object?.procedures)
        ? object.procedures.map((e: any) => ChangedResourceProcedure.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ChangedResourceSchema): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.tables?.length) {
      obj.tables = message.tables.map((e) => ChangedResourceTable.toJSON(e));
    }
    if (message.views?.length) {
      obj.views = message.views.map((e) => ChangedResourceView.toJSON(e));
    }
    if (message.functions?.length) {
      obj.functions = message.functions.map((e) => ChangedResourceFunction.toJSON(e));
    }
    if (message.procedures?.length) {
      obj.procedures = message.procedures.map((e) => ChangedResourceProcedure.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ChangedResourceSchema>): ChangedResourceSchema {
    return ChangedResourceSchema.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ChangedResourceSchema>): ChangedResourceSchema {
    const message = createBaseChangedResourceSchema();
    message.name = object.name ?? "";
    message.tables = object.tables?.map((e) => ChangedResourceTable.fromPartial(e)) || [];
    message.views = object.views?.map((e) => ChangedResourceView.fromPartial(e)) || [];
    message.functions = object.functions?.map((e) => ChangedResourceFunction.fromPartial(e)) || [];
    message.procedures = object.procedures?.map((e) => ChangedResourceProcedure.fromPartial(e)) || [];
    return message;
  },
};

function createBaseChangedResourceTable(): ChangedResourceTable {
  return { name: "", tableRows: Long.ZERO, ranges: [] };
}

export const ChangedResourceTable: MessageFns<ChangedResourceTable> = {
  encode(message: ChangedResourceTable, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (!message.tableRows.equals(Long.ZERO)) {
      writer.uint32(16).int64(message.tableRows.toString());
    }
    for (const v of message.ranges) {
      Range.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChangedResourceTable {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChangedResourceTable();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.tableRows = Long.fromString(reader.int64().toString());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.ranges.push(Range.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChangedResourceTable {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      tableRows: isSet(object.tableRows) ? Long.fromValue(object.tableRows) : Long.ZERO,
      ranges: globalThis.Array.isArray(object?.ranges) ? object.ranges.map((e: any) => Range.fromJSON(e)) : [],
    };
  },

  toJSON(message: ChangedResourceTable): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (!message.tableRows.equals(Long.ZERO)) {
      obj.tableRows = (message.tableRows || Long.ZERO).toString();
    }
    if (message.ranges?.length) {
      obj.ranges = message.ranges.map((e) => Range.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ChangedResourceTable>): ChangedResourceTable {
    return ChangedResourceTable.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ChangedResourceTable>): ChangedResourceTable {
    const message = createBaseChangedResourceTable();
    message.name = object.name ?? "";
    message.tableRows = (object.tableRows !== undefined && object.tableRows !== null)
      ? Long.fromValue(object.tableRows)
      : Long.ZERO;
    message.ranges = object.ranges?.map((e) => Range.fromPartial(e)) || [];
    return message;
  },
};

function createBaseChangedResourceView(): ChangedResourceView {
  return { name: "", ranges: [] };
}

export const ChangedResourceView: MessageFns<ChangedResourceView> = {
  encode(message: ChangedResourceView, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    for (const v of message.ranges) {
      Range.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChangedResourceView {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChangedResourceView();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.ranges.push(Range.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChangedResourceView {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      ranges: globalThis.Array.isArray(object?.ranges) ? object.ranges.map((e: any) => Range.fromJSON(e)) : [],
    };
  },

  toJSON(message: ChangedResourceView): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.ranges?.length) {
      obj.ranges = message.ranges.map((e) => Range.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ChangedResourceView>): ChangedResourceView {
    return ChangedResourceView.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ChangedResourceView>): ChangedResourceView {
    const message = createBaseChangedResourceView();
    message.name = object.name ?? "";
    message.ranges = object.ranges?.map((e) => Range.fromPartial(e)) || [];
    return message;
  },
};

function createBaseChangedResourceFunction(): ChangedResourceFunction {
  return { name: "", ranges: [] };
}

export const ChangedResourceFunction: MessageFns<ChangedResourceFunction> = {
  encode(message: ChangedResourceFunction, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    for (const v of message.ranges) {
      Range.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChangedResourceFunction {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChangedResourceFunction();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.ranges.push(Range.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChangedResourceFunction {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      ranges: globalThis.Array.isArray(object?.ranges) ? object.ranges.map((e: any) => Range.fromJSON(e)) : [],
    };
  },

  toJSON(message: ChangedResourceFunction): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.ranges?.length) {
      obj.ranges = message.ranges.map((e) => Range.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ChangedResourceFunction>): ChangedResourceFunction {
    return ChangedResourceFunction.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ChangedResourceFunction>): ChangedResourceFunction {
    const message = createBaseChangedResourceFunction();
    message.name = object.name ?? "";
    message.ranges = object.ranges?.map((e) => Range.fromPartial(e)) || [];
    return message;
  },
};

function createBaseChangedResourceProcedure(): ChangedResourceProcedure {
  return { name: "", ranges: [] };
}

export const ChangedResourceProcedure: MessageFns<ChangedResourceProcedure> = {
  encode(message: ChangedResourceProcedure, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    for (const v of message.ranges) {
      Range.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChangedResourceProcedure {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChangedResourceProcedure();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.ranges.push(Range.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChangedResourceProcedure {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      ranges: globalThis.Array.isArray(object?.ranges) ? object.ranges.map((e: any) => Range.fromJSON(e)) : [],
    };
  },

  toJSON(message: ChangedResourceProcedure): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.ranges?.length) {
      obj.ranges = message.ranges.map((e) => Range.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ChangedResourceProcedure>): ChangedResourceProcedure {
    return ChangedResourceProcedure.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ChangedResourceProcedure>): ChangedResourceProcedure {
    const message = createBaseChangedResourceProcedure();
    message.name = object.name ?? "";
    message.ranges = object.ranges?.map((e) => Range.fromPartial(e)) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
