// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: store/changelog.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { ChangedResources } from "./instance_change_history";

export const protobufPackage = "bytebase.store";

export interface ChangelogPayload {
  task: ChangelogTask | undefined;
  revision: ChangelogRevision | undefined;
}

export interface ChangelogTask {
  taskRun: string;
  issue: string;
  /** optional */
  revision: Long;
  changedResources: ChangedResources | undefined;
  status: ChangelogTask_Status;
  prevSyncHistoryId: Long;
  syncHistoryId: Long;
  /**
   * The sheet that holds the content.
   * Format: projects/{project}/sheets/{sheet}
   */
  sheet: string;
  version: string;
}

export enum ChangelogTask_Status {
  STATUS_UNSPECIFIED = "STATUS_UNSPECIFIED",
  PENDING = "PENDING",
  DONE = "DONE",
  FAILED = "FAILED",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function changelogTask_StatusFromJSON(object: any): ChangelogTask_Status {
  switch (object) {
    case 0:
    case "STATUS_UNSPECIFIED":
      return ChangelogTask_Status.STATUS_UNSPECIFIED;
    case 1:
    case "PENDING":
      return ChangelogTask_Status.PENDING;
    case 2:
    case "DONE":
      return ChangelogTask_Status.DONE;
    case 3:
    case "FAILED":
      return ChangelogTask_Status.FAILED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ChangelogTask_Status.UNRECOGNIZED;
  }
}

export function changelogTask_StatusToJSON(object: ChangelogTask_Status): string {
  switch (object) {
    case ChangelogTask_Status.STATUS_UNSPECIFIED:
      return "STATUS_UNSPECIFIED";
    case ChangelogTask_Status.PENDING:
      return "PENDING";
    case ChangelogTask_Status.DONE:
      return "DONE";
    case ChangelogTask_Status.FAILED:
      return "FAILED";
    case ChangelogTask_Status.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export function changelogTask_StatusToNumber(object: ChangelogTask_Status): number {
  switch (object) {
    case ChangelogTask_Status.STATUS_UNSPECIFIED:
      return 0;
    case ChangelogTask_Status.PENDING:
      return 1;
    case ChangelogTask_Status.DONE:
      return 2;
    case ChangelogTask_Status.FAILED:
      return 3;
    case ChangelogTask_Status.UNRECOGNIZED:
    default:
      return -1;
  }
}

export interface ChangelogRevision {
  /** Marshalled revision for display */
  revision: string;
  operation: ChangelogRevision_Op;
}

export enum ChangelogRevision_Op {
  OP_UNSPECIFIED = "OP_UNSPECIFIED",
  CREATE = "CREATE",
  DELETE = "DELETE",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function changelogRevision_OpFromJSON(object: any): ChangelogRevision_Op {
  switch (object) {
    case 0:
    case "OP_UNSPECIFIED":
      return ChangelogRevision_Op.OP_UNSPECIFIED;
    case 1:
    case "CREATE":
      return ChangelogRevision_Op.CREATE;
    case 2:
    case "DELETE":
      return ChangelogRevision_Op.DELETE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ChangelogRevision_Op.UNRECOGNIZED;
  }
}

export function changelogRevision_OpToJSON(object: ChangelogRevision_Op): string {
  switch (object) {
    case ChangelogRevision_Op.OP_UNSPECIFIED:
      return "OP_UNSPECIFIED";
    case ChangelogRevision_Op.CREATE:
      return "CREATE";
    case ChangelogRevision_Op.DELETE:
      return "DELETE";
    case ChangelogRevision_Op.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export function changelogRevision_OpToNumber(object: ChangelogRevision_Op): number {
  switch (object) {
    case ChangelogRevision_Op.OP_UNSPECIFIED:
      return 0;
    case ChangelogRevision_Op.CREATE:
      return 1;
    case ChangelogRevision_Op.DELETE:
      return 2;
    case ChangelogRevision_Op.UNRECOGNIZED:
    default:
      return -1;
  }
}

function createBaseChangelogPayload(): ChangelogPayload {
  return { task: undefined, revision: undefined };
}

export const ChangelogPayload: MessageFns<ChangelogPayload> = {
  encode(message: ChangelogPayload, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.task !== undefined) {
      ChangelogTask.encode(message.task, writer.uint32(10).fork()).join();
    }
    if (message.revision !== undefined) {
      ChangelogRevision.encode(message.revision, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChangelogPayload {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChangelogPayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.task = ChangelogTask.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.revision = ChangelogRevision.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChangelogPayload {
    return {
      task: isSet(object.task) ? ChangelogTask.fromJSON(object.task) : undefined,
      revision: isSet(object.revision) ? ChangelogRevision.fromJSON(object.revision) : undefined,
    };
  },

  toJSON(message: ChangelogPayload): unknown {
    const obj: any = {};
    if (message.task !== undefined) {
      obj.task = ChangelogTask.toJSON(message.task);
    }
    if (message.revision !== undefined) {
      obj.revision = ChangelogRevision.toJSON(message.revision);
    }
    return obj;
  },

  create(base?: DeepPartial<ChangelogPayload>): ChangelogPayload {
    return ChangelogPayload.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ChangelogPayload>): ChangelogPayload {
    const message = createBaseChangelogPayload();
    message.task = (object.task !== undefined && object.task !== null)
      ? ChangelogTask.fromPartial(object.task)
      : undefined;
    message.revision = (object.revision !== undefined && object.revision !== null)
      ? ChangelogRevision.fromPartial(object.revision)
      : undefined;
    return message;
  },
};

function createBaseChangelogTask(): ChangelogTask {
  return {
    taskRun: "",
    issue: "",
    revision: Long.ZERO,
    changedResources: undefined,
    status: ChangelogTask_Status.STATUS_UNSPECIFIED,
    prevSyncHistoryId: Long.ZERO,
    syncHistoryId: Long.ZERO,
    sheet: "",
    version: "",
  };
}

export const ChangelogTask: MessageFns<ChangelogTask> = {
  encode(message: ChangelogTask, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.taskRun !== "") {
      writer.uint32(10).string(message.taskRun);
    }
    if (message.issue !== "") {
      writer.uint32(18).string(message.issue);
    }
    if (!message.revision.equals(Long.ZERO)) {
      writer.uint32(24).int64(message.revision.toString());
    }
    if (message.changedResources !== undefined) {
      ChangedResources.encode(message.changedResources, writer.uint32(34).fork()).join();
    }
    if (message.status !== ChangelogTask_Status.STATUS_UNSPECIFIED) {
      writer.uint32(40).int32(changelogTask_StatusToNumber(message.status));
    }
    if (!message.prevSyncHistoryId.equals(Long.ZERO)) {
      writer.uint32(48).int64(message.prevSyncHistoryId.toString());
    }
    if (!message.syncHistoryId.equals(Long.ZERO)) {
      writer.uint32(56).int64(message.syncHistoryId.toString());
    }
    if (message.sheet !== "") {
      writer.uint32(66).string(message.sheet);
    }
    if (message.version !== "") {
      writer.uint32(74).string(message.version);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChangelogTask {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChangelogTask();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.taskRun = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.issue = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.revision = Long.fromString(reader.int64().toString());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.changedResources = ChangedResources.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.status = changelogTask_StatusFromJSON(reader.int32());
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.prevSyncHistoryId = Long.fromString(reader.int64().toString());
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.syncHistoryId = Long.fromString(reader.int64().toString());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.sheet = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.version = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChangelogTask {
    return {
      taskRun: isSet(object.taskRun) ? globalThis.String(object.taskRun) : "",
      issue: isSet(object.issue) ? globalThis.String(object.issue) : "",
      revision: isSet(object.revision) ? Long.fromValue(object.revision) : Long.ZERO,
      changedResources: isSet(object.changedResources) ? ChangedResources.fromJSON(object.changedResources) : undefined,
      status: isSet(object.status)
        ? changelogTask_StatusFromJSON(object.status)
        : ChangelogTask_Status.STATUS_UNSPECIFIED,
      prevSyncHistoryId: isSet(object.prevSyncHistoryId) ? Long.fromValue(object.prevSyncHistoryId) : Long.ZERO,
      syncHistoryId: isSet(object.syncHistoryId) ? Long.fromValue(object.syncHistoryId) : Long.ZERO,
      sheet: isSet(object.sheet) ? globalThis.String(object.sheet) : "",
      version: isSet(object.version) ? globalThis.String(object.version) : "",
    };
  },

  toJSON(message: ChangelogTask): unknown {
    const obj: any = {};
    if (message.taskRun !== "") {
      obj.taskRun = message.taskRun;
    }
    if (message.issue !== "") {
      obj.issue = message.issue;
    }
    if (!message.revision.equals(Long.ZERO)) {
      obj.revision = (message.revision || Long.ZERO).toString();
    }
    if (message.changedResources !== undefined) {
      obj.changedResources = ChangedResources.toJSON(message.changedResources);
    }
    if (message.status !== ChangelogTask_Status.STATUS_UNSPECIFIED) {
      obj.status = changelogTask_StatusToJSON(message.status);
    }
    if (!message.prevSyncHistoryId.equals(Long.ZERO)) {
      obj.prevSyncHistoryId = (message.prevSyncHistoryId || Long.ZERO).toString();
    }
    if (!message.syncHistoryId.equals(Long.ZERO)) {
      obj.syncHistoryId = (message.syncHistoryId || Long.ZERO).toString();
    }
    if (message.sheet !== "") {
      obj.sheet = message.sheet;
    }
    if (message.version !== "") {
      obj.version = message.version;
    }
    return obj;
  },

  create(base?: DeepPartial<ChangelogTask>): ChangelogTask {
    return ChangelogTask.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ChangelogTask>): ChangelogTask {
    const message = createBaseChangelogTask();
    message.taskRun = object.taskRun ?? "";
    message.issue = object.issue ?? "";
    message.revision = (object.revision !== undefined && object.revision !== null)
      ? Long.fromValue(object.revision)
      : Long.ZERO;
    message.changedResources = (object.changedResources !== undefined && object.changedResources !== null)
      ? ChangedResources.fromPartial(object.changedResources)
      : undefined;
    message.status = object.status ?? ChangelogTask_Status.STATUS_UNSPECIFIED;
    message.prevSyncHistoryId = (object.prevSyncHistoryId !== undefined && object.prevSyncHistoryId !== null)
      ? Long.fromValue(object.prevSyncHistoryId)
      : Long.ZERO;
    message.syncHistoryId = (object.syncHistoryId !== undefined && object.syncHistoryId !== null)
      ? Long.fromValue(object.syncHistoryId)
      : Long.ZERO;
    message.sheet = object.sheet ?? "";
    message.version = object.version ?? "";
    return message;
  },
};

function createBaseChangelogRevision(): ChangelogRevision {
  return { revision: "", operation: ChangelogRevision_Op.OP_UNSPECIFIED };
}

export const ChangelogRevision: MessageFns<ChangelogRevision> = {
  encode(message: ChangelogRevision, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.revision !== "") {
      writer.uint32(10).string(message.revision);
    }
    if (message.operation !== ChangelogRevision_Op.OP_UNSPECIFIED) {
      writer.uint32(16).int32(changelogRevision_OpToNumber(message.operation));
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChangelogRevision {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChangelogRevision();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.revision = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.operation = changelogRevision_OpFromJSON(reader.int32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChangelogRevision {
    return {
      revision: isSet(object.revision) ? globalThis.String(object.revision) : "",
      operation: isSet(object.operation)
        ? changelogRevision_OpFromJSON(object.operation)
        : ChangelogRevision_Op.OP_UNSPECIFIED,
    };
  },

  toJSON(message: ChangelogRevision): unknown {
    const obj: any = {};
    if (message.revision !== "") {
      obj.revision = message.revision;
    }
    if (message.operation !== ChangelogRevision_Op.OP_UNSPECIFIED) {
      obj.operation = changelogRevision_OpToJSON(message.operation);
    }
    return obj;
  },

  create(base?: DeepPartial<ChangelogRevision>): ChangelogRevision {
    return ChangelogRevision.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ChangelogRevision>): ChangelogRevision {
    const message = createBaseChangelogRevision();
    message.revision = object.revision ?? "";
    message.operation = object.operation ?? ChangelogRevision_Op.OP_UNSPECIFIED;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
