// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               unknown
// source: store/release.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import Long from "long";
import { VCSType, vCSTypeFromJSON, vCSTypeToJSON, vCSTypeToNumber } from "./common";

export const protobufPackage = "bytebase.store";

export enum ReleaseFileType {
  TYPE_UNSPECIFIED = "TYPE_UNSPECIFIED",
  VERSIONED = "VERSIONED",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function releaseFileTypeFromJSON(object: any): ReleaseFileType {
  switch (object) {
    case 0:
    case "TYPE_UNSPECIFIED":
      return ReleaseFileType.TYPE_UNSPECIFIED;
    case 1:
    case "VERSIONED":
      return ReleaseFileType.VERSIONED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ReleaseFileType.UNRECOGNIZED;
  }
}

export function releaseFileTypeToJSON(object: ReleaseFileType): string {
  switch (object) {
    case ReleaseFileType.TYPE_UNSPECIFIED:
      return "TYPE_UNSPECIFIED";
    case ReleaseFileType.VERSIONED:
      return "VERSIONED";
    case ReleaseFileType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export function releaseFileTypeToNumber(object: ReleaseFileType): number {
  switch (object) {
    case ReleaseFileType.TYPE_UNSPECIFIED:
      return 0;
    case ReleaseFileType.VERSIONED:
      return 1;
    case ReleaseFileType.UNRECOGNIZED:
    default:
      return -1;
  }
}

export interface ReleasePayload {
  title: string;
  files: ReleasePayload_File[];
  vcsSource: ReleasePayload_VCSSource | undefined;
}

export interface ReleasePayload_File {
  /** The unique identifier for the file. */
  id: string;
  /** The path of the file. e.g. `2.2/V0001_create_table.sql`. */
  path: string;
  /**
   * The sheet that holds the content.
   * Format: projects/{project}/sheets/{sheet}
   */
  sheet: string;
  /** The SHA256 hash value of the sheet. */
  sheetSha256: string;
  type: ReleaseFileType;
  version: string;
  changeType: ReleasePayload_File_ChangeType;
}

export enum ReleasePayload_File_ChangeType {
  CHANGE_TYPE_UNSPECIFIED = "CHANGE_TYPE_UNSPECIFIED",
  DDL = "DDL",
  DDL_GHOST = "DDL_GHOST",
  DML = "DML",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function releasePayload_File_ChangeTypeFromJSON(object: any): ReleasePayload_File_ChangeType {
  switch (object) {
    case 0:
    case "CHANGE_TYPE_UNSPECIFIED":
      return ReleasePayload_File_ChangeType.CHANGE_TYPE_UNSPECIFIED;
    case 1:
    case "DDL":
      return ReleasePayload_File_ChangeType.DDL;
    case 2:
    case "DDL_GHOST":
      return ReleasePayload_File_ChangeType.DDL_GHOST;
    case 3:
    case "DML":
      return ReleasePayload_File_ChangeType.DML;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ReleasePayload_File_ChangeType.UNRECOGNIZED;
  }
}

export function releasePayload_File_ChangeTypeToJSON(object: ReleasePayload_File_ChangeType): string {
  switch (object) {
    case ReleasePayload_File_ChangeType.CHANGE_TYPE_UNSPECIFIED:
      return "CHANGE_TYPE_UNSPECIFIED";
    case ReleasePayload_File_ChangeType.DDL:
      return "DDL";
    case ReleasePayload_File_ChangeType.DDL_GHOST:
      return "DDL_GHOST";
    case ReleasePayload_File_ChangeType.DML:
      return "DML";
    case ReleasePayload_File_ChangeType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export function releasePayload_File_ChangeTypeToNumber(object: ReleasePayload_File_ChangeType): number {
  switch (object) {
    case ReleasePayload_File_ChangeType.CHANGE_TYPE_UNSPECIFIED:
      return 0;
    case ReleasePayload_File_ChangeType.DDL:
      return 1;
    case ReleasePayload_File_ChangeType.DDL_GHOST:
      return 2;
    case ReleasePayload_File_ChangeType.DML:
      return 3;
    case ReleasePayload_File_ChangeType.UNRECOGNIZED:
    default:
      return -1;
  }
}

export interface ReleasePayload_VCSSource {
  vcsType: VCSType;
  url: string;
}

function createBaseReleasePayload(): ReleasePayload {
  return { title: "", files: [], vcsSource: undefined };
}

export const ReleasePayload: MessageFns<ReleasePayload> = {
  encode(message: ReleasePayload, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    for (const v of message.files) {
      ReleasePayload_File.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.vcsSource !== undefined) {
      ReleasePayload_VCSSource.encode(message.vcsSource, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReleasePayload {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReleasePayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.files.push(ReleasePayload_File.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.vcsSource = ReleasePayload_VCSSource.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReleasePayload {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      files: globalThis.Array.isArray(object?.files)
        ? object.files.map((e: any) => ReleasePayload_File.fromJSON(e))
        : [],
      vcsSource: isSet(object.vcsSource) ? ReleasePayload_VCSSource.fromJSON(object.vcsSource) : undefined,
    };
  },

  toJSON(message: ReleasePayload): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.files?.length) {
      obj.files = message.files.map((e) => ReleasePayload_File.toJSON(e));
    }
    if (message.vcsSource !== undefined) {
      obj.vcsSource = ReleasePayload_VCSSource.toJSON(message.vcsSource);
    }
    return obj;
  },

  create(base?: DeepPartial<ReleasePayload>): ReleasePayload {
    return ReleasePayload.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReleasePayload>): ReleasePayload {
    const message = createBaseReleasePayload();
    message.title = object.title ?? "";
    message.files = object.files?.map((e) => ReleasePayload_File.fromPartial(e)) || [];
    message.vcsSource = (object.vcsSource !== undefined && object.vcsSource !== null)
      ? ReleasePayload_VCSSource.fromPartial(object.vcsSource)
      : undefined;
    return message;
  },
};

function createBaseReleasePayload_File(): ReleasePayload_File {
  return {
    id: "",
    path: "",
    sheet: "",
    sheetSha256: "",
    type: ReleaseFileType.TYPE_UNSPECIFIED,
    version: "",
    changeType: ReleasePayload_File_ChangeType.CHANGE_TYPE_UNSPECIFIED,
  };
}

export const ReleasePayload_File: MessageFns<ReleasePayload_File> = {
  encode(message: ReleasePayload_File, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.path !== "") {
      writer.uint32(18).string(message.path);
    }
    if (message.sheet !== "") {
      writer.uint32(26).string(message.sheet);
    }
    if (message.sheetSha256 !== "") {
      writer.uint32(34).string(message.sheetSha256);
    }
    if (message.type !== ReleaseFileType.TYPE_UNSPECIFIED) {
      writer.uint32(40).int32(releaseFileTypeToNumber(message.type));
    }
    if (message.version !== "") {
      writer.uint32(50).string(message.version);
    }
    if (message.changeType !== ReleasePayload_File_ChangeType.CHANGE_TYPE_UNSPECIFIED) {
      writer.uint32(56).int32(releasePayload_File_ChangeTypeToNumber(message.changeType));
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReleasePayload_File {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReleasePayload_File();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.path = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.sheet = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.sheetSha256 = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.type = releaseFileTypeFromJSON(reader.int32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.version = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.changeType = releasePayload_File_ChangeTypeFromJSON(reader.int32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReleasePayload_File {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      path: isSet(object.path) ? globalThis.String(object.path) : "",
      sheet: isSet(object.sheet) ? globalThis.String(object.sheet) : "",
      sheetSha256: isSet(object.sheetSha256) ? globalThis.String(object.sheetSha256) : "",
      type: isSet(object.type) ? releaseFileTypeFromJSON(object.type) : ReleaseFileType.TYPE_UNSPECIFIED,
      version: isSet(object.version) ? globalThis.String(object.version) : "",
      changeType: isSet(object.changeType)
        ? releasePayload_File_ChangeTypeFromJSON(object.changeType)
        : ReleasePayload_File_ChangeType.CHANGE_TYPE_UNSPECIFIED,
    };
  },

  toJSON(message: ReleasePayload_File): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.path !== "") {
      obj.path = message.path;
    }
    if (message.sheet !== "") {
      obj.sheet = message.sheet;
    }
    if (message.sheetSha256 !== "") {
      obj.sheetSha256 = message.sheetSha256;
    }
    if (message.type !== ReleaseFileType.TYPE_UNSPECIFIED) {
      obj.type = releaseFileTypeToJSON(message.type);
    }
    if (message.version !== "") {
      obj.version = message.version;
    }
    if (message.changeType !== ReleasePayload_File_ChangeType.CHANGE_TYPE_UNSPECIFIED) {
      obj.changeType = releasePayload_File_ChangeTypeToJSON(message.changeType);
    }
    return obj;
  },

  create(base?: DeepPartial<ReleasePayload_File>): ReleasePayload_File {
    return ReleasePayload_File.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReleasePayload_File>): ReleasePayload_File {
    const message = createBaseReleasePayload_File();
    message.id = object.id ?? "";
    message.path = object.path ?? "";
    message.sheet = object.sheet ?? "";
    message.sheetSha256 = object.sheetSha256 ?? "";
    message.type = object.type ?? ReleaseFileType.TYPE_UNSPECIFIED;
    message.version = object.version ?? "";
    message.changeType = object.changeType ?? ReleasePayload_File_ChangeType.CHANGE_TYPE_UNSPECIFIED;
    return message;
  },
};

function createBaseReleasePayload_VCSSource(): ReleasePayload_VCSSource {
  return { vcsType: VCSType.VCS_TYPE_UNSPECIFIED, url: "" };
}

export const ReleasePayload_VCSSource: MessageFns<ReleasePayload_VCSSource> = {
  encode(message: ReleasePayload_VCSSource, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.vcsType !== VCSType.VCS_TYPE_UNSPECIFIED) {
      writer.uint32(8).int32(vCSTypeToNumber(message.vcsType));
    }
    if (message.url !== "") {
      writer.uint32(18).string(message.url);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ReleasePayload_VCSSource {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseReleasePayload_VCSSource();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.vcsType = vCSTypeFromJSON(reader.int32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.url = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ReleasePayload_VCSSource {
    return {
      vcsType: isSet(object.vcsType) ? vCSTypeFromJSON(object.vcsType) : VCSType.VCS_TYPE_UNSPECIFIED,
      url: isSet(object.url) ? globalThis.String(object.url) : "",
    };
  },

  toJSON(message: ReleasePayload_VCSSource): unknown {
    const obj: any = {};
    if (message.vcsType !== VCSType.VCS_TYPE_UNSPECIFIED) {
      obj.vcsType = vCSTypeToJSON(message.vcsType);
    }
    if (message.url !== "") {
      obj.url = message.url;
    }
    return obj;
  },

  create(base?: DeepPartial<ReleasePayload_VCSSource>): ReleasePayload_VCSSource {
    return ReleasePayload_VCSSource.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ReleasePayload_VCSSource>): ReleasePayload_VCSSource {
    const message = createBaseReleasePayload_VCSSource();
    message.vcsType = object.vcsType ?? VCSType.VCS_TYPE_UNSPECIFIED;
    message.url = object.url ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
