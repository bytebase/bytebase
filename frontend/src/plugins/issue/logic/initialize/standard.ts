import { TemplateType } from "@/plugins";
import {
  IssueCreate,
  IssueCreateContext,
  MigrationType,
  UpdateSchemaContext,
} from "@/types";
import {
  findDatabaseListByQuery,
  BuildNewIssueContext,
  ESTABLISH_BASELINE_SQL,
  VALIDATE_ONLY_SQL,
} from "../common";
import { IssueCreateHelper } from "./helper";

export const buildNewStandardIssue = async (
  context: BuildNewIssueContext
): Promise<IssueCreate> => {
  const helper = new IssueCreateHelper(context);

  await helper.prepare();

  // standard single-stage or multi-stage issue is generated by specifying
  // databaseId for each stage
  const databaseList = findDatabaseListByQuery(context);
  const templateType = context.route.query.template as TemplateType;
  let migrationType: MigrationType = "MIGRATE";
  if (templateType === "bb.issue.database.data.update") {
    migrationType = "DATA";
  }
  if (templateType === "bb.issue.database.schema.baseline") {
    migrationType = "BASELINE";
  }
  const statement =
    migrationType === "BASELINE" ? ESTABLISH_BASELINE_SQL : VALIDATE_ONLY_SQL;

  const createContext: IssueCreateContext = {
    migrationType,
    updateSchemaDetailList: databaseList.map((db) => {
      return {
        databaseId: db.id,
        databaseName: "", // Only `databaseId` is needed in standard pipeline.
        statement,
      };
    }),
  };

  // If the database is within VCS project, try to find its latest and done migration history from VCS.
  // If not found, keep the vcsPushEvent field empty and check in backend.
  if (migrationType === "BASELINE" && databaseList.length === 1) {
    const database = databaseList[0];
    if (database.project.workflowType === "VCS") {
      const migrationHistory =
        helper.intanceStore.getLatestDoneVCSMigrationHistory(
          database.instance.id,
          database.name
        );
      if (migrationHistory) {
        (createContext as UpdateSchemaContext).vcsPushEvent =
          migrationHistory.payload?.pushEvent;
      }
    }
  }

  helper.issueCreate!.createContext = createContext;
  await helper.validate();

  // clean up createContext for standard issues
  helper.issueCreate!.createContext = {};

  return helper.generate();
};
