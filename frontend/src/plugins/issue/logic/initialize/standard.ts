import { TemplateType } from "@/plugins";
import { IssueCreate, IssueCreateContext, MigrationType } from "@/types";
import {
  findDatabaseListByQuery,
  BuildNewIssueContext,
  ESTABLISH_BASELINE_SQL,
  VALIDATE_ONLY_SQL,
} from "../common";
import { IssueCreateHelper } from "./helper";

export const buildNewStandardIssue = async (
  context: BuildNewIssueContext
): Promise<IssueCreate> => {
  const helper = new IssueCreateHelper(context);

  await helper.prepare();

  // standard single-stage or multi-stage issue is generated by specifying
  // databaseId for each stage
  const databaseList = findDatabaseListByQuery(context);
  const templateType = context.route.query.template as TemplateType;
  let migrationType: MigrationType = "MIGRATE";
  if (templateType === "bb.issue.database.data.update") {
    migrationType = "DATA";
  }
  if (templateType === "bb.issue.database.schema.baseline") {
    migrationType = "BASELINE";
  }
  const statement =
    migrationType === "BASELINE" ? ESTABLISH_BASELINE_SQL : VALIDATE_ONLY_SQL;

  const createContext: IssueCreateContext = {
    detailList: databaseList.map((db) => {
      return {
        migrationType: migrationType,
        databaseId: db.id,
        statement,
      };
    }),
  };

  helper.issueCreate!.createContext = createContext;
  await helper.validate();

  // clean up createContext for standard issues
  helper.issueCreate!.createContext = {};

  return helper.generate();
};
