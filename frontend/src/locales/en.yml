common:
  save: Save
  cancel: Cancel
  home: Home
  settings: Settings
  projects: Projects
  help: Help
  databases: Databases
  instances: Instances
  environments: Environments
  bookmarks: Bookmarks
  quick-action: Quick Action
  archive: Archive
  quickstart: Quickstart
  logout: Logout
  dismiss: Dismiss
  back: Back
  next: Next
  skip: Skip
  edit: Edit
  create: Create
  update: Update
  visit: Visit
  role:
    dba: DBA
    owner: Owner
    developer: Developer
  role-switch:
    dba: Switch to DBA
    owner: Switch to Owner
    developer: Switch to Developer
  assignee: Assignee
  revert: Revert
  apply: Apply
  reorder: Reorder
  id: ID
  name: Name
  creator: Creator
  version: Version
  issue: Issue
  duration: Duration
  created-at: Created
  updated-at: Updated
  commit: Commit
  statement: Statement
  snapshot: Snapshot
error-page:
  go-back-home: Go back home
anomaly-center: Anomaly Center
kbar:
  recently-visited: Recently Visited
  navigation: Navigation
  help:
    navigate: to navigate
    perform: to perform
    close: to close
    back: to back
  options:
    placeholder: Type a command or search…
  preferences:
    common: Preferences
    change-language: Change Language…
banner:
  demo-intro: This is a demo version of Bytebase.
  demo-intro-readonly: This is a demo version of Bytebase in read-only mode.
  action: Deploy yours in 5 seconds
intro:
  content: >-
    Bytebase is for DBAs and Developers to collaborate on database schemas
    changes. One can construct a single pipeline to propagate the schema change
    across multiple environments. One can also store the schemas in VCS and
    trigger a new pipeline upon commit push. Follow the {quickstart} on the
    bottom left to get familiar with the product. If you encounter problems,
    visit {doc} or report {issue} on GitHub.
  quickstart: Quickstart
  doc: doc
  issue: issue
bbkit:
  alert:
    ok: OK
    cancel: Cancel
settings:
  sidebar:
    account: Account
    profile: Profile
    workspace: Workspace
    general: General
    members: Members
    version-control: Version Control
    plans: Plans
  profile:
    email: Email
    role: Role
    password: Password
    password-placeholder: sensitive - write only
    password-confirm: Confirm
    password-confirm-placeholder: Confirm new password
    password-mismatch: mismatch
    plan: (Upgrade to Team plan to enable role management)
  workspace:
    url-section: SQL Console URL
    url-tip: 'Tip: Use {schema} as the placeholder for the actual database name'
    tip: >-
      If your team use a separate SQL console such as phpMyAdmin, you can
      provide its URL pattern here. Once provided, Bytebase will surface the
      console link on the relevant database and table UI.
    tip-link: Detailed guide
  members:
    active: Active members
    inactive: Inactive members
    helper: Add or invite by email address
    add-more: + Add more
    add: Add
    invites: Send Invites
    invited: Invited
    yourself: You
    upgrade: Upgrade to unlock Owner and DBA roles
    select-role: Select role
    not-assigned: Not assigned
    table:
      account: Account
      role: Role
      update-time: Updated Time
    action:
      deactivate: Deactivate
      deactivate-confirm-title: Are you sure to deactivate
      deactivate-confirm-description: You can still reactivate later
      reactivate: Reactivate
      reactivate-confirm-title: Are you sure to reactivate
    tooltip:
      upgrade: Upgrade to Team plan to enable role management
      not-allow-edit: Only Owner can change the role
      not-allow-remove: Can not remove the last Owner
activity:
  name: Name
  comment: Comment
  created: Created
  invoker: Invoker
alter-schema:
  vcs-enabled: >-
    This project has enabled VCS based version control and selecting database
    below will navigate you to the corresponding Git repository to create schema
    change.
  vcs-info: >-
    indicates the project has enabled VCS based version control. Selecting
    database belonging to such project will navigate you to the corresponding
    Git repository to create schema change.
  alter-single-db: Alter single database
  alter-multiple-db: Alter multiple databases
  alter-multiple-db-info: >-
    For each environment, you can select a database to alter its schema or just
    skip that environment. This allows you to compose a single pipeline to
    propagate schema changes across multiple environments.
quick-action:
  alter-schema: Alter schema
  create-db: Create database
  choose-db: Choose database
create-db:
  new-database-name: New database name
  reserved-db-error: '{databaseName} is a reserved name'
db:
  encoding: Encoding
  character-set: Character set
  collation: Collation
  select: Select database
  select-instance-first: Select instance first
  select-environment-first: Select environment first
instance:
  select: Select instance
environment:
  select: Select environment
  archive: Archive this environment
  archive-info: >-
    Archived environment will not be shown on the normal interface. You can
    still restore later from the Archive page.
  create: Create Environment
quick-start:
  bookmark-an-issue: Bookmark an issue
  add-a-comment: Add a comment
  visit-project: '@:common.visit @:common.projects'
  visit-instance: '@:common.visit @:common.instances'
  visit-database: '@:common.visit @:common.databases'
  visit-environment: '@:common.visit @:common.environments'
  add-a-member: Add a member
  notice:
    title: Quickstart guide dismissed
    desc: You can still bring it back later from the top right menu
policy:
  approval:
    name: Approval Policy
    info: >-
      For updating schema on the existing database, this setting controls
      whether the task requires manual approval.
    manual: Require manual approval
    manual-info: >-
      Pending schema migration task will only be executed after it's manually
      approved.
    auto: Skip manual approval
    auto-info: Pending schema migration task will be executed automatically.
  backup:
    name: Database backup schedule policy
    not-enforced: Not enforced
    not-enforced-info: No backup schedule is enforced.
    daily: Daily backup
    daily-info: Enforce every database to backup daily.
    weekly: Weekly backup
    weekly-info: Enforce every database to backup weekly.
migration-history:
  self: Migration History
  workflow: Workflow
  commit-info: by {author} at {time}
  no-schema-change: this migration has no schema change
  show-diff: Show diff
  left-vs-right: Prev (left) vs This version (right)
  schema-snapshot-after-migration: The schema snapshot recorded after applying this migration
  list-limit: >-
    For database having migration history, we list up to 5 most recent histories
    below. You can click the database name to view all histories.
  no-history-in-project: Do not find migration history from any database in this project.
  recording-info: Migration history is recorded whenever the database schema is altered.
  establish-baseline: Establish new baseline
  refreshing-history: Refreshing history ...
  config-instance: Config instance
  establish-baseline-description: >-
    Bytebase will use the current schema as the new baseline. You should check
    that the current schema does reflect the desired state. For VCS workflow,
    there must exist a baseline before any incremental migration change can be
    applied to the database.
  establish-database-baseline: Establish "{name}" baseline
  instance-missing-migration-schema: Missing migration history schema on instance "{name}".
  instance-bad-connection: Unable to connect instance "{name}" to retrieve migration history.
  contact-dba: Please contact your DBA to config it
