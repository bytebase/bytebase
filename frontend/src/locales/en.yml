common:
  view: view
  you: you
  general: General
  slack: Slack
  discord: Discord
  teams: Teams
  dingtalk: DingTalk
  feishu: Feishu
  wecom: WeCom
  overview: Overview
  migration-history: Migration History
  webhooks: Webhooks
  key: Key
  workflow: Workflow
  unread: Unread
  read: Read
  inbox: Inbox
  activity: Activity
  activities: Activities
  sign-in: Sign in
  sign-up: Sign up
  email: Email
  username: Username
  password: Password
  activate: Activate
  save: Save
  cancel: Cancel
  comment: Comment
  home: Home
  settings: Settings
  project: Project
  projects: Projects
  help: Help
  database: Database
  databases: Databases
  description: Description
  instance: Instance
  instances: Instances
  environment: Environment
  environments: Environments
  bookmark: Bookmark
  bookmarks: Bookmarks
  quick-action: Quick Action
  archive: Archive
  quickstart: Quickstart
  logout: Logout
  close: Close
  latest: Latest
  error: Error
  canceled: Canceled
  approval: Approval
  approve: Approve
  done: Done
  create: Create
  rollback: Rollback
  run: Run
  retry: Retry
  skip: Skip
  reopen: Reopen
  dismiss: Dismiss
  back: Back
  next: Next
  edit: Edit
  update: Update
  visit: Visit
  role:
    dba: DBA
    owner: Owner
    developer: Developer
  role-switch:
    dba: Switch to DBA
    owner: Switch to Owner
    developer: Switch to Developer
  assignee: Assignee
  revert: Revert
  apply: Apply
  reorder: Reorder
  id: ID
  name: Name
  creator: Creator
  version: Version
  issue: Issue
  duration: Duration
  created-at: Created
  updated-at: Updated
  commit: Commit
  statement: Statement
  sql-statement: SQL statement
  snapshot: Snapshot
  status: Status
  stage: Stage
  sql: SQL
  unassigned: Unassigned
  new: New
  add: Add
  query: Query
  transfer: Transfer
  migration: Migration
  schema: Schema
  anomalies: Anomalies
  do-not-show-again: Do not show again
  backups: Backups
  detail: Detail
  type: Type
  language: Language
  repository: Repository
  change: Change
  branch: Branch
  config-guide: config guide
  required-placeholder: required placeholder
  optional-placeholder: optional placeholder
  sensitive-placeholder: sensitive - write only
  enabled: enabled
  default: default
  version-control: version control
  restore: Restore
  detailed-guide: detailed guide
  workspace: workspace
  application: Application
  confirm: Confirm
  coming-later: Coming later
  learn-more: Learn more
  schema-version: Schema version
  time: Time
  manual: Manual
  automatic: Automatic
  Default: Default
  definition: Definition
  empty: Empty
  creating: Creating...
  updating: Updating...
  Address: Address
  User: User
  assigned: Assigned
  subscribed: Subscribed
  created: Created
  roletype: Role Type
  readonly: readonly
  user: User
  added-time: Added time
  data-source: Data Source
  grant: Grant
  read-only: Read-only
  connection-string: Connection string
error-page:
  go-back-home: Go back home
anomaly-center: Anomaly Center
kbar:
  recently-visited: Recently Visited
  navigation: Navigation
  help:
    navigate: to navigate
    perform: to perform
    close: to close
    back: to back
  options:
    placeholder: Type a command or search…
  preferences:
    common: Preferences
    change-language: Change Language…
task:
  checking: Checking...
  run-task: Run checks
  check-result:
    title: Check result for {name}
  check-type:
    fake: Fake
    syntax: Syntax
    compatibility: Compatibility
    connection: Connection
    migration-schema: Migration schema
  comment: Comment
  invoker: Invoker
  started: Started
  ended: Ended
  view-migration: View migration
  view-migration-history: View migration history
banner:
  demo-intro: This is a demo version of Bytebase.
  demo-intro-readonly: This is a demo version of Bytebase in read-only mode.
  action: Deploy yours in 5 seconds
intro:
  content: >-
    Bytebase is for DBAs and Developers to collaborate on database schemas
    changes. One can construct a single pipeline to propagate the schema change
    across multiple environments. One can also store the schemas in VCS and
    trigger a new pipeline upon commit push. Follow the {quickstart} on the
    bottom left to get familiar with the product. If you encounter problems,
    visit {doc} or report {issue} on GitHub.
  quickstart: Quickstart
  doc: doc
  issue: issue
bbkit:
  common:
    ok: OK
    cancel: Cancel
    back: Back
    next: Next
    finish: Finish
    step: Step
  attention:
    default: Attention needed
settings:
  sidebar:
    account: Account
    profile: Profile
    workspace: Workspace
    general: General
    members: Members
    version-control: Version Control
    plans: Plans
  profile:
    email: Email
    role: Role
    password: Password
    password-confirm: Confirm
    password-confirm-placeholder: Confirm new password
    password-mismatch: mismatch
    plan: (Upgrade to Team plan to enable role management)
  workspace:
    url-section: SQL Console URL
    url-tip: 'Tip: Use {schema} as the placeholder for the actual database name'
    tip: >-
      If your team use a separate SQL console such as phpMyAdmin, you can
      provide its URL pattern here. Once provided, Bytebase will surface the
      console link on the relevant database and table UI.
    tip-link: Detailed guide
  members:
    active: Active members
    inactive: Inactive members
    helper: Add or invite by email address
    add-more: + Add more
    add: Add
    invites: Send Invites
    invited: Invited
    yourself: You
    upgrade: Upgrade to unlock Owner and DBA roles
    select-role: Select role
    not-assigned: Not assigned
    table:
      account: Account
      role: Role
      update-time: Updated Time
      granted-time: Granted Time
    action:
      deactivate: Deactivate
      deactivate-confirm-title: Are you sure to deactivate
      deactivate-confirm-description: You can still reactivate later
      reactivate: Reactivate
      reactivate-confirm-title: Are you sure to reactivate
    tooltip:
      upgrade: Upgrade to Team plan to enable role management
      not-allow-edit: Only Owner can change the role
      not-allow-remove: Can not remove the last Owner
activity:
  name: Name
  comment: Comment
  created: Created
  invoker: Invoker
  sentence:
    created-issue: created issue
    commented: commented
    reassigned-issue: reassigned issue from {oldName} to {newName}
    assigned-issue: assigned issue to {newName}
    unassigned-issue: unassigned issue from {oldName}
    invalid-assignee-update: invalid assignee update
    changed-description: changed description
    changed-from-to: changed {name} from "{oldValue}" to "{newValue}"
    unset-from: unset {name} from "{oldValue}"
    set-to: set {name} to "{newValue}"
    changed-update: changed {name} update
    reopened-issue: reopened issue
    resolved-issue: resolved issue
    canceled-issue: canceled issue
    empty: ''
    changed: changed
    updated: updated
    canceled: canceled
    approved: approved
    started: started
    completed: completed
    failed: failed
    task-name: ' task {name}'
    committed-to-at: committed {file} to{branch}{'@'}{repo}
  subject-prefix:
    task: Task
issue:
  waiting-approval: Waiting Approval
  opened-by-at: opened by {creator} at {time}
  commit-by-at: commit {id} {title} by {author} at {time}
  status-transition:
    modal:
      resolve: Resolve issue?
      cancel: Cancel this entire issue?
      reopen: Reopen issue?
    dropdown:
      resolve: Resolve issue
      cancel: Cancel issue
      reopen: Reopen issue
    form:
      note: Note
      placeholder: (Optional) Add a note...
  subscribe: Subscribe
  unsubscribe: Unsubscribe
  subscriber: No subscribers | 1 subscriber | {n} subscribers
  apply-to-other-stages: Apply to other stages
  add-sql-statement: Add SQL statement...
  optional-add-sql-statement: (Optional) Add SQL statement...
  rollback-sql: Rollback SQL
  add-rollback-sql-statement: Add rollback SQL statement...
  edit-description: Edit description
  add-some-description: Add some description...
  add-a-comment: Add a comment
  edit-comment: Edit comment
  leave-a-comment: Leave a comment...
  view-commit: View commit
  search-issue-name: Search issue name
  table:
    open: Open
    closed: Closed
    status: Status
    project: Project
    name: Name
    environment: Environment
    db: DB
    progress: Progress
    updated: Updated
    assignee: Assignee
  stage-select:
    active: '{name} (active)'
alter-schema:
  vcs-enabled: >-
    This project has enabled VCS based version control and selecting database
    below will navigate you to the corresponding Git repository to create schema
    change.
  vcs-info: >-
    indicates the project has enabled VCS based version control. Selecting
    database belonging to such project will navigate you to the corresponding
    Git repository to create schema change.
  alter-single-db: Alter single database
  alter-multiple-db: Alter multiple databases
  alter-multiple-db-info: >-
    For each environment, you can select a database to alter its schema or just
    skip that environment. This allows you to compose a single pipeline to
    propagate schema changes across multiple environments.
quick-action:
  alter-schema: Alter Schema
  create-db: Create database
  choose-db: Choose database
  new-db: New DB
  add-instance: '@:common.add @:common.instance'
  create-instance: '@:common.create @:common.instance'
  manage-user: Manage User
  default-project: Default Project
  add-environment: '@:common.add @:common.environment'
  create-environment: '@:common.create @:common.environment'
  new-project: '@:common.new @:common.project'
  create-project: '@:common.create @:common.project'
  edit-data: Edit Data
  troubleshoot: Troubleshoot
  transfer-in-db: Transfer in DB
  request-db: Request DB
  from-default-project: From Default project
  from-other-projects: From other projects
  transfer-in-db-title: Transfer in database from other projects
  transfer-in-db-hint: >-
    Bytebase periodically syncs the instance schema. Newly synced databases are
    first placed in this default project.
  transfer-in-db-alert: Are you sure to transfer "{ dbName }" into our project?
create-db:
  new-database-name: New database name
  reserved-db-error: '{databaseName} is a reserved name'
db:
  encoding: Encoding
  character-set: Character set
  collation: Collation
  select: Select database
  select-instance-first: Select instance first
  select-environment-first: Select environment first
  tables: Tables
  views: Views
  parent: Parent
  last-successful-sync: Last successful sync
  sync-status: Sync status
instance:
  select: Select instance
  new-database: New Database
  syncing: Syncing ...
  sync-now: Sync Now
  create-migration-schema: Create migration schema
  missing-migration-schema: Missing migration schema
  unable-to-connect-instance-to-check-migration-schema: Unable to connect instance to check migration schema
  bytebase-relies-on-migration-schema-to-manage-version-control-based-schema-migration-for-databases-belonged-to-this-instance: >-
    Bytebase relies on migration schema to manage version control based schema
    migration for databases belonged to this instance.
  please-contact-your-dba-to-configure-it: Please contact your DBA to configure it.
  please-check-the-instance-connection-info-is-correct: Please check the instance connection info is correct.
  users: Users
  successfully-archived-instance-updatedinstance-name: Successfully archived instance '{0}'.
  successfully-restored-instance-updatedinstance-name: Successfully restored instance '{0}'.
  failed-to-create-migration-schema-for-instance-instance-value-name: Failed to create migration schema for instance '{0}'.
  successfully-created-migration-schema-for-instance-value-name: Successfully created migration schema for '{0}'.
  failed-to-sync-schema-for-instance-instance-value-name: Failed to sync schema for instance '{0}'.
  successfully-synced-schema-for-instance-instance-value-name: Successfully synced schema for instance '{0}'.
  archive-this-instance: Archive this instance
  archive-instance-instance-name: Archive instance '{0}'?
  archived-instances-will-not-be-shown-on-the-normal-interface-you-can-still-restore-later-from-the-archive-page: >-
    Archived instances will not be shown on the normal interface. You can still
    restore later from the Archive page.
  restore-this-instance: Restore this instance
  restore: Restore
  restore-instance-instance-name-to-normal-state: Restore instance '{0}' to normal state?
  account-name: Account name
  account: Account
  name: Name
  host-or-socket: Host or Socket
  your-snowflake-account-name: your Snowflake account name
  port: Port
  instance-name: Instance Name
  snowflake-web-console: Snowflake Web Console
  external-link: External Link
  web-console: Web Console
  connection-info: Connection info
  show-how-to-create: Show how to create
  below-is-an-example-to-create-user-bytebase-with-password: Below is an example to create user 'bytebase{'@'}%' with password
  below-is-an-example-to-create-user-bytebase-with-password-clickhouse: Below is an example to create user 'bytebase' with password
  your_db_pwd: YOUR_DB_PWD
  sentence:
    host:
      snowflake: e.g. host.docker.internal {'|'} <<ip>> {'|'} <<local socket>>
    proxy:
      snowflake: >-
        For proxy server, append {'@'}PROXY_HOST and specify PROXY_PORT in the
        port
    console:
      snowflake: >-
        The external console URL managing this instance (e.g. AWS RDS console,
        your in-house DB instance console)
    create-user: >-
      This is the connection user used by Bytebase to perform DDL and DML
      operations.
    create-user-example:
      snowflake:
        user: bytebase{'@'}%
        password: YOUR_DB_PWD
        template: >-
          Below is an example to create user 'bytebase' with password {password}
          for {warehouse} and grant the user with the needed privileges.
      mysql:
        password: YOUR_DB_PWD
        user: bytebase{'@'}%
        template: >-
          Below is an example to create user {user} with password {password} and
          grant the user with the needed privileges.
      clickhouse:
        template: >-
          Below is an example to create user 'bytebase' with password {password}
          and grant the user with the needed privileges. First you need to
          enable ClickHouse SQL-driven workflow {link} and then run the
          following query to create the user.
        sql-driven-workflow: SQL-driven workflow
      postgres:
        warn: >-
          If the connecting instance is managed by the cloud provider, then
          SUPERUSER is not available and you should create the user via that
          provider\'s admin console. The created user will have provider
          specific semi-SUPERUSER privileges.
        template: >-
          Below is an example to create user 'bytebase' with password {password}
          and grant the user with the needed privileges. If the connecting
          instance is self-hosted, then you can grant SUPERUSER.
  no-password: No password
  password-write-only: YOUR_DB_PWD - write only
  test-connection: Test Connection
  ignore-and-create: Ignore and create
  connection-info-seems-to-be-incorrect: Connection info seems to be incorrect
  new-instance: New Instance
  unable-to-connect: >-
    Bytebase is unable to connect the instance. We recommend you to review the
    connection info again. But it's OK to ignore this warning for now. You can
    still fix the connection info from the instance detail page after
    creation.\n\nError detail: {0}
  successfully-created-instance-createdinstance-name: Successfully created instance '{0}'.
  successfully-updated-instance-instance-name: Successfully updated instance '{0}'.
  copy-grant-statement: >-
    CREATE USER and GRANT statements copied to clipboard. Paste to your mysql
    client to apply.
  successfully-connected-instance: Successfully connected instance.
  failed-to-connect-instance: Failed to connect instance.
  how-to-setup-instance: How to setup \'Instance\' ?
  how-to-setup-instance-description: >-
    Each Bytebase instance belongs to an environment. An instance usually maps
    to one of your database instance represented by an host:port address. This
    could be your on-premises MySQL instance, a RDS instance.\n\nBytebase
    requires read/write (NOT the super privilege) access to the instance in
    order to perform database operations on behalf of the user.
  search-instance-name: Search instance name
  grants: Grants
environment:
  select: Select environment
  archive: Archive this environment
  archive-info: >-
    Archived environment will not be shown on the normal interface. You can
    still restore later from the Archive page.
  create: Create Environment
quick-start:
  bookmark-an-issue: Bookmark an issue
  add-a-comment: Add a comment
  visit-project: '@:common.visit @:common.projects'
  visit-instance: '@:common.visit @:common.instances'
  visit-database: '@:common.visit @:common.databases'
  visit-environment: '@:common.visit @:common.environments'
  add-a-member: Add a member
  notice:
    title: Quickstart guide dismissed
    desc: You can still bring it back later from the top right menu
auth:
  sign-up:
    title: Register your account
    admin-title: Setup {account}
    admin-account: admin account
    create-admin-account: Create admin account
    confirm-password: Confirm Password
    confirm-password-placeholder: Confirm password
    password-mismatch: mismatch
    existing-user: Already have an account?
  sign-in:
    title: Sign in to your account
    admin-title: Setup {'account'}
    admin-account: admin account
    forget-password: Forgot your password?
    new-user: New to Bytebase?
  password-forget:
    title: Forgot your password?
    content: Please contact your Bytebase Admin to reset your password.
    return-to-sign-in: Return to Sign in
  password-reset:
    title: Reset your password
    content: Enter your email address and we will send you a password reset link
    send-reset-link: Send reset link
    return-to-sign-in: Return to Sign in
  activate:
    title: Activate your {type} account
policy:
  approval:
    name: Approval Policy
    info: >-
      For updating schema on the existing database, this setting controls
      whether the task requires manual approval.
    manual: Require manual approval
    manual-info: >-
      Pending schema migration task will only be executed after it's manually
      approved.
    auto: Skip manual approval
    auto-info: Pending schema migration task will be executed automatically.
  backup:
    name: Database backup schedule policy
    not-enforced: Not enforced
    not-enforced-info: No backup schedule is enforced.
    daily: Daily backup
    daily-info: Enforce every database to backup daily.
    weekly: Weekly backup
    weekly-info: Enforce every database to backup weekly.
migration-history:
  self: Migration History
  workflow: Workflow
  commit-info: by {author} at {time}
  no-schema-change: this migration has no schema change
  show-diff: Show diff
  left-vs-right: Prev (left) vs This version (right)
  schema-snapshot-after-migration: The schema snapshot recorded after applying this migration
  list-limit: >-
    For database having migration history, we list up to 5 most recent histories
    below. You can click the database name to view all histories.
  no-history-in-project: Do not find migration history from any database in this project.
  recording-info: Migration history is recorded whenever the database schema is altered.
  establish-baseline: Establish new baseline
  refreshing-history: Refreshing history ...
  config-instance: Config instance
  establish-baseline-description: >-
    Bytebase will use the current schema as the new baseline. You should check
    that the current schema does reflect the desired state. For VCS workflow,
    there must exist a baseline before any incremental migration change can be
    applied to the database.
  establish-database-baseline: Establish "{name}" baseline
  instance-missing-migration-schema: Missing migration history schema on instance "{name}".
  instance-bad-connection: Unable to connect instance "{name}" to retrieve migration history.
  contact-dba: Please contact your DBA to config it
database:
  the-list-might-be-out-of-date-and-is-refreshed-roughly-every-10-minutes: The list might be out of date and is refreshed roughly every 10 minutes
  no-anomalies-detected: No anomalies detected
  sync-status: Sync status
  last-successful-sync: Last successful sync
  search-database-name: Search database name
  how-to-setup-database: How to setup \'Database\' ?
  show-guide-description: >-
    Each Bytebase database maps to the one created by \'CREATE DATABASE xxx\'.
    In Bytebase, a database always belongs to a single project.\n\nBytebase will
    periodically sync the database info for every recorded instance. You can
    also create a new database from the dashboard.
  restored-from: 'Restored from '
  database-name-is-restored-from-another-database-backup: '{0} is restored from another database backup'
  database-backup: database backup
  sql-console: SQL Console
  transfer-project: Transfer Project
  alter-schema-in-vcs: Alter Schema in VCS
  successfully-transferred-updateddatabase-name-to-project-updateddatabase-project-name: Successfully transferred '{0}' to project '{1}'.
  backup-name: Backup name
  create-backup: Create backup
  automatic-weekly-backup: Automatic weekly backup
  disable-automatic-backup: Disable automatic backup
  backuppolicy-backup-enforced-and-cant-be-disabled: '{0} backup enforced and can''t be disabled'
  backup-policy:
    DAILY: DAILY
    WEEKLY: WEEKLY
  an-http-post-request-will-be-sent-to-it-after-a-successful-backup: An HTTP POST request will be sent to it after a successful backup.
  backup-info:
    template: Backup will be taken on every {dayOrWeek} at {time}
  week:
    Sunday: Sunday
    Monday: Monday
    Tuesday: Tuesday
    Wednesday: Wednesday
    Thursday: Thursday
    Friday: Friday
    Saturday: Saturday
    day: day
  enable-backup: Enable backup
  backup-now: Backup now
  create-a-manual-backup: Create a manual backup
  disabled: Disabled
  enabled: Enabled
  action-automatic-backup-for-database-props-database-name: '{0} automatic backup for database ''{1}''.'
  updated-backup-webhook-url-for-database-props-database-name: Updated backup webhook URL for database '{0}'.
  last-sync-status: Last sync status {0} at {1}
  version-control-enabled: Version control enabled
  restore-backup: Restore backup '{0}' to a new database
  nullable: Nullable
  restore: Restore
  backup:
    enabled: enabled
    disabled: disabled
  expression: Expression
  position: Position
  unique: Unique
  visible: Visible
  comment: Comment
  engine: Engine
  row-count-estimate: Row count estimate
  data-size: Data size
  index-size: Index size
  columns: Columns
  indexes: Indexes
t:
  database: {}
repository:
  branch-observe-file-change: The branch where Bytebase observes the file change.
  branch-specify-tip: 'Tip: You can also use wildcard like ''feature/*'
  base-directory: Base directory
  base-directory-description: >-
    The root directory where Bytebase observes the file change. If empty, then
    it observes the entire repository.
  file-path-template: File path template
  file-path-template-description: >-
    Bytebase only observes the file path name matching the template pattern
    relative to the base directory.
  file-path-example-normal-migration: File path example for normal migration type
  file-path-example-baseline-migration: File path example for baseline migration type
  schema-path-template: Schema path template
  schema-writeback-description: >-
    When specified, after each migration, Bytebase will write the latest schema
    to the schema path relative to the base directory in the same branch as the
    original commit triggering the migration. Leave empty if you don't want
    Bytebase to do this
  schema-writeback-protected-branch: >-
    Make sure the changed branch is not protected or allow repository maintainer
    to push to that protected branch.
  if-specified: If specified
  schema-path-example: Schema path example
  git-provider: Git provider
  version-control-status: '@.capitalize:common.version-control is {status}'
  version-control-description-file-path: >-
    Database migration scripts are stored in {fullPath}. To make schema changes,
    a developer would create a migration script matching file path pattern
    {fullPathTemplate}.
  version-control-description-branch: >-
    After the script is review approved and merged into the {branch} branch,
    Bytebase will automatically kicks off the pipeline to apply the new schema
    change.
  version-control-description-description-schema-path: >-
    After applying the schema change, Bytebase will also write the latest schema
    to the specified schema path location {schemaPathTemplate}.
  restore-to-ui-workflow: Restore to UI workflow
  restore-ui-workflow-description: >-
    When using the UI workflow, the developer submits a SQL review ticket
    directly from Bytebase console and waits for the assigned DBA or peer
    developer to review. Bytebase applies the SQL change after review approved.
  restore-ui-workflow-success: Successfully restored to UI workflow
  update-version-control-config-success: Successfully updated @:common.version-control config
  setup-wizard-guide: If you encounter errors during the process, please refer to our {guide}
  choose-git-provider: Choose Git provider
  select-repository: Select repository
  configure-deploy: Configure deploy
  choose-git-provider-description: >-
    Choose the Git provider where your database schema scripts (.sql) are
    hosted. When you push the changed script to the Git repository, Bytebase
    will automatically create a pipeline to apply the schema change to the
    database.
  choose-git-provider-visit-workspace: Visit {workspace} setting to add more Git providers.
  choose-git-provider-contact-workspace-owner: >-
    Contact your Bytebase owner if you want other Git providers to appear here.
    Bytebase currently supports self-host GitLab EE/CE, and plan to add
    GitLab.com, GitHub Enterprise and GitHub.com later.
  select-repository-attention-gitlab: >-
    Bytebase only lists GitLab projects granting you at least the 'Maintainer'
    role, which allows to configure the project webhook to observe the code push
    event.
  select-repository-search: Search repository
  linked: Linked repositories
workflow:
  current-workflow: Current workflow
  ui-workflow: UI workflow
  ui-workflow-description: >-
    Classic SQL Review workflow where the developer submits a SQL review ticket
    directly from Bytebase and waits for the assigned DBA or peer developer to
    review. Bytebase applies the SQL schema change after review approved.
  gitops-workflow: GitOps workflow
  gitops-workflow-description: >-
    Database migration scripts are stored in a git repository. To make schema
    changes, a developer would create a migration script and submit for review
    in the corresponding VCS such as GitLab. After the script is approved and
    merged into the configured branch, Bytebase will automatically kicks off the
    task to apply the new schema change.
  configure-gitops: Configure version control
  configure-gitops-success: Successfully enabled GitOps workflow for {project}
  change-gitops-success: Successfully changed repository for {project}
anomaly:
  attention-title: Anomaly detection
  attention-desc: >-
    Bytebase periodically scans the managed resources and list the detected
    anomalies here. The list is refreshed roughly every 10 minutes.
  table-search-placeholder: Search {type} or environment
  table-placeholder: Hooray, no {type} anomaly detected!
  tooltip: >-
    {env} has {criticalCount} CRITICAL, {highCount} HIGH and {mediumCount}
    MEDIUM anomalies
  types:
    connection-failure: Connection failure
    missing-migration-schema: Missing migration schema
    backup-enforcement-viloation: Backup enforcement violation
    missing-backup: Missing backup
    schema-drift: Schema drift
  action:
    check-instance: Check instance
    view-backup: View backup
    configure-backup: Configure backup
    view-diff: View diff
  last-seen: Last seen
  first-seen: First seen
project:
  dashboard:
    modal:
      title: How to setup \'@:{'common.project'}\' ?
      content: >-
        Bytebase project is similar to the project concept in other common dev
        tools.


        A project has its own members, and every issue and database always
        belongs to a single project.


        A project can also be configured to link to a repository to enable
        version control workflow.
      cancel: Dismiss
      confirm: Do not show again
    search-bar-placeholder: Search project name
  table:
    key: '@:common.key'
    name: '@:common.name'
    created-at: Created At
  create-modal:
    project-name: '@:common.project @:common.name'
    key: '@:common.key'
    key-hint: (Uppercase letters identifying your project)
    cancel: '@:common.cancel'
    confirm: '@:common.create'
    success-prompt: Successfully created project {name}.
  overview:
    view-all: View all
    view-all-closed: View all closed
    recent-activity: Recent @.lower:{'common.activities'}
    in-progress: In progress
    recently-closed: Recently Closed
    info-slot-content: >-
      Bytebase periodically syncs the instance schema. Newly synced databases
      are first placed in this default project. User should transfer them to the
      proper application project.
    no-db-prompt: >-
      No database belongs to this project. You can add database by clicking
      {newDb} or {transferInDb} from the top action bar.
  webhook:
    success-created-prompt: Successfully created webhook {name}.
    success-updated-prompt: Successfully updated webhook {name}.
    success-deleted-prompt: Successfully deleted webhook {name}.
    success-tested-prompt: Test webhook event OK.
    fail-tested-title: Test webhook event failed.
    create-webhook: Add a webhook
    last-updated-by: Last updated bu
    destination: Destination
    webhook-url: Webhook url
    triggering-activity: Triggering activities
    test-webhook: Test Webhook
    no-webhook:
      title: No webhook configured for this project.
      content: >-
        Configure webhooks to let Bytebase post notification to the external
        systems on various events.
    creation:
      title: Create webhook
      desc: >-
        Create the corresponding webhook for the {destination} channel receiving
        the message.
      how-to-protect: >-
        If you want to use keyword list to protect the webhook, you can add
        "Bytebase" to that list.
      view-doc: View {destination}'s doc
    deletion:
      btn-text: Delete this webhook
    activity-item:
      issue-creation:
        title: Issue creation
        label: When new issue has been created
      issue-status-change:
        title: Issue status change
        label: When issue status has changed
      issue-task-status-change:
        title: Issue task status change
        label: When issue's enclosing task status has changed
      issue-info-change:
        title: Issue info change
        label: When issue info (e.g. assignee, title, description) has changed
      issue-comment-creation:
        title: Issue comment creation
        label: When new issue comment has been created
  settings:
    success-updated-prompt: Successfully updated {subject}.
    success-member-added-prompt: Successfully added {name} to the project.
    success-member-deleted-prompt: Successfully revoked {name} access from the project.
    member-placeholder: Select user
    manage-member: Manage members
    add-member: Add member
    owner: '@.upper:common.role.owner'
    developer: '@.upper:common.role.developer'
    archive:
      btn-text: Archive this @.lower:{'common.project'}
    restore:
      btn-text: Restore this @.lower:{'common.project'}
inbox:
  mark-all-as-read: Mark all as read
  view-older: View older
version-control:
  setting:
    description: >-
      Bytebase supports GitOps workflow where database migration scripts are
      stored in the version control system (VCS), and newly created migration
      scripts will automatically trigger the corresponding database change.
      Bytebase owners manage all the applicable VCSs here, so that project
      owners can link the projects with their Git repositories from these VCSs.
    add-git-provider:
      self: Add a Git provider
      description: >-
        Before any project can enable GitOps workflow, Bytebase first needs to
        integrate with the corresponding version control system (VCS) by
        registering as an OAuth application in that VCS. Below are the steps to
        configure this, you can also follow our {guide}.
      gitlab-self-host: GitLab self-host
      gitlab-self-host-admin-requirement: >-
        You need to be an Admin of your chosen GitLab instance to configure
        this. Otherwise, you need to ask your GitLab instance Admin to register
        Bytebase as a GitLab instance-wide OAuth application, then provide you
        that Application ID and Secret to fill at the 'OAuth application info'
        step.
      ouath-info-correct: Verified OAuth info is correct
      check-oauth-info-match: >-
        Please make sure Secret matches the one from your GitLab instance
        Application.
      add-success: Successfully added Git provider {vcs}
      choose: Choose Git provider
      gitlab-self-host-ce-ee: Self-host GitLab Enterprise Edition (EE) or Community Edition (CE)
      basic-info:
        self: Basic info
        gitlab-instance-url: GitLab instance URL
        gitlab-instance-url-label: >-
          The VCS instance URL. Make sure this instance and Bytebase are network
          reachable from each other.
        instance-url-error: Instance URL must begin with https:// or http://
        display-name: Display name
        display-name-label: >-
          An optional display name to help identifying among different configs
          using the same Git provider.
      oauth-info:
        self: OAuth application info
        register-oauth-application: Register Bytebase as a GitLab instance-wide OAuth application.
        login-as-admin: >-
          Login as an Admin user to the GitLab instance. The account must be an
          Admin of the entire GitLab instance (it has a wrench icon on the top
          bar).
        visit-admin-page: >-
          Go to the Admin page by clicking the wrench icon, then navigate to
          "Applications" section and click "New application" button.
        direct-link: Direct link
        create-oauth-app: Create your Bytebase OAuth application with the following info.
        paste-oauth-info: >-
          Paste the Application ID and Secret from that just created application
          into fields below.
        application-id-error: Application ID must be a 64-character alphanumeric string
        secret-error: Secret must be a 64-character alphanumeric string
      confirm:
        confirm-info: Confirm the info
        confirm-description: >-
          After creation, this Git provider can be chosen under the project
          dashboard "Version Control" tab by the project owner.
    git-provider:
      application-id-label: >-
        Application ID for the registered GitLab instance-wide OAuth
        application.
      view-in-gitlab: View in GitLab
      secret-label-gitlab: Secret for the registered GitLab instance-wide OAuth application.
      delete: To delete this provider, unlink all repositories first.
archive:
  archived: Archived
  project-search-bar-placeholder: Search @.lower:{'common.project'} name
  instance-search-bar-placeholder: Search @.lower:{'common.instance'} name
  environment-search-bar-placeholder: Search @.lower:{'common.environment'} name
datasource:
  successfully-deleted-data-source-name: Successfully deleted data source '{0}'.
  create-data-source: Create data source
  data-source-list: Data source list
  all-data-source: All data source
  search-name: Search name
  search-name-database: Search name, database
  successfully-created-data-source-datasource-name: Successfully created data source '{0}'.
  select-database-first: Select database first
  select-data-source: Select data source
  search-user: Search user
  user-list: User list
  revoke-access: Are you sure to revoke '{0}' access from '{1}'?
  grant-data-source: Grant data source
  requested-issue: Requested issue
  successfully-revoked-member-principal-name-access-from-props-datasource-name: Successfully revoked '{0}' access from '{1}'.
  your-issue-id-e-g-1234: Your issue id (e.g. 1234)
  member-principal-name-already-exists: '{0} already exists'
  successfully-granted-datasource-name-to-addedmember-principal-name: Successfully granted '{0}' to '{1}'.
  we-also-linked-the-granted-database-to-the-requested-issue-linkedissue-name: We also linked the granted database to the requested issue '{0}'.
  new-data-source: New data source
  connection-name-string-copied-to-clipboard: '{0} string copied to clipboard.'
  jdbc-cant-connect-to-socket-database-value-instance-host: 'JDBC can''t connect to socket {0} '
