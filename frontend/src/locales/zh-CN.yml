common:
  when: 于何时
  view: 查看
  you: 您
  general: 通用
  slack: Slack
  discord: Discord
  teams: Teams
  dingtalk: 钉钉
  feishu: 飞书
  wecom: 企业微信
  overview: 概览
  migration-history: 迁移历史
  webhook: Webhook
  webhooks: Webhook
  key: 键值
  workflow: 工作流
  activity: 活动
  activities: 活动
  unread: 未读
  read: 已读
  inbox: 通知
  sign-in: 登录
  sign-up: 注册
  email: 邮箱
  username: 用户名
  password: 密码
  activate: 激活
  save: 保存
  cancel: 取消
  comment: 评论
  home: 主页
  setting: 设置
  settings: 设置
  project: 项目
  projects: 项目
  help: 帮助
  database: 数据库
  databases: 数据库
  description: 描述
  instance: 实例
  instances: 实例
  environment: 环境
  environments: 环境
  bookmark: 书签
  bookmarks: 书签
  quick-action: 快捷操作
  archive: 归档
  quickstart: 快速入门
  logout: 登出
  close: 关闭
  latest: 最新
  error: 错误
  canceled: 已取消
  approval: 批准
  approve: 批准
  done: 完成
  create: 创建
  rollback: 回滚
  run: 运行
  retry: 重试
  skip: 跳过
  reopen: 重开
  dismiss: 关闭
  back: 返回
  next: 下一步
  edit: 编辑
  update: 更新
  visit: 访问
  role:
    dba: DBA
    owner: 所有者
    developer: 开发者
  role-switch:
    dba: 切换到 DBA
    owner: 切换到所有者
    developer: 切换到开发者
  assignee: 审核人
  revert: 恢复
  apply: 应用
  reorder: 排序
  id: ID
  name: 名称
  creator: 创建人
  version: 版本
  issue: 工单
  issues: 工单
  duration: 时长
  created-at: 创建于
  updated-at: 更新于
  commit: 提交
  statement: 语句
  sql-statement: SQL @:{'common.statement'}
  snapshot: 快照
  status: 状态
  stage: 阶段
  task: 任务
  sql: SQL
  unassigned: 未指派
  new: 创建
  add: 添加
  confirm-and-add: 确认并添加
  query: 查询
  transfer: 转移
  migration: 迁移
  schema: Schema
  anomalies: 异常
  do-not-show-again: 不再显示
  backups: 备份
  detail: 详情
  type: 类型
  language: 语言
  repository: 仓库
  change: 变更
  branch: 分支
  config-guide: 配置指南
  required-placeholder: 必需的占位符
  optional-placeholder: 可选的占位符
  sensitive-placeholder: 敏感数据 - 仅写入
  enabled: 开启
  default: 默认
  version-control: 版本控制
  restore: 恢复
  detailed-guide: 详细指南
  workspace: 工作空间
  application: 应用
  confirm: 确认
  coming-later: 敬请期待
  learn-more: 了解更多
  schema-version: Schema 版本
  time: 时间
  manual: 手动
  automatic: 自动
  Default: 默认
  definition: 定义
  empty: 空
  creating: 创建中...
  updating: 更新中...
  Address: 地址
  User: 用户
  assigned: 已指派
  subscribed: 已订阅
  created: 已创建
  label: 标签
  labels: 标签
  mode: 模式
  roletype: 角色类型
  readonly: 只读
  user: 用户
  added-time: 添加时间
  data-source: 数据源
  grant: 授予
  read-only: 只读
  connection-string: 连接字符串
  agents: Agents
  billings: 计费
  all: 全部
  deployment-config: 部署配置
  by: 由
  ok: OK
  share: 分享
  others: 其他
  or: 或者
  export: 导出
  tips: 提示信息
  template: 模板
  delete: 删除
  history: 历史记录
  loading: 加载中
  copied: 已拷贝
  copy: 拷贝
  manage: 管理
  table: 表
  search: 搜索
error-page:
  go-back-home: 回到主页
anomaly-center: 异常中心
kbar:
  recently-visited: 最近访问
  navigation: 导航
  help:
    navigate: 选择
    perform: 执行
    close: 关闭
    back: 返回
  options:
    placeholder: 输入命令或搜索…
  preferences:
    common: 偏好设置
    change-language: 更改语言…
task:
  checking: 检查中…
  run-task: 运行检查
  check-result:
    title: '{name} 的检查结果'
  check-type:
    fake: Fake
    syntax: 语法
    compatibility: 兼容性
    connection: 连接
    migration-schema: 迁移 schema
    earliest-allowed-time: 最早执行时间
  earliest-allowed-time-hint: '''@:{''common.when''}'' 指定了该任务最早允许执行的时间。如果该字段没有被指定，则任务会在满足其他条件后立即执行。'
  comment: 评论
  invoker: 执行者
  started: 开始于
  ended: 结束于
  view-migration: 查看迁移
  view-migration-history: 查看迁移历史
  earliest-allowed-time-unset: 未设置
  status:
    running: 运行中
    failed: 失败
    canceled: 取消
    success: 成功
    warn: 警告
    error: 错误
banner:
  demo-intro: 这是 Bytebase 的演示版本。
  demo-intro-readonly: 这是 Bytebase 的只读演示版本
  action: 5 秒部署您自己的服务
intro:
  content: >-
    Bytebase 是为 DBA 和开发人员进行数据库表结构 (schema) 变更而设计的团队协作工具。用户可以通过一个工作流
    (pipeline)，来推进 schema 在多个环境中的变化。同时用户也可以把 schema 保存在 VCS 中 ，再由新的 schema
    文件提交来触发工作流。请通过左下角的{quickstart}来熟悉该产品。如果遇到问题，请访问{doc}或在 GitHub 上报告{issue}。
  doc: 文档
  issue: 工单
  quickstart: 快速入门
bbkit:
  common:
    ok: 确认
    cancel: 取消
    back: 退回
    next: 下一步
    finish: 完成
    step: 步骤
  attention:
    default: 特别注意
settings:
  sidebar:
    account: 账户
    profile: 个人信息
    workspace: 工作空间
    general: 通用
    members: 成员
    version-control: 版本控制
    subscription: 订阅
    labels: 标签
  profile:
    email: 邮箱
    role: 角色
    password: 密码
    password-confirm: 确认密码
    password-confirm-placeholder: 再次输入以确认
    password-mismatch: 密码输入不一致
    subscription: （升级到付费方案来解锁角色管理）
  members:
    active: 已激活
    inactive: 未激活
    helper: 通过邮箱添加或邀请成员
    add-more: + 增加成员
    add: 添加
    invites: 发送邀请
    invited: 已邀请
    yourself: 您自己
    upgrade: 升级到付费方案来解锁角色管理
    select-role: 选择角色
    not-assigned: 未指派
    table:
      account: 账户
      role: 角色
      update-time: 更新时间
      granted-time: 批准时间
    action:
      deactivate: 禁用
      deactivate-confirm-title: 确定禁用
      deactivate-confirm-description: 之后可以重新启用
      reactivate: 启用
      reactivate-confirm-title: 确定启用
    tooltip:
      upgrade: 升级到付费方案来解锁角色管理
      not-allow-edit: 只有所有者才能改变角色
      not-allow-remove: 不能移除最后一个所有者
activity:
  name: 名称
  comment: 评论
  created: 创建于
  invoker: 执行者
  type:
    issue-create: 创建工单
    comment-create: 创建评论
    issue-field-update: 更新工单字段
    issue-status-update: 更新工单状态
    pipeline-task-status-update: 更新工单任务状态
    pipeline-task-file-commit: 提交文件
    pipeline-task-statement-update: 更新 SQL
    member-create: 创建成员
    member-role-update: 更新角色
    member-activate: 激活成员
    member-deactivate: 禁用成员
    project-repository-push: 仓库 push 事件
    project-database-transfer: 转移数据库
    project-member-create: 添加项目成员
    project-member-delete: 删除项目成员
    project-member-role-update: 变更项目成员角色
    pipeline-task-earliest-allowed-time-update: 更新最早允许执行时间
  sentence:
    created-issue: 创建工单
    commented: 评论
    reassigned-issue: 将工单由 {oldName} 重新指派给 {newName}
    assigned-issue: 将工单指派给 {newName}
    unassigned-issue: 将工单由 {oldName} 解除指派
    invalid-assignee-update: 无效的指派操作
    changed-description: 修改描述
    changed-from-to: 将 {name} 从 "{oldValue}" 修改为 "{newValue}"
    unset-from: 撤销 {name} 的值 (从 "{oldValue}")
    set-to: 将 {name} 设置为 "{newValue}"
    changed-update: 修改 {name}
    reopened-issue: 重开工单
    resolved-issue: 解决工单
    canceled-issue: 取消工单
    empty: ''
    changed: 修改
    updated: 更新
    canceled: 取消
    approved: 批准
    started: 开始
    completed: 完成
    failed: 失败
    task-name: 任务 {name}
    committed-to-at: 提交 {file} 到 {branch}{'@'}{repo}
  subject-prefix:
    task: 任务
issue:
  waiting-approval: 等待批准
  opened-by-at: '{id} 由 {creator} 开启于 {time}'
  commit-by-at: '{id} {title} 由 {author} 提交于 {time}'
  status-transition:
    modal:
      resolve: 解决工单?
      cancel: 取消整个工单?
      reopen: 重开工单?
    dropdown:
      resolve: 解决
      cancel: 取消工单
      reopen: 重开
    form:
      note: 笔记
      placeholder: （可选）添加一段笔记…
  subscribe: 订阅
  unsubscribe: 取消订阅
  subscriber: 没有订阅者 | 1 个订阅者 | {n} 个订阅者
  apply-to-other-stages: '@:{''common.apply''}到其他@:{''common.stage''}'
  add-sql-statement: 添加 SQL @:{'common.statement'}…
  optional-add-sql-statement: （可选）添加 SQL @:{'common.statement'}…
  rollback-sql: '@:{''common.rollback''} SQL'
  add-rollback-sql-statement: 添加 @:{'common.rollback'} SQL @:{'common.statement'}…
  edit-description: 编辑描述
  add-some-description: 添加一些描述…
  add-a-comment: 添加评论
  edit-comment: 编辑评论
  leave-a-comment: 发表一条评论…
  view-commit: 查看提交
  search-issue-name: 搜索工单名称
  table:
    open: 开启中
    closed: 已关闭
    status: 状态
    project: 项目
    name: 名称
    environment: 环境
    db: 数据库
    progress: 进度
    updated: 更新于
    assignee: 审核人
  stage-select:
    active: '{name}（活动中）'
alter-schema:
  vcs-enabled: 该项目开启了基于 VCS 的版本管理，选择下面的数据库会将您导航到相应的 Git 仓库以发起变更流程。
  vcs-info: 代表项目开启了基于 VCS 的版本管理。选择该类项目下的数据库会将您导航到对应的 Git 仓库以发起变更流程。
  alter-single-db: 变更单个数据库
  alter-multiple-db: 变更多个数据库
  alter-multiple-db-info: 针对每个环境，您可以选择一个数据库进行变更或者直接跳过该环境，这样您就可以在一条流水线上把变更逐步作用到多个环境。
quick-action:
  create-db: 创建数据库
  choose-db: 选择数据库
  new-db: 创建数据库
  add-instance: '@:common.add@:common.instance'
  create-instance: '@:common.create@:common.instance'
  manage-user: 成员管理
  default-project: 默认项目
  add-environment: '@:common.add@:common.environment'
  create-environment: '@:common.create@:common.environment'
  new-project: '@:common.new@:common.project'
  create-project: '@:common.create@:common.project'
  edit-data: 编辑数据
  troubleshoot: 问题排查
  transfer-in-db: 转移数据库
  request-db: 申请数据库
  from-default-project: 从默认项目
  from-other-projects: 从其他项目
  transfer-in-db-title: 从其他项目转移数据库
  transfer-in-db-hint: Bytebase 会定期同步实例的 Schema。新同步的数据库会放在默认项目中。
  transfer-in-db-alert: 您确定要转移 "{ dbName }" 到我们的项目中吗？
create-db:
  new-database-name: 新数据库名称
  reserved-db-error: '{databaseName} 是一个预留名称'
  generated-database-name: 生成的数据库名称
  db-name-generated-by-template: 依据模板 "{template}" 生成
  select-label-value: '选择 {key}'
db:
  encoding: 字符编码
  character-set: 字符集
  collation: 字符排序规则
  select: 选择数据库
  select-instance-first: 先选择实例
  select-environment-first: 先选择环境
  tables: 表
  views: 视图
  parent: 母
  last-successful-sync: 上次成功同步于
  sync-status: 同步状态
instance:
  select: 选择实例
  new-database: '@:common.new@:common.database'
  syncing: 同步中 ...
  sync-now: 现在同步
  create-migration-schema: '@:common.create@:common.migration @:{''common.schema''}'
  missing-migration-schema: 缺少@:common.migration @:common.schema
  unable-to-connect-instance-to-check-migration-schema: 无法连接到@:{'common.instance'}以检查@:{'common.migration'} @:{'common.schema'}
  bytebase-relies-on-migration-schema-to-manage-version-control-based-schema-migration-for-databases-belonged-to-this-instance: >-
    Bytebase需要@:{'common.migration'} @:{'common.schema'}
    来管理属于这个@:{'common.instance'}的@:{'common.database'}的基于版本管理的 schema
    @:common.migration
  please-contact-your-dba-to-configure-it: 请联系 DBA 配置。
  please-check-the-instance-connection-info-is-correct: 请检查实例连接信息是否正确。
  users: 用户
  successfully-archived-instance-updatedinstance-name: 成功归档实例'{0}'。
  successfully-restored-instance-updatedinstance-name: 成功恢复实例'{0}'。
  failed-to-create-migration-schema-for-instance-instance-value-name: 为实例'{0}'创建迁移schema失败。
  successfully-created-migration-schema-for-instance-value-name: 成功为'{0}'创建迁移Schema。
  failed-to-sync-schema-for-instance-instance-value-name: 为实例'{0}'同步 schema 失败。
  successfully-synced-schema-for-instance-instance-value-name: 成功为实例'{0}'同步 schema 。
  archive-instance-instance-name: 归档实例'{0}'?
  archive-this-instance: 归档该实例
  archived-instances-will-not-be-shown-on-the-normal-interface-you-can-still-restore-later-from-the-archive-page: 已归档实例不会在界面上显示。您之后仍可以在归档页中恢复他。
  restore-this-instance: 恢复该实例
  restore: 恢复
  restore-instance-instance-name-to-normal-state: 恢复实例'{0}'到正常状态?
  account-name: '@:instance.account@:instance.name'
  account: 账户
  name: 名称
  host-or-socket: Host 或 Socket
  your-snowflake-account-name: 您的 Snowflake @:{'instance.account'}@:{'instance.name'}
  port: 端口
  instance-name: '@:common.instance@:instance.name'
  snowflake-web-console: Snowflake @:{'instance.web-console'}
  external-link: 外部链接
  web-console: Web 控制台
  connection-info: 连接信息
  show-how-to-create: 如何创建
  below-is-an-example-to-create-user-bytebase-with-password: 创建用户 'bytebase{'@'}%' 及其密码的例子如下
  sentence:
    host:
      snowflake: 例如 host.docker.internal {'|'} <<ip>> {'|'} <<local socket>>
    proxy:
      snowflake: 对于代理服务器，加上 {'@'}PROXY_HOST，并在端口里指定 PROXY_PORT
    console:
      snowflake: "\b管理该@:{'common.instance'}的外部控制台 URL（如 AWS RDS 控制台，您的@:{'common.database'}控制台）"
    create-user: 这是 Bytebase 用于连接数据库，执行 DDL 和 DML 操作的用户。
    create-user-example:
      snowflake:
        user: bytebase{'@'}%
        password: YOUR_DB_PWD
        template: 创建用户 bytebase，密码 {password}，warehouse 为{warehouse}，并授予必要权限的例子如下。
      mysql:
        user: bytebase{'@'}%
        password: YOUR_DB_PWD
        template: 创建用户 {user}，密码 {password}，并授予必要权限的例子如下。
      clickhouse:
        sql-driven-workflow: SQL 工作流
        template: 创建用户 bytebase，密码 {password}，并授予必要权限的例子如下。您需要首先启用 {link}，才能执行以下创建用户的命令。
      postgres:
        warn: >-
          如果您将要连接到的实例是由云服务供应商管理的话，那么 SUPERUSER
          是不可用的，您需要通过供应商的管理员控制台来创建用户。您所创建的用户会拥有供应商特定的 semi-SUPERUSER 的权限。
        template: >-
          创建用户 bytebase，密码 {password}，并授予必要权限的例子如下。如果您将要连接到的实例是自己托管的，那么您可以 grant
          SUPERUSER。
  your_db_pwd: YOUR_DB_PWD
  no-password: 无密码
  password-write-only: YOUR_DB_PWD - 仅写入
  test-connection: 测试连接
  ignore-and-create: 忽略并创建
  connection-info-seems-to-be-incorrect: 连接信息似乎错误
  new-instance: 新实例
  unable-to-connect: |-
    Bytebase 无法连接到实例。我们推荐您再检查一遍连接信息。但也可以暂时忽略此警告。您在创建后仍能在实例详细页里修复连接信息。

    错误详情:{0}
  successfully-created-instance-createdinstance-name: 成功创建实例'{0}'。
  successfully-updated-instance-instance-name: 成功更新实例'{0}'。
  copy-grant-statement: CREATE USER and GRANT 语句已复制到剪贴板。 粘贴到您的 mysql 客户端。
  successfully-connected-instance: 成功连接到实例。
  failed-to-connect-instance: 连接到实例失败。
  how-to-setup-instance: 如何设置「实例」?
  how-to-setup-instance-description: |-
    每个 Bytebase 实例属于一个环境。一个实例通常映射到您的一个由 host:port 地址所代表的数据库实例。这可能是您在诸如 AWS 上的
    RDS 实例，也可能是您私有化部署的 MySQL 实例。
    Bytebase 要求实例的读写权限（而不是 super 权限）以代表用户执行数据库操作。
  search-instance-name: 搜索实例名称
  grants: 权限
environment:
  select: 选择环境
  archive: 归档此环境
  archive-info: 已归档环境不会显示。您可以从归档界面恢复。
  create: 创建环境
  how-to-setup-environment: 如何创建「环境」?
  how-to-setup-environment-description: |-
    每个环境与您的诸如测试，预发，生产环境一一对应。

    环境是一个全局配置，一套 Bytebase 的部署也只包含一套环境配置的集合。

    数据库实例是创建在某个特定环境下面的。
  restore: 恢复这个环境
quick-start:
  bookmark-an-issue: 收藏工单
  add-a-comment: 添加评论
  visit-project: '@:common.visit@:common.projects'
  visit-instance: '@:common.visit@:common.instances'
  visit-database: '@:common.visit@:common.databases'
  visit-environment: '@:common.visit@:common.environments'
  add-a-member: 添加成员
  use-kbar: 使用 kbar ({shortcut})
  notice:
    title: 快速入门导览已关闭
    desc: 您稍后仍可以从右上角的菜单中再次打开快速入门导览
auth:
  sign-up:
    title: 注册您的账号
    admin-title: 设置 {account}
    admin-account: 管理员账号
    create-admin-account: 注册管理员
    confirm-password: 确认密码
    confirm-password-placeholder: 确认您的密码
    password-mismatch: 不匹配
    existing-user: 已有账号?
  sign-in:
    title: 登录您的账号
    forget-password: 忘记密码?
    new-user: 第一次使用 Bytebase?
    demo-note: 请使用 demo 账号登录
    gitlab: 通过 GitLab 登录
    gitlab-demo: 演示模式不支持 GitLab 登录
    gitlab-oauth: 您可联系管理员开启 GitLab 登录
  password-forget:
    title: 忘记了您的密码？
    content: 请联系的您的 Bytebase 管理员重置密码
    return-to-sign-in: 返回登录
  password-forgot: 忘记密码
  password-reset:
    title: 重置您的密码
    content: 我们会将重置密码链接发送到您的邮箱
    send-reset-link: 发送重置链接
    return-to-sign-in: 返回登录
  activate:
    title: 激活您的 {type} 账号
policy:
  approval:
    name: 审批策略
    info: 要更改数据库 schema，该选项控制了是否需要手动审批。
    manual: 需要人工审批
    manual-info: 进行中的 schema 改动任务只有被人工审批后才会执行。
    auto: 无需审批
    auto-info: 进行中的任务无需审核并且会被自动执行。
  backup:
    name: 数据库备份策略
    not-enforced: 无策略
    not-enforced-info: 无备份策略。
    daily: 每日
    daily-info: 每日备份数据库。
    weekly: 每周
    weekly-info: 每周备份数据库。
migration-history:
  self: 迁移历史
  workflow: 工作流
  commit-info: 由 {author} 于 {time}
  no-schema-change: 本次迁移没有任何 Schema 的改动
  schema-drift: 上次迁移后的 Schema 与本次迁移前不一致
  before-left-schema-choice: 比较
  left-schema-choice-prev-history-schema: 上次迁移后
  left-schema-choice-current-history-schema-prev: 本次迁移前
  after-left-schema-choice: 和本次迁移后的 Schema
  show-diff: 显示差异
  left-vs-right: 之前 (左) vs 当前版本 (右)
  schema-snapshot-after-migration: 完成这次迁移后的 schema 快照
  list-limit: 对于有迁移历史的数据库，我们会在下面最多列出5条记录。您可以点击数据库名称去进一步查看全部的记录。
  no-history-in-project: 这个项目下没有发现任何数据库有迁移历史。
  recording-info: 每当数据库 schema 变更时，我们便会记录下迁移历史。
  establish-baseline: 建立新的基线
  refreshing-history: 刷新历史中 ...
  config-instance: 配置实例
  establish-baseline-description: >-
    Bytebase 将用当前的 schema 作为新的基线。您应该检查当前的基线确实反映了期望的状态。 对于 VCS
    工作流来说，也只有在建立起基线的前提下，才能进行数据库变更。
  establish-database-baseline: 建立「{name}」基线
  instance-missing-migration-schema: 实例「{name}」缺失用于记录迁移历史的 schema。
  instance-bad-connection: 无法连接实例「{name}」以获取迁移历史。
  contact-dba: 请联系您的 DBA 进行配置。
database:
  the-list-might-be-out-of-date-and-is-refreshed-roughly-every-10-minutes: 该表每隔约10分钟刷新一次，所以展示的可能不是最新信息。
  last-successful-sync: 最后一次成功的同步
  no-anomalies-detected: 没有检测到异常
  sync-status: 同步状态
  search-database-name: 搜索数据库名称
  how-to-setup-database: 如何设置「数据库」？
  show-guide-description: |-
    每个 Bytebase 数据库都映射到由「CREATE DATABASE xxx」创建的一个数据库。

    在 Bytebase 中，一个数据库始终属于单个项目。Bytebase 将定期同步每个实例的数据库信息。

    您还可以从仪表板创建新数据库。
  restored-from: 恢复于
  database-name-is-restored-from-another-database-backup: '{0}恢复于另一个数据库备份'
  transfer-project: 转移项目
  alter-schema: 变更 Schema
  alter-schema-in-vcs: 变更 Schema (VCS)
  change-data: 变更数据
  change-data-in-vcs: 变更数据 (VCS)
  successfully-transferred-updateddatabase-name-to-project-updateddatabase-project-name: 成功将'{0}'转移到项目'{1}'。
  database-backup: 数据库备份
  backup-name: 备份名称
  create-backup: 创建备份
  automatic-weekly-backup: 每周自动备份
  disable-automatic-backup: 禁用自动备份
  backuppolicy-backup-enforced-and-cant-be-disabled: 强制{0}备份，不能禁用
  backup-policy:
    DAILY: 每日
    WEEKLY: 每周
  an-http-post-request-will-be-sent-to-it-after-a-successful-backup: 备份成功后向其发送 HTTP POST 请求。
  backup-info:
    template: 每{dayOrWeek}{time} 备份
  week:
    Friday: 周五
    Monday: 周一
    Saturday: 周六
    Sunday: 周日
    Thursday: 周四
    Wednesday: 周三
    Tuesday: 周二
    day: 日
  enable-backup: 启用备份
  backup-now: 现在备份
  create-a-manual-backup: 创建手动备份
  action-automatic-backup-for-database-props-database-name: 数据库'{1}'{0}自动备份
  enabled: 启用
  disabled: 禁用
  updated-backup-webhook-url-for-database-props-database-name: 更新了数据库'{0}'的 webhook URL。
  last-sync-status: 最后一次同步状态
  last-sync-status-long: 最后一次同步在{1}，状态为{0}
  version-control-enabled: 已启用版本控制
  restore-backup: 恢复备份'{0}'到一个新的数据库中
  nullable: 可为空
  restore: 恢复
  backup:
    enabled: 已启用
    disabled: 已禁用
  expression: 表达式
  position: 位置
  unique: Unique
  visible: Visible
  comment: 注释
  engine: 引擎
  row-count-estimate: 估计行数
  data-size: 数据大小
  index-size: 索引大小
  columns: 列
  indexes: 索引
  row-count-est: 估计行数
repository:
  branch-observe-file-change: Bytebase 跟踪文件变更的分支。
  branch-specify-tip: '诀窍: 可以使用诸如 "feature/*" 这样的通配符'
  base-directory: 根目录
  base-directory-description: Bytebase 跟踪文件变更的根目录。如果为空，则他会跟踪整个仓库。
  file-path-template: 文件路径模版
  file-path-template-description: Bytebase 仅会跟踪那些文件路径匹配模版 (相对于指定根目录）的文件。
  file-path-example-normal-migration: 针对普通迁移类型的文件路径样例
  file-path-example-baseline-migration: 针对基线迁移类型的文件路径样例
  schema-path-template: Schema 路径模版
  schema-writeback-description: >-
    如果指定，在每一次迁移之后，Bytebase 将把最新的 Schema
    回写到本来触发迁移的提交分支，回写的具体路径则是相对于前面指定的根目录。如果您不希望 Bytebase 这样做，则置为空。
  schema-writeback-protected-branch: 请保证被变更的分支不是处于保护 (protected) 状态，或者仓库允许他的 maintainer 可以推送变更到保护分支。
  if-specified: 如果指定
  schema-path-example: Schema 路径样例
  git-provider: Git 提供方
  version-control-status: '@.capitalize:common.version-control 已{status}'
  version-control-description-file-path: 数据库迁移脚本存放在 {fullPath}。为了进行一次变更，开发者需要创建一个匹配 {fullPathTemplate} 文件路径格式的迁移脚本。
  version-control-description-branch: 当脚本审核通过并且合并到 {branch} 分支后，Bytebase 将自动发起一条流水线来执行新的 schema 变更。
  version-control-description-description-schema-path: 当 schema 变更完成后, Bytebase 会把变更后的最新 schema 回写到指定的 {schemaPathTemplate}。
  restore-to-ui-workflow: 恢复到 UI 工作流
  restore-ui-workflow-description: |-
    当使用 UI 工作流时，开发者会通过 Bytebase

    控制台直接提交一个 SQL 审核工单，让指定的 DBA 或者开发同事审核。当审核通过后，Bytebase 再执行相应的 SQL 变更。
  restore-ui-workflow-success: 成功恢复到 UI 工作流
  update-version-control-config-success: 成功更新@:common.version-control配置
  setup-wizard-guide: 如果您在过程中遇到问题, 请参考{guide}
  add-git-provider: 添加 Git 提供方
  choose-git-provider: 选择 Git 提供方
  select-repository: 选择仓库
  configure-deploy: 配置部署
  choose-git-provider-description: >-
    选择存放着您数据库 schema 脚本的 Git 提供方。当您把变更脚本推送到 Git 仓库后，Bytebase 会自动创建一条流水线把 schema
    变更应用到数据库上。
  choose-git-provider-visit-workspace: 访问 {workspace} 设置以添加更多 Git 提供方.
  choose-git-provider-contact-workspace-owner: >-
    如果您希望其他 Git 提供方出现在列表中，请联系 Bytebase 实例的所有者。当前 Bytebase 支持自己托管的 GitLab
    EE/CE，我们之后也会支持 GitLab.com, GitHub Enterprise 以及 GitHub.com。
  select-repository-attention-gitlab: >-
    Bytebase 仅列出您至少拥有 'Maintainer' 权限的 GitLab 项目。因为只有至少拥有该权限，才能够配置项目的 webhook
    用来监听代码推送事件。
  select-repository-search: 搜索仓库
  linked: 关联的仓库
workflow:
  current-workflow: 当前工作流
  ui-workflow: UI 工作流
  ui-workflow-description: >-
    经典的 SQL 审核工作流。开发者直接在 Bytebase 上提交一个 SQL 审核工单，然后等待被指派的 DBA
    或者开发同事审核。在审核通过后，Bytebase 会进行相应的 SQL schema 变更。
  gitops-workflow: GitOps 工作流
  gitops-workflow-description: >-
    数据库迁移脚本保存在 Git 仓库中。为了进行一次 schema 变更，开发者会创建一个迁移脚本并且提交至诸如 GitLab 这样的 VCS 进行审核。
    当审核通过并且合并到配置的分支后，Bytebase 会自动开启流水线来进行新的 schema 变更。
  configure-gitops: 配置 Git
  configure-gitops-success: 开启「{project}」GitOps 工作流成功
  change-gitops-success: 变更「{project}」仓库成功
anomaly:
  attention-title: 异常检测
  attention-desc: |-
    Bytebase 会定期扫描托管的资源，并在这里列出检测到的异常。
    该列表大约每 10 分钟刷新一次。
  table-search-placeholder: 搜索{type}或者环境
  table-placeholder: 很棒，没有检测到{type}异常！
  tooltip: '{env} 环境有 {criticalCount} 个严重异常, {highCount} 个高等级异常和 {mediumCount} 个中等级异常'
  types:
    connection-failure: 连接失败
    missing-migration-schema: 缺少迁移 Schema
    schema-drift: Schema 偏差
    backup-enforcement-viloation: 违反备份策略约束
    missing-backup: 缺少备份
  action:
    check-instance: 检查实例
    view-backup: 查看备份
    configure-backup: 配置备份
    view-diff: 查看差异
  last-seen: 上次出现
  first-seen: 首次出现
  contact-dba: 请联系您的 DBA 进行配置。
project:
  dashboard:
    modal:
      title: 如何创建您的'@:{'common.project'}' ?
      content: |-
        在 Bytebase 中，项目的概念与其他常见的的开发工具类似

        一个项目会有属于他的协作成员，并且每一个数据库和工单总是归属于某一个项目

        同时，一个项目可以关联一个代码仓库，并以此来进行版本控制
      cancel: 关闭
      confirm: 不再出现
    search-bar-placeholder: 搜索项目名称
  table:
    key: '@:common.key'
    name: '@:common.name'
    created-at: 创建于
  create-modal:
    project-name: "@:{'common.project'}@:{'common.name'}"
    key: '@:common.key'
    key-hint: （请使用大写字母来命名您的项目）
    cancel: '@:common.cancel'
    confirm: '@:common.create'
    success-prompt: 成功创建 {name}.
  overview:
    view-all: 查看所有
    view-all-closed: 查看所有结束的工单
    recent-activity: 近期@.lower:{'common.activities'}
    in-progress: 进行中
    recently-closed: 近期结束
    info-slot-content: Bytebase 会定时同步实例的 schema，新同步的数据库会首先被置于默认项目中，之后您可以再将他们转移到适当的项目中。
    no-db-prompt: 没有数据库属于当前项目。您可以通过点击位于上方菜单栏中的 {newDb} 或者 {transferInDb} 来添加数据库。
  webhook:
    success-created-prompt: 成功创建 {name} webhook.
    success-updated-prompt: 成功更新 {name} webhook.
    success-deleted-prompt: 成功删除 {name} webhook.
    success-tested-prompt: 测试 webhook 事件成功.
    fail-tested-title: 测试 webhook 事件失败.
    add-a-webhook: 添加 webhook
    create-webhook: 创建 webhook
    last-updated-by: 最后修改人
    destination: 外部应用
    webhook-url: Webhook url
    triggering-activity: 触发事件
    test-webhook: 测试 Webhook
    no-webhook:
      title: 当前项目暂未配置 webhook
      content: 配置 webhook 来让 Bytebase 在完成任务后向您的外部系统推送通知
    creation:
      title: 创建 webhook
      desc: 为 {destination} 创建一个 webhook
      how-to-protect: 您可以通过添加 'Bytebase' 到您的 webhook 关键字白名单中来保护您的 webhook
      view-doc: '{destination} 的官方文档'
    deletion:
      btn-text: 删除这个 webhook
    activity-item:
      issue-creation:
        title: 创建@:common.issue
        label: 当一个新的工单被创建
      issue-status-change:
        title: 工单状态变更
        label: 当一个工单的状态发生变更
      issue-task-status-change:
        title: 工单任务状态变更
        label: 当一个工单包含的任务状态发生了变更
      issue-info-change:
        title: 工单信息变更
        label: '当一个工单的信息 (比如: 分配人, 标题, 描述) 发生了变更'
      issue-comment-creation:
        title: 工单被评论
        label: 当新的工单评论被创建
  settings:
    success-updated-prompt: 成功更新 {subject}.
    success-member-added-prompt: 成功将 {name} 添加到当前项目中.
    success-member-deleted-prompt: 成功将 {name} 从当前项目移除.
    member-placeholder: 选择用户
    manage-member: 管理成员
    add-member: 添加成员
    owner: '@.upper:common.role.owner'
    developer: '@.upper:common.role.developer'
    archive:
      title: 归档项目
      description: 已归档的项目将不会显示在日常界面，但您仍然可以从归档页面中恢复他。
      btn-text: 归档这个@:common.project
    restore:
      title: 恢复项目
      btn-text: 恢复这个@:common.project
  mode:
    standard: 标准
    tenant: 多租户
  db-name-template: 数据库名称模板
inbox:
  mark-all-as-read: 全部标记为已读
  view-older: 查看更早
version-control:
  setting:
    description: >-
      Bytebase 支持 GitOps 工作流。该工作流下，数据库迁移脚本存储在版本控制系统上
      (VCS)，新创建的迁移脚本会自动触发对应的数据库变更。Bytebase 的所有者先在此配置 VCS，在这之后，项目的所有者就可以从所配置的 VCS
      中选取他们的 Git 仓库。
    description-highlight: 配置 VCS 后，在付费版订阅下，Bytebase 将自动开启通过 VCS 的第三方认证登录
    add-git-provider:
      self: 添加 Git 提供方
      description: >-
        在项目可以启用 GitOps 工作流前，Bytebase 首先需要以在 VCS 中注册为 OAuth 应用的方式和 VCS
        进行集成。以下是配置该集成的步骤，您也可以按照我们的{guide}。
      gitlab-self-host: 自托管 GitLab
      gitlab-self-host-admin-requirement: >-
        您必须是 GitLab 实例的管理员才能进行该配置。否则您需要让您的 GitLab 实例管理员把 Bytebase 先注册为 GitLab
        整个实例级别的 OAuth 应用，之后再让对方提供给您注册完成后的应用 ID 以及 Secret，以让您在「OAuth 应用信息」步骤进行填写。
      ouath-info-correct: OAuth 信息验证成功
      check-oauth-info-match: 请确认 Secret 和注册在 GitLab 实例上的应用信息匹配。
      add-success: 成功添加了 Git 提供方「{vcs}」
      choose: 选择 Git 提供方
      gitlab-self-host-ce-ee: 自托管 GitLab 企业版 (EE) 或者 社区版 (CE)
      basic-info:
        self: 基本信息
        gitlab-instance-url: GitLab 实例 URL
        gitlab-instance-url-label: VCS 实例 URL。请确认这个实例和 Bytebase 之间网络是互通的。
        instance-url-error: 实例 URL 必须以 https:// or http:// 开头
        display-name: 展示名称
        display-name-label: 一个可选的展示名称用以区分不同的 Git 供应方。
      oauth-info:
        self: OAuth 应用信息
        register-oauth-application: 注册 Bytebase 为一个 GitLab 实例级别 (instance-wide) 的 OAuth 应用。
        login-as-admin: 以管理员身份登录 GitLab 实例。这个账号必须是整个 GitLab 实例的管理员 (会看到小扳手在顶栏)。
        visit-admin-page: 通过点击小扳手访问管理员界面，然后导航到「应用」分区，再点击「创建应用」。
        direct-link: 直达链接
        create-oauth-app: 使用如下信息来创建您的 Bytebase OAuth 应用。
        paste-oauth-info: 从刚创建好的应用上粘贴他的应用 ID 和 Secret 到下面的字段。
        application-id-error: 应用 ID 必须是 64 个字母长度
        secret-error: Secret 必须是 64 个字母长度
      confirm:
        confirm-info: 确认信息
        confirm-description: 创建完成后，这个 Git 供应方将出现在项目面板「版本控制」Tab 下，可以被项目所有者选中。
    git-provider:
      application-id-label: 注册为 GitLab 实例级 OAuth 应用的应用 ID。
      view-in-gitlab: 查看 GitLab
      secret-label-gitlab: 注册为 GitLab 实例级 OAuth 应用的 Secret。
      delete: 删除这个提供方前，需要先解除所有仓库的关联。
archive:
  archived: 已归档
  project-search-bar-placeholder: 搜索@.lower:{'common.project'}的名称
  instance-bar-placeholder: 搜索@.lower:{'common.instance'}的名称
  environment-bar-placeholder: 搜索@.lower:{'common.environment'}的名称
deployment-config:
  stage-n: 阶段 {n}
  add-selector: 添加选择条件
  update-success: 成功更新部署配置
  this-is-example-deployment-config: 这是部署配置的样例，你需要在此基础上编辑并保存。
  n-databases: '{n} 个数据库'
  selectors: 选择条件
  wont-be-deployed: 不会被部署
  add-stage: 添加阶段
  name-placeholder: 阶段名称…
  error:
    at-least-one-stage: 至少需要 1 个阶段
    stage-name-required: 需要指定阶段名称
    at-least-one-selector: 每个阶段至少需要 1 个选择条件
    env-in-selector-required: 每个阶段都需要有 "environment In" 选择条件
    env-selector-must-has-one-value: '"environment In" 必须有且只有 1 个值'
    key-required: 需要指定 Key
    values-required: 需要指定值
  project-has-no-deployment-config: 这个项目还没有部署配置。请先{go}。
  go-and-config: 去配置
datasource:
  successfully-deleted-data-source-name: 成功删除数据源'{0}'。
  create-data-source: 创建数据源
  data-source-list: 数据源列表
  all-data-source: 所有数据源
  search-name: 搜索名称
  search-name-database: 搜索名称，数据库
  successfully-created-data-source-datasource-name: 成功创建数据源 '{0}'。
  select-database-first: 先选择数据库
  select-data-source: 选择数据源
  search-user: 搜索用户
  user-list: 用户列表
  revoke-access: 您确定要取消 '{0}' 对 '{1}' 的访问权限？
  grant-data-source: 授予数据源
  grant-database: 授权数据库
  requested-issue: 申请工单
  successfully-revoked-member-principal-name-access-from-props-datasource-name: 成功取消 '{0}' 对 '{1}' 的访问权限。
  your-issue-id-e-g-1234: 您的工单 id (例如 1234)
  member-principal-name-already-exists: '{0} 已经存在'
  successfully-granted-datasource-name-to-addedmember-principal-name: 成功授予 '{1}' '{0}'
  we-also-linked-the-granted-database-to-the-requested-issue-linkedissue-name: 我们也把被授予的数据库链接到了申请工单 '{0}'。
  new-data-source: 新数据源
  connection-name-string-copied-to-clipboard: '{0} 字符串已复制到剪贴板。'
  jdbc-cant-connect-to-socket-database-value-instance-host: 'JDBC 无法连接到 socket {0} '
setting:
  label:
    key: Key
    values: 值
    value-placeholder: 标签值…
sql-editor:
  self: SQL 编辑器
  select-connection: 请选择数据连接
  search-databases: 搜索数据库
  search-results: 搜索结果
  loading-databases: 加载数据库信息...
  close-pane: 关闭面板
  loading-data: 加载数据中...
  table-empty-placehoder: 点击 ”运行“ 执行查询
  no-rows-found: 暂无数据
  download-as-csv: 下载为 CSV 格式
  download-as-json: 下载为 JSON 格式
  only-select-allowed: 只允许执行 {select} 语句
  want-to-change-schema: 如果您想要 {changeschema}
  change-schema: 变更 Schema
  go-to-alter-schema: 您可以点击 “{alterschema}” 按钮，提交一个工单
  table-schema-placeholder: 选择一个表进行查看 Schema
  notify-empty-statement: 请在编辑器中输入 SQL 语句
  notify-multiple-statements: 检测到您输入了多条 SQL 语句。SQL 编辑器只支持执行第一条语句。您可以选择其他语句单独执行。
  notify-invalid-sql-statement: 请检查您的 SQL 语句。
  goto-alter-schema-hint: 请从编辑器顶部选择一个数据库连接
  can-not-execute-query: 加载数据时无法执行查询
  rows: 条记录
  no-history-found: 暂无历史记录
  no-sheet-found: 暂无工作表
  search-history: 搜索历史记录
  search-sheets: 搜索工作表
  hint-tips:
    confirm-to-delete-this-history: 确定删除这条记录？
    confirm-to-delete-this-sheet: 确定删除这条查询语句?
  please-input-the-tab-label: 请输入标签页名称!
  copy-code: 复制代码
  notify:
    copy-code-succeed: 代码复制成功
    copy-share-link: 分享链接已拷贝到剪贴板
    sheet-is-read-only: 分享的工作表是只读的，无法编辑。
  view-all-tabs: 查看所有标签页
  sheet: 工作表
  sheets: 工作表
  connection-holder: 选择一个数据连接或者从左侧面板选择一个工作表以开始
  link-access: 链接访问权限
  private: 私有
  private-desc: 只有您自己可以访问此工作表
  project-desc: 工作表所有者或者项目所有者拥有读、写权限，项目开发者拥有只读权限
  public: 公开
  public-desc: 工作表所有者拥有读写权限，其他人只拥有只读权限.
label:
  empty-label-value: <空值>
  no-label: 没有标签
  error:
    key-necessary: 需要指定 Key
    value-necessary: 需要指定值
    key-duplicated: Key 重复了
    value-duplicated: 值重复了
    max-length-exceeded: 长度不能超过 {len} 字符
    max-label-count-exceeded: 不能多于 {count} 个标签
    cannot-edit-reserved-label: 不能编辑预留标签 "{key}"
  placeholder:
    select-key: 选择 Key…
    select-value: 选择值…
    select-values: 选择值…
  setting:
    description: 标签是一组可用于标识数据库租户的键值对。{link}。
  db-name-template-tips: 让您能够把属于不同租户但是有相同 {placeholder} 的数据库分成一组。{link}。
oauth:
  unknown-event: 未知的事件类型，认证失败
subscription:
  description: 您可以在这里上传您购买的 bytebase 证书来解锁团队版/企业版功能。
  current: 当前版本
  instance-count: 实例数
  expires-at: 过期时间
  description-highlight: 购买证书
  sensitive-placeholder: 粘贴您的证书 - 仅写入
  upload-license: 上传证书
  plan-compare: 比较不同版本的功能，寻找适合您的方案
  disabled-feature: 这是一个订阅版高级功能
  trial: 您可以以 $7 的价格试用 7 天
  trial-comment: 仅首次付费可以试用，可随时退款。
  upgrade: 升级订阅
  per-month: / 月
  per-instance: 每个实例
  free-price-intro: 最多 5 个实例
  team-price-intro: 5 个起步，按年付费
  enterprise-price-intro: 自定义实例数，按年付费
  deploy: 部署
  contact-us: 联系我们
  start-trial: 以 {days} 天 {price} 美元的价格试用
  subscribe: 开始订阅
  current-plan: 当前订阅
  buy: 购买{plan}
  cancel: 取消订阅
  announcement: 您可以随时升级、降级或{cancel}。没有任何隐藏费用。
  update:
    success:
      title: 证书更新成功
      description: 订阅版高级功能已解锁
    failure:
      title: 证书更新失败
      description: 请检查证书是否有效
  features:
    bb-feature-task-schedule-time:
      title: 设定任务执行时间
      desc: 「设定任务执行时间」可以将任务设定在特定时间执行
    bb-feature-instance-count:
      title: 实例数量限制
      desc: 您已达最大实例数量限制，请付费升级来获取更多实例额度。
      remaining: 当前总实例额度为 {total}，目前仅剩 {count} 个份额可用。
      runoutof: 已用尽全部 {total} 个实例额度。
      upgrade: "@:{'subscription.upgrade'}来获取更多实例额度。"
    bb-feature-multi-tenancy:
      title: 多租户
      desc: 「多租户功能」可以同时管理多个属于不同租户的同构数据库，帮您更统一和方便地对多个数据库进行管理和表结构变更。
    bb-feature-approval-policy:
      title: 审批策略
      desc: 「审批策略」可以控制数据库 schema 的变更是否需要手动审批
    bb-feature-backup-policy:
      title: 备份策略
      desc: 「备份策略」可以根据指定的周期自动备份数据库
    bb-feature-backward-compatibility:
      title: 向后兼容
      desc: MySQL 和 TiDB 支持向后兼容的 schema 迁移，可以通过@:{'subscription.upgrade'}来开启该功能。
    bb-feature-rbac:
      title: 角色管理
      desc: 「角色管理」可以赋予成员诸如 DBA 这样的特定角色，可以通过@:{'subscription.upgrade'}来开启该功能。
    bb-feature-3rd-party-login:
      title: 第三方登录
      desc: Bytebase 可自动根据您配置的 VCS 来支持相应的第三方登录。请通过@:{'subscription.upgrade'}来开启该功能。
      login: "请@:{'subscription.upgrade'}来开启该功能"
    bb-feature-schema-drift:
      title: Schema 偏差
      desc: "@:{'subscription.upgrade'}来解锁 schema 偏差异常的自动检测。"
  feature-sections:
    database-management:
      title: 数据库管理
      features:
        instance-count: 实例数
        instance-upto-5: 不多于 5 个
        instance-minimum-5: 5 ~ 无限制
        instance-customized: 自定义
        schema-change: Schema 和数据变更
        migration-history: 迁移历史
        sql-editor: SQL 编辑器
        database-backup-restore: 数据库备份和恢复
        archiving: 归档
        sql-check: SQL 检查
        sql-check-basic: 基础
        sql-check-basic-tooltip: 语法检查、数据库连接检查
        sql-check-advanced: 高级
        sql-check-advanced-tooltip: 基础版功能+向后兼容性检查
        anomaly-detection: 异常检测
        anomaly-detection-basic: 基础
        anomaly-detection-basic-tooltip: 数据库连接异常、备份缺失
        anomaly-detection-advanced: 高级
        anomaly-detection-advanced-tooltip: 基础版功能+ Schema 偏差检测
        schedule-change: 设定任务执行时间
        review-and-backup-policy: 审核和备份策略
        tenancy: 多地域/多租户部署
    collaboration:
      title: 团队协作
      features:
        ui-based-sql-review: 基于 UI 的 SQL 审查
        vsc-workflow: 'VCS 工作流 #GitOps'
        shareable-query-link: 分享查询链接
        im-integration: IM 集成
        inbox-notification: 站内信通知
    admin-and-security:
      title: 管理与安全
      features:
        activity-log: 活动日志
        rbac: RBAC 权限管理
        gitlab-login: 通过 GitLab 账户登录
  plan:
    title: 版本
    free:
      title: 免费版
      label: ''
      desc: 个人或小团队，无专职 DBA
    team:
      title: 团队版
      label: Beta
      desc: 中型团队，有专职 DBA 或 TL 以提高工程速度
    enterprise:
      title: 企业版
      label: 预览版
      desc: 大型组织，有专属 DBA 团队来管理数据库
