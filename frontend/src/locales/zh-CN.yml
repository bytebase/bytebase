common:
  unread: 未读
  read: 已读
  inbox: 通知
  sign-in: 登陆
  sign-up: 注册
  email: 邮箱
  username: 用户名
  password: 密码
  activate: 激活
  activity: 活动
  save: 保存
  cancel: 取消
  comment: 评论
  home: 主页
  settings: 设置
  project: 项目
  projects: 项目
  help: 帮助
  database: 数据库
  databases: 数据库
  description: 描述
  instance: 实例
  instances: 实例
  environment: 环境
  environments: 环境
  bookmark: 书签
  bookmarks: 书签
  quick-action: 快捷操作
  archive: 归档
  quickstart: 快速入门
  logout: 登出
  close: 关闭
  latest: 最新
  error: 错误
  canceled: 已取消
  approval: 批准
  approve: 批准
  done: 完成
  create: 创建
  rollback: 回滚
  run: 运行
  retry: 重试
  skip: 跳过
  reopen: 重开
  dismiss: 关闭
  back: 返回
  next: 下一步
  edit: 编辑
  update: 更新
  visit: 访问
  role:
    dba: DBA
    owner: 所有者
    developer: 开发者
  role-switch:
    dba: 切换到 DBA
    owner: 切换到所有者
    developer: 切换到开发者
  assignee: 审核人
  revert: 恢复
  apply: 应用
  reorder: 排序
  id: ID
  name: 名称
  creator: 创建人
  version: 版本
  issue: 工单
  duration: 时长
  created-at: 创建于
  updated-at: 更新于
  commit: 提交
  statement: 语句
  sql-statement: SQL @:{'common.statement'}
  snapshot: 快照
  status: 状态
  stage: 阶段
  sql: SQL
  unassigned: 未指派
  new: 创建
  add: 添加
  query: 查询
  transfer: 转移
  detail: 详情
  type: 类型
  language: 语言
  repository: 仓库
  change: 变更
  branch: 分支
  config-guide: 配置指南
  required-placeholder: 必需的占位符
  optional-placeholder: 可选的占位符
  enabled: 开启
  default: 默认
  version-control: 版本控制
  restore: 重置
  detailed-guide: 详细指南
  workspace: 工作空间
error-page:
  go-back-home: 回到主页
anomaly-center: 异常中心
kbar:
  recently-visited: 最近访问
  navigation: 导航
  help:
    navigate: 选择
    perform: 执行
    close: 关闭
    back: 返回
  options:
    placeholder: 输入命令或搜索…
  preferences:
    common: 偏好设置
    change-language: 更改语言…
task:
  checking: 检查中…
  run-task: 运行检查
  check-result:
    title: "{name} 的检查结果"
  check-type:
    fake: Fake
    syntax: 语法
    compatibility: 兼容性
    connection: 连接
    migration-schema: 迁移 schema
  comment: 评论
  invoker: 执行者
  started: 开始于
  ended: 结束于
  view-migration: 查看迁移
  view-migration-history: 查看迁移历史
banner:
  demo-intro: 这是 Bytebase 的演示版本。
  demo-intro-readonly: 这是 Bytebase 的只读演示版本
  action: 5 秒部署您自己的服务
intro:
  content: >-
    Bytebase 是为 DBA 和开发人员在数据库表结构 (schema) 变更上进行协作而设计的。用户可以通过一个 pipeline，来推进
    schema 在多个环境中的变化。同时用户也可以把 schema 保存在 VCS 中 ，再由新的 schema 文件提交来触发
    pipeline。请通过左下角的{quickstart}来熟悉该产品。如果遇到问题，请访问{doc}或在 GitHub 上报告{issue}。
  doc: 文档
  issue: 工单
  quickstart: 快速入门
bbkit:
  common:
    ok: 确认
    cancel: 取消
    back: 退回
    next: 下一步
    finish: 完成
    step: 步骤
  attention:
    default: 特别注意
settings:
  sidebar:
    account: 账户
    profile: 个人信息
    workspace: 工作空间
    general: 通用
    members: 成员
    version-control: 版本控制
    plans: 价格方案
  profile:
    email: 邮箱
    role: 角色
    password: 密码
    password-placeholder: 敏感数据 - 仅写入
    password-confirm: 确认密码
    password-confirm-placeholder: 再次输入以确认
    password-mismatch: 密码输入不一致
    plan: （升级到团队方案来开启角色管理）
  workspace:
    url-section: SQL Console URL
    url-tip: "提示: 用 {schema} 作为真实数据库名称的占位符"
    tip: >-
      如果您的团队使用一个单独的 SQL 控制台，如 phpMyAdmin，那么可以在这里提供它的 URL 模板，Bytebase
      就可以将控制台链接到相关的数据库和表的界面上。
    tip-link: 详细指引
  members:
    active: 已激活
    inactive: 未激活
    helper: 通过邮箱添加或邀请成员
    add-more: + 增加成员
    add: 添加
    invites: 发送邀请
    invited: 已邀请
    yourself: 您自己
    upgrade: 升级付费方案来解锁其他角色
    select-role: 选择角色
    not-assigned: 未指派
    table:
      account: 账户
      role: 角色
      update-time: 更新时间
    action:
      deactivate: 禁用
      deactivate-confirm-title: 确定禁用
      deactivate-confirm-description: 之后可以重新启用
      reactivate: 启用
      reactivate-confirm-title: 确定启用
    tooltip:
      upgrade: 升级到团队版来开启成员管理
      not-allow-edit: 只有所有者才能改变角色
      not-allow-remove: 不能移除最后一个所有者
activity:
  name: 名称
  comment: 评论
  created: 创建于
  invoker: 执行者
  sentence:
    created-issue: 创建工单
    commented: 评论
    reassigned-issue: 将工单由 {oldName} 重新指派给 {newName}
    assigned-issue: 将工单指派给 {newName}
    unassigned-issue: 将工单由 {oldName} 解除指派
    invalid-assignee-update: 无效的指派操作
    changed-description: 修改描述
    changed-from-to: 将 {name} 从 "{oldValue}" 修改为 "{newValue}"
    unset-from: 撤销 {name} 的值 (从 "{oldValue}")
    set-to: 将 {name} 设置为 "{newValue}"
    changed-update: 修改 {name}
    reopened-issue: 重开工单
    resolved-issue: 解决工单
    canceled-issue: 取消工单
    empty: ""
    changed: 修改
    updated: 更新
    canceled: 取消
    approved: 批准
    started: 开始
    completed: 完成
    failed: 失败
    task-name: 任务 {name}
    committed-to-at: 提交 {file} 到 {branch}{'@'}{repo}
  subject-prefix:
    task: 任务
issue:
  waiting-approval: 等待批准
  opened-by-at: "{id} 由 {creator} 开启于 {time}"
  commit-by-at: "{id} {title} 由 {author} 提交于 {time}"
  status-transition:
    modal:
      resolve: 解决工单?
      cancel: 取消整个工单?
      reopen: 重开工单?
    dropdown:
      resolve: 解决
      cancel: 取消工单
      reopen: 重开
    form:
      note: 笔记
      placeholder: （可选）添加一段笔记…
  subscribe: 订阅
  unsubscribe: 取消订阅
  subscriber: 没有订阅者 | 1 个订阅者 | {n} 个订阅者
  apply-to-other-stages: "@:{'common.apply'}到其他@:{'common.stage'}"
  add-sql-statement: 添加 SQL @:{'common.statement'}…
  optional-add-sql-statement: （可选）添加 SQL @:{'common.statement'}…
  rollback-sql: "@:{'common.rollback'} SQL"
  add-rollback-sql-statement: 添加 @:{'common.rollback'} SQL @:{'common.statement'}…
  edit-description: 编辑描述
  add-some-description: 添加一些描述…
  add-a-comment: 添加评论
  edit-comment: 编辑评论
  leave-a-comment: 发表一条评论…
  view-commit: 查看提交
  search-issue-name: 搜索工单名称
  table:
    open: 开启中
    closed: 已关闭
    status: 状态
    project: 项目
    name: 名称
    environment: 环境
    db: 数据库
    progress: 进度
    updated: 更新于
    assignee: 审核人
  stage-select:
    active: "{name}（活动中）"
alter-schema:
  vcs-enabled: 该项目开启了基于 VCS 的版本管理，选择下面的数据库会将您导航到相应的 Git 仓库以创建 schema 变更。
  vcs-info: 代表项目开启了基于 VCS 的版本管理。选择该类项目下的数据库会将您导航到对应的 Git 仓库以创建 schema 变更。
  alter-single-db: 变更单个数据库
  alter-multiple-db: 变更多个数据库
  alter-multiple-db-info: 针对每个环境，您可以选择一个数据库进行变更或者直接跳过该环境，这样您就可以在一条流水线上把 schema 变更逐步作用到多个环境。
quick-action:
  alter-schema: 变更 Schema
  create-db: 创建数据库
  choose-db: 选择数据库
  new-db: 创建数据库
  add-instance: "@:common.add@:common.instance"
  create-instance: "@:common.create@:common.instance"
  manage-user: 成员管理
  default-project: 默认项目
  add-environment: "@:common.add@:common.environment"
  create-environment: "@:common.create@:common.environment"
  new-project: "@:common.new@:common.project"
  create-project: "@:common.create@:common.project"
  edit-data: 编辑数据
  troubleshoot: 问题排查
  transfer-in-db: 转移数据库
  request-db: 申请数据库
  from-default-project: 从默认项目
  from-other-projects: 从其他项目
  transfer-in-db-title: 从其他项目转移数据库
  transfer-in-db-hint: Bytebase 会定期同步实例的 Schema。新同步的数据库会放在默认项目中。
  transfer-in-db-alert: 您确定要转移 "{ dbName }" 到我们的项目中吗？
create-db:
  new-database-name: 新数据库名称
  reserved-db-error: "{databaseName} 是一个预留名称"
db:
  encoding: 字符编码
  character-set: 字符集
  collation: 字符排序规则
  select: 选择数据库
  select-instance-first: 先选择实例
  select-environment-first: 先选择环境
instance:
  select: 选择实例
environment:
  select: 选择环境
  archive: 归档此环境
  archive-info: 已归档环境不会显示。您可以从归档界面恢复。
  create: 创建环境
quick-start:
  bookmark-an-issue: 收藏工单
  add-a-comment: 添加评论
  visit-project: "@:common.visit@:common.projects"
  visit-instance: "@:common.visit@:common.instances"
  visit-database: "@:common.visit@:common.databases"
  visit-environment: "@:common.visit@:common.environments"
  add-a-member: 添加成员
  notice:
    title: 快速入门导览已关闭
    desc: 您稍后仍可以从右上角的菜单中再次打开快速入门导览
auth:
  sign-up:
    title: 注册您的账号
    admin-title: 设置 {account}
    admin-account: 管理员账号
    create-admin-account: 注册管理员
    confirm-password: 确认密码
    confirm-password-placeholder: 确认您的密码
    password-mismatch: 不匹配
    existing-user: 已有账号?
  sign-in:
    title: 登陆您的账号
    forget-password: 忘记密码?
    new-user: 第一次使用 Bytebase?
  password-forget:
    title: 忘记了您的密码？
    content: 请联系的您的 Bytebase 管理员重置密码
    return-to-sign-in: 返回登陆
  password-reset:
    title: 重置您的密码
    content: 我们会将重置密码链接发送到您的邮箱
    send-reset-link: 发送重置链接
    return-to-sign-in: 返回登陆
  activate:
    title: 激活您的 {type} 账号
policy:
  approval:
    name: 审批策略
    info: 要更改数据库 schema，该选项控制了是否需要手动审批。
    manual: 需要人工审批
    manual-info: 进行中的 schema 改动任务只有被人工审批后才会执行。
    auto: 无需审批
    auto-info: 进行中的任务无需审核并且会被自动执行。
  backup:
    name: 数据库备份策略
    not-enforced: 无策略
    not-enforced-info: 无备份策略。
    daily: 每日
    daily-info: 每日备份数据库。
    weekly: 每周
    weekly-info: 每周备份数据库。
migration-history:
  self: 迁移历史
  workflow: 工作流
  commit-info: 由 {author} 于 {time}
  no-schema-change: 本次迁移没有任何 Schema 的改动
  show-diff: 显示差异
  left-vs-right: 之前 (左) vs 当前版本 (右)
  schema-snapshot-after-migration: 完成这次迁移后的 schema 快照
  list-limit: 对于有迁移历史的数据库，我们会在下面最多列出5条记录。您可以点击数据库名称去进一步查看全部的记录。
  no-history-in-project: 这个项目下没有发现任何数据库有迁移历史。
  recording-info: 每当数据库 schema 变更时，我们便会记录下迁移历史。
  establish-baseline: 建立新的基线
  refreshing-history: 刷新历史中 ...
  config-instance: 配置实例
  establish-baseline-description: >-
    Bytebase 将用当前的 schema 作为新的基线。您应该检查当前的基线确实反映了期望的状态。 对于 VCS
    工作流来说，也只有在建立起基线的前提下，才能进行数据库变更。
  establish-database-baseline: 建立「{name}」基线
  instance-missing-migration-schema: 实例「{name}」缺失用于记录迁移历史的 schema。
  instance-bad-connection: 无法连接实例「{name}」以获取迁移历史。
  contact-dba: 请联系你的 DBA 进行配置。
repository:
  branch-observe-file-change: Bytebase 跟踪文件变更的分支。
  branch-specify-tip: '诀窍: 可以使用诸如 "feature/*" 这样的通配符'
  base-directory: 根目录
  base-directory-description: Bytebase 跟踪文件变更的根目录。如果为空，则他会跟踪整个仓库。
  file-path-template: 文件路径模版
  file-path-template-description: Bytebase 仅会跟踪那些文件路径匹配模版 (相对于指定根目录）的文件。
  file-path-example-normal-migration: 针对普通迁移类型的文件路径样例
  file-path-example-baseline-migration: 针对基线迁移类型的文件路径样例
  schema-path-template: Schema 路径模版
  schema-writeback-description: >-
    如果指定，在每一次迁移之后，Bytebase 将把最新的 Schema
    回写到本来触发迁移的提交分支，回写的具体路径则是相对于前面指定的根目录。如果您不希望 Bytebase 这样做，则置为空。
  schema-writeback-protected-branch: 请保证被变更的分支不是处于保护 (protected) 状态，或者仓库允许他的 maintainer 可以推送变更到保护分支。
  if-specified: 如果指定
  schema-path-example: Schema 路径样例
  git-provider: Git 实例
  version-control-status: '@.capitalize:common.version-control 已{status}'
  version-control-description-file-path: 数据库迁移脚本存放在 {fullPath}。为了进行一次变更，开发者需要创建一个匹配 {fullPathTemplate} 文件路径格式的迁移脚本。
  version-control-description-branch: 当脚本审核通过并且合并到 {branch} 分支后，Bytebase 将自动发起一条流水线来执行新的 schema 变更。
  version-control-description-description-schema-path: 当 schema 变更完成后, Bytebase 会把变更后的最新 schema 回写到指定的 {schemaPathTemplate}。
  restore-to-ui-workflow: 重置到 UI 工作流
  restore-ui-workflow-description: "当使用 UI 工作流时，开发者会通过 Bytebase \b控制台直接提交一个 SQL 审核工单，让指定的 DBA 或者开发同事审核。当审核通过后，Bytebase 再执行相应的 SQL 变更。"
  restore-ui-workflow-success: 成功重置到 UI 工作流
  update-version-control-config-success: 成功更新@:common.version-control配置
  setup-wizard-guide: 如果您在过程中遇到问题, 请参考{guide}
  choose-git-provider: 选择 Git 提供方
  select-repository: 选择仓库
  configure-deploy: 配置部署
  choose-git-provider-description: >-
    选择存放着您数据库 schema 脚本的 Git 提供方。当您把变更脚本推送到 Git 仓库后，Bytebase 会自动创建一条流水线把 schema
    变更应用到数据库上。
  choose-git-provider-visit-workspace: 访问 {workspace} 设置以添加更多 Git 提供方.
  choose-git-provider-contact-workspace-owner: >-
    如果您希望其他 Git 提供方出现在列表中，请联系 Bytebase 实例的所有者。当前 Bytebase 支持自己托管的 GitLab
    EE/CE，我们之后也会支持 GitLab.com, GitHub Enterprise 以及 GitHub.com。
  select-repository-attention-gitlab: >-
    Bytebase 仅列出您至少拥有 ’Maintainer' 权限的 GitLab 项目。因为只有至少拥有该权限，才能够配置项目的 webhook
    用来监听代码推送事件。
  select-repository-search: 搜索仓库
workflow:
  current-workflow: 当前工作流
  ui-workflow: UI 工作流
  ui-workflow-description: >-
    经典的 SQL 审核工作流。开发者直接在 Bytebase 上提交一个 SQL 审核工单，然后等待被指派的 DBA
    或者开发同事审核。在审核通过后，Bytebase 会进行相应的 SQL schema 变更。
  gitops-workflow: GitOps 工作流
  gitops-workflow-description: >-
    数据库迁移脚本保存在 Git 仓库中。为了进行一次 schema 变更，开发者会创建一个迁移脚本并且提交至诸如 GitLab 这样的 VCS 进行审核。
    当审核通过并且合并到配置的分支后，Bytebase 会自动开启流水线来进行新的 schema 变更。
  configure-gitops: 配置 Git
  configure-gitops-success: 开启「{project}」GitOps 工作流成功
  change-gitops-success: 变更「{project}」仓库成功
anomaly:
  attention-title: 异常检测
  attention-desc: |-
    Bytebase 会定期扫描托管资源并在这里列出检测到的异常。
    该列表大约每 10 分钟刷新一次。
  table-search-placeholder: 搜索{type}或者环境
  table-placeholder: 很棒，没有检测到{type}异常！
  tooltip: "{env} 环境有 {criticalCount} 个严重异常, {highCount} 个高等级异常和 {mediumCount} 个中等级异常"
  types:
    connection-failure: 连接失败
    missing-migration-schema: 缺少迁移 Schema
    schema-drift: Schema 偏差
    backup-enforcement-viloation: 违反备份策略约束
    missing-backup: 缺少备份
  action:
    check-instance: 检查实例
    view-backup: 查看备份
    configure-backup: 配置备份
    view-diff: 查看差异
  last-seen: 上次出现
  first-seen: 首次出现
inbox:
  mark-all-as-read: 全部标记为已读
  view-older: 查看更早
